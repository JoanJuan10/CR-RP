/*
*
*	Script:			Optimus RolePlay
*	Versión:		3.0
*	Autor:			Spell
*
*/

#include <a_samp>
#include <nativefuncs>
#include <fixes>
#include <gvar>
#include <YSI\y_timers>
#include <YSI\y_ini>
#include <pause>
#include <streamer>
#include <zcmd>
#include <sscanf2>
#include <seif_walk>
#include <_progress>
#include <mSelection>
#include <a_mysql>
#include <playerprogress>
#include <CleoFuck>

#include <optimus\optimization>
#include <optimus\anticheat>
#include <optimus\utils>
#include <optimus\mysql>
#include <optimus\maps>
#include <optimus\vehicle>

#if ANTIC_VERSION != (12)
	#error OLD anticheat.inc (Current version: 12)
#endif

AntiDeAMX()
{
   new a[][] = { "Unarmed (Fist)", "Brass K" };
   #pragma unused a
}

// Version 3 final
#define V3

// -----====] General [====---- //

//Debug de vehículos

#define MAX_VEHICLE_MODELS      (612)
#define MAX_VEHICLES_VENTA 		(300)

//EMAIL Y REGISTRO
#define MAILER_URL 				"PROXIMAMENTE"
#define MAILER_MAX_MAIL_SIZE  	(1024)

//Registro
#define HEADER_REGISTRO         "{FFFFFF}Registrese en {92CFB4}Ciudad Real Roleplay (V3)"

#define DIALOG_REGISTRO 		"\n\t\t\t{ffffff}________________________________\n\n\t\t\t¡BIENVENIDO A {92CFB4}Ciudad Real Roleplay{FFFFFF}!\n\t\t\t________________________________\n\n\n\n• Escriba una contraseña para registrar la cuenta {00C0FF}%s {FFFFFF}en el servidor.\n\n\n"
#define DIALOG_REGISTRO2        "\n\n{FFFFFF}Ahora, escribe tu contraseña nuevamente para confirmar.\n\n\n"

//Email
#define DIALOG_EMAIL            "\n\n{FFFFFF}¡Falta poco para terminar! Ahora, deberá escribir su dirección de correo electrónico para terminar de confirmar\nsu cuenta. El sistema le enviará un email con un {92CFB4}código de activación{FFFFFF}, que luego deberá escribir dentro del juego.\nRecuerde que si proporciona un email falso, no podrá registrar su cuenta, no recibirá ningún código de activación.\n\n\nEscriba su dirección de correo electrónico:"
#define DIALOG_EMAIL2			"\n\n{FFFFFF}¿Enviar el correo electrónico con el código de activación a {92CFB4}%s{FFFFFF}?\n\n\n"
#define DIALOG_EMAIL3           "\n\n			{FFFFFF}El correo fue enviado a {92CFB4}%s{FFFFFF}.\n\n\n\n\n{FFFF00}¿Aún no recibió nada? {FFFFFF}\n\n	>> El correo puede tardar hasta un máximo de 5 minutos en llegar a su destinatario.\n\n	>> Revise en 'correo no deseado' (debajo de 'bandeja de entrada' en caso de usar outlook).\n	    Posiblemente sus filtros marcaron nuestro correo como SPAM.\n\n\n\nA continuación, escriba el código de activación recibido:"

//Ingreso
#define HEADER_INGRESO          "{FFFFFF}Identifiquese en {92CFB4}Ciudad Real Roleplay (V3)"
#define DIALOG_INGRESO          "\n\t\t\t\t{ffffff}________________________________\n\n\t\t\t\t¡BIENVENIDO A {92CFB4}Ciudad Real Roleplay{FFFFFF}!\n\t\t\t\t________________________________\n\n\n\nLa cuenta {00C0FF}%s {FFFFFF}está registrada en el servidor. Si es el propietario de esta cuenta, escriba\nsu contraseña para ingresar a jugar. De lo contrario, vuelva a entrar al juego usando otro nombre.\n\n\n\n"

//Config
#define OPTIMUS_EMAIL           "PROXIMAMENTE"

//WEB/NOMBRE (CONFIGURACIÓN GENERAL)
#define FORO_SERVER "ciudadrealrp.x10.bz"
#define NOMBRE_SERVER "|| Ciudad Real - Roleplay en Español ||"
#define MODE_SERVER "CR:RP V4 - RolePlay en español"
#define RCON_SERVER "joselinmayjanire27"

//Anti bots
#define MAX_CONNECTIONS_PER_IP	(3)

//Máximos caracteres
#define MAX_CARACTERES_CLAVE    25
#define MAX_CARACTERES_PS       25
#define MAX_CARACTERES_RS       25

//Walkie-Talkie
#define TIME_OWNFREQUENCE (3600*24*7)

//MLCL
#define MLCL_TYPE_MOCHILA   (0)
#define MLCL_TYPE_MALETIN   (1)

#define MLCL_MAX_ITEMS      (4)

#define MALETIN_MAX_SIZE    (4)
#define MOCHILA_MAX_SIZE    (3)

#define MLCL_R_SUCCESS          (0)
#define MLCL_R_OCCUPIED         (1)
#define MLCL_R_NOLUGAR         	(2)

//Navidad
#define CORDS_NAVIDAD 1516.3147,-1658.5942,13.5566

//Laboratorios
#define CORDS_LAB_BIGFOOT_EXT   -777.9786,-2119.8306,25.1776
#define CORDS_LAB_BIGFOOT_INT   2569.7390,-1301.8630,1044.1250
#define VW_BIGFOOT              55555

#define MIN_LAB_BIGFOOT         -1039.331, -2253.83
#define MAX_LAB_BIGFOOT         -408.7256, -1728.326

#define MIN_ATACANTES_BIGFOOT    7

//Fabrica de Armas
#define CORDS_FAB_BLACKASO_EXT   90.0563,-314.9581,1.5781
#define CORDS_FAB_BLACKASO_INT   287.0139,1958.3180,1010.2794
#define VW_BLACKASO              66666

#define MIN_ATACANTES_BLACKASO    7

//Niveles
#define Minutos_Nivel      1

//Sistema de objetos
#define MAX_OBJETOS     200

//Tecla para entrar
#define MSG_TECLAENTRAR "\n\n"#CINFO"Presione [~k~~CONVERSATION_YES~]"

//Recuperado del hospital
#define HOSP_POS_RECUPERADO 	1149.0027,-1317.7538,13.6857
#define HOSP_ANG_RECUPERADO 	(270.0)

#define HOSP_POS_TERMINO		1183.9354,-1324.0975,13.5758
#define HOSP_ANG_TERMINO 		(270.0)

#define HOSP_POS_CAMERA_POS     1207.39, -1294.71, 24.61
#define HOSP_POS_CAMERA_LOOK    1181.72, -1322.65, 13.58

#define PRECIO_MUERTE   500

//Cámaras de Velocidad
#define MAX_CAMARAS_VELOCIDAD   (50)
#define OBJ_CAMARAVELOCIDAD     (18880)
new Iterator:Camaras<MAX_CAMARAS_VELOCIDAD>;

//Interiores optimizados
#define MAX_OBJETOS_INTERIOR    (500)

//SMS
#define MAX_SMS_TEXT    (2)

//Sistema de ropa
#define MAX_ROPA 4

//Robos
#define MIN_ENTRE_ROBOS   5

//Antecedentes
#define MAX_ANTECEDENTES 			 10
#define MAX_CARACTERES_ANTECEDENTE   50

//KeyPads/KeyControl
#define MAX_KEYPAD (100)
#define OBJ_KeyPad (19273)

new Iterator: KeyPads<MAX_KEYPAD>;

//Sistema de contraseña (casas)
#define MAX_KEY_NUMBERS (4)

#define H_TYPE_DOOR     	(1)
#define H_TYPE_DOOR_CONFIG  (2)
//Logs
// #define ANUNCIO_SERVICIO

#define LOG_CHAT false
#define CMD_LOG  true

//Radios
#define RADIO_LSTV      (0)
#define RADIO_REGGAE    (1)
#define RADIO_RAP   	(2)
#define RADIO_APAGAR    (3)

new
	URL_REGGAE[] = "http://yp.shoutcast.com/sbin/tunein-station.pls?id=5661",
	URL_RAP[] = "http://yp.shoutcast.com/sbin/tunein-station.pls?id=9054";

//Cargando su cuenta
#define TEXT_WELCOME_LOADING    "Espere~n~~n~~w~Cargando su ~b~~h~~h~cuenta"

//Graffitis
#define MAX_GRAFFITIS   		(650)
#define MAX_GRAFFITI_SEGS   	(20)
#define ID_OBJGRAFFITI      	(19172)
#define MAX_GRAFFITIS_PERSONA   (5)

#define GRAFFITI_FONT       "Algerian" //Algerian - Old English Text MT - Castellar - Onyx

new Iterator:Graffiti<MAX_GRAFFITIS>;

//Contratos
#define MAX_CONTRATOS   (30)

//Casilleros
#define MAX_ITEMS_CASILLERO_LSPD    (10)
#define MAX_ITEMS_CASILLERO_LSEM    (10)

//Estacion de servicio
#define MAX_ESTACIONES      (100)
#define MAX_LITROS_ESTACION (5000)
#define ID_OBJESTACION      3465 // (1676) explotan

new Iterator:Estacion<MAX_ESTACIONES>;

//Precios generales
#define PRECIO_GASEOSA  	25
#define PRECIO_MENUCHICO  	50
#define PRECIO_MENUGRANDE 	90

#define PRECIO_GASOLINA     (3)

//Camaras LSPD - de seguridad
#define MAX_CAMARAS 4

//TAZER
#define WEAP_TAZER 23

//Checkpoints
#define CHECKPOINT_STREAM   5000.0

//Peajes

//Cords
#define C_PEAJE_SF_0 	58.27050,-1527.54785,4.86570
#define C_PEAJE_SF_1    56.23930,-1536.98804,4.86570

#define C_PEAJE_LV_0    1631.35632,-2.25561,35.90107
#define C_PEAJE_LV_1    1628.20935,-4.01320,36.46930

//Rot
#define R_PEAJE_SF_0_A  0.00000,-360.00000,-99.00000
#define R_PEAJE_SF_0_C  0.00000,-91.22000,-99.42000

#define R_PEAJE_SF_1_A  0.00000,-360.00000,-99.00000
#define R_PEAJE_SF_1_C  0.00000,-269.32001,-98.40001

#define R_PEAJE_LV_0_A  0.00000,0.00000,114.12002
#define R_PEAJE_LV_0_C	0.00000,-360.00000,22.00000

#define R_PEAJE_LV_1_A  0.00000,-360.00000,22.00000
#define R_PEAJE_LV_1_C  0.00000,-91.00000,21.70000

//Inventario
#define MAX_ITEMS_INVENTARIO    (10)

#define MAX_INV_SIZE            (2)
#define MAX_SIZE_TO_CARRY       (5)

#define INV_ERR_BIG             (1)
#define INV_ERR_NO_SIZE         (2)
#define INV_ERR_USED         	(3)

#define INV_SUCCESS             (0)

enum E_INV_DATA
{
	invObject,
	invData
}

//Plantas
#define MAX_PLANTAS			       	(500)
#define MAX_PLANTAS_JUGADOR         3

#define ID_OBJPLANTA                (19473)
#define ID_OBJPLANTA_COCA           (811)

#define PLANTA_MARIHUANA            (0)
#define PLANTA_COCA            		(1)

#define MAX_GR_PLANTA_COCA          (70)
#define MAX_GR_PLANTA_MARI          (50)

#define HORAS_EFECTO_RIEGO      (12)

new Iterator:Planta<MAX_PLANTAS>;

//GangZones
#define MIN_ATACANTES_GZ     6
#define TIEMPO_GUERRA_GZ     (60*3)

//Size (Negocios y casas)

#define MAX_CARACTERES_NAME     24

#define SISTEMA_BANCO   false

// GetVehType
#define VEHICLE_TYPE_UNKNOWN    (-1)
#define VEHICLE_TYPE_AIRCRAFT   (0)
#define VEHICLE_TYPE_BICYCLE 	(1)
#define VEHICLE_TYPE_BIKE   	(2)
#define VEHICLE_TYPE_CAR     	(3)
#define VEHICLE_TYPE_BOAT       (4)
#define VEHICLE_TYPE_TRAIN      (5)
#define VEHICLE_TYPE_OTHER      (6)

// Camioneros [LVL 2]
#define CARGA_COMIDA (0)
#define CARGA_GRANO  (1)
#define CARGA_TIERRA (2)

// -----====] Seguridad [====---- //

#define ACTIVAR_SEGURIDAD true

#if ACTIVAR_SEGURIDAD == true

	#define RakSAMP "DA0E5085558CCACC88ECCA40C4CEC49A9408EEE8"
	#define MenorTiempo   10000
	#define Logueos       2

#endif

// -----====] Licencias [====---- //

#define LIC_Check1 1391.9802,-37.8126,1000.480,5
#define LIC_Check2 1407.9252,-1.1173,1000.4879,5
#define LIC_Check3 1375.6302,-21.4366,1000.490,5
#define LIC_Check4 1401.7589,-44.9000,1000.470,5

// ----=== [ Vehiculos ] ---==== //

//Venta
#define PRECIO_VEHRENTA         		300

//Multas
#define MAX_MULTAS_VEH                  (4)
#define PRECIO_DESEMBARGAR              (13500)

//Maletero
#define MAX_LUGARES_MALETERO            (20)

//Armario
#define MAX_LUGARES_CASA                12

// -----====] Sistema de portones [====---- //

#define EDIT_POS    			1
#define EDIT_ABIERTO    		2
#define PVar_PORTON      		"Editar_porton"
#define MAX_PORTONES  			50

// ----=====] Pandillas [=====----- //

#define MAX_GZS     50

// ----=====] Televisores [====----- //

#define MAX_TVS         30

#define CANAL_AV1 		1
#define CANAL_AV2 		2
#define CANAL_LSTV      3

// ----=====] ID's vehiculos [=====---- //

#define MIN_VEH_RENTA       82
#define MAX_VEH_RENTA       105
#define MIN_VEH_LSPD     	(MAX_VEH_RENTA+1)
#define MAX_VEH_LSPD    	45
#define MIN_VEH_LSEM    	(MAX_VEH_LSPD+1)
#define MAX_VEH_LSEM        73
#define MIN_VEH_LSMD		(MAX_VEH_LSEM+1)
#define MAX_VEH_LSMD    	88
#define MIN_CAMIONES    	(MAX_VEH_LSMD+1)
#define MAX_CAMIONES    	MAX_VEHICLES
#define MIN_COSECHADORAS 	109
#define MAX_COSECHADORAS    112
#define MIN_VEH_LSTV     	(MAX_COSECHADORAS+1)
#define MAX_VEH_LSTV        123
#define MIN_VEH_MECANICOS   (MAX_VEH_LSTV+1)
#define MAX_VEH_MECANICOS   128
#define MIN_VEH_BICIS       (MAX_VEH_MECANICOS+1)
#define MAX_VEH_BICIS       (MIN_VEH_BICIS+9)
#define MIN_VEH_BASUREROS   (MAX_VEH_BICIS+1)
#define MAX_VEH_BASUREROS   (MIN_VEH_BASUREROS+7)
#define MIN_VEH_GOB         (MAX_VEH_BASUREROS+1)
#define MAX_VEH_GOB         (MIN_VEH_GOB+11)
#define MIN_VEH_HIT         (MAX_VEH_GOB+1)
#define MAX_VEH_HIT         (MIN_VEH_HIT+7)

// ----=====] Macros [=====---- //

#define CALLBACK:%0(%1)   					forward %0(%1); public %0(%1)
#define Loop(%0,%1,%2)  					for(new %0 = %2; %0 < %1; %0++)
#define Mensaje         					SendClientMessage
#define TextoJugador 						GameTextForPlayer
#define TextoTodos 							GameTextForAll
#define Dialog(                 			ShowPlayerDialog(
#define Comando_En_Auto 					if(!IsPlayerInAnyVehicle(playerid)) return Error(playerid,"¡Debes estar en un vehículo para utilizar este comando!");
#define Para_Admin_Servicio     			if(!GetPVarInt(playerid,"ADMIN_ONDUTY")) return Error(playerid,"¡Debes estar en Servicio! (/admservice)");
#define ParamsINC(%1,%2) 					Mensaje(%1,-1, ""#CAZULRARO"» "#CBLANCO"El comando, es: "#CAZULRARO"" %2)
#define PRESSED(%0)							(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
#define HOLDING(%0) 						((newkeys & (%0)) == (%0))
#define PosJugador[%0]          			InfoJugador[playerid][jPos%0]
#define A_Format(%1,            			format(%1,sizeof(%1),
#define int 								floatround
#define PlayerCP<%1>:                       if(PlayerCP:checkpointid == Checkpoint_Jugador[playerid][%1])
#define CheckpointGPS(%0,%1,%2,%3,%4)		SetPlayerCP(%0,CP_GPS,%1,%2,%3,%4)
#define AbreviarCMD(%0,%1)                  CMD:%1(a,b[]) return cmd_%0(a,b)
#define DelayFix(%0)    					floatround(floatmul(float(%0),0.684))
#define InvLoop(%0,%1)         				for(new %0, itemmm_ = GetInvItemPlayer(%1); %0 < itemmm_; %0++)
#define Manos_Desocupadas                   if(GetObject(playerid) != -1) return Error(playerid, "Debes tener la ~g~mano ~w~desocupada.");
#define GOAT                                GetObjectAtType
#define strclr(%0)     						strmid(%0,"",0,0)
#define boolean(%1) 						(%1) ? (true) : (false)
#define MensajeAdminF(%0,%1,%2,%3)			MensajeAdminF2(%0,%2,%1,%3)
#define GetFactionName                      NombreFaccion
#define query_WRITE                         -1, query_type_none
#define player_getVar(%0,%1)				InfoJugador[%0][%1]

// ----=====] ANIM RESTRICTION [====----- //

#define AnimCMD;                            if (Cracked[playerid]) return 1;\
											if (Freezed[playerid]) return 1;

// ----=====] MySQL [====------ //

#define f_mysql_tquery(%0,%1,%2,(size)%3,(args)->%4<-); do { new str_query [%3]; mysql_format(_hndl,str_query,%3,%0,%4); opmysql_tquery(str_query,"OnQueryFinish","ii",%2,%3); } while (FALSE);
#define f_mysql_pquery(%0,%1,%2,(size)%3,(args)->%4<-); do { new str_query [%3]; mysql_format(_hndl,str_query,%3,%0,%4); opmysql_pquery(str_query,"OnQueryFinish","ii",%2,%3); } while (FALSE);

// Querys
#define query_type_unknown  			(0)
#define query_type_loadvehicles  		(1)
#define query_type_cargarmaletero  		(2)
#define query_type_guardarmaletero  	(3)
#define query_type_guardarmaletero_2 	(4)
#define query_type_loadpassword         (5)
#define query_type_createaccount        (6)
#define query_type_loadaccount          (7)
#define query_type_cargarmuebles        (8)
#define query_type_bank                 (9)
#define query_type_cargarmaxcb          (10)
#define query_type_cargarmlcl           (11)
#define query_type_crearmlcl			(12)
#define query_type_email                (13)
#define query_type_ticket               (14)
#define query_type_logs               	(15)

// none define (for INSERT, DELETE, etc..)
#define query_none  "OnQueryFinish", "ii", 0, query_type_unknown

// Tables
static
    const table_Usuarios[] = "CREATE TABLE IF NOT EXISTS `Usuarios` (`userID` INT(8) NOT NULL AUTO_INCREMENT, PRIMARY KEY (`userID`) );";

static
    const table_Usuarios_data[][] =
    {
        "`Nombre` VARCHAR(24) NOT NULL",
        "`Clave` INT(11) NOT NULL",
        "`email` VARCHAR(38) NOT NULL",
        "`ip` VARCHAR(16) NOT NULL",
        "`UltimaConexion` VARCHAR(25) NOT NULL",
        "`Registrado` BOOLEAN NOT NULL",
        "`Sexo` TINYINT(2) NOT NULL",
        "`Edad` SMALLINT(5) NOT NULL",
        "`Pelea` SMALLINT(5) NOT NULL",
        "`Estilo` SMALLINT(5) NOT NULL",
        "`DNI` INT(11) NOT NULL",
        "`Vida` FLOAT(11) NOT NULL",
        "`Chaleco` FLOAT(11) NOT NULL",
        "`Ropa_0` SMALLINT(5) NOT NULL",
        "`Ropa_1` SMALLINT(5) NOT NULL",
        "`Ropa_2` SMALLINT(5) NOT NULL",
        "`Ropa_3` SMALLINT(5) NOT NULL",
        "`CurrentSkin` SMALLINT(4) NOT NULL",
        "`Dinero` INT(11) NOT NULL",
        "`Banco` INT(11) NOT NULL",
        "`Experiencia` FLOAT(11) NOT NULL",
        "`Hambre` FLOAT(11) NOT NULL",
        "`Cansancio` FLOAT(11) NOT NULL",
        "`Orina` FLOAT(11) NOT NULL",
        "`PosX` FLOAT(11) NOT NULL",
        "`PosY` FLOAT(11) NOT NULL",
        "`PosZ` FLOAT(11) NOT NULL",
        "`Interior` INT(7) NOT NULL",
        "`VirtualWorld` INT(11) NOT NULL",
        "`inv_0` MEDIUMINT(5) NOT NULL",
        "`invd_0` INT(12) NOT NULL",
        "`inv_1` MEDIUMINT(5) NOT NULL",
        "`invd_1` INT(12) NOT NULL",
        "`inv_2` MEDIUMINT(5) NOT NULL",
        "`invd_2` INT(12) NOT NULL",
        "`inv_3` MEDIUMINT(5) NOT NULL",
        "`invd_3` INT(12) NOT NULL",
        "`inv_4` MEDIUMINT(5) NOT NULL",
        "`invd_4` INT(12) NOT NULL",
        "`inv_5` MEDIUMINT(5) NOT NULL",
        "`invd_5` INT(12) NOT NULL",
        "`inv_6` MEDIUMINT(5) NOT NULL",
        "`invd_6` INT(12) NOT NULL",
        "`inv_7` MEDIUMINT(5) NOT NULL",
        "`invd_7` INT(12) NOT NULL",
        "`inv_8` MEDIUMINT(5) NOT NULL",
        "`invd_8` INT(12) NOT NULL",
        "`inv_9` MEDIUMINT(5) NOT NULL",
        "`invd_9` INT(12) NOT NULL",
        "`Admin` INT(11) NOT NULL",
        "`Lider` TINYINT(3) NOT NULL",
        "`Miembro` TINYINT(3) NOT NULL",
        "`FacDuty` TINYINT(3) NOT NULL",
        "`Rango` TINYINT(3) NOT NULL",
        "`Encarcelado` TINYINT(3) NOT NULL",
        "`TiempoCarcel` INT(11) NOT NULL",
        "`Minutos` INT(11) NOT NULL",
        "`Horas` INT(11) NOT NULL",
        "`Nivel` INT(11) NOT NULL",
        "`LiderFam` TINYINT(3) NOT NULL",
        "`MiembroFam` TINYINT(3) NOT NULL",
        "`RangoFam` TINYINT(3) NOT NULL",
        "`Trabajo` TINYINT(3) NOT NULL",
        "`NivelTrabajo` SMALLINT(5) NOT NULL",
        "`Entregas` MEDIUMINT(6) NOT NULL",
        "`Necesidades` TINYINT(3) NOT NULL",
        "`IDCuentaB` INT(5) NOT NULL",
        "`CurrentObj` MEDIUMINT(5) NOT NULL",
        "`CurrentObjD` INT(11) NOT NULL",
        "`ObjetoColgado` MEDIUMINT(5) NOT NULL",
        "`ObjetoColgadoData` INT(11) NOT NULL",
        "`ChalecoObj` MEDIUMINT(5) NOT NULL",
        "`ChalecoData` INT(11) NOT NULL",
        "`BuscadorVeh` BOOLEAN NOT NULL",
        "`AdminJail` VARCHAR(24) NOT NULL",
        "`LicenciaAuto` BOOLEAN NOT NULL",
        "`LicenciaMoto` BOOLEAN NOT NULL",
        "`LicenciaArmas` BOOLEAN NOT NULL",
        "`Cosechas` MEDIUMINT(6) NOT NULL",
        "`AttachModel_0` INT(11) NOT NULL",
        "`AttachModel_1` INT(11) NOT NULL",
        "`AttachModel_2` INT(11) NOT NULL",
        "`AttachModel_3` INT(11) NOT NULL",
        "`AttachModel_4` INT(11) NOT NULL",
        "`AttachBone_0` SMALLINT(3) NOT NULL",
        "`AttachBone_1` SMALLINT(3) NOT NULL",
        "`AttachBone_2` SMALLINT(3) NOT NULL",
        "`AttachBone_3` SMALLINT(3) NOT NULL",
        "`AttachBone_4` SMALLINT(3) NOT NULL",
        "`AttachOcultado_0` BOOLEAN NOT NULL",
        "`AttachOcultado_1` BOOLEAN NOT NULL",
        "`AttachOcultado_2` BOOLEAN NOT NULL",
        "`AttachOcultado_3` BOOLEAN NOT NULL",
        "`AttachOcultado_4` BOOLEAN NOT NULL",
        "`Estrellas` MEDIUMINT(7) NOT NULL",
        "`Bomba` BOOLEAN NOT NULL",
        "`Repartidas` MEDIUMINT(6) NOT NULL",
        "`Barridas` MEDIUMINT(6) NOT NULL",
        "`Acento` TINYINT(3) NOT NULL",
        "`Muerto` BOOLEAN NOT NULL",
        "`BlockDudas` BOOLEAN NOT NULL",
        "`BlockFam` BOOLEAN NOT NULL",
        "`BlockFac` BOOLEAN NOT NULL",
        "`Esposado` BOOLEAN NOT NULL",
        "`TiempoDudas` INT(11) NOT NULL",
        "`Ibu400` INT(7) NOT NULL",
        "`Ibu600` INT(7) NOT NULL",
        "`Falopeado` INT(6) NOT NULL",
        "`Papeado` INT(6) NOT NULL",
        "`Adv` TINYINT(3) NOT NULL",
        "`AdmAdv` TINYINT(3) NOT NULL",
        "`AttachPosx_0` FLOAT(11) NOT NULL",
        "`AttachPosx_1` FLOAT(11) NOT NULL",
        "`AttachPosx_2` FLOAT(11) NOT NULL",
        "`AttachPosx_3` FLOAT(11) NOT NULL",
        "`AttachPosx_4` FLOAT(11) NOT NULL",
        "`AttachPosy_0` FLOAT(11) NOT NULL",
        "`AttachPosy_1` FLOAT(11) NOT NULL",
        "`AttachPosy_2` FLOAT(11) NOT NULL",
        "`AttachPosy_3` FLOAT(11) NOT NULL",
        "`AttachPosy_4` FLOAT(11) NOT NULL",
        "`AttachPosz_0` FLOAT(11) NOT NULL",
        "`AttachPosz_1` FLOAT(11) NOT NULL",
        "`AttachPosz_2` FLOAT(11) NOT NULL",
        "`AttachPosz_3` FLOAT(11) NOT NULL",
        "`AttachPosz_4` FLOAT(11) NOT NULL",
        "`AttachAngx_0` FLOAT(11) NOT NULL",
        "`AttachAngx_1` FLOAT(11) NOT NULL",
        "`AttachAngx_2` FLOAT(11) NOT NULL",
        "`AttachAngx_3` FLOAT(11) NOT NULL",
        "`AttachAngx_4` FLOAT(11) NOT NULL",
        "`AttachAngy_0` FLOAT(11) NOT NULL",
        "`AttachAngy_1` FLOAT(11) NOT NULL",
        "`AttachAngy_2` FLOAT(11) NOT NULL",
        "`AttachAngy_3` FLOAT(11) NOT NULL",
        "`AttachAngy_4` FLOAT(11) NOT NULL",
        "`AttachAngz_0` FLOAT(11) NOT NULL",
        "`AttachAngz_1` FLOAT(11) NOT NULL",
        "`AttachAngz_2` FLOAT(11) NOT NULL",
        "`AttachAngz_3` FLOAT(11) NOT NULL",
        "`AttachAngz_4` FLOAT(11) NOT NULL",
        "`AttachEscx_0` FLOAT(11) NOT NULL",
        "`AttachEscx_1` FLOAT(11) NOT NULL",
        "`AttachEscx_2` FLOAT(11) NOT NULL",
        "`AttachEscx_3` FLOAT(11) NOT NULL",
        "`AttachEscx_4` FLOAT(11) NOT NULL",
        "`AttachEscy_0` FLOAT(11) NOT NULL",
        "`AttachEscy_1` FLOAT(11) NOT NULL",
        "`AttachEscy_2` FLOAT(11) NOT NULL",
        "`AttachEscy_3` FLOAT(11) NOT NULL",
        "`AttachEscy_4` FLOAT(11) NOT NULL",
        "`AttachEscz_0` FLOAT(11) NOT NULL",
        "`AttachEscz_1` FLOAT(11) NOT NULL",
        "`AttachEscz_2` FLOAT(11) NOT NULL",
        "`AttachEscz_3` FLOAT(11) NOT NULL",
        "`AttachEscz_4` FLOAT(11) NOT NULL"
     };


// ----=====] TIMERS [====----- //

#define INVALID_TIMER_ID 	(-1)

#define TIMER_CARCEL 		0
#define TIMER_CARGANDOCOMB 	1
#define TIMER_TDINICIO 		2
#define TIMER_LICENCIA 		3
#define TIMER_ACCESORIO 	4
#define TIMER_VISITAC 		5
#define TIMER_BMOTOR   		6
#define TIMER_CANCELARR     7
#define TIMER_CAMILLA       8
#define TIMER_REPARTIRPIZZA 9
#define TIMER_LLAMADA		10
#define TIMER_HABLAR		11

#define MAX_TIMERS			12

// ----====] INTERIORES [=====---- //

#define INVALID_INTERIOR_ID     -1

#define MAX_INTERIORES          50
#define INT_CUSTOM_VW           (10000)
#define INT_MAX_VW           	(100000)

// ----====] CHECKPOINTS [====---- //

#define INVALID_PCP_ID -1

#define CP_ROBO         0
#define CP_LICENCIAVEH  1
#define CP_GPS          2
#define CP_CAMIONERO    3
#define CP_BASURERO     4
#define CP_REPARTIDORB  5
#define CP_REPARTIDORP  6
#define CP_CAMIONEROFAC 7

#define MAX_PCP         8

// ----====] MAP ICONS [====---- //

#define MI_GANGWARS     	(1)
#define MI_HERIDO       	(2)
#define MI_FABRICA_COMIDA   (3)
#define MI_FABRICA_GRANO    (4)
#define MI_FABRICA_TIERRA   (5)

// ----=====] Colores [=====---- //

//Necesidades
#define	C_HAMBRE    	0xFF7D00FF
#define	C_CANSANCIO		0x00AAFFFF
#define	C_ORINA     	C_AMARILLO

#define C_BARRA_HAMBRE  		(0xFF7D00FF)//(0x8080FFFF)
#define C_BARRA_VEJIGA  		(0xFFFF00FF)//(0x8080FFFF)
#define C_BARRA_ESTADO  		(0x00AAFFFF)//(0x8080FFFF)
#define C_BARRA_VELOCIMETRO 	(0x569AFFFF)
#define C_BARRA_GASOLIMETRO     (0x00EA00FF)
#define C_BARRA_GRAFFITI     	(0xFFFF00FF)
#define C_BARRA_MINERAL	     	(0xFFFF00FF)

#define C_GZ_EN_GUERRA  0xFF000081

#define C_NEGATIVO 		0xCDC7A2FF
#define C_POSITIVO 		0xA9D159FF
#define C_ROJO       	0xF81414E8
#define C_AZUL 	     	0x7B56F2FF
#define C_AMARILLO   	0xFFFF00FF
#define C_NARANJA     	0xFF7D00FF
#define C_VERDE      	0x6FA828FF
#define C_VERDE2     	0x84BB00FF
#define C_AZULMARINO 	0x00007BFF
#define C_AZULRARO 		0xB5B6FF00
#define C_GRIS 		 	0x7D7D79FF
#define C_GRISCLARO  	0xB2B2B3FF
#define C_BLANCO     	0xFFFFFFE8
#define C_NEGRO		 	0x000000FF
#define C_CELESTE 	 	0x00FFFFFF
#define C_LILA 		 	0xFF00FFFF
#define C_MORADO     	0xBD00B9FF
#define C_ROSA 	     	0xFF00C9FF
#define C_VIOLETA    	0xBD00EAFF
#define C_AZUL2 	 	0x0B79C3FF
#define C_AZULCLARO   	0x0096DCFF
#define C_INFO 			0x72B1FFFF
#define C_GOBIERNO 		0x92CFB4FF
#define C_ADMOFFDUTY    0xF36259FF
#define C_SALMON        0xF2B573FF
#define C_ADMINCHAT     0x00D77DFF
#define C_DESTACADO     0xFFC400FF
#define C_AYUDANTE      0xFF8600FF
#define C_COLABORADOR   0xE400A0FF
#define C_MODERADOR     0x24C290FF
#define C_MODSUPERIOR   0x24CD00FF
#define C_ADMINISTRADOR 0xFF0000FF
#define C_SUBDUENO      0x24C2E5FF
#define C_DUENO	    	0xEA7384FF
#define C_ME            0xFFCB90FF
#define C_DO 			C_POSITIVO
#define C_DUTYLSPD      0x33CCFF00
#define C_DUTYLSMD      0xFF886D00
#define C_DUTYLSEM      0x6FA82800
#define C_DUTYMECANICOS 0x72B1FF00
#define C_LSPD          0x33CCFFFF
#define C_LSMD          0xFF886DFF
#define C_EXP   		0xFFFFFFFF
#define C_DUDAS 		0x5CDAB1FF//0xB3C472FF (OLD)
#define C_AZULLINDO     0x5FB2FFFF
#define C_NARANJA2      0xFFA000FF
#define C_WALKIETALKIE  0x0BCE90FF
#define C_MARRON        0x9E6C00FF
#define C_REFUERZOSLSPD 0xFFA000FF
#define C_BORDO    		0xE24F00FF
#define C_MPS           0xC82536FF //0x12D68FFF <- Verdesito

//HTML
#define	CHAMBRE    		"{FF7D00}"
#define	CCANSANCIO		"{00AAFF}"
#define	CORINA     		"{E8F800}"
#define CAMARILLO 		"{E8F800}"
#define CNARANJA 		"{E68C0E}"
#define CAZUL   		"{7B56F2}"
#define CAZUL2          "{0B79C3}"
#define CVERDE 			"{6FA828}"
#define CBLANCO  		"{FFFFFF}"
#define CROJO    		"{F81414}"
#define CBORDO          "{E24F00}"
#define CGRIS   		"{7D8584}"
#define CAZULCLARO   	"{0096DC}"
#define CPOSITIVO   	"{A9D159}"
#define CNEGATIVO		"{CDC7A2}"
#define CINFO           "{72B1FF}"
#define CGOBIERNO       "{92CFB4}"
#define CROJOFLUOR      "{FF0000}"
#define CVERDEFLUOR     "{ADFB00}"
#define CVIOLETA        "{B21CF8}"
#define CNEGRO          "{000000}"
#define CROSA           "{FE1CF8}"
#define CSALMON         "{F2B573}"
#define CAZULRARO       "{B5B6FF}"
#define CADMINCHAT      "{00D77D}"
#define CADMOFFDUTY     "{F36259}"
#define CLSPD           "{33CCFF}"
#define CLSMD           "{FF886D}"
#define CAQUA           "{00FFFF}"
#define CNARANJA2       "{FFA000}"
#define CAZULLINDO      "{5FB2FF}"
#define CAZULX      	"{0080FF}"
#define CVERDEX      	"{00FF00}"
#define CINVUSADO      	"{00FF00}"
#define CINVVACIO     	"{7D8584}"
#define CWALKIETALKIE   "{0BCE90}"
#define CMARRON         "{9E6C00}"
#define CMPS            "{C82536}"
#define CLVERDE         "{6EF83C}" // GREEN color in HEX ( USED )
#define CLROJO          "{F81414}" // RED color in HEX ( USED )
#define CLAZUL          "{00C0FF}" // BLUE color in HEX ( USED )

//STAFF
#define CDESTACADO      "{FFC400}"
#define CAYUDANTE       "{FF8600}"
#define CCOLABORADOR    "{E400A0}"
#define CMODERADOR      "{24C290}"
#define CMOD.SUPERIOR   "{24CD00}"
#define CADMINISTRADOR  "{FF0000}"
#define CSUBDUENO       "{24C2E5}"
#define CDUENO	        "{EA7384}"

//HABLAR (CHAT)
#define Hablar       	0xE6E6E6E6
#define Hablar2      	0xC8C8C8C8
#define Hablar3      	0xAAAAAAAA
#define Hablar4      	0x8C8C8C8C
#define Hablar5      	0x6E6E6E6E

// ----=====] Dialogs [=====---- //

#define dRegistro       		1
#define dIngreso        		2
#define dConfirmarP     		3
#define dPreguntaS      		4
#define dRespuestaS     		5
#define dOtraPS         		6
#define dRecordarC      		7
#define dOlvidoC        		8
#define dDatos          		9
#define dSabeReglas     		10
#define dTest           		11
#define dVehRenta       		12
#define dInfo 					13
#define dAscensorLSPD   		14
#define dRoperoLSPD     		15
#define dIngresoPrimero 		16
//#define dArmeriaLSPD    		17
#define dAyuda          		18
#define dAyuda2         		19
//#define dColor1         		20 (Sistema de vehiculos viejo)
//#define dColor2         		21 (Sistema de vehiculos viejo)
#define dAdmTeleport    		22
#define dArmeriaLSEM    		23
#define dRoperoLSEM     		24
#define dControlVeh     		25
#define dAscensorLSMD   		26
#define dCajaFuerte     		27
#define dDepositar      		28
#define dSacar          		29
#define dCambiarPassCF  		30
#define dRoperoLSMD     		31
#define dMenuNegocio    		32
#define dNegCF		    		33
#define dNegNombre      		34
#define dNegEntrada     		35
#define dMenuCasa	    		36
#define dCasaPrecio     		37
#define dCasaNombre     		38
#define dCasaPuertas    		39
#define dAdmClick       		40
#define dCargarCamion   		41
#define dCDepositar     		42
#define dCRetirar       		43
#define dCTransferir    		44
#define dEditarObj      		45
#define dCambiarTexto   		46
#define dCambiarColor   		47
#define dCambiarTamano  		48
#define dCambiarTamanoO 		49
#define dEliminarO      		50
#define dActualizarO    		51
//#define dMandarSMS      		52
#define dElegirSRopa    		53
#define dEditarRopa     		54
#define dEditarRopa_2   		55
#define dLicencia       		56
//#define dAceptarFac     		57
//#define dAceptarFam     		58
#define dCrearPorton    		59
#define dEditPorton   			60
//#define dCasaArmas      		61
#define dAEntrevista    		62
//#define dMasCelular     		63
//#define dAgendarCel     		64
//#define dCelContacto    		65
#define dElegirBebida   		66
#define dElejirArmCat   		67
#define dArmPistola	    		68
#define dArmSubFusil    		69
#define dArmEscopeta   	 		70
#define dArmRifle       		71
#define dArmAsalto      		72
#define dElejirArmBal   		73
#define dComprarBalas   		74
#define dElejirSlotA    		75
#define dEAccesorios_0  		76
#define dEAccesorios_1  		77
#define dElejirParte    		78
#define dElejirPos_A    		79
#define dConfirmarEA    		80
#define dCamarasLSPD    		81
#define dMMecanicos_0   		82
#define dMMecanicos_1   		83
#define dMMecanicos_2   		84
#define dMMecanicos_3   		85
#define dMMecanicos_2_0 		86
#define dMMecanicos_2_1 		87
#define dMMecanicos_2_2 		88
#define dMMecanicos_2_3 		89
#define dMercadoNegro   		90
#define dGPS_0          		91
#define dGPS_Negocios   		92
#define dGPS_Negocios_0 		93
#define dGPS_Trabajos   		94
#define dGPS_LPublicos  		95
#define dGPS_Conce      		96
#define dCTecnologia    		97
#define dGPS_ZRurales   		98
#define dEditarFam      		99
#define dFamNombre      		100
#define dCMedicamentos 			101
#define dTomarMed       		102
#define dDarMed         		103
#define dComprarSaldo   		104
//#define dCDroga         		105
#define dBuscadorVeh    		106
#define dCambiarPass    		107
#define dCComida_pi     		108
#define dCComida_h      		109
#define dCComida_po     		110
#define dLPolicia       		111
#define dEstadio        		112
#define dCBoleto        		113
#define dElegirCasaM    		114
#define dCasaMuebles    		115
#define dColocarMueble  		116
#define dBorrarMueble   		117
#define dBorrarMueble_0 		118
#define dEditarMuebleE  		119
#define dOcultarMueble  		120
//#define dDarDroga       		121
#define dCMueble        		122 // VERSION 0.3e
#define dCCasa          		123
#define dRecuperarPass  		124
#define dPrecioyNombreM 		125
#define dAyuda3         		126
#define dCasaContra     		127
#define dCambiarIndexO  		128
#define dElegirAcento   		129
#define dInfoLSPD       		130
#define dBuscarPersona  		131
#define dAgregarAnt     		132
//#define dFundirMineral  		133
#define dRadio          		134
#define dSpecReport     		135
#define dElegirFamFac   		136
#define dJustificarOffD 		137
#define dSolicitarADM   		138
#define dFaccion        		139 // VERSION 3 START
#define dFac_Rangos 			140
#define dFac_Rango_2 			141
#define dChangePregunta 		142
#define dIDModeloPorton 		143
#define dEditVelocidadP 		144
#define dReglas         		145
#define dReglas_2       		146
#define dVenderVeh      		147
#define dTicket       			148
//General - Tickets
#define dTicket_PGenerales  	149
#define dTicket_Problemas 		150
#define dTicket_APersonalizada  151
#define dTicket_Otros           152
#define dTicket_ASancion        153
//Preguntas - Tickets
#define dPComandos          	154
#define dPTrabajos          	155
#define dPSistemas          	156
#define dPRolePlay          	157
#define dPNuevoSoporte      	158
//Problemas - Tickets
#define dPVehiculo              159
#define dPCasa                  160
#define dPPersonaje             161
#define dPDinero                162
#define dPFamFac                163
#define dPBug                   164
//Miembros de Facciones
#define dFac_Miembros           165
#define dFac_Miembros_2 		166
#define dFac_MiembrosKick       167
#define dFac_MiembrosRank       168
#define dFac_MiembrosConex      169
//Tunning
#define dTunning                170
#define dTunning_2              171
#define dTunning_3              172
#define dTunning_4              173
#define dTunning_Col1           174
#define dTunning_Col2           175
#define dTunning_Paintjob       176
#define dRepairVeh              177
#define dRepairVeh_2            178
//Cámaras de velocidad
#define dEditarCamara           179
#define dEditarCamara_1         180
#define dEditarCamara_2         181
#define dEditarCamara_3         182
//Multas LSPD
#define dMultarVeh              183
#define dPagarMultas            184
#define dPagarMultas_2          185
#define dPagarMultas_3          186
//Mecanicos
#define dQuitarPieza            187
//Anticheat
#define dAntiCheat              188
#define dAntiCheat_0            189
//Faso
//#define dHacerFaso              190
//Inventario
#define dInventario             191
#define dBorrarObjeto           192
//LSPD
#define dCasilleroLSPD          193
#define dEmbargarVeh            194
#define dPagarEmbargacion       195
//Maletero
#define dMaleteroVer            196
//LSEM
#define dCasilleroLSEM          197
//Casa
#define dArmarioCasa            198
//Necesidades
#define dNecesidades            199
//Sueldos
#define dModificarSueldos       200
#define dModificarSueldos_2     201
#define dModificarSueldos_3     202
//OP:CEL
#define dCelMas                 203
#define dCelAgregarC            204
#define dCelContacto            205
#define dCelSMS                 206
#define dMandarSMS              207
//Comedor carcel
#define dComedorCarcel          208
//Comprar a fabricas
#define dComprarAFab            209
#define dElegirPedido           210
//Hitman
#define dArmamento              211
//Muebles versión 4
#define dMuebles                212
#define dMueble_Ocultar         213
#define dMueble_Editar          214
#define dMueble_Texturizar      215
#define dMueble_Texturizar2     216
#define dMuebles_CMD            217
//Mochilas y maletines
#define dMLCL                   218
//Logs
#define dLogs                   219
//Soporte
#define dSoporte                220
#define dSoporte2               221

#define dError          		500

// ----=====] Rangos Staff [=====---- //

#define Destacado       	(1)
#define Ayudante        	(5)
#define Colaborador     	(9)
#define Moderador       	(24)
#define Mod.Superior    	(48)
#define Administrador   	(59)
#define AdministradorSup    (95)
#define SubDueno        	(125)
#define Dueno           	(256)

// --------=======[ Admin ]=======----------- //

#define ADM_EligeSkin 	1
#define ADM_EligeInt  	2
#define ADM_EligeVW   	3
#define ADM_Vida      	4
#define ADM_Carcel    	5
#define ADM_Kick      	6
#define ADM_Ban       	7
#define ADM_Familia   	8
#define ADM_FamRango  	9
#define ADM_FamMiembro  10
#define ADM_FamLider  	11
#define ADM_Faccion     12
#define ADM_FacRango    13
#define ADM_FacMiembro  14
#define ADM_FacLider  	15
#define ADM_Dinero      16
#define ADM_FijDin      17
#define ADM_QuitDin     18
#define ADM_DarDin      19
#define ADM_CarcelR     20

#define MENU_ADMTELEPORT "Ayuntamiento\nLSPD\nGrove\nFuerza aerea\nAlcaldia\nGrotti\nYakuza\nLSTV\nMansión MaddDog\nAeropuerto\nSureños\nClinica\nAutos Usados\nHospital\nAmmu-Nation\nLicencias\nAlhambra\nDrogas\nCamioneros\nRepartidor Pizza\nRepartidor Diario\nBasureros\nCosechadores"

// ---======[ Basureros ]====------ //
static const Float:PosBasura[][3] =
{
    {1302.0740,-1410.4644,13.8715},
    {1430.7965,-1445.9150,14.0172},
    {1691.5344,-1446.3608,14.0297},
    {1900.8783,-1456.1775,13.9998},
    {2117.3596,-1484.6792,24.4293},
    {2190.9351,-1740.3708,13.9809},
    {2277.3118,-1726.7865,14.043},
    {2375.0090,-1646.1002,14.073},
    {2347.7219,-1479.9049,24.426},
    {2375.7944,-1313.9464,24.4681},
    {2508.3242,-1251.8052,35.5125},
    {2678.8428,-1250.5308,54.8444},
    {2742.9285,-1179.7654,69.8663},
    {2618.1057,-1052.8989,70.0425},
    {2122.8655,-1306.2704,24.4595},
    {2244.5713,-1389.5562,24.4875},
    {2201.6318,-1294.7100,24.4733},
    {1804.1807,-1259.0662,14.1225},
    {1519.6307,-1434.9824,14.0123},
    {1154.4668,-1411.4197,14.1224},
    {1015.4563,-1390.2244,13.7558},
    {860.4225,-1410.7246,13.6718},
    {563.5642,-1397.2673,15.3358},
    {441.7430,-1368.5634,26.0865},
    {735.7159,-1088.0411,21.964},
    {802.5876,-1105.3016,24.371},
    {802.8663,-1362.7678,14.0438},
    {1035.6021,-1333.7155,14.046},
    {1129.0830,-1286.3590,14.044},
    {1436.5427,-937.7684,36.7491},
    {2121.6660,-1088.6660,24.8532},
    {2341.7297,-1042.0698,53.5041},
    {2517.7498,-825.6945,90.41}
};

// ---======[ Celdas LSPD ]====---- //
static const Float: CeldasLSPD [][6] =
{
	{1663.03333, -1588.72375, 1045.75696, 1661.51331, -1588.72375, 1045.75696},
	{1666.09326, -1588.80371, 1045.75696, 1667.63318, -1588.84375, 1045.75696},
	{1669.25085, -1588.88855, 1045.75696, 1670.89075, -1588.92859, 1045.75696},
	{1672.54651, -1588.98474, 1045.75696, 1674.00647, -1589.00476, 1045.75696},
	{1675.56909, -1589.04565, 1045.75696, 1677.10913, -1589.08557, 1045.75696},
	{1678.74915, -1589.14563, 1045.75696, 1680.20911, -1589.16565, 1045.75696},
	{1681.80908, -1589.22559, 1045.75696, 1683.20911, -1589.26563, 1045.75696},
	{1663.04297, -1603.22046, 1045.75696, 1661.64294, -1603.20044, 1045.75696},
	{1666.23035, -1603.30090, 1045.75696, 1664.77026, -1603.26086, 1045.75696},
	{1669.34375, -1603.41772, 1045.75696, 1668.00378, -1603.37769, 1045.75696},
	{1672.41455, -1603.47693, 1045.75696, 1671.05457, -1603.43689, 1045.75696},
	{1675.56763, -1603.54565, 1045.75696, 1674.18762, -1603.52576, 1045.75696},
	{1678.81201, -1603.64075, 1045.75696, 1677.41199, -1603.64075, 1045.75696},
	{1681.87292, -1603.74646, 1045.75696, 1680.49292, -1603.70654, 1045.75696},
	{1682.01697, -1603.71582, 1049.25696, 1680.69702, -1603.65576, 1049.25696},
	{1678.82654, -1603.61096, 1049.25696, 1677.50647, -1603.63098, 1049.25696},
	{1675.66711, -1603.55591, 1049.25696, 1674.42712, -1603.51587, 1049.25696},
	{1672.52539, -1603.48535, 1049.25696, 1671.22534, -1603.46545, 1049.25696},
	{1669.33423, -1603.39685, 1049.25696, 1668.05420, -1603.37695, 1049.25696},
	{1666.22913, -1603.31079, 1049.25696, 1664.92908, -1603.25085, 1049.25696},
	{1663.06470, -1603.22925, 1049.25696, 1661.70471, -1603.18921, 1049.25696},
	{1663.01074, -1588.70947, 1049.25696, 1664.37073, -1588.72949, 1049.25696},
	{1666.23584, -1588.75439, 1049.25696, 1667.57581, -1588.81445, 1049.25696},
	{1669.37000, -1588.86780, 1049.25696, 1670.65002, -1588.86780, 1049.25696},
	{1672.59912, -1588.92676, 1049.25696, 1673.93909, -1588.96680, 1049.25696},
	{1675.68689, -1588.99670, 1049.25696, 1677.08691, -1589.03674, 1049.25696},
	{1678.92688, -1589.09668, 1049.25696, 1680.20691, -1589.11670, 1049.25696},
	{1681.92517, -1589.17126, 1049.25696, 1683.24524, -1589.21130, 1049.25696}
};

static const Float: PuertasCarcel[][15] =
{
	{1562.3159,-1494.4368,1066.8093,0.0000, 1562.2979,-1494.2955,1066.8093,179.7000, 1562.65564, -1494.37524, 1065.28955, 0.42000, 1561.33557, -1494.35535, 1065.28955},
	{1587.2008,-1528.4864,1066.8093,-178.8998, 587.2247,-1528.5981,1066.8093,0.0000,1588.98608, -1528.46045, 1065.31519,  -178.02020,1590.32605, -1528.46045, 1065.31519},
	{1596.4180,-1546.2406,1062.8692,0.0000, 1596.5106,-1546.1137,1062.8692,177.8000, 1598.26538, -1546.19971, 1061.33118, -180.96001, 1599.58545, -1546.23975, 1061.33118},
	{1630.1601,-1573.7458,1058.0292,0.0000, 1630.0759,-1573.5914,1058.0292,176.7999, 1631.98035, -1573.71802, 1056.52795, -180.96001,1633.32043, -1573.73804, 1056.52795},
	{1661.1640,-1596.4836,1045.9816,90.5999,  1661.0295,-1596.3883,1045.9816,-90.7000, 1661.05884, -1594.56921, 1044.45325, -89.94000,1661.05884, -1593.22925, 1044.4532},
	{1697.8378,-1596.9744,1045.9816,-88.5999, 1697.9771,-1596.9871,1045.9816,89.2000, 1697.89600, -1595.05261, 1044.43335,-89.94000, 1697.89600, -1593.73254, 1044.43335}
};

static const Float: PuertasComisaria[][15] =
{
	{268.8926, 1223.7916, 1566.4864, -90.0999, 268.9849, 1223.7923, 1566.4718, 90.0999,  268.92340, 1225.56580, 1564.89685, 269.71179,  268.92340, 1226.90576, 1564.89685}, // entrada
	{288.2213, 1204.0140, 1562.9464, 178.0999, 288.1958, 1203.8676, 1562.9464, 0.0000,   288.54480, 1203.90881, 1561.40356, 0.00000,    287.22479, 1203.90881, 1561.40356},
	{294.4688, 1203.9971, 1562.9464, 179.2000, 294.4686, 1203.8946, 1562.9464, 0.0000,   294.75601, 1203.92969, 1561.43005, 360.19150,  293.41599, 1203.92969, 1561.43005},
	{312.7042, -1212.4575,1559.4664, 0.0000,   312.7569, 1212.5913, 1559.4732, 179.8999, 310.84259, 1212.48840, 1557.97876, 360.13150,  309.52261, 1212.48840, 1557.97876},
	{306.1725, 1215.1788, 1559.4732, 89.5999,  1.0,      1.0,       99999.0,   0.0,      306.15799, 1214.08716, 1559.22888, -269.76010, 306.15799, 1212.66711, 1559.22888},
	{306.1438, 1218.4769, 1559.4913, 90.4999,  1.0,      1.0,       99999.0,   0.0,      306.15759, 1217.27991, 1559.22888, -269.76010, 306.15759, 1215.87988, 1559.20886},
	{306.1285, 1221.5898, 1559.4920, 90.1999,  1.0,      1.0,       99999.0,   0.0,      306.12509, 1220.42664, 1559.20886, -269.76010, 306.12509, 1219.04663, 1559.20886},
	{300.0945, 1207.1124, 1562.9464, 0.0000,   300.1615, 1207.2451, 1562.9464, -180.0000,298.25211, 1207.17151, 1561.39014, 360.19150,  296.93210, 1207.17151, 1561.39014} // Director
};

// ---======[ Negocios ]======------ //

#define MAX_NEGOCIOS            80
#define MAX_NEGOCIOS_JUGADOR    2

enum E_DATA_PRODUCTOS
{
	productPrice,
	productFabPrice,
	productName[40]
}

static const ProductInfo[][][E_DATA_PRODUCTOS] =
{
	// 24-7
	{
		{30,  10,  "Gaseosa"},
		{50,  20,  "Cerveza"},
		{75,  30,  "Vodka	"},
		{70,  28,  "Cigarrillos"},
		{50,  10,  "Encendedor"},
		{400, 130, "Spray	"},
		{60,  10,  "Saldo	"},
		{50,  10,  "Seda	"},
		{0,   0,   "null"},
		{0,   0,   "null"}
	},
	// Ropa
	{
		{400, 180, "Ropa"},
		{50,  10,  "Accesorios"},
		{0,   0,   "null"},
		{0,   0,   "null"},
		{0,   0,   "null"},
		{0,   0,   "null"},
		{0,   0,   "null"},
		{0,   0,   "null"},
		{0,   0,   "null"},
		{0,   0,   "null"}
	},
	// Boliche
	{
		{60,  10, "Gaseosa"},
		{150, 20, "Cerveza"},
		{240, 30, "Vodka	"},
		{0,   0,  "null"},
		{0,   0,  "null"},
		{0,   0,  "null"},
		{0,   0,  "null"},
		{0,   0,  "null"},
		{0,   0,  "null"},
		{0,   0,  "null"}
	},
	// Comida
	{
		{PRECIO_GASEOSA,    10, "Gaseosa"},
		{PRECIO_MENUCHICO,  20, "Menu chico"},
		{PRECIO_MENUGRANDE, 30, "Menu grande"},
		{0,   0,  "null"},
		{0,   0,  "null"},
		{0,   0,  "null"},
		{0,   0,  "null"},
		{0,   0,  "null"},
		{0,   0,  "null"},
		{0,   0,  "null"}
	},
	// Armas
	{
		{0,   0,  "null"},
		{0,   0,  "null"},
		{0,   0,  "null"},
		{0,   0,  "null"},
		{0,   0,  "null"},
		{0,   0,  "null"},
		{0,   0,  "null"},
		{0,   0,  "null"},
		{0,   0,  "null"},
		{0,   0,  "null"}
	},
	// Tecnologia
	{
		{600, 200, "Celular	"},
		{790, 340, "GPS	"},
		{320, 80,  "Camara	"},
		{4600,1000,"Buscador	"},
		{640, 200, "Walkie-Talkie"},
		{500, 200, "Muebles"},
		{0,   0,   "null"},
		{0,   0,   "null"},
		{0,   0,   "null"},
		{0,   0,   "null"}
	},
	// Casino
	{
		{0,   0,  "null"},
		{0,   0,  "null"},
		{0,   0,  "null"},
		{0,   0,  "null"},
		{0,   0,  "null"},
		{0,   0,  "null"},
		{0,   0,  "null"},
		{0,   0,  "null"},
		{0,   0,  "null"},
		{0,   0,  "null"}
	},
	// Farmacia
	{
		{50,  20, "Ibupirac x400"},
		{100, 40, "Ibupirac x600"},
		{0,   0,  "null"},
		{0,   0,  "null"},
		{0,   0,  "null"},
		{0,   0,  "null"},
		{0,   0,  "null"},
		{0,   0,  "null"},
		{0,   0,  "null"},
		{0,   0,  "null"}
	},
	// Estación
	{
		{30,  10,  "Gaseosa"},
		{50,  20,  "Cerveza"},
		{75,  30,  "Vodka	"},
		{70,  28,  "Cigarrillos"},
		{50,  10,  "Encendedor"},
		{400, 130, "Spray	"},
		{60,  10,  "Saldo	"},
		{50,  10,  "Seda	"},
		{120, 50,  "Bidón (10 lts)"},
		{0,   0,   "null"}
	}
};

#define MAX_STOCK_LEN 	sizeof(ProductInfo[][])
#define MAX_STOCK_TYPE  sizeof(ProductInfo[])
#define MAX_NEG_TYPE  	sizeof(ProductInfo)

#define MAX_STOCK_NEGOCIO   MAX_STOCK_TYPE

enum E_ENTREGA_DATA
{
	entModel,
	entType,
	Float: entX,
	Float: entY,
	Float: entZ
};

#define ENTREGA_C_NADA      (-1)
#define ENTREGA_C_CHICA     (0)
#define ENTREGA_C_GRANDE    (1)

static const EntregaInfo [] [E_ENTREGA_DATA] =
{
	{435, ENTREGA_C_GRANDE, 2348.61670, 2799.40479, 10.95313}, // 24/7
	{000, ENTREGA_C_CHICA, 	1047.3513,2087.9280,10.8203		}, // ROPA
	{000, ENTREGA_C_CHICA, 	-1014.7811,-598.7452,32.0126	}, // BOLICHE
	{000, ENTREGA_C_CHICA, 	-1014.7811,-598.7452,32.0126	}, // COMIDA
	{000, ENTREGA_C_NADA, 	0.0, 0.0, 0.0					}, // ARMAS
	{591, ENTREGA_C_GRANDE, -532.7018, 2595.0894, 54.0653	}, // TECNOLOGIA
	{000, ENTREGA_C_NADA, 	0.0, 0.0, 0.0					}, // CASINO
	{000, ENTREGA_C_CHICA, 	1438.1019,976.8592,10.8130		}, // FARMACIA
	{435, ENTREGA_C_GRANDE, 2348.61670, 2799.40479, 10.95313}  // ESTACION
};

// Shops & 24/7
#define N_247     		0

// Tiendas de ropa
#define N_ROPA          1

// Boliches
#define N_BOLICHE       2

// Comida
#define N_COMIDA        3

// Armas (AmmuNation)
#define N_ARMAS         4

// Hipermercados
#define N_TECNOLOGIA    5

// Casino
#define N_CASINO     	6

// Farmacos (Farmacia)
#define N_FARMACIA      7

// Estaciones de servicio
#define N_ESTACION		8

new Iterator:Negocios<MAX_NEGOCIOS>;

#define INVALID_BUSINESS_ID    	999

// ---======[ Casas ]======------ //

#define MAX_CASAS               500
#define MAX_INTERIORES_CASA     20
#define MAX_CASAS_JUGADOR       2
#define MAX_GARAGES             300
#define MAX_MUEBLES_CASA        75
#define MUEBLES_PER_PAGE        20

new Iterator:Casas<MAX_CASAS>;
new Iterator:Garages<MAX_GARAGES>;

#define LABEL_GARAGE_E        "Garaje"#MSG_TECLAENTRAR""
#define LABEL_GARAGE_S        "Garaje"#MSG_TECLAENTRAR""

#define INVALID_HOUSE_ID    	999

// ---======[ OP:CEL ]======------ //

#define CEL.   CEL_

#define CEL_STATE_NONE  	(0)
#define CEL_STATE_MENU  	(1)
#define CEL_STATE_MARCAR	(2)
#define CEL_STATE_SMS       (3)
#define CEL_STATE_CONTACT   (4)
#define CEL_STATE_SERVICIOS (5)

#define CEL_NUMBER_MAX_LEN  (10)

#define CEL_MAX_SMS         (5)
#define CEL_MAX_LEN         14
#define CEL_MAX_CONTACT     (9)

#define CEL_COLOR 			0x1D60B2FF
#define CEL_SPRITE          "loadsc12:loadsc12"

// Servicios
#define SERVICIO_POLICIA    (0)
#define SERVICIO_TAXI       (1)
#define SERVICIO_HOSPITAL   (2)
#define SERVICIO_TALLER     (3)

#define MAX_SERVICIOS       (4)

#define COLOR_SERVICIO_POLICIA      (0x7B83B6FF)
#define COLOR_SERVICIO_TAXI         (0xE8F000FF)
#define COLOR_SERVICIO_HOSPITAL     (0xC82355FF)
#define COLOR_SERVICIO_TALLER       (0x53B8D4FF)

// ---======[ OP:PC ]======------ //

#define NEG_FLECHA_IZQUIERDA    (0)
#define NEG_FLECHA_DERECHA      (1)

#define PC. PC_

#define PC_STATE_NONE  	(0)
#define PC_STATE_MENU  	(1)

#define PC_SPRITE          "loadsc9:loadsc9"

// ----=====] Slots attacheds [=====---- //

#define SLOT_ESPALDA        (5)
#define SLOT_CHALECO   		(6)
#define SLOT_CARA	    	(7)
#define SLOT_MANODERECHA 	(8)
#define SLOT_MANOIZQUIERDA 	(9)

#define MAX_ACCESORIOS      (5)

// ---===] Cordenadas [===----  //

#define POS_AYUNTA      		1478.8202,-1725.8673,13.5469
#define POS_LSPD        		1560.3490,-1627.1450,13.5469
#define POS_GROVE       		2499.9067,-1670.2590,13.3488
#define POS_FUERZAAEREA 		413.0000,-2293.0000,49.00000
#define POS_ALCALDE     		1426.3198,-1878.8347,13.3828
#define POS_GROTTI      		556.8184,-1253.7656,17.08990
#define POS_YAKUZA      		505.4417,-1443.9169,14.89530
#define POS_LSTV        		747.2659,-1348.4464,13.50980
#define POS_MADDDOG     		1238.5730,-738.8634,95.69330
#define POS_AEROPUERTO  		1437.4596,-2287.5271,13.5469
#define POS_SURENOS     		1883.7181,-2028.9174,13.3906
#define POS_CLINICA     		2029.8744,-1419.2386,16.9922
#define POS_AUTOSUSADOS 		1525.8162,-1026.1946,23.9204
#define POS_HOSPITAL    		1200.7026,-1323.8402,13.3984
#define POS_AMMUNATION  		1426.000,-2385.000,63.000000
#define POS_LICENCIAS   		1173.3685,-1741.1072,13.3984
#define POS_ALHAMBRA    		1822.2174,-1684.2032,13.3828
#define POS_CAMIONEROS          2504.5823,-2084.5154,13.5469
#define POS_REPARTIDORPIZZA     2105.0361,-1827.8997,13.5567
#define POS_REPARTIDORDIARIO    2028.1464,-1289.4213,20.9421
#define POS_BASUREROS           1277.1587,-1252.6556,14.2648
#define POS_COSECHADORES        -362.6034,-1480.5768,25.7266

// ----=====[ Cámaras ]=====----- //

//Cámaras separadas
#define CamaraAyunta		1468.000,-1712.000,35.000
#define CamaraAyuntaAt   	1469.000,-1718.000,33.000
#define CamaraGrotti 		496.000,-1246.000,39.000
#define CamaraGrottiAt 		499.000,-1248.000,38.000
#define CamaraLSPD      	1505.000,-1673.000,43.000
#define CamaraLSPDAt 		1525.000,-1673.000,32.000
#define CamaraAutosUsados 	1524.000,-1023.000,35.000
#define CamaraAutosUsadosAt	1535.000,-1022.000,34.000
#define CamaraLSTV			788.000,-1287.000,43.000
#define CamaraLSTVAt        785.000,-1294.000,41.000
#define CamaraAeropuerto    1426.000,-2385.000,63.000
#define CamaraAeropuertoAt  1429.000,-2379.000,59.000
#define CamaraSurenos       1879.000,-2096.000,42.000
#define CamaraSurenosAt		1880.000,-2080.000,36.000
#define CamaraClinica       1985.000,-1470.000,44.000
#define CamaraClinicaAt     1990.000,-1463.000,40.000
#define CamaraLicencias     1177.000,-1704.000,26.000
#define CamaraLicenciasAt   1172.000,-1712.000,25.000
#define CamaraHospital      1230,-1325,30
#define CamaraHospitalAt    1188,-1327,16
#define CamaraFuerzaAerea   413.000,-2293.000,49.000
#define CamaraFuerzaAereaAt 418.000,-2299.000,44.000
#define CamaraCamioneros    2405.000,-2086.000,23.000
#define CamaraCamionerosAt	2414.000,-2087.000,20.000
#define CamaraEdificios     1683.000,-1472.000,344.000
#define CamaraEdificiosAt   1680.000,-1468.000,342.000
#define CamaraAeropuerto2   1479.000,-2355.000,216.000
#define CamaraAeropuerto2At 1468.000,-2355.000,210.000
#define CamaraAlhambra      1803.000,-1687.000,27.000
#define CamaraAlhambraAt    1814.000,-1685.000,24.000

// ----=====] Pickups [=====---- //

#define ID_PICKUPINT 		1318
#define ID_PICKUPROPERO 	1275
#define ID_PICKUPARMAMENTO  346
#define ID_PICKUPCAJAFUERTE 1274
#define ID_PICKUPNEGOCIO    ID_PICKUPINT
#define ID_PICKUPCASA    	1273
#define ID_PICKUPTRABAJO    1239
#define ID_PICKUPINFO       1239
#define ID_PICKUPHITMAN     1254
#define ID_OBJDINAMITA      1654

// ---====[ Caja fuerte ]====---- //

#define CF_FACCION  1
#define CF_NEGOCIO  2
#define CF_CASA     3

// ---==== [ Objetos ] ======----- //

#define MAX_OBJETOS_T 				(1000)

// Delete time
#define MINS_BORRAR_ARMA_TIRADA     (60)
#define MINS_BORRAR_OBJ_GRANDE    	(180)
#define MINS_BORRAR_OTRO            (15)

#define MAX_CARGADORES_CAJA     (32)
#define MAX_ARMAS_CAJA          (28)
#define MAX_ESPOSAS_CAJA        (64)
#define MAX_CHALECOS_CAJA       (24)

new Iterator:ObjetosTirados<MAX_OBJETOS_T>;

// ---====[ Facciones ]====---- //

//General
#define MAX_FACCIONES   	(9)
#define MAX_RANGOS_FAC  	20
#define MAX_RANGO_LEN   	24
#define MAX_MIEMBROS_FAC    50

#define IDLSPD          1
#define IDLSEM          2
#define IDLSMD          3
#define IDLSTV          4
#define IDMECANICOS     5
#define IDGOBIERNO      6
#define IDHITMAN        7
#define IDCAMIONEROS    8


#define NUMERO_POLICIA  	101
#define NUMERO_HOSPITAL 	102
#define NUMERO_CLARO		103
#define NUMERO_MECANICOS 	104

// ---====[ Familias ]====---- //

#define MAX_FAMILIAS 10

// ---===[ Trabajos ]====---- //

//Camionero
#define ID_Camionero    (1)

#define CAR_ROPA      1
#define CAR_PRODUCTOS 2
#define CAR_COMIDA    3

//Cosechadores
#define ID_Cosechador 	(2)

//Repartidor de bici
#define ID_RepartidorB  (3)
#define PVarRepartidorB "PARTE_REPARTIDORBICI"

//Basurero
#define ID_Basurero     (4)

//Ladron
#define ID_Ladron       (5)

//Repartidos de pizza
#define ID_RepartidorP  (6)

//Taxista
#define ID_Taxista      	(7)
#define TAXI_VECTOR    		20
#define TAXI_TOADD          2

#if TAXI_VECTOR % TAXI_TOADD != 0
	#error [Trabajo de taxistas] El valor 'TAXI_VECTOR' debe ser divisible exacto por 'TAXI_TOADD', actualmente no lo es..
#endif

//Minero
#define ID_Minero           (8)


#if MAX_NEGOCIOS > 899 //1000 vw: start house system (100 start neg system)
	#error [Size Error] Máxima capacidad de negocios: 899
#endif

//Playerbools


enum (<<= 1)
{
	e_BIGEARS = 1, // 1
	e_DURMIENDO = 2, // 2
	e_MUTEADO, // 3
	e_MOSTROVEL, // 4
	e_NOAC, // 5
	e_REFUERZOS, // 6
	e_LICENCIA // 7
}

enum e_PLAYER_TEMP_VARS
{
	e_VEH_LICENCIA
}

// News
new
	Nombre[MAX_PLAYERS][MAX_PLAYER_NAME],
	Nombre_[MAX_PLAYERS][MAX_PLAYER_NAME],
	Cono[100] = {INVALID_OBJECT_ID, ...},
	VehRentado[MAX_VEH_RENTA+1],
	Hora, Minuto,
	SirenaVeh[8] = {INVALID_OBJECT_ID, ...},
	VehConSirena[8],
	Accesorio_Obj[MAX_PLAYERS],
	OBJ_Camara[MAX_CAMARAS],
	OBJ_Basura[sizeof(PosBasura)] = {INVALID_OBJECT_ID, ...},
	OBJ_Bomba[MAX_PLAYERS] = {INVALID_OBJECT_ID, ...},
 	tCount,

	// General
	Record_UsersOn,
	UsersD_0, UsersD_1, UsersD_2,
	UsersT_0, UsersT_1, UsersT_2,
	Dinero_Banco,
	Cuentas_Registradas,

	// Muebles
	cObjData[MAX_MUEBLES_CASA][70],
	
	// Other
	VehPrueba[20] = {INVALID_VEHICLE_ID, ...},
	gzAtacadaPor[MAX_GZS] = { -1, ... },
	gzTiempo[MAX_GZS],
	BitArray: ValidGZ <MAX_GZS>,
	#if SISTEMA_BANCO == true
	OBJ_PuertaBanco,
	#endif
	OBJ_Dinamita[MAX_PLAYERS],
	Specteando_ID[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...},
 	TrabajosPorHora[MAX_PLAYERS][8],
 	BitArray:Llave_veh[MAX_PLAYERS]<MAX_VEHICLES>,
 	TrailerAttached[MAX_PLAYERS],
 	UsandoHackPad[MAX_PLAYERS],
 	NumberKey[MAX_PLAYERS][MAX_KEY_NUMBERS],
 	PinchaRuedas[15] = {INVALID_OBJECT_ID, ...},
 	PICK_PinchaRuedas[sizeof(PinchaRuedas)][2],

	//Radio
 	RadioLSTV[210] = "http://listen.technobase.fm/dsl.pls",

	//Muebles
	CasaActual[MAX_PLAYERS] = {INVALID_HOUSE_ID, ...},
	OBJ_Mueble[MAX_PLAYERS][MAX_MUEBLES_CASA],

	//DobleExp
	bool: DobleExp,

	//Precios de vehiculos
	PrecioModelo[MAX_VEHICLE_MODELS-400],

	// /arrastrar
	JugadorArrastrado[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...},

	// String miembros fac
	StringFacMiembros[MAX_MIEMBROS_FAC*(MAX_PLAYER_NAME+MAX_RANGO_LEN+8)],
	MiembroUltimaConex[24],

	// Sistema Tunning
	Mecanico_ClientID[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...},
	PrecioPiezaM[14],
	MecaPizarron[3],

	//Graffitis
	PintandoGraffiti[MAX_PLAYERS],

	//Anti bug de loguear
	LoginTime[MAX_PLAYERS],
	LoginSecs[MAX_PLAYERS],

	//Necesidades
	TiempoNecesidades[MAX_PLAYERS],

	//Mineria
	PicandoMineral[MAX_PLAYERS],

	//Anti-Flood
	BloquedCommand[MAX_PLAYERS],
	BloquedText[MAX_PLAYERS],

	//Faso y cigarrillo
	PlantaQuemandose[MAX_PLANTAS],

	//SMS
	SMSTime[MAX_PLAYERS] [MAX_SMS_TEXT],

	//Inventario
	Cargadores[MAX_PLAYERS],
	ArmaActual[MAX_PLAYERS],
	ItemInventario[MAX_PLAYERS][MAX_ITEMS_INVENTARIO][E_INV_DATA],
	ItemInventarioTemp[MAX_PLAYERS][MAX_ITEMS_INVENTARIO][E_INV_DATA],
	CurrentObject[MAX_PLAYERS] = {-1, ...},
	CurrentObjectData[MAX_PLAYERS],
	INV_Ammo [MAX_PLAYERS],

	//Maletero
	ItemMaletero[MAX_VEHICLES][MAX_LUGARES_MALETERO][E_INV_DATA],

	//Importaciones
	ObjetosBarco[13] = {INVALID_OBJECT_ID, ...},

	//General
	ServerWeather,
	PlayerWeather[MAX_PLAYERS] = {-1, ...},
	PlayerTime[MAX_PLAYERS] = {-1, ...},

	// Crack - cocaine
	Papeado[MAX_PLAYERS],

	// Peajes
	bool: PeajeSF = true,
	bool: PeajeLV = true,

	//Regalo
	OBJ_Regalo = INVALID_OBJECT_ID,
	Text3D:Label_Regalo = Text3D:INVALID_3DTEXT_ID,

	//Sueldos facciones
	// SueldoFaccion[MAX_FACCIONES][MAX_RANGOS_FAC],

	//OP:CEL
	CEL.State[MAX_PLAYERS] = {CEL_STATE_NONE, ...},
	CEL.Text[MAX_PLAYERS][CEL_NUMBER_MAX_LEN],

	OBJ_Celda[sizeof(CeldasLSPD)],
	KP_Celda[sizeof(CeldasLSPD)],
	OBJ_Carcel[sizeof(PuertasCarcel)],

	KP_Comisaria[sizeof(PuertasComisaria)][2],
	OBJ_Comisaria[sizeof(PuertasComisaria)],

	//OP:PC
	PC.State[MAX_PLAYERS] = {PC_STATE_NONE, ...},

	// Crack
	Cracked[MAX_PLAYERS],

	// Prevent OPU
	PreventedOPU[MAX_PLAYERS],

	// Servicios
	RequestedService[MAX_PLAYERS][MAX_SERVICIOS],

	// Server-sided armour health
	Float: ArmourData[MAX_PLAYERS],
	Float: HealthData[MAX_PLAYERS],
	KillerID[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...},

	// Anti unfreeze
	Freezed [MAX_PLAYERS],

	// Recuperandose hospital
	HospitalData [MAX_PLAYERS],

	// Taximetro
	TaxiTime [MAX_PLAYERS],
	Taxi_DriverID [MAX_PLAYERS] = {INVALID_PLAYER_ID, ...},

	// HITMAN
	HIT_AWP, HIT_C_AWP,
	HIT_SILENCED, HIT_C_SILENCED,

	// Navidad
	bool: NavidadON,

	// Objetos optimizados
	IntObject [MAX_PLAYERS] [MAX_OBJETOS_INTERIOR],
	
	// Bool
	PlayerBools [MAX_PLAYERS],
	
	// OnPlayerShotPlayer (playerid, targetid, weaponid, bodypart)
	LastOPWS [MAX_PLAYERS],
	LastVehicleShot [MAX_VEHICLES],
	
	// Subsidios
	bool:PuedenRecibirSubsidio = false,
	
	// Player temp vars
	PlayerTempData [MAX_PLAYERS][e_PLAYER_TEMP_VARS]
;

// Interiores
new
	INT_LSPD,
	INT_LSMD,
	INT_LSTV,
	INT_MinaHuntleCharry,
	INT_CarcelEntrada,
	INT_CarcelCeldas,
	INT_BodegaLSEM,
	INT_BodegaLSPD,
	INT_VestidorLSPD,
	INT_BaseEjercito,
	INT_Hitman,
	INT_EntrenamientoLSEM,
	INT_Banco,
	INT_CasaBlanca,
	INT_Camioneros,
	INT_CamionerosOficina,
	INT_Aeropuerto;

// Listas (mSelection)

new
	//Ropa
	m_Binco_m, m_Binco_f,
	m_ZIP_m, m_ZIP_f,
	m_Didlersachs_m, m_Didlersachs_f,
	m_Victim_m, m_Victim_f,

	//Accesorios
	m_Accesorios,
	//Muebles
	m_Muebles;

// Pickups
new
	PElevadorLSPD,
	PEstadio = -0xFFFF;

// Timers-Checkpoints
new
	Timer_Jugador[MAX_PLAYERS][MAX_TIMERS],
	PlayerCP:Checkpoint_Jugador[MAX_PLAYERS][MAX_PCP];


// NPCS
new
	// Claudia
    NPC_CLAUDIA,
    Text3D: NPC_LABEL_CLAUDIA = Text3D: INVALID_3DTEXT_ID,

    // Truth
	NPC_TRUTH,
	Truth_ClientID = INVALID_PLAYER_ID,
	PasoTruth[MAX_PLAYERS],
	Truth_VehID = INVALID_VEHICLE_ID,
    Text3D: NPC_LABEL_TRUTH = Text3D: INVALID_3DTEXT_ID;

//AREAS/ZONAS
new
	zCamionerosLVL1,
	zCosechadorLVL1,
	zMecanicos,
	zDepMecanicos,
	zPatioCarcel;

enum e_TEXTURE_DATA
{
	tName [22],
	tModelID,
	tTXD [18],
	tTexture [20],
	tColor
}

static const TextureData [][e_TEXTURE_DATA] =
{
	{"Por defecto", 	-1, 	"none",			"none", 			0},
	{"Negro (Opaco)", 	-1, 	"none", 		"none", 			0xFF000000},
	{"Rojo", 			-1, 	"none", 		"none", 			0xFFFB0000},
	{"Azul", 			-1, 	"none", 		"none", 			0xFF535FE6},
	{"Amarillo", 		-1, 	"none", 		"none", 			0xFFFFF301},
	{"Rojo", 			-1, 	"none", 		"none", 			0xFFFB0000},
	{"Manta 1", 		2299, 	"cj_s_beds", 	"CJ_MATRESS2", 		0},
	{"Manta 2", 		2299, 	"cj_s_beds", 	"CJ_MATRESS3", 		0},
	{"Manta 3", 		1755, 	"cj_sofa", 		"CJ_FAB2", 			0},
	{"Manta 4", 		1755, 	"cj_sofa", 		"CJ_TARTAN", 		0},
	{"Manta 5", 		1755, 	"cj_sofa", 		"CJ_FAB4", 			0},
	{"Manta 6", 		1755, 	"cj_sofa", 		"CJ_FAB1", 			0},
	{"Madera 1", 		19375, 	"all_walls", 	"mp_furn_floor", 	0}, // Seca
	{"Madera 2", 		19375, 	"all_walls", 	"mp_diner_woodwall",0}, // Barnizada
	{"Madera 3", 		2030, 	"cj_tables", 	"cj_wood1", 		0}, // clarita
	{"Madera 4", 		2030, 	"cj_tables", 	"cj_lightwood", 	0}, // 19375
	{"Madera 5", 		2030, 	"cj_tables", 	"cj_wood6", 		0}, // nueva
	{"Marmol 1", 		11511, 	"des_nw", 		"des_ranchwall1", 	0},
	{"Marmol 2", 		15033, 	"vegassavesmal","AH_flroortile4", 	0},
	{"Marmol 3",		2030, 	"cj_tables", 	"marble1", 			0},
	{"Rallado 1", 		14718, 	"lasmall1int2", "burglry_wall7", 	0},
	{"Rallado 2", 		14707, 	"labig3int2", 	"GB_mug01", 		0},
	{"Alfombra roja", 	14707, 	"labig3int2", 	"HS2_3Carpet1", 	0},
	{"Alfombra celeste",14707, 	"labig3int2", 	"HS2_3Wall10", 		0},
	{"Puerta 1",		1557, 	"dave_door_2b", "miragedoor1_256", 	0},
	{"Puerta 2",		1536, 	"ext_doors2", 	"clubdoor1_256", 	0},
	{"Puerta 3",		1536, 	"ext_doors2", 	"flat_door01", 		0},
	{"Puerta 4",		1536, 	"ext_doors2", 	"CJ_WOODDOOR4", 	0},
	{"Puerta 5",		1536, 	"ext_doors2", 	"CJ_SCOR_DOOR", 	0},
	{"Puerta 6",		2924, 	"crash3doorx", 	"villagreen128256", 0},
	{"Puerta 7",		2946, 	"sw_doors", 	"bevdoor03_law", 	0},
	{"Puerta 8",		14707, 	"labig3int2", 	"aptdoor01_int", 	0},
	{"Cuadriculado", 	14669, 	"711c", 		"bwtilebroth", 		0},
	{"Piedra", 			6134, 	"venice_law", 	"stonewall_la", 	0},
	{"Ladrillo", 		11450,  "des_nwtown", 	"des_brick1", 		0},
	{"Floreado", 		2030,  	"cj_tables", 	"cj_floral",		0},
	{"Fórmica", 		2030,  	"cj_tables", 	"formica1", 		0},
	{"Metálico", 		1735,  	"cj_tv_stand", 	"cj_steel", 		0}
};

#define GetMuebleTextureName(%0) 	TextureData[%0][tName]
#define GetMuebleTextureModelID(%0) TextureData[%0][tModelID]
#define GetMuebleTextureTXD(%0) 	TextureData[%0][tTXD]
#define GetMuebleTextureTexture(%0) TextureData[%0][tTexture]
#define GetMuebleTextureColor(%0)   TextureData[%0][tColor]

static const TextoDeCarcel[] =
			"Carcel OOC\n\n\
			"#CBLANCO"Si estás aquí, es porque has cometido una infracción, y un administrador o el mismo servidor\n\
			te sancionó. Deberás cumplir un tiempo determinando, luego podrás volver a jugar en el servidor.\n\
			Si no entiendes por qué estás aquí, o aún desconoces las reglas, utiliza "#CINFO"/reglas.\n\n";

enum E_REGLAS
{
	eTitulo[30],
	eCuerpo[500]
}

static const Reglas[][E_REGLAS] =
{
	{"DeathMatch (DM)", ""#CBLANCO"Este concepto, hace referencia a agredir otro usuarios sin una razón que justifique la agresión.\n\n\
	"#CROJO"Ejemplo: "#CBLANCO"Hay un camionero, y tu vas y le comienzas a pegar sin que el te halla hecho nada. ¿Por qué le pegas?\n\
	Recuerda que aquí estamos imitando la vida real, ¡y eso no lo haces en la realidad!"},

	{"PowerGaming (PG)", ""#CBLANCO"Este concepto, indica la realización de acciones de tu jugador que ignoran la lógica\n\
	o son irreales (Acciones que no harias en la vida real). También, es cuando forzas el rol de otro jugador con /me, o /do.\n\n\
	Ejemplo: Un policía te dispara, y tu corres al rededor de el\n\
	Ejemplo 2: (Forzar rol) En un robo, usas /me le roba todo su dinero a Facundo Perez."},

	{"Car Kill (CK)", ""#CBLANCO"Este concepto, es cuando un jugador mata a otro ya sea pisandolo con el auto y dejandolo debajo\n\
	del mismo, atropellandolo multiples veces para asesinarlo."},

	{"MetaGaming (MG)", ""#CBLANCO"Este concepto, indica utilizar información OOC para beneficiarte IC. (Ver que es IC y OOC)\n\n\
	"#CROJO"Ejemplo: "#CBLANCO"Ves a un jugador, con su	nombre arriba de la cabeza. Tu sabes su nombre, pero tu personaje no ya que nunca le preguntó.\n\
	Luego, lo llamas por su nombre, usando la información OOC."},

	{"In Character (IC)", ""#CVERDE"IC: "#CBLANCO"Es toda la información del rol de tu personaje, y solo eso. Es la cabeza de tu personaje, lo que\n\
	tu personaje sabe o no sabe (Tu personaje, no vos).\n\
	\tEjemplo: Una persona te dice por IC (Chat normal) 'Hola, me llamo Hernan'. Tu personaje sabe que esa persona se llama Hernan"},

	{"Out of Character (OOC)",""#CVERDE"OOC: "#CBLANCO"Es la información que sabes vos, pero por un medio que no es IC."},

	{"Revenge Kill (RK)", ""#CBLANCO"Este concepto, hace referencia a la denominada 'Muerte por venganza'. Es cuando un jugador te asesina, y tu\n\
	vuelves y le agredes, o lo asesinas. Esto es un grave error, ya que cuando mueres tu jugador supuestamente pierde la memoria."},

	{"Flood", ""#CBLANCO"Flood, es repetir reiteradas veces (3+) un texto, para que este llame la atención."},

	{"BugAbusing (BA)", ""#CBLANCO"Este concepto, hace referencia a abusar de bugs nativos del juego, o del servidor para\n\
	beneficio del usuario.\n\n\
	"#CROJO"Ejemplo: "#CBLANCO"Hay un comando que puedes usar para darte mucho dinero porque anda mal, entonces lo utilizas\n\
	una y otra vez para hacerte millonario. Una infracción de este tipo, se paga con un Ban (Expulsión permanente)"},

	{"Insultos OOC (IOOC)", ""#CBLANCO"Es cuando empezas a insultar otro usuario/administrador por un canal OOC."},

	{"Bad Driving (BD)", ""#CBLANCO"Este concepto, hace referencia a conducir mal (de una forma totalmente PowerGaming) como por ejemplo, tomar\n\
	atajos, o pasar por la vereda (Donde supuestamente hay peatones), chocar otros vehículos, etc."},

	{"Mal uso Duda (MUD)", ""#CBLANCO"Es cuando utilizas el canal "#CINFO"/duda "#CBLANCO"para decir cosas incoherentes, o cosas que no son\n\
	ni respuestas a una duda, ni dudas.\n\n\
	"#CROJO"Ejemplo: "#CBLANCO"/duda Hola Damian, ¿Cómo estas?"},

	{"Bad Parking Car (BPC)", ""#CBLANCO"Es cuando dejas tu vehículo aparcado en el medio de la calle, o en lugares irreales, donde invervienen en el tránsito.\n\
	Recuerda estacionar tu vehículo en un buen lugar, de lo contrario un administrador te eliminará el vehículo automáticamente."},

	{"Interferir en Dinámica (IDS)", ""#CBLANCO"Es cuando un usuario realiza acciones provocativas irreales con animo de molestar o perjudicar\n\
	a otro usuario, o a la misma comunidad, por ejemplo, atropellar usuarios con un vehículo intencionalmete. El incuplimiento de esta regla es castigado\n\
	con BAN en la mayoria de los casos. En los casos más leves, advertencia."},

	{"SPAM", ""#CBLANCO"SPAM hace referencia a nombrar o pasar la IP de otro servidor/comunidad por via ts3, foro, o server"}
};

static const Acentos[][] =
{
	{"Argentino"},
	{"Japones"},
	{"Chino"},
	{"Coreano"},
	{"Chileno"},
	{"Alemán"},
	{"Español"},
	{"Peruano"},
	{"Colombiano"},
	{"Ruso"},
	{"Estadounidense"},
	{"Italiano"},
	{"Griego"},
	{"Polaco"},
	{"Británico"}
};

static const MalasPalabras[][] =
{
	{"puto"},
	{"putos"},
	{"unplayer"},
	{"un player"},
	{"pete"},
	{"petes"},
	{"la concha de tu madre"},
	{"server de mierda"},
	{"es una mierda"},
	{"hijo de puta"},
	{"hijos de puta"},
	{"forro de mierda"},
	{"chupapija"},
	{"chupa pija"},
	{"chupamela"},
	{"chupapito"},
	{"chupa pito"},
	{"negro de mierda"},
	{"server pija"},
	{"chupame el pito"},
	{"chupenme el pito"},
	{"euliala"},
	{"fenixzone"},
	{"fenix zone"},
	{"ciudadlibre"},
	{"ciudad libre"},
	{"lsrp"},
	{"ls rp"},
	{"ls-rp"},
	{"ls:rp"},
	{"zenoncity"},
	{"zenon"},
	{"zenon city"}
};

static const Float: CajaFuertePos [][] =
{
	// objx, objy, objz, objrx, objry, objrz, x, y, z
	{301.765075, 1213.485473, 1562.586547, 0.000000, 0.000000, -89.700035, 300.9980,1213.4534,1562.4764},     // PD
	{1344.343139, -1830.370971, 1565.998413, 0.000000, 0.000000, -89.299980, 1343.5773,-1830.4092,1565.9984}, // Ejercito
	{2037.504882, 2855.557373, 1104.749389, 0.000000, 0.000000, -90.699989, 2036.4973,2855.5530,1104.749},    // Medicos
	{1263.587280, -1178.007080, 1565.992065, 0.000000, 0.000000, 90.100051, 1264.3535,-1177.9749,1565.9921},  // LSTV
	{1653.740234, -2167.733154, 13.836874, 0.000000, 0.000000, -90.399963, 1652.9738,-2167.7727,13.6369},     // Mecanicos
	{1553.7915,-1484.0624,1370.3561, 0.000000, 0.000000, 273.9543, 99.0, 99.0, 99.0}, 						  // Gobierno
	// 1553.7915,-1484.0624,1370.3561,273.9543,0,0,0,0,0,0
	{205.733306, -1497.676269, 1011.766967, 0.000000, 0.000000, 90.099945, 206.5012,-1497.6931,1011.7670},    // Hitman
	{2546.225585, -1393.109619, 1061.127929, 0.000000, 0.000000, 0.000000, 2546.2864,-1393.9667,1061.1575}    // Camioneros
};

enum e_MUEBLE_DATA
{
	mIndex,
	Float: mPos_x,
	Float: mPos_y,
	Float: mPos_z,
	Float: mRot_x,
	Float: mRot_y,
	Float: mRot_z,
	mTexture [4]
}

#define MAX_WEAPONS     sizeof(WeaponData)

static const Float: CasillerosLSPD [] [3] =
{
	{-1802.5002,-248.5701,1066.0093},
	{-1804.0729,-248.5714,1066.0093},
	{-1805.0370,-248.5716,1066.0093},
	{-1806.2896,-249.3361,1066.0093},
	{-1806.2953,-248.7714,1066.0093},
	{-1806.3026,-247.9743,1066.0093},
	{-1806.3087,-247.2925,1066.0093},
	{-1806.3165,-246.5452,1066.0093},
	{-1806.3303,-245.0408,1066.0093},
	{-1806.3405,-243.9613,1066.0093},
	{-1806.2863,-242.6091,1066.0093},
	{-1806.2924,-241.9089,1066.0093},
	{-1806.3004,-241.1513,1066.0093},
	{-1806.3074,-240.3667,1066.0093},
	{-1806.3158,-239.6338,1066.0093},
	{-1806.3309,-238.1095,1066.0093},
	{-1806.3396,-237.1315,1066.0093},
	{-1806.2885,-235.6864,1066.0093},
	{-1806.2949,-235.0409,1066.0093},
	{-1806.3026,-234.2177,1066.0093},
	{-1806.3093,-233.5090,1066.0093},
	{-1806.3164,-232.7271,1066.0093},
	{-1806.3303,-231.2876,1066.0093},
	{-1806.3405,-230.1877,1066.0093},
	{-1806.2880,-228.8532,1066.0093},
	{-1806.2959,-228.0738,1066.0093},
	{-1806.3021,-227.3547,1066.0093},
	{-1806.3096,-226.5554,1066.0093},
	{-1806.3168,-225.8360,1066.0093},
	{-1806.3297,-224.4652,1066.0093},
	{-1806.3413,-223.1921,1066.0093},
	{-1803.6683,-226.6166,1066.0093},
	{-1803.6570,-227.3624,1066.0093},
	{-1803.6439,-228.1465,1066.0093},
	{-1803.6343,-228.9256,1066.0093},
	{-1803.6218,-229.5999,1066.0093},
	{-1803.5969,-231.1364,1066.0093},
	{-1803.5828,-232.2239,1066.0093},
	{-1803.6837,-238.4559,1066.0093},
	{-1803.6707,-239.2449,1066.0093},
	{-1803.6578,-240.0723,1066.0093},
	{-1803.6478,-240.7169,1066.0093},
	{-1803.6355,-241.5002,1066.0093},
	{-1803.6107,-243.0779,1066.0093},
	{-1803.5962,-244.0000,1066.0093},
	{-1801.7914,-248.5712,1066.0093},
	{-1801.0857,-248.5713,1066.0093},
	{-1800.2830,-248.5713,1066.0093},
	{-1799.5106,-248.5714,1066.0093},
	{-1798.2676,-248.9793,1066.0093},
 	{-1798.2820,-248.0458,1066.0093},
	{-1798.3064,-246.4560,1066.0093},
	{-1798.3185,-245.7192,1066.0093},
	{-1798.3291,-245.0403,1066.0093},
	{-1798.3420,-244.2191,1066.0093},
	{-1798.3534,-243.5266,1066.0093},
	{-1798.2676,-241.8673,1066.0093},
	{-1798.2823,-240.8468,1066.0093},
	{-1798.3064,-239.3292,1066.0093},
	{-1798.3163,-238.5967,1066.0093},
	{-1798.3287,-237.8042,1066.0093},
	{-1798.3400,-237.0737,1066.0093},
	{-1798.3507,-236.3863,1066.0093},
	{-1798.2719,-235.3309,1066.0093},
	{-1798.2869,-234.3883,1066.0093},
	{-1798.3107,-232.8485,1066.0093},
	{-1798.3220,-232.1089,1066.0093},
	{-1798.3330,-231.3568,1066.0093},
	{-1798.3420,-230.7350,1066.0093},
	{-1798.3549,-229.8852,1066.0093},
	{-1798.2677,-228.5550,1066.0093},
	{-1798.2816,-227.6242,1066.0093},
	{-1798.3069,-225.9869,1066.0093},
	{-1798.3171,-225.3203,1066.0093},
	{-1798.3285,-224.5975,1066.0093},
	{-1798.3408,-223.7903,1066.0093},
	{-1798.3519,-223.0511,1066.0093},
	{-1801.2318,-226.6231,1066.0093},
	{-1801.2228,-227.6368,1066.0093},
	{-1801.2089,-229.1537,1066.0093},
	{-1801.2018,-229.9329,1066.0093},
	{-1801.1953,-230.6142,1066.0093},
	{-1801.1880,-231.3937,1066.0093},
	{-1801.1808,-232.1688,1066.0093},
	{-1801.2998,-238.5391,1066.0093},
	{-1801.2906,-239.5278,1066.0093},
	{-1801.2764,-241.1012,1066.0093},
	{-1801.2689,-241.8450,1066.0093},
	{-1801.2621,-242.5583,1066.0093},
	{-1801.2544,-243.3405,1066.0093},
	{-1801.2478,-244.0388,1066.0093}
};

static const Float: CasillerosLSEM [] [3] =
{
	{1300.93152, -1794.48779,1565.9921},
	{1301.92798, -1794.48792,1565.9921},
	{1303.44922, -1794.45642,1565.9921},
	{1304.12927, -1794.44141,1565.9921},
	{1304.84973, -1794.42615,1565.9921},
	{1305.62952, -1794.42700,1565.9921},
	{1306.36292, -1794.48242,1565.9921},
	{1300.57739, -1788.44568,1565.9921},
	{1301.39783, -1788.44067,1565.9921},
	{1302.11633, -1788.45886,1565.9921},
	{1302.87915, -1788.47583,1565.9921},
	{1303.53943, -1788.49597,1565.9921},
	{1305.13293, -1788.44531,1565.9921},
	{1306.15662, -1788.44861,1565.9921},
	{1317.35388, -1794.39441,1565.9921},
	{1318.29517, -1794.42151,1565.9921},
	{1319.93054, -1794.53357,1565.9921},
	{1320.61877, -1794.51086,1565.9921},
	{1321.36279, -1794.51819,1565.9921},
	{1322.11011, -1794.58179,1565.9921},
	{1322.84644, -1794.51294,1565.9921},
	{1317.63965, -1788.33691,1565.9921},
	{1318.41931, -1788.37024,1565.9921},
	{1319.11987, -1788.36255,1565.9921},
	{1319.86011, -1788.35449,1565.9921},
	{1320.56018, -1788.36023,1565.9921},
	{1322.18054, -1788.38306,1565.9921},
	{1323.20288, -1788.38245,1565.9921},
	{1330.21497, -1794.52588,1565.9921},
	{1331.23413, -1794.56689,1565.9921},
	{1332.79358, -1794.59216,1565.9921},
	{1333.55334, -1794.62476,1565.9921},
	{1334.24341, -1794.57178,1565.9921},
	{1334.98706, -1794.63208,1565.9921},
	{1335.74951, -1794.61145,1565.9921},
	{1335.28442, -1788.39148,1565.9921},
	{1335.98474, -1788.37292,1565.9921},
	{1336.76538, -1788.35193,1565.9921},
	{1337.48462, -1788.41113,1565.9921},
	{1338.24548, -1788.39148,1565.9921},
	{1339.81140, -1788.35303,1565.9921},
	{1340.80310, -1788.34314,1565.9921},
	{1343.37683, -1794.64636,1565.9921},
	{1343.39587, -1795.36621,1565.9921},
	{1343.39380, -1796.12659,1565.9921},
	{1343.41565, -1796.82690,1565.9921},
	{1343.39746, -1797.58777,1565.9921},
	{1343.36560, -1799.14856,1565.9921},
	{1343.41565, -1800.10437,1565.9921},
	{1338.66272, -1798.28052,1565.9921},
	{1338.66272, -1798.28052,1565.9921},
	{1338.62439, -1799.28040,1565.9921},
	{1338.64819, -1800.82092,1565.9921},
	{1338.66101, -1801.54126,1565.9921},
	{1338.63794, -1802.26233,1565.9921},
	{1338.59595, -1803.12134,1565.9921},
	{1338.59753, -1803.78271,1565.9921}
};

static const Float: HornosBigFoot[][] =
{
	{2559.98389, -1293.41235, 1044.43750, 0.0},
	{2553.45386, -1293.30859, 1044.43750, 0.0},
	{2543.20850, -1293.38770, 1044.43750, 0.0},
	{2541.68726, -1304.79395, 1044.42041, 0.0},
	{2557.53784, -1283.18665, 1044.42041, 0.0},
	{2552.64136, -1304.18982, 1044.42041, 0.0},
	{2557.78418, -1304.14709, 1044.42041, 0.0},
	{2544.64893, -1282.99939, 1044.42041, 0.0},
	{2552.69629, -1283.16052, 1044.42041, 0.0}
};

static const Float: HornosBlackAso[][] =
{
	{319.65042, 1956.33557, 1010.54437, -89.82001},
	{324.86050, 1956.25427, 1010.54437, -89.28000},
	{329.95636, 1956.32031, 1010.54437, -89.28000},
	{335.16119, 1956.35730, 1010.54437, -89.28000},
	{340.25555, 1956.39307, 1010.54437, -89.28000},
	{345.33493, 1956.45691, 1010.54437, -90.95998},
	{314.47220, 1956.24072, 1010.54437, -89.28000},
	{345.33490, 1946.35693, 1010.54437, -89.82000},
	{340.29489, 1946.44690, 1010.54437, -90.96000},
	{335.25491, 1946.52686, 1010.54437, -90.96000},
	{330.23489, 1946.60693, 1010.54437, -90.24001},
	{325.19489, 1946.70691, 1010.54437, -90.36001},
	{320.15491, 1946.78687, 1010.54437, -90.96000},
	{315.11560, 1946.87109, 1010.54437, -90.96000},
	{314.72864, 1966.37622, 1010.54437, -89.63999},
	{319.92859, 1966.41626, 1010.54437, -89.64000},
	{325.02859, 1966.45630, 1010.54437, -89.64000},
	{330.10861, 1966.47632, 1010.54437, -89.64000},
	{335.10861, 1966.51636, 1010.54437, -89.64000},
	{340.16861, 1966.55640, 1010.54437, -89.64000},
	{345.22861, 1966.59644, 1010.54437, -89.64000}
};

static const Float: DestiladorBigFoot[][] =
{
	{2567.3521, -1288.4651, 1044.1250},
	{2567.3518, -1285.1202, 1044.1250},
	{2567.3518, -1281.6035, 1044.1250}
};

enum E_PC_POS_DATA
{
	pcNegType,

	pcModelID,

	Float: pcX,
	Float: pcY,
	Float: pcZ,
	Float: pcA,

	Float: pcObjX,
	Float: pcObjY,
	Float: pcObjZ,
	Float: pcObjA
};

static const Float: pc_Data [] [E_PC_POS_DATA] =
{
	{N_BOLICHE, 1999, 502.035095, -23.717006, 1000.679687, 179.923370, 503.020507, -24.407144, 999.668884, -179.200012},
	{N_ESTACION, 2190, -22.373758, -140.311599, 1003.546875, 17.318456, -22.480022, -139.280364, 1003.446777, 0.000000},
	{N_247, 1999, -31.063282, -186.622177, 1003.546875, 356.638610, -32.052005, -186.013381, 1002.556823, 0.000000},
	{N_247, 2190, 381.982971, -61.407833, 1001.507812, 2.048799, 382.430084, -59.712169, 1000.517150, -89.700019},
	{N_COMIDA, 1999, 381.717163, -61.326766, 1001.507812, 263.608093, 382.421173, -60.382690, 1000.537292, -89.499969},
	{N_ROPA, 2190, 207.199447, -127.805664, 1003.507812, 178.499359, 206.883575, -128.645233, 1003.287597, 160.999893},
	{N_TECNOLOGIA, 1999, -1708.236206, 1883.325927, 1068.785888, 273.129119, -1707.434204, 1884.244384, 1067.764892, -91.499786},
	{N_ROPA, 2190, 198.520034, -157.863845, 1000.523437, 87.281303, 197.644470, -157.458572, 1000.133239, 57.599933},
	{N_ROPA, 2190, 204.464492, -10.286746, 1001.210937, 106.727119, 203.629364, -10.235324, 1000.960754, 90.900009},
	{N_FARMACIA, 2190, 166.597366, -75.077651, 963.285949, 357.044799, 166.824707, -74.194992, 963.125793, -22.299995},
	{N_ROPA, 2190, 209.884353, -98.535926, 1005.257812, 195.826278, 209.915405, -99.634140, 1005.257812, 179.600036},
	{N_COMIDA, 1999, 379.295440, -116.873809, 1001.492187, 264.385772, 380.091400, -115.924140, 1000.461669, -92.899986},
	{N_BOLICHE, 1999, 494.581909, -81.262031, 998.765075, 270.085540, 495.333709, -80.220825, 997.757263, -90.000030},
	{N_COMIDA, 2190, 369.386596, -4.318897, 1001.851562, 209.106353, 369.449371, -5.371641, 1001.851562, -179.200027}
};

enum E_PEDIDO_CAMIONEROS
{
	p_NegID,
	p_Time,
	p_PlayerID,
	p_Stock[MAX_STOCK_NEGOCIO]
}

#define MAX_PEDIDOS_CAMIONEROS      (15)
#define PRECIO_ENTREGACAMIONEROS    1300
#define PC_MIN_COMPRA               1500

#define MAX_CASILLEROS_LSPD     	sizeof(CasillerosLSPD)
#define MAX_CASILLEROS_LSEM     	sizeof(CasillerosLSEM)
#define MAX_HORNOS_BIGFOOT      	sizeof(HornosBigFoot)
#define MAX_DESTILADORES_BIGFOOT   	sizeof(DestiladorBigFoot)
#define MAX_HORNOS_BLACKASO      	sizeof(HornosBlackAso)

enum E_CASILLERO_DATA
{
	casOwner[MAX_PLAYER_NAME],
	casItem[MAX_ITEMS_CASILLERO_LSPD],
	casData[MAX_ITEMS_CASILLERO_LSPD],
	Text3D:casLabelID
};

enum E_WEAP_DATA
{
	weapName[30 char],
	weapAmmo,
	weapObjID
}

enum E_HORNO_BF_DATA
{
	bool: hornoEncendido,
	Float: hornoCantidad,
	Float: hornoProducto,
	Float: hornoQuerosen,
	Float: hornoCarbon,
	hornoObjID[3],
	Text3D:hornoLabelID
}

enum E_HORNO_BA_DATA
{
	bool: hornoEncendido,
	Float: hornoPorHacer,
	Float: hornoHecho,
	Float: hornoMetal,
	Float: hornoCarbon,
	hornoMolde,
	hornoObj,
	hornoObjID[2],
	Text3D:hornoLabelID
}

enum E_DESTILADOR_DATA
{
	Text3D:destLabelID,
	destDestilado,
	destPorDestilar
}

enum E_LAB_DATA
{
	Text3D: labLabelID,
	labFamDominante,
	labZoneID,
	labGangZoneID,
	labCerrado,
	labTiempoGuerra,
	labAtacante
}

enum E_FAB_DATA
{
	Text3D: fabLabelID,
	fabFamDominante,
	fabCerrado,
	fabTiempoGuerra,
	fabAtacante
}

static const WeaponData [] [E_WEAP_DATA] =
{
	{!"Mano", 4999, 1575},
	{!"Puño americáno", 4999, 331},
	{!"Palo de Golf", 4999, 333},
	{!"Cachiporra", 4999, 334},
	{!"Cuchillo", 4999, 335},
	{!"Bate", 4999, 336},
	{!"Pala", 4999, 337},
	{!"Palo de pool", 4999, 338},
	{!"Katana", 4999, 339},
	{!"Motosierra", 4999, 341},
	{!"Consolador", 4999, 321},
	{!"Consolador", 4999, 322},
	{!"Vibrador", 4999, 323},
	{!"Vibrador", 4999, 324},
	{!"Flores", 4999, 325},
	{!"Bastón", 4999, 326},
	{!"Granada", 4999, 342},
	{!"Granada de humo", 4999, 343},
	{!"Bomba Molotov", 4999, 344},
	{!"", 0, -1},
	{!"", 0, -1},
	{!"", 0, -1},
	{!"Pistola 9mm", 17, 346},
	{!"Pistola con silenciador", 17, 347},
	{!"Desert Eagle", 7, 348},
	{!"Escopeta", 8, 349},
	{!"Escopeta recortada", 4, 350},
	{!"SPAS 12", 7, 351},
	{!"UZI", 50, 352},
	{!"MP5", 30, 353},
	{!"AK 47", 30, 355},
	{!"M4", 30, 356},
	{!"TEC9", 50, 372},
	{!"Rifle", 7, 357},
	{!"Sniper", 4, 358},
	{!"Lanzacohetes", 4999, 359},
	{!"Bazooka", 4999, 360},
	{!"Lanzallamas", 100, 361},
	{!"Minigun", 500, 362},
	{!"Explosivos", 4999, 363},
	{!"Detonador", 4999, 364},
	{!"Spray", 1500, 365},
	{!"Matafuegos", 500, 366},
	{!"Cámara fotográfica", 4999, 367},
	{!"Gáfas (Visión nocturna)", 4999, 368},
	{!"Gáfas (Infra Rojas)", 4999, 369},
	{!"Paracaídas", 4999, 371}
};

// ---====[ Bools ]====---- //

new
	bool:AyuntaRestringido,
	bool:EnTransmision,
	bool:EnTransmision_AV
;

// ---====[ Barras ]====---- //

new
	PlayerBar:BHambre[MAX_PLAYERS] = {INVALID_PLAYER_BAR_ID, ...},
	PlayerBar:BCansancio[MAX_PLAYERS] = {INVALID_PLAYER_BAR_ID, ...},
	PlayerBar:BOrina[MAX_PLAYERS] = {INVALID_PLAYER_BAR_ID, ...},
	PlayerBar:BVelocimetro[MAX_PLAYERS] = {INVALID_PLAYER_BAR_ID, ...},
	PlayerBar:BGasolimetro[MAX_PLAYERS] = {INVALID_PLAYER_BAR_ID, ...},
	PlayerBar:BSpecialBar[MAX_PLAYERS] = {INVALID_PLAYER_BAR_ID, ...};

// ---====[ 3D Labels ]====---- //

new
	Text3D:RangoADM[MAX_PLAYERS] = {Text3D:INVALID_3DTEXT_ID, ...},
	Text3D:Enmascarado[MAX_PLAYERS] = {Text3D:INVALID_3DTEXT_ID, ...},
	PlayerText3D:TextoCarcel[MAX_PLAYERS] = {PlayerText3D:INVALID_3DTEXT_ID, ...};

// ---====[ TextDraws ]====---- //

new
	Text:flash, //Camaras de velocidad
	Text:Registro[6],
	Text:FlechaSexo[2],
	Text:FlechaEdad[2],
	Text:FlechaPelea[2],
	Text:FlechaEstilo[2],
	PlayerText:Sexo[MAX_PLAYERS],
	PlayerText:Edad[MAX_PLAYERS],
	PlayerText:Pelea[MAX_PLAYERS],
	PlayerText:Estilo[MAX_PLAYERS],
	PlayerText:TituloTuto[MAX_PLAYERS] = {PlayerText:INVALID_TEXT_DRAW, ...},
	PlayerText:InfoTuto[MAX_PLAYERS][3],
	Text:BOXTuto[2],
	Text:FlechaCRopa[2],
	Text:CRopa,
	Text:SCRopa,
	Text:PCRopa,
	Text:Cajero[3],
	PlayerText:Cuenta_Balance[2][MAX_PLAYERS],
	Text:Operaciones[3],
	Text:SCajero,
	Text:CuentaGen,
	Text:CuentaCas,
	Text:CuentaNeg,
	Text:CuentaVeh,
	Text:CuentaArmas,
	Text:CuentaBox,
	Text:CAMARA_Seg[4],
	Text:Vendado,
	Text:Cargando,
	PlayerText:MsgText[MAX_PLAYERS],
	Text:TDTV[9],
	Text:TV_Apagado,
	Text:TV_Azul,
	Text:Fondo_Licencia,
	PlayerText:NumberPanel[MAX_PLAYERS][MAX_KEY_NUMBERS],
	Text:KeyPad_Fondo,
	PlayerText:TutoCuerpo[MAX_PLAYERS],
	PlayerText:TutoTitulo[MAX_PLAYERS],
	PlayerText:BarraGris[MAX_PLAYERS] = {PlayerText:INVALID_TEXT_DRAW, ...},
	Text: PizzaTiempo,

	//Necesidades
	Text:TDNecesidades,
	Text:TDNecesidadesBOX,
	PlayerText:TDHambre[MAX_PLAYERS][2],
	PlayerText:TDVejiga[MAX_PLAYERS][2],
	PlayerText:TDEstado[MAX_PLAYERS][2],

	//Velocimetro
	PlayerText:TDVelocimetro[MAX_PLAYERS],
	Text:TDVelocimetroBOX,
	Text:TDVelocimetroTXT,
	Text:TDVelocimetroFondo,
	PlayerText:TDContadorKM[MAX_PLAYERS],
	Text:BOXContadorKM,

	//Gasolimetro
	PlayerText:TDGasolimetro[MAX_PLAYERS],
	Text:TDGasolimetroBOX,
	Text:TDGasolimetroTXT,
	Text:TDGasolimetroFondo,

	//SpecialBar
	PlayerText:TDSpecialBarTittle[MAX_PLAYERS],
	PlayerText:TDSpecialBarText[MAX_PLAYERS],
	Text:TDSpecialBarBOX,
	Text:TDSpecialBarFondo,

	//Droga
	Text:TDEfectoFaso,

	//SMS
	PlayerText: TDSMS  [MAX_PLAYERS] [MAX_SMS_TEXT],
	PlayerText: TDSMS2 [MAX_PLAYERS] [MAX_SMS_TEXT],

	//Inventario
/*	PlayerText: TDCargador[MAX_PLAYERS] = {PlayerText:INVALID_TEXT_DRAW, ...},
	PlayerText: TDMano[MAX_PLAYERS] = {PlayerText:INVALID_TEXT_DRAW, ...},
	PlayerText: TDManoInfo[MAX_PLAYERS] = {PlayerText:INVALID_TEXT_DRAW, ...},
	Text: TDBoxInfo,
	Text: TDBoxObj,
	Text: TDHudObj,*/
	PlayerText: TDCargador[MAX_PLAYERS] = {PlayerText:INVALID_TEXT_DRAW, ...},
	PlayerText: TDMano[MAX_PLAYERS] = {PlayerText:INVALID_TEXT_DRAW, ...},
	Text: TDManoHUD,

	//Hora
	Text:TDHora,

	// OP:CEL
	Text:CEL.Fondo[10],
	Text:CEL.ImagenFondo,
	Text:CEL.Hora,

	// Menu
	Text:CEL.MenuMarcar[2],
	Text:CEL.MenuMensajes[2],
	Text:CEL.MenuContactos[2],
	Text:CEL.MenuServicios[2],
	Text:CEL.MenuVolver,

	// Marcar
	Text:CEL.MarcarNumero[10],
	Text:CEL.MarcarX,
	Text:CEL.MarcarM,
	PlayerText:CEL.MarcarTexto[MAX_PLAYERS] = {PlayerText: INVALID_TEXT_DRAW, ...},

	// Mensajes
	Text:CEL.SMSBox,
	PlayerText:CEL.SMSTexto[MAX_PLAYERS][CEL_MAX_SMS],
	PlayerText:CEL.SMSContacto[MAX_PLAYERS][CEL_MAX_SMS],

	// Contactos
	PlayerText:CEL.ContactoNombre[MAX_PLAYERS][CEL_MAX_CONTACT],

	// Servicios
	Text:CEL.ServiciosLlamarA,
	Text:CEL.ServiciosPolicia,
	Text:CEL.ServiciosTaxis,
	Text:CEL.ServiciosHospital,
	Text:CEL.ServiciosTaller,

	//Principio
	Text:PCNEG_Box,
	Text:PCNEG_Fondo,
	Text:PCNEG_Inicio,
	Text:PCNEG_Start,
	Text:PCNEG_Decorado,

	//Start
	Text:PCNEG_S_Fondo,
	Text:PCNEG_S_Productos,
	Text:PCNEG_S_Ganancias,
	Text:PCNEG_S_Configurar,
	Text:PCNEG_S_Apagar,

	//Productos
	Text:PCNEG_P_Box,
	Text:PCNEG_P_Cerrar,
	Text:PCNEG_P_Fondo,
	Text:PCNEG_P_Productos,
	Text:PCNEG_P_ComprarProductos,
	Text:PCNEG_P_ProductoStock,

	PlayerText:PCNEG_P_Nombre[MAX_PLAYERS] = {PlayerText:INVALID_TEXT_DRAW, ...},
	PlayerText:PCNEG_P_Stock[MAX_PLAYERS] = {PlayerText:INVALID_TEXT_DRAW, ...},

	//Ganancias
	Text:PCNEG_G_ProductoVendido,
	Text:PCNEG_G_Ganancias,
	PlayerText:PCNEG_G_Total[MAX_PLAYERS] = {PlayerText:INVALID_TEXT_DRAW, ...},

	//Pedir Stock
	Text:PCNEG_PS_Box,
	Text:PCNEG_PS_NPC, // Nombre Precio Cantidad, no BOT.
	Text:PCNEG_PS_Cerrar,
	Text:PCNEG_PS_Fondo,
	Text:PCNEG_PS_Flecha[2][MAX_STOCK_TYPE],
	Text:PCNEG_PS_ConfirmarComprar,

	PlayerText:PCNEG_PS_Costo[MAX_PLAYERS] = {PlayerText:INVALID_TEXT_DRAW, ...},
	PlayerText:PCNEG_PS_Nombre[MAX_PLAYERS] = {PlayerText:INVALID_TEXT_DRAW, ...},
	PlayerText:PCNEG_PS_Precio[MAX_PLAYERS] = {PlayerText:INVALID_TEXT_DRAW, ...},
	PlayerText:PCNEG_PS_Cantidad[MAX_PLAYERS] = {PlayerText:INVALID_TEXT_DRAW, ...},

	// Necesidades
	PlayerText:TDSueno[MAX_PLAYERS] = {PlayerText:INVALID_TEXT_DRAW, ...},
	PlayerText:TDOrina[MAX_PLAYERS] = {PlayerText:INVALID_TEXT_DRAW, ...},

	// Taximetro
	Text: TDTaximetroBOX,
	Text: TDTaximetroTXT,
	PlayerText: TDTaximetro [MAX_PLAYERS] = {PlayerText: INVALID_PLAYER_ID, ...}
;

//      STAFF      //
new AyudaDestacado[] =
	""#CDESTACADO"Usuario destacado: /a (Podrá mandar mensajes al canal administrativo, pero no podrá leerlo)\n";

new AyudaAyudante[] =
	""#CAYUDANTE"Ayudante: /ls /vermps /novermps /cmp /amp /silenciar /info1 /info2 /admservice /as /jetpack\nLeen mensajes de administradores del /a\n";

new AyudaModerador[] =
	""#CMODERADOR"Moderador: /malnombre /nomalnombre /verpresos /ar /rr /vermiembros  /verllaves /llenarbarras /o /ircasa\n\
/irnegocio /irlugar /slap /lp /jail /liberar /spec /dejarspec /actualizarspec\n\
/revivir /kick /ir /congelar /descongelar /traer /check /jailcuenta\n\
/vcerrar /vabrir /vtraer /vreparar /noobs /qfa (ID) /ultimaconexion /verinv\n";

new AyudaModSuperior[] =
	""#CMOD.SUPERIOR"Administrador: /destrellas /sestrellas /ban /bancuenta\n\
/vrespawn /vrespawnzona /vmotor /vllenar /ventrar /vcolor /cnnn /adelante \n\
/arriba /abajo /bigears /vercasascuenta /vernegocioscuenta /advertir /limpiaradvertencias\
\n";

new AyudaAdministrador[] =
	""#CADMINISTRADOR"Adm. superior: /vercajasfuertes /cajafuertecasa /irpos /material \n\
/crearmineral /verip /veripcuenta /actualizarcuenta\n\
/desban /banip /unbanip /respawngeneral /vestacionar /vir\n\
/respawntotal /fijarclima /darllaveveh /quitarllaveveh /borrargraffiti\n\
/quitararmas /vendercasa /vendernegocio /graffdata /editargraffiti\n\
/fijarhora /crearobj /editarobj /eventomadd\n";

new AyudaSubDueno[] =
	""#CSUBDUENO"Adm. encargado: /expulsarliderfac /expulsarliderfam /editarliderfac /editarliderfam\n\
/darllavescuenta /darllaves /quitarllavescuenta /quitarllaves /irint\n\
/money /sethp /setarmour /creararbolito /creararbol /vcargarid /vcargarcuenta /vcargarpatente /vdescargar\n\
/borrarnegocio /borrarcasa /editarfamilia /creartv /borrartv /idtv /irtv /crearcasa\n\
/intcasa /preciocasa /precionegocio /creargarage /crearnegocio /setdp\n\
/borrarvehiculo /borrargarage /creargangzone /creargangzone_2 /borrargangzone\n";

new AyudaDueno[] =
	""#CDUENO"Director /restart /crearfamilia /superban /verids /crearinterior \n\
/vcrear /vborrar /vcrearventa /vborrarventa /vprecio /crearportonfam /crearportoncasa /editarporton /staff\n\
/actualizararchivos /staffcuenta /rbots /recargarminrales /adminwarn /adminwarncuenta /limpiaradmwarn \n\
/veradmwarns /dobleexp /crearestacion /borrarestacion /editarestacion /llenargasolinera /darobj /verobj\n\
/llenarinv /clearoph /speclist /dararma /forzarimportaciones /editarcuenta";

new VehicleColoursTableRGBA[256] =
{
	// The existing colours from San Andreas
	0x000000FF, 0xF5F5F5FF, 0x2A77A1FF, 0x840410FF, 0x263739FF, 0x86446EFF, 0xD78E10FF, 0x4C75B7FF, 0xBDBEC6FF, 0x5E7072FF,
	0x46597AFF, 0x656A79FF, 0x5D7E8DFF, 0x58595AFF, 0xD6DAD6FF, 0x9CA1A3FF, 0x335F3FFF, 0x730E1AFF, 0x7B0A2AFF, 0x9F9D94FF,
	0x3B4E78FF, 0x732E3EFF, 0x691E3BFF, 0x96918CFF, 0x515459FF, 0x3F3E45FF, 0xA5A9A7FF, 0x635C5AFF, 0x3D4A68FF, 0x979592FF,
	0x421F21FF, 0x5F272BFF, 0x8494ABFF, 0x767B7CFF, 0x646464FF, 0x5A5752FF, 0x252527FF, 0x2D3A35FF, 0x93A396FF, 0x6D7A88FF,
	0x221918FF, 0x6F675FFF, 0x7C1C2AFF, 0x5F0A15FF, 0x193826FF, 0x5D1B20FF, 0x9D9872FF, 0x7A7560FF, 0x989586FF, 0xADB0B0FF,
	0x848988FF, 0x304F45FF, 0x4D6268FF, 0x162248FF, 0x272F4BFF, 0x7D6256FF, 0x9EA4ABFF, 0x9C8D71FF, 0x6D1822FF, 0x4E6881FF,
	0x9C9C98FF, 0x917347FF, 0x661C26FF, 0x949D9FFF, 0xA4A7A5FF, 0x8E8C46FF, 0x341A1EFF, 0x6A7A8CFF, 0xAAAD8EFF, 0xAB988FFF,
	0x851F2EFF, 0x6F8297FF, 0x585853FF, 0x9AA790FF, 0x601A23FF, 0x20202CFF, 0xA4A096FF, 0xAA9D84FF, 0x78222BFF, 0x0E316DFF,
	0x722A3FFF, 0x7B715EFF, 0x741D28FF, 0x1E2E32FF, 0x4D322FFF, 0x7C1B44FF, 0x2E5B20FF, 0x395A83FF, 0x6D2837FF, 0xA7A28FFF,
	0xAFB1B1FF, 0x364155FF, 0x6D6C6EFF, 0x0F6A89FF, 0x204B6BFF, 0x2B3E57FF, 0x9B9F9DFF, 0x6C8495FF, 0x4D8495FF, 0xAE9B7FFF,
	0x406C8FFF, 0x1F253BFF, 0xAB9276FF, 0x134573FF, 0x96816CFF, 0x64686AFF, 0x105082FF, 0xA19983FF, 0x385694FF, 0x525661FF,
	0x7F6956FF, 0x8C929AFF, 0x596E87FF, 0x473532FF, 0x44624FFF, 0x730A27FF, 0x223457FF, 0x640D1BFF, 0xA3ADC6FF, 0x695853FF,
	0x9B8B80FF, 0x620B1CFF, 0x5B5D5EFF, 0x624428FF, 0x731827FF, 0x1B376DFF, 0xEC6AAEFF, 0x000000FF,
	// SA-MP extended colours (0.3x)
	0x177517FF, 0x210606FF, 0x125478FF, 0x452A0DFF, 0x571E1EFF, 0x010701FF, 0x25225AFF, 0x2C89AAFF, 0x8A4DBDFF, 0x35963AFF,
	0xB7B7B7FF, 0x464C8DFF, 0x84888CFF, 0x817867FF, 0x817A26FF, 0x6A506FFF, 0x583E6FFF, 0x8CB972FF, 0x824F78FF, 0x6D276AFF,
	0x1E1D13FF, 0x1E1306FF, 0x1F2518FF, 0x2C4531FF, 0x1E4C99FF, 0x2E5F43FF, 0x1E9948FF, 0x1E9999FF, 0x999976FF, 0x7C8499FF,
	0x992E1EFF, 0x2C1E08FF, 0x142407FF, 0x993E4DFF, 0x1E4C99FF, 0x198181FF, 0x1A292AFF, 0x16616FFF, 0x1B6687FF, 0x6C3F99FF,
	0x481A0EFF, 0x7A7399FF, 0x746D99FF, 0x53387EFF, 0x222407FF, 0x3E190CFF, 0x46210EFF, 0x991E1EFF, 0x8D4C8DFF, 0x805B80FF,
	0x7B3E7EFF, 0x3C1737FF, 0x733517FF, 0x781818FF, 0x83341AFF, 0x8E2F1CFF, 0x7E3E53FF, 0x7C6D7CFF, 0x020C02FF, 0x072407FF,
	0x163012FF, 0x16301BFF, 0x642B4FFF, 0x368452FF, 0x999590FF, 0x818D96FF, 0x99991EFF, 0x7F994CFF, 0x839292FF, 0x788222FF,
	0x2B3C99FF, 0x3A3A0BFF, 0x8A794EFF, 0x0E1F49FF, 0x15371CFF, 0x15273AFF, 0x375775FF, 0x060820FF, 0x071326FF, 0x20394BFF,
	0x2C5089FF, 0x15426CFF, 0x103250FF, 0x241663FF, 0x692015FF, 0x8C8D94FF, 0x516013FF, 0x090F02FF, 0x8C573AFF, 0x52888EFF,
	0x995C52FF, 0x99581EFF, 0x993A63FF, 0x998F4EFF, 0x99311EFF, 0x0D1842FF, 0x521E1EFF, 0x42420DFF, 0x4C991EFF, 0x082A1DFF,
	0x96821DFF, 0x197F19FF, 0x3B141FFF, 0x745217FF, 0x893F8DFF, 0x7E1A6CFF, 0x0B370BFF, 0x27450DFF, 0x071F24FF, 0x784573FF,
	0x8A653AFF, 0x732617FF, 0x319490FF, 0x56941DFF, 0x59163DFF, 0x1B8A2FFF, 0x38160BFF, 0x041804FF, 0x355D8EFF, 0x2E3F5BFF,
	0x561A28FF, 0x4E0E27FF, 0x706C67FF, 0x3B3E42FF, 0x2E2D33FF, 0x7B7E7DFF, 0x4A4442FF, 0x28344EFF
};

new legalmods[48][22] =
{
	{400, 1024,1021,1020,1019,1018,1013,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{401, 1145,1144,1143,1142,1020,1019,1017,1013,1007,1006,1005,1004,1003,1001,0000,0000,0000,0000},
	{404, 1021,1020,1019,1017,1016,1013,1007,1002,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{405, 1023,1021,1020,1019,1018,1014,1001,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{410, 1024,1023,1021,1020,1019,1017,1013,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
	{415, 1023,1019,1018,1017,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{418, 1021,1020,1016,1006,1002,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{420, 1021,1019,1005,1004,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{421, 1023,1021,1020,1019,1018,1016,1014,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{422, 1021,1020,1019,1017,1013,1007,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{426, 1021,1019,1006,1005,1004,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{436, 1022,1021,1020,1019,1017,1013,1007,1006,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
	{439, 1145,1144,1143,1142,1023,1017,1013,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
	{477, 1021,1020,1019,1018,1017,1007,1006,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{478, 1024,1022,1021,1020,1013,1012,1005,1004,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{489, 1024,1020,1019,1018,1016,1013,1006,1005,1004,1002,1000,0000,0000,0000,0000,0000,0000,0000},
	{491, 1145,1144,1143,1142,1023,1021,1020,1019,1018,1017,1014,1007,1003,0000,0000,0000,0000,0000},
	{492, 1016,1006,1005,1004,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{496, 1143,1142,1023,1020,1019,1017,1011,1007,1006,1003,1002,1001,0000,0000,0000,0000,0000,0000},
	{500, 1024,1021,1020,1019,1013,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{516, 1021,1020,1019,1018,1017,1016,1015,1007,1004,1002,1000,0000,0000,0000,0000,0000,0000,0000},
	{517, 1145,1144,1143,1142,1023,1020,1019,1018,1017,1016,1007,1003,1002,0000,0000,0000,0000,0000},
	{518, 1145,1144,1143,1142,1023,1020,1018,1017,1013,1007,1006,1005,1003,1001,0000,0000,0000,0000},
	{527, 1021,1020,1018,1017,1015,1014,1007,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{529, 1023,1020,1019,1018,1017,1012,1011,1007,1006,1003,1001,0000,0000,0000,0000,0000,0000,0000},
	{534, 1185,1180,1179,1178,1127,1126,1125,1124,1123,1122,1106,1101,1100,0000,0000,0000,0000,0000},
	{535, 1121,1120,1119,1118,1117,1116,1115,1114,1113,1110,1109,0000,0000,0000,0000,0000,0000,0000},
	{536, 1184,1183,1182,1181,1128,1108,1107,1105,1104,1103,0000,0000,0000,0000,0000,0000,0000,0000},
	{540, 1145,1144,1143,1142,1024,1023,1020,1019,1018,1017,1007,1006,1004,1001,0000,0000,0000,0000},
	{542, 1145,1144,1021,1020,1019,1018,1015,1014,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{546, 1145,1144,1143,1142,1024,1023,1019,1018,1017,1007,1006,1004,1002,1001,0000,0000,0000,0000},
	{547, 1143,1142,1021,1020,1019,1018,1016,1003,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{549, 1145,1144,1143,1142,1023,1020,1019,1018,1017,1012,1011,1007,1003,1001,0000,0000,0000,0000},
	{550, 1145,1144,1143,1142,1023,1020,1019,1018,1006,1005,1004,1003,1001,0000,0000,0000,0000,0000},
	{551, 1023,1021,1020,1019,1018,1016,1006,1005,1003,1002,0000,0000,0000,0000,0000,0000,0000,0000},
	{558, 1168,1167,1166,1165,1164,1163,1095,1094,1093,1092,1091,1090,1089,1088,0000,0000,0000,0000},
	{559, 1173,1162,1161,1160,1159,1158,1072,1071,1070,1069,1068,1067,1066,1065,0000,0000,0000,0000},
	{560, 1170,1169,1141,1140,1139,1138,1033,1032,1031,1030,1029,1028,1027,1026,0000,0000,0000,0000},
	{561, 1157,1156,1155,1154,1064,1063,1062,1061,1060,1059,1058,1057,1056,1055,1031,1030,1027,1026},
	{562, 1172,1171,1149,1148,1147,1146,1041,1040,1039,1038,1037,1036,1035,1034,0000,0000,0000,0000},
	{565, 1153,1152,1151,1150,1054,1053,1052,1051,1050,1049,1048,1047,1046,1045,0000,0000,0000,0000},
	{567, 1189,1188,1187,1186,1133,1132,1131,1130,1129,1102,0000,0000,0000,0000,0000,0000,0000,0000},
	{575, 1177,1176,1175,1174,1099,1044,1043,1042,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{576, 1193,1192,1191,1190,1137,1136,1135,1134,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{580, 1023,1020,1018,1017,1007,1006,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{589, 1145,1144,1024,1020,1018,1017,1016,1013,1007,1006,1005,1004,1000,0000,0000,0000,0000,0000},
	{600, 1022,1020,1018,1017,1013,1007,1006,1005,1004,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{603, 1145,1144,1143,1142,1024,1023,1020,1019,1018,1017,1007,1006,1001,0000,0000,0000,0000,0000}
};

new ComponentTittles[194][] =
{
	"Pro","Win","Drag","Alpha","Champ","Fury","Roof","Derecho","x5","x2","x10",
	"Race","Worx","Round","Champ","Race","Worx","Izquierdo","Upswept","Twin","Large",
	"Medium","Small","Fury","Cuadrada","OffRoad","Derecho Alien","Izquierdo Alien",
	"Alien","X-Flow","Derecho X-Flow","Izquierdo X-Flow","Alien","X-Flow","Alien",
	"X-Flow","Alien","X-Flow","Alien","X-Flow","Alien","X-Flow","Chrome","Slamin",
	"Chrome","X-Flow","Alien","Alien","X-Flow","Alien","X-Flow","Alien","X-Flow",
	"X-Flow","Alien","Alien","Alien","X-Flow","Alien","X-Flow","X-Flow","X-Flow",
	"Alien","X-Flow","Alien","Alien","X-Flow","Alien","X-Flow","Alien","X-Flow",
	"Alien","X-Flow","Shadow","Mega","Rimshine","Wires","Classic","Twist","Cutter",
	"Switch","Grove","Import","Dollar","Trance","Atomic","Stereo","Hidráulica",
	"Alien","X-Flow","Alien","X-Flow","Alien","X-Flow","Alien","X-Flow","Ahab",
	"Virtual","Access","Chrome","Chrome","Chrome Flames","Chrome Strip","Covertible",
	"Chrome","Slamin","Chrome Arches","Chrome Strip","Chrome Strip","Chrome","Slamin",
	"Little Sign","Little Sign","Chrome","Slamin","Chrome","Slamin","Chrome","Chrome Trim",
	"Wheelcovers","Chrome Trim","Wheelcovers","Chrome Flames","Chrome Bars","Chrome Arches",
	"Chrome Lights","Chrome","Slamin","Vinyl","Chrome","Hardtop","Softtop","Slamin",
	"Chrome Strip","Chrome Strip","Slamin","Chrome","Chrome Strip","Alien","X-Flow",
	"X-Flow","Alien","Circular","Circular","Cuadrada","Cuadrada","X-Flow",
	"Alien","X-Flow","Alien","Alien","X-Flow","X-Flow","Alien","Alien","Alien","X-Flow",
	"X-Flow","X-Flow","Alien","Alien","X-Flow","Alien","X-Flow","Alien","X-Flow",
	"Alien","X-Flow","Alien","Alien","X-Flow","Alien","X-Flow","X-Flow","Chrome",
	"Slamin","Chrome","Slamin","Slamin","Chrome","Chrome","Slamin","Chrome","Slamin",
	"Chrome","Slamin","Slamin","Chrome","Slamin","Chrome","Slamin","Chrome","Chrome","Slamin"
};

stock GetComponentName(componentid)
{
	new
	    ComponentName[30];

	if(1000 <= componentid <= 1000+sizeof(ComponentTittles))
	{
	    strcat(ComponentName, ComponentTittles[componentid-1000]);
	}

	return ComponentName;
}

stock GM_DestroyVehicle(vehicleid)
{
	if(!IsValidVehicle(vehicleid))
		return 0;

	for(new i; E_VEH_GENERAL: i < E_VEH_GENERAL; i++)
	{
		Veh[vehicleid][E_VEH_GENERAL: i] = _:0;
	}
	for(new i; i < MAX_LUGARES_MALETERO; i++)
	{
	    ItemMaletero[vehicleid][i][invObject] = 0;
	    ItemMaletero[vehicleid][i][invData] = 0;
	}
	veh_remove(vehicleid);
	return 1;
}
#if defined _ALS_DestroyVehicle
	#undef DestroyVehicle
#else
	#define _ALS_DestroyVehicle
#endif
#define DestroyVehicle GM_DestroyVehicle


static const Float: PosMinerales[][] =
{
	{-36.399166, -1774.877441, 746.145385, 0.000000, 0.000000, 0.000000},
	{-35.431518, -1780.603759, 746.231262, 0.000000, 0.000000, 0.000000},
	{-36.286193, -1769.736083, 746.327697, 0.000000, 0.000000, 0.000000},
	{-37.619308, -1768.099243, 744.927673, 0.000000, 0.000000, 0.000000},
	{-37.247146, -1762.837524, 746.478149, 0.000000, 0.000000, 0.000000},
	{-38.592956, -1758.255981, 745.362609, 0.000000, 0.000000, 0.000000},
	{-37.783157, -1756.055664, 746.333068, 0.000000, 0.000000, 0.000000},
	{-39.182373, -1751.817504, 745.407348, 0.000000, 0.000000, 0.000000},
	{-38.286479, -1747.650390, 746.562377, 0.000000, 0.000000, 0.000000},
	{-39.436855, -1743.075683, 746.243591, 0.000000, 0.000000, 0.000000},
	{-40.393386, -1743.669555, 744.643310, 0.000000, 0.000000, 0.000000},
	{-47.504299, -1781.856933, 746.264404, 0.000000, 0.000000, 0.000000},
	{-48.981506, -1777.982788, 745.863464, 0.000000, 0.000000, 0.000000},
	{-46.520172, -1771.788574, 744.483154, 0.000000, 0.000000, 0.000000},
	{-46.770969, -1765.324340, 744.961730, 0.000000, 0.000000, 0.000000},
	{-47.130058, -1761.505493, 744.921264, 0.000000, 0.000000, 0.000000},
	{-46.803825, -1754.520874, 744.970153, 0.000000, 0.000000, 0.000000},
	{-47.647151, -1747.837158, 744.610534, 0.000000, 0.000000, -99.899948},
	{-48.399173, -1742.788330, 745.826904, 0.000000, 0.000000, 0.000000},
	{-51.322120, -1737.823974, 746.064758, 0.000000, 0.000000, 0.000000},
	{-55.511619, -1732.580078, 746.251098, 0.000000, 0.000000, 0.000000},
	{-61.638751, -1729.764282, 745.622558, 0.000000, 0.000000, 0.000000},
	{-65.481056, -1727.806274, 744.980712, 0.000000, 0.000000, 0.000000},
	{-44.342380, -1733.267089, 746.070129, 0.000000, 0.000000, 0.000000},
	{-48.212581, -1728.396240, 746.337158, 0.000000, 0.000000, 0.000000},
	{-52.656562, -1725.652587, 746.061462, 0.000000, 0.000000, 0.000000},
	{-55.878234, -1724.253051, 745.733886, 0.000000, 0.000000, 0.000000},
	{-62.098819, -1723.130126, 746.724548, 0.000000, 0.000000, 0.000000},
	{-66.593093, -1722.353393, 746.747375, 0.000000, 0.000000, 0.000000},
	{-69.818679, -1726.834472, 745.158569, 0.000000, 0.000000, 0.000000},
	{-76.499641, -1722.478637, 745.390014, 0.000000, 0.000000, 0.000000},
	{-76.899879, -1718.494995, 745.386535, 0.000000, 0.000000, 0.000000},
	{-71.372245, -1716.943481, 746.285400, 0.000000, 0.000000, 0.000000},
	{-69.714126, -1713.097656, 747.647460, 0.000000, 0.000000, 0.000000},
	{-69.266876, -1709.608764, 746.894958, 0.000000, 0.000000, 0.000000},
	{-68.047500, -1703.060180, 746.111877, 0.000000, 0.000000, 0.000000},
	{-68.070579, -1698.629760, 746.338317, 0.000000, 0.000000, 0.000000},
	{-68.281982, -1693.423217, 746.527954, 0.000000, 0.000000, 0.000000},
	{-67.413795, -1689.441772, 745.410522, 0.000000, 0.000000, 0.000000},
	{-65.968147, -1688.446655, 746.440307, 0.000000, 0.000000, 0.000000},
	{-76.271041, -1710.134765, 745.369873, 0.000000, 0.000000, 0.000000},
	{-77.353881, -1706.515869, 746.451110, 0.000000, 0.000000, 0.000000},
	{-77.300735, -1702.649047, 746.267395, 0.000000, 0.000000, 0.000000},
	{-77.021194, -1699.209472, 746.060668, 0.000000, 0.000000, 0.000000},
	{-76.391548, -1692.211914, 746.475585, 0.000000, 0.000000, 0.000000},
	{-76.158782, -1689.382568, 746.593688, 0.000000, 0.000000, 0.000000},
	{-77.342056, -1703.884033, 746.540649, 0.000000, 0.000000, 0.000000},
	{-76.440818, -1695.099121, 745.926269, 0.000000, 0.000000, 0.000000},
	{-74.614517, -1687.700073, 745.812988, 0.000000, 0.000000, 0.000000},
	{-68.914978, -1711.405029, 746.972412, 0.000000, 0.000000, 0.000000},
	{-72.231140, -1683.593383, 745.347351, 0.000000, 0.000000, 0.000000},
	{-72.066581, -1680.299194, 742.252075, 0.000000, 0.000000, 0.000000},
	{-61.193778, -1678.472167, 747.445678, 0.000000, 0.000000, 0.000000},
	{-59.909679, -1675.047851, 745.865295, 0.000000, 0.000000, 0.000000},
	{-68.589393, -1677.911621, 746.034851, 0.000000, 0.000000, 0.000000},
	{-64.578742, -1673.588500, 746.026184, 0.000000, 0.000000, 0.000000},
	{-62.163921, -1669.644653, 746.010986, 0.000000, 0.000000, 0.000000},
	{-53.131275, -1669.999877, 743.836120, 0.000000, 0.000000, 0.000000},
	{-55.950584, -1662.728881, 743.631408, 0.000000, 0.000000, 0.000000},
	{-57.034431, -1657.150878, 746.482727, 0.000000, 0.000000, 0.000000},
	{-58.984958, -1653.342041, 745.491699, 0.000000, 0.000000, 0.000000},
	{-59.904781, -1649.644531, 746.139709, 0.000000, 0.000000, 0.000000},
	{-68.761840, -1652.250000, 745.102416, 0.000000, 0.000000, 0.000000},
	{-64.707931, -1659.389160, 745.576538, 0.000000, 0.000000, 0.000000},
	{-64.094848, -1661.270629, 745.256652, 0.000000, 0.000000, 0.000000},
	{-71.748176, -1650.932006, 745.639526, 0.000000, 0.000000, 0.000000},
	{-78.278869, -1650.785766, 744.761413, 0.000000, 0.000000, -90.900009},
	{-83.132957, -1652.335449, 745.398620, 0.000000, 0.000000, -103.199958},
	{-87.022430, -1652.387573, 745.502624, 0.000000, 0.000000, -95.399948},
	{-90.271224, -1652.049682, 745.586914, 0.000000, 0.000000, -128.599990},
	{-92.823471, -1649.924072, 744.652465, 0.000000, 0.000000, -113.099998},
	{-54.622154, -1640.534179, 745.924255, 0.000000, 0.000000, -77.499984},
	{-50.789299, -1637.406005, 745.481872, 0.000000, 0.000000, 0.000000},
	{-49.047122, -1631.685668, 745.884033, 0.000000, 0.000000, 0.000000},
	{-50.555480, -1627.807006, 745.605834, 0.000000, 0.000000, 0.000000},
	{-57.473022, -1631.371215, 744.412048, 0.000000, 0.000000, -80.799980},
	{-62.683414, -1624.122924, 746.096923, 0.000000, 0.000000, -133.899993},
	{-65.268699, -1624.538574, 746.478149, 0.000000, 0.000000, -58.999973},
	{-71.765617, -1626.600708, 746.289123, 0.000000, 0.000000, -114.499984},
	{-76.903228, -1627.758178, 746.851257, 0.000000, 0.000000, -121.599975},
	{-82.722923, -1629.263427, 746.516601, 0.000000, 0.000000, -93.100006},
	{-90.120269, -1631.540527, 745.690368, 0.000000, 0.000000, 0.000000},
	{-101.642196, -1631.448242, 742.253479, 0.000000, 0.000000, 0.000000},
	{-99.593513, -1636.368652, 744.870483, 0.000000, 0.000000, 0.000000},
	{-105.476051, -1632.185302, 744.584350, 0.000000, 0.000000, 0.000000},
	{-108.650794, -1628.310546, 743.921386, 0.000000, 0.000000, 0.000000},
	{-111.090438, -1625.144409, 745.134460, 0.000000, 0.000000, 0.000000},
	{-105.815307, -1612.297607, 745.525268, 0.000000, 0.000000, -77.600006},
	{-109.692146, -1610.795776, 744.467529, 0.000000, 0.000000, 0.000000},
	{-113.396347, -1603.440795, 745.945007, 0.000000, 0.000000, 0.000000},
	{-106.616325, -1592.603027, 745.322998, 0.000000, 0.000000, -64.099990},
	{-111.205955, -1596.927124, 746.490295, 0.000000, 0.000000, -87.299995},
	{-101.269866, -1596.680297, 743.957336, 0.000000, 0.000000, -45.099990},
	{-102.920051, -1598.321777, 744.793334, 0.000000, 0.000000, -56.900012},
	{-102.680397, -1590.269409, 744.314208, 0.000000, 0.000000, -96.699974},
	{-96.996795, -1611.295166, 746.783081, 0.000000, 0.000000, -68.399986},
	{-92.280326, -1603.961914, 745.347717, 0.000000, 0.000000, -79.500007},
	{-86.544502, -1599.237792, 745.261962, 0.000000, 0.000000, -106.399986},
	{-65.529273, -1685.380737, 742.449401, 0.000000, 0.000000, 0.000000},
	{-68.111312, -1677.863159, 743.792114, 0.000000, 0.000000, 0.000000},
	{-82.224716, -1595.787597, 745.160034, 0.000000, 0.000000, -87.399978},
	{-76.346534, -1636.978271, 744.355041, 0.000000, 0.000000, 0.000000},
	{-80.265884, -1592.676025, 745.676147, 0.000000, 0.000000, -157.200012},
	{-87.160362, -1637.430053, 742.750915, 0.000000, 0.000000, 0.000000},
	{-107.017189, -1614.489257, 743.678039, 0.000000, 0.000000, 0.000000},
	{-86.753753, -1580.614746, 742.874938, 0.000000, 0.000000, 0.000000},
	{-130.358398, -1578.679077, 745.508422, 0.000000, 0.000000, 0.000000},
	{-125.217971, -1576.344604, 744.971374, 0.000000, 0.000000, 0.000000},
	{-114.574089, -1574.254638, 744.308105, 0.000000, 0.000000, 0.000000},
	{-116.766090, -1577.876342, 747.355102, 0.000000, 0.000000, 0.000000},
	{-78.445587, -1633.389648, 742.258239, 0.000000, 0.000000, 0.000000},
	{-95.037353, -1601.025024, 743.690979, 0.000000, 0.000000, -70.900009},
	{-149.040542, -1591.016479, 743.710449, 0.000000, 0.000000, 0.000000},
	{-91.162361, -1597.397460, 743.514221, 0.299999, 0.000000, -97.000022},
	{-159.970687, -1593.261840, 742.888549, 0.000000, 0.000000, 0.000000},
	{-84.428886, -1590.104980, 744.482177, 0.000000, 0.000000, -42.900005},
	{-81.224334, -1584.678100, 744.016906, 0.000000, 0.000000, 0.000000},
	{-163.729263, -1597.421997, 743.170227, 0.000000, 0.000000, 0.000000},
	{-149.919372, -1586.518188, 743.579223, 0.000000, 0.000000, 0.000000},
	{-83.287315, -1581.606445, 744.458129, 0.000000, 0.000000, 0.000000},
	{-93.760566, -1583.762329, 742.182800, 0.000000, 0.000000, 0.000000},
	{-139.221557, -1583.616821, 745.478820, 0.000000, 0.000000, 0.000000},
	{-131.213088, -1572.843139, 742.808593, 0.000000, 0.000000, 0.000000},
	{-121.200233, -1592.392578, 742.151672, 0.000000, 0.000000, 0.000000},
	{-123.118576, -1590.490600, 742.145019, 0.000000, 0.000000, 0.000000},
	{-129.155807, -1592.705688, 742.135925, 0.000000, 0.000000, 0.000000},
	{-111.458847, -1590.485473, 743.605529, 0.000000, 0.000000, 0.000000},
	{-118.095046, -1585.428466, 743.612487, 0.000000, 0.000000, 0.000000},
	{-115.270042, -1613.438354, 743.842956, 0.000000, 0.000000, 0.000000},
	{-120.285469, -1615.014770, 746.516418, 0.000000, 0.000000, 0.000000},
	{-139.520050, -1607.648803, 745.243408, 0.000000, 0.000000, 0.000000},
	{-132.643081, -1606.415771, 745.832153, 0.000000, 0.000000, -77.699989},
	{-125.005989, -1604.365112, 746.037597, 0.000000, 0.000000, 0.000000},
	{-127.743507, -1605.960327, 745.298400, 0.000000, 0.000000, -112.200004},
	{-130.074645, -1613.806396, 745.388916, 0.000000, 0.000000, 0.000000},
	{-136.034851, -1613.104003, 744.847900, 0.000000, 0.000000, -78.400032},
	{-105.093582, -1602.138549, 742.580505, 0.000000, 0.000000, -31.700004},
	{-139.166915, -1615.684204, 745.873291, 0.000000, 0.000000, -50.799991},
	{-142.902740, -1619.979858, 744.919433, 0.000000, 0.000000, -42.200004},
	{-91.529678, -1635.849243, 742.249755, 0.000000, 0.000000, 0.000000},
	{-150.425109, -1629.490234, 745.193298, 0.000000, 0.000000, -59.199993},
	{-88.039115, -1647.114379, 742.252441, 0.000000, 0.000000, 0.000000},
	{-154.386535, -1631.918212, 744.566833, 0.000000, 0.000000, -88.299995},
	{-159.716735, -1636.368408, 745.015625, 0.000000, 0.000000, -77.600006},
	{-164.395141, -1632.988647, 743.608947, 0.000000, 0.000000, 0.000000},
	{-158.970214, -1627.062744, 745.681701, 0.000000, 0.000000, -54.900005},
	{-153.849258, -1620.804565, 745.676574, 0.000000, 0.000000, -65.399993},
	{-148.258132, -1614.394042, 744.729187, 0.000000, 0.000000, 0.000000},
	{-144.248657, -1609.686279, 744.885314, 0.000000, 0.000000, -62.299987},
	{-141.856445, -1610.123413, 742.299072, 0.000000, 0.000000, 0.000000}
};

enum E_MINERAL
{
	minObjID,
	minType
}

enum E_DATA_MINERAL
{
	mindataCol,
	mindataName[14],
	mindataDureza,
	mindataGramos
}

static const DataMineral[][E_DATA_MINERAL] =
{
    {0xFFD1C900, "Oro", 520, 500},
    {0xFFD2D2D2, "Plata", 500, 600},
    {0xFFFF8300, "Hierro", 410, 1000},
    {0xD0FF0000, "Rubí", 600, 350},
    {0xD000FF00, "Esmeralda", 650, 350},
    {0xD00000FF, "Zafiro", 650, 300},
    {0x9800FFFF, "Diamante", 850, 300},
    {0xFF69696E, "Carbón", 290, 700}
};

#define M_TYPE_ORO        (0)
#define M_TYPE_PLATA      (1)
#define M_TYPE_HIERRO     (2)
#define M_TYPE_RUBI       (3)
#define M_TYPE_ESMERALDA  (4)
#define M_TYPE_ZAFIRO     (5)
#define M_TYPE_DIAMANTE   (6)
#define M_TYPE_CARBON     (7)

#define MAX_MINERALES 		(sizeof(PosMinerales))

new
	BitArray:ValidMineral<(sizeof(PosMinerales))>;

// -============================-

enum E_ZONE_TYPE
{
	zoneName [28 char],
	Float: zoneArea [6]
};

enum E_KEYPAD
{
	Float: kpPosx,
	Float: kpPosy,
	Float: kpPosz,
	Float: kpAngle
};

enum E_OBJ_INV
{
	invName[40],
	invType,
	invSize,
	invData,
	invObjID,
	Float:invX,
	Float:invY,
	Float:invZ,
	Float:invRX,
	Float:invRY,
	Float:invRZ,
	Float:invEX,
	Float:invEY,
	Float:invEZ,
	invColor1,
	invColor2
};

#define INV_ARMA        		(1)
#define INV_CARGADOR    		(2)
#define INV_ITEM        		(3)
#define INV_BIDON           	(4)
#define INV_MARTILLO        	(5)
#define INV_DESTORNILLADOR  	(6)
#define INV_CEL         		(7)
#define INV_MARIHUANA       	(8)
#define INV_MASCARA         	(9)
#define INV_GPS             	(10)
#define INV_ENCENDEDOR      	(11)
#define INV_DINAMITA      		(12)
#define INV_SOGA            	(13)
#define INV_VENDA           	(14)
#define INV_CAJACARGADOR    	(15)
#define INV_CAJAARMA    		(16)
#define INV_WALKIETALKIE    	(17)
#define INV_PAQUETECOCA    		(18)
#define INV_PAQUETEMARI    		(19)
#define INV_BOLSACOCA    		(20)
#define INV_BOLSAMARI 			(21)
#define INV_MINERAL 			(22)
#define INV_CAJACIGARRILLO 		(23)
#define INV_BIDONQUEROSEN   	(24)
#define INV_BIDONCOMBUSTIBLE	(25)
#define INV_HOJACOCA            (26)
#define INV_ESPOSAS             (27)
#define INV_SEMILLAMARI         (28)
#define INV_CIGARRILLO         	(29)
#define INV_PORRO         		(30)
#define INV_CIGARRILLOON       	(31)
#define INV_PORROON        		(32)
#define INV_PAQUETESEDA        	(33)
#define INV_MOLDEARMA        	(34)
#define INV_HAMBCHICA        	(35)
#define INV_HAMBGRANDE        	(36)
#define INV_PIZZACHICA        	(37)
#define INV_PIZZAGRANDE        	(38)
#define INV_POLLOCHICO        	(39)
#define INV_POLLOGRANDE        	(40)
#define INV_CAJACHALECO        	(41)
#define INV_CAJAESPOSA        	(42)
#define INV_CHALECO        		(43)
#define INV_CHALECOPOLICIA		(44)
#define INV_MALETIN				(45)
#define INV_MOCHILA				(46)

static const ObjectData[][E_OBJ_INV] =
{
	{"Nada", 0, 0, 0, 19300, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0, 0},

	//Armas
	{"Bate", INV_ARMA, 3, 5, 336, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0, 0},
	{"9MM", INV_ARMA, 2, 22, 346, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0, 0},
	{"Silenciadora", INV_ARMA, 2, 23, 347, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0, 0},
	{"Desert Eagle", INV_ARMA, 2, 24, 348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0, 0},
	{"Escopeta", INV_ARMA, 3, 25, 349, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0, 0},
	{"SPAS 12", INV_ARMA, 4, 27, 351, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0, 0},
	{"Uzi", INV_ARMA, 2, 28, 352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0, 0},
	{"MP5", INV_ARMA, 3, 29, 353, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0, 0},
	{"M4", INV_ARMA, 4, 31, 356, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0, 0},
	{"AK-47", INV_ARMA, 4, 30, 355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0, 0},
	{"Tec-9", INV_ARMA, 2, 32, 372, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0, 0},
	{"Rifle", INV_ARMA, 3, 33, 357, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0, 0},
	{"Sniper", INV_ARMA, 4, 34, 358, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0, 0},
	{"Spray", INV_ARMA, 1, 41, 365, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0, 0},
	{"Pala", INV_ARMA, 4, 6, 337, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0, 0},
	{"Cachiporra", INV_ARMA, 2, 3, 334, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0, 0},
	{"Cámara fotográfica", INV_ARMA, 2, 43, 367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0, 0},

	//Armas de Materiales
	{"9MM de Oro", INV_ARMA, 2, 22, 346, 0.002000, -0.003000, -0.008000, 0.000000, 0.000000, 0.000000, 1.000000, 1.087000, 1.091000, 0xFFD1C900, 0},
	{"Silenciadora de Oro", INV_ARMA, 2, 23, 347, 0.002000, -0.003000, -0.008000, 0.000000, 0.000000, 0.000000, 1.000000, 1.087000, 1.091000, 0xFFD1C900, 0},
	{"Desert Eagle de Oro", INV_ARMA, 2, 24, 348, 0.002000, -0.003000, -0.008000, 0.000000, 0.000000, 0.000000, 1.000000, 1.087000, 1.091000, 0xFFD1C900, 0},
	{"Escopeta de Oro", INV_ARMA, 3, 25, 349, 0.002000, -0.003000, -0.008000, 0.000000, 0.000000, 0.000000, 1.000000, 1.087000, 1.091000, 0xFFD1C900, 0},

	//Cargadores
	{"Cargador (9MM)", INV_CARGADOR, 1, 22, 19427, 0.075999, 0.010999, 0.000000, 0.000000, 0.000000, -93.399986, 0.090999, 0.027000, 0.040999, 0xFF000000, 0},
	{"Cargador (Silenciadora)", INV_CARGADOR, 1, 23, 19427, 0.075999, 0.010999, 0.000000, 0.000000, 0.000000, -93.399986, 0.090999, 0.027000, 0.040999, 0xFF000000, 0},
	{"Cargador (Desert Eagle)", INV_CARGADOR, 1, 24, 19427, 0.075999, 0.010999, 0.000000, 0.000000, 0.000000, -93.399986, 0.090999, 0.027000, 0.040999, 0xFF000000, 0},
	{"Cargador (Escopeta)", INV_CARGADOR, 1, 25, 19427, 0.075999, 0.010999, 0.000000, 0.000000, 0.000000, -93.399986, 0.090999, 0.027000, 0.040999, 0xFF000000, 0},
	{"Cargador (SPAS 12)", INV_CARGADOR, 1, 27, 19427, 0.075999, 0.010999, 0.000000, 0.000000, 0.000000, -93.399986, 0.090999, 0.027000, 0.040999, 0xFF000000, 0},
	{"Cargador (Uzi)", INV_CARGADOR, 1, 28, 19427, 0.075999, 0.010999, 0.000000, 0.000000, 0.000000, -93.399986, 0.090999, 0.027000, 0.040999, 0xFF000000, 0},
	{"Cargador (MP5)", INV_CARGADOR, 1, 29, 19427, 0.075999, 0.010999, 0.000000, 0.000000, 0.000000, -93.399986, 0.090999, 0.027000, 0.040999, 0xFF000000, 0},
	{"Cargador (AK-47)", INV_CARGADOR, 1, 30, 19427, 0.075999, 0.010999, 0.000000, 0.000000, 0.000000, -93.399986, 0.090999, 0.027000, 0.040999, 0xFF000000, 0},
	{"Cargador (M4)", INV_CARGADOR, 1, 31, 19427, 0.075999, 0.010999, 0.000000, 0.000000, 0.000000, -93.399986, 0.090999, 0.027000, 0.040999, 0xFF000000, 0},
	{"Cargador (Tec-9)", INV_CARGADOR, 1, 32, 19427, 0.075999, 0.010999, 0.000000, 0.000000, 0.000000, -93.399986, 0.090999, 0.027000, 0.040999, 0xFF000000, 0},
	{"Cargador (Rifle)", INV_CARGADOR, 1, 33, 19427, 0.075999, 0.010999, 0.000000, 0.000000, 0.000000, -93.399986, 0.090999, 0.027000, 0.040999, 0xFF000000, 0},
	{"Cargador (Sniper)", INV_CARGADOR, 1, 34, 19427, 0.075999, 0.010999, 0.000000, 0.000000, 0.000000, -93.399986, 0.090999, 0.027000, 0.040999, 0xFF000000, 0},

	//Cajas de cargadores
	{"Munición de 9MM", INV_CAJACARGADOR, 5, 22, 2358, 0.059000, 0.075999, -0.221000, -115.499862, -15.600045, 76.199981, 1.000000, 1.000000, 1.000000, 0, 0},
	{"Munición de Silenciadora", INV_CAJACARGADOR, 5, 23, 2358, 0.059000, 0.075999, -0.221000, -115.499862, -15.600045, 76.199981, 1.000000, 1.000000, 1.000000, 0, 0},
	{"Munición de Desert Eagle", INV_CAJACARGADOR, 5, 24, 2358, 0.059000, 0.075999, -0.221000, -115.499862, -15.600045, 76.199981, 1.000000, 1.000000, 1.000000, 0, 0},
	{"Munición de Escopeta", INV_CAJACARGADOR, 5, 25, 2358, 0.059000, 0.075999, -0.221000, -115.499862, -15.600045, 76.199981, 1.000000, 1.000000, 1.000000, 0, 0},
	{"Munición de SPAS 12", INV_CAJACARGADOR, 5, 27, 2358, 0.059000, 0.075999, -0.221000, -115.499862, -15.600045, 76.199981, 1.000000, 1.000000, 1.000000, 0, 0},
	{"Munición de Uzi", INV_CAJACARGADOR, 5, 28, 2358, 0.059000, 0.075999, -0.221000, -115.499862, -15.600045, 76.199981, 1.000000, 1.000000, 1.000000, 0, 0},
	{"Munición de MP5", INV_CAJACARGADOR, 5, 29, 2358, 0.059000, 0.075999, -0.221000, -115.499862, -15.600045, 76.199981, 1.000000, 1.000000, 1.000000, 0, 0},
	{"Munición de AK-47", INV_CAJACARGADOR, 5, 30, 2358, 0.059000, 0.075999, -0.221000, -115.499862, -15.600045, 76.199981, 1.000000, 1.000000, 1.000000, 0, 0},
	{"Munición de M4", INV_CAJACARGADOR, 5, 31, 2358, 0.059000, 0.075999, -0.221000, -115.499862, -15.600045, 76.199981, 1.000000, 1.000000, 1.000000, 0, 0},
	{"Munición de Tec-9", INV_CAJACARGADOR, 5, 32, 2358, 0.059000, 0.075999, -0.221000, -115.499862, -15.600045, 76.199981, 1.000000, 1.000000, 1.000000, 0, 0},
	{"Munición de Rifle", INV_CAJACARGADOR, 5, 33, 2358, 0.059000, 0.075999, -0.221000, -115.499862, -15.600045, 76.199981, 1.000000, 1.000000, 1.000000, 0, 0},
	{"Munición de Sniper", INV_CAJACARGADOR, 5, 34, 2358, 0.059000, 0.075999, -0.221000, -115.499862, -15.600045, 76.199981, 1.000000, 1.000000, 1.000000, 0, 0},

	//Cajas de armas
	{"Caja de 9MM", INV_CAJAARMA, 5, 22, 1271, 0.104000, 0.218000, -0.293999, -118.099960, -19.400005, -5.400002, 0.753000, 0.792000, 0.750999, 0, 0},
	{"Caja de Silenciadora", INV_CAJAARMA, 5, 23, 1271, 0.104000, 0.218000, -0.293999, -118.099960, -19.400005, -5.400002, 0.753000, 0.792000, 0.750999, 0, 0},
	{"Caja de Desert Eagle", INV_CAJAARMA, 5, 24, 1271, 0.104000, 0.218000, -0.293999, -118.099960, -19.400005, -5.400002, 0.753000, 0.792000, 0.750999, 0, 0},
	{"Caja de Escopetas", INV_CAJAARMA, 5, 25, 1271, 0.104000, 0.218000, -0.293999, -118.099960, -19.400005, -5.400002, 0.753000, 0.792000, 0.750999, 0, 0},
	{"Caja de SPAS 12", INV_CAJAARMA, 5, 27, 1271, 0.104000, 0.218000, -0.293999, -118.099960, -19.400005, -5.400002, 0.753000, 0.792000, 0.750999, 0, 0},
	{"Caja de Uzi", INV_CAJAARMA, 5, 28, 1271, 0.104000, 0.218000, -0.293999, -118.099960, -19.400005, -5.400002, 0.753000, 0.792000, 0.750999, 0, 0},
	{"Caja de MP5", INV_CAJAARMA, 5, 29, 1271, 0.104000, 0.218000, -0.293999, -118.099960, -19.400005, -5.400002, 0.753000, 0.792000, 0.750999, 0, 0},
	{"Caja de AK-47", INV_CAJAARMA, 5, 30, 1271, 0.104000, 0.218000, -0.293999, -118.099960, -19.400005, -5.400002, 0.753000, 0.792000, 0.750999, 0, 0},
	{"Caja de M4", INV_CAJAARMA, 5, 31, 1271, 0.104000, 0.218000, -0.293999, -118.099960, -19.400005, -5.400002, 0.753000, 0.792000, 0.750999, 0, 0},
	{"Caja de Tec-9", INV_CAJAARMA, 5, 32, 1271, 0.104000, 0.218000, -0.293999, -118.099960, -19.400005, -5.400002, 0.753000, 0.792000, 0.750999, 0, 0},
	{"Caja de Rifle", INV_CAJAARMA, 5, 33, 1271, 0.104000, 0.218000, -0.293999, -118.099960, -19.400005, -5.400002, 0.753000, 0.792000, 0.750999, 0, 0},
	{"Caja de Sniper", INV_CAJAARMA, 5, 34, 1271, 0.104000, 0.218000, -0.293999, -118.099960, -19.400005, -5.400002, 0.753000, 0.792000, 0.750999, 0, 0},
	{"Caja de Cachiporra", INV_CAJAARMA, 5, 3, 1271, 0.104000, 0.218000, -0.293999, -118.099960, -19.400005, -5.400002, 0.753000, 0.792000, 0.750999, 0, 0},

	//Items
	{"Bidón de combustible", INV_BIDONCOMBUSTIBLE, 3, 0, 1650, 0.112999, 0.018, 0.03, 0.0, -97.4, 0.000000, 1.000000, 0.806, 1.0, 0, 0},
	{"Bidón", INV_BIDON, 3, 0, 1650, 0.112999, 0.018, 0.03, 0.0, -97.4, 0.000000, 1.000000, 0.806, 1.0, 0xFFCBC6D1, 0},
	{"Bidón de querosén", INV_BIDONQUEROSEN, 3, 0, 1650, 0.112999, 0.018, 0.03, 0.0, -97.4, 0.000000, 1.000000, 0.806, 1.0, 0xFF6FADBF, 0},
	{"Martillo", INV_MARTILLO, 1, 0, 18635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0, 0},
	{"Destornillador", INV_DESTORNILLADOR, 1, 0, 18644, 0.077000, 0.026000, 0.023000, 0.000000, -178.400024, 0.000000, 1.000000, 1.000000, 1.000000, 0, 0},
	{"Celular", INV_CEL, 1, 0, 18866, 0.081999, 0.016000, 0.002999, 72.699996, 179.099945, 3.999997, 1.000000, 1.000000, 1.000000, 0, 0},
	{"Marihuana", INV_MARIHUANA, 1, 0, 2901, 0.063999, 0.037999, 0.026000, 0.000000, -94.699966, -8.699995, 0.189999, 0.115000, 0.173999, 0xFF0CB210, 0},
	{"Máscara", INV_MASCARA, 1, 0, 19036, 0.2070, 0.0360, 0.0160, -107.8999, 0.0000, -12.6000, 1.0000, 1.0000, 1.0000, 0, 0},
	{"GPS", INV_GPS, 1, 0, 18875, 0.068999, 0.024000, 0.016999, -88.799972, -1.499997, 85.000076, 0.638000, 0.704000, 1.775999, 0, 0},
	{"Encendedor", INV_ENCENDEDOR, 1, 0, 19432, 0.060000, 0.013000, 0.031000, 2.699999, -4.300105, -8.800000, 0.104999, 0.013000, 0.023000, 0xFFFF0000, 0},
	{"Dinamita", INV_DINAMITA, 3, 0, 1654, 0.09, -0.0429, -0.0260, -27.8000, -8.4999, -30.2999,  1.0000, 1.0000, 1.0000, 0, 0},
	{"Soga", INV_SOGA, 1, 0, 19087, 0.073999, 0.019999, 0.229000, 0.000000, 0.000000, 0.000000, 0.518999, 0.466999, 0.177000, 0, 0},
	{"Venda", INV_VENDA, 1, 0, 18974, 0.186000, 0.010999, 0.030000, 93.199981, -5.399982, 0.299999, 1.000000, 1.000000, 1.000000, 0xFFFFFFFF, 0},
	{"Walkie-Talkie", INV_WALKIETALKIE, 1, 0, 2966, 0.055999, 0.007999, -0.072999, 88.399955, 8.599903, 7.400002, 1.000000, 1.000000, 1.000000, 0xFF6F6F6F, 0},
	{"Paquete de Cocaína", INV_PAQUETECOCA, 5, 0, 1575, 0.000000, 0.118999, -0.242000, 71.200004, 15.900004, -80.399948, 1.000000, 1.000000, 1.000000, 0, 0},
	{"Paquete de Marihuana", INV_PAQUETEMARI, 5, 0, 1578, 0.000000, 0.118999, -0.242000, 71.200004, 15.900004, -80.399948, 1.000000, 1.000000, 1.000000, 0, 0},
	{"Bolsa de Cocaína", INV_BOLSACOCA, 1, 0, 1575, 0.114000, 0.059000, 0.000000, 98.500007, -88.799972, 2.599999, 0.152000, 0.253999, 0.484999, 0, 0},
	{"Bolsa de Marihuana", INV_BOLSAMARI, 1, 0, 1578, 0.114000, 0.059000, 0.000000, 98.500007, -88.799972, 2.599999, 0.152000, 0.253999, 0.484999, 0, 0},
	{"Caja de Cigarrillos", INV_CAJACIGARRILLO, 1, 0, 19362, 0.069999, 0.015999, 0.019000, 0.000000, 0.000000, 0.000000, 0.364001, 0.011000, 0.036999, 0xFFFFFFFF, 0},
	{"Hojas de coca", INV_HOJACOCA, 1, 0, 19300, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0, 0},
	{"Esposas", INV_ESPOSAS, 1, 0, 19418, 0.174999, 0.026000, 0.022000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000, 0, 0},
	{"Semilla de marihuana", INV_SEMILLAMARI, 1, 0, 19344, 0.083000, 0.052999, 0.047999, 0.000000, 0.000000, 0.000000, 0.173999, 0.125999, 0.087999, 0xFFAEB500, 0},
 	{"Cigarrillo", INV_CIGARRILLO, 1, 0, 19426, 0.146000, 0.000999, 0.024000, 99.699958, 69.899971, 0.000000, 0.112999, 0.009000, 0.034000, 0, 0},
 	{"Cigarrillo encendido", INV_CIGARRILLOON, 1, 0, 19426, 0.146000, 0.000999, 0.024000, 99.699958, 69.899971, 0.000000, 0.112999, 0.009000, 0.034000, 0, 0},
 	{"Porro", INV_PORRO, 1, 0, 3044, 0.001000, 0.014999, 0.027999, -10.499996, -5.499998, 58.899986, 1.000000, 1.000000, 1.000000, 0, 0},
 	{"Porro encendido", INV_PORROON, 1, 0, 3044, 0.001000, 0.014999, 0.027999, -10.499996, -5.499998, 58.899986, 1.000000, 1.000000, 1.000000, 0, 0},
	{"Paquete de seda", INV_PAQUETESEDA, 1, 0, 19362, 0.069999, 0.015999, 0.019000, 0.000000, 0.000000, 0.000000, 0.364001, 0.011000, 0.036999, 0xFF98B915, 0},

	//Moldes
	{"Molde (Bate)", INV_MOLDEARMA, 4, 6, 336, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0xFF000000, 0xFF000000},
	{"Molde (9MM)", INV_MOLDEARMA, 2, 22, 346, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0xFF000000, 0xFF000000},
	{"Molde (9MM Silenciador)", INV_MOLDEARMA, 2, 23, 347, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0xFF000000, 0xFF000000},
	{"Molde (Desert Eagle)", INV_MOLDEARMA, 2, 24, 348, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0xFF000000, 0xFF000000},
	{"Molde (Escopeta)", INV_MOLDEARMA, 3, 25, 349, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0xFF000000, 0xFF000000},
	{"Molde (SPAS 12)", INV_MOLDEARMA, 3, 27, 351, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0xFF000000, 0xFF000000},
	{"Molde (Uzi)", INV_MOLDEARMA, 2, 28, 352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0xFF000000, 0xFF000000},
	{"Molde (MP5)", INV_MOLDEARMA, 3, 29, 353, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0xFF000000, 0xFF000000},
	{"Molde (M4)", INV_MOLDEARMA, 3, 31, 356, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0xFF000000, 0xFF000000},
	{"Molde (AK-47)", INV_MOLDEARMA, 3, 30, 355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0xFF000000, 0xFF0000000},
	{"Molde (Tec-9)", INV_MOLDEARMA, 2, 32, 372, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0xFF000000, 0xFF000000},
	{"Molde (Rifle)", INV_MOLDEARMA, 3, 33, 357, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0xFF000000, 0xFF000000},
	{"Molde (Sniper)", INV_MOLDEARMA, 3, 34, 358, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0xFF000000, 0xFF000000},
	{"Molde (Spray)", INV_MOLDEARMA, 1, 41, 365, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0xFF000000, 0xFF000000},
	{"Molde (Pala)", INV_MOLDEARMA, 4, 6, 337, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0xFF000000, 0xFF000000},

	//Minerales
	{"Oro", INV_MINERAL, 2, M_TYPE_ORO, 3931, 0.053999, 0.075999, 0.006000, 0.000000, 0.000000, -79.500015, 0.145999, 0.103999, 0.092000, 0xFFD1C900, 0},
	//{"Plata", INV_MINERAL, 2, M_TYPE_PLATA, 3931, 0.053999, 0.075999, 0.006000, 0.000000, 0.000000, -79.500015, 0.145999, 0.103999, 0.092000, 0xFFD2D2D2, 0},
	{"Hierro", INV_MINERAL, 2, M_TYPE_HIERRO, 3931, 0.053999, 0.075999, 0.006000, 0.000000, 0.000000, -79.500015, 0.145999, 0.103999, 0.092000, 0xFFFF8300, 0},
	//{"Rubí", INV_MINERAL, 2, M_TYPE_RUBI, 3931, 0.053999, 0.075999, 0.006000, 0.000000, 0.000000, -79.500015, 0.145999, 0.103999, 0.092000, 0xD0FF0000, 0},
	//{"Esmeralda", INV_MINERAL, 2, M_TYPE_ESMERALDA, 3931, 0.053999, 0.075999, 0.006000, 0.000000, 0.000000, -79.500015, 0.145999, 0.103999, 0.092000, 0xD000FF00, 0},
	//{"Zafiro", INV_MINERAL, 2, M_TYPE_ZAFIRO, 3931, 0.053999, 0.075999, 0.006000, 0.000000, 0.000000, -79.500015, 0.145999, 0.103999, 0.092000, 0xD00000FF, 0},
	{"Diamante", INV_MINERAL, 2, M_TYPE_DIAMANTE, 3931, 0.053999, 0.075999, 0.006000, 0.000000, 0.000000, -79.500015, 0.145999, 0.103999, 0.092000, 0x9800FFFF, 0},
	{"Carbón", INV_MINERAL, 2, M_TYPE_CARBON, 3931, 0.053999, 0.075999, 0.006000, 0.000000, 0.000000, -79.500015, 0.145999, 0.103999, 0.092000, 0xFF69696E, 0},

	// ADDED (ACA AGREGO TODO LO NUEVO)
	{"Hamburguesa chica", INV_HAMBCHICA, 1, 0, 2880, 0.009999, 0.021000, -0.001000, 9.000002, 0.000000, -30.899974, 0.532999, 1.000000, 1.000000, 0, 0},
	{"Hamburguesa grande", INV_HAMBGRANDE, 1, 0, 2880, 0.133000, -0.020999, 0.000000, 0.000000, -161.699996, 0.000000, 1.000000, 1.000000, 1.000000, 0, 0},
	{"Pizza chica", INV_PIZZACHICA, 1, 0, 2881, 0.156000, 0.071000, 0.140000, -69.000000, 96.399963, 17.800117, 1.000000, 1.000000, 1.000000, 0, 0},
	{"Pizza grande", INV_PIZZAGRANDE, 1, 0, 2881, 0.156000, 0.071000, 0.140000, -69.000000, 96.399963, 17.800117, 1.000000, 1.000000, 1.000000, 0, 0},
	{"Pizza chica", INV_POLLOCHICO, 1, 0, 19300, 0.0, 0.0, 0.0, -0.000000, 0.0, 0.0, 1.000000, 1.000000, 1.000000, 0, 0},
	{"Pizza grande", INV_POLLOGRANDE, 1, 0, 19300, 0.0, 0.0, 0.0, -0.000000, 0.0, 0.0, 1.000000, 1.000000, 1.000000, 0, 0},

	{"Caja de Chalecos de Policía", INV_CAJACHALECO, 5, 0, 1271, 0.104000, 0.218000, -0.293999, -118.099960, -19.400005, -5.400002, 0.753000, 0.792000, 0.750999, 0, 0},
	{"Caja de Chalecos", INV_CAJACHALECO, 5, 1, 1271, 0.104000, 0.218000, -0.293999, -118.099960, -19.400005, -5.400002, 0.753000, 0.792000, 0.750999, 0, 0},
	{"Caja de Esposas", INV_CAJAESPOSA, 5, 0, 1271, 0.104000, 0.218000, -0.293999, -118.099960, -19.400005, -5.400002, 0.753000, 0.792000, 0.750999, 0, 0},

	{"Chaleco", INV_CHALECO, 3, 0, 19515, 0.344999, 0.002000, 0.046999, -172.799972, -171.499877, 0.000000, 1.014000, 0.355999, 0.989000, 0, 0},
	{"Chaleco de Policía", INV_CHALECOPOLICIA, 3, 0, 19142, 0.344999, 0.002000, 0.046999, -172.799972, -171.499877, 0.000000, 1.014000, 0.355999, 0.989000, 0, 0},

	// Armas de diamante
	{"9MM de Diamante", INV_ARMA, 2, 22, 346, 0.002000, -0.003000, -0.008000, 0.000000, 0.000000, 0.000000, 1.000000, 1.087000, 1.091000, 0xFF00FFFF, 0},
	{"Silenciadora de Diamante", INV_ARMA, 2, 23, 347, 0.002000, -0.003000, -0.008000, 0.000000, 0.000000, 0.000000, 1.000000, 1.087000, 1.091000, 0xFF00FFFF, 0},
	{"Desert Eagle de Diamante", INV_ARMA, 2, 24, 348, 0.002000, -0.003000, -0.008000, 0.000000, 0.000000, 0.000000, 1.000000, 1.087000, 1.091000, 0xFF00FFFF, 0},
	{"Escopeta de Diamante", INV_ARMA, 3, 25, 349, 0.002000, -0.003000, -0.008000, 0.000000, 0.000000, 0.000000, 1.000000, 1.087000, 1.091000, 0xFF00FFFF, 0},

	// Malechilas (MLCL)
	{"Maletín", INV_MALETIN, 4, 0, 1210, 0.2949, 0.1229, 0.0489, 0.0000, -98.0999, -6.9000, 1.0000, 1.3680, 1.0849, 0x0, 0x0},
	{"Mochila", INV_MOCHILA, 4, 0, 3026, 0.4839, 0.0320, 0.0920, 18.900, 168.5000, 0.0000, 0.9180, 0.717020, 1.033, 0xFFFF0000, 0x0}
};

static const ZoneNames [][E_ZONE_TYPE] =
{
	{!"The Big Ear", 				{-410.00, 1403.30, -3.00, -137.90, 1681.20, 200.00}},
	{!"Aldea Malvada",				{-1372.10, 2498.50, 0.00, -1277.50, 2615.30, 200.00}},
	{!"Angel Pine",				 	{-2324.90, -2584.20, -6.10, -1964.20, -2212.10, 200.00}},
	{!"Arco del Oeste",			 	{-901.10, 2221.80, 0.00, -592.00, 2571.90, 200.00}},
	{!"Avispa Country Club",		{-2646.40, -355.40, 0.00, -2270.00, -222.50, 200.00}},
	{!"Avispa Country Club",		{-2831.80, -430.20, -6.10, -2646.40, -222.50, 200.00}},
	{!"Avispa Country Club",		{-2361.50, -417.10, 0.00, -2270.00, -355.40, 200.00}},
	{!"Avispa Country Club",		{-2667.80, -302.10, -28.80, -2646.40, -262.30, 71.10}},
	{!"Avispa Country Club",		{-2470.00, -355.40, 0.00, -2270.00, -318.40, 46.10}},
	{!"Avispa Country Club",		{-2550.00, -355.40, 0.00, -2470.00, -318.40, 39.70}},
	{!"Back o Beyond",				{-1166.90, -2641.10, 0.00, -321.70, -1856.00, 200.00}},
	{!"Battery Point",				{-2741.00, 1268.40, -4.50, -2533.00, 1490.40, 200.00}},
	{!"Bayside",					{-2741.00, 2175.10, 0.00, -2353.10, 2722.70, 200.00}},
	{!"Bayside Marina",				{-2353.10, 2275.70, 0.00, -2153.10, 2475.70, 200.00}},
	{!"Beacon Hill",				{-399.60, -1075.50, -1.40, -319.00, -977.50, 198.50}},
	{!"Blackfield",					{964.30, 1203.20, -89.00, 1197.30, 1403.20, 110.90}},
	{!"Blackfield",					{964.30, 1403.20, -89.00, 1197.30, 1726.20, 110.90}},
	{!"Blackfield Chapel",			{1375.60, 596.30, -89.00, 1558.00, 823.20, 110.90}},
	{!"Blackfield Chapel",			{1325.60, 596.30, -89.00, 1375.60, 795.00, 110.90}},
	{!"Blackfield Intersection",	{1197.30, 1044.60, -89.00, 1277.00, 1163.30, 110.90}},
	{!"Blackfield Intersection",	{1166.50, 795.00, -89.00, 1375.60, 1044.60, 110.90}},
	{!"Blackfield Intersection",	{1277.00, 1044.60, -89.00, 1315.30, 1087.60, 110.90}},
	{!"Blackfield Intersection",	{1375.60, 823.20, -89.00, 1457.30, 919.40, 110.90}},
	{!"Blueberry",					{104.50, -220.10, 2.30, 349.60, 152.20, 200.00}},
	{!"Blueberry",					{19.60, -404.10, 3.80, 349.60, -220.10, 200.00}},
	{!"Blueberry Acres",			{-319.60, -220.10, 0.00, 104.50, 293.30, 200.00}},
	{!"Caligula's Palace",			{2087.30, 1543.20, -89.00, 2437.30, 1703.20, 110.90}},
	{!"Caligula's Palace",			{2137.40, 1703.20, -89.00, 2437.30, 1783.20, 110.90}},
	{!"Calton Heights",				{-2274.10, 744.10, -6.10, -1982.30, 1358.90, 200.00}},
	{!"Chinatown",					{-2274.10, 578.30, -7.60, -2078.60, 744.10, 200.00}},
	{!"City Hall",					{-2867.80, 277.40, -9.10, -2593.40, 458.40, 200.00}},
	{!"Come-A-Lot",					{2087.30, 943.20, -89.00, 2623.10, 1203.20, 110.90}},
	{!"Commerce",					{1323.90, -1842.20, -89.00, 1701.90, -1722.20, 110.90}},
	{!"Commerce",					{1323.90, -1722.20, -89.00, 1440.90, -1577.50, 110.90}},
	{!"Commerce",					{1370.80, -1577.50, -89.00, 1463.90, -1384.90, 110.90}},
	{!"Commerce",					{1463.90, -1577.50, -89.00, 1667.90, -1430.80, 110.90}},
	{!"Commerce",					{1583.50, -1722.20, -89.00, 1758.90, -1577.50, 110.90}},
	{!"Commerce",					{1667.90, -1577.50, -89.00, 1812.60, -1430.80, 110.90}},
	{!"Conference Center",			{1046.10, -1804.20, -89.00, 1323.90, -1722.20, 110.90}},
	{!"Conference Center",			{1073.20, -1842.20, -89.00, 1323.90, -1804.20, 110.90}},
	{!"Cranberry Station",			{-2007.80, 56.30, 0.00, -1922.00, 224.70, 100.00}},
	{!"Creek",						{2749.90, 1937.20, -89.00, 2921.60, 2669.70, 110.90}},
	{!"Dillimore",					{580.70, -674.80, -9.50, 861.00, -404.70, 200.00}},
	{!"Doherty",					{-2270.00, -324.10, -0.00, -1794.90, -222.50, 200.00}},
	{!"Doherty",					{-2173.00, -222.50, -0.00, -1794.90, 265.20, 200.00}},
	{!"Downtown",					{-1982.30, 744.10, -6.10, -1871.70, 1274.20, 200.00}},
	{!"Downtown",					{-1871.70, 1176.40, -4.50, -1620.30, 1274.20, 200.00}},
	{!"Downtown",					{-1700.00, 744.20, -6.10, -1580.00, 1176.50, 200.00}},
	{!"Downtown",					{-1580.00, 744.20, -6.10, -1499.80, 1025.90, 200.00}},
	{!"Downtown",					{-2078.60, 578.30, -7.60, -1499.80, 744.20, 200.00}},
	{!"Downtown",					{-1993.20, 265.20, -9.10, -1794.90, 578.30, 200.00}},
	{!"Downtown Los Santos",		{1463.90, -1430.80, -89.00, 1724.70, -1290.80, 110.90}},
	{!"Downtown Los Santos",		{1724.70, -1430.80, -89.00, 1812.60, -1250.90, 110.90}},
	{!"Downtown Los Santos",		{1463.90, -1290.80, -89.00, 1724.70, -1150.80, 110.90}},
	{!"Downtown Los Santos",		{1370.80, -1384.90, -89.00, 1463.90, -1170.80, 110.90}},
	{!"Downtown Los Santos",		{1724.70, -1250.90, -89.00, 1812.60, -1150.80, 110.90}},
	{!"Downtown Los Santos",		{1370.80, -1170.80, -89.00, 1463.90, -1130.80, 110.90}},
	{!"Downtown Los Santos",		{1378.30, -1130.80, -89.00, 1463.90, -1026.30, 110.90}},
	{!"Downtown Los Santos",		{1391.00, -1026.30, -89.00, 1463.90, -926.90, 110.90}},
	{!"Downtown Los Santos",		{1507.50, -1385.20, 110.90, 1582.50, -1325.30, 335.90}},
	{!"East Beach",					{2632.80, -1852.80, -89.00, 2959.30, -1668.10, 110.90}},
	{!"East Beach",					{2632.80, -1668.10, -89.00, 2747.70, -1393.40, 110.90}},
	{!"East Beach",					{2747.70, -1668.10, -89.00, 2959.30, -1498.60, 110.90}},
	{!"East Beach",					{2747.70, -1498.60, -89.00, 2959.30, -1120.00, 110.90}},
	{!"East Los Santos",			{2421.00, -1628.50, -89.00, 2632.80, -1454.30, 110.90}},
	{!"East Los Santos",			{2222.50, -1628.50, -89.00, 2421.00, -1494.00, 110.90}},
	{!"East Los Santos",			{2266.20, -1494.00, -89.00, 2381.60, -1372.00, 110.90}},
	{!"East Los Santos",			{2381.60, -1494.00, -89.00, 2421.00, -1454.30, 110.90}},
	{!"East Los Santos",			{2281.40, -1372.00, -89.00, 2381.60, -1135.00, 110.90}},
	{!"East Los Santos",			{2381.60, -1454.30, -89.00, 2462.10, -1135.00, 110.90}},
	{!"East Los Santos",			{2462.10, -1454.30, -89.00, 2581.70, -1135.00, 110.90}},
	{!"Easter Basin",				{-1794.90, 249.90, -9.10, -1242.90, 578.30, 200.00}},
	{!"Easter Basin",				{-1794.90, -50.00, -0.00, -1499.80, 249.90, 200.00}},
	{!"Easter Bay Airport",			{-1499.80, -50.00, -0.00, -1242.90, 249.90, 200.00}},
	{!"Easter Bay Airport",			{-1794.90, -730.10, -3.00, -1213.90, -50.00, 200.00}},
	{!"Easter Bay Airport",			{-1213.90, -730.10, 0.00, -1132.80, -50.00, 200.00}},
	{!"Easter Bay Airport",			{-1242.90, -50.00, 0.00, -1213.90, 578.30, 200.00}},
	{!"Easter Bay Airport",			{-1213.90, -50.00, -4.50, -947.90, 578.30, 200.00}},
	{!"Easter Bay Airport",			{-1315.40, -405.30, 15.40, -1264.40, -209.50, 25.40}},
	{!"Easter Bay Airport",			{-1354.30, -287.30, 15.40, -1315.40, -209.50, 25.40}},
	{!"Easter Bay Airport",			{-1490.30, -209.50, 15.40, -1264.40, -148.30, 25.40}},
	{!"Easter Bay Chemicals",		{-1132.80, -768.00, 0.00, -956.40, -578.10, 200.00}},
	{!"Easter Bay Chemicals",		{-1132.80, -787.30, 0.00, -956.40, -768.00, 200.00}},
	{!"El Castillo del Diablo",		{-464.50, 2217.60, 0.00, -208.50, 2580.30, 200.00}},
	{!"El Castillo del Diablo",		{-208.50, 2123.00, -7.60, 114.00, 2337.10, 200.00}},
	{!"El Castillo del Diablo",		{-208.50, 2337.10, 0.00, 8.40, 2487.10, 200.00}},
	{!"El Corona",					{1812.60, -2179.20, -89.00, 1970.60, -1852.80, 110.90}},
	{!"El Corona",					{1692.60, -2179.20, -89.00, 1812.60, -1842.20, 110.90}},
	{!"El Quebrados",				{-1645.20, 2498.50, 0.00, -1372.10, 2777.80, 200.00}},
	{!"Esplanade East",				{-1620.30, 1176.50, -4.50, -1580.00, 1274.20, 200.00}},
	{!"Esplanade East",				{-1580.00, 1025.90, -6.10, -1499.80, 1274.20, 200.00}},
	{!"Esplanade East",				{-1499.80, 578.30, -79.60, -1339.80, 1274.20, 20.30}},
	{!"Esplanade North",			{-2533.00, 1358.90, -4.50, -1996.60, 1501.20, 200.00}},
	{!"Esplanade North",			{-1996.60, 1358.90, -4.50, -1524.20, 1592.50, 200.00}},
	{!"Esplanade North",			{-1982.30, 1274.20, -4.50, -1524.20, 1358.90, 200.00}},
	{!"Fallen Tree",				{-792.20, -698.50, -5.30, -452.40, -380.00, 200.00}},
	{!"Fallow Bridge",				{434.30, 366.50, 0.00, 603.00, 555.60, 200.00}},
	{!"Fern Ridge",					{508.10, -139.20, 0.00, 1306.60, 119.50, 200.00}},
	{!"Financial",					{-1871.70, 744.10, -6.10, -1701.30, 1176.40, 300.00}},
	{!"Fisher's Lagoon",			{1916.90, -233.30, -100.00, 2131.70, 13.80, 200.00}},
	{!"Flint Intersection",			{-187.70, -1596.70, -89.00, 17.00, -1276.60, 110.90}},
	{!"Flint Range",				{-594.10, -1648.50, 0.00, -187.70, -1276.60, 200.00}},
	{!"Fort Carson",				{-376.20, 826.30, -3.00, 123.70, 1220.40, 200.00}},
	{!"Foster Valley",				{-2270.00, -430.20, -0.00, -2178.60, -324.10, 200.00}},
	{!"Foster Valley",				{-2178.60, -599.80, -0.00, -1794.90, -324.10, 200.00}},
	{!"Foster Valley",				{-2178.60, -1115.50, 0.00, -1794.90, -599.80, 200.00}},
	{!"Foster Valley",				{-2178.60, -1250.90, 0.00, -1794.90, -1115.50, 200.00}},
	{!"Frederick Bridge",			{2759.20, 296.50, 0.00, 2774.20, 594.70, 200.00}},
	{!"Gant Bridge",				{-2741.40, 1659.60, -6.10, -2616.40, 2175.10, 200.00}},
	{!"Gant Bridge",				{-2741.00, 1490.40, -6.10, -2616.40, 1659.60, 200.00}},
	{!"Ganton",						{2222.50, -1852.80, -89.00, 2632.80, -1722.30, 110.90}},
	{!"Ganton",						{2222.50, -1722.30, -89.00, 2632.80, -1628.50, 110.90}},
	{!"Garcia",						{-2411.20, -222.50, -0.00, -2173.00, 265.20, 200.00}},
	{!"Garcia",						{-2395.10, -222.50, -5.30, -2354.00, -204.70, 200.00}},
	{!"Garver Bridge",				{-1339.80, 828.10, -89.00, -1213.90, 1057.00, 110.90}},
	{!"Garver Bridge",				{-1213.90, 950.00, -89.00, -1087.90, 1178.90, 110.90}},
	{!"Garver Bridge",				{-1499.80, 696.40, -179.60, -1339.80, 925.30, 20.30}},
	{!"Glen Park",					{1812.60, -1449.60, -89.00, 1996.90, -1350.70, 110.90}},
	{!"Glen Park",					{1812.60, -1100.80, -89.00, 1994.30, -973.30, 110.90}},
	{!"Glen Park",					{1812.60, -1350.70, -89.00, 2056.80, -1100.80, 110.90}},
	{!"Green Palms",				{176.50, 1305.40, -3.00, 338.60, 1520.70, 200.00}},
	{!"Greenglass College",			{964.30, 1044.60, -89.00, 1197.30, 1203.20, 110.90}},
	{!"Greenglass College",			{964.30, 930.80, -89.00, 1166.50, 1044.60, 110.90}},
	{!"Hampton Barns",				{603.00, 264.30, 0.00, 761.90, 366.50, 200.00}},
	{!"Hankypanky Point",			{2576.90, 62.10, 0.00, 2759.20, 385.50, 200.00}},
	{!"Harry Gold Parkway",			{1777.30, 863.20, -89.00, 1817.30, 2342.80, 110.90}},
	{!"Hashbury",					{-2593.40, -222.50, -0.00, -2411.20, 54.70, 200.00}},
	{!"Hilltop Farm",				{967.30, -450.30, -3.00, 1176.70, -217.90, 200.00}},
	{!"Hunter Quarry",				{337.20, 710.80, -115.20, 860.50, 1031.70, 203.70}},
	{!"Idlewood",					{1812.60, -1852.80, -89.00, 1971.60, -1742.30, 110.90}},
	{!"Idlewood",					{1812.60, -1742.30, -89.00, 1951.60, -1602.30, 110.90}},
	{!"Idlewood",					{1951.60, -1742.30, -89.00, 2124.60, -1602.30, 110.90}},
	{!"Idlewood",					{1812.60, -1602.30, -89.00, 2124.60, -1449.60, 110.90}},
	{!"Idlewood",					{2124.60, -1742.30, -89.00, 2222.50, -1494.00, 110.90}},
	{!"Idlewood",					{1971.60, -1852.80, -89.00, 2222.50, -1742.30, 110.90}},
	{!"Jefferson",					{1996.90, -1449.60, -89.00, 2056.80, -1350.70, 110.90}},
	{!"Jefferson",					{2124.60, -1494.00, -89.00, 2266.20, -1449.60, 110.90}},
	{!"Jefferson",					{2056.80, -1372.00, -89.00, 2281.40, -1210.70, 110.90}},
	{!"Jefferson",					{2056.80, -1210.70, -89.00, 2185.30, -1126.30, 110.90}},
	{!"Jefferson",					{2185.30, -1210.70, -89.00, 2281.40, -1154.50, 110.90}},
	{!"Jefferson",					{2056.80, -1449.60, -89.00, 2266.20, -1372.00, 110.90}},
	{!"Julius Thruway East",		{2623.10, 943.20, -89.00, 2749.90, 1055.90, 110.90}},
	{!"Julius Thruway East",		{2685.10, 1055.90, -89.00, 2749.90, 2626.50, 110.90}},
	{!"Julius Thruway East",		{2536.40, 2442.50, -89.00, 2685.10, 2542.50, 110.90}},
	{!"Julius Thruway East",		{2625.10, 2202.70, -89.00, 2685.10, 2442.50, 110.90}},
	{!"Julius Thruway North",		{2498.20, 2542.50, -89.00, 2685.10, 2626.50, 110.90}},
	{!"Julius Thruway North",		{2237.40, 2542.50, -89.00, 2498.20, 2663.10, 110.90}},
	{!"Julius Thruway North",		{2121.40, 2508.20, -89.00, 2237.40, 2663.10, 110.90}},
	{!"Julius Thruway North",		{1938.80, 2508.20, -89.00, 2121.40, 2624.20, 110.90}},
	{!"Julius Thruway North",		{1534.50, 2433.20, -89.00, 1848.40, 2583.20, 110.90}},
	{!"Julius Thruway North",		{1848.40, 2478.40, -89.00, 1938.80, 2553.40, 110.90}},
	{!"Julius Thruway North",		{1704.50, 2342.80, -89.00, 1848.40, 2433.20, 110.90}},
	{!"Julius Thruway North",		{1377.30, 2433.20, -89.00, 1534.50, 2507.20, 110.90}},
	{!"Julius Thruway South",		{1457.30, 823.20, -89.00, 2377.30, 863.20, 110.90}},
	{!"Julius Thruway South",		{2377.30, 788.80, -89.00, 2537.30, 897.90, 110.90}},
	{!"Julius Thruway West",		{1197.30, 1163.30, -89.00, 1236.60, 2243.20, 110.90}},
	{!"Julius Thruway West",		{1236.60, 2142.80, -89.00, 1297.40, 2243.20, 110.90}},
	{!"Juniper Hill",				{-2533.00, 578.30, -7.60, -2274.10, 968.30, 200.00}},
	{!"Juniper Hollow",				{-2533.00, 968.30, -6.10, -2274.10, 1358.90, 200.00}},
	{!"K.A.C.C. Military Fuels",	{2498.20, 2626.50, -89.00, 2749.90, 2861.50, 110.90}},
	{!"Kincaid Bridge",				{-1339.80, 599.20, -89.00, -1213.90, 828.10, 110.90}},
	{!"Kincaid Bridge",				{-1213.90, 721.10, -89.00, -1087.90, 950.00, 110.90}},
	{!"Kincaid Bridge",				{-1087.90, 855.30, -89.00, -961.90, 986.20, 110.90}},
	{!"King's",						{-2329.30, 458.40, -7.60, -1993.20, 578.30, 200.00}},
	{!"King's",						{-2411.20, 265.20, -9.10, -1993.20, 373.50, 200.00}},
	{!"King's",						{-2253.50, 373.50, -9.10, -1993.20, 458.40, 200.00}},
	{!"LVA Freight Depot",			{1457.30, 863.20, -89.00, 1777.40, 1143.20, 110.90}},
	{!"LVA Freight Depot",			{1375.60, 919.40, -89.00, 1457.30, 1203.20, 110.90}},
	{!"LVA Freight Depot",			{1277.00, 1087.60, -89.00, 1375.60, 1203.20, 110.90}},
	{!"LVA Freight Depot",			{1315.30, 1044.60, -89.00, 1375.60, 1087.60, 110.90}},
	{!"LVA Freight Depot",			{1236.60, 1163.40, -89.00, 1277.00, 1203.20, 110.90}},
	{!"Las Barrancas",				{-926.10, 1398.70, -3.00, -719.20, 1634.60, 200.00}},
	{!"Las Brujas",					{-365.10, 2123.00, -3.00, -208.50, 2217.60, 200.00}},
	{!"Las Colinas",				{1994.30, -1100.80, -89.00, 2056.80, -920.80, 110.90}},
	{!"Las Colinas",				{2056.80, -1126.30, -89.00, 2126.80, -920.80, 110.90}},
	{!"Las Colinas",				{2185.30, -1154.50, -89.00, 2281.40, -934.40, 110.90}},
	{!"Las Colinas",				{2126.80, -1126.30, -89.00, 2185.30, -934.40, 110.90}},
	{!"Las Colinas",				{2747.70, -1120.00, -89.00, 2959.30, -945.00, 110.90}},
	{!"Las Colinas",				{2632.70, -1135.00, -89.00, 2747.70, -945.00, 110.90}},
	{!"Las Colinas",				{2281.40, -1135.00, -89.00, 2632.70, -945.00, 110.90}},
	{!"Las Payasadas",				{-354.30, 2580.30, 2.00, -133.60, 2816.80, 200.00}},
	{!"Las Venturas Airport",		{1236.60, 1203.20, -89.00, 1457.30, 1883.10, 110.90}},
	{!"Las Venturas Airport",		{1457.30, 1203.20, -89.00, 1777.30, 1883.10, 110.90}},
	{!"Las Venturas Airport",		{1457.30, 1143.20, -89.00, 1777.40, 1203.20, 110.90}},
	{!"Las Venturas Airport",		{1515.80, 1586.40, -12.50, 1729.90, 1714.50, 87.50}},
	{!"Last Dime Motel",			{1823.00, 596.30, -89.00, 1997.20, 823.20, 110.90}},
	{!"Leafy Hollow",				{-1166.90, -1856.00, 0.00, -815.60, -1602.00, 200.00}},
	{!"Liberty City",				{-1000.00, 400.00, 1300.00, -700.00, 600.00, 1400.00}},
	{!"Lil' Probe Inn",				{-90.20, 1286.80, -3.00, 153.80, 1554.10, 200.00}},
	{!"Linden Side",				{2749.90, 943.20, -89.00, 2923.30, 1198.90, 110.90}},
	{!"Linden Station",				{2749.90, 1198.90, -89.00, 2923.30, 1548.90, 110.90}},
	{!"Linden Station",				{2811.20, 1229.50, -39.50, 2861.20, 1407.50, 60.40}},
	{!"Little Mexico",				{1701.90, -1842.20, -89.00, 1812.60, -1722.20, 110.90}},
	{!"Little Mexico",				{1758.90, -1722.20, -89.00, 1812.60, -1577.50, 110.90}},
	{!"Los Flores",					{2581.70, -1454.30, -89.00, 2632.80, -1393.40, 110.90}},
	{!"Los Flores",					{2581.70, -1393.40, -89.00, 2747.70, -1135.00, 110.90}},
	{!"Los Santos International",	{1249.60, -2394.30, -89.00, 1852.00, -2179.20, 110.90}},
	{!"Los Santos International",	{1852.00, -2394.30, -89.00, 2089.00, -2179.20, 110.90}},
	{!"Los Santos International",	{1382.70, -2730.80, -89.00, 2201.80, -2394.30, 110.90}},
	{!"Los Santos International",	{1974.60, -2394.30, -39.00, 2089.00, -2256.50, 60.90}},
	{!"Los Santos International",	{1400.90, -2669.20, -39.00, 2189.80, -2597.20, 60.90}},
	{!"Los Santos International",	{2051.60, -2597.20, -39.00, 2152.40, -2394.30, 60.90}},
	{!"Marina",						{647.70, -1804.20, -89.00, 851.40, -1577.50, 110.90}},
	{!"Marina",						{647.70, -1577.50, -89.00, 807.90, -1416.20, 110.90}},
	{!"Marina",						{807.90, -1577.50, -89.00, 926.90, -1416.20, 110.90}},
	{!"Market",			 			{787.40, -1416.20, -89.00, 1072.60, -1310.20, 110.90}},
	{!"Market",						{952.60, -1310.20, -89.00, 1072.60, -1130.80, 110.90}},
	{!"Market",						{1072.60, -1416.20, -89.00, 1370.80, -1130.80, 110.90}},
	{!"Market",						{926.90, -1577.50, -89.00, 1370.80, -1416.20, 110.90}},
	{!"Market Station",				{787.40, -1410.90, -34.10, 866.00, -1310.20, 65.80}},
	{!"Martin Bridge",				{-222.10, 293.30, 0.00, -122.10, 476.40, 200.00}},
	{!"Missionary Hill",			{-2994.40, -811.20, 0.00, -2178.60, -430.20, 200.00}},
	{!"Montgomery",					{1119.50, 119.50, -3.00, 1451.40, 493.30, 200.00}},
	{!"Montgomery",					{1451.40, 347.40, -6.10, 1582.40, 420.80, 200.00}},
	{!"Montgomery Intersection",	{1546.60, 208.10, 0.00, 1745.80, 347.40, 200.00}},
	{!"Montgomery Intersection",	{1582.40, 347.40, 0.00, 1664.60, 401.70, 200.00}},
	{!"Mulholland",					{1414.00, -768.00, -89.00, 1667.60, -452.40, 110.90}},
	{!"Mulholland",					{1281.10, -452.40, -89.00, 1641.10, -290.90, 110.90}},
	{!"Mulholland",					{1269.10, -768.00, -89.00, 1414.00, -452.40, 110.90}},
	{!"Mulholland",					{1357.00, -926.90, -89.00, 1463.90, -768.00, 110.90}},
	{!"Mulholland",					{1318.10, -910.10, -89.00, 1357.00, -768.00, 110.90}},
	{!"Mulholland",					{1169.10, -910.10, -89.00, 1318.10, -768.00, 110.90}},
	{!"Mulholland",					{768.60, -954.60, -89.00, 952.60, -860.60, 110.90}},
	{!"Mulholland",					{687.80, -860.60, -89.00, 911.80, -768.00, 110.90}},
	{!"Mulholland",					{737.50, -768.00, -89.00, 1142.20, -674.80, 110.90}},
	{!"Mulholland",					{1096.40, -910.10, -89.00, 1169.10, -768.00, 110.90}},
	{!"Mulholland",					{952.60, -937.10, -89.00, 1096.40, -860.60, 110.90}},
	{!"Mulholland",					{911.80, -860.60, -89.00, 1096.40, -768.00, 110.90}},
	{!"Mulholland",					{861.00, -674.80, -89.00, 1156.50, -600.80, 110.90}},
	{!"Mulholland Intersection",	{1463.90, -1150.80, -89.00, 1812.60, -768.00, 110.90}},
	{!"North Rock",					{2285.30, -768.00, 0.00, 2770.50, -269.70, 200.00}},
	{!"Ocean Docks",				{2373.70, -2697.00, -89.00, 2809.20, -2330.40, 110.90}},
	{!"Ocean Docks",				{2201.80, -2418.30, -89.00, 2324.00, -2095.00, 110.90}},
	{!"Ocean Docks",				{2324.00, -2302.30, -89.00, 2703.50, -2145.10, 110.90}},
	{!"Ocean Docks",				{2089.00, -2394.30, -89.00, 2201.80, -2235.80, 110.90}},
	{!"Ocean Docks",				{2201.80, -2730.80, -89.00, 2324.00, -2418.30, 110.90}},
	{!"Ocean Docks",				{2703.50, -2302.30, -89.00, 2959.30, -2126.90, 110.90}},
	{!"Ocean Docks",				{2324.00, -2145.10, -89.00, 2703.50, -2059.20, 110.90}},
	{!"Ocean Flats",				{-2994.40, 277.40, -9.10, -2867.80, 458.40, 200.00}},
	{!"Ocean Flats",				{-2994.40, -222.50, -0.00, -2593.40, 277.40, 200.00}},
	{!"Ocean Flats",				{-2994.40, -430.20, -0.00, -2831.80, -222.50, 200.00}},
	{!"Octane Springs",				{338.60, 1228.50, 0.00, 664.30, 1655.00, 200.00}},
	{!"Old Venturas Strip",			{2162.30, 2012.10, -89.00, 2685.10, 2202.70, 110.90}},
	{!"Palisades",					{-2994.40, 458.40, -6.10, -2741.00, 1339.60, 200.00}},
	{!"Palomino Creek",				{2160.20, -149.00, 0.00, 2576.90, 228.30, 200.00}},
	{!"Paradiso",					{-2741.00, 793.40, -6.10, -2533.00, 1268.40, 200.00}},
	{!"Pershing Square",			{1440.90, -1722.20, -89.00, 1583.50, -1577.50, 110.90}},
	{!"Pilgrim",					{2437.30, 1383.20, -89.00, 2624.40, 1783.20, 110.90}},
	{!"Pilgrim",					{2624.40, 1383.20, -89.00, 2685.10, 1783.20, 110.90}},
	{!"Pilson Intersection",		{1098.30, 2243.20, -89.00, 1377.30, 2507.20, 110.90}},
	{!"Pirates in Men's Pants",		{1817.30, 1469.20, -89.00, 2027.40, 1703.20, 110.90}},
	{!"Playa del Seville",			{2703.50, -2126.90, -89.00, 2959.30, -1852.80, 110.90}},
	{!"Prickle Pine",				{1534.50, 2583.20, -89.00, 1848.40, 2863.20, 110.90}},
	{!"Prickle Pine",		 		{1117.40, 2507.20, -89.00, 1534.50, 2723.20, 110.90}},
	{!"Prickle Pine",		 		{1848.40, 2553.40, -89.00, 1938.80, 2863.20, 110.90}},
	{!"Prickle Pine",				{1938.80, 2624.20, -89.00, 2121.40, 2861.50, 110.90}},
	{!"Queens",						{-2533.00, 458.40, 0.00, -2329.30, 578.30, 200.00}},
	{!"Queens",						{-2593.40, 54.70, 0.00, -2411.20, 458.40, 200.00}},
	{!"Queens",						{-2411.20, 373.50, 0.00, -2253.50, 458.40, 200.00}},
	{!"Randolph Industrial Estate", {1558.00, 596.30, -89.00, 1823.00, 823.20, 110.90}},
	{!"Redsands East",				{1817.30, 2011.80, -89.00, 2106.70, 2202.70, 110.90}},
	{!"Redsands East",				{1817.30, 2202.70, -89.00, 2011.90, 2342.80, 110.90}},
	{!"Redsands East",				{1848.40, 2342.80, -89.00, 2011.90, 2478.40, 110.90}},
	{!"Redsands West",				{1236.60, 1883.10, -89.00, 1777.30, 2142.80, 110.90}},
	{!"Redsands West",				{1297.40, 2142.80, -89.00, 1777.30, 2243.20, 110.90}},
	{!"Redsands West",				{1377.30, 2243.20, -89.00, 1704.50, 2433.20, 110.90}},
	{!"Redsands West",				{1704.50, 2243.20, -89.00, 1777.30, 2342.80, 110.90}},
	{!"Regular Tom",				{-405.70, 1712.80, -3.00, -276.70, 1892.70, 200.00}},
	{!"Richman",					{647.50, -1118.20, -89.00, 787.40, -954.60, 110.90}},
	{!"Richman",					{647.50, -954.60, -89.00, 768.60, -860.60, 110.90}},
	{!"Richman",					{225.10, -1369.60, -89.00, 334.50, -1292.00, 110.90}},
	{!"Richman",					{225.10, -1292.00, -89.00, 466.20, -1235.00, 110.90}},
	{!"Richman",					{72.60, -1404.90, -89.00, 225.10, -1235.00, 110.90}},
	{!"Richman",					{72.60, -1235.00, -89.00, 321.30, -1008.10, 110.90}},
	{!"Richman",					{321.30, -1235.00, -89.00, 647.50, -1044.00, 110.90}},
	{!"Richman",					{321.30, -1044.00, -89.00, 647.50, -860.60, 110.90}},
	{!"Richman",					{321.30, -860.60, -89.00, 687.80, -768.00, 110.90}},
	{!"Richman",					{321.30, -768.00, -89.00, 700.70, -674.80, 110.90}},
	{!"Robada Intersection",		{-1119.00, 1178.90, -89.00, -862.00, 1351.40, 110.90}},
	{!"Roca Escalante",				{2237.40, 2202.70, -89.00, 2536.40, 2542.50, 110.90}},
	{!"Roca Escalante",				{2536.40, 2202.70, -89.00, 2625.10, 2442.50, 110.90}},
	{!"Rockshore East",				{2537.30, 676.50, -89.00, 2902.30, 943.20, 110.90}},
	{!"Rockshore West",				{1997.20, 596.30, -89.00, 2377.30, 823.20, 110.90}},
	{!"Rockshore West",				{2377.30, 596.30, -89.00, 2537.30, 788.80, 110.90}},
	{!"Rodeo",						{72.60, -1684.60, -89.00, 225.10, -1544.10, 110.90}},
	{!"Rodeo",						{72.60, -1544.10, -89.00, 225.10, -1404.90, 110.90}},
	{!"Rodeo",						{225.10, -1684.60, -89.00, 312.80, -1501.90, 110.90}},
	{!"Rodeo",						{225.10, -1501.90, -89.00, 334.50, -1369.60, 110.90}},
	{!"Rodeo",						{334.50, -1501.90, -89.00, 422.60, -1406.00, 110.90}},
	{!"Rodeo",						{312.80, -1684.60, -89.00, 422.60, -1501.90, 110.90}},
	{!"Rodeo",						{422.60, -1684.60, -89.00, 558.00, -1570.20, 110.90}},
	{!"Rodeo",						{558.00, -1684.60, -89.00, 647.50, -1384.90, 110.90}},
	{!"Rodeo",						{466.20, -1570.20, -89.00, 558.00, -1385.00, 110.90}},
	{!"Rodeo",						{422.60, -1570.20, -89.00, 466.20, -1406.00, 110.90}},
	{!"Rodeo",						{466.20, -1385.00, -89.00, 647.50, -1235.00, 110.90}},
	{!"Rodeo",						{334.50, -1406.00, -89.00, 466.20, -1292.00, 110.90}},
	{!"Royal Casino",				{2087.30, 1383.20, -89.00, 2437.30, 1543.20, 110.90}},
	{!"San Andreas Sound",			{2450.30, 385.50, -100.00, 2759.20, 562.30, 200.00}},
	{!"Santa Flora",				{-2741.00, 458.40, -7.60, -2533.00, 793.40, 200.00}},
	{!"Santa Maria Beach",			{342.60, -2173.20, -89.00, 647.70, -1684.60, 110.90}},
	{!"Santa Maria Beach",			{72.60, -2173.20, -89.00, 342.60, -1684.60, 110.90}},
	{!"Shady Cabin",				{-1632.80, -2263.40, -3.00, -1601.30, -2231.70, 200.00}},
	{!"Shady Creeks",				{-1820.60, -2643.60, -8.00, -1226.70, -1771.60, 200.00}},
	{!"Shady Creeks",				{-2030.10, -2174.80, -6.10, -1820.60, -1771.60, 200.00}},
	{!"Sobell Rail Yards",			{2749.90, 1548.90, -89.00, 2923.30, 1937.20, 110.90}},
	{!"Spinybed",					{2121.40, 2663.10, -89.00, 2498.20, 2861.50, 110.90}},
	{!"Starfish Casino",			{2437.30, 1783.20, -89.00, 2685.10, 2012.10, 110.90}},
	{!"Starfish Casino",			{2437.30, 1858.10, -39.00, 2495.00, 1970.80, 60.90}},
	{!"Starfish Casino",			{2162.30, 1883.20, -89.00, 2437.30, 2012.10, 110.90}},
	{!"Temple",						{1252.30, -1130.80, -89.00, 1378.30, -1026.30, 110.90}},
	{!"Temple",						{1252.30, -1026.30, -89.00, 1391.00, -926.90, 110.90}},
	{!"Temple",						{1252.30, -926.90, -89.00, 1357.00, -910.10, 110.90}},
	{!"Temple",						{952.60, -1130.80, -89.00, 1096.40, -937.10, 110.90}},
	{!"Temple",						{1096.40, -1130.80, -89.00, 1252.30, -1026.30, 110.90}},
	{!"Temple",						{1096.40, -1026.30, -89.00, 1252.30, -910.10, 110.90}},
	{!"The Camel's Toe",			{2087.30, 1203.20, -89.00, 2640.40, 1383.20, 110.90}},
	{!"The Clown's Pocket",			{2162.30, 1783.20, -89.00, 2437.30, 1883.20, 110.90}},
	{!"The Emerald Isle",			{2011.90, 2202.70, -89.00, 2237.40, 2508.20, 110.90}},
	{!"The Farm",					{-1209.60, -1317.10, 114.90, -908.10, -787.30, 251.90}},
	{!"The Four Dragons Casino",	{1817.30, 863.20, -89.00, 2027.30, 1083.20, 110.90}},
	{!"The High Roller",			{1817.30, 1283.20, -89.00, 2027.30, 1469.20, 110.90}},
	{!"The Mako Span",				{1664.60, 401.70, 0.00, 1785.10, 567.20, 200.00}},
	{!"The Panopticon",				{-947.90, -304.30, -1.10, -319.60, 327.00, 200.00}},
	{!"The Pink Swan",				{1817.30, 1083.20, -89.00, 2027.30, 1283.20, 110.90}},
	{!"The Sherman Dam",			{-968.70, 1929.40, -3.00, -481.10, 2155.20, 200.00}},
	{!"The Strip",					{2027.40, 863.20, -89.00, 2087.30, 1703.20, 110.90}},
	{!"The Strip",					{2106.70, 1863.20, -89.00, 2162.30, 2202.70, 110.90}},
	{!"The Strip",					{2027.40, 1783.20, -89.00, 2162.30, 1863.20, 110.90}},
	{!"The Strip",					{2027.40, 1703.20, -89.00, 2137.40, 1783.20, 110.90}},
	{!"The Visage",					{1817.30, 1863.20, -89.00, 2106.70, 2011.80, 110.90}},
	{!"The Visage",					{1817.30, 1703.20, -89.00, 2027.40, 1863.20, 110.90}},
	{!"Unity Station",				{1692.60, -1971.80, -20.40, 1812.60, -1932.80, 79.50}},
	{!"Valle Ocultado",				{-936.60, 2611.40, 2.00, -715.90, 2847.90, 200.00}},
	{!"Verdant Bluffs",				{930.20, -2488.40, -89.00, 1249.60, -2006.70, 110.90}},
	{!"Verdant Bluffs",				{1073.20, -2006.70, -89.00, 1249.60, -1842.20, 110.90}},
	{!"Verdant Bluffs",				{1249.60, -2179.20, -89.00, 1692.60, -1842.20, 110.90}},
	{!"Verdant Meadows",			{37.00, 2337.10, -3.00, 435.90, 2677.90, 200.00}},
	{!"Verona Beach",				{647.70, -2173.20, -89.00, 930.20, -1804.20, 110.90}},
	{!"Verona Beach",				{930.20, -2006.70, -89.00, 1073.20, -1804.20, 110.90}},
	{!"Verona Beach",				{851.40, -1804.20, -89.00, 1046.10, -1577.50, 110.90}},
	{!"Verona Beach",				{1161.50, -1722.20, -89.00, 1323.90, -1577.50, 110.90}},
	{!"Verona Beach",				{1046.10, -1722.20, -89.00, 1161.50, -1577.50, 110.90}},
	{!"Vinewood",					{787.40, -1310.20, -89.00, 952.60, -1130.80, 110.90}},
	{!"Vinewood",					{787.40, -1130.80, -89.00, 952.60, -954.60, 110.90}},
	{!"Vinewood",					{647.50, -1227.20, -89.00, 787.40, -1118.20, 110.90}},
	{!"Vinewood",					{647.70, -1416.20, -89.00, 787.40, -1227.20, 110.90}},
	{!"Whitewood Estates",			{883.30, 1726.20, -89.00, 1098.30, 2507.20, 110.90}},
	{!"Whitewood Estates",			{1098.30, 1726.20, -89.00, 1197.30, 2243.20, 110.90}},
	{!"Willowfield",				{1970.60, -2179.20, -89.00, 2089.00, -1852.80, 110.90}},
	{!"Willowfield",				{2089.00, -2235.80, -89.00, 2201.80, -1989.90, 110.90}},
	{!"Willowfield",				{2089.00, -1989.90, -89.00, 2324.00, -1852.80, 110.90}},
	{!"Willowfield",				{2201.80, -2095.00, -89.00, 2324.00, -1989.90, 110.90}},
	{!"Willowfield",				{2541.70, -1941.40, -89.00, 2703.50, -1852.80, 110.90}},
	{!"Willowfield",				{2324.00, -2059.20, -89.00, 2541.70, -1852.80, 110.90}},
	{!"Willowfield",				{2541.70, -2059.20, -89.00, 2703.50, -1941.40, 110.90}},
	{!"Yellow Bell Station",		{1377.40, 2600.40, -21.90, 1492.40, 2687.30, 78.00}},
	// Main Zones
	{!"Los Santos",					{44.60, -2892.90, -242.90, 2997.00, -768.00, 900.00}},
	{!"Las Venturas",				{869.40, 596.30, -242.90, 2997.00, 2993.80, 900.00}},
	{!"Bone County",				{-480.50, 596.30, -242.90, 869.40, 2993.80, 900.00}},
	{!"Tierra Robada",				{-2997.40, 1659.60, -242.90, -480.50, 2993.80, 900.00}},
	{!"Tierra Robada",				{-1213.90, 596.30, -242.90, -480.50, 1659.60, 900.00}},
	{!"San Fierro",					{-2997.40, -1115.50, -242.90, -1213.90, 1659.60, 900.00}},
	{!"Red County",					{-1213.90, -768.00, -242.90, 2997.00, 596.30, 900.00}},
	{!"Flint County",				{-1213.90, -2892.90, -242.90, 44.60, -768.00, 900.00}},
	{!"Whetstone",					{-2997.40, -2892.90, -242.90, -1213.90, -1115.50, 900.00}}
};

// -====[ Tutorial ]===- //

enum E_TUTO
{
	tutTitulo[30 char],
	tutCuerpo[500 char],
	Float: tutCamPos[6]
}

static const Tutorial[][E_TUTO] =
{
	{!"Modo de juego", !"Este modo de juego llamado ~g~RolePlay ~w~consiste en interpretar la vida real.\
	Aquí deberás seguir un rol que tu mismo puedes elegir, y que vas armando a medida que juegas.",
	{518.5446, -1937.4713, 137.6625, 519.3435, -1936.8629, 137.0576}},

	{!"Modo de juego", !"Pero.. ¿Cómo seguir un rol? Con seguir un rol, nos referimos a que debes interpretar\
	una persona real en el juego. Debes actuar como esta, pensar como esta, reaccionar como esta. Tu eres esa persona",
	{518.5446, -1937.4713, 137.6625, 519.3435, -1936.8629, 137.0576}},

	{!"Modo de juego", !"Ahora, resumiremos el \"Seguir el rol de una persona y actuar como esta. Imitar al máximo la vida\
	real\" en una sola palabra: ~r~Rolear.    ",
	{518.5446, -1937.4713, 137.6625, 519.3435, -1936.8629, 137.0576}},

	{!"Ejempolo de un rol", !"Imaginate que decides interpretar el rol de un pandillero, ¿Cómo manifiestas esto?\
	Registras tu cuenta y actuas como un pandillero, un hombre que tiene una actitud agresiva, maleducado.\
	Lo que haces es ir a una tienda de ropa y comprarte pañuelos, colocartelos en la cabeza. Decides buscar en las zonas\
	pobres de la ciudad gente como tu, que te entiendan. De esa forma entras a una pandilla. Eso, es un ejemplo de lo que es rolear correctamente",
	{2419.7092, -1620.1167, 56.2876, 2420.5505, -1620.6659, 55.7626}},

	{!"Rol nativo", !"El rol inicial de todo jugador nuevo, es el de un individuo que llega a Los Santos a buscarse una nueva vida\
	, empezar desde cero. El gobierno te da ~g~$5600 ~w~para subsistir en la ciudad. Existen diversos trabajos que puedes obtener para ganar dinero.\
	Te mostraremos las actividades básicas que debes conocer",
	{1299.9122, -2701.6167, 115.6409,1300.0431, -2700.6279, 115.3258}},

	{!"Nivel", !"El nivel de tu jugador, aumenta automáticamente con el tiempo. A medida que vallas subiendo de nivel, se te abrirán nuevas puertas \
 	en tu Rol, puedes entrar a una facción, o relacionarte con nueva gente, además de ganar más respeto y otras ventajas, como poder ingresar a nuevos \
	 trabajos con restricción de nivel",
	{2067.4966, -1835.8588, 33.4918, 2068.2769, -1835.2395, 33.1315}},

	{!"Trabajos", !"En la ciudad existen diversos trabajos, donde tú vas, firmas un contrato, y comienzas a trabajar. Ésta es la mejor forma para ganar \
	dinero las primeras horas de juego en el servidor. Además, cada trabajo tiene diferentes niveles, que los irás desbloqueando a medida que vas jugando.",
	{-427.1722, -524.2702, 57.0484, -428.0615, -523.8231, 56.5840}},

	{!"Ilegalidad", !"Además, gran parte de la ciudad actua de forma clandestina. En Ciudad Real RP podrás ver Narcotráfico, Tráfico de armas, gente \
	utilizando drogas ilegales, robos, y otras cosas que hacen del servidor más realista y divertido.",
	{1549.8164, -886.9373, 284.7531, 1549.0022, -887.5093, 283.7188}},

	{!"Tu elección", !"Todo depende de tu rol, es decir un narcotraficante ganaría más dinero que un pobre camionero, \
	pero debes estar siempre pendiente que no halla policía, controlar bien a quien le vas a vender, correr y esconderte ante la ley, cuando el camionero \
	vive tranquilo, sin ningún tipo de preocupación relacionada con la ley. ¡Todo depende de ti, a jugar!",
	{1549.8164, -886.9373, 284.7531, 1549.0022, -887.5093, 283.7188}}
};

/*
static const Tutorialv3[][E_TUTO] =
{
	{!"Versión 3", !"La maravillosa versión 3 de Optimus RolePlay ya está aquí. En este Mini-Tutorial te mostraremos \
	los cambios más importantes y agregados",
	{518.5446, -1937.4713, 137.6625, 519.3435, -1936.8629, 137.0576}},

	{!"Inventario", !"Comenzaremos con la implementación más importante de la versión, se trata de un sistema de objetos que facilita la \
	interaccion entre el usuario y los objetos.",
	{1494.2548, -943.2416, 129.6176, 1493.7242, -942.3904, 129.2526}},

	{!"Objetos", !"Se trata de un sistema donde cada jugador tiene un inventario, el cual se abre con la letra ~g~N. En ese inventario, \
	todos los objetos ",
	{1494.2548, -943.2416, 129.6176, 1493.7242, -942.3904, 129.2526}},

	{!"Nueva central de LSPD", !"En ésta central se encuentran las cárceles de la ciudad. Las cárceles ahora tienen un gimnasio, un patio abierto, \
	un comedor, y las celdas, para interactuar más a gusto con los prisioneros. Además se agregó un sistema de multar y embargar vehículos, el depósito también se encuentra en ésta central.",
	{1035.1720, -1355.8115, 57.4655, 1035.8335, -1356.5662, 57.1454}},

	{!"Nueva central de LSPD", !"En ésta central se encuentran las cárceles de la ciudad. Las cárceles ahora tienen un gimnasio, un patio abierto, \
	un comedor, y las celdas, para interactuar más a gusto con los prisioneros. Además se agregó un sistema de multar y embargar vehículos, el depósito también se encuentra en ésta central.",
	{1035.1720, -1355.8115, 57.4655, 1035.8335, -1356.5662, 57.1454}},
};*/

// Mochilas
static const Float: MochilaColgada [][] =
{
	{-0.109, -0.046, 0.000}, // 0
	{-0.139, -0.057, 0.000}, // 1
	{-0.145, -0.071, 0.000}, // 2
	{-0.150, -0.056, 0.000}, // 3
	{-0.121, -0.051, -0.006}, // 4
	{-0.103, -0.094, -0.006}, // 5
	{-0.119, -0.073, -0.006}, // 6
	{-0.119, -0.073, -0.006}, // 7
	{-0.127, -0.044, 0.008}, // 8
	{-0.137, -0.045, -0.012}, // 9
	{-0.206, -0.076, -0.012}, // 10
	{-0.134, -0.040, -0.007}, // 11
	{-0.157, -0.036, -0.007}, // 12
	{-0.120, -0.015, -0.007}, // 13
	{-0.130, -0.015, 0.000}, // 14
	{-0.135, -0.052, 0.002}, // 15
	{-0.100, -0.052, 0.002}, // 16
	{-0.117, -0.030, 0.002}, // 17
	{-0.141, -0.023, -0.002}, // 18
	{-0.114, -0.042, -0.002}, // 19
	{-0.143, -0.042, -0.002}, // 20
	{-0.132, -0.064, -0.002}, // 21
	{-0.154, -0.090, -0.002}, // 22
	{-0.134, -0.049, -0.002}, // 23
	{-0.144, -0.063, -0.002}, // 24
	{-0.130, -0.064, -0.002}, // 25
	{-0.176, -0.036, -0.002}, // 26
	{-0.124, -0.043, -0.002}, // 27
	{-0.126, -0.052, -0.002}, // 28
	{-0.210, -0.078, -0.002}, // 29
	{-0.131, -0.047, -0.002}, // 30
	{-0.201, -0.049, -0.002}, // 31
	{-0.156, -0.035, -0.002}, // 32
	{-0.180, -0.052, -0.002}, // 33
	{-0.137, -0.052, -0.002}, // 34
	{-0.140, -0.052, -0.002}, // 35
	{-0.140, -0.052, -0.002}, // 36
	{-0.140, -0.052, -0.002}, // 37
	{-0.211, -0.034, -0.002}, // 38
	{-0.211, -0.046, -0.002}, // 39
	{-0.160, -0.027, -0.002}, // 40
	{-0.082, -0.044, -0.002}, // 41
	{-0.137, -0.044, -0.002}, // 42
	{-0.175, -0.017, -0.002}, // 43
	{-0.181, -0.031, -0.002}, // 44
	{-0.153, -0.018, -0.002}, // 45
	{-0.140, -0.046, -0.002}, // 46
	{-0.142, -0.049, -0.002}, // 47
	{-0.133, -0.061, -0.002}, // 48
	{-0.153, -0.062, 0.008}, // 49
	{-0.164, -0.053, 0.008}, // 50
	{-0.104, -0.050, 0.008}, // 51
	{-0.104, -0.050, -0.012}, // 52
	{-0.207, -0.040, -0.012}, // 53
	{-0.220, -0.052, -0.012}, // 54
	{-0.148, -0.030, -0.012}, // 55
	{-0.157, -0.020, -0.012}, // 56
	{-0.092, -0.037, -0.012}, // 57
	{-0.193, -0.037, -0.012}, // 58
	{-0.139, -0.060, -0.012}, // 59
	{-0.131, -0.048, -0.012}, // 60
	{-0.137, -0.043, -0.012}, // 61
	{-0.137, -0.043, -0.012}, // 62
	{-0.137, -0.037, -0.012}, // 63
	{-0.137, -0.037, -0.012}, // 64
	{-0.106, -0.036, -0.012}, // 65
	{-0.136, -0.060, -0.006}, // 66
	{-0.136, -0.060, -0.006}, // 67
	{-0.146, -0.058, -0.006}, // 68
	{-0.130, -0.050, -0.006}, // 69
	{-0.137, -0.051, -0.006}, // 70
	{-0.126, -0.062, -0.006}, // 71
	{-0.142, -0.050, -0.006}, // 72
	{-0.152, -0.038, -0.006}, // 73
	{-0.109, -0.040, -0.006}, // 74
	{-0.128, -0.040, -0.006}, // 75
	{-0.145, -0.024, -0.006}, // 76
	{-0.187, -0.052, -0.006}, // 77
	{-0.104, -0.052, -0.006}, // 78
	{-0.135, -0.067, -0.006}, // 79
	{-0.135, -0.030, -0.006}, // 80
	{-0.135, -0.030, -0.006}, // 81
	{-0.136, -0.070, -0.001}, // 82
	{-0.136, -0.070, -0.001}, // 83
	{-0.140, -0.070, -0.001}, // 84
	{-0.102, -0.070, -0.001}, // 85
	{-0.136, -0.076, -0.001}, // 86
	{-0.136, -0.100, -0.001}, // 87
	{-0.225, -0.073, 0.001}, // 88
	{-0.210, -0.089, -0.004}, // 89
	{-0.128, -0.089, -0.004}, // 90
	{-0.148, -0.089, -0.004}, // 91
	{-0.124, -0.096, -0.002}, // 92
	{-0.133, -0.096, -0.002}, // 93
	{-0.201, -0.056, -0.006}, // 94
	{-0.194, -0.056, -0.006}, // 95
	{-0.102, -0.056, -0.006}, // 96
	{-0.160, -0.076, -0.018}, // 97
	{-0.148, -0.045, -0.008}, // 98
	{-0.107, -0.045, -0.008}, // 99
	{-0.136, -0.045, -0.008}, // 100
	{-0.109, -0.045, -0.008}, // 101
	{-0.136, -0.045, -0.008}, // 102
	{-0.093, -0.045, -0.008}, // 103
	{-0.143, -0.045, -0.008}, // 104
	{-0.095, -0.045, 0.001}, // 105
	{-0.139, -0.045, -0.012}, // 106
	{-0.146, -0.045, -0.012}, // 107
	{-0.131, -0.045, -0.012}, // 108
	{-0.138, -0.045, -0.012}, // 109
	{-0.138, -0.045, -0.012}, // 110
	{-0.105, -0.045, 0.007}, // 111
	{-0.164, -0.045, 0.007}, // 112
	{-0.141, -0.045, 0.007}, // 113
	{-0.125, -0.045, -0.006}, // 114
	{-0.127, -0.032, 0.008}, // 115
	{-0.127, -0.032, 0.008}, // 116
	{-0.163, -0.032, 0.008}, // 117
	{-0.163, -0.032, 0.008}, // 118
	{-0.140, -0.032, 0.008}, // 119
	{-0.146, -0.032, 0.008}, // 120
	{-0.122, -0.032, 0.008}, // 121
	{-0.135, -0.032, 0.008}, // 122
	{-0.141, -0.032, 0.008}, // 123
	{-0.125, -0.032, 0.008}, // 124
	{-0.144, -0.032, 0.008}, // 125
	{-0.159, -0.032, 0.008}, // 126
	{-0.147, -0.032, 0.008}, // 127
	{-0.147, -0.032, 0.008}, // 128
	{-0.222, -0.052, 0.008}, // 129
	{-0.208, -0.052, 0.008}, // 130
	{-0.139, -0.052, 0.008}, // 131
	{-0.203, -0.052, 0.008}, // 132
	{-0.139, -0.052, 0.008}, // 133
	{-0.214, -0.052, 0.008}, // 134
	{-0.134, -0.052, 0.008}, // 135
	{-0.209, -0.052, 0.008}, // 136
	{-0.155, -0.052, 0.008}, // 137
	{-0.132, -0.052, 0.008}, // 138
	{-0.131, -0.052, 0.008}, // 139
	{-0.131, -0.052, 0.008}, // 140
	{-0.151, -0.052, 0.008}, // 141
	{-0.136, -0.052, 0.008}, // 142
	{-0.131, -0.052, 0.008}, // 143
	{-0.131, -0.052, 0.008}, // 144
	{-0.131, -0.052, 0.008}, // 145
	{-0.115, -0.052, 0.008}, // 146
	{-0.137, -0.052, 0.008}, // 147
	{-0.157, -0.052, 0.008}, // 148
	{-0.127, -0.052, 0.008}, // 149
	{-0.151, -0.052, 0.008}, // 150
	{-0.148, -0.052, 0.008}, // 151
	{-0.174, -0.052, 0.008}, // 152
	{-0.142, -0.052, 0.008}, // 153
	{-0.165, -0.036, -0.009}, // 154
	{-0.136, -0.036, -0.009}, // 155
	{-0.143, -0.036, -0.009}, // 156
	{-0.141, -0.059, -0.009}, // 157
	{-0.141, -0.059, -0.009}, // 158
	{-0.141, -0.059, -0.009}, // 159
	{-0.167, -0.059, -0.009}, // 160
	{-0.134, -0.059, -0.009}, // 161
	{-0.151, -0.059, -0.009}, // 162
	{-0.113, -0.059, -0.009}, // 163
	{-0.113, -0.059, -0.009}, // 164
	{-0.199, -0.059, -0.009}, // 165
	{-0.199, -0.059, -0.009}, // 166
	{-0.136, -0.059, -0.009}, // 167
	{-0.136, -0.059, -0.009}, // 168
	{-0.165, -0.108, -0.009}, // 169
	{-0.145, -0.070, -0.009}, // 170
	{-0.145, -0.070, -0.009}, // 171
	{-0.140, -0.049, -0.009}, // 172
	{-0.125, -0.049, -0.009}, // 173
	{-0.125, -0.049, -0.009}, // 174
	{-0.125, -0.049, -0.009}, // 175
	{-0.125, -0.049, -0.009}, // 176
	{-0.125, -0.049, -0.009}, // 177
	{-0.125, -0.049, -0.009}, // 178
	{-0.134, -0.024, -0.009}, // 179
	{-0.122, -0.024, -0.009}, // 180
	{-0.122, -0.024, -0.009}, // 181
	{-0.148, -0.024, -0.009}, // 182
	{-0.137, -0.024, -0.009}, // 183
	{-0.137, -0.024, -0.009}, // 184
	{-0.143, -0.047, 0.004}, // 185
	{-0.143, -0.047, 0.004}, // 186
	{-0.143, -0.047, 0.004}, // 187
	{-0.144, -0.047, 0.004}, // 188
	{-0.146, -0.047, 0.004}, // 189
	{-0.131, -0.047, 0.004}, // 190
	{-0.127, -0.047, 0.004}, // 191
	{-0.131, -0.047, 0.004}, // 192
	{-0.123, -0.047, 0.004}, // 193
	{-0.131, -0.047, 0.004}, // 194
	{-0.107, -0.047, 0.004}, // 195
	{-0.225, -0.047, 0.004}, // 196
	{-0.213, -0.047, 0.004}, // 197
	{-0.142, -0.047, 0.004}, // 198
	{-0.211, -0.047, 0.004}, // 199
	{-0.136, -0.047, 0.004}, // 200
	{-0.136, -0.047, 0.004}, // 201
	{-0.136, -0.047, 0.004}, // 202
	{-0.136, -0.047, 0.004}, // 203
	{-0.136, -0.047, 0.004}, // 204
	{-0.146, -0.060, 0.004}, // 205
	{-0.142, -0.060, 0.004}, // 206
	{-0.153, -0.060, 0.004}, // 207
	{-0.150, -0.060, 0.004}, // 208
	{-0.196, -0.060, 0.004}, // 209
	{-0.207, -0.060, 0.004}, // 210
	{-0.135, -0.060, 0.004}, // 211
	{-0.211, -0.060, 0.004}, // 212
	{-0.155, -0.060, 0.004}, // 213
	{-0.152, -0.060, 0.004}, // 214
	{-0.154, -0.060, 0.004}, // 215
	{-0.154, -0.060, 0.004}, // 216
	{-0.139, -0.060, 0.004}, // 217
	{-0.210, -0.060, 0.004}, // 218
	{-0.156, -0.060, 0.004}, // 219
	{-0.144, -0.060, 0.004}, // 220
	{-0.144, -0.060, 0.004}, // 221
	{-0.144, -0.060, 0.004}, // 222
	{-0.147, -0.060, 0.004}, // 223
	{-0.148, -0.060, 0.004}, // 224
	{-0.153, -0.060, 0.004}, // 225
	{-0.156, -0.060, 0.004}, // 226
	{-0.110, -0.060, 0.004}, // 227
	{-0.149, -0.060, 0.004}, // 228
	{-0.202, -0.060, 0.004}, // 229
	{-0.158, -0.060, 0.004}, // 230
	{-0.220, -0.060, 0.004}, // 231
	{-0.215, -0.060, 0.004}, // 232
	{-0.136, -0.060, 0.004}, // 233
	{-0.195, -0.060, 0.004}, // 234
	{-0.195, -0.060, 0.004}, // 235
	{-0.199, -0.060, 0.004}, // 236
	{-0.172, -0.060, 0.004}, // 237
	{-0.145, -0.060, 0.004}, // 238
	{-0.107, -0.060, 0.004}, // 239
	{-0.153, -0.060, 0.004}, // 240
	{-0.111, -0.060, 0.004}, // 241
	{-0.118, -0.060, 0.004}, // 242
	{-0.157, -0.060, 0.004}, // 243
	{-0.151, -0.060, 0.004}, // 244
	{-0.151, -0.060, 0.004}, // 245
	{-0.140, -0.060, 0.004}, // 246
	{-0.137, -0.060, 0.004}, // 247
	{-0.137, -0.060, 0.004}, // 248
	{-0.138, -0.060, 0.004}, // 249
	{-0.132, -0.060, -0.003}, // 250
	{-0.127, -0.060, -0.003}, // 251
	{-0.127, -0.060, -0.003}, // 252
	{-0.185, -0.060, -0.003}, // 253
	{-0.136, -0.060, -0.003}, // 254
	{-0.146, -0.060, -0.003}, // 255
	{-0.133, -0.060, -0.003}, // 256
	{-0.148, -0.060, -0.003}, // 257
	{-0.117, -0.060, -0.003}, // 258
	{-0.121, -0.060, -0.003}, // 259
	{-0.130, -0.060, -0.003}, // 260
	{-0.205, -0.060, -0.003}, // 261
	{-0.146, -0.060, -0.003}, // 262
	{-0.148, -0.070, -0.003}, // 263
	{-0.107, -0.093, -0.003}, // 264
	{-0.152, -0.053, -0.003}, // 265
	{-0.170, -0.053, -0.003}, // 266
	{0.051, -0.053, -0.029}, // 267
	{-0.132, -0.099, 0.005}, // 268
	{-0.132, -0.099, 0.005}, // 269
	{-0.119, -0.081, 0.005}, // 270
	{-0.124, -0.081, 0.005}, // 271
	{-0.155, -0.081, 0.005}, // 272
	{-0.155, -0.081, 0.005}, // 273
	{-0.135, -0.081, 0.005}, // 274
	{-0.135, -0.081, 0.005}, // 275
	{-0.137, -0.081, 0.005}, // 276
	{-0.092, -0.103, 0.005}, // 277
	{-0.092, -0.103, 0.005}, // 278
	{-0.092, -0.103, 0.005}, // 279
	{-0.140, -0.086, 0.005}, // 280
	{-0.140, -0.092, 0.005}, // 281
	{-0.118, -0.058, 0.005}, // 282
	{-0.130, -0.058, 0.005}, // 283
	{-0.125, -0.058, 0.005}, // 284
	{-0.125, -0.084, 0.005}, // 285
	{-0.125, -0.084, 0.005}, // 286
	{-0.125, -0.084, 0.005}, // 287
	{-0.125, -0.084, 0.005}, // 288
	{-0.160, -0.084, 0.005}, // 289
	{-0.159, -0.084, 0.005}, // 290
	{-0.159, -0.084, 0.005}, // 291
	{-0.132, -0.112, 0.005}, // 292
	{-0.113, -0.070, 0.000}, // 293
	{-0.125, -0.098, 0.000}, // 294
	{-0.214, -0.070, 0.000}, // 295
	{-0.206, -0.070, 0.000}, // 296
	{-0.150, -0.070, 0.000}, // 297
	{-0.148, -0.070, 0.000}, // 298
	{-0.131, -0.103, 0.000} // 299
};

// Walkie-Talkie enganchado (300 skins)
static const Float: WalkieTalkiePos[][] =
{
	{0.040999, 0.147999, -0.055999, 81.799949, -7.699999, -88.000030}, //0,
	{0.040999, 0.147999, -0.094999, 81.799949, -17.399999, -88.000030}, //1,
	{0.040999, 0.133999, -0.094999, 81.799949, -17.399999, -88.000030}, //2,
	{0.040999, 0.140999, -0.094999, 81.799949, -17.399999, -88.000030}, //3,
	{0.040999, 0.153999, -0.073000, 81.799949, -17.399999, -88.000030}, //4,
	{0.126000, 0.173999, -0.097000, 81.799949, -17.399999, -88.000030}, //5,
	{0.126000, 0.123999, -0.097000, 81.799949, -17.399999, -88.000030}, //6,
	{0.091000, 0.154999, -0.083000, 81.799949, -17.399999, -88.000030}, //7,
	{0.091000, 0.147999, -0.083000, 81.799949, -17.399999, -88.000030}, //8,
	{0.091000, 0.172999, -0.083000, 81.799949, -22.999992, -88.000030}, //9,
	{0.091000, 0.172999, -0.083000, 81.799949, -22.999992, -88.000030}, //10,
	{0.130000, 0.144999, -0.068000, 81.799949, -22.999992, -88.000030}, //11,
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // 1040522937,
	{0.130000, 0.173999, -0.068000, 81.799949, -22.999992, -88.000030}, //13,
	{0.093000, 0.155999, -0.079000, 81.799949, -22.999992, -88.000030}, //14,
	{0.093000, 0.128999, -0.079000, 81.799949, -22.999992, -88.000030}, //15,
	{0.093000, 0.161999, -0.079000, 81.799949, -23.499994, -88.900009}, //16,
	{0.093000, 0.161999, -0.079000, 81.799949, -23.499994, -88.900009}, //17,
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // 1035892426,
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // 1035892426,
	{0.093000, 0.161999, -0.079000, 81.799949, -23.499994, -88.900009}, //20,
	{0.093000, 0.161999, -0.098000, 81.799949, -23.499994, -88.900009}, //21,
	{0.093000, 0.161999, -0.098000, 81.799949, -23.499994, -88.900009}, //22,
	{0.093000, 0.161999, -0.098000, 81.799949, -23.499994, -88.900009}, //23,
	{0.093000, 0.161999, -0.098000, 81.799949, -23.499994, -88.900009}, //24,
	{0.093000, 0.161999, -0.098000, 81.799949, -23.499994, -88.900009}, //25,
	{0.093000, 0.170999, -0.064000, 81.799949, -23.499994, -88.900009}, //26,
	{0.093000, 0.170999, -0.064000, 81.799949, -23.499994, -88.900009}, //27,
	{0.093000, 0.170999, -0.064000, 81.799949, -15.499982, -88.900009}, //28,
	{0.093000, 0.185999, -0.064000, 81.799949, -15.499982, -88.900009}, //29,
	{0.093000, 0.185999, -0.075999, 81.799949, -15.499982, -88.900009}, //30,
	{0.025000, 0.185999, -0.078000, 81.799949, -34.899982, -88.900009}, //31,
	{0.067000, 0.108999, -0.055999, 81.799949, -11.899985, -88.900009}, //32,
	{0.067000, 0.146999, -0.055999, 81.799949, -11.899985, -88.900009}, //33,
	{0.067000, 0.146999, -0.055999, 81.799949, -11.899985, -88.900009}, //34,
	{0.067000, 0.146999, -0.055999, 81.799949, -11.899985, -88.900009}, //35,
	{0.067000, 0.146999, -0.055999, 81.799949, -11.899985, -88.900009}, //36,
	{0.067000, 0.146999, -0.055999, 81.799949, -11.899985, -88.900009}, //37,
	{0.067000, 0.128999, -0.039000, 81.799949, -17.999988, -88.900009}, //38,
	{0.067000, 0.183999, -0.075000, 81.799949, -36.399986, -88.900009}, //39,
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // 1032402770,
	{0.154000, 0.173999, -0.057000, 81.799949, -36.399986, -88.900009}, //41,
	{0.154000, 0.164999, -0.081000, 81.799949, -36.399986, -88.900009}, //42,
	{0.154000, 0.164999, -0.081000, 81.799949, -36.399986, -88.900009}, //43,
	{0.072000, 0.128999, -0.070000, 81.799949, -11.899983, -88.900009}, //44,
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // 1033073854,
	{0.072000, 0.128999, -0.070000, 81.799949, -11.899983, -88.900009}, //46,
	{0.072000, 0.157999, -0.070000, 81.799949, -11.899983, -88.900009}, //47,
	{0.072000, 0.144999, -0.070000, 81.799949, -11.899983, -88.900009}, //48,
	{0.072000, 0.144999, -0.070000, 81.799949, -11.899983, -88.900009}, //49,
	{0.072000, 0.176999, -0.070000, 81.799949, -11.899983, -88.900009}, //50,
	{0.130999, 0.146999, -0.061999, 81.799949, -11.899983, -88.900009}, //51,
	{0.130999, 0.127999, -0.061999, 81.799949, -11.899983, -88.900009}, //52,
	{-0.035000, 0.149999, -0.051000, 81.799949, -11.899983, -88.900009}, //53,
	{0.049999, 0.150999, -0.051000, 81.799949, -21.699981, -88.900009}, //54,
	{0.118999, 0.150999, -0.051000, 81.799949, -21.699981, -88.900009}, //55,
	{0.118999, 0.150999, -0.051000, 81.799949, -21.699981, -88.900009}, //56,
	{0.118999, 0.135999, -0.051000, 81.799949, -21.699981, -88.900009}, //57,
	{0.053999, 0.135999, -0.051000, 81.799949, -21.699981, -88.900009}, //58,
	{0.053999, 0.113999, -0.070000, 81.799949, -5.999976, -88.900009}, //59,
	{0.142999, 0.146999, -0.070000, 81.799949, -5.999976, -88.900009}, //60,
	{0.142999, 0.117999, -0.070000, 81.799949, -22.199977, -88.900009}, //61,
	{0.142999, 0.117999, -0.070000, 81.799949, -22.199977, -88.900009}, //62,
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // 1041395351,
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // 1041395351,
	{0.142999, 0.165999, -0.070000, 81.799949, -22.199977, -88.900009}, //65,
	{0.079000, 0.155999, -0.064999, 81.799949, -22.199977, -88.900009}, //66,
	{0.079000, 0.155999, -0.064999, 81.799949, -22.199977, -88.900009}, //67,
	{0.079000, 0.155999, -0.064999, 81.799949, -22.199977, -88.900009}, //68,
	{0.142000, 0.149999, -0.046999, 81.799949, -24.599969, -88.900009}, //69,
	{0.087000, 0.151999, -0.070999, 81.799949, -18.999980, -88.900009}, //70,
	{0.087000, 0.142999, -0.070999, 81.799949, -18.999980, -88.900009}, //71,
	{0.087000, 0.129999, -0.070999, 81.799949, -18.999980, -88.900009}, //72,
	{0.087000, 0.129999, -0.070999, 81.799949, -18.999980, -88.900009}, //73,
	{0.087000, 0.150999, -0.065999, 81.799949, -18.999980, -88.900009}, //74,
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // 1035087127,
	{0.136000, 0.154999, -0.050999, 81.799949, -29.899982, -88.900009}, //76,
	{0.081000, 0.168999, -0.079999, 81.799949, -39.199970, -88.900009}, //77,
	{0.137000, 0.158999, -0.095999, 81.799949, -25.199972, -88.900009}, //78,
	{0.137000, 0.153999, -0.095999, 81.799949, -25.199972, -88.900009}, //79,
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // 1040992701,
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // 1040992701,
	{0.137000, 0.140999, -0.110999, 81.799949, -25.199972, -88.900009}, //82,
	{0.137000, 0.140999, -0.110999, 81.799949, -25.199972, -88.900009}, //83,
	{0.137000, 0.140999, -0.110999, 81.799949, -25.199972, -88.900009}, //84,
	{0.169000, 0.195999, -0.096999, 81.799949, -31.499967, -88.900009}, //85,
	{0.169000, 0.126999, -0.096999, 81.799949, -31.499967, -88.900009}, //86,
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // 1043140188,
	{0.098000, 0.143999, -0.070999, 81.799949, -31.499967, -88.900009}, //88,
	{0.098000, 0.117999, -0.111999, 81.799949, -31.499967, -88.900009}, //89,
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // 1045690326,
	{0.133000, 0.150999, -0.040999, 81.799949, -34.499980, -88.900009}, //91,
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // 1040724270,
	{0.151000, 0.162999, -0.063999, 81.799949, -34.499980, -88.900009}, //93,
	{0.126000, 0.119999, -0.063999, 81.799949, -34.499980, -88.900009}, //94,
	{0.126000, 0.137999, -0.074999, 81.799949, -34.499980, -88.900009}, //95,
	{0.126000, 0.137999, -0.074999, 81.799949, -20.799982, -88.900009}, //96,
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // 1040254507,
	{0.126000, 0.120999, -0.074999, 81.799949, -20.799982, -88.900009}, //98,
	{0.143000, 0.142999, -0.062999, 81.799949, -20.799982, -88.900009}, //99,
	{0.108000, 0.162999, -0.062999, 81.799949, -20.799982, -88.900009}, //100,
	{0.108000, 0.151999, -0.062999, 81.799949, -20.799982, -88.900009}, //101,
	{0.154000, 0.139999, -0.106999, 81.799949, -25.699983, -88.900009}, //102,
	{0.154000, 0.154999, -0.106999, 81.799949, -25.699983, -88.900009}, //103,
	{0.133000, 0.133999, -0.115999, 81.799949, -25.699983, -88.900009}, //104,
	{0.157000, 0.160999, -0.087999, 81.799949, -25.699983, -88.900009}, //105,
	{0.157000, 0.160999, -0.091999, 81.799949, -25.699983, -88.900009}, //106,
	{0.127000, 0.145999, -0.096999, 81.799949, -25.699983, -88.900009}, //107,
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // 1040321615,
	{0.127000, 0.157999, -0.096999, 81.799949, -25.699983, -88.900009}, //109,
	{0.127000, 0.157999, -0.096999, 81.799949, -25.699983, -88.900009}, //110,
	{0.126000, 0.175999, -0.077999, 81.799949, -25.699983, -88.900009}, //111,
	{0.126000, 0.120999, -0.077999, 81.799949, -25.699983, -88.900009}, //112,
	{0.126000, 0.175999, -0.077999, 81.799949, -25.699983, -88.900009}, //113,
	{0.126000, 0.137999, -0.077999, 81.799949, -18.199983, -88.900009}, //114,
	{0.126000, 0.137999, -0.077999, 81.799949, -18.199983, -88.900009}, //115,
	{0.126000, 0.137999, -0.077999, 81.799949, -18.199983, -88.900009}, //116,
	{0.066000, 0.132999, -0.061999, 81.799949, -18.199983, -88.900009}, //117,
	{0.066000, 0.132999, -0.061999, 81.799949, -18.199983, -88.900009}, //118,
	{0.066000, 0.136999, -0.061999, 81.799949, -18.199983, -88.900009}, //119,
	{0.066000, 0.163999, -0.061999, 81.799949, -18.199983, -88.900009}, //120,
	{0.066000, 0.171999, -0.075999, 81.799949, -18.199983, -88.900009}, //121,
	{0.066000, 0.159999, -0.075999, 81.799949, -18.199983, -88.900009}, //122,
	{0.085000, 0.159999, -0.075999, 81.799949, -18.199983, -88.900009}, //123,
	{0.085000, 0.178999, -0.075999, 81.799949, -18.199983, -88.900009}, //124,
	{0.085000, 0.139999, -0.075999, 81.799949, -18.199983, -88.900009}, //125,
	{0.120000, 0.116999, -0.079999, 81.799949, -18.199983, -88.900009}, //126,
	{0.120000, 0.199999, -0.079999, 81.799949, -31.099983, -88.900009}, //127,
	{0.095000, 0.158999, -0.079999, 81.799949, -22.499982, -88.900009}, //128,
	{0.043000, 0.122999, -0.076999, 81.799949, -22.499982, -88.900009}, //129,
	{0.084000, 0.188999, -0.083999, 81.799949, -45.799983, -88.900009}, //130,
	{0.195000, 0.147999, -0.091999, 81.799949, -45.799983, -88.900009}, //131,
	{0.042000, 0.098999, -0.060999, 81.799949, -9.999979, -88.900009}, //132,
	{0.106000, 0.120999, -0.062999, 81.799949, -9.999979, -88.900009}, //133,
	{0.043000, 0.110999, -0.062999, 81.799949, -9.999979, -88.900009}, //134,
	{0.043000, 0.141999, -0.097999, 81.799949, -9.999979, -88.900009}, //135,
	{0.043000, 0.104999, -0.067999, 81.799949, -9.999979, -88.900009}, //136,
	{0.043000, 0.114999, -0.056999, 81.799949, -9.999979, -88.900009}, //137,
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // 1026564317,
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // 1026564317,
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // 1026564317,
	{0.137000, 0.145999, -0.055999, 81.799949, -29.499977, -88.900009}, //141,
	{0.067000, 0.159999, -0.091999, 81.799949, -17.299978, -88.900009}, //142,
	{0.067000, 0.161999, -0.091999, 81.799949, -17.299978, -88.900009}, //143,
	{0.067000, 0.153999, -0.091999, 81.799949, -17.299978, -88.900009}, //144,
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // 1032402780,
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // 1032402780,
	{0.087000, 0.142999, -0.071999, 81.799949, -17.299978, -88.900009}, //147,
	{0.173000, 0.142999, -0.071999, 81.799949, -33.299980, -88.900009}, //148,
	{0.055000, 0.200999, -0.097999, 81.799949, -19.199979, -88.900009}, //149,
	{0.153000, 0.134999, -0.060999, 81.799949, -36.299980, -88.900009}, //150,
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // 1042066449,
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // 1042066449,
	{0.087000, 0.121999, -0.065999, 81.799949, -12.099979, -88.900009}, //153,
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // 1035087136,
	{0.087000, 0.148999, -0.083999, 81.799949, -12.099979, -88.900009}, //155,
	{0.087000, 0.148999, -0.083999, 81.799949, -12.099979, -88.900009}, //156,
	{0.201000, 0.137999, -0.076999, 81.799949, -34.799980, -88.900009}, //157,
	{0.156000, 0.137999, -0.076999, 81.799949, -34.799980, -88.900009}, //158,
	{0.156000, 0.134999, -0.076999, 81.799949, -34.799980, -88.900009}, //159,
	{0.156000, 0.080999, -0.076999, 81.799949, -15.899970, -88.900009}, //160,
	{0.156000, 0.102999, -0.076999, 81.799949, -15.899970, -88.900009}, //161,
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // 1042267778,
	{0.156000, 0.150999, -0.076999, 81.799949, -15.899970, -88.900009}, //163,
	{0.156000, 0.150999, -0.076999, 81.799949, -15.899970, -88.900009}, //164,
	{0.095000, 0.121999, -0.076999, 81.799949, -22.099969, -88.900009}, //165,
	{0.095000, 0.121999, -0.076999, 81.799949, -22.099969, -88.900009}, //166,
	{0.095000, 0.121999, -0.076999, 81.799949, -22.099969, -88.900009}, //167,
	{0.095000, 0.136999, -0.076999, 81.799949, -22.099969, -88.900009}, //168,
	{0.137000, 0.136999, -0.076999, 81.799949, -28.999971, -88.900009}, //169,
	{0.137000, 0.168999, -0.076999, 81.799949, -28.999971, -88.900009}, //170,
	{0.137000, 0.146999, -0.076999, 81.799949, -28.999971, -88.900009}, //171,
	{0.152000, 0.143999, -0.062999, 81.799949, -28.999971, -88.900009}, //172,
	{0.152000, 0.154999, -0.074999, 81.799949, -28.999971, -88.900009}, //173,
	{0.152000, 0.154999, -0.074999, 81.799949, -28.999971, -88.900009}, //174,
	{0.152000, 0.154999, -0.074999, 81.799949, -28.999971, -88.900009}, //175,
	{0.152000, 0.154999, -0.074999, 81.799949, -28.999971, -88.900009}, //176,
	{0.152000, 0.154999, -0.074999, 81.799949, -28.999971, -88.900009}, //177,
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // 1041999346,
	{0.131000, 0.168999, -0.074999, 81.799949, -28.999971, -88.900009}, //179,
	{0.131000, 0.168999, -0.074999, 81.799949, -28.999971, -88.900009}, //180,
	{0.131000, 0.168999, -0.074999, 81.799949, -28.999971, -88.900009}, //181,
	{0.131000, 0.168999, -0.074999, 81.799949, -28.999971, -88.900009}, //182,
	{0.131000, 0.168999, -0.074999, 81.799949, -28.999971, -88.900009}, //183,
	{0.131000, 0.168999, -0.074999, 81.799949, -28.999971, -88.900009}, //184,
	{0.131000, 0.168999, -0.074999, 81.799949, -28.999971, -88.900009}, //185,
	{0.131000, 0.168999, -0.074999, 81.799949, -28.999971, -88.900009}, //186,
	{0.131000, 0.168999, -0.074999, 81.799949, -28.999971, -88.900009}, //187,
	{0.131000, 0.168999, -0.074999, 81.799949, -28.999971, -88.900009}, //188,
	{0.131000, 0.168999, -0.074999, 81.799949, -28.999971, -88.900009}, //189,
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // 1044079719,
	{0.183000, 0.120999, -0.067999, 81.799949, -28.999971, -88.900009}, //191,
	{0.180000, 0.152999, -0.061999, 81.799949, -38.199970, -88.900009}, //192,
	{0.180000, 0.152999, -0.061999, 81.799949, -38.199970, -88.900009}, //193,
	{0.180000, 0.152999, -0.061999, 81.799949, -38.199970, -88.900009}, //194,
	{0.180000, 0.166999, -0.061999, 81.799949, -38.199970, -88.900009}, //195,
	{0.051000, 0.131999, -0.061999, 81.799949, -27.499967, -88.900009}, //196,
	{0.051000, 0.186999, -0.091999, 81.799949, -27.499967, -88.900009}, //197,
	{0.205000, 0.136999, -0.071999, 81.799949, -46.399971, -88.900009}, //198,
	{0.098000, 0.164999, -0.084999, 81.799949, -46.399971, -88.900009}, //199,
	{0.098000, 0.121999, -0.101999, 81.799949, -12.199976, -88.900009}, //200,
	{0.189000, 0.147999, -0.079999, 81.799949, -33.799968, -88.900009}, //201,
	{0.152000, 0.141999, -0.079999, 81.799949, -33.799968, -88.900009}, //202,
	{0.152000, 0.161999, -0.097999, 81.799949, -33.799968, -88.900009}, //203,
	{0.152000, 0.161999, -0.097999, 81.799949, -33.799968, -88.900009}, //204,
	{0.152000, 0.174999, -0.097999, 81.799949, -33.799968, -88.900009}, //205,
	{0.152000, 0.146999, -0.072999, 81.799949, -33.799968, -88.900009}, //206,
	{0.152000, 0.133999, -0.072999, 81.799949, -33.799968, -88.900009}, //207,
	{0.152000, 0.133999, -0.072999, 81.799949, -33.799968, -88.900009}, //208,
	{0.011000, 0.121999, -0.068999, 81.799949, -18.499971, -88.900009}, //209,
	{0.011000, 0.121999, -0.068999, 81.799949, -18.499971, -88.900009}, //210,
	{0.165000, 0.135999, -0.068999, 81.799949, -28.699962, -88.900009}, //211,
	{0.056000, 0.135999, -0.068999, 81.799949, -28.699962, -88.900009}, //212,
	{0.056000, 0.185000, -0.095999, 81.799949, -28.699962, -88.900009}, //213,
	{0.137000, 0.144000, -0.069999, 81.799949, -28.699962, -88.900009}, //214,
	{0.137000, 0.155000, -0.069999, 81.799949, -28.699962, -88.900009}, //215,
	{0.137000, 0.141999, -0.051999, 81.799949, -28.699962, -88.900009}, //216,
	{0.137000, 0.149000, -0.073999, 81.799949, -28.699962, -88.900009}, //217,
	{0.093000, 0.207000, -0.048999, 81.799949, -49.699958, -88.900009}, //218,
	{0.196000, 0.165000, -0.075999, 81.799949, -49.699958, -88.900009}, //219,
	{0.051000, 0.138999, -0.091999, 81.799949, -12.599959, -88.900009}, //220,
	{0.051000, 0.159000, -0.091999, 81.799949, -12.599959, -88.900009}, //221,
	{0.051000, 0.159000, -0.091999, 81.799949, -12.599959, -88.900009}, //222,
	{0.051000, 0.159000, -0.091999, 81.799949, -12.599959, -88.900009}, //223,
	{0.150000, 0.132000, -0.067999, 81.799949, -28.299957, -88.900009}, //224,
	{0.150000, 0.132000, -0.067999, 81.799949, -28.299957, -88.900009}, //225,
	{0.150000, 0.132000, -0.066999, 81.799949, -28.299957, -88.900009}, //226,
	{0.150000, 0.132000, -0.066999, 81.799949, -28.299957, -88.900009}, //227,
	{0.150000, 0.148000, -0.090999, 81.799949, -28.299957, -88.900009}, //228,
	{0.086000, 0.148000, -0.055999, 81.799949, -28.299957, -88.900009}, //229,
	{0.086000, 0.148000, -0.055999, 81.799949, -28.299957, -88.900009}, //230,
	{0.050000, 0.158999, -0.055999, 81.799949, -28.299957, -88.900009}, //231,
	{0.050000, 0.207999, -0.086999, 81.799949, -42.499954, -88.900009}, //232,
	{0.160000, 0.167999, -0.049999, 81.799949, -42.499954, -88.900009}, //233,
	{0.070000, 0.117999, -0.043999, 81.799949, -11.399957, -88.900009}, //234,
	{0.070000, 0.117999, -0.043999, 81.799949, -11.399957, -88.900009}, //235,
	{0.070000, 0.135999, -0.043999, 81.799949, -11.399957, -88.900009}, //236,
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // 1032805462,
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // 1032805462,
	{0.144000, 0.144999, -0.084999, 81.799949, -11.399957, -88.900009}, //239,
	{0.144000, 0.110999, -0.077999, 81.799949, -11.399957, -88.900009}, //240,
	{0.144000, 0.120999, -0.105999, 81.799949, -11.399957, -88.900009}, //241,
	{0.144000, 0.120999, -0.105999, 81.799949, -11.399957, -88.900009}, //242,
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // 1041462482,
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // 1041462482,
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // 1041462482,
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // 1041462482,
	{0.144000, 0.131999, -0.105999, 81.799949, -22.199958, -88.900009}, //247,
	{0.144000, 0.131999, -0.105999, 81.799949, -22.199958, -88.900009}, //248,
	{0.144000, 0.174999, -0.105999, 81.799949, -22.199958, -88.900009}, //249,
	{0.144000, 0.130999, -0.105999, 81.799949, -22.199958, -88.900009}, //250,
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // 1041462482,
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // 1041462482,
	{0.078000, 0.115999, -0.056999, 81.799949, -22.199958, -88.900009}, //253,
	{0.078000, 0.163999, -0.091999, 81.799949, -22.199958, -88.900009}, //254,
	{0.078000, 0.163999, -0.091999, 81.799949, -22.199958, -88.900009}, //255,
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // 1033879203,
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // 1033879203,
	{0.078000, 0.198999, -0.091999, 81.799949, -22.199958, -88.900009}, //258,
	{0.078000, 0.198999, -0.091999, 81.799949, -22.199958, -88.900009}, //259,
	{0.136000, 0.143999, -0.060999, 81.799949, -22.199958, -88.900009}, //260,
	{0.080000, 0.116999, -0.060999, 81.799949, -22.199958, -88.900009}, //261,
	{0.080000, 0.154999, -0.096999, 81.799949, -22.199958, -88.900009}, //262,
	{0.143000, 0.133999, -0.064999, 81.799949, -22.199958, -88.900009}, //263,
	{0.126000, 0.150999, -0.104000, 81.799949, -22.199958, -88.900009}, //264,
	{0.126000, 0.150999, -0.094000, 81.799949, -22.199958, -88.900009}, //265,
	{0.126000, 0.150999, -0.094000, 81.799949, -22.199958, -88.900009}, //266,
	{0.297000, 0.150999, -0.094000, 81.799949, -22.199958, -88.900009}, //267,
	{0.117000, 0.124999, -0.094000, 81.799949, -22.199958, -88.900009}, //268,
	{0.117000, 0.153999, -0.094000, 81.799949, -22.199958, -88.900009}, //269,
	{0.117000, 0.142999, -0.094000, 81.799949, -22.199958, -88.900009}, //270,
	{0.117000, 0.142999, -0.094000, 81.799949, -22.199958, -88.900009}, //271,
	{0.117000, 0.167999, -0.094000, 81.799949, -22.199958, -88.900009}, //272,
	{0.117000, 0.128999, -0.070000, 81.799949, -22.199958, -88.900009}, //273,
	{0.117000, 0.128999, -0.070000, 81.799949, -22.199958, -88.900009}, //274,
	{0.117000, 0.128999, -0.070000, 81.799949, -22.199958, -88.900009}, //275,
	{0.117000, 0.128999, -0.070000, 81.799949, -22.199958, -88.900009}, //276,
	{0.117000, 0.195999, -0.070000, 81.799949, -22.199958, -88.900009}, //277,
	{0.117000, 0.195999, -0.070000, 81.799949, -22.199958, -88.900009}, //278,
	{0.117000, 0.195999, -0.070000, 81.799949, -22.199958, -88.900009}, //279,
	{0.117000, 0.127999, -0.070000, 81.799949, -22.199958, -88.900009}, //280,
	{0.117000, 0.127999, -0.070000, 81.799949, -22.199958, -88.900009}, //281,
	{0.117000, 0.127999, -0.070000, 81.799949, -22.199958, -88.900009}, //282,
	{0.117000, 0.127999, -0.070000, 81.799949, -22.199958, -88.900009}, //283,
	{0.117000, 0.149999, -0.070000, 81.799949, -22.199958, -88.900009}, //284,
	{0.117000, 0.149999, -0.070000, 81.799949, -22.199958, -88.900009}, //285,
	{0.117000, 0.149999, -0.070000, 81.799949, -22.199958, -88.900009}, //286,
	{0.117000, 0.149999, -0.070000, 81.799949, -22.199958, -88.900009}, //287,
	{0.117000, 0.128999, -0.070000, 81.799949, -22.199958, -88.900009}, //288,
	{0.117000, 0.128999, -0.070000, 81.799949, -22.199958, -88.900009}, //289,
	{0.117000, 0.128999, -0.070000, 81.799949, -22.199958, -88.900009}, //290,
	{0.117000, 0.128999, -0.070000, 81.799949, -22.199958, -88.900009}, //291,
	{0.117000, 0.142999, -0.070000, 81.799949, -22.199958, -88.900009}, //292,
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // 1039113697,
	{0.117000, 0.142999, -0.070000, 81.799949, -22.199958, -88.900009}, //294,
	{0.028000, 0.130999, -0.086000, 81.799949, -22.199958, -88.900009}, //295,
	{0.028000, 0.136999, -0.086000, 81.799949, -22.199958, -88.900009}, //296,
	{0.028000, 0.164999, -0.086000, 81.799949, -22.199958, -88.900009}, //297,
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // 1021665539,
	{0.152000, 0.150999, -0.086000, 81.799949, -22.199958, -88.900009} //299,
};

// Armas colgadas
static const Float: ArmaEspaldaLiviana[][] =
{
	{-0.018000, -0.115000, 0.029000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 0,
	{-0.048999, -0.145000, 0.029000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 1,
	{-0.048999, -0.156000, 0.039000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 2,
	{-0.048999, -0.133000, 0.039000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 3,
	{-0.048999, -0.151000, 0.039000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 4,
	{-0.048999, -0.168000, 0.061999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 5,
	{0.001000, -0.163000, 0.064999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 6,
	{-0.048999, -0.133000, 0.018000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 7,
	{-0.066999, -0.119000, 0.032000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 8,
	{-0.066999, -0.119000, 0.076999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 9,
	{-0.104999, -0.132000, 0.043999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 10,
	{-0.012999, -0.107000, -0.050000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 11,
	{-0.051999, -0.099000, 0.005999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 12,
	{-0.001999, -0.126000, 0.008999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 13,
	{-0.082999, -0.104000, 0.015999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 14,
	{-0.063999, -0.113000, 0.015999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 15,
	{-0.008999, -0.143000, 0.015999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 16,
	{-0.024999, -0.101000, 0.033999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 17,
	{-0.024999, -0.122000, 0.033999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 18,
	{-0.024999, -0.111000, 0.033999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 19,
	{-0.024999, -0.115000, 0.033999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 20,
	{-0.045999, -0.138000, 0.011999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 21,
	{-0.045999, -0.150000, 0.030999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 22,
	{-0.029999, -0.132000, 0.030999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 23,
	{-0.029999, -0.132000, 0.030999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 24,
	{-0.029999, -0.134000, 0.030999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 25,
	{-0.029999, -0.248000, 0.030999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 26,
	{-0.029999, -0.112000, 0.030999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 27,
	{-0.029999, -0.112000, 0.034999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 28,
	{-0.029999, -0.156000, 0.034999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 29,
	{-0.029999, -0.120000, 0.022999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 30,
	{-0.029999, -0.141000, -0.069000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 31,
	{-0.029999, -0.096000, 0.025999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 32,
	{-0.065999, -0.128000, 0.036999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 33,
	{-0.009999, -0.114000, 0.036999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 34,
	{-0.009999, -0.123000, 0.036999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 35,
	{-0.023999, -0.122000, 0.041999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 36,
	{-0.023999, -0.118000, 0.041999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 37,
	{-0.057000, -0.120000, 0.010999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 38,
	{-0.057000, -0.124000, 0.017999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 39,
	{0.016999, -0.110000, -0.020000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 40,
	{0.016999, -0.120000, -0.020000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 41,
	{-0.037000, -0.112000, 0.013999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 42,
	{-0.037000, -0.112000, 0.013999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 43,
	{-0.037000, -0.112000, 0.013999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 44,
	{-0.037000, -0.124000, 0.013999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 45,
	{-0.037000, -0.141000, 0.013999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 46,
	{-0.037000, -0.134000, 0.013999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 47,
	{-0.037000, -0.134000, 0.013999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 48,
	{-0.037000, -0.134000, 0.013999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 49,
	{-0.037000, -0.141000, 0.013999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 50,
	{-0.037000, -0.126000, 0.013999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 51,
	{-0.037000, -0.126000, 0.013999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 52,
	{-0.037000, -0.126000, 0.013999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 53,
	{-0.037000, -0.126000, 0.013999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 54,
	{-0.037000, -0.126000, 0.013999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 55,
	{-0.037000, -0.126000, 0.013999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 56,
	{-0.037000, -0.125000, 0.013999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 57,
	{-0.037000, -0.095000, 0.013999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 58,
	{-0.037000, -0.129000, 0.013999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 59,
	{-0.037000, -0.118000, 0.027999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 60,
	{-0.037000, -0.103000, 0.027999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 61,
	{-0.037000, -0.114000, 0.027999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 62,
	{-0.037000, -0.114000, 0.042999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 63,
	{-0.037000, -0.115000, 0.042999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 64,
	{-0.037000, -0.115000, 0.042999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 65,
	{-0.037000, -0.128000, 0.042999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 66,
	{-0.037000, -0.128000, 0.042999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 67,
	{-0.037000, -0.128000, 0.042999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 68,
	{-0.037000, -0.103000, -0.039000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 69,
	{-0.067000, -0.109000, 0.029999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 70,
	{-0.028000, -0.129000, 0.029999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 71,
	{-0.028000, -0.129000, 0.029999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 72,
	{-0.028000, -0.115000, 0.029999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 73,
	{-0.028000, -0.115000, 0.029999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 74,
	{-0.028000, -0.104000, 0.029999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 75,
	{-0.028000, -0.098000, 0.029999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 76,
	{-0.028000, -0.136000, 0.029999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 77,
	{-0.028000, -0.141000, 0.029999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 78,
	{-0.028000, -0.141000, 0.029999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 79,
	{-0.028000, -0.141000, 0.029999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 80,
	{-0.028000, -0.141000, 0.029999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 81,
	{-0.028000, -0.102000, 0.029999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 82,
	{-0.028000, -0.112000, 0.029999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 83,
	{-0.028000, -0.139000, 0.029999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 84,
	{0.009999, -0.095000, -0.031000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 85,
	{-0.002000, -0.150000, 0.022999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 86,
	{-0.002000, -0.130000, 0.022999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 87,
	{-0.074999, -0.130000, 0.006999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 88,
	{-0.074999, -0.177000, 0.017999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 89,
	{0.018999, -0.098000, -0.018000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 90,
	{0.018999, -0.098000, -0.054000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 91,
	{0.005999, -0.098000, 0.008999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 92,
	{0.005999, -0.098000, -0.019000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 93,
	{0.005999, -0.121000, -0.019000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 94,
	{0.005999, -0.103000, 0.000999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 95,
	{0.005999, -0.133000, 0.000999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 96,
	{0.005999, -0.129000, 0.000999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 97,
	{0.005999, -0.150000, 0.000999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 98,
	{0.005999, -0.102000, 0.000999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 99,
	{0.005999, -0.142000, 0.000999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 100,
	{0.005999, -0.157000, 0.009999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 101,
	{-0.003000, -0.146000, 0.009999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 102,
	{-0.003000, -0.175000, 0.009999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 103,
	{-0.005000, -0.148000, 0.009999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 104,
	{0.049999, -0.176000, 0.009999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 105,
	{0.027999, -0.154000, 0.009999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 106,
	{0.009999, -0.132000, 0.016999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 107,
	{0.009999, -0.132000, 0.016999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 108,
	{0.009999, -0.132000, 0.016999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 109,
	{0.009999, -0.132000, 0.016999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 110,
	{0.009999, -0.132000, 0.016999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 111,
	{-0.039000, -0.132000, 0.016999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 112,
	{-0.039000, -0.132000, -0.006000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 113,
	{-0.039000, -0.132000, -0.006000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 114,
	{-0.039000, -0.132000, -0.006000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 115,
	{-0.039000, -0.132000, 0.053999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 116,
	{-0.039000, -0.132000, 0.026999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 117,
	{-0.039000, -0.132000, 0.026999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 118,
	{-0.039000, -0.132000, 0.026999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 119,
	{-0.012000, -0.132000, 0.026999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 120,
	{-0.012000, -0.165000, 0.026999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 121,
	{-0.012000, -0.141000, 0.026999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 122,
	{-0.012000, -0.140000, 0.029999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 123,
	{-0.012000, -0.140000, 0.029999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 124,
	{-0.012000, -0.140000, 0.029999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 125,
	{-0.012000, -0.140000, 0.029999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 126,
	{-0.012000, -0.140000, 0.029999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 127,
	{-0.012000, -0.140000, 0.029999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 128,
	{-0.012000, -0.140000, 0.029999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 129,
	{-0.012000, -0.140000, 0.006999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 130,
	{-0.012000, -0.140000, 0.006999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 131,
	{-0.012000, -0.140000, 0.006999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 132,
	{-0.012000, -0.140000, 0.006999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 133,
	{-0.012000, -0.140000, 0.006999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 134,
	{-0.012000, -0.140000, 0.006999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 135,
	{-0.012000, -0.140000, 0.006999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 136,
	{-0.012000, -0.140000, 0.006999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 137,
	{-0.012000, -0.089000, 0.006999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 138,
	{-0.012000, -0.089000, 0.006999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 139,
	{-0.012000, -0.089000, 0.006999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 140,
	{-0.012000, -0.089000, -0.064000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 141,
	{-0.012000, -0.146000, -0.036000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 142,
	{-0.038000, -0.149000, 0.011999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 143,
	{-0.038000, -0.149000, 0.011999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 144,
	{-0.038000, -0.149000, 0.011999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 145,
	{-0.024000, -0.136000, 0.011999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 146,
	{-0.024000, -0.126000, 0.011999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 147,
	{-0.024000, -0.126000, 0.011999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 148,
	{0.017999, -0.183000, 0.054999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 149,
	{0.017999, -0.132000, -0.056000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 150,
	{0.017999, -0.132000, -0.056000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 151,
	{0.017999, -0.132000, -0.002000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 152,
	{0.017999, -0.121000, -0.002000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 153,
	{0.017999, -0.121000, -0.002000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 154,
	{0.017999, -0.138000, -0.002000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 155,
	{0.017999, -0.138000, -0.002000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 156,
	{0.017999, -0.138000, -0.002000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 157,
	{0.017999, -0.138000, -0.002000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 158,
	{0.017999, -0.138000, -0.002000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 159,
	{0.017999, -0.138000, -0.002000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 160,
	{0.017999, -0.138000, -0.002000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 161,
	{0.017999, -0.138000, -0.002000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 162,
	{0.017999, -0.104000, -0.002000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 163,
	{0.017999, -0.104000, -0.002000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 164,
	{-0.030000, -0.138000, 0.005999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 165,
	{-0.030000, -0.138000, 0.005999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 166,
	{-0.030000, -0.110000, 0.005999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 167,
	{-0.030000, -0.110000, 0.005999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 168,
	{-0.030000, -0.110000, 0.005999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 169,
	{-0.030000, -0.115000, 0.028999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 170,
	{-0.030000, -0.115000, 0.028999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 171,
	{-0.030000, -0.115000, -0.006000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 172,
	{-0.030000, -0.117000, -0.006000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 173,
	{0.005999, -0.129000, 0.016999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 174,
	{0.031999, -0.129000, 0.016999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 175,
	{0.031999, -0.165000, -0.007000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 176,
	{0.031999, -0.165000, -0.007000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 177,
	{0.031999, -0.104000, -0.007000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 178,
	{0.031999, -0.125000, -0.007000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 179,
	{0.031999, -0.152000, -0.007000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 180,
	{0.031999, -0.152000, -0.007000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 181,
	{-0.018000, -0.152000, 0.032999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 182,
	{-0.018000, -0.152000, 0.032999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 183,
	{-0.018000, -0.152000, 0.032999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 184,
	{-0.018000, -0.152000, 0.032999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 185,
	{-0.018000, -0.152000, 0.032999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 186,
	{-0.018000, -0.112000, 0.032999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 187,
	{-0.018000, -0.123000, 0.032999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 188,
	{-0.018000, -0.123000, 0.032999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 189,
	{-0.018000, -0.123000, 0.032999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 190,
	{0.046999, -0.123000, -0.029000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 191,
	{0.046999, -0.137000, -0.001000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 192,
	{0.046999, -0.116000, -0.005000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 193,
	{0.046999, -0.139001, 0.007999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 194,
	{0.046999, -0.139001, -0.006000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 195,
	{-0.038000, -0.139001, -0.006000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 196,
	{-0.038000, -0.166001, -0.040000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 197,
	{-0.038000, -0.102001, 0.009999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 198,
	{-0.038000, -0.130001, -0.029000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 199,
	{-0.013000, -0.114001, -0.011000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 200,
	{-0.013000, -0.123001, -0.032000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 201,
	{0.016999, -0.114001, -0.032000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 202,
	{0.016999, -0.135001, -0.027000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 203,
	{0.016999, -0.135001, -0.027000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 204,
	{-0.020000, -0.154001, -0.026000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 205,
	{0.022999, -0.126001, -0.008000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 206,
	{0.022999, -0.129001, -0.008000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 207,
	{0.022999, -0.143001, -0.008000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 208,
	{-0.040000, -0.099001, -0.008000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 209,
	{-0.040000, -0.097001, -0.008000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 210,
	{-0.004000, -0.097001, -0.042000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 211,
	{-0.075000, -0.098001, 0.030999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 212,
	{-0.075000, -0.131001, 0.030999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 213,
	{-0.014000, -0.118001, 0.030999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 214,
	{-0.014000, -0.118001, -0.029000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 215,
	{-0.014000, -0.118001, -0.029000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 216,
	{-0.014000, -0.105001, -0.011000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 217,
	{-0.014000, -0.145001, -0.011000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 218,
	{-0.014000, -0.108001, -0.011000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 219,
	{-0.041000, -0.143001, 0.013999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 220,
	{-0.019000, -0.127001, 0.026999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 221,
	{-0.019000, -0.128001, 0.026999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 222,
	{-0.019000, -0.141001, 0.026999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 223,
	{0.046999, -0.123001, 0.026999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 224,
	{0.046999, -0.123001, 0.026999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 225,
	{0.046999, -0.123001, -0.008000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 226,
	{0.046999, -0.144001, -0.008000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 227,
	{0.046999, -0.139001, -0.008000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 228,
	{-0.086000, -0.104001, -0.008000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 229,
	{-0.036000, -0.104001, -0.008000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 230,
	{-0.011000, -0.142001, -0.035000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 231,
	{-0.011000, -0.166001, -0.035000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 232,
	{0.072999, -0.101001, -0.055000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 233,
	{-0.063000, -0.104001, -0.020000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 234,
	{-0.063000, -0.110001, -0.020000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 235,
	{-0.063000, -0.110001, -0.020000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 236,
	{-0.054000, -0.102001, -0.020000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 237,
	{0.021999, -0.102001, -0.020000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 238,
	{0.021999, -0.145001, -0.020000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 239,
	{0.021999, -0.143001, 0.002999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 240,
	{0.021999, -0.139001, 0.002999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 241,
	{0.021999, -0.152001, 0.002999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 242,
	{0.037999, -0.128001, 0.002999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 243,
	{0.037999, -0.113001, 0.002999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 244,
	{0.037999, -0.149001, 0.002999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 245,
	{0.037999, -0.160001, 0.002999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 246,
	{0.037999, -0.136001, 0.002999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 247,
	{-0.032000, -0.132001, 0.002999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 248,
	{-0.032000, -0.137001, 0.018999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 249,
	{-0.032000, -0.137001, 0.018999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 250,
	{-0.032000, -0.137001, 0.018999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 251,
	{-0.032000, -0.137001, 0.018999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 252,
	{-0.032000, -0.137001, 0.018999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 253,
	{-0.032000, -0.131001, 0.018999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 254,
	{-0.032000, -0.131001, 0.018999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 255,
	{0.084999, -0.131001, 0.018999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 256,
	{0.084999, -0.131001, -0.024000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 257,
	{0.084999, -0.159001, -0.024000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 258,
	{0.084999, -0.159001, -0.024000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 259,
	{-0.014000, -0.145001, 0.009999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 260,
	{-0.014000, -0.145001, 0.009999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 261,
	{-0.014000, -0.145001, 0.009999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 262,
	{-0.014000, -0.145001, 0.009999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 263,
	{-0.014000, -0.169001, 0.009999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 264,
	{-0.014000, -0.142001, 0.009999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 265,
	{-0.014000, -0.144001, 0.009999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 266,
	{0.236000, -0.133001, 0.043999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 267,
	{0.017000, -0.132001, 0.015999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 268,
	{0.017000, -0.187001, 0.015999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 269,
	{0.035000, -0.136001, 0.015999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 270,
	{0.035000, -0.159001, 0.015999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 271,
	{0.035000, -0.159001, 0.015999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 272,
	{0.035000, -0.135001, 0.015999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 273,
	{0.003000, -0.140001, 0.015999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 274,
	{0.002000, -0.136001, 0.015999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 275,
	{0.002000, -0.136001, 0.015999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 276,
	{0.002000, -0.166001, 0.015999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 277,
	{0.002000, -0.166001, 0.015999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 278,
	{0.002000, -0.166001, 0.015999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 279,
	{0.002000, -0.133001, 0.015999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 280,
	{0.002000, -0.133001, 0.015999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 281,
	{0.002000, -0.143001, 0.015999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 282,
	{-0.002999, -0.130001, 0.015999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 283,
	{0.031000, -0.127001, 0.015999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 284,
	{0.047000, -0.126001, -0.002000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 285,
	{0.047000, -0.153001, -0.002000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 286,
	{-0.039000, -0.181001, -0.002000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 287,
	{0.019999, -0.139001, 0.037999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 288,
	{-0.033000, -0.127001, 0.037999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 289,
	{-0.008000, -0.133001, 0.037999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 290,
	{0.014999, -0.126001, 0.037999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 291,
	{0.042999, -0.138001, -0.022000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 292,
	{0.042999, -0.138001, -0.022000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 293,
	{0.042999, -0.138001, -0.022000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 294,
	{-0.024000, -0.143001, -0.022000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 295,
	{-0.024000, -0.143001, -0.022000, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 296,
	{0.021999, -0.143001, 0.023999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 297,
	{0.021999, -0.143001, 0.023999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000}, // 298,
	{0.064999, -0.143001, 0.023999, 0.000000, 38.899993, 0.000000, 1.000000, 1.000000, 1.000000} // 299,
};

static const Float: ArmaEspaldaPesada[][] =
{
	{-0.079999, -0.107000, 0.027000, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 0,
	{-0.079999, -0.124000, 0.027000, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 1,
	{-0.079999, -0.154000, 0.027000, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 2,
	{-0.079999, -0.136000, 0.027000, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 3,
	{-0.079999, -0.136000, 0.027000, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 4,
	{-0.079999, -0.189000, 0.027000, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 5,
	{-0.079999, -0.168000, 0.027000, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 6,
	{-0.079999, -0.137000, 0.027000, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 7,
	{-0.079999, -0.122000, 0.027000, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 8,
	{-0.079999, -0.112000, 0.057999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 9,
	{-0.079999, -0.142000, 0.072999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 10,
	{-0.050999, -0.133000, 0.020999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 11,
	{-0.050999, -0.123000, 0.020999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 12,
	{-0.050999, -0.108000, 0.029999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 13,
	{-0.050999, -0.114000, 0.010999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 14,
	{-0.050999, -0.123000, 0.036999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 15,
	{-0.050999, -0.141000, 0.029999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 16,
	{-0.050999, -0.106000, 0.029999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 17,
	{-0.050999, -0.127000, 0.029999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 18,
	{-0.031000, -0.127000, 0.029999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 19,
	{-0.044999, -0.138000, 0.029999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 20,
	{-0.044999, -0.153000, 0.029999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 21,
	{-0.044999, -0.167000, 0.029999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 22,
	{-0.044999, -0.131000, 0.029999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 23,
	{-0.044999, -0.145000, 0.029999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 24,
	{-0.044999, -0.145000, 0.029999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 25,
	{-0.044999, -0.258001, 0.029999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 26,
	{-0.044999, -0.129001, 0.029999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 27,
	{-0.044999, -0.119001, 0.029999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 28,
	{-0.044999, -0.166001, 0.029999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 29,
	{-0.044999, -0.130001, 0.029999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 30,
	{-0.103000, -0.144001, -0.029000, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 31,
	{-0.047000, -0.098001, 0.025999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 32,
	{-0.047000, -0.115001, 0.025999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 33,
	{-0.032000, -0.117001, 0.025999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 34,
	{-0.032000, -0.134001, 0.025999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 35,
	{-0.032000, -0.132001, 0.025999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 36,
	{-0.032000, -0.132001, 0.025999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 37,
	{-0.032000, -0.117001, 0.025999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 38,
	{-0.032000, -0.118001, 0.025999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 39,
	{-0.032000, -0.094001, -0.001000, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 40,
	{-0.032000, -0.103001, 0.009999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 41,
	{-0.032000, -0.118001, 0.009999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 42,
	{-0.032000, -0.130001, 0.009999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 43,
	{-0.085000, -0.100001, 0.028999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 44,
	{-0.085000, -0.116001, 0.028999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 45,
	{-0.001000, -0.146001, 0.028999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 46,
	{-0.080000, -0.137001, 0.028999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 47,
	{-0.027000, -0.131001, 0.028999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 48,
	{-0.027000, -0.107001, 0.028999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 49,
	{-0.027000, -0.133001, 0.028999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 50,
	{-0.027000, -0.120001, 0.028999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 51,
	{-0.027000, -0.119001, 0.028999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 52,
	{-0.076999, -0.111001, 0.028999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 53,
	{-0.076999, -0.154001, 0.028999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 54,
	{-0.076999, -0.106001, 0.028999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 55,
	{-0.076999, -0.112001, 0.028999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 56,
	{-0.076999, -0.121001, 0.028999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 57,
	{-0.076999, -0.087001, 0.028999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 58,
	{-0.076999, -0.154001, 0.028999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 59,
	{-0.057999, -0.122001, 0.028999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 60,
	{-0.057999, -0.108001, 0.028999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 61,
	{-0.057999, -0.123001, 0.028999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 62,
	{-0.014999, -0.114001, 0.028999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 63,
	{-0.014999, -0.118001, 0.028999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 64,
	{-0.014999, -0.098001, 0.028999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 65,
	{-0.014999, -0.150001, 0.028999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 66,
	{-0.014999, -0.155001, 0.039999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 67,
	{-0.014999, -0.106001, 0.039999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 68,
	{-0.014999, -0.106002, -0.033000, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 69,
	{-0.108000, -0.137002, 0.040999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 70,
	{-0.083000, -0.133002, 0.040999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 71,
	{-0.083000, -0.113002, 0.040999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 72,
	{-0.083000, -0.109002, 0.040999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 73,
	{-0.083000, -0.102002, 0.040999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 74,
	{-0.002000, -0.121002, -0.025000, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 75,
	{-0.092000, -0.093002, 0.024999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 76,
	{-0.092000, -0.127002, 0.037999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 77,
	{-0.011000, -0.144002, 0.016999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 78,
	{-0.065000, -0.143002, 0.026999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 79,
	{-0.065000, -0.111002, 0.026999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 80,
	{-0.065000, -0.111002, 0.026999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 81,
	{-0.065000, -0.124002, 0.026999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 82,
	{-0.065000, -0.124002, 0.026999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 83,
	{-0.065000, -0.151002, 0.026999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 84,
	{-0.053000, -0.118002, 0.032999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 85,
	{-0.077000, -0.143002, 0.032999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 86,
	{-0.015000, -0.118002, 0.032999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 87,
	{-0.073000, -0.117002, 0.032999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 88,
	{-0.160000, -0.136002, 0.055999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 89,
	{-0.008000, -0.100002, -0.004000, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 90,
	{-0.008000, -0.104002, -0.004000, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 91,
	{-0.008000, -0.122002, -0.004000, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 92,
	{-0.008000, -0.097002, -0.004000, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 93,
	{-0.008000, -0.108002, 0.007999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 94,
	{-0.049000, -0.092002, 0.007999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 95,
	{-0.018000, -0.113002, 0.007999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 96,
	{-0.018000, -0.116002, 0.007999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 97,
	{-0.018000, -0.143002, 0.007999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 98,
	{-0.018000, -0.107002, 0.007999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 99,
	{-0.017000, -0.128002, 0.007999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 100,
	{-0.017000, -0.162002, 0.007999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 101,
	{-0.017000, -0.131002, 0.022999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 102,
	{-0.017000, -0.170002, 0.041999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 103,
	{-0.081000, -0.147002, 0.041999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 104,
	{-0.018000, -0.174002, 0.041999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 105,
	{-0.025000, -0.142002, 0.041999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 106,
	{-0.025000, -0.144002, 0.041999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 107,
	{0.014999, -0.107002, 0.016999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 108,
	{-0.006000, -0.122002, 0.030999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 109,
	{-0.006000, -0.120002, 0.030999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 110,
	{-0.018000, -0.120002, 0.038999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 111,
	{-0.018000, -0.121002, 0.038999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 112,
	{-0.047000, -0.124002, -0.007000, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 113,
	{-0.013000, -0.123002, 0.009999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 114,
	{-0.013000, -0.138002, 0.009999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 115,
	{-0.053000, -0.147002, 0.054999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 116,
	{-0.020000, -0.139002, 0.010999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 117,
	{-0.020000, -0.130002, 0.010999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 118,
	{-0.020000, -0.130002, 0.010999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 119,
	{-0.020000, -0.151002, 0.010999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 120,
	{-0.020000, -0.155002, 0.010999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 121,
	{-0.020000, -0.121002, 0.010999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 122,
	{-0.056999, -0.141002, 0.024999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 123,
	{-0.005999, -0.085002, -0.004000, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 124,
	{-0.005999, -0.137002, -0.004000, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 125,
	{-0.005999, -0.137002, -0.004000, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 126,
	{-0.005999, -0.161002, -0.004000, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 127,
	{-0.005999, -0.107002, -0.004000, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 128,
	{-0.142999, -0.120002, 0.013999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 129,
	{-0.049999, -0.120002, 0.031999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 130,
	{0.053000, -0.120002, -0.012000, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 131,
	{-0.058999, -0.098002, 0.016999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 132,
	{-0.000999, -0.111002, 0.016999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 133,
	{-0.110999, -0.100002, 0.016999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 134,
	{-0.044999, -0.148002, 0.016999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 135,
	{-0.060999, -0.105002, 0.029999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 136,
	{-0.024999, -0.100002, 0.029999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 137,
	{0.035000, -0.103002, -0.022000, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 138,
	{-0.004999, -0.103002, 0.030999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 139,
	{0.033000, -0.103002, -0.017000, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 140,
	{-0.015999, -0.103002, 0.026999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 141,
	{-0.015999, -0.147003, 0.026999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 142,
	{-0.015999, -0.153003, 0.026999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 143,
	{-0.015999, -0.165003, 0.026999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 144,
	{0.058000, -0.112002, -0.032000, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 145,
	{-0.001999, -0.128003, 0.023999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 146,
	{-0.057999, -0.105002, 0.023999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 147,
	{-0.016999, -0.127002, -0.004000, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 148,
	{-0.016999, -0.203003, 0.018999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 149,
	{-0.016999, -0.116003, -0.040000, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 150,
	{-0.016999, -0.154003, 0.040999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 151,
	{0.026000, -0.115003, -0.017000, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 152,
	{-0.004999, -0.109003, 0.040999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 153,
	{-0.004999, -0.127003, 0.040999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 154,
	{-0.062999, -0.146003, 0.040999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 155,
	{-0.062999, -0.117003, 0.040999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 156,
	{-0.014999, -0.122003, -0.010000, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 157,
	{-0.036999, -0.112003, 0.002999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 158,
	{-0.020999, -0.118003, 0.010999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 159,
	{-0.020999, -0.123003, 0.010999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 160,
	{-0.020999, -0.119003, 0.010999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 161,
	{-0.020999, -0.112003, 0.010999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 162,
	{-0.032999, -0.109003, 0.010999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 163,
	{-0.032999, -0.115003, 0.010999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 164,
	{-0.032999, -0.115003, 0.010999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 165,
	{-0.032999, -0.138003, 0.010999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 166,
	{-0.032999, -0.107003, 0.010999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 167,
	{-0.032999, -0.115003, 0.010999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 168,
	{-0.032999, -0.112003, 0.010999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 169,
	{-0.032999, -0.125003, 0.010999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 170,
	{-0.032999, -0.128003, 0.010999, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 171,
	{-0.015999, -0.094003, -0.032000, 0.000000, 36.199993, 0.000000, 1.000000, 1.000000, 1.000000}, // 172,
	{-0.033000, -0.127000, 0.042000, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 173,
	{-0.033000, -0.125000, 0.055999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 174,
	{-0.033000, -0.131999, 0.061999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 175,
	{-0.033000, -0.148000, 0.069999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 176,
	{-0.033000, -0.146000, 0.069999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 177,
	{-0.033000, -0.111000, 0.031000, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 178,
	{-0.033000, -0.118000, 0.031000, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 179,
	{-0.033000, -0.145000, 0.051000, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 180,
	{-0.014000, -0.110000, 0.051000, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 181,
	{-0.078000, -0.141000, 0.027000, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 182,
	{-0.078000, -0.118000, 0.027000, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 183,
	{-0.078000, -0.143000, 0.027000, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 184,
	{-0.048000, -0.130000, 0.027000, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 185,
	{-0.119999, -0.136000, 0.053999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 186,
	{-0.072000, -0.121000, 0.053999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 187,
	{-0.072000, -0.108000, 0.030000, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 188,
	{-0.072000, -0.127000, 0.030000, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 189,
	{0.016999, -0.109000, -0.000999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 190,
	{0.016999, -0.103000, 0.007000, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 191,
	{0.016999, -0.108000, -0.013999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 192,
	{0.016999, -0.108000, 0.000000, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 193,
	{0.016999, -0.108000, 0.000000, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 194,
	{0.016999, -0.100000, 0.000000, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 195,
	{-0.108999, -0.123000, 0.000000, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 196,
	{-0.079999, -0.132000, 0.009000, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 197,
	{-0.048000, -0.097000, 0.018000, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 198,
	{-0.111999, -0.124000, 0.032000, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 199,
	{-0.049000, -0.109000, 0.032000, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 200,
	{-0.021000, -0.097000, 0.032000, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 201,
	{-0.021000, -0.114000, 0.032000, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 202,
	{-0.021000, -0.141000, 0.032000, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 203,
	{-0.021000, -0.141000, 0.032000, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 204,
	{-0.021000, -0.141000, 0.032000, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 205,
	{-0.021000, -0.106000, 0.032000, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 206,
	{-0.021000, -0.125000, 0.032000, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 207,
	{-0.060000, -0.131000, 0.022000, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 208,
	{-0.060000, -0.096000, 0.022000, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 209,
	{-0.060000, -0.096000, 0.022000, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 210,
	{0.012999, -0.095000, -0.041999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 211,
	{-0.073999, -0.100000, 0.008999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 212,
	{-0.007999, -0.135000, 0.056999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 213,
	{-0.024999, -0.095000, -0.003000, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 214,
	{0.052000, -0.121000, -0.039000, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 215,
	{-0.039999, -0.104000, 0.011999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 216,
	{-0.039999, -0.103000, 0.011999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 217,
	{-0.039999, -0.142000, 0.011999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 218,
	{0.038000, -0.119000, 0.011999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 219,
	{-0.053999, -0.143000, 0.011999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 220,
	{-0.032999, -0.114000, 0.011999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 221,
	{-0.032999, -0.122000, 0.011999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 222,
	{-0.032999, -0.145000, 0.035999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 223,
	{0.006000, -0.094000, -0.017000, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 224,
	{0.006000, -0.094000, -0.017000, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 225,
	{0.006000, -0.094000, -0.031000, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 226,
	{0.006000, -0.156000, -0.012000, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 227,
	{-0.062999, -0.121000, -0.012000, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 228,
	{-0.081000, -0.092000, -0.003000, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 229,
	{-0.059000, -0.091000, -0.003000, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 230,
	{-0.059000, -0.122000, 0.021999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 231,
	{-0.059000, -0.158000, 0.010999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 232,
	{0.035999, -0.119000, -0.012000, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 233,
	{-0.085999, -0.096000, 0.022999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 234,
	{-0.085999, -0.108000, 0.022999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 235,
	{-0.085999, -0.101000, 0.022999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 236,
	{-0.039000, -0.108000, -0.011000, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 237,
	{-0.118999, -0.121000, 0.018999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 238,
	{0.005000, -0.143000, 0.037999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 239,
	{0.005000, -0.127000, 0.009999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 240,
	{-0.070999, -0.159000, 0.027999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 241,
	{-0.070999, -0.151000, 0.039999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 242,
	{-0.000999, -0.129000, 0.031999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 243,
	{-0.093000, -0.102000, 0.040999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 244,
	{-0.057000, -0.136000, 0.011999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 245,
	{-0.059000, -0.107000, 0.040999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 246,
	{-0.089000, -0.126000, 0.040999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 247,
	{-0.089000, -0.130000, 0.040999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 248,
	{-0.089000, -0.137000, 0.040999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 249,
	{-0.015000, -0.141000, 0.040999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 250,
	{-0.015000, -0.122000, 0.040999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 251,
	{-0.015000, -0.103000, 0.040999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 252,
	{-0.101000, -0.101000, 0.034999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 253,
	{-0.044000, -0.135000, 0.034999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 254,
	{-0.044000, -0.114000, 0.042999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 255,
	{0.020999, -0.116000, -0.014000, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 256,
	{-0.015000, -0.106000, -0.004000, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 257,
	{-0.015000, -0.154000, 0.012999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 258,
	{-0.015000, -0.149000, 0.044999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 259,
	{-0.015000, -0.132000, 0.044999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 260,
	{-0.076000, -0.108000, 0.044999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 261,
	{-0.076000, -0.139000, 0.051999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 262,
	{-0.011000, -0.117000, 0.012999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 263,
	{-0.011000, -0.165001, 0.030999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 264,
	{-0.017000, -0.147000, 0.030999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 265,
	{-0.070000, -0.147001, 0.038999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 266,
	{0.180999, -0.138001, 0.036999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 267,
	{-0.047999, -0.134001, 0.036999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 268,
	{-0.047999, -0.181001, 0.055999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 269,
	{-0.047999, -0.134001, 0.055999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 270,
	{-0.047999, -0.149001, 0.055999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 271,
	{-0.061999, -0.142001, 0.055999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 272,
	{-0.061999, -0.125001, 0.040999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 273,
	{-0.037999, -0.123001, 0.040999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 274,
	{-0.037999, -0.123001, 0.040999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 275,
	{-0.037999, -0.123001, 0.040999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 276,
	{-0.037999, -0.175001, 0.066999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 277,
	{-0.037999, -0.175001, 0.066999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 278,
	{-0.037999, -0.175001, 0.066999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 279,
	{-0.037999, -0.125001, 0.066999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 280,
	{-0.037999, -0.125001, 0.055999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 281,
	{-0.053999, -0.131001, 0.055999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 282,
	{-0.033999, -0.125001, 0.055999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 283,
	{-0.033999, -0.114001, 0.055999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 284,
	{-0.033999, -0.161001, 0.055999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 285,
	{-0.033999, -0.150001, 0.075999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 286,
	{-0.060999, -0.191001, 0.026999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 287,
	{-0.060999, -0.127001, 0.044999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 288,
	{-0.060999, -0.140001, 0.060999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 289,
	{-0.060999, -0.143001, 0.060999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 290,
	{-0.060999, -0.138001, 0.060999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 291,
	{-0.012999, -0.118001, 0.045999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 292,
	{0.010000, -0.122001, 0.045999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 293,
	{-0.034999, -0.147001, 0.054999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 294,
	{-0.124999, -0.141001, 0.054999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 295,
	{-0.124999, -0.137001, 0.054999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 296,
	{-0.044999, -0.147001, 0.044999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 297,
	{-0.008999, -0.125001, 0.044999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 298,
	{-0.008999, -0.140001, 0.052999, 0.000000, 38.099983, 0.000000, 1.000000, 1.000000, 1.000000}, // 299,
	{0.049999, 0.020000, 0.223999, 0.000000, 0.000000, 0.000000, 1.000000, 0.200000, 0.169000} // 300,
};

static const Float: ChalecoColgado[][] =
{
	{0.100999, 0.048999, 0.010000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000}, // 0,
	{0.059999, 0.045000, -0.020000, 0.000000, 0.000000, 0.000000, 1.071999, 1.333000, 1.120000}, // 1,
	{0.055999, 0.045000, -0.003999, 0.000000, 0.000000, 0.900000, 1.017999, 1.212999, 1.143002}, // 2,
	{0.055999, 0.045000, -0.003999, 0.000000, 0.000000, 0.900000, 1.017999, 1.212999, 1.143002}, // 3,
	{0.083999, 0.045000, 0.008000, 0.000000, 0.000000, 0.900000, 1.017999, 1.212999, 1.085002}, // 4,
	{0.060000, 0.043000, 0.008000, 0.000000, 0.000000, 0.900000, 1.154999, 1.832999, 1.576002}, // 5,
	{0.072999, 0.043000, -0.008999, 0.000000, 0.000000, 0.900000, 1.142999, 1.502999, 1.215002}, // 6,
	{0.072999, 0.043000, -0.008999, 0.000000, 0.000000, 0.900000, 1.142999, 1.502999, 1.215002}, // 7,
	{0.079999, 0.043000, -0.001999, 0.000000, 0.000000, 0.900000, 0.981998, 1.189999, 1.138002}, // 8,
	{0.079999, 0.065000, -0.001999, 0.000000, 0.000000, 0.900000, 0.981998, 1.189999, 1.138002}, // 9,
	{0.010999, 0.065000, -0.001999, 0.000000, 0.000000, 0.900000, 0.981998, 1.618999, 1.138002}, // 10,
	{0.107999, 0.037000, -0.001999, 0.000000, 0.000000, 0.900000, 0.981998, 1.078999, 0.888002}, // 11,
	{0.061999, 0.037000, -0.001999, 0.000000, 0.000000, 0.900000, 0.981998, 1.279000, 0.888002}, // 12,
	{0.149999, 0.037000, -0.001999, 0.000000, 0.000000, 0.900000, 0.981998, 1.279000, 0.888002}, // 13,
	{0.080999, 0.090000, -0.001999, 0.000000, 0.000000, 0.900000, 0.981998, 1.448000, 1.075003}, // 14,
	{0.080999, 0.064000, -0.001999, 0.000000, 0.000000, 0.900000, 0.981998, 1.249999, 1.207003}, // 15,
	{0.104999, 0.032000, -0.001999, 0.000000, 0.000000, 0.900000, 0.981998, 1.249999, 1.207003}, // 16,
	{0.095000, 0.052000, -0.001999, 0.000000, 0.000000, 0.900000, 0.981998, 1.249999, 1.207003}, // 17,
	{0.068000, 0.052000, -0.001999, 0.000000, 0.000000, 0.900000, 0.981998, 1.249999, 1.207003}, // 18,
	{0.108000, 0.052000, 0.008000, 0.000000, 0.000000, 0.900000, 0.981998, 1.249999, 1.207003}, // 19,
	{0.069000, 0.052000, 0.008000, 0.000000, 0.000000, 0.900000, 0.981998, 1.249999, 1.207003}, // 20,
	{0.047000, 0.052000, 0.008000, 0.000000, 0.000000, 0.900000, 1.110998, 1.249999, 1.208003}, // 21,
	{0.047000, 0.046000, 0.008000, 0.000000, 0.000000, 0.900000, 1.110998, 1.554000, 1.208003}, // 22,
	{0.047000, 0.046000, -0.017000, 0.000000, 0.000000, 0.900000, 1.110998, 1.486000, 1.037999}, // 23,
	{0.047000, 0.046000, 0.001000, 0.000000, 0.000000, 0.900000, 1.110998, 1.486000, 1.171000}, // 24,
	{0.047000, 0.046000, 0.001000, 0.000000, 0.000000, 0.900000, 1.110998, 1.486000, 1.171000}, // 25,
	{0.047000, 0.046000, 0.001000, 0.000000, 0.000000, 0.900000, 1.110998, 1.161000, 1.171000}, // 26,
	{0.047000, 0.046000, 0.001000, 0.000000, 0.000000, 0.900000, 1.110998, 1.161000, 1.171000}, // 27,
	{0.047000, 0.046000, 0.001000, 0.000000, 0.000000, 0.900000, 1.110998, 1.161000, 1.171000}, // 28,
	{0.041000, 0.030000, 0.001000, 0.000000, 0.000000, 0.900000, 1.110998, 1.687002, 1.235000}, // 29,
	{0.041000, 0.030000, 0.001000, 0.000000, 0.000000, 0.900000, 1.110998, 1.258002, 1.079000}, // 30,
	{-0.002999, 0.075000, 0.001000, 0.000000, 0.000000, 0.900000, 1.110998, 1.258002, 1.079000}, // 31,
	{0.037000, 0.075000, -0.009999, 0.000000, 0.000000, 0.900000, 1.110998, 1.258002, 0.868000}, // 32,
	{0.018000, 0.075000, -0.001999, 0.000000, 0.000000, 0.900000, 1.110998, 1.497002, 0.868000}, // 33,
	{0.047000, 0.049000, -0.001999, 0.000000, 0.000000, 0.900000, 1.110998, 1.405002, 0.912000}, // 34,
	{0.047000, 0.049000, -0.001999, 0.000000, 0.000000, 0.900000, 1.110998, 1.405002, 1.211000}, // 35,
	{0.047000, 0.049000, -0.001999, 0.000000, 0.000000, 0.900000, 1.110998, 1.405002, 1.211000}, // 36,
	{0.047000, 0.049000, -0.001999, 0.000000, 0.000000, 0.900000, 1.110998, 1.405002, 1.211000}, // 37,
	{0.041000, 0.049000, -0.001999, 0.000000, 0.000000, 0.900000, 0.891999, 1.405002, 0.952000}, // 38,
	{0.041000, 0.069000, -0.001999, 0.000000, 0.000000, 0.900000, 0.891999, 1.727002, 1.086999}, // 39,
	{0.102999, 0.069000, -0.001999, 0.000000, 0.000000, 0.900000, 0.891999, 1.157003, 0.831000}, // 40,
	{0.160000, 0.069000, -0.001999, 0.000000, 0.000000, 0.900000, 0.891999, 1.157003, 0.936999}, // 41,
	{0.088000, 0.069000, -0.001999, 0.000000, 0.000000, 0.900000, 0.980998, 1.157003, 1.103000}, // 42,
	{0.031000, 0.069000, 0.000000, 0.000000, 0.000000, 0.900000, 0.980998, 1.157003, 1.103000}, // 43,
	{0.031000, 0.069000, 0.000000, 0.000000, 0.000000, 0.900000, 0.980998, 1.157003, 0.912000}, // 44,
	{0.061000, 0.051000, -0.005999, 0.000000, 0.000000, 0.900000, 0.980998, 1.157003, 0.912000}, // 45,
	{0.078999, 0.051000, 0.006000, 0.000000, 0.000000, 0.900000, 0.980998, 1.340004, 1.110000}, // 46,
	{0.078999, 0.039000, -0.006999, 0.000000, 0.000000, 0.900000, 0.980998, 1.164004, 1.211000}, // 47,
	{0.090999, 0.039000, -0.000999, 0.000000, 0.000000, 0.900000, 0.980998, 1.164004, 1.211000}, // 48,
	{0.100999, 0.039000, -0.000999, 0.000000, 0.000000, 0.900000, 0.980998, 1.164004, 1.211000}, // 49,
	{0.100999, 0.060000, -0.000999, 0.000000, 0.000000, 0.900000, 0.980998, 1.353005, 1.259001}, // 50,
	{0.100999, 0.060000, -0.000999, 0.000000, 0.000000, 0.900000, 0.980998, 1.353005, 1.050000}, // 51,
	{0.100999, 0.060000, -0.000999, 0.000000, 0.000000, 0.900000, 0.980998, 1.353005, 1.050000}, // 52,
	{0.005999, 0.047000, -0.000999, 0.000000, 0.000000, 0.900000, 0.980998, 1.353005, 1.050000}, // 53,
	{0.005999, 0.044000, -0.000999, 0.000000, 0.000000, 0.900000, 0.980998, 1.353005, 1.050000}, // 54,
	{0.069999, 0.048000, -0.000999, 0.000000, 0.000000, 0.900000, 0.980998, 1.353005, 0.957000}, // 55,
	{0.078999, 0.048000, -0.000999, 0.000000, 0.000000, 0.900000, 0.980998, 1.353005, 0.957000}, // 56,
	{0.107999, 0.048000, -0.000999, 0.000000, 0.000000, 0.900000, 0.980998, 1.251006, 0.957000}, // 57,
	{0.030999, 0.048000, -0.000999, 0.000000, 0.000000, 0.900000, 0.980998, 1.251006, 0.957000}, // 58,
	{0.065999, 0.048000, 0.003000, 0.000000, 0.000000, 0.900000, 0.980998, 1.251006, 0.957000}, // 59,
	{0.096999, 0.051000, 0.003000, 0.000000, 0.000000, 0.900000, 0.980998, 1.328007, 0.992000}, // 60,
	{0.096999, 0.051000, 0.003000, 0.000000, 0.000000, 0.900000, 0.980998, 1.328007, 1.039001}, // 61,
	{0.096999, 0.051000, 0.003000, 0.000000, 0.000000, 0.900000, 0.980998, 1.328007, 1.088001}, // 62,
	{0.096999, 0.071000, 0.003000, 0.000000, 0.000000, 0.900000, 0.943999, 1.388007, 0.947001}, // 63,
	{0.096999, 0.071000, 0.003000, 0.000000, 0.000000, 0.900000, 0.943999, 1.388007, 0.947001}, // 64,
	{0.125999, 0.071000, 0.003000, 0.000000, 0.000000, 0.900000, 0.943999, 1.388007, 0.947001}, // 65,
	{0.125999, 0.071000, 0.003000, 0.000000, 0.000000, 0.900000, 0.943999, 1.388007, 0.947001}, // 66,
	{0.125999, 0.071000, 0.003000, 0.000000, 0.000000, 0.900000, 0.943999, 1.388007, 1.112000}, // 67,
	{0.087000, 0.041000, 0.003000, 0.000000, 0.000000, 0.900000, 0.943999, 1.388007, 1.112000}, // 68,
	{0.099000, 0.041000, 0.003000, 0.000000, 0.000000, 0.900000, 0.978998, 1.388007, 0.820001}, // 69,
	{0.099000, 0.041000, 0.003000, 0.000000, 0.000000, 0.900000, 0.978998, 1.388007, 1.109001}, // 70,
	{0.099000, 0.041000, 0.003000, 0.000000, 0.000000, 0.900000, 0.978998, 1.115007, 1.109001}, // 71,
	{0.099000, 0.041000, 0.003000, 0.000000, 0.000000, 0.900000, 0.978998, 1.115007, 1.098002}, // 72,
	{0.099000, 0.041000, 0.003000, 0.000000, 0.000000, 0.900000, 0.978998, 1.115007, 1.098002}, // 73,
	{0.099000, 0.041000, 0.003000, 0.000000, 0.000000, 0.900000, 0.978998, 1.115007, 1.030001}, // 74,
	{0.099000, 0.059000, 0.003000, 0.000000, 0.000000, 0.900000, 0.978998, 1.115007, 1.030001}, // 75,
	{0.099000, 0.059000, 0.003000, 0.000000, 0.000000, 0.900000, 0.978998, 1.115007, 1.030001}, // 76,
	{0.039000, 0.057000, 0.003000, 0.000000, 0.000000, 0.900000, 0.978998, 1.233008, 1.030001}, // 77,
	{0.098000, 0.048000, 0.015000, 0.000000, 0.000000, 0.900000, 0.978998, 1.233008, 1.090002}, // 78,
	{0.066000, 0.071000, 0.003000, 0.000000, 0.000000, 0.900000, 1.087998, 1.458008, 1.147002}, // 79,
	{0.066000, 0.071000, 0.003000, 0.000000, 0.000000, 0.900000, 1.087998, 1.316008, 1.136003}, // 80,
	{0.066000, 0.071000, 0.003000, 0.000000, 0.000000, 0.900000, 1.087998, 1.316008, 1.136003}, // 81,
	{0.066000, 0.071000, 0.003000, 0.000000, 0.000000, 0.900000, 1.087998, 1.316008, 0.966002}, // 82,
	{0.066000, 0.049000, 0.003000, 0.000000, 0.000000, 0.900000, 1.087998, 1.316008, 0.966002}, // 83,
	{0.066000, 0.049000, 0.003000, 0.000000, 0.000000, 0.900000, 1.087998, 1.316008, 0.966002}, // 84,
	{0.100000, 0.085000, 0.003000, 0.000000, 0.000000, 0.900000, 1.087998, 1.316008, 0.966002}, // 85,
	{0.053000, 0.039000, 0.003000, 0.000000, 0.000000, 0.900000, 1.192999, 1.316008, 1.194003}, // 86,
	{0.088000, 0.089000, 0.006000, 0.000000, 0.000000, 0.900000, 1.089998, 1.249009, 0.979003}, // 87,
	{-0.021999, 0.045000, 0.006000, 0.000000, 0.000000, 0.900000, 1.089998, 1.369009, 0.979003}, // 88,
	{-0.021999, 0.045000, 0.006000, 0.000000, 0.000000, 0.900000, 1.089998, 1.372009, 0.979003}, // 89,
	{0.079000, 0.067000, 0.006000, 0.000000, 0.000000, 0.900000, 1.089998, 1.372009, 0.979003}, // 90,
	{0.079000, 0.067000, 0.006000, 0.000000, 0.000000, 0.900000, 1.089998, 1.372009, 0.979003}, // 91,
	{0.079000, 0.067000, 0.006000, 0.000000, 0.000000, 0.900000, 1.089998, 1.372009, 0.979003}, // 92,
	{0.079000, 0.050000, 0.006000, 0.000000, 0.000000, 0.900000, 1.089998, 1.115009, 0.979003}, // 93,
	{0.003000, 0.050000, 0.006000, 0.000000, 0.000000, 0.900000, 1.089998, 1.115009, 0.979003}, // 94,
	{0.003000, 0.071000, -0.017000, 0.000000, 0.000000, 0.900000, 1.089998, 1.208010, 0.934002}, // 95,
	{0.097000, 0.050000, 0.005000, 0.000000, 0.000000, 0.900000, 1.111998, 1.324010, 1.045002}, // 96,
	{0.034000, 0.050000, 0.005000, 0.000000, 0.000000, 0.900000, 1.111998, 1.324010, 1.045002}, // 97,
	{0.043000, 0.050000, 0.005000, 0.000000, 0.000000, 0.900000, 1.111998, 1.324010, 1.045002}, // 98,
	{0.113000, 0.050000, 0.005000, 0.000000, 0.000000, 0.900000, 1.111998, 1.324010, 1.045002}, // 99,
	{0.062000, 0.050000, -0.006999, 0.000000, 0.000000, 0.900000, 1.111998, 1.324010, 1.045002}, // 100,
	{0.074000, 0.024000, 0.004000, 0.000000, 0.000000, 0.900000, 1.111998, 1.430010, 1.149003}, // 101,
	{0.075000, 0.040000, 0.004000, 0.000000, 0.000000, 0.900000, 1.111998, 1.430010, 1.149003}, // 102,
	{0.037000, 0.044000, 0.004000, 0.000000, 0.000000, 0.900000, 1.365998, 1.678010, 1.373003}, // 103,
	{0.016000, 0.044000, 0.004000, 0.000000, 0.000000, 0.900000, 1.168999, 1.678010, 1.203002}, // 104,
	{0.076000, 0.044000, 0.004000, 0.000000, 0.000000, 0.900000, 1.168999, 1.763011, 1.537003}, // 105,
	{0.054000, 0.044000, -0.000999, 0.000000, 0.000000, 0.900000, 1.060998, 1.277011, 1.245003}, // 106,
	{0.062000, 0.044000, -0.000999, 0.000000, 0.000000, 0.900000, 1.060998, 1.366011, 1.176005}, // 107,
	{0.062000, 0.044000, -0.000999, 0.000000, 0.000000, 0.900000, 1.060998, 1.191011, 0.992004}, // 108,
	{0.062000, 0.044000, -0.000999, 0.000000, 0.000000, 0.900000, 1.060998, 1.281013, 1.047005}, // 109,
	{0.047000, 0.044000, -0.000999, 0.000000, 0.000000, 0.900000, 1.136999, 1.376014, 1.070005}, // 110,
	{0.047000, 0.044000, -0.000999, 0.000000, 0.000000, 0.900000, 1.136999, 1.560014, 1.185006}, // 111,
	{0.047000, 0.044000, -0.000999, 0.000000, 0.000000, 0.900000, 0.975999, 1.444015, 1.131006}, // 112,
	{0.040000, 0.053000, -0.000999, 0.000000, 0.000000, 0.900000, 1.131999, 1.444015, 1.131006}, // 113,
	{0.040000, 0.053000, -0.000999, 0.000000, 0.000000, 0.900000, 1.131999, 1.444015, 1.131006}, // 114,
	{0.040000, 0.053000, -0.000999, 0.000000, 0.000000, 0.900000, 1.131999, 1.444015, 1.131006}, // 115,
	{0.040000, 0.053000, -0.000999, 0.000000, 0.000000, 0.900000, 1.131999, 1.444015, 1.131006}, // 116,
	{0.040000, 0.053000, -0.000999, 0.000000, 0.000000, 0.900000, 1.131999, 1.444015, 1.131006}, // 117,
	{0.040000, 0.053000, -0.000999, 0.000000, 0.000000, 0.900000, 1.131999, 1.444015, 1.131006}, // 118,
	{0.040000, 0.070000, -0.000999, 0.000000, 0.000000, 0.900000, 1.131999, 1.339014, 1.255006}, // 119,
	{0.040000, 0.070000, -0.000999, 0.000000, 0.000000, 0.900000, 1.131999, 1.339014, 1.255006}, // 120,
	{0.053000, 0.040000, 0.012000, 0.000000, 0.000000, 0.900000, 1.131999, 1.339014, 1.255006}, // 121,
	{0.053000, 0.040000, 0.003000, 0.000000, 0.000000, 0.900000, 1.131999, 1.208014, 0.963006}, // 122,
	{0.053000, 0.077000, 0.003000, 0.000000, 0.000000, 0.900000, 1.131999, 1.455013, 1.119006}, // 123,
	{0.053000, 0.077000, 0.003000, 0.000000, 0.000000, 0.900000, 1.131999, 1.356013, 1.119006}, // 124,
	{0.053000, 0.077000, 0.003000, 0.000000, 0.000000, 0.900000, 1.131999, 1.356013, 1.119006}, // 125,
	{0.065000, 0.057000, 0.003000, 0.000000, 0.000000, 0.900000, 1.131999, 1.356013, 1.119006}, // 126,
	{0.065000, 0.085000, -0.002999, 0.000000, 0.000000, 0.900000, 1.131999, 1.627014, 1.211007}, // 127,
	{0.065000, 0.085000, -0.009999, 0.000000, 0.000000, 0.900000, 1.131999, 1.196015, 1.034007}, // 128,
	{-0.038999, 0.085000, -0.009999, 0.000000, 0.000000, 0.900000, 1.131999, 1.196015, 1.034007}, // 129,
	{-0.013999, 0.086000, -0.009999, 0.000000, 0.000000, 0.900000, 1.131999, 1.456015, 1.034007}, // 130,
	{0.133000, 0.078000, -0.009999, 0.000000, 0.000000, 0.900000, 0.887999, 1.213015, 1.035007}, // 131,
	{0.049000, 0.078000, -0.006999, 0.000000, 0.000000, 0.900000, 0.887999, 1.213015, 0.924007}, // 132,
	{0.079000, 0.078000, 0.008000, 0.000000, 0.000000, 0.900000, 0.988999, 1.213015, 0.924007}, // 133,
	{0.011000, 0.035000, 0.008000, 0.000000, 0.000000, 0.900000, 0.988999, 1.213015, 0.924007}, // 134,
	{0.001000, 0.035000, 0.006000, 0.000000, 0.000000, 0.900000, 1.329999, 1.547015, 1.328006}, // 135,
	{0.024000, 0.035000, 0.002000, 0.000000, 0.000000, 0.900000, 1.055000, 1.046015, 0.998006}, // 136,
	{0.042000, 0.035000, 0.002000, 0.000000, 0.000000, 0.900000, 1.055000, 1.046015, 0.902006}, // 137,
	{0.117999, 0.094000, 0.002000, 0.000000, 0.000000, 0.900000, 0.951000, 1.285014, 0.902006}, // 138,
	{0.117999, 0.094000, 0.002000, 0.000000, 0.000000, 0.900000, 0.951000, 1.285014, 0.902006}, // 139,
	{0.117999, 0.094000, 0.002000, 0.000000, 0.000000, 0.900000, 0.951000, 1.285014, 0.902006}, // 140,
	{0.110999, 0.045000, 0.002000, 0.000000, 0.000000, 0.900000, 0.951000, 1.036014, 0.902006}, // 141,
	{0.071000, 0.045000, 0.002000, 0.000000, 0.000000, 0.900000, 1.033000, 1.222015, 1.221006}, // 142,
	{0.043000, 0.045000, 0.002000, 0.000000, 0.000000, 0.900000, 1.123000, 1.222015, 1.221006}, // 143,
	{0.043000, 0.045000, 0.002000, 0.000000, 0.000000, 0.900000, 1.123000, 1.515014, 1.221006}, // 144,
	{0.095999, 0.045000, 0.002000, 0.000000, 0.000000, 0.900000, 1.123000, 1.515014, 1.221006}, // 145,
	{0.095999, 0.045000, 0.002000, 0.000000, 0.000000, 0.900000, 1.021000, 1.515014, 0.978006}, // 146,
	{0.095999, 0.045000, 0.019000, 0.000000, 0.000000, 0.900000, 1.021000, 1.085014, 1.081007}, // 147,
	{0.095999, 0.045000, 0.019000, 0.000000, 0.000000, 0.900000, 1.021000, 1.085014, 1.081007}, // 148,
	{0.046000, 0.045000, -0.001000, 0.000000, 0.000000, 0.900000, 1.158000, 1.783015, 1.296007}, // 149,
	{0.086999, 0.045000, -0.001000, 0.000000, 0.000000, 0.900000, 0.955000, 1.187015, 0.953007}, // 150,
	{0.086999, 0.118000, -0.001000, 0.000000, 0.000000, 0.900000, 0.955000, 1.462015, 0.953007}, // 151,
	{0.086999, 0.058000, 0.015000, 0.000000, 0.000000, 0.900000, 0.955000, 1.256014, 0.953007}, // 152,
	{0.086999, 0.058000, -0.005000, 0.000000, 0.000000, 0.900000, 0.955000, 1.256014, 0.953007}, // 153,
	{0.086999, 0.058000, -0.005000, 0.000000, 0.000000, 0.900000, 0.955000, 1.256014, 0.953007}, // 154,
	{0.062000, 0.058000, -0.005000, 0.000000, 0.000000, 0.900000, 1.075000, 1.574015, 1.209007}, // 155,
	{0.062000, 0.058000, -0.005000, 0.000000, 0.000000, 0.900000, 1.075000, 1.199015, 1.076007}, // 156,
	{0.095000, 0.058000, 0.002999, 0.000000, 0.000000, 0.900000, 1.075000, 1.353016, 0.975006}, // 157,
	{0.095000, 0.058000, 0.002999, 0.000000, 0.000000, 0.900000, 1.075000, 1.353016, 0.975006}, // 158,
	{0.095000, 0.058000, 0.002999, 0.000000, 0.000000, 0.900000, 1.075000, 1.353016, 0.975006}, // 159,
	{0.076999, 0.058000, 0.002999, 0.000000, 0.000000, 0.900000, 1.075000, 1.353016, 0.975006}, // 160,
	{0.076999, 0.058000, 0.002999, 0.000000, 0.000000, 0.900000, 1.075000, 1.353016, 0.975006}, // 161,
	{0.066999, 0.058000, 0.002999, 0.000000, 0.000000, 0.900000, 1.075000, 1.353016, 0.975006}, // 162,
	{0.086999, 0.058000, -0.009000, 0.000000, 0.000000, 0.900000, 1.075000, 1.353016, 1.072007}, // 163,
	{0.086999, 0.058000, -0.009000, 0.000000, 0.000000, 0.900000, 1.075000, 1.426016, 1.125007}, // 164,
	{0.005999, 0.058000, -0.007000, 0.000000, 0.000000, 0.900000, 1.075000, 1.426016, 1.125007}, // 165,
	{0.005999, 0.058000, -0.007000, 0.000000, 0.000000, 0.900000, 1.075000, 1.426016, 1.125007}, // 166,
	{0.054999, 0.058000, -0.007000, 0.000000, 0.000000, 0.900000, 1.075000, 1.426016, 1.125007}, // 167,
	{0.054999, 0.058000, -0.007000, 0.000000, 0.000000, 0.900000, 1.075000, 1.426016, 1.148008}, // 168,
	{0.073999, 0.058000, -0.007000, 0.000000, 0.000000, 0.900000, 0.935000, 1.426016, 0.913008}, // 169,
	{0.073000, 0.058000, -0.007000, 0.000000, 0.000000, 0.900000, 1.027000, 1.426016, 1.051008}, // 170,
	{0.073000, 0.058000, 0.004999, 0.000000, 0.000000, 0.900000, 1.027000, 1.426016, 1.051008}, // 171,
	{0.085000, 0.058000, 0.004999, 0.000000, 0.000000, 0.900000, 1.027000, 1.272016, 0.848007}, // 172,
	{0.085000, 0.058000, 0.004999, 0.000000, 0.000000, 0.900000, 1.027000, 1.272016, 1.042007}, // 173,
	{0.085000, 0.058000, 0.004999, 0.000000, 0.000000, 0.900000, 1.027000, 1.272016, 1.042007}, // 174,
	{0.085000, 0.058000, -0.000000, 0.000000, 0.000000, 0.900000, 1.027000, 1.272016, 1.095007}, // 175,
	{0.060000, 0.037000, 0.001999, 0.000000, 0.000000, 0.900000, 1.157000, 1.379016, 1.221009}, // 176,
	{0.060000, 0.037000, 0.001999, 0.000000, 0.000000, 0.900000, 1.157000, 1.379016, 1.221009}, // 177,
	{0.071000, 0.068000, 0.001999, 0.000000, 0.000000, 0.900000, 1.157000, 1.343017, 1.009008}, // 178,
	{0.057000, 0.068000, -0.016000, 0.000000, 0.000000, 0.900000, 1.157000, 1.343017, 1.009008}, // 179,
	{0.037000, 0.068000, -0.005000, 0.000000, 0.000000, 0.900000, 1.157000, 1.507017, 1.074008}, // 180,
	{0.051000, 0.068000, -0.005000, 0.000000, 0.000000, 0.900000, 1.157000, 1.343017, 1.074008}, // 181,
	{0.024000, 0.068000, -0.005000, 0.000000, 0.000000, 0.900000, 1.157000, 1.343017, 1.165009}, // 182,
	{0.024000, 0.068000, 0.009999, 0.000000, 0.000000, 0.900000, 1.157000, 1.343017, 1.165009}, // 183,
	{0.044000, 0.044000, 0.000999, 0.000000, 0.000000, 0.900000, 1.157000, 1.343017, 1.153010}, // 184,
	{0.044000, 0.044000, 0.000999, 0.000000, 0.000000, 0.900000, 1.157000, 1.343017, 1.155010}, // 185,
	{0.044000, 0.044000, -0.004000, 0.000000, 0.000000, 0.900000, 1.157000, 1.343017, 1.100011}, // 186,
	{0.044000, 0.079000, -0.006000, 0.000000, 0.000000, 0.900000, 1.157000, 1.214017, 1.183011}, // 187,
	{0.044000, 0.046000, -0.013000, 0.000000, 0.000000, 0.900000, 1.157000, 1.214017, 0.975011}, // 188,
	{0.044000, 0.046000, -0.007000, 0.000000, 0.000000, 0.900000, 1.157000, 1.214017, 1.078011}, // 189,
	{0.065000, 0.052000, -0.007000, 0.000000, 0.000000, 0.900000, 1.157000, 1.440017, 1.078011}, // 190,
	{0.096000, 0.052000, 0.003999, 0.000000, 0.000000, 0.900000, 1.018000, 1.116017, 0.842010}, // 191,
	{0.096000, 0.075000, 0.003999, 0.000000, 0.000000, 0.900000, 1.018000, 1.116017, 0.842010}, // 192,
	{0.096000, 0.059000, 0.003999, 0.000000, 0.000000, 0.900000, 1.018000, 1.116017, 0.842010}, // 193,
	{0.096000, 0.059000, 0.003999, 0.000000, 0.000000, 0.900000, 1.018000, 1.116017, 0.842010}, // 194,
	{0.096000, 0.068000, 0.003999, 0.000000, 0.000000, 0.900000, 1.018000, 1.116017, 0.909010}, // 195,
	{-0.007999, 0.068000, 0.003999, 0.000000, 0.000000, 0.900000, 1.018000, 1.116017, 0.909010}, // 196,
	{0.028000, 0.085000, 0.012999, 0.000000, 0.000000, 0.900000, 0.980000, 1.394018, 1.078010}, // 197,
	{0.092000, 0.072000, 0.012999, 0.000000, 0.000000, 0.900000, 0.980000, 1.209018, 1.078010}, // 198,
	{0.013000, 0.084000, 0.012999, 0.000000, 0.000000, 0.900000, 0.980000, 1.463018, 1.078010}, // 199,
	{0.089000, 0.045000, 0.012999, 0.000000, 0.000000, 0.900000, 0.980000, 1.178018, 1.078010}, // 200,
	{0.089000, 0.083000, 0.012999, 0.000000, 0.000000, 0.900000, 0.980000, 1.178018, 1.078010}, // 201,
	{0.089000, 0.051000, 0.012999, 0.000000, 0.000000, 0.900000, 0.980000, 1.178018, 1.078010}, // 202,
	{0.034000, 0.051000, 0.012999, 0.000000, 0.000000, 0.900000, 1.268000, 1.178018, 1.181010}, // 203,
	{0.034000, 0.051000, 0.012999, 0.000000, 0.000000, 0.900000, 1.268000, 1.178018, 1.181010}, // 204,
	{0.034000, 0.085000, 0.012999, 0.000000, 0.000000, 0.900000, 1.268000, 1.431018, 1.267010}, // 205,
	{0.099000, 0.056000, -0.000000, 0.000000, 0.000000, 0.900000, 0.965001, 1.133017, 0.901011}, // 206,
	{0.099000, 0.073000, 0.008999, 0.000000, 0.000000, 0.900000, 0.965001, 1.328020, 0.901011}, // 207,
	{0.062000, 0.040000, 0.008999, 0.000000, 0.000000, 0.900000, 1.012001, 1.244020, 1.086010}, // 208,
	{0.051000, 0.040000, 0.008999, 0.000000, 0.000000, 0.900000, 0.849002, 1.244020, 1.086010}, // 209,
	{0.051000, 0.040000, -0.002000, 0.000000, 0.000000, 0.900000, 0.849002, 1.071021, 0.962010}, // 210,
	{0.099000, 0.043000, 0.006999, 0.000000, 0.000000, 0.900000, 0.969001, 1.071021, 0.962010}, // 211,
	{0.011000, 0.043000, -0.013000, 0.000000, 0.000000, 0.900000, 0.969001, 1.071021, 0.922011}, // 212,
	{0.082000, 0.059000, -0.004000, 0.000000, 0.000000, 0.900000, 0.969001, 1.332021, 1.185012}, // 213,
	{0.082000, 0.059000, -0.004000, 0.000000, 0.000000, 0.900000, 0.969001, 1.332021, 1.185012}, // 214,
	{0.082000, 0.059000, -0.004000, 0.000000, 0.000000, 0.900000, 0.943001, 1.332021, 0.955012}, // 215,
	{0.082000, 0.059000, -0.004000, 0.000000, 0.000000, 0.900000, 0.943001, 1.332021, 0.955012}, // 216,
	{0.082000, 0.059000, -0.004000, 0.000000, 0.000000, 0.900000, 0.943001, 1.332021, 0.955012}, // 217,
	{0.035000, 0.059000, -0.004000, 0.000000, 0.000000, 0.900000, 0.943001, 1.332021, 0.955012}, // 218,
	{0.090000, 0.059000, -0.004000, 0.000000, 0.000000, 0.900000, 0.943001, 1.332021, 0.955012}, // 219,
	{0.048000, 0.059000, -0.004000, 0.000000, 0.000000, 0.900000, 1.050001, 1.332021, 1.071013}, // 220,
	{0.048000, 0.059000, -0.014000, 0.000000, 0.000000, 0.900000, 1.091002, 1.332021, 1.071013}, // 221,
	{0.048000, 0.059000, -0.014000, 0.000000, 0.000000, 0.900000, 1.091002, 1.332021, 1.071013}, // 222,
	{0.048000, 0.059000, -0.007000, 0.000000, 0.000000, 0.900000, 1.091002, 1.332021, 1.157013}, // 223,
	{0.060000, 0.059000, 0.003999, 0.000000, 0.000000, 0.900000, 1.091002, 1.332021, 0.958013}, // 224,
	{0.060000, 0.059000, 0.003999, 0.000000, 0.000000, 0.900000, 1.091002, 1.332021, 0.958013}, // 225,
	{0.060000, 0.059000, 0.003999, 0.000000, 0.000000, 0.900000, 1.091002, 1.332021, 0.958013}, // 226,
	{0.073000, 0.059000, -0.009000, 0.000000, 0.000000, 0.900000, 1.091002, 1.350022, 1.052014}, // 227,
	{0.073000, 0.059000, -0.009000, 0.000000, 0.000000, 0.900000, 1.091002, 1.350022, 1.097014}, // 228,
	{0.028000, 0.073000, -0.000000, 0.000000, 0.000000, 0.900000, 1.012002, 1.135022, 1.023014}, // 229,
	{0.046000, 0.073000, -0.000000, 0.000000, 0.000000, 0.900000, 1.012002, 1.135022, 1.023014}, // 230,
	{-0.005999, 0.073000, -0.000000, 0.000000, 0.000000, 0.900000, 1.012002, 1.295022, 1.023014}, // 231,
	{-0.005999, 0.116000, -0.000000, 0.000000, 0.000000, 0.900000, 1.012002, 1.396023, 1.023014}, // 232,
	{0.088000, 0.046000, -0.000000, 0.000000, 0.000000, 0.900000, 1.012002, 1.082023, 1.023014}, // 233,
	{0.025000, 0.046000, 0.000999, 0.000000, 0.000000, 0.900000, 1.012002, 1.209023, 0.954013}, // 234,
	{0.025000, 0.046000, 0.000999, 0.000000, 0.000000, 0.900000, 1.012002, 1.209023, 0.954013}, // 235,
	{0.025000, 0.046000, -0.011000, 0.000000, 0.000000, 0.900000, 1.012002, 1.209023, 0.954013}, // 236,
	{0.078000, 0.078000, -0.011000, 0.000000, 0.000000, 0.900000, 1.012002, 1.209023, 0.954013}, // 237,
	{0.096000, 0.095000, -0.003000, 0.000000, 0.000000, 0.900000, 1.012002, 1.488024, 0.954013}, // 238,
	{0.103000, 0.058000, -0.003000, 0.000000, 0.000000, 0.900000, 1.012002, 1.252025, 1.176014}, // 239,
	{0.062000, 0.058000, -0.003000, 0.000000, 0.000000, 0.900000, 1.040002, 1.252025, 0.978014}, // 240,
	{0.062000, 0.058000, -0.003000, 0.000000, 0.000000, 0.900000, 1.078003, 1.513025, 1.271014}, // 241,
	{0.062000, 0.058000, -0.003000, 0.000000, 0.000000, 0.900000, 1.078003, 1.513025, 1.271014}, // 242,
	{0.062000, 0.058000, -0.003000, 0.000000, 0.000000, 0.900000, 1.048002, 1.281025, 0.908014}, // 243,
	{0.081000, 0.082000, -0.003000, 0.000000, 0.000000, 0.900000, 1.048002, 1.281025, 0.908014}, // 244,
	{0.072000, 0.088000, -0.003000, 0.000000, 0.000000, 0.900000, 1.048002, 1.397026, 1.231014}, // 245,
	{0.107000, 0.070000, -0.003000, 0.000000, 0.000000, 0.900000, 0.942002, 1.660027, 1.007013}, // 246,
	{0.048000, 0.070000, -0.003000, 0.000000, 0.000000, 0.900000, 1.105002, 1.378027, 1.007013}, // 247,
	{0.048000, 0.070000, -0.003000, 0.000000, 0.000000, 0.900000, 1.105002, 1.378027, 1.007013}, // 248,
	{0.048000, 0.070000, 0.002999, 0.000000, 0.000000, 0.900000, 1.105002, 1.414027, 1.241014}, // 249,
	{0.048000, 0.070000, 0.002999, 0.000000, 0.000000, 0.900000, 1.105002, 1.364025, 1.119013}, // 250,
	{0.048000, 0.070000, 0.002999, 0.000000, 0.000000, 0.900000, 1.134003, 1.389026, 1.011013}, // 251,
	{0.055000, 0.070000, 0.002999, 0.000000, 0.000000, 0.900000, 1.134003, 1.389026, 1.011013}, // 252,
	{0.008000, 0.070000, 0.002999, 0.000000, 0.000000, 0.900000, 1.134003, 1.389026, 1.011013}, // 253,
	{0.050000, 0.070000, 0.002999, 0.000000, 0.000000, 0.900000, 1.134003, 1.389026, 1.011013}, // 254,
	{0.050000, 0.070000, 0.002999, 0.000000, 0.000000, 0.900000, 1.134003, 1.389026, 1.011013}, // 255,
	{0.065000, 0.084000, 0.002999, 0.000000, 0.000000, 0.900000, 1.134003, 1.389026, 1.011013}, // 256,
	{0.065000, 0.084000, 0.002999, 0.000000, 0.000000, 0.900000, 1.134003, 1.389026, 1.011013}, // 257,
	{0.065000, 0.045000, 0.002999, 0.000000, 0.000000, 0.900000, 1.134003, 1.655026, 1.341014}, // 258,
	{0.065000, 0.045000, -0.006000, 0.000000, 0.000000, 0.900000, 1.134003, 1.655026, 1.373014}, // 259,
	{0.065000, 0.037000, -0.006000, 0.000000, 0.000000, 0.900000, 1.134003, 1.357027, 0.984014}, // 260,
	{0.020000, 0.037000, -0.017000, 0.000000, 0.000000, 0.900000, 0.979003, 1.357027, 0.883015}, // 261,
	{0.086000, 0.037000, -0.009000, 0.000000, 0.000000, 0.900000, 0.979003, 1.357027, 1.186014}, // 262,
	{0.091000, 0.047000, 0.003999, 0.000000, 0.000000, 0.900000, 0.979003, 1.126027, 0.861014}, // 263,
	{0.091000, 0.047000, 0.003999, 0.000000, 0.000000, 0.900000, 1.005003, 1.433027, 1.148014}, // 264,
	{0.058000, 0.047000, 0.002999, 0.000000, 0.000000, 0.900000, 1.111003, 1.248027, 1.064015}, // 265,
	{0.018000, 0.047000, 0.002999, 0.000000, 0.000000, 0.900000, 1.111003, 1.248027, 1.110015}, // 266,
	{0.254000, 0.047000, -0.003000, 0.000000, 0.000000, 0.900000, 1.111003, 1.248027, 1.110015}, // 267,
	{0.057000, 0.047000, -0.003000, 0.000000, 0.000000, 0.900000, 1.111003, 1.248027, 1.110015}, // 268,
	{0.057000, 0.033000, -0.020000, 0.000000, 0.000000, 0.900000, 1.111003, 1.627027, 1.336015}, // 269,
	{0.064000, 0.046000, -0.010000, 0.000000, 0.000000, 0.900000, 1.111003, 1.304027, 1.089015}, // 270,
	{0.064000, 0.046000, -0.009000, 0.000000, 0.000000, 0.900000, 1.111003, 1.304027, 1.134016}, // 271,
	{0.064000, 0.046000, -0.009000, 0.000000, 0.000000, 0.900000, 1.111003, 1.430027, 1.247016}, // 272,
	{0.064000, 0.046000, -0.009000, 0.000000, 0.000000, 0.900000, 1.031003, 1.430027, 1.074016}, // 273,
	{0.074000, 0.046000, -0.009000, 0.000000, 0.000000, 0.900000, 1.031003, 1.430027, 1.074016}, // 274,
	{0.074000, 0.046000, -0.000000, 0.000000, 0.000000, 0.900000, 1.031003, 1.430027, 1.074016}, // 275,
	{0.074000, 0.046000, -0.000000, 0.000000, 0.000000, 0.900000, 1.031003, 1.430027, 1.074016}, // 276,
	{0.088000, 0.046000, -0.000000, 0.000000, 0.000000, 0.900000, 1.198004, 1.588027, 1.402017}, // 277,
	{0.088000, 0.046000, -0.000000, 0.000000, 0.000000, 0.900000, 1.198004, 1.588027, 1.402017}, // 278,
	{0.088000, 0.046000, -0.000000, 0.000000, 0.000000, 0.900000, 1.198004, 1.588027, 1.402017}, // 279,
	{0.072000, 0.040000, -0.000000, 0.000000, 0.000000, 0.900000, 1.026004, 1.256027, 1.080017}, // 280,
	{0.072000, 0.040000, -0.000000, 0.000000, 0.000000, 0.900000, 1.026004, 1.256027, 1.080017}, // 281,
	{0.072000, 0.040000, -0.000000, 0.000000, 0.000000, 0.900000, 1.026004, 1.256027, 1.080017}, // 282,
	{0.072000, 0.040000, -0.000000, 0.000000, 0.000000, 0.900000, 1.026004, 1.256027, 1.080017}, // 283,
	{0.072000, 0.054000, -0.000000, 0.000000, 0.000000, 0.900000, 1.026004, 1.256027, 1.080017}, // 284,
	{0.072000, 0.054000, -0.000000, 0.000000, 0.000000, 0.900000, 1.026004, 1.256027, 1.080017}, // 285,
	{0.072000, 0.054000, -0.000000, 0.000000, 0.000000, 0.900000, 1.026004, 1.256027, 1.161017}, // 286,
	{0.069000, 0.067000, 0.006999, 0.000000, 0.000000, 0.900000, 1.087004, 1.214027, 1.085017}, // 287,
	{0.069000, 0.056000, 0.006999, 0.000000, 0.000000, 0.900000, 1.087004, 1.214027, 1.085017}, // 288,
	{0.069000, 0.056000, 0.006999, 0.000000, 0.000000, 0.900000, 1.087004, 1.214027, 1.176018}, // 289,
	{0.069000, 0.056000, 0.006999, 0.000000, 0.000000, 0.900000, 1.087004, 1.214027, 1.176018}, // 290,
	{0.069000, 0.020000, -0.007000, 0.000000, 0.000000, 0.900000, 1.087004, 1.214027, 1.134018}, // 291,
	{0.069000, 0.020000, -0.007000, 0.000000, 0.000000, 0.900000, 1.087004, 1.214027, 1.030017}, // 292,
	{0.069000, 0.039000, -0.007000, 0.000000, 0.000000, 0.900000, 1.087004, 1.214027, 1.030017}, // 293,
	{0.069000, 0.039000, -0.007000, 0.000000, 0.000000, 0.900000, 1.087004, 1.214027, 1.030017}, // 294,
	{-0.009999, 0.039000, -0.007000, 0.000000, 0.000000, 0.900000, 1.087004, 1.214027, 1.169018}, // 295,
	{-0.000999, 0.039000, 0.006999, 0.000000, 0.000000, 0.900000, 1.087004, 1.214027, 1.223019}, // 296,
	{0.014000, 0.039000, 0.006999, 0.000000, 0.000000, 0.900000, 1.177004, 1.214027, 1.247019}, // 297,
	{0.105000, 0.039000, 0.006999, 0.000000, 0.000000, 0.900000, 0.930004, 1.214027, 0.916019}, // 298,
	{0.102000, 0.036000, -0.002000, 0.000000, 0.000000, 0.900000, 0.999004, 1.454027, 1.201019} // 299,
};
// --======[ Coordenadas de accesorios para los 300 skins ]======--- //

new Float:POS_Accesorio_Casco[300][9] =
{
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 0 || MotorcycleHelmet1 - NO
	{ 0.063893, 0.008419, 0.000000, 69.264198, 87.430633, 11.827832, 1.000000, 1.000000, 1.000000 }, // SKINID 1 || MotorcycleHelmet1 - SI
	{ 0.082401, 0.010075, 0.000000, 0.000000, 78.229309, 99.866622, 1.330634, 1.000000, 1.099319 }, // SKINID 2 || MotorcycleHelmet1 - SI
	{ 0.082401, 0.012487, 0.000000, 0.000000, 81.798553, 77.744796, 1.000000, 1.000000, 1.000000 }, // SKINID 3 || MotorcycleHelmet1 - SI
	{ 0.082401, 0.012487, 0.000000, 0.000000, 81.798553, 77.744796, 1.000000, 1.000000, 1.000000 }, // SKINID 4 || MotorcycleHelmet1 - SI
	{ 0.082401, 0.012487, 0.000000, 0.000000, 81.798553, 77.744796, 1.000000, 1.000000, 1.000000 }, // SKINID 5 || MotorcycleHelmet1 - SI
	{0.082401, 0.012487, 0.000000, 0.000000, 81.798553, 77.744796, 1.000000, 1.000000, 1.000000 }, // SKINID 6 || MotorcycleHelmet1 - SI
	{ 0.064673, 0.033285, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 7 || MotorcycleHelmet1 - SI
	{ 0.064673, 0.033285, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 8 || MotorcycleHelmet1 - NO
	{ 0.046243, 0.024402, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 9 || MotorcycleHelmet1 - SI
	{ 0.046243, 0.024402, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 10 || MotorcycleHelmet1 - SI
	{ 0.046243, 0.024402, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 11 || MotorcycleHelmet1 - SI
	{ 0.036347, 0.011780, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 12 || MotorcycleHelmet1 - SI
	{ 0.025228, 0.011780, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 13 || MotorcycleHelmet1 - SI
	{ 0.069039, 0.033799, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 14 || MotorcycleHelmet1 - SI
	{ 0.045800, -0.005477, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 15 || MotorcycleHelmet1 - SI
	{ 0.082179, 0.025758, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 16 || MotorcycleHelmet1 - SI
	{ 0.082179, 0.025758, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 17 || MotorcycleHelmet1 - SI
	{ 0.043310, 0.025758, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 18 || MotorcycleHelmet1 - SI
	{ 0.076837, 0.025758, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 19 || MotorcycleHelmet1 - SI
	{ 0.076837, 0.025758, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 20 || MotorcycleHelmet1 - SI
	{ 0.076837, 0.025758, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 21 || MotorcycleHelmet1 - SI
	{ 0.076837, 0.025758, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 22 || MotorcycleHelmet1 - SI
	{ 0.081527, 0.015231, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 23 || MotorcycleHelmet1 - SI
	{ 0.081527, 0.022255, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 24 || MotorcycleHelmet1 - SI
	{ 0.081527, 0.022255, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 25 || MotorcycleHelmet1 - SI
	{ 0.081527, 0.022255, 0.000000, 0.000000, 81.798553, 77.744796, 1.083757, 1.000000, 1.000000 }, // SKINID 26 || MotorcycleHelmet1 - SI
	{ 0.089542, 0.022255, 0.000000, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 27 || MotorcycleHelmet1 - SI
	{ 0.089542, 0.022255, 0.000000, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 28 || MotorcycleHelmet1 - SI
	{ 0.0, 0.022255, 0.000000, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 29 || MotorcycleHelmet1 - NO
	{ 0.065071, 0.022255, 0.000000, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 30 || MotorcycleHelmet1 - SI
	{ 0.0, 0.022255, 0.000000, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 31 || MotorcycleHelmet1 - NO
	{ 0.028938, 0.022255, 0.000000, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 32 || MotorcycleHelmet1 - SI
	{ -0.000755, 0.005750, 0.000000, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 33 || MotorcycleHelmet1 - SI
	{ 0.096637, 0.028542, 0.000000, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 34 || MotorcycleHelmet1 - SI
	{ 0.084942, 0.028542, 0.000821, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 35 || MotorcycleHelmet1 - SI
	{ 0.084942, 0.028542, 0.000821, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 36 || MotorcycleHelmet1 - SI
	{ 0.084942, 0.028542, 0.000821, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 37 || MotorcycleHelmet1 - SI
	{ 0.084942, 0.043490, 0.000821, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 38 || MotorcycleHelmet1 - SI
	{ 0.084942, 0.043490, 0.000821, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 39 || MotorcycleHelmet1 - SI
	{ 0.047616, -0.011005, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 40 || MotorcycleHelmet1 - SI
	{ 0.073332, 0.003941, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 41 || MotorcycleHelmet1 - SI
	{ 0.073332, 0.003941, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 42 || MotorcycleHelmet1 - NO
	{ 0.040072, 0.003941, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 43 || MotorcycleHelmet1 - SI
	{ 0.040072, 0.003941, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 44 || MotorcycleHelmet1 - SI
	{ 0.040072, 0.003941, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 45 || MotorcycleHelmet1 - SI
	{ 0.075100, 0.026033, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 46 || MotorcycleHelmet1 - SI
	{ 0.075100, 0.026033, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 47 || MotorcycleHelmet1 - SI
	{ 0.079862, 0.026033, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 48 || MotorcycleHelmet1 - SI
	{ 0.079862, 0.026033, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 49 || MotorcycleHelmet1 - SI
	{ 0.071502, -0.010506, 0.000000, 89.715873, 96.486831, 6.367833, 1.220247, 1.000000, 1.000000 }, // SKINID 50 || MotorcycleHelmet1 - SI.
	{ 0.094900, -0.000822, 0.000000, 89.715873, 96.486831, 6.367833, 1.156256, 1.000000, 1.000000 }, // SKINID 51 || MotorcycleHelmet1 - SI.
	{ 0.094900, -0.000822, 0.000000, 89.715873, 96.486831, 6.367833, 1.156256, 1.000000, 1.000000 }, // SKINID 52 || MotorcycleHelmet1 - SI.
	{ 0.070367, 0.047601, -0.003702, 89.715873, 96.486831, 6.367833, 1.006050, 1.000000, 1.000000 }, // SKINID 53 || MotorcycleHelmet1 - SI.
	{ 0.070367, 0.047601, -0.003702, 89.715873, 96.486831, 6.367833, 1.006050, 1.000000, 1.000000 }, // SKINID 54 || MotorcycleHelmet1 - SI.
	{ 0.070367, 0.003330, -0.003702, 89.715873, 96.486831, 6.367833, 1.206298, 1.000000, 0.968946 }, // SKINID 55 || MotorcycleHelmet1 - SI.
	{ 0.070367, 0.003330, -0.003702, 89.715873, 96.486831, 6.367833, 1.206298, 1.000000, 0.968946 }, // SKINID 56 || MotorcycleHelmet1 - SI.
	{ 0.089573, 0.026238, -0.003702, 89.715873, 96.486831, 6.367833, 0.950863, 1.000000, 0.981081 }, // SKINID 57 || MotorcycleHelmet1 - SI
	{ 0.037543, 0.015802, -0.003702, 89.715873, 96.486831, 6.367833, 0.884217, 1.000000, 0.981081 }, // SKINID 58 || MotorcycleHelmet1 - SI.
	{ 0.083339, 0.015802, -0.003702, 89.715873, 96.486831, 6.367833, 1.037051, 1.000000, 1.078135 }, // SKINID 59 || MotorcycleHelmet1 - SI.
	{ 0.083339, 0.015802, -0.003702, 89.715873, 96.486831, 6.367833, 1.037051, 1.000000, 1.078135 }, // SKINID 60 || MotorcycleHelmet1 - SI.
	{ 0.083339, 0.017691, -0.003702, 89.715873, 96.486831, 6.367833, 1.176779, 1.000000, 1.078135 }, // SKINID 61 || MotorcycleHelmet1 - SI.
	{ 0.059154, 0.029714, -0.003702, 89.715873, 96.486831, 6.367833, 0.926730, 1.000000, 1.078135 }, // SKINID 62 || MotorcycleHelmet1 - SI.
	{ 0.039980, 0.015173, -0.003702, 89.715873, 96.486831, 6.367833, 1.039675, 1.000000, 1.078135 }, // SKINID 63 || MotorcycleHelmet1 - SI.
	{ 0.039980, 0.015173, -0.003702, 89.715873, 96.486831, 6.367833, 1.039675, 1.000000, 1.078135 }, // SKINID 64 || MotorcycleHelmet1 - SI.
	{ 0.0, 0.015173, -0.003702, 89.715873, 96.486831, 6.367833, 1.039675, 1.000000, 1.078135 }, // SKINID 65 || MotorcycleHelmet1 - NO.
	{ 0.067476, 0.015173, -0.003702, 89.715873, 96.486831, 6.367833, 0.915247, 1.000000, 1.078135 }, // SKINID 66 || MotorcycleHelmet1 - SI.
	{ 0.067476, 0.015173, -0.003702, 89.715873, 96.486831, 6.367833, 0.915247, 1.000000, 1.078135 }, // SKINID 67 || MotorcycleHelmet1 - SI.
	{ 0.067476, 0.015173, -0.003702, 89.715873, 96.486831, 6.367833, 0.983779, 1.000000, 1.078135 }, // SKINID 68 || MotorcycleHelmet1 - SI.
	{ 0.067476, 0.015173, -0.003702, 89.715873, 96.486831, 6.367833, 0.983779, 1.000000, 1.078135 }, // SKINID 69 || MotorcycleHelmet1 - SI.
	{ 0.067476, 0.020542, -0.003702, 89.715873, 96.486831, 6.367833, 0.983779, 1.000000, 1.078135 }, // SKINID 70 || MotorcycleHelmet1 - SI.
	{ 0.067476, 0.025688, -0.003702, 89.715873, 96.486831, 6.367833, 1.084138, 1.000000, 1.078135 }, // SKINID 71 || MotorcycleHelmet1 - SI.
	{ 0.067476, 0.025688, -0.003702, 89.715873, 96.486831, 6.367833, 1.084138, 1.000000, 1.078135 }, // SKINID 72 || MotorcycleHelmet1 - SI.
	{ 0.067476, 0.025688, -0.003702, 89.715873, 96.486831, 6.367833, 1.084138, 1.000000, 1.078135 }, // SKINID 73 || MotorcycleHelmet1 - SI.
	{ 0.0, 0.025688, -0.003702, 89.715873, 96.486831, 6.367833, 1.084138, 1.000000, 1.078135 }, // SKINID 74 || MotorcycleHelmet1 - NO.
	{ 0.042678, 0.025688, -0.003702, 89.715873, 96.486831, 6.367833, 1.084138, 1.000000, 1.078135 }, // SKINID 75 || MotorcycleHelmet1 - SI.
	{ 0.042678, 0.010462, -0.003702, 89.715873, 96.486831, 6.367833, 1.084138, 1.000000, 1.078135 }, // SKINID 76 || MotorcycleHelmet1 - SI.
	{ 0.0, 0.010462, -0.003702, 89.715873, 96.486831, 6.367833, 1.084138, 1.000000, 1.078135 }, // SKINID 77 || MotorcycleHelmet1 - NO.
	{ 0.061191, 0.019165, -0.003702, 89.715873, 96.486831, 6.367833, 1.086820, 1.000000, 1.078135 }, // SKINID 78 || MotorcycleHelmet1 - SI.
	{ 0.061191, 0.019165, -0.003702, 89.715873, 96.486831, 6.367833, 1.086820, 1.000000, 1.078135 }, // SKINID 79 || MotorcycleHelmet1 - SI.
	{ 0.034503, 0.019165, -0.003702, 89.715873, 96.486831, 6.367833, 0.991727, 1.000000, 1.006440 }, // SKINID 80 || MotorcycleHelmet1 - SI.
	{ 0.034503, 0.019165, -0.003702, 89.715873, 96.486831, 6.367833, 0.991727, 1.000000, 1.006440 }, // SKINID 81 || MotorcycleHelmet1 - SI.
	{ 0.102640, 0.039447, -0.003702, 89.715873, 96.486831, 6.367833, 1.123702, 1.000000, 1.059899 }, // SKINID 82 || MotorcycleHelmet1 - SI.
	{ 0.102640, 0.039447, -0.003702, 89.715873, 96.486831, 6.367833, 1.123702, 1.000000, 1.059899 }, // SKINID 83 || MotorcycleHelmet1 - SI.
	{ 0.102640, 0.039447, -0.003702, 89.715873, 96.486831, 6.367833, 1.123702, 1.000000, 1.059899 }, // SKINID 84 || MotorcycleHelmet1 - SI.
	{ 0.055661, 0.028337, -0.003702, 89.715873, 96.486831, 6.367833, 1.123702, 1.000000, 1.059899 }, // SKINID 85 || MotorcycleHelmet1 - SI.
	{ 0.0, 0.028337, -0.003702, 89.715873, 96.486831, 6.367833, 1.123702, 1.000000, 1.059899 }, // SKINID 86 || MotorcycleHelmet1 - NO.
	{ 0.055661, 0.028337, -0.003702, 89.715873, 96.486831, 6.367833, 1.123702, 1.000000, 1.059899 }, // SKINID 87 || MotorcycleHelmet1 - SI.
	{ 0.055661, 0.028337, -0.003702, 89.715873, 96.486831, 6.367833, 0.966517, 1.000000, 1.059899 }, // SKINID 88 || MotorcycleHelmet1 - SI.
	{ 0.083799, 0.007824, -0.003702, 89.715873, 96.486831, 6.367833, 1.058513, 1.000000, 1.059899 }, // SKINID 89 || MotorcycleHelmet1 - SI.
	{ 0.046952, 0.007824, -0.003702, 89.715873, 96.486831, 6.367833, 1.058513, 1.000000, 1.059899 }, // SKINID 90 || MotorcycleHelmet1 - SI.
	{ 0.046952, 0.007824, -0.003702, 89.715873, 96.486831, 6.367833, 1.058513, 1.000000, 1.059899 }, // SKINID 91 || MotorcycleHelmet1 - SI.
	{ 0.046952, 0.007824, -0.003702, 89.715873, 96.486831, 6.367833, 1.058513, 1.000000, 1.059899 }, // SKINID 92 || MotorcycleHelmet1 - SI.
	{ 0.046952, 0.007824, -0.003702, 89.715873, 96.486831, 6.367833, 1.058513, 1.000000, 1.059899 }, // SKINID 93 || MotorcycleHelmet1 - SI.
	{ 0.046952, 0.015634, -0.003702, 89.715873, 96.486831, 6.367833, 0.958088, 1.000000, 0.873182 }, // SKINID 94 || MotorcycleHelmet1 - SI.
	{ 0.046952, 0.015634, -0.003702, 89.715873, 96.486831, 6.367833, 1.029447, 1.000000, 0.873182 }, // SKINID 95 || MotorcycleHelmet1 - SI.
	{ 0.069520, 0.015634, -0.003702, 89.715873, 96.486831, 6.367833, 1.023028, 1.000000, 0.937115 }, // SKINID 96 || MotorcycleHelmet1 - SI.
	{ 0.069520, 0.027443, -0.003702, 89.715873, 96.486831, 6.367833, 1.121912, 1.000000, 1.005367 }, // SKINID 97 || MotorcycleHelmet1 - SI.
	{ 0.069520, 0.027443, -0.003702, 89.715873, 96.486831, 6.367833, 1.020644, 1.000000, 1.005367 }, // SKINID 98 || MotorcycleHelmet1 - SI.
	{ 0.074331, 0.006538, -0.003702, 89.715873, 96.486831, 6.367833, 1.125367, 1.000000, 1.005367 }, // SKINID 99 || MotorcycleHelmet1 - SI.
	{ 0.079862, 0.026033, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 100 || MotorcycleHelmet1 - SI
	{ 0.079862, 0.026033, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 101 || MotorcycleHelmet1 - SI
	{ 0.079862, 0.004189, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 102 || MotorcycleHelmet1 - SI
	{ 0.071147, 0.020286, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 103 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 104 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 105 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 106 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 107 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 108 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 109 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 110 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 113 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 111 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 112 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 114 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 115 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 116 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 117 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 118 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 119 || MotorcycleHelmet1 - NO
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 120 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 121 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 122 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 123 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 124 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 125 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 126 || MotorcycleHelmet1 - SI
	{ 0.080126, 0.003028, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 127 || MotorcycleHelmet1 - SI
	{ 0.081310, 0.020286, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 128 || MotorcycleHelmet1 - SI
	{ 0.081310, 0.020286, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 129 || MotorcycleHelmet1 - SI
	{ 0.046783, 0.032432, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 130 || MotorcycleHelmet1 - SI
	{ 0.046783, 0.032432, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 131 || MotorcycleHelmet1 - SI
	{ -0.025336, 0.014666, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 132 || MotorcycleHelmet1 - SI
	{ 0.082529, 0.014666, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 133 || MotorcycleHelmet1 - SI
	{ 0.082529, 0.014666, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 134 || MotorcycleHelmet1 - SI
	{ 0.039577, 0.014666, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 135 || MotorcycleHelmet1 - SI
	{ 0.039577, 0.014666, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 136 || MotorcycleHelmet1 - SI
	{ 0.0, 0.014666, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 137 || MotorcycleHelmet1 - NO
	{ 0.049157, -0.012307, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 138 || MotorcycleHelmet1 - SI
	{ 0.049157, -0.012307, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 139 || MotorcycleHelmet1 - SI
	{ 0.068760, 0.003835, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 140 || MotorcycleHelmet1 - SI
	{ 0.068760, 0.003835, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 141 || MotorcycleHelmet1 - SI
	{ 0.068760, 0.003835, 0.003282, 0.917846, 81.798553, 77.744796, 1.186764, 1.000000, 1.000000 }, // SKINID 142 || MotorcycleHelmet1 - SI
	{ 0.068760, 0.006312, 0.003282, 0.917846, 81.798553, 77.744796, 1.442516, 1.000000, 1.000000 }, // SKINID 143 || MotorcycleHelmet1 - SI
	{ 0.068731, 0.014156, 0.000000, 78.394248, 66.939796, 0.000000, 1.145625, 1.000000, 1.196670 }, // SKINID 144 || MotorcycleHelmet1 - SI
	{ 0.068731, 0.014156, 0.000000, 78.394248, 66.939796, 0.000000, 1.145625, 1.000000, 1.196670 }, // SKINID 145 || MotorcycleHelmet1 - SI
	{ 0.068731, 0.014156, 0.000000, 78.394248, 66.939796, 0.000000, 1.145625, 1.000000, 1.196670 }, // SKINID 146 || MotorcycleHelmet1 - SI
	{ 0.029312, 0.014156, 0.000000, 78.394248, 66.939796, 0.000000, 1.145625, 1.000000, 1.196670 }, // SKINID 147 || MotorcycleHelmet1 - SI
	{ 0.029312, 0.014156, 0.000000, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 148 || MotorcycleHelmet1 - SI
	{ 0.0, 0.014156, 0.000000, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 149 || MotorcycleHelmet1 - NO
	{ 0.058838, -0.001575, 0.000000, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 150 || MotorcycleHelmet1 - SI
	{ 0.058838, 0.014999, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 151 || MotorcycleHelmet1 - SI
	{ 0.028017, -0.002800, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 152 || MotorcycleHelmet1 - SI
	{ 0.028017, 0.031918, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 153 || MotorcycleHelmet1 - SI
	{ 0.028017, 0.031918, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 154 || MotorcycleHelmet1 - SI
	{ 0.076935, 0.037744, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 155 || MotorcycleHelmet1 - SI
	{ 0.058837, 0.016789, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 156 || MotorcycleHelmet1 - SI
	{ 0.058837, 0.016789, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 157 || MotorcycleHelmet1 - SI
	{ 0.0, 0.016789, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 158 || MotorcycleHelmet1 - NO
	{ 0.058837, 0.028815, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 159 || MotorcycleHelmet1 - SI
	{ 0.058837, 0.028815, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 160 || MotorcycleHelmet1 - SI
	{ 0.077267, 0.002439, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 161 || MotorcycleHelmet1 - SI
	{ 0.077267, 0.002439, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 162 || MotorcycleHelmet1 - SI
	{ 0.077267, 0.002439, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 163 || MotorcycleHelmet1 - SI
	{ 0.077267, 0.002439, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 164 || MotorcycleHelmet1 - SI
	{ 0.077267, 0.002439, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 165 || MotorcycleHelmet1 - SI
	{ 0.077267, 0.002439, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 166 || MotorcycleHelmet1 - SI
	{ 0.0, 0.002439, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 167 || MotorcycleHelmet1 - NO
	{ 0.077267, 0.002439, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 168 || MotorcycleHelmet1 - SI
	{ 0.061352, -0.005744, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 169 || MotorcycleHelmet1 - SI
	{ 0.061352, -0.005744, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 170 || MotorcycleHelmet1 - SI
	{ 0.061352, -0.005744, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 171 || MotorcycleHelmet1 - SI
	{ 0.061352, -0.005744, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 172 || MotorcycleHelmet1 - SI
	{ 0.069895, 0.021228, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 173 || MotorcycleHelmet1 - SI
	{ 0.069895, 0.021228, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 174 || MotorcycleHelmet1 - SI
	{ 0.069895, 0.021228, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 175 || MotorcycleHelmet1 - SI
	{ 0.069895, 0.021228, 0.005790, 78.394248, 66.939796, 11.066159, 1.145625, 1.000000, 1.196670 }, // SKINID 176 || MotorcycleHelmet1 - SI
	{ 0.093134, 0.021228, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 177 || MotorcycleHelmet1 - SI
	{ 0.068663, 0.021228, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 178 || MotorcycleHelmet1 - SI
	{ 0.068663, 0.021228, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 179 || MotorcycleHelmet1 - SI
	{ 0.068663, 0.021228, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 180 || MotorcycleHelmet1 - SI
	{ 0.111742, 0.015187, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 181 || MotorcycleHelmet1 - SI
	{ 0.071245, 0.015187, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 182 || MotorcycleHelmet1 - SI
	{ 0.071245, 0.015187, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 183 || MotorcycleHelmet1 - SI
	{ 0.071245, 0.015187, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 184 || MotorcycleHelmet1 - SI
	{ 0.071245, 0.015187, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 185 || MotorcycleHelmet1 - SI
	{ 0.071245, 0.015187, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 186 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.015187, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 187 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.015187, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 188 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.015187, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 189 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.015187, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 190 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.022189, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 191 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 192 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 193 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 194 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 195 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 196 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 197 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 198 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 199 || MotorcycleHelmet1 - SI
	{ 0.059031, 0.037007, -0.003702, 89.715873, 96.486831, 6.367833, 1.223210, 1.000000, 1.110052 }, // SKINID 200 || MotorcycleHelmet1 - SI.
	{ 0.059031, 0.037007, -0.003702, 89.715873, 96.486831, 6.367833, 1.105433, 1.000000, 1.110052 }, // SKINID 201 || MotorcycleHelmet1 - SI.
	{ 0.059031, 0.037007, -0.003702, 89.715873, 96.486831, 6.367833, 1.050121, 1.000000, 1.110052 }, // SKINID 202 || MotorcycleHelmet1 - SI.
	{ 0.059031, 0.030286, -0.003702, 89.715873, 96.486831, 6.367833, 1.050121, 1.000000, 1.110052 }, // SKINID 203 || MotorcycleHelmet1 - SI.
	{ 0.059031, 0.030286, -0.003702, 89.715873, 96.486831, 6.367833, 1.050121, 1.000000, 1.110052 }, // SKINID 204 || MotorcycleHelmet1 - SI.
	{ 0.0, 0.030286, -0.003702, 89.715873, 96.486831, 6.367833, 1.050121, 1.000000, 1.110052 }, // SKINID 205 || MotorcycleHelmet1 - NO.
	{ 0.086275, 0.030286, -0.003702, 89.715873, 96.486831, 6.367833, 1.050121, 1.000000, 1.110052 }, // SKINID 206 || MotorcycleHelmet1 - SI.
	{ 0.040006, 0.030286, -0.003702, 89.715873, 96.486831, 6.367833, 1.050121, 1.000000, 1.110052 }, // SKINID 207 || MotorcycleHelmet1 - SI.
	{ 0.065322, 0.030286, -0.003702, 89.715873, 96.486831, 6.367833, 1.050121, 1.000000, 1.110052 }, // SKINID 208 || MotorcycleHelmet1 - NO.
	{ 0.065322, 0.030286, -0.003702, 89.715873, 96.486831, 6.367833, 1.006660, 1.000000, 1.021481 }, // SKINID 209 || MotorcycleHelmet1 - SI.
	{ 0.065322, 0.030286, -0.003702, 89.715873, 96.486831, 6.367833, 1.006660, 1.000000, 1.021481 }, // SKINID 210 || MotorcycleHelmet1 - SI.
	{ 0.065322, 0.009842, -0.003702, 89.715873, 96.486831, 6.367833, 1.019046, 1.000000, 1.021481 }, // SKINID 211 || MotorcycleHelmet1 - SI.
	{ 0.065322, 0.029749, -0.003702, 89.715873, 96.486831, 6.367833, 0.909220, 1.000000, 1.021481 }, // SKINID 212 || MotorcycleHelmet1 - SI.
	{ 0.065322, 0.022352, -0.003702, 89.715873, 96.486831, 6.367833, 1.014164, 1.000000, 1.021481 }, // SKINID 213 || MotorcycleHelmet1 - SI.
	{ 0.065322, 0.006548, -0.003702, 89.715873, 96.486831, 6.367833, 1.014164, 1.000000, 1.021481 }, // SKINID 214 || MotorcycleHelmet1 - SI.
	{ 0.0, 0.006548, -0.003702, 89.715873, 96.486831, 6.367833, 1.014164, 1.000000, 1.021481 }, // SKINID 215 || MotorcycleHelmet1 - NO.
	{ 0.065322, 0.006548, -0.003702, 89.715873, 96.486831, 6.367833, 1.014164, 1.000000, 1.021481 }, // SKINID 216 || MotorcycleHelmet1 - SI.
	{ 0.065322, 0.030664, -0.003702, 89.715873, 96.486831, 6.367833, 1.014164, 1.000000, 1.021481 }, // SKINID 217 || MotorcycleHelmet1 - SI.
	{ 0.071801, 0.013245, -0.003702, 89.715873, 96.486831, 6.367833, 1.044428, 1.000000, 1.021481 }, // SKINID 218 || MotorcycleHelmet1 - SI.
	{ 0.045664, 0.013245, -0.003702, 89.715873, 96.486831, 6.367833, 1.044428, 1.000000, 1.021481 }, // SKINID 219 || MotorcycleHelmet1 - SI.
	{ 0.045664, 0.023454, -0.003702, 89.715873, 96.486831, 6.367833, 1.044428, 1.000000, 1.021481 }, // SKINID 220 || MotorcycleHelmet1 - SI.
	{ 0.063059, 0.008899, -0.003702, 89.715873, 96.486831, 6.367833, 1.105615, 1.000000, 1.021481 }, // SKINID 221 || MotorcycleHelmet1 - SI.
	{ 0.063059, 0.004834, -0.003702, 89.715873, 96.486831, 6.367833, 1.105615, 1.000000, 1.021481 }, // SKINID 222 || MotorcycleHelmet1 - SI.
	{ 0.086894, 0.025422, -0.003702, 89.715873, 96.486831, 6.367833, 1.105615, 1.000000, 1.021481 }, // SKINID 223 || MotorcycleHelmet1 - SI.
	{ 0.039299, 0.008744, -0.003702, 89.715873, 96.486831, 6.367833, 0.989521, 1.000000, 1.021481 }, // SKINID 224 || MotorcycleHelmet1 - SI.
	{ 0.042440, 0.008744, -0.003702, 89.715873, 96.486831, 6.367833, 0.989521, 1.000000, 1.021481 }, // SKINID 225 || MotorcycleHelmet1 - SI.
	{ 0.042440, 0.005189, 0.003060, 89.715873, 96.486831, 6.367833, 1.014706, 1.000000, 1.021481 }, // SKINID 226 || MotorcycleHelmet1 - SI.
	{ 0.069509, 0.028704, 0.003060, 89.715873, 96.486831, 6.367833, 1.014706, 1.000000, 1.021481 }, // SKINID 227 || MotorcycleHelmet1 - SI.
	{ 0.070585, 0.021329, 0.003060, 89.715873, 96.486831, 6.367833, 1.101840, 1.000000, 1.021481 }, // SKINID 228 || MotorcycleHelmet1 - SI.
	{ 0.058221, 0.021329, 0.003060, 89.715873, 96.486831, 6.367833, 1.012374, 1.000000, 1.021481 }, // SKINID 229 || MotorcycleHelmet1 - SI.
	{ 0.058221, 0.021329, 0.003060, 89.715873, 96.486831, 6.367833, 1.012374, 1.000000, 1.021481 }, // SKINID 230 || MotorcycleHelmet1 - SI.
	{ 0.072018, 0.021329, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 231 || MotorcycleHelmet1 - SI.
	{ 0.047198, 0.002333, 0.000000, 84.169067, 66.729423, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 232 || MotorcycleHelmet1 - SI.
	{ 0.059938, 0.021329, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 233 || MotorcycleHelmet1 - SI.
	{ 0.059938, 0.021329, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 234 || MotorcycleHelmet1 - SI.
	{ 0.035589, 0.021329, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 235 || MotorcycleHelmet1 - SI.
	{ 0.035589, 0.021329, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 236 || MotorcycleHelmet1 - SI.
	{ 0.035589, 0.021329, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 237 || MotorcycleHelmet1 - SI.
	{ 0.035589, 0.021329, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 238 || MotorcycleHelmet1 - SI.
	{ 0.051785, 0.021329, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 239 || MotorcycleHelmet1 - SI.
	{ 0.065339, 0.016573, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 240 || MotorcycleHelmet1 - SI.
	{ 0.0, 0.016573, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 241 || MotorcycleHelmet1 - NO.
	{ 0.0, 0.016573, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 242 || MotorcycleHelmet1 - NO.
	{ 0.065339, 0.016573, 0.003060, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 243 || MotorcycleHelmet1 - SI.
	{ 0.065339, 0.036559, -0.004551, 89.715873, 96.486831, 6.367833, 1.065725, 1.000000, 1.021481 }, // SKINID 244 || MotorcycleHelmet1 - SI.
	{ 0.065339, 0.016950, 0.010980, 89.715873, 96.486831, 6.367833, 1.263960, 1.000000, 1.021481 }, // SKINID 245 || MotorcycleHelmet1 - SI.
	{ 0.085716, 0.045513, 0.010980, 89.715873, 96.486831, 6.367833, 1.220781, 1.000000, 1.144201 }, // SKINID 246 || MotorcycleHelmet1 - SI.
	{ 0.085716, 0.024827, 0.010980, 89.715873, 96.486831, 6.367833, 1.220781, 1.000000, 1.144201 }, // SKINID 247 || MotorcycleHelmet1 - SI.
	{ 0.085716, 0.024827, 0.010980, 89.715873, 96.486831, 6.367833, 1.220781, 1.000000, 1.144201 }, // SKINID 248 || MotorcycleHelmet1 - SI.
	{ 0.0, 0.022424, 0.010980, 89.715873, 96.486831, 6.367833, 1.220781, 1.000000, 1.144201 }, // SKINID 249 || MotorcycleHelmet1 - NO.
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 250 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 251 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 252 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 253 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 254 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 255 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 256 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 257 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 258 || MotorcycleHelmet1 - SI
	{ 0.049226, 0.019496, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 259 || MotorcycleHelmet1 - SI
	{ 0.086501, 0.030875, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 260 || MotorcycleHelmet1 - SI
	{ 0.071553, 0.008856, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 261 || MotorcycleHelmet1 - SI
	{ 0.071553, 0.008856, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 262 || MotorcycleHelmet1 - SI
	{ 0.044580, -0.002710, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 263 || MotorcycleHelmet1 - SI
	{ 0.0, -0.002710, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 264 || MotorcycleHelmet1 - NO
	{ 0.044580, -0.002710, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 265 || MotorcycleHelmet1 - SI
	{ 0.044580, -0.002710, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 266 || MotorcycleHelmet1 - SI
	{ 0.044580, -0.002710, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 267 || MotorcycleHelmet1 - SI
	{ 0.044580, -0.002710, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 268 || MotorcycleHelmet1 - SI
	{ 0.090989, 0.007476, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 269 || MotorcycleHelmet1 - SI
	{ 0.065273, 0.028286, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 270 || MotorcycleHelmet1 - SI
	{ 0.065273, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 271 || MotorcycleHelmet1 - SI
	{ 0.065273, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 272 || MotorcycleHelmet1 - SI
	{ 0.0, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 273 || MotorcycleHelmet1 - NO
	{ 0.065273, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 274 || MotorcycleHelmet1 - SI
	{ 0.065273, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 275 || MotorcycleHelmet1 - SI
	{ 0.065273, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 276 || MotorcycleHelmet1 - SI
	{ 0.0, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 277 || MotorcycleHelmet1 - NO
	{ 0.0, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 278 || MotorcycleHelmet1 - NO
	{ 0.0, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 279 || MotorcycleHelmet1 - NO
	{ 0.065273, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 280 || MotorcycleHelmet1 - SI
	{ 0.065273, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 281 || MotorcycleHelmet1 - SI
	{ 0.065273, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 282 || MotorcycleHelmet1 - SI
	{ 0.065273, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 283 || MotorcycleHelmet1 - SI
	{ 0.0, 0.007428, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 284 || MotorcycleHelmet1 - NO
	{ 0.065273, 0.037421, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 285 || MotorcycleHelmet1 - SI
	{ 0.065273, 0.037421, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 286 || MotorcycleHelmet1 - SI
	{ 0.0, 0.037421, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 287 || MotorcycleHelmet1 - NO
	{ 0.072866, 0.029292, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 288 || MotorcycleHelmet1 - SI
	{ 0.072866, 0.029292, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 289 || MotorcycleHelmet1 - NO
	{ 0.072866, 0.029292, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 290 || MotorcycleHelmet1 - SI
	{ 0.072866, 0.029292, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 291 || MotorcycleHelmet1 - SI
	{ 0.033589, 0.006053, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 292 || MotorcycleHelmet1 - SI
	{ 0.076561, 0.006053, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 293 || MotorcycleHelmet1 - SI
	{ 0.076561, 0.006053, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 294 || MotorcycleHelmet1 - SI
	{ 0.036064, 0.006053, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 295 || MotorcycleHelmet1 - SI
	{ 0.036064, 0.006053, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 296 || MotorcycleHelmet1 - SI
	{ 0.070575, 0.006053, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 297 || MotorcycleHelmet1 - SI
	{ 0.070575, 0.006053, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }, // SKINID 298 || MotorcycleHelmet1 - SI
	{ 0.070575, 0.035112, 0.005790, 78.394248, 73.484039, 4.756572, 1.145625, 1.000000, 1.196670 }  // SKINID 299 || MotorcycleHelmet1 - SI
};
new Float:POS_Accesorio_Reloj[300][9] = {
	{ -0.019999, -0.014000, -0.006000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 0.0 }, // SKINID 0 || WatchType1 -
	{ -0.019999, -0.004000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 1 || WatchType1 - 
	{ -0.019999, -0.004000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 0.0 }, // SKINID 2 || WatchType1 - NO
	{ -0.004999, -0.004999, 0.000000, 0.000000, 90.000000, 180.000000, 1.299999, 1.100000, 1.100000 }, // SKINID 3 || WatchType1 - NO
	{ 0.009999, 0.002000, -0.004999, 0.000000, 90.000000, 180.000000, 1.100000, 1.100000, 1.100000 }, // SKINID 4 || WatchType1 - NO
	{ -0.009999, -0.004999, -0.004999, 0.000000, 90.000000, 180.000000, 1.399999, 1.700000, 1.100000 }, // SKINID 5 || WatchType1 - NO
	{ -0.019999, -0.004000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 0.0 }, // SKINID 6 || WatchType1 - NO
	{ -0.019999, -0.004000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 0.0 }, // SKINID 7 || WatchType1 - NO
	{ -0.009999, -0.008000, 0.004999, 0.000000, 90.000000, 180.000000, 1.200000, 1.299999, 1.100000 }, // SKINID 8 || WatchType1 - NO
	{ -0.019999, -0.004000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 0.0 }, // SKINID 9 || WatchType1 - NO
	{ -0.019999, -0.004000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 0.0 }, // SKINID 10 || WatchType1 - NO
	{ 0.000000, -0.009999, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 11 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 0.000000, 90.000000, 180.000000, 0.699999, 0.800000, 0.0 }, // SKINID 12 || WatchType1 - NO
	{ 0.000000, -0.014999, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 13 || WatchType1 -
	{ -0.009999, -0.009999, 0.009999, 10.000000, 90.000000, 170.000000, 1.000000, 1.399999, 1.000000 }, // SKINID 14 || WatchType1 -
	{ -0.019999, -0.017000, 0.009999, 10.000000, 90.000000, 170.000000, 1.299999, 1.100000, 1.000000 }, // SKINID 15 || WatchType1 -
	{ -0.019999, -0.017000, 0.009999, 10.000000, 90.000000, 170.000000, 1.299999, 1.100000, 0.0 }, // SKINID 16 || WatchType1 - NO
	{ -0.019999, -0.017000, 0.009999, 10.000000, 90.000000, 170.000000, 1.299999, 1.100000, 0.0 }, // SKINID 17 || WatchType1 - NO
	{ -0.019999, -0.017000, 0.009999, 10.000000, 90.000000, 170.000000, 1.299999, 1.100000, 1.000000 }, // SKINID 18 || WatchType1 -
	{ -0.035000, -0.009999, 0.000000, 0.000000, 90.000000, 190.000000, 1.100000, 1.700000, 0.0 }, // SKINID 19 || WatchType1 - NO
	{ -0.035000, -0.009999, 0.000000, 0.000000, 90.000000, 190.000000, 1.100000, 1.700000, 0.0 }, // SKINID 20 || WatchType1 - NO
	{ 0.000000, -0.009999, -0.004999, 0.000000, 90.000000, 190.000000, 1.200000, 1.299999, 1.000000 }, // SKINID 21 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 0.000000, 90.000000, 190.000000, 1.200000, 1.299999, 0.0 }, // SKINID 22 || WatchType1 - NO
	{ 0.000000, 0.000000, -0.009999, 0.000000, 90.000000, 190.000000, 1.200000, 1.299999, 1.000000 }, // SKINID 23 || WatchType1 -
	{ -0.004999, -0.012000, -0.009999, 0.000000, 90.000000, 190.000000, 1.379999, 1.299999, 1.000000 }, // SKINID 24 || WatchType1 -
	{ -0.004999, -0.012000, -0.009999, 0.000000, 90.000000, 190.000000, 1.379999, 1.299999, 1.000000 }, // SKINID 25 || WatchType1 -
	{ -0.004999, -0.006000, 0.000000, 0.000000, 90.000000, 190.000000, 1.000000, 1.360000, 1.000000 }, // SKINID 26 || WatchType1 -
	{ -0.004999, -0.006000, 0.000000, 0.000000, 90.000000, 190.000000, 1.000000, 1.360000, 0.0 }, // SKINID 27 || WatchType1 - NO
	{ -0.004999, -0.006000, -0.004999, 0.000000, 90.000000, 190.000000, 1.100000, 1.360000, 1.000000 }, // SKINID 28 || WatchType1 -
	{ 0.009999, 0.000000, -0.008000, 0.000000, 90.000000, 180.000000, 1.399999, 1.399999, 1.000000 }, // SKINID 29 || WatchType1 -
	{ -0.004999, -0.006000, -0.004999, 0.000000, 90.000000, 190.000000, 1.100000, 1.360000, 1.000000 }, // SKINID 30 || WatchType1 -
	{ 0.000000, -0.050000, 0.004999, 0.000000, 90.000000, 190.000000, 1.100000, 1.360000, 1.000000 }, // SKINID 31 || WatchType1 -
	{ 0.000000, -0.009999, -0.014999, 0.000000, 90.000000, 190.000000, 0.899999, 0.899999, 1.000000 }, // SKINID 32 || WatchType1 -
	{ 0.000000, -0.009999, -0.014999, 0.000000, 90.000000, 190.000000, 0.899999, 0.899999, 0.0 }, // SKINID 33 || WatchType1 - NO
	{ 0.000000, -0.004000, 0.004999, 0.000000, 90.000000, 190.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 34 || WatchType1 -
	{ -0.050000, -0.004000, 0.000000, 0.000000, 90.000000, 190.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 35 || WatchType1 -
	{ -0.050000, -0.004000, 0.000000, 0.000000, 90.000000, 190.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 36 || WatchType1 -
	{ -0.050000, -0.004000, 0.000000, 0.000000, 90.000000, 190.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 37 || WatchType1 -
	{ -0.017999, -0.004000, 0.004999, 0.000000, 90.000000, 190.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 38 || WatchType1 -
	{ -0.017999, -0.004000, 0.004999, 0.000000, 90.000000, 190.000000, 1.000000, 1.000000, 0.0 }, // SKINID 39 || WatchType1 - NO
	{ -0.017999, -0.009999, -0.004999, 0.000000, 90.000000, 190.000000, 0.899999, 1.049999, 1.000000 }, // SKINID 40 || WatchType1 -
	{ -0.017999, -0.009999, -0.004999, 0.000000, 90.000000, 190.000000, 1.000000, 1.149999, 1.000000 }, // SKINID 41 || WatchType1 -
	{ -0.009999, -0.008000, 0.004999, 0.000000, 90.000000, 180.000000, 1.200000, 1.299999, 1.100000 }, // SKINID 42 || WatchType1 - NO
	{ -0.017999, -0.009999, -0.004999, 0.000000, 90.000000, 190.000000, 1.000000, 1.149999, 0.0 }, // SKINID 43 || WatchType1 - NO
	{ -0.017999, 0.000000, 0.000000, 0.000000, 90.000000, 190.000000, 0.800000, 1.000000, 1.000000 }, // SKINID 44 || WatchType1 -
	{ -0.017999, -0.014999, 0.004999, 0.000000, 90.000000, 190.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 45 || WatchType1 -
	{ -0.004999, -0.009999, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 46 || WatchType1 -
	{ -0.004999, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.100000, 1.399999, 1.000000 }, // SKINID 47 || WatchType1 -
	{ -0.004999, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.100000, 1.399999, 1.000000 }, // SKINID 48 || WatchType1 -
	{ -0.004999, -0.004999, 0.000000, 0.000000, 90.000000, 180.000000, 0.899999, 0.899999, 1.000000 }, // SKINID 49 || WatchType1 -
	{ -0.004999, -0.004999, 0.000000, 0.000000, 90.000000, 180.000000, 0.899999, 0.899999, 0.0 }, // SKINID 50 || WatchType1 - NO
	{ -0.007000, -0.006000, 0.004999, 0.000000, 90.000000, 180.000000, 1.299999, 1.200000, 1.000000 }, // SKINID 51 || WatchType1 -
	{ -0.007000, -0.006000, 0.004999, 0.000000, 90.000000, 180.000000, 1.299999, 1.200000, 1.000000 }, // SKINID 52 || WatchType1 -
	{ -0.007000, -0.006000, 0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 53 || WatchType1 -
	{ -0.007000, -0.006000, 0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 0.0 }, // SKINID 54 || WatchType1 - NO
	{ -0.007000, -0.006000, -0.004000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 55 || WatchType1 -
	{ -0.007000, -0.006000, -0.004000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 0.0 }, // SKINID 56 || WatchType1 - NO
	{ -0.007000, -0.006000, -0.004000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 0.0 }, // SKINID 57 || WatchType1 - NO
	{ -0.007000, -0.006000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 58 || WatchType1 -
	{ -0.007000, -0.006000, 0.000000, 0.000000, 90.000000, 180.000000, 1.200000, 1.100000, 1.000000 }, // SKINID 59 || WatchType1 -
	{ -0.007000, -0.010999, -0.004999, 0.000000, 90.000000, 180.000000, 1.100000, 1.399999, 1.000000 }, // SKINID 60 || WatchType1 -
	{ -0.007000, -0.010999, -0.004999, 0.000000, 90.000000, 180.000000, 1.100000, 1.399999, 0.0 }, // SKINID 61 || WatchType1 - NO
	{ -0.007000, -0.010999, -0.004999, 0.000000, 90.000000, 180.000000, 1.100000, 1.399999, 0.0 }, // SKINID 62 || WatchType1 - NO
	{ -0.007000, -0.010999, 0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 63 || WatchType1 -
	{ -0.007000, -0.010999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 64 || WatchType1 -
	{ -0.009999, -0.014999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.100000 }, // SKINID 65 || WatchType1 - NO
	{ -0.007000, -0.010999, -0.004999, 0.000000, 90.000000, 180.000000, 1.299999, 1.299999, 1.000000 }, // SKINID 66 || WatchType1 -
	{ -0.007000, -0.010999, -0.004999, 0.000000, 90.000000, 180.000000, 1.299999, 1.299999, 1.000000 }, // SKINID 67 || WatchType1 -
	{ -0.007000, -0.010999, -0.004999, 0.000000, 90.000000, 180.000000, 1.299999, 1.299999, 0.0 }, // SKINID 68 || WatchType1 - NO
	{ -0.007000, -0.004999, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 69 || WatchType1 -
	{ -0.007000, -0.004999, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 0.0 }, // SKINID 70 || WatchType1 - NO
	{ -0.007000, -0.009999, 0.000000, 0.000000, 90.000000, 180.000000, 1.200000, 1.200000, 1.000000 }, // SKINID 71 || WatchType1 -
	{ -0.007000, -0.014999, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 72 || WatchType1 -
	{ -0.007000, -0.014999, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 73 || WatchType1 -
	{ -0.007000, -0.014999, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 0.0 }, // SKINID 74 || WatchType1 - NO
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 1.000000 }, // SKINID 75 || WatchType1 -
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 0.0 }, // SKINID 76 || WatchType1 - NO
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 0.0 }, // SKINID 77 || WatchType1 - NO
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 0.0 }, // SKINID 78 || WatchType1 - NO
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 0.0 }, // SKINID 79 || WatchType1 - NO
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 0.0 }, // SKINID 80 || WatchType1 - NO
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 0.0 }, // SKINID 81 || WatchType1 - NO
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 0.0 }, // SKINID 82 || WatchType1 - NO
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 0.0 }, // SKINID 83 || WatchType1 - NO
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 0.0 }, // SKINID 84 || WatchType1 - NO
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 0.0 }, // SKINID 85 || WatchType1 - NO
	{ -0.007000, -0.009999, -0.004999, 0.000000, 90.000000, 180.000000, 1.000000, 1.299999, 0.0 }, // SKINID 86 || WatchType1 - NO
	{ -0.007000, -0.007000, -0.002000, 0.000000, 90.000000, 180.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 87 || WatchType1 -
	{ -0.007000, -0.007000, 0.025000, 0.000000, 90.000000, 180.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 88 || WatchType1 -
	{ -0.007000, -0.007000, 0.025000, 0.000000, 90.000000, 180.000000, 1.000000, 1.100000, 0.0 }, // SKINID 89 || WatchType1 - NO
	{ -0.007000, -0.007000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 90 || WatchType1 -
	{ -0.007000, -0.007000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 91 || WatchType1 -
	{ -0.007000, -0.007000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 92 || WatchType1 -
	{ -0.007000, -0.007000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 93 || WatchType1 -
	{ -0.007000, -0.007000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 0.899999, 1.000000 }, // SKINID 94 || WatchType1 -
	{ -0.007000, -0.007000, 0.000000, 0.000000, 90.000000, 180.000000, 1.000000, 0.899999, 1.000000 }, // SKINID 95 || WatchType1 -
	{ -0.007000, -0.017999, 0.004999, 0.000000, 90.000000, 180.000000, 1.100000, 1.299999, 1.000000 }, // SKINID 96 || WatchType1 -
	{ -0.007000, -0.050000, 0.009999, 180.000000, 270.000000, 0.000000, 1.100000, 1.299999, 1.000000 }, // SKINID 97 || WatchType1 -
	{ -0.019999, -0.008000, -0.003000, 90.000000, 90.000000, 90.000000, 1.100000, 1.370000, 1.000000 }, // SKINID 98 || WatchType1 -
	{ -0.019999, -0.008000, 0.004999, 90.000000, 90.000000, 90.000000, 1.100000, 1.200000, 1.000000 }, // SKINID 99 || WatchType1 -
	{ -0.009999, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 100 || WatchType1 -
	{ -0.009999, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 0.0 }, // SKINID 101 || WatchType1 - NO
	{ -0.009999, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 102 || WatchType1 -
	{ -0.009999, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 0.0 }, // SKINID 103 || WatchType1 - NO
	{ -0.009999, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 104 || WatchType1 -
	{ -0.009999, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 0.0 }, // SKINID 105 || WatchType1 - NO
	{ -0.009999, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 106 || WatchType1 -
	{ -0.009999, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 107 || WatchType1 -
	{ -0.009999, 0.000000, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.299999, 1.000000 }, // SKINID 108 || WatchType1 -
	{ -0.029999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 109 || WatchType1 -
	{ -0.029999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 110 || WatchType1 -
	{ -0.029999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 0.0 }, // SKINID 111 || WatchType1 - NO
	{ -0.029999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 0.0 }, // SKINID 112 || WatchType1 - NO
	{ -0.029999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 0.0 }, // SKINID 113 || WatchType1 - NO
	{ -0.029999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 114 || WatchType1 -
	{ -0.029999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 0.0 }, // SKINID 115 || WatchType1 - NO
	{ -0.029999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 116 || WatchType1 -
	{ -0.029999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 0.0 }, // SKINID 117 || WatchType1 - NO
	{ -0.029999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 0.0 }, // SKINID 118 || WatchType1 - NO
	{ -0.009999, -0.014999, 0.004999, 0.000000, 90.000000, 180.000000, 1.149999, 1.149999, 1.100000 }, // SKINID 119 || WatchType1 - NO
	{ -0.029999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 0.0 }, // SKINID 120 || WatchType1 - NO
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 121 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 122 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 0.0 }, // SKINID 123 || WatchType1 - NO
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.200000, 1.200000, 1.000000 }, // SKINID 124 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.200000, 1.200000, 0.0 }, // SKINID 125 || WatchType1 - NO
	{ -0.019999, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.200000, 1.299999, 1.000000 }, // SKINID 126 || WatchType1 -
	{ -0.019999, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.200000, 1.299999, 0.0 }, // SKINID 127 || WatchType1 - NO
	{ -0.019999, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.200000, 1.299999, 1.000000 }, // SKINID 128 || WatchType1 -
	{ -0.019999, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.200000, 1.299999, 0.0 }, // SKINID 129 || WatchType1 - NO
	{ -0.019999, -0.029999, 0.009999, 90.000000, 90.000000, 90.000000, 1.200000, 1.299999, 1.000000 }, // SKINID 130 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 131 || WatchType1 -
	{ 0.000000, -0.009999, -0.009999, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 132 || WatchType1 -
	{ 0.000000, -0.009999, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.500000, 1.000000 }, // SKINID 133 || WatchType1 -
	{ 0.000000, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 134 || WatchType1 -
	{ 0.000000, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 0.0 }, // SKINID 135 || WatchType1 - NO
	{ 0.000000, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 0.0 }, // SKINID 136 || WatchType1 - NO
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 137 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 138 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 139 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 140 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 0.0 }, // SKINID 141 || WatchType1 - NO
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 1.000000 }, // SKINID 142 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 0.0 }, // SKINID 143 || WatchType1 - NO
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 1.000000 }, // SKINID 144 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 145 || WatchType1 -
	{ 0.000000, -0.009999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.299999, 1.000000 }, // SKINID 146 || WatchType1 -
	{ 0.000000, -0.009999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.299999, 0.0 }, // SKINID 147 || WatchType1 - NO
	{ 0.000000, -0.009999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.299999, 0.0 }, // SKINID 148 || WatchType1 - NO
	{ -0.009999, -0.009999, 0.000000, 0.000000, 90.000000, 180.000000, 1.149999, 1.399999, 1.100000 }, // SKINID 149 || WatchType1 - NO
	{ 0.000000, -0.009999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.299999, 0.0 }, // SKINID 150 || WatchType1 - NO
	{ 0.000000, -0.025000, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 1.000000 }, // SKINID 151 || WatchType1 -
	{ 0.000000, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 152 || WatchType1 -
	{ 0.000000, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 0.0 }, // SKINID 153 || WatchType1 - NO
	{ 0.000000, -0.014999, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.500000, 1.000000 }, // SKINID 154 || WatchType1 -
	{ 0.000000, -0.009998, -0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.500000, 1.000000 }, // SKINID 155 || WatchType1 -
	{ 0.000000, -0.009998, 0.004999, 90.000000, 90.000000, 90.000000, 1.100000, 1.200000, 1.000000 }, // SKINID 156 || WatchType1 -
	{ 0.000000, -0.009998, -0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 157 || WatchType1 -
	{ 0.000000, -0.009998, -0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 0.0 }, // SKINID 158 || WatchType1 - NO
	{ 0.000000, -0.009998, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 159 || WatchType1 -
	{ -0.009999, -0.009998, 0.014999, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 160 || WatchType1 -
	{ -0.009999, -0.009998, -0.009999, 90.000000, 90.000000, 90.000000, 1.500000, 1.299999, 1.000000 }, // SKINID 161 || WatchType1 -
	{ 0.014999, -0.004000, 0.006000, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 1.000000 }, // SKINID 162 || WatchType1 -
	{ 0.014999, -0.004000, 0.006000, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 0.0 }, // SKINID 163 || WatchType1 - NO
	{ 0.014999, -0.004000, 0.006000, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 0.0 }, // SKINID 164 || WatchType1 - NO
	{ 0.014999, -0.004000, 0.006000, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 0.0 }, // SKINID 165 || WatchType1 - NO
	{ 0.014999, -0.004000, 0.006000, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 0.0 }, // SKINID 166 || WatchType1 - NO
	{ 0.014999, -0.004000, 0.006000, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 0.0 }, // SKINID 167 || WatchType1 - NO
	{ -0.039999, -0.004000, 0.006000, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 1.000000 }, // SKINID 168 || WatchType1 -
	{ 0.000000, -0.004999, -0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 169 || WatchType1 -
	{ -0.019999, -0.009999, -0.002000, 90.000000, 90.000000, 90.000000, 1.200000, 1.600000, 1.000000 }, // SKINID 170 || WatchType1 -
	{ 0.000000, -0.003000, 0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.399999, 1.000000 }, // SKINID 171 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 172 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 1.000000 }, // SKINID 173 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 1.000000 }, // SKINID 174 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 1.000000 }, // SKINID 175 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 1.000000 }, // SKINID 176 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 1.000000 }, // SKINID 177 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 178 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.399999, 1.000000 }, // SKINID 179 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.399999, 1.000000 }, // SKINID 180 || WatchType1 -
	{ 0.000000, -0.009999, 0.009999, 90.000000, 90.000000, 90.000000, 1.200000, 1.299999, 1.000000 }, // SKINID 181 || WatchType1 -
	{ 0.000000, -0.009999, 0.009999, 90.000000, 90.000000, 90.000000, 1.200000, 1.299999, 0.0 }, // SKINID 182 || WatchType1 - NO
	{ 0.000000, -0.009999, 0.009999, 90.000000, 90.000000, 90.000000, 1.200000, 1.299999, 0.0 }, // SKINID 183 || WatchType1 - NO
	{ 0.000000, -0.008000, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.399999, 1.000000 }, // SKINID 184 || WatchType1 -
	{ 0.000000, -0.001500, 0.002000, 90.000000, 90.000000, 90.000000, 1.100000, 1.299999, 1.000000 }, // SKINID 185 || WatchType1 -
	{ 0.000000, -0.001500, 0.002000, 90.000000, 90.000000, 90.000000, 1.100000, 1.299999, 0.0 }, // SKINID 186 || WatchType1 - NO
	{ 0.000000, -0.001500, 0.002000, 90.000000, 90.000000, 90.000000, 1.100000, 1.299999, 0.0 }, // SKINID 187 || WatchType1 - NO
	{ 0.000000, -0.001500, -0.002000, 90.000000, 90.000000, 90.000000, 1.200000, 1.299999, 1.000000 }, // SKINID 188 || WatchType1 -
	{ 0.000000, -0.001500, 0.000000, 90.000000, 90.000000, 90.000000, 1.200000, 1.299999, 1.000000 }, // SKINID 189 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 190 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 191 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 192 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 193 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 194 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 195 || WatchType1 -
	{ 0.000000, -0.009999, 0.009999, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 196 || WatchType1 -
	{ 0.000000, -0.009999, 0.009999, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 197 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 198 || WatchType1 -
	{ 0.000000, -0.009999, 0.009999, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 199 || WatchType1 -
	{ 0.019999, 0.001000, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 1.000000 }, // SKINID 200 || WatchType1 -
	{ 0.000000, -0.008000, -0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 201 || WatchType1 -
	{ 0.000000, -0.008999, 0.004999, 90.000000, 90.000000, 90.000000, 1.100000, 1.350000, 1.000000 }, // SKINID 202 || WatchType1 -
	{ 0.000000, -0.008999, 0.004999, 90.000000, 90.000000, 90.000000, 1.100000, 1.350000, 0.0 }, // SKINID 203 || WatchType1 - NO
	{ 0.000000, -0.008999, 0.004999, 90.000000, 90.000000, 90.000000, 1.100000, 1.350000, 0.0 }, // SKINID 204 || WatchType1 - NO
	{ -0.009999, -0.008999, 0.000000, 90.000000, 90.000000, 90.000000, 1.100000, 1.500000, 1.000000 }, // SKINID 205 || WatchType1 -
	{ -0.009999, -0.008999, 0.004999, 90.000000, 90.000000, 90.000000, 1.100000, 1.500000, 1.000000 }, // SKINID 206 || WatchType1 -
	{ -0.009999, -0.008999, 0.004999, 90.000000, 90.000000, 90.000000, 1.100000, 1.500000, 1.000000 }, // SKINID 207 || WatchType1 -
	{ -0.009999, -0.008999, 0.004999, 90.000000, 90.000000, 90.000000, 1.100000, 1.500000, 0.0 }, // SKINID 208 || WatchType1 - NO
	{ -0.009999, -0.008999, -0.009999, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 209 || WatchType1 -
	{ -0.009999, -0.008999, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 210 || WatchType1 -
	{ -0.009999, -0.004999, 0.001000, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 211 || WatchType1 -
	{ -0.009999, -0.004999, 0.001000, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 212 || WatchType1 - NO
	{ -0.009999, -0.004999, 0.001000, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 213 || WatchType1 - NO
	{ -0.009999, -0.008999, 0.001000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 214 || WatchType1 -
	{ -0.009999, -0.008999, -0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 215 || WatchType1 -
	{ -0.009999, -0.008999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.100000, 1.000000 }, // SKINID 216 || WatchType1 -
	{ -0.009999, 0.001000, 0.000000, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 1.000000 }, // SKINID 217 || WatchType1 -
	{ -0.009999, 0.001000, 0.000000, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 0.0 }, // SKINID 218 || WatchType1 - NO
	{ -0.009999, 0.001000, 0.000000, 90.000000, 90.000000, 90.000000, 1.200000, 1.500000, 0.0 }, // SKINID 219 || WatchType1 - NO
	{ 0.001000, -0.004999, 0.002000, 90.000000, 90.000000, 90.000000, 1.399999, 1.600000, 1.000000 }, // SKINID 220 || WatchType1 -
	{ 0.001000, -0.009999, 0.004999, 90.000000, 90.000000, 90.000000, 1.100000, 1.299999, 1.000000 }, // SKINID 221 || WatchType1 -
	{ 0.001000, -0.009999, 0.004999, 90.000000, 90.000000, 90.000000, 1.100000, 1.299999, 1.000000 }, // SKINID 222 || WatchType1 -
	{ 0.001000, -0.009999, 0.004999, 90.000000, 90.000000, 90.000000, 1.100000, 1.299999, 1.000000 }, // SKINID 223 || WatchType1 -
	{ 0.001000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 224 || WatchType1 -
	{ 0.001000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 225 || WatchType1 -
	{ 0.001000, -0.009999, -0.002000, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 226 || WatchType1 -
	{ 0.001000, -0.009999, -0.002000, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 0.0 }, // SKINID 227 || WatchType1 - NO
	{ 0.001000, -0.009999, -0.002000, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 0.0 }, // SKINID 228 || WatchType1 - NO
	{ 0.001000, -0.009999, 0.001500, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 229 || WatchType1 -
	{ 0.001000, -0.009999, 0.001500, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 230 || WatchType1 - NO
	{ -0.009999, -0.009999, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 231 || WatchType1 -
	{ -0.009999, -0.009999, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 0.0 }, // SKINID 232 || WatchType1 - NO
	{ -0.009999, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 233 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 234 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 235 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 236 || WatchType1 -
	{ 0.000000, -0.004999, 0.009999, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 237 || WatchType1 -
	{ 0.000000, -0.004999, -0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 238 || WatchType1 -
	{ 0.000000, -0.004999, -0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 0.0 }, // SKINID 239 || WatchType1 - NO
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.100000, 1.399999, 1.000000 }, // SKINID 240 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.399999, 1.600000, 1.000000 }, // SKINID 241 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.399999, 1.600000, 1.000000 }, // SKINID 242 || WatchType1 -
	{ 0.000000, -0.012000, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.350000, 1.000000 }, // SKINID 243 || WatchType1 -
	{ 0.000000, -0.008000, -0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 1.000000 }, // SKINID 244 || WatchType1 -
	{ 0.000000, -0.019999, 0.004999, 90.000000, 90.000000, 90.000000, 1.000000, 1.450000, 1.000000 }, // SKINID 245 || WatchType1 -
	{ 0.000000, -0.014999, -0.002000, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 246 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.600000, 1.000000 }, // SKINID 247 || WatchType1 -
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.600000, 0.0 }, // SKINID 248 || WatchType1 - NO
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.600000, 0.0 }, // SKINID 249 || WatchType1 - NO
	{ 0.000000, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.200000, 1.600000, 1.000000 }, // SKINID 250 || WatchType1 -
	{ 0.000000, -0.004999, 0.001000, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 251 || WatchType1 -
	{ 0.000000, 0.003000, 0.003000, 90.000000, 90.000000, 90.000000, 1.100000, 1.399999, 1.000000 }, // SKINID 252 || WatchType1 -
	{ 0.000000, 0.003000, 0.003000, 90.000000, 90.000000, 90.000000, 1.100000, 1.399999, 0.0 }, // SKINID 253 || WatchType1 - NO
	{ -0.009999, -0.009999, -0.004999, 90.000000, 90.000000, 90.000000, 1.350000, 1.600000, 1.000000 }, // SKINID 254 || WatchType1 -
	{ 0.000000, -0.014999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.299999, 1.000000 }, // SKINID 255 || WatchType1 -
	{ 0.000000, -0.014999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 1.000000 }, // SKINID 256 || WatchType1 -
	{ 0.000000, -0.004999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 1.000000 }, // SKINID 257 || WatchType1 - 
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 258 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 259 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 260 || WatchType1 - NO
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 261 || WatchType1 - NO
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 262 || WatchType1 - NO
	{ 0.000000, -0.009999, -0.002499, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 263 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.500000, 1.500000, 1.000000 }, // SKINID 264 || WatchType1 -
	{ 0.000000, 0.004999, 0.009999, 90.000000, 90.000000, 90.000000, 1.000000, 1.399999, 1.000000 }, // SKINID 265 || WatchType1 -
	{ 0.000000, -0.008999, 0.002000, 90.000000, 90.000000, 90.000000, 1.000000, 1.200000, 1.000000 }, // SKINID 266 || WatchType1 -
	{ 0.000000, -0.003000, 0.009999, 90.000000, 90.000000, 90.000000, 1.000000, 1.299999, 1.000000 }, // SKINID 267 || WatchType1 -
	{ -0.029999, -0.003000, 0.000000, 90.000000, 90.000000, 90.000000, 1.100000, 1.299999, 1.000000 }, // SKINID 268 || WatchType1 -
	{ 0.000000, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.200000, 1.600000, 1.000000 }, // SKINID 269 || WatchType1 -
	{ -0.009999, -0.004999, -0.009999, 90.000000, 90.000000, 90.000000, 1.090000, 1.299999, 1.000000 }, // SKINID 270 || WatchType1 -
	{ -0.009999, -0.004999, -0.009999, 90.000000, 90.000000, 90.000000, 1.090000, 1.299999, 0.0 }, // SKINID 271 || WatchType1 - NO
	{ -0.009999, -0.004999, -0.009999, 90.000000, 90.000000, 90.000000, 1.090000, 1.299999, 0.0 }, // SKINID 272 || WatchType1 - NO
	{ -0.009999, -0.003000, 0.000000, 0.000000, 90.000000, 180.000000, 1.149999, 1.200000, 1.100000 }, // SKINID 273 || WatchType1 - NO
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 274 || WatchType1 -
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 275 || WatchType1 -
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 276 || WatchType1 -
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 277 || WatchType1 - NO
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 278 || WatchType1 - NO
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 279 || WatchType1 - NO
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 280 || WatchType1 -
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 281 || WatchType1 -
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 282 || WatchType1 -
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 283 || WatchType1 -
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 284 || WatchType1 - NO
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 285 || WatchType1 - NO
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 286 || WatchType1 - NO
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 287 || WatchType1 - NO
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 288 || WatchType1 -
	{ -0.009999, -0.003000, 0.000000, 0.000000, 90.000000, 180.000000, 1.200000, 1.299999, 1.100000 }, // SKINID 289 || WatchType1 - NO
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 290 || WatchType1 - NO
	{ -0.019999, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 291 || WatchType1 -
	{ 0.000000, -0.004999, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 292 || WatchType1 -
	{ -0.009999, -0.009999, -0.009999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 293 || WatchType1 -
	{ -0.009999, -0.009999, -0.009999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 294 || WatchType1 - NO
	{ -0.009999, -0.009999, -0.009999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 295 || WatchType1 - NO
	{ -0.009999, -0.009999, -0.009999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 0.0 }, // SKINID 296 || WatchType1 - NO
	{ -0.009999, 0.001000, 0.004999, 90.000000, 90.000000, 90.000000, 1.299999, 1.399999, 1.000000 }, // SKINID 297 || WatchType1 -
	{ -0.019999, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 298 || WatchType1 -
	{ -0.019999, -0.009999, 0.000000, 90.000000, 90.000000, 90.000000, 1.000000, 1.000000, 0.0 } // SKINID 299 || WatchType1 - NO
};
new Float:POS_Accesorio_Gorra[300][9] = {
	{ 0.0, -0.001184, -0.011706, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 0 || Hat1 - NO
	{ 0.147006, -0.001184, -0.011706, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 1 || Hat1 - SI
	{ 0.0, -0.001184, -0.011706, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 2 || Hat1 - NO
	{ 0.150000, -0.009999, -0.009999, 0.000000, 0.000000, 350.000000, 1.000000, 1.100000, 1.100000 }, // SKINID 3 || Hat1 - NO
	{ 0.170000, -0.009999, -0.009999, 0.000000, 0.000000, 350.000000, 1.100000, 1.100000, 1.100000 }, // SKINID 4 || Hat1 - NO
	{ 0.170000, -0.009999, -0.009999, 0.000000, 0.000000, 350.000000, 1.100000, 1.100000, 1.100000 }, // SKINID 5 || Hat1 - NO
	{ 0.0, -0.001184, -0.011706, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 6 || Hat1 - NO
	{ 0.157924, 0.007884, -0.011706, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 7 || Hat1 - SI
	{ 0.0, 0.007884, -0.011706, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 8 || Hat1 - NO
	{ 0.144114, -0.004404, -0.011706, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 9 || Hat1 - SI
	{ 0.144114, -0.004404, -0.011706, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 10 || Hat1 - SI
	{ 0.144114, -0.004404, -0.011706, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 11 || Hat1 - SI
	{ 0.144114, -0.004404, -0.011706, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 12 || Hat1 - SI
	{ 0.0, -0.004404, -0.011706, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 13 || Hat1 - NO
	{ 0.157687, 0.007467, -0.001244, 0.000000, 0.000000, 0.000000, 1.116931, 1.000000, 1.096179 }, // SKINID 14 || Hat1 - SI
	{ 0.117256, -0.017124, -0.006678, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 15 || Hat1 - SI
	{ 0.0, -0.017124, -0.006678, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 16 || Hat1 - NO
	{ 0.141728, 0.004894, -0.006678, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 17 || Hat1 - SI
	{ 0.109599, -0.003742, -0.006678, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 18 || Hat1 - SI
	{ 0.0, -0.003742, -0.006678, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 19 || Hat1 - NO
	{ 0.161143, -0.003742, -0.006678, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 20 || Hat1 - SI
	{ 0.145060, 0.010652, -0.005882, 0.000000, 0.000000, 0.000000, 1.067082, 1.000000, 1.057644 }, // SKINID 21 || Hat1 - SI
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 22 || Hat1 - NO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 23 || Hat1 - NO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 24 || Hat1 - NO
	{ 0.125074, 0.010768, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.059803 }, // SKINID 25 || Hat1 - SI
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 26 || Hat1 - NO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 27 || Hat1 - NO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 28 || Hat1 - NO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 29 || Hat1 - NO
	{ 0.155565, 0.000000, -0.008439, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 30 || Hat1 - SI
	{ 0.0, 0.000000, -0.008439, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 31 || Hat1 - NO
	{ 0.0, 0.000000, -0.008439, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 32 || Hat1 - NO
	{ 0.0, 0.000000, -0.008439, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 33 || Hat1 - NO
	{ 0.0, 0.000000, -0.008439, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 34 || Hat1 - NO
	{ 0.0, 0.000000, -0.008439, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 35 || Hat1 - NO
	{ 0.0, 0.000000, -0.008439, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 36 || Hat1 - NO
	{ 0.0, 0.000000, -0.008439, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 37 || Hat1 - NO
	{ 0.0, 0.000000, -0.008439, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 38 || Hat1 - NO
	{ 0.117316, 0.000000, -0.008439, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 39 || Hat1 - SI
	{ 0.140639, -0.013137, -0.005318, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.113420 }, // SKINID 40 || Hat1 - SI
	{ 0.0, -0.013137, -0.005318, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.113420 }, // SKINID 41 || Hat1 - NO
	{ 0.119999, -0.009999, -0.009999, 0.000000, 0.000000, 340.000000, 1.000000, 1.049999, 1.100000 }, // SKINID 42 || Hat1 - NO
	{ 0.079176, 0.007249, -0.005318, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.113420 }, // SKINID 43 || Hat1 - SI
	{ 0.108785, 0.028155, -0.005318, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 0.929156 }, // SKINID 44 || Hat1 - SI
	{ 0.098622, 0.004937, -0.011623, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 45 || Hat1 - SI
	{ 0.154583, 0.015235, -0.010507, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 46 || Hat1 - SI
	{ 0.154583, 0.015235, -0.010507, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 47 || Hat1 - SI
	{ 0.167671, -0.013713, -0.010507, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 48 || Hat1 - SI
	{ 0.138361, 0.000096, -0.010507, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 49 || Hat1 - SI
	{ 0.0, 0.000096, -0.010507, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 50 || Hat1 - NO
	{ 0.0, 0.000096, -0.010507, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 51 || Hat1 - NO
	{ 0.0, 0.000096, -0.010507, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 52 || Hat1 - NO
	{ 0.0, 0.000096, -0.010507, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 53 || Hat1 - NO
	{ 0.126658, 0.032032, 0.000709, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.100494 }, // SKINID 54 || Hat1 - SI
	{ 0.130603, -0.008772, -0.007212, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.162167 }, // SKINID 55 || Hat1 - SI
	{ 0.130603, -0.008772, -0.007212, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.162167 }, // SKINID 56 || Hat1 - SI
	{ 0.180383, -0.003232, -0.007212, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.036939 }, // SKINID 57 || Hat1 - SI
	{ 0.125167, -0.003232, -0.004390, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 0.930845 }, // SKINID 58 || Hat1 - SI
	{ 0.173983, -0.017257, -0.009368, 4.751676, 358.352539, 346.646514, 1.000000, 1.000000, 1.000000 }, // SKINID 59 || Hat1 - SI
	{ 0.150744, -0.017257, -0.009368, 4.751676, 358.352539, 346.646514, 1.000000, 1.000000, 1.000000 }, // SKINID 60 || Hat1 - SI
	{ 0.0, -0.017257, -0.009368, 4.751676, 358.352539, 346.646514, 1.000000, 1.000000, 1.000000 }, // SKINID 61 || Hat1 - NO
	{ 0.141376, 0.002625, -0.000497, 4.751676, 358.352539, 346.646514, 1.000000, 1.000000, 1.000000 }, // SKINID 62 || Hat1 - SI
	{ 0.153904, -0.003380, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 63 || Hat1 - SI
	{ 0.129322, -0.003380, -0.009152, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 64 || Hat1 - SI
	{ 0.0, -0.003380, -0.009152, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 65 || Hat1 - NO
	{ 0.129322, 0.021090, -0.009152, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 66 || Hat1 - SI
	{ 0.0, 0.021090, -0.009152, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 67 || Hat1 - NO
	{ 0.130530, 0.021090, -0.009152, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 68 || Hat1 - SI
	{ 0.148960, -0.012263, -0.009152, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 69 || Hat1 - SI
	{ 0.148960, 0.010975, 0.000065, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 70 || Hat1 - SI
	{ 0.0, 0.010975, 0.000065, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 71 || Hat1 - NO
	{ 0.130530, 0.016904, -0.005821, 0.000000, 0.000000, 352.484680, 1.000000, 1.000000, 1.000000 }, // SKINID 72 || Hat1 - SI
	{ 0.0, 0.016904, -0.005821, 0.000000, 0.000000, 352.484680, 1.000000, 1.000000, 1.000000 }, // SKINID 73 || Hat1 - NO
	{ 0.0, 0.016904, -0.005821, 0.000000, 0.000000, 352.484680, 1.000000, 1.000000, 1.000000 }, // SKINID 74 || Hat1 - NO
	{ 0.0, 0.016904, -0.005821, 0.000000, 0.000000, 352.484680, 1.000000, 1.000000, 1.000000 }, // SKINID 75 || Hat1 - NO
	{ 0.153769, -0.012621, -0.005821, 0.000000, 0.000000, 352.484680, 1.000000, 1.000000, 1.000000 }, // SKINID 76 || Hat1 - SI
	{ 0.0, -0.012621, -0.005821, 0.000000, 0.000000, 352.484680, 1.000000, 1.000000, 1.000000 }, // SKINID 77 || Hat1 - NO
	{ 0.0, -0.012621, -0.005821, 0.000000, 0.000000, 352.484680, 1.000000, 1.000000, 1.000000 }, // SKINID 78 || Hat1 - NO
	{ 0.0, -0.012621, -0.005821, 0.000000, 0.000000, 352.484680, 1.000000, 1.000000, 1.000000 }, // SKINID 79 || Hat1 - NO
	{ 0.120414, -0.012621, -0.005821, 0.000000, 0.000000, 352.484680, 1.000000, 1.000000, 1.000000 }, // SKINID 80 || Hat1 - SI
	{ 0.120414, -0.012621, -0.005821, 0.000000, 0.000000, 352.484680, 1.000000, 1.000000, 1.000000 }, // SKINID 81 || Hat1 - SI
	{ 0.179196, -0.029663, -0.005821, 0.000000, 0.000000, 328.924438, 1.000000, 1.000000, 1.000000 }, // SKINID 82 || Hat1 - SI
	{ 0.179196, -0.029663, -0.005821, 0.000000, 0.000000, 328.924438, 1.000000, 1.000000, 1.000000 }, // SKINID 83 || Hat1 - SI
	{ 0.179196, -0.029663, -0.005821, 0.000000, 0.000000, 328.924438, 1.000000, 1.000000, 1.000000 }, // SKINID 84 || Hat1 - SI
	{ 0.0, -0.012682, 0.000000, 0.000000, 0.000000, 352.724517, 1.000000, 1.000000, 1.000000 }, // SKINID 85 || Hat1 - NO
	{ 0.109999, -0.019999, -0.009999, 0.000000, 0.000000, 340.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 86 || Hat1 - NO
	{ 0.0, -0.012682, 0.000000, 0.000000, 0.000000, 352.724517, 1.000000, 1.000000, 1.000000 }, // SKINID 87 || Hat1 - NO
	{ 0.0, -0.012682, 0.000000, 0.000000, 0.000000, 352.724517, 1.000000, 1.000000, 1.000000 }, // SKINID 88 || Hat1 - NO
	{ 0.0, -0.012682, 0.000000, 0.000000, 0.000000, 352.724517, 1.000000, 1.000000, 1.000000 }, // SKINID 89 || Hat1 - NO
	{ 0.0, -0.012682, 0.000000, 0.000000, 0.000000, 352.724517, 1.000000, 1.000000, 1.000000 }, // SKINID 90 || Hat1 - NO
	{ 0.158553, -0.025459, 0.000000, 0.000000, 0.000000, 347.299774, 1.000000, 1.000000, 1.000000 }, // SKINID 91 || Hat1 - SI
	{ 0.0, -0.025459, 0.000000, 0.000000, 0.000000, 347.299774, 1.000000, 1.000000, 1.000000 }, // SKINID 92 || Hat1 - NO
	{ 0.138744, -0.045086, -0.002152, 0.000000, 0.000000, 332.370269, 1.000000, 1.000000, 1.000000 }, // SKINID 93 || Hat1 - SI
	{ 0.0, -0.045086, -0.002152, 0.000000, 0.000000, 332.370269, 1.000000, 1.000000, 1.000000 }, // SKINID 94 || Hat1 - NO
	{ 0.117933, -0.031610, -0.002152, 0.000000, 0.000000, 337.346343, 1.000000, 1.000000, 1.000000 }, // SKINID 95 || Hat1 - SI
	{ 0.133088, -0.005893, -0.004789, 0.000000, 0.000000, 337.346343, 1.000000, 1.000000, 1.000000 }, // SKINID 96 || Hat1 - SI
	{ 0.121521, -0.029133, -0.004789, 0.000000, 0.000000, 337.346343, 1.000000, 1.000000, 1.000000 }, // SKINID 97 || Hat1 - SI
	{ 0.147238, -0.013274, -0.004789, 0.000000, 0.000000, 337.346343, 1.000000, 1.000000, 1.000000 }, // SKINID 98 || Hat1 - SI
	{ 0.0, -0.013274, -0.004789, 0.000000, 0.000000, 337.346343, 1.000000, 1.000000, 1.000000 }, // SKINID 99 || Hat1 - NO
	{ 0.168932, -0.050146, -0.004789, 0.000000, 0.000000, 331.010528, 1.000000, 1.000000, 1.000000 }, // SKINID 100 || Hat1 - SI
	{ 0.145517, -0.035615, -0.009948, 0.000000, 0.000000, 336.179534, 1.103076, 1.000000, 1.082140 }, // SKINID 101 || Hat1 - SI.
	{ 0.0, -0.035615, -0.009948, 0.000000, 0.000000, 336.179534, 1.103076, 1.000000, 1.082140 }, // SKINID 102 || Hat1 - NO
	{ 0.0, -0.035615, -0.009948, 0.000000, 0.000000, 336.179534, 1.103076, 1.000000, 1.082140 }, // SKINID 103 || Hat1 - NO
	{ 0.0, -0.035615, -0.009948, 0.000000, 0.000000, 336.179534, 1.103076, 1.000000, 1.082140 }, // SKINID 104 || Hat1 - NO
	{ 0.0, -0.035615, -0.009948, 0.000000, 0.000000, 336.179534, 1.103076, 1.000000, 1.082140 }, // SKINID 105 || Hat1 - NO
	{ 0.152731, -0.020035, -0.009948, 0.000000, 0.000000, 339.606719, 1.103076, 1.000000, 1.200073 }, // SKINID 106 || Hat1 - SI.
	{ 0.0, -0.020035, -0.009948, 0.000000, 0.000000, 339.606719, 1.103076, 1.000000, 1.200073 }, // SKINID 107 || Hat1 - NO.
	{ 0.0, -0.020035, -0.009948, 0.000000, 0.000000, 339.606719, 1.103076, 1.000000, 1.200073 }, // SKINID 108 || Hat1 - NO.
	{ 0.0, -0.020035, -0.009948, 0.000000, 0.000000, 339.606719, 1.103076, 1.000000, 1.200073 }, // SKINID 109 || Hat1 - NO.
	{ 0.0, -0.020035, -0.009948, 0.000000, 0.000000, 339.606719, 1.103076, 1.000000, 1.200073 }, // SKINID 110 || Hat1 - NO.
	{ 0.129386, -0.002775, -0.009948, 0.000000, 0.000000, 341.769042, 0.998616, 1.000000, 0.954466 }, // SKINID 111 || Hat1 - SI.
	{ 0.0, -0.002775, -0.009948, 0.000000, 0.000000, 341.769042, 0.998616, 1.000000, 0.954466 }, // SKINID 112 || Hat1 - NO.
	{ 0.161488, -0.006758, -0.007789, 0.000000, 0.000000, 350.751190, 0.889050, 1.000000, 1.017401 }, // SKINID 113 || Hat1 - SI.
	{ 0.0, -0.006758, -0.007789, 0.000000, 0.000000, 350.751190, 0.889050, 1.000000, 1.017401 }, // SKINID 114 || Hat1 - NO.
	{ 0.0, -0.006758, -0.007789, 0.000000, 0.000000, 350.751190, 0.889050, 1.000000, 1.017401 }, // SKINID 115 || Hat1 - NO
	{ 0.0, -0.006758, -0.007789, 0.000000, 0.000000, 350.751190, 0.889050, 1.000000, 1.017401 }, // SKINID 116 || Hat1 - NO
	{ 0.118653, 0.012436, -0.007789, 0.000000, 0.000000, 350.751190, 0.889050, 1.000000, 1.017401 }, // SKINID 117 || Hat1 - SI.
	{ 0.118653, 0.012436, -0.007789, 0.000000, 0.000000, 350.751190, 0.889050, 1.000000, 1.017401 }, // SKINID 118 || Hat1 - SI.
	{ 0.129999, 0.008000, -0.009999, 0.000000, 0.000000, 350.000000, 1.000000, 1.000000, 1.100000 }, // SKINID 119 || Hat1 - SI.
	{ 0.146318, -0.025716, -0.007789, 0.000000, 0.000000, 341.909881, 0.937113, 1.000000, 1.036702 }, // SKINID 120 || Hat1 - SI.
	{ 0.139072, -0.015518, -0.007789, 0.000000, 0.000000, 341.909881, 0.937113, 1.000000, 1.056487 }, // SKINID 121 || Hat1 - SI
	{ 0.127783, -0.009892, -0.007789, 0.000000, 0.000000, 341.909881, 0.937113, 1.000000, 1.056487 }, // SKINID 122 || Hat1 - SI.
	{ 0.157737, -0.028794, -0.007789, 0.000000, 0.000000, 341.909881, 0.937113, 1.000000, 1.151306 }, // SKINID 123 || Hat1 - SI.
	{ 0.157737, -0.017608, -0.007789, 0.000000, 0.000000, 341.909881, 0.937113, 1.000000, 1.036304 }, // SKINID 124 || Hat1 - SI.
	{ 0.131404, -0.002766, -0.007789, 0.000000, 0.000000, 341.909881, 0.937113, 1.000000, 0.941077 }, // SKINID 125 || Hat1 - SI.
	{ 0.144064, -0.039942, -0.007789, 0.000000, 0.000000, 328.634490, 0.937113, 1.000000, 1.010850 }, // SKINID 126 || Hat1 - SI.
	{ 0.139717, -0.024194, -0.007789, 0.000000, 0.000000, 328.634490, 0.937113, 1.000000, 1.074444 }, // SKINID 127 || Hat1 - SI.
	{ 0.147450, -0.033581, -0.007789, 0.000000, 0.000000, 326.999328, 0.937113, 1.000000, 1.132529 }, // SKINID 128 || Hat1 - SI.
	{ 0.088559, 0.001517, -0.007789, 0.000000, 0.000000, 326.999328, 1.338058, 1.000000, 0.888771 }, // SKINID 129 || Hat1 - SI.
	{ 0.058958, -0.002415, -0.010912, 0.000000, 0.000000, 326.999328, 0.988968, 1.000000, 1.128769 }, // SKINID 130 || Hat1 - SI.
	{ 0.123863, -0.002415, -0.010912, 0.000000, 0.000000, 350.770904, 0.988968, 1.000000, 1.073865 }, // SKINID 131 || Hat1 - SI.
	{ 0.056407, -0.012276, -0.010912, 0.000000, 0.000000, 350.770904, 0.684180, 1.000000, 0.894486 }, // SKINID 132 || Hat1 - SI.
	{ 0.0, -0.012276, -0.010912, 0.000000, 0.000000, 350.770904, 0.684180, 1.000000, 0.894486 }, // SKINID 133 || Hat1 - NO.
	{ 0.0, -0.012276, -0.010912, 0.000000, 0.000000, 350.770904, 0.684180, 1.000000, 0.894486 }, // SKINID 134 || Hat1 - NO.
	{ 0.0, -0.012276, -0.010912, 0.000000, 0.000000, 350.770904, 0.684180, 1.000000, 0.894486 }, // SKINID 135 || Hat1 - NO.
	{ 0.0, -0.012276, -0.010912, 0.000000, 0.000000, 350.770904, 0.684180, 1.000000, 0.894486 }, // SKINID 136 || Hat1 - NO.
	{ 0.0, -0.012276, -0.010912, 0.000000, 0.000000, 350.770904, 0.684180, 1.000000, 0.894486 }, // SKINID 137 || Hat1 - NO.
	{ 0.140619, -0.012276, -0.010912, 0.000000, 0.000000, 350.770904, 0.938905, 1.000000, 1.088924 }, // SKINID 138 || Hat1 - SI.
	{ 0.140619, -0.012276, -0.010912, 0.000000, 0.000000, 350.770904, 0.938905, 1.000000, 1.088924 }, // SKINID 139 || Hat1 - SI.
	{ 0.140619, -0.012276, -0.010912, 0.000000, 0.000000, 350.770904, 0.938905, 1.000000, 1.088924 }, // SKINID 140 || Hat1 - SI.
	{ 0.137335, -0.012276, -0.010912, 0.000000, 0.000000, 350.770904, 0.938905, 1.000000, 1.088924 }, // SKINID 141 || Hat1 - SI.
	{ 0.137335, -0.001362, -0.010912, 0.000000, 0.000000, 350.770904, 0.938905, 1.000000, 1.088924 }, // SKINID 142 || Hat1 - SI.
	{ 0.0, -0.001362, -0.010912, 0.000000, 0.000000, 350.770904, 0.938905, 1.000000, 1.088924 }, // SKINID 143 || Hat1 - NO.
	{ 0.193302, -0.027388, -0.010912, 0.000000, 0.000000, 350.770904, 0.938905, 1.000000, 1.279586 }, // SKINID 144 || Hat1 - SI.
	{ 0.138405, -0.005317, -0.008311, 0.000000, 0.000000, 350.770904, 0.938905, 1.000000, 0.984671 }, // SKINID 145 || Hat1 - SI.
	{ 0.138405, -0.005317, -0.008311, 0.000000, 0.000000, 350.770904, 0.938905, 1.000000, 0.984671 }, // SKINID 146 || Hat1 - SI.
	{ 0.130529, -0.019639, -0.001685, 0.000000, 0.000000, 350.770904, 0.938905, 1.000000, 0.984671 }, // SKINID 147 || Hat1 - SI.
	{ 0.143284, -0.026097, -0.004171, 0.000000, 0.000000, 350.770904, 0.969615, 1.000000, 1.084500 }, // SKINID 148 || Hat1 - SI.
	{ 0.0, -0.026097, -0.004171, 0.000000, 0.000000, 350.770904, 0.969615, 1.000000, 1.084500 }, // SKINID 149 || Hat1 - NO:
	{ 0.124033, -0.035304, -0.004789, 0.000000, 0.000000, 323.380035, 1.000000, 1.000000, 0.939360 }, // SKINID 150 || Hat1 - SI
	{ 0.0, -0.035304, -0.004789, 0.000000, 0.000000, 323.380035, 1.000000, 1.000000, 0.939360 }, // SKINID 151 || Hat1 - NO
	{ 0.124033, -0.035304, -0.004789, 0.000000, 0.000000, 336.253540, 1.000000, 1.000000, 0.939360 }, // SKINID 152 || Hat1 - SI
	{ 0.0, -0.035304, -0.004789, 0.000000, 0.000000, 336.253540, 1.000000, 1.000000, 0.939360 }, // SKINID 153 || Hat1 - NO
	{ 0.120277, -0.025589, -0.004789, 0.000000, 0.000000, 339.665893, 1.000000, 1.000000, 0.984497 }, // SKINID 154 || Hat1 - SI
	{ 0.0, -0.025589, -0.004789, 0.000000, 0.000000, 339.665893, 1.000000, 1.000000, 0.984497 }, // SKINID 155 || Hat1 - NO
	{ 0.166981, -0.054828, -0.002724, 0.000000, 0.000000, 338.964263, 1.143386, 1.000000, 1.244510 }, // SKINID 156 || Hat1 - SI
	{ 0.112918, 0.000000, -0.003829, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.000000 }, // SKINID 157 || Hat1 - SI
	{ 0.0, 0.000000, -0.003829, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.000000 }, // SKINID 158 || Hat1 - NO
	{ 0.0, 0.000000, -0.003829, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.000000 }, // SKINID 159 || Hat1 - NO
	{ 0.112918, 0.000000, -0.003829, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.000000 }, // SKINID 160 || Hat1 - SI
	{ 0.0, 0.000000, -0.003829, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.000000 }, // SKINID 161 || Hat1 - NO
	{ 0.141787, -0.010452, -0.003829, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.000000 }, // SKINID 162 || Hat1 - SI
	{ 0.120976, 0.001487, -0.003829, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.000000 }, // SKINID 163 || Hat1 - SI
	{ 0.120976, 0.001487, -0.012019, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.000000 }, // SKINID 164 || Hat1 - SI
	{ 0.126610, -0.011195, 0.000242, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.087626 }, // SKINID 165 || Hat1 - SI
	{ 0.126610, -0.011195, 0.000242, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.087626 }, // SKINID 166 || Hat1 - SI
	{ 0.0, -0.011195, 0.000242, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.087626 }, // SKINID 167 || Hat1 - NO
	{ 0.0, -0.011195, 0.000242, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.087626 }, // SKINID 168 || Hat1 - NO
	{ 0.138399, -0.023877, 0.000242, 0.000000, 0.000000, 341.065704, 1.000000, 1.000000, 1.087626 }, // SKINID 169 || Hat1 - SI
	{ 0.138676, -0.000109, -0.007213, 0.000000, 0.000000, 352.167907, 1.000000, 1.000000, 1.037200 }, // SKINID 170 || Hat1 - SI
	{ 0.164229, -0.012904, 0.000000, 0.000000, 0.000000, 351.712768, 1.000000, 1.000000, 1.000000 }, // SKINID 171 || Hat1 - SI
	{ 0.139651, -0.012904, -0.006265, 0.000000, 0.000000, 343.731628, 1.000000, 1.000000, 1.146476 }, // SKINID 172 || Hat1 - SI
	{ 0.0, -0.012904, -0.006265, 0.000000, 0.000000, 343.731628, 1.000000, 1.000000, 1.146476 }, // SKINID 173 || Hat1 - NO
	{ 0.0, -0.012904, -0.006265, 0.000000, 0.000000, 343.731628, 1.000000, 1.000000, 1.146476 }, // SKINID 174 || Hat1 - NO
	{ 0.0, -0.012904, -0.006265, 0.000000, 0.000000, 343.731628, 1.000000, 1.000000, 1.146476 }, // SKINID 175 || Hat1 - NO
	{ 0.139651, -0.036143, -0.006265, 0.000000, 0.000000, 328.196441, 1.000000, 1.000000, 1.146476 }, // SKINID 176 || Hat1 - SI
	{ 0.0, -0.036143, -0.006265, 0.000000, 0.000000, 328.196441, 1.000000, 1.000000, 1.146476 }, // SKINID 177 || Hat1 - NO
	{ 0.0, -0.036143, -0.006265, 0.000000, 0.000000, 328.196441, 1.000000, 1.000000, 1.146476 }, // SKINID 178 || Hat1 - NO
	{ 0.135375, -0.027852, -0.006265, 0.000000, 0.000000, 336.751373, 1.000000, 1.000000, 1.146476 }, // SKINID 179 || Hat1 - SI
	{ 0.164620, -0.054308, -0.009679, 0.000000, 0.000000, 333.560119, 1.000000, 1.000000, 1.146476 }, // SKINID 180 || Hat1 - SI
	{ 0.0, -0.054308, -0.009679, 0.000000, 0.000000, 333.560119, 1.000000, 1.000000, 1.146476 }, // SKINID 181 || Hat1 - NO
	{ 0.141432, 0.000000, -0.011670, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 182 || Hat1 - SI
	{ 0.141432, 0.000000, -0.011670, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 183 || Hat1 - SI
	{ 0.141432, 0.000000, -0.011670, 0.000000, 0.000000, 356.219146, 1.000000, 1.000000, 1.000000 }, // SKINID 184 || Hat1 - SI
	{ 0.167288, -0.027798, -0.004000, 2.629787, 0.000000, 346.775482, 1.000000, 1.000000, 1.000000 }, // SKINID 185 || Hat1 - SI
	{ 0.167288, -0.027798, -0.004000, 2.629787, 0.000000, 346.775482, 1.000000, 1.000000, 1.000000 }, // SKINID 186 || Hat1 - SI
	{ 0.131250, -0.027798, -0.004000, 2.357612, 0.000000, 341.684631, 1.000000, 1.000000, 1.000000 }, // SKINID 187 || Hat1 - SI
	{ 0.131250, -0.013544, -0.004000, 2.357612, 0.000000, 341.684631, 1.000000, 1.000000, 1.000000 }, // SKINID 188 || Hat1 - SI
	{ 0.178727, -0.021390, -0.004000, 2.357612, 0.000000, 356.365539, 1.000000, 1.000000, 1.000000 }, // SKINID 189 || Hat1 - SI
	{ 0.172598, -0.034072, -0.007253, 2.357612, 0.000000, 340.687713, 1.000000, 1.000000, 1.000000 }, // SKINID 190 || Hat1 - SI
	{ 0.172598, -0.034072, -0.007253, 2.357612, 0.000000, 340.687713, 1.000000, 1.000000, 1.147821 }, // SKINID 191 || Hat1 - SI
	{ 0.167594, -0.034072, -0.007253, 2.357612, 0.000000, 342.403717, 1.000000, 1.000000, 1.147821 }, // SKINID 192 || Hat1 - SI
	{ 0.167594, -0.034072, -0.007253, 2.357612, 0.000000, 342.403717, 1.000000, 1.000000, 1.147821 }, // SKINID 193 || Hat1 - SI
	{ 0.167594, -0.034072, -0.007253, 2.357612, 0.000000, 342.403717, 1.000000, 1.000000, 1.147821 }, // SKINID 194 || Hat1 - SI
	{ 0.0, -0.034072, -0.007253, 2.357612, 0.000000, 342.403717, 1.000000, 1.000000, 1.147821 }, // SKINID 195 || Hat1 - NO
	{ 0.0, -0.034072, -0.007253, 2.357612, 0.000000, 342.403717, 1.000000, 1.000000, 1.147821 }, // SKINID 196 || Hat1 - NO
	{ 0.0, -0.034072, -0.007253, 2.357612, 0.000000, 342.403717, 1.000000, 1.000000, 1.147821 }, // SKINID 197 || Hat1 - NO
	{ 0.0, -0.034072, -0.007253, 2.357612, 0.000000, 342.403717, 1.000000, 1.000000, 1.147821 }, // SKINID 198 || Hat1 - NO
	{ 0.130440, -0.004786, -0.007253, 2.357612, 0.000000, 342.403717, 1.000000, 1.000000, 1.147821 }, // SKINID 199 || Hat1 - SI
	{ 0.146635, 0.001232, -0.007253, 2.357612, 0.000000, 350.655761, 1.000000, 1.000000, 1.147821 }, // SKINID 200 || Hat1 - SI
	{ 0.0, 0.001232, -0.007253, 2.357612, 0.000000, 350.655761, 1.000000, 1.000000, 1.147821 }, // SKINID 201 || Hat1 - NO
	{ 0.0, 0.001232, -0.007253, 2.357612, 0.000000, 350.655761, 1.000000, 1.000000, 1.147821 }, // SKINID 202 || Hat1 - NO
	{ 0.146635, 0.001232, -0.007253, 2.357612, 0.000000, 350.655761, 1.000000, 1.000000, 1.147821 }, // SKINID 203 || Hat1 - SI
	{ 0.146635, 0.001232, -0.007253, 2.357612, 0.000000, 350.655761, 1.000000, 1.000000, 1.147821 }, // SKINID 204 || Hat1 - SI
	{ 0.0, 0.001232, -0.007253, 2.357612, 0.000000, 350.655761, 1.000000, 1.000000, 1.147821 }, // SKINID 205 || Hat1 - NO
	{ 0.146635, 0.005633, -0.007253, 2.357612, 0.000000, 350.655761, 1.000000, 1.000000, 0.937262 }, // SKINID 206 || Hat1 - SI
	{ 0.110713, -0.007261, -0.007253, 2.357612, 0.000000, 350.655761, 1.000000, 1.000000, 0.937262 }, // SKINID 207 || Hat1 - SI
	{ 0.125000, 0.008000, -0.009999, 0.000000, 0.000000, 350.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 208 || Hat1 - NO
	{ 0.0, -0.007261, -0.007253, 2.357612, 0.000000, 350.655761, 1.000000, 1.000000, 0.937262 }, // SKINID 209 || Hat1 - NO
	{ 0.110713, -0.007261, -0.007253, 2.357612, 0.000000, 350.655761, 1.000000, 1.000000, 0.937262 }, // SKINID 210 || Hat1 - SI
	{ 0.147418, -0.025857, -0.004423, 2.357612, 0.000000, 344.286315, 1.000000, 1.000000, 0.937262 }, // SKINID 211 || Hat1 - SI
	{ 0.0, 0.010434, -0.004423, 2.357612, 0.000000, 344.286315, 1.000000, 1.000000, 0.937262 }, // SKINID 212 || Hat1 - NO
	{ 0.146859, -0.020953, -0.004423, 2.357612, 0.000000, 337.401458, 1.000000, 1.000000, 0.937262 }, // SKINID 213 || Hat1 - SI
	{ 0.160636, -0.017604, 0.000000, 0.000000, 0.000000, 358.192840, 1.000000, 1.000000, 1.000000 }, // SKINID 214 || Hat1 - SI
	{ 0.0, -0.017604, 0.000000, 0.000000, 0.000000, 358.192840, 1.000000, 1.000000, 1.000000 }, // SKINID 215 || Hat1 - NO
	{ 0.160636, -0.017604, 0.000000, 0.000000, 0.000000, 358.192840, 1.000000, 1.000000, 1.000000 }, // SKINID 216 || Hat1 - SI
	{ 0.142205, 0.006644, 0.000000, 0.000000, 0.000000, 341.290191, 1.000000, 1.000000, 1.000000 }, // SKINID 217 || Hat1 - SI
	{ 0.0, 0.006644, 0.000000, 0.000000, 0.000000, 341.290191, 1.000000, 1.000000, 1.000000 }, // SKINID 218 || Hat1 - NO
	{ 0.142205, -0.031149, 0.000000, 0.000000, 0.000000, 341.290191, 1.000000, 1.000000, 1.000000 }, // SKINID 219 || Hat1 - SI
	{ 0.0, -0.031149, 0.000000, 0.000000, 0.000000, 341.290191, 1.000000, 1.000000, 1.000000 }, // SKINID 220 || Hat1 - NO
	{ 0.190951, -0.031149, 0.000000, 0.000000, 0.000000, 357.111022, 1.000000, 1.000000, 1.000000 }, // SKINID 221 || Hat1 - SI
	{ 0.190951, -0.031149, 0.000000, 0.000000, 0.000000, 357.111022, 1.000000, 1.000000, 1.000000 }, // SKINID 222 || Hat1 - SI
	{ 0.190951, -0.007435, 0.000000, 0.000000, 0.000000, 352.024505, 1.000000, 1.000000, 1.000000 }, // SKINID 223 || Hat1 - SI
	{ 0.154248, -0.033056, 0.000000, 0.000000, 0.000000, 341.550415, 1.000000, 1.000000, 1.000000 }, // SKINID 224 || Hat1 - SI
	{ 0.154248, -0.033056, 0.000000, 0.000000, 0.000000, 341.550415, 1.000000, 1.000000, 1.000000 }, // SKINID 225 || Hat1 - SI
	{ 0.142912, -0.033056, 0.000000, 0.000000, 0.000000, 347.592559, 1.000000, 1.000000, 1.000000 }, // SKINID 226 || Hat1 - SI
	{ 0.147534, -0.003579, -0.010556, 0.000000, 0.000000, 341.749206, 1.000000, 1.000000, 1.000000 }, // SKINID 227 || Hat1 - SI
	{ 0.163885, -0.027008, -0.010556, 0.000000, 0.000000, 340.084472, 1.000000, 1.000000, 1.000000 }, // SKINID 228 || Hat1 - SI
	{ 0.126851, -0.037118, -0.010556, 0.000000, 0.000000, 340.084472, 1.000000, 1.000000, 1.000000 }, // SKINID 229 || Hat1 - SI
	{ 0.0, -0.037118, -0.010556, 0.000000, 0.000000, 340.084472, 1.000000, 1.000000, 1.000000 }, // SKINID 230 || Hat1 - NO
	{ 0.0, -0.037118, -0.010556, 0.000000, 0.000000, 340.084472, 1.000000, 1.000000, 1.000000 }, // SKINID 231 || Hat1 - NO
	{ 0.126851, -0.037118, -0.010556, 0.000000, 0.000000, 340.084472, 1.000000, 1.000000, 1.000000 }, // SKINID 232 || Hat1 - SI
	{ 0.146466, -0.037118, -0.010556, 0.000000, 0.000000, 340.084472, 1.000000, 1.000000, 1.000000 }, // SKINID 233 || Hat1 - SI
	{ 0.120998, -0.027749, -0.010556, 0.000000, 0.000000, 340.084472, 1.000000, 1.000000, 1.000000 }, // SKINID 234 || Hat1 - SI
	{ 0.081188, -0.025296, -0.010556, 0.000000, 0.000000, 340.084472, 1.000000, 1.000000, 1.000000 }, // SKINID 235 || Hat1 - SI
	{ 0.120190, -0.027475, -0.010556, 0.000000, 0.000000, 340.084472, 1.000000, 1.000000, 1.000000 }, // SKINID 236 || Hat1 - SI
	{ 0.120190, -0.027475, -0.010556, 0.000000, 0.000000, 336.580200, 1.000000, 1.000000, 1.000000 }, // SKINID 237 || Hat1 - SI
	{ 0.0, -0.027475, -0.010556, 0.000000, 0.000000, 336.580200, 1.000000, 1.000000, 1.000000 }, // SKINID 238 || Hat1 - NO
	{0.0, -0.027475, -0.010556, 0.000000, 0.000000, 336.580200, 1.000000, 1.000000, 1.000000 }, // SKINID 239 || Hat1 - NO
	{ 0.161402, -0.027475, -0.007965, 0.000000, 0.000000, 342.346069, 1.000000, 1.000000, 1.000000 }, // SKINID 240 || Hat1 - SI
	{ 0.0, -0.027475, -0.007965, 0.000000, 0.000000, 342.346069, 1.000000, 1.000000, 1.000000 }, // SKINID 241 || Hat1 - NO
	{ 0.0, -0.027475, -0.007965, 0.000000, 0.000000, 342.346069, 1.000000, 1.000000, 1.000000 }, // SKINID 242 || Hat1 - NO
	{ 0.0, -0.027475, -0.007965, 0.000000, 0.000000, 342.346069, 1.000000, 1.000000, 1.000000 }, // SKINID 243 || Hat1 - NO
	{ 0.0, -0.027475, -0.007965, 0.000000, 0.000000, 342.346069, 1.000000, 1.000000, 1.000000 }, // SKINID 244 || Hat1 - NO
	{ 0.161402, -0.027475, -0.007965, 0.000000, 0.000000, 342.346069, 1.000000, 1.000000, 1.000000 }, // SKINID 245 || Hat1 - SI
	{ 0.0, -0.027475, -0.007965, 0.000000, 0.000000, 342.346069, 1.000000, 1.000000, 1.000000 }, // SKINID 246 || Hat1 - NO
	{ 0.0, -0.027475, -0.007965, 0.000000, 0.000000, 342.346069, 1.000000, 1.000000, 1.000000 }, // SKINID 247 || Hat1 - NO
	{ 0.0, -0.027475, -0.007965, 0.000000, 0.000000, 342.346069, 1.000000, 1.000000, 1.000000 }, // SKINID 248 || Hat1 - NO
	{ 0.0, -0.027475, -0.007965, 0.000000, 0.000000, 342.346069, 1.000000, 1.000000, 1.000000 }, // SKINID 249 || Hat1 - NO
	{ 0.143284, -0.006071, -0.011766, 0.000000, 0.000000, 350.770904, 0.969615, 1.000000, 1.019091 }, // SKINID 250 || Hat1 - SI.
	{ 0.129524, -0.022446, -0.010617, 0.000000, 0.000000, 336.387725, 0.969615, 1.000000, 1.063670 }, // SKINID 251 || Hat1 - SI.
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 252 || Hat1 - NO.
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 253 || Hat1 - NO.
	{ 0.0, 0.000000, -0.006370, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.131554 }, // SKINID 254 || Hat1 - NO.
	{ 0.0, 0.000000, -0.006370, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.131554 }, // SKINID 255 || Hat1 - NO.
	{ 0.0, 0.000000, -0.006370, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.131554 }, // SKINID 256 || Hat1 - NO.
	{ 0.139914, -0.025659, -0.006370, 0.000000, 0.000000, 338.564331, 1.000000, 1.000000, 0.984799 }, // SKINID 257 || Hat1 - SI.
	{ 0.149824, -0.025659, -0.006370, 0.000000, 0.000000, 338.564331, 1.000000, 1.000000, 1.125806 }, // SKINID 258 || Hat1 - SI.
	{ 0.149824, -0.025659, -0.006370, 0.000000, 0.000000, 338.564331, 1.000000, 1.000000, 1.125806 }, // SKINID 259 || Hat1 - SI.
	{ 0.0, -0.025659, -0.006370, 0.000000, 0.000000, 338.564331, 1.000000, 1.000000, 1.125806 }, // SKINID 260 || Hat1 - NO.
	{ 0.0, -0.025659, -0.006370, 0.000000, 0.000000, 338.564331, 1.000000, 1.000000, 1.125806 }, // SKINID 261 || Hat1 - NO.
	{ 0.108261, 0.001541, -0.006370, 0.000000, 0.000000, 338.564331, 1.000000, 1.000000, 0.998337 }, // SKINID 262 || Hat1 - SI.
	{ 0.127416, -0.014097, -0.004904, 0.000000, 0.000000, 341.057495, 1.187035, 1.000000, 1.076132 }, // SKINID 263 || Hat1 - SI.
	{ 0.0, -0.014097, -0.004904, 0.000000, 0.000000, 341.057495, 1.187035, 1.000000, 1.076132 }, // SKINID 264 || Hat1 - NO.
	{ 0.127416, -0.014097, -0.004904, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 0.987667 }, // SKINID 265 || Hat1 - SI.
	{ 0.134032, -0.014307, -0.004904, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 1.053730 }, // SKINID 266 || Hat1 - SI.
	{ 0.131089, -0.031620, -0.004904, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 1.053730 }, // SKINID 267 || Hat1 - SI.
	{ 0.131089, -0.016403, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 1.162479 }, // SKINID 268 || Hat1 - SI.
	{ 0.0, -0.016403, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 1.162479 }, // SKINID 269 || Hat1 - NO.
	{ 0.0, -0.016403, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 1.162479 }, // SKINID 270 || Hat1 - NO.
	{ 0.0, -0.016403, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 1.162479 }, // SKINID 271 || Hat1 - NO.
	{ 0.148665, -0.007365, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 1.108956 }, // SKINID 272 || Hat1 - SI.
	{ 0.125000, -0.009999, -0.009999, 0.000000, 0.000000, 350.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 273 || Hat1 - NO.
	{ 0.132041, -0.007365, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 0.919670 }, // SKINID 274 || Hat1 - SI.
	{ 0.132041, -0.007365, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 0.948305 }, // SKINID 275 || Hat1 - SI.
	{ 0.132041, 0.000721, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 0.948305 }, // SKINID 276 || Hat1 - SI.
	{ 0.0, 0.000721, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 0.948305 }, // SKINID 277 || Hat1 - NO.
	{ 0.0, 0.000721, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 0.948305 }, // SKINID 278 || Hat1 - NO.
	{ 0.0, 0.000721, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 0.948305 }, // SKINID 279 || Hat1 - NO.
	{ 0.133243, 0.000721, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 0.948305 }, // SKINID 280 || Hat1 - SI.
	{ 0.133243, 0.000721, -0.008634, 0.000000, 0.000000, 341.057495, 0.965551, 1.000000, 0.948305 }, // SKINID 281 || Hat1 - SI.
	{ 0.133876, 0.000523, -0.008634, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 1.020910 }, // SKINID 282 || Hat1 - SI.
	{ 0.0, 0.000523, -0.008634, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 1.020910 }, // SKINID 283 || Hat1 - NO.
	{ 0.0, 0.000523, -0.008634, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 1.020910 }, // SKINID 284 || Hat1 - NO.
	{ 0.0, 0.000523, -0.008634, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 1.020910 }, // SKINID 285 || Hat1 - NO.
	{ 0.129142, 0.000523, -0.008634, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 1.020910 }, // SKINID 286 || Hat1 - SI.
	{ 0.0, 0.000523, -0.008634, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 1.020910 }, // SKINID 287 || Hat1 - NO.
	{ 0.0, 0.000523, -0.008634, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 1.020910 }, // SKINID 288 || Hat1 - NO.
	{ 0.0, 0.000523, -0.008634, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 1.020910 }, // SKINID 289 || Hat1 - NO.
	{ 0.122872, -0.007010, -0.008634, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 1.099102 }, // SKINID 290 || Hat1 - SI.
	{ 0.164891, -0.023199, -0.008634, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 1.062029 }, // SKINID 291 || Hat1 - SI.
	{ 0.111781, -0.000514, -0.015303, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 0.959454 }, // SKINID 292 || Hat1 - SI.
	{ 0.0, -0.000514, -0.015303, 0.000000, 0.000000, 341.057495, 1.152778, 1.000000, 0.959454 }, // SKINID 293 || Hat1 - No.
	{ 0.180277, -0.010770, -0.008173, 0.000000, 0.000000, 350.911071, 1.152778, 1.000000, 1.018012 }, // SKINID 294 || Hat1 - SI.
	{ 0.140434, -0.010770, -0.008173, 0.000000, 0.000000, 350.911071, 1.152778, 1.000000, 1.071541 }, // SKINID 295 || Hat1 - SI.
	{ 0.152344, -0.055147, -0.008173, 0.000000, 0.000000, 328.444580, 1.036304, 1.000000, 1.071541 }, // SKINID 296 || Hat1 - SI.
	{ 0.152344, -0.045099, -0.008173, 0.000000, 0.000000, 328.444580, 1.036304, 1.000000, 1.071541 }, // SKINID 297 || Hat1 - SI.
	{ 0.136437, -0.045099, -0.008173, 0.000000, 0.000000, 328.444580, 1.036304, 1.000000, 1.071541 }, // SKINID 298 || Hat1 - SI.
	{ 0.153677, -0.028657, -0.008173, 0.000000, 0.000000, 328.444580, 1.036304, 1.000000, 1.071541 }  // SKINID 299 || Hat1 - SI.
};
new Float:POS_Accesorio_Boina[300][9] = {
	{ 0.180261, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 0 || Beret1 - || BARET ||
	{ 0.180261, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 1 || Beret1 - || BARET ||
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 2 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 3 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 4 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 5 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 6 || Beret1 - NOOOOOOOOO
	{ 0.176095, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 7 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 8 || Beret1 - NOOOOOOOOO
	{ 0.149783, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 9 || Beret1 -
	{ 0.149783, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 10 || Beret1 -
	{ 0.149783, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 11 || Beret1 -
	{ 0.149783, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 12 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 13 || Beret1 - NOOOOOOOOO
	{ 0.149783, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 14 || Beret1 -
	{ 0.149783, -0.028243, -0.001220, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 15 || Beret1 -
	{ 0.0, -0.028243, -0.001220, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 16 || Beret1 - NOOOOOOOOO
	{ 0.156457, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 17 || Beret1 -
	{ 0.118533, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 18 || Beret1 -
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 19 || Beret1 - NOOOOOOOOO
	{ 0.183444, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 20 || Beret1 -
	{ 0.161830, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 21 || Beret1 -
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 22 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 23 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 24 || Beret1 - NOOOOOOOOO
	{ 0.161830, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 25 || Beret1
	{ 0.164234, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 26 || Beret1
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 27 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 28 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 29 || Beret1 - NOOOOOOOOO
	{ 0.164234, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 30 || Beret1 -
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 31 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 32 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 33 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 34 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 35 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 36 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 37 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 38 || Beret1 - NOOOOOOOOO
	{ 0.131527, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 39 || Beret1 -
	{ 0.131527, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 40 || Beret1 -
	{ 0.0, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 41 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 42 || Beret1 - NOOOOOOOOO
	{ 0.104019, 0.001257, -0.001220, 0.000000, 0.000000, 0.000000, 1.121118, 1.000000, 1.089123 }, // SKINID 43 || Beret1 -
	{ 0.128697, 0.022019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 44 || Beret1 -
	{ 0.128697, -0.008573, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 45 || Beret1 -
	{ 0.164191, 0.018399, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 46 || Beret1 -
	{ 0.164305, 0.020698, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 47 || Beret1 -
	{ 0.175181, -0.010091, 0.000000, 0.000000, 0.000000, 0.000000, 1.104145, 1.000000, 1.121630 }, // SKINID 48 || Beret1 -
	{ 0.146655, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 49 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 50 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 51 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 52 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 53 || Beret1 - NOOOOOOOOO
	{ 0.146655, 0.027900, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 54 || Beret1 -
	{ 0.146655, -0.002721, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 55 || Beret1 -
	{ 0.146655, -0.002721, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 56 || Beret1 -
	{ 0.171912, 0.008824, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 57 || Beret1 -
	{ 0.151101, -0.008750, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 58 || Beret1 -
	{ 0.151390, 0.005085, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 59 || Beret1 -
	{ 0.151390, 0.005085, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 60 || Beret1 -
	{ 0.0, 0.005085, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 61 || Beret1 - NOOOOOOOOO
	{ 0.151390, 0.028324, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 62 || Beret1 -
	{ 0.170077, -0.002114, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 63 || Beret1 -
	{ 0.140552, -0.002114, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 64 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 65 || Beret1 - NOOOOOOOOO
	{ 0.140552, 0.026128, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 66 || Beret1 -
	{ 0.0, 0.026128, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 67 || Beret1 - NOOOOOOOOO
	{ 0.151242, 0.019900, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 68 || Beret1 -
	{ 0.159290, -0.005815, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 69 || Beret1 -
	{ 0.159290, 0.010538, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 70 || Beret1 -
	{ 0.0, 0.010538, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 71 || Beret1 - NOOOOOOOOO
	{ 0.159290, 0.010538, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 72 || Beret1 -
	{ 0.0, 0.010538, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 73 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 74 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.010538, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 75 || Beret1 - NOOOOOOOOO
	{ 0.159290, -0.008761, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 76 || Beret1 -
	{ 0.0, -0.008761, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 77 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.008761, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 78 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.008761, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 79 || Beret1 - NOOOOOOOOO
	{ 0.136051, -0.008761, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 80 || Beret1 -
	{ 0.136051, -0.008761, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 81 || Beret1 -
	{ 0.195115, 0.023367, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 82 || Beret1 -
	{ 0.195115, 0.023367, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 83 || Beret1 -
	{ 0.195115, 0.011881, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 84 || Beret1 -
	{ 0.195115, 0.011881, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 85 || Beret1 -
	{ 0.0, 0.011881, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 86 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.011881, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 87 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.011881, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 88 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.011881, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 89 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.011881, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 90 || Beret1 - NOOOOOOOOO
	{ 0.177857, -0.011357, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 91 || Beret1 -
	{ 0.0, -0.011357, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 92 || Beret1 - NOOOOOOOOO
	{ 0.177857, -0.011357, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 93 || Beret1 -
	{ 0.0, -0.011357, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 94 || Beret1 - NOOOOOOOOO
	{ 0.160671, -0.019439, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 95 || Beret1 -
	{ 0.181481, -0.001912, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 96 || Beret1 -
	{ 0.164224, -0.001912, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 97 || Beret1 -
	{ 0.177388, 0.011110, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 98 || Beret1 -
	{ 0.0, 0.011110, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 99 || Beret1 - NOOOOOOOOO
	{ 0.173578, 0.011110, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 100 || Beret1 -
	{ 0.174914, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 101 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 102 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 103 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 104 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 105 || Beret1 - NOOOOOOOOO
	{ 0.174914, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 106 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 107 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 108 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 109 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 110 || Beret1 - NOOOOOOOOO
	{ 0.174914, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 111 || Beret1 -
	{ 0.135964, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 112 || Beret1 -
	{ 0.176390, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 113 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 114 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 115 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 116 || Beret1 - NOOOOOOOOO
	{ 0.145224, 0.017181, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 117 || Beret1 -
	{ 0.145224, 0.017181, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 118 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 119 || Beret1 - NOOOOOOOOO
	{ 0.160884, 0.005099, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 120 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 121 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.005099, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 122 || Beret1 - NOOOOOOOOO
	{ 0.168759, 0.005099, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 123 || Beret1 -
	{ 0.168759, 0.005099, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 124 || Beret1 -
	{ 0.168759, 0.005099, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 125 || Beret1 -
	{ 0.168759, -0.009978, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 126 || Beret1 -
	{ 0.168759, 0.001810, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 127 || Beret1 -
	{ 0.168759, 0.025049, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 128 || Beret1 -
	{ 0.0, 0.025049, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 129 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.025049, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 130 || Beret1 - NOOOOOOOOO
	{ 0.146233, -0.002107, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 131 || Beret1 -
	{ 0.062156, -0.002107, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 132 || Beret1 -
	{ 0.0, -0.002107, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 133 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.002107, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 134 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.002107, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 135 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.002107, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 136 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.002107, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 137 || Beret1 - NOOOOOOOOO
	{ 0.154004, 0.004867, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 138 || Beret1 -
	{ 0.154004, 0.004867, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 139 || Beret1 -
	{ 0.154004, 0.004867, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 140 || Beret1 -
	{ 0.169024, 0.004867, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 141 || Beret1 -
	{ 0.0, 0.004867, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 142 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.004867, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 143 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 144 || Beret1 - NOOOOOOOOO
	{ 0.175224, 0.000106, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 145 || Beret1 -
	{ 0.175224, 0.000106, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 146 || Beret1 -
	{ 0.175224, -0.013702, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 147 || Beret1 -
	{ 0.175224, -0.013702, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 148 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 149 || Beret1 - NOOOOOOOOO
	{ 0.175224, -0.013702, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 150 || Beret1 -
	{ 0.175224, -0.013702, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 151 || Beret1 -
	{ 0.175224, -0.013702, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 152 || Beret1 -
	{ 0.0, -0.013702, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 153 || Beret1 - NOOOOOOOOO
	{ 0.119687, -0.013702, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 154 || Beret1 -
	{ 0.0, -0.013702, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 155 || Beret1 - NOOOOOOOOO
	{ 0.180860, -0.013702, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 156 || Beret1 -
	{ 0.147001, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 157 || Beret1 -
	{ 0.0, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 158 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 159 || Beret1 - NOOOOOOOOO
	{ 0.147001, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 160 || Beret1 -
	{ 0.0, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 161 || Beret1 - NOOOOOOOOO
	{ 0.163098, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 162 || Beret1 -
	{ 0.141079, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 163 || Beret1 -
	{ 0.141079, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 164 || Beret1 -
	{ 0.141079, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 165 || Beret1 -
	{ 0.141079, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 166 || Beret1 -
	{ 0.0, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 167 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 168 || Beret1 - NOOOOOOOOO
	{ 0.141079, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 169 || Beret1 -
	{ 0.156033, 0.012013, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 170 || Beret1 -
	{ 0.178052, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 171 || Beret1 -
	{ 0.172130, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 172 || Beret1 -
	{ 0.0, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 173 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 174 || Beret1 - NOOOOOOOOO
	{ 0.172130, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 175 || Beret1 - NOOOOOOOOO
	{ 0.172130, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 176 || Beret1 -
	{ 0.172130, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 177 || Beret1 -
	{ 0.172130, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 178 || Beret1 -
	{ 0.172130, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 179 || Beret1 -
	{ 0.172130, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 180 || Beret1 -
	{ 0.0, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 181 || Beret1 - NOOOOOOOOO
	{ 0.150111, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 182 || Beret1 -
	{ 0.150111, -0.000019, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 183 || Beret1 -
	{ 0.150111, 0.011443, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 184 || Beret1 -
	{ 0.168541, 0.001727, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 185 || Beret1 -
	{ 0.168541, 0.001727, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 186 || Beret1 -
	{ 0.158668, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 187 || Beret1 -
	{ 0.158668, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 188 || Beret1 -
	{ 0.158668, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 189 || Beret1 -
	{ 0.179479, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 190 || Beret1 -
	{ 0.179479, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 191 || Beret1 -
	{ 0.179479, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 192 || Beret1 -
	{ 0.179479, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 193 || Beret1 -
	{ 0.179479, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 194 || Beret1 -
	{ 0.0, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 195 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 196 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 197 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 198 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.009162, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 199 || Beret1 - NOOOOOOOOO
	{ 0.163382, 0.006934, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 200 || Beret1 -
	{ 0.0, 0.006934, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 201 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.006934, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 202 || Beret1 - NOOOOOOOOO
	{ 0.163382, 0.006934, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 203 || Beret1 -
	{ 0.163382, 0.006934, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 204 || Beret1 -
	{ 0.0, 0.006934, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 205 || Beret1 - NOOOOOOOOO
	{ 0.163382, 0.006934, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 206 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 207 || Beret1 - NOOOOOOOOO
	{ 0.176095, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 208 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.006934, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 209 || Beret1 - NOOOOOOOOO
	{ 0.138910, 0.006934, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 210 || Beret1 -
	{ 0.163572, 0.004481, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 211 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 212 || Beret1 - NOOOOOOOOO
	{ 0.159425, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 213 || Beret1 -
	{ 0.159425, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 214 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 215 || Beret1 - NOOOOOOOOO
	{ 0.159425, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 216 || Beret1 -
	{ 0.159425, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 217 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 218 || Beret1 - NOOOOOOOOO
	{ 0.159425, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 219 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 220 || Beret1 - NOOOOOOOOO
	{ 0.159425, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 221 || Beret1 -
	{ 0.159425, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 222 || Beret1 -
	{ 0.159425, 0.018406, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 223 || Beret1 -
	{ 0.159425, -0.001424, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 224 || Beret1 -
	{ 0.159425, -0.001424, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 225 || Beret1 -
	{ 0.159425, -0.001424, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 226 || Beret1 -
	{ 0.175773, 0.014291, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 227 || Beret1 -
	{ 0.157342, 0.014291, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 228 || Beret1 -
	{ 0.131626, -0.006592, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 229 || Beret1 -
	{ 0.0, -0.006592, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 230 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.006592, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 231 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.006592, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 232 || Beret1 - NOOOOOOOOO
	{ 0.131626, -0.006592, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 233 || Beret1 -
	{ 0.131626, -0.006592, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 234 || Beret1 -
	{ 0.102910, -0.006592, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 235 || Beret1 -
	{ 0.134742, -0.006592, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 236 || Beret1 -
	{ 0.0, -0.006592, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 237 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.006592, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 238 || Beret1 - NOOOOOOOOO
	{ 0.134742, -0.006592, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 239 || Beret1 -
	{ 0.171015, -0.005360, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 240 || Beret1 -
	{ 0.0, -0.005360, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 241 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.005360, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 242 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.005360, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 243 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.005360, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 244 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.005360, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 245 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.005360, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 246 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.005360, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 247 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.005360, 0.000000, 0.000000, 0.000000, 0.000000, 1.281611, 1.000000, 1.462028 }, // SKINID 248 || Beret1 - NOOOOOOOOO
	{ 0.0, -0.005360, 0.000000, 0.000000, 0.000000, 0.000000, 1.281611, 1.000000, 1.462028 }, // SKINID 249 || Beret1 - NOOOOOOOOO
	{ 0.161642, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 250 || Beret1 -
	{ 0.161642, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 251 || Beret1 -
	{ 0.161642, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 252 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 253 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 254 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 255 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 256 || Beret1 - NOOOOOOOOO
	{ 0.161642, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 257 || Beret1 -
	{ 0.161642, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 258 || Beret1 -
	{ 0.161642, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 259 || Beret1 -
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 260 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 261 || Beret1 - NOOOOOOOOO
	{ 0.147644, 0.022091, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 262 || Beret1 -
	{ 0.0, 0.022091, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 263 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.022091, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 264 || Beret1 - NOOOOOOOOO
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 265 || Beret1 -
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 266 || Beret1 -
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 267 || Beret1 -
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 268 || Beret1 -
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 269 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 270 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 271 || Beret1 - NOOOOOOOOO
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 272 || Beret1 -
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 273 || Beret1 - NOOOOOOOOO
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 274 || Beret1 -
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 275 || Beret1 -
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 276 || Beret1 -
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 277 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 278 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 279 || Beret1 - NOOOOOOOOO
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 280 || Beret1 -
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 281 || Beret1 -
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 282 || Beret1 -
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 283 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 284 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 285 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 286 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 287 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 288 || Beret1 - NOOOOOOOOO
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 289 || Beret1 - NOOOOOOOOO
	{ 0.147644, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 290 || Beret1 -
	{ 0.170883, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 291 || Beret1 -
	{ 0.133509, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 292 || Beret1 -
	{ 0.0, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 293 || Beret1 - NOOOOOOOOO
	{ 0.155528, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 294 || Beret1 -
	{ 0.155528, 0.003661, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 295 || Beret1 -
	{ 0.155528, 0.004869, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 296 || Beret1 -
	{ 0.155528, 0.004869, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 297 || Beret1 -
	{ 0.155528, 0.004869, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 }, // SKINID 298 || Beret1 -
	{ 0.155528, 0.024484, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 } // SKINID 299 || Beret1 -
};
new Float:POS_Accesorio_Lentes[300][7] = {
	{0.098771, 0.030772, -0.000335, 85.342658, 84.122947, 4.236968, 1.000000}, // - 0
	{0.100766, 0.028630, -0.003521, 87.936676, 82.110870, 4.236968, 1.000000}, // - 1
	{0.083712, 0.033132, -0.003521, 87.936676, 82.110870, 4.236968, 1.000000}, // - 2
	{0.099500, 0.047703, 0.000558, 280.687683, 90.938697, 169.126358, 1.000000}, // - 3
	{0.126660, 0.017465, -0.004450, 281.516479, 103.193008, 168.312896, 1.167009}, // - 4
	{0.109650, 0.017465, -0.004712, 281.516479, 106.686439, 168.312896, 1.167009}, // - 5
	{0.101269, 0.028933, 0.000001, 281.516479, 91.839576, 168.312896, 1.000000}, // - 6
	{0.090066, 0.043458, -0.006523, 87.936676, 82.110870, 4.236968, 1.000000}, // - 7
	{0.087873, 0.038192, -0.003603, 281.516479, 91.839576, 168.312896, 1.020467}, // - 8
	{0.070977, 0.028663, 0.000147, 81.164970, 92.128402, 4.236968, 1.000000},  // - 9
	{0.072317, 0.032179, -0.002934, 86.843269, 84.196006, 4.236968, 1.000000}, // - 10
	{0.072317, 0.035465, -0.002201, 86.843269, 84.196006, 4.236968, 1.000000}, // - 11
	{0.072317, 0.028100, -0.002201, 86.843269, 84.196006, 4.236968, 1.000000}, // - 12
	{0.076569, 0.028100, -0.002201, 86.843269, 84.196006, 4.236968, 1.000000}, // - 13
	{0.091310, 0.049169, -0.002201, 86.843269, 84.196006, 4.236968, 1.000000}, // - 14
	{0.073734, 0.006292, -0.002755, 86.843269, 84.196006, 4.236968, 1.000000}, // - 15
	{0.092845, 0.040331, 0.000183, 86.843269, 82.864280, 4.236968, 1.000000},  // - 16
	{0.088241, 0.030184, -0.000157, 86.843269, 82.864280, 4.236968, 1.000000}, // - 17
	{0.061677, 0.029596, -0.007398, 86.843269, 82.864280, 4.236968, 1.000000}, // - 18
	{0.079911, 0.029596, -0.002934, 86.843269, 82.864280, 4.236968, 1.000000}, // - 19
	{0.095079, 0.029596, -0.001718, 85.261871, 86.296562, 4.236968, 1.000000}, // - 20
	{0.093728, 0.042083, -0.005781, 85.261871, 81.636192, 4.236968, 1.000000}, // - 21
	{0.079585, 0.042083, -0.005781, 85.261871, 81.636192, 4.236968, 1.000000}, // - 22
	{0.090786, 0.041737, -0.005263, 85.261871, 81.636192, 4.236968, 1.000000}, // - 23
	{0.085247, 0.026941, -0.000317, 85.261871, 81.636192, 4.236968, 1.000000}, // - 24
	{0.081646, 0.031448, -0.001113, 89.393653, 81.665985, 4.236968, 1.000000}, // - 25
	{0.083700, 0.033814, -0.001960, 86.436462, 81.665985, 4.236968, 1.000000}, // - 26
	{0.092498, 0.037321, -0.001960, 86.436462, 85.568023, 4.236968, 1.000000}, // - 27
	{0.097068, 0.041360, -0.007881, 86.771400, 85.568023, 4.236968, 1.000000}, // - 28
	{0.083456, 0.050595, 0.001011, 86.771400, 77.201461, 4.236968, 1.000000},  // - 29
	{0.076983, 0.047168, -0.006161, 86.771400, 74.329719, 4.236968, 1.000000}, // - 30
	{0.083798, 0.042184, -0.001869, 86.771400, 83.181861, 4.236968, 1.000000}, // - 31
	{0.053021, -0.000587, -0.001869, 86.771400, 66.859710, 4.236968, 1.000000},// - 32
	{0.034386, 0.013324, -0.001869, 86.771400, 80.314460, 4.236968, 1.000000}, // - 33
	{0.104669, 0.037365, -0.001403, 86.771400, 87.178382, 4.236968, 1.000000}, // - 34
	{0.102659, 0.037465, -0.000829, 86.771400, 93.020492, 4.236968, 1.000000}, // - 35
	{0.107638, 0.037465, -0.000829, 86.771400, 93.020492, 4.236968, 1.000000}, // - 36
	{0.107638, 0.035879, -0.000829, 86.771400, 93.020492, 4.236968, 1.000000}, // - 37
	{0.107638, 0.041106, -0.000829, 86.771400, 93.020492, 4.236968, 1.000000}, // - 38
	{0.080326, 0.035634, -0.000829, 86.771400, 93.020492, 4.236968, 1.000000}, // - 39
	{0.080326, 0.027371, -0.000829, 86.771400, 93.020492, 4.236968, 1.000000}, // - 40
	{0.084617, 0.039613, -0.001620, 86.771400, 93.020492, 4.236968, 1.000000}, // - 41
	{0.087873, 0.037386, -0.003603, 281.516479, 91.839576, 168.312896, 1.093392}, // - 42
	{0.040075, 0.025445, -0.000974, 86.771400, 92.964149, 4.236968, 1.000000}, // - 43
	{0.077369, 0.028469, -0.000974, 86.771400, 78.435791, 4.236968, 1.000000}, // - 44
	{0.064145, 0.028684, -0.000974, 86.771400, 84.762802, 4.236968, 1.000000}, // - 45
	{0.091993, 0.056559, -0.000974, 86.771400, 84.762802, 4.236968, 1.000000}, // - 46
	{0.084582, 0.051277, -0.005034, 86.771400, 84.762802, 4.236968, 1.000000}, // - 47
	{0.092182, 0.042095, -0.003533, 86.771400, 84.762802, 4.236968, 1.000000}, // - 48
	{0.086866, 0.032203, -0.001021, 86.771400, 84.762802, 4.236968, 1.000000}, // - 49
	{0.099350, 0.009422, -0.005899, 86.771400, 84.762802, 4.236968, 1.000000}, // - 50
	{0.099350, 0.030598, -0.005899, 86.771400, 84.762802, 4.236968, 1.000000}, // - 51
	{0.099350, 0.030598, -0.003575, 86.771400, 84.762802, 4.236968, 1.000000}, // - 52
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // - 53
	{0.079123, 0.030598, -0.003575, 86.771400, 84.762802, 4.236968, 1.000000}, // - 54
	{0.063159, 0.029641, -0.003575, 86.771400, 84.762802, 4.236968, 1.000000}, // - 55
	{0.070293, 0.029641, -0.000570, 86.771400, 84.762802, 4.236968, 1.000000}, // - 56
	{0.111305, 0.045368, -0.000570, 86.771400, 84.458084, 4.236968, 1.000000}, // - 57
	{0.084901, 0.020965, -0.000570, 86.771400, 79.542411, 4.236968, 1.000000}, // - 58
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // - 59
	{0.090164, 0.044163, -0.004754, 86.771400, 79.542411, 4.236968, 1.000000}, // - 60
	{0.087151, 0.041447, -0.000885, 90.928329, 89.598678, 0.000000, 1.000000}, // - 61
	{0.094350, 0.041447, 0.005717, 90.928329, 89.598678, 0.000000, 1.000000},  // - 62
	{0.075534, 0.041447, -0.001751, 90.928329, 89.598678, 0.000000, 1.000000}, // - 63
	{0.075534, 0.041447, -0.001751, 90.928329, 89.598678, 0.000000, 1.000000}, // - 64
	{0.087873, 0.032505, -0.003603, 281.516479, 91.839576, 168.312896, 0.965358}, // - 65
	{0.104148, 0.034787, 0.001341, 90.928329, 89.598678, 0.000000, 1.000000},  // - 66
	{0.104148, 0.034787, 0.001341, 90.928329, 89.598678, 0.000000, 1.000000},  // - 67
	{0.087317, 0.039646, -0.004032, 90.928329, 89.598678, 0.000000, 1.000000}, // - 68
	{0.074873, 0.039646, -0.003072, 90.928329, 89.598678, 0.000000, 1.000000}, // - 69
	{0.090391, 0.042364, 0.005494, 90.928329, 89.598678, 0.000000, 1.000000},  // - 70
	{0.090391, 0.022298, -0.001170, 90.928329, 89.598678, 0.000000, 1.000000}, // - 71
	{0.090391, 0.039580, -0.001170, 90.928329, 89.598678, 0.000000, 1.000000}, // - 72
	{0.090391, 0.038224, -0.001170, 90.928329, 89.598678, 0.000000, 1.000000}, // - 73
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // - 74
	{0.083113, 0.038224, -0.001170, 90.928329, 89.598678, 0.000000, 1.000000}, // - 75
	{0.072957, 0.028956, -0.001170, 90.928329, 89.598678, 0.000000, 1.000000}, // - 76
	{0.069398, 0.039981, -0.001170, 90.928329, 89.598678, 0.000000, 1.000000}, // - 77
	{0.105738, 0.010001, 0.004508, 90.928329, 79.030494, 0.000000, 1.000000},  // - 78
	{0.078264, 0.019668, 0.004508, 90.928329, 79.030494, 0.000000, 1.000000},  // - 79
	{0.087377, 0.022096, -0.001993, 90.928329, 79.030494, 0.000000, 1.000000}, // - 80
	{0.087377, 0.022096, -0.001635, 90.928329, 79.030494, 0.000000, 1.000000}, // - 81
	{0.100623, 0.043063, -0.001635, 90.928329, 87.672645, 0.000000, 1.000000}, // - 82
	{0.092528, 0.027493, -0.001635, 90.928329, 87.672645, 0.000000, 1.000000}, // - 83
	{0.102086, 0.027493, -0.001635, 90.928329, 87.672645, 0.000000, 1.000000}, // - 84
	{0.081954, 0.041672, -0.001635, 90.928329, 87.672645, 0.000000, 1.000000}, // - 85
	{0.025608, -0.003408, 281.516479, 106.686721, 167.551193, 0.965358}, // - 86
	{0.077010, 0.046925, -0.003438, 90.928329, 91.590301, 0.000000, 1.000000}, // - 87
	{0.069952, 0.042635, -0.003438, 90.928329, 86.722587, 0.000000, 1.000000}, // - 88
	{0.093827, 0.019258, -0.003438, 90.928329, 86.722587, 0.000000, 1.000000}, // - 89
	{0.066464, 0.035685, -0.000843, 90.928329, 86.722587, 0.000000, 1.000000}, // - 90
	{0.066464, 0.035685, -0.000843, 90.928329, 86.722587, 0.000000, 1.000000}, // - 91
	{0.066464, 0.038135, -0.000843, 90.928329, 86.722587, 0.000000, 1.000000}, // - 92
	{0.066464, 0.038135, -0.001690, 90.928329, 86.722587, 0.000000, 1.000000}, // - 93
	{0.048124, 0.010598, -0.001690, 90.928329, 86.722587, 0.000000, 1.000000}, // - 94
	{0.084997, 0.006773, -0.001690, 90.928329, 86.722587, 0.000000, 1.000000}, // - 95
	{0.100076, 0.026633, -0.001690, 90.928329, 80.020179, 0.000000, 1.000000}, // - 96
	{0.061686, 0.027537, -0.001690, 90.928329, 80.020179, 0.000000, 1.000000}, // - 97
	{0.098318, 0.053993, -0.001690, 90.928329, 89.237678, 0.000000, 1.000000}, // - 98
	{0.098318, 0.033702, -0.001690, 90.928329, 89.237678, 0.000000, 1.000000}, // - 99
	{0.086149, 0.042526, -0.001690, 90.928329, 77.587478, 0.000000, 1.000000}, // - 100
	{0.081864, 0.030555, -0.001690, 90.928329, 78.145759, 0.000000, 1.000000}, // - 101
	{0.081864, 0.047914, -0.005079, 90.928329, 78.145759, 0.000000, 1.000000}, // - 102
	{0.089607, 0.036717, -0.005079, 90.928329, 78.145759, 0.000000, 1.000000}, // - 103
	{0.079655, 0.042021, -0.005079, 90.928329, 78.145759, 0.000000, 1.000000}, // - 104
	{0.091779, 0.037620, -0.005079, 90.928329, 78.145759, 0.000000, 1.000000}, // - 105
	{0.084179, 0.035251, -0.005079, 90.928329, 78.145759, 0.000000, 1.000000}, // - 106
	{0.089387, 0.040297, -0.006006, 90.928329, 78.145759, 0.000000, 1.000000}, // - 107
	{0.081930, 0.030756, 0.001523, 90.928329, 78.145759, 0.000000, 1.000000},  // - 108
	{0.092857, 0.043070, -0.006084, 90.928329, 85.326652, 0.000000, 1.000000}, // - 109
	{0.092857, 0.043070, -0.006084, 90.928329, 85.326652, 0.000000, 1.000000}, // - 110
	{0.106601, 0.028021, -0.003537, 90.928329, 90.217376, 0.000000, 1.000000}, // - 111
	{0.096335, 0.015873, -0.003537, 90.928329, 90.217376, 0.000000, 1.000000}, // - 112
	{0.105827, 0.046620, -0.001395, 90.928329, 90.217376, 0.000000, 1.000000}, // - 113
	{0.097520, 0.044296, -0.007286, 90.928329, 90.217376, 0.000000, 1.000000}, // - 114
	{0.097408, 0.043470, -0.007286, 90.928329, 90.217376, 0.000000, 1.000000}, // - 115
	{0.092588, 0.049832, -0.007286, 90.928329, 90.217376, 0.000000, 1.000000}, // - 116
	{0.081444, 0.037602, -0.003125, 90.928329, 90.217376, 0.000000, 1.000000}, // - 117
	{0.078678, 0.037602, -0.001816, 90.928329, 90.217376, 0.000000, 1.000000}, // - 118
	{0.093011, 0.037032, -0.001987, 281.516479, 94.968688, 167.551193, 1.051324}, // - 119
	{0.089214, 0.029291, -0.000784, 90.928329, 84.624763, 0.000000, 1.000000}, // - 120
	{0.086825, 0.033424, -0.000784, 90.928329, 77.233818, 0.000000, 1.000000}, // - 121
	{0.082869, 0.030783, -0.000950, 90.928329, 77.233818, 0.000000, 1.000000}, // - 122
	{0.096117, 0.048957, -0.006245, 90.928329, 87.579650, 0.000000, 1.000000}, // - 123
	{0.103663, 0.040022, 0.000449, 90.928329, 87.579650, 0.000000, 1.000000},  // - 124
	{0.099326, 0.031202, -0.001180, 90.928329, 87.579650, 0.000000, 1.000000}, // - 125
	{0.099326, 0.031132, -0.001180, 90.928329, 87.579650, 0.000000, 1.000000}, // - 126
	{0.099326, 0.039279, -0.001180, 90.928329, 87.579650, 0.000000, 1.000000}, // - 127
	{0.099326, 0.047422, -0.001180, 90.928329, 87.579650, 0.000000, 1.000000}, // - 128
	{0.088817, 0.021210, 0.000730, 90.928329, 87.579650, 0.000000, 1.000000},  // - 129
	{0.025784, 0.028323, 0.000730, 90.928329, 59.394767, 0.000000, 1.000000},  // - 130
	{0.068455, 0.031841, -0.004470, 90.928329, 79.979003, 0.000000, 1.000000}, // - 131
	{0.012930, 0.008392, -0.004470, 90.928329, 72.129173, 0.000000, 1.000000}, // - 132
	{0.102457, 0.032260, -0.003338, 90.928329, 84.534217, 0.000000, 1.000000}, // - 133
	{0.085976, 0.014956, -0.003338, 90.928329, 80.308830, 0.000000, 1.000000}, // - 134
	{0.071574, 0.028186, -0.001588, 90.928329, 80.308830, 0.000000, 1.000000}, // - 135
	{0.085219, 0.016666, -0.000738, 90.928329, 80.308830, 0.000000, 1.000000}, // - 136
	{0.065114, 0.009318, -0.000738, 90.928329, 80.308830, 0.000000, 1.000000}, // - 137
	{0.066890, 0.040024, -0.000738, 90.928329, 87.341934, 0.000000, 1.000000}, // - 138
	{0.072037, 0.036141, -0.000702, 90.928329, 87.341934, 0.000000, 1.000000}, // - 139
	{0.069108, 0.042194, -0.000436, 90.928329, 87.341934, 0.000000, 1.000000}, // - 140
	{0.058717, 0.043547, -0.000436, 90.928329, 87.209770, 0.000000, 1.000000}, // - 141
	{0.104196, 0.039601, -0.005481, 90.928329, 87.209770, 0.000000, 1.000000}, // - 142
	{0.090929, 0.045881, -0.012780, 90.928329, 87.209770, 0.000000, 1.000000}, // - 143
	{0.098291, 0.042464, -0.006952, 90.928329, 83.081665, 0.000000, 1.000000}, // - 144
	{0.080087, 0.030122, 0.000606, 90.928329, 83.081665, 0.000000, 1.000000},  // - 145
	{0.093500, 0.030690, -0.001545, 90.928329, 83.081665, 0.000000, 1.000000}, // - 146
	{0.079566, 0.020138, 0.004838, 90.928329, 73.715591, 0.000000, 1.000000},  // - 147
	{0.073564, 0.028430, -0.000527, 90.928329, 88.295433, 0.000000, 1.000000}, // - 148
	{0.099901, 0.011976, 0.001273, 281.516479, 97.607620, 167.551193, 1.190787}, // - 149
	{0.073564, 0.028430, -0.000527, 90.928329, 88.295433, 0.000000, 1.000000}, // - 150
	{0.083426, 0.032359, -0.005717, 90.928329, 88.295433, 0.000000, 1.000000}, // - 151
	{0.072349, 0.019623, -0.000747, 90.928329, 82.624351, 0.000000, 1.000000}, // - 152
	{0.075065, 0.015351, 0.006545, 90.928329, 71.041442, 0.000000, 1.000000},  // - 153
	{0.062227, 0.029731, -0.004938, 90.928329, 84.602760, 0.000000, 1.000000}, // - 154
	{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, // - 155
	{0.079936, 0.049000, -0.000304, 90.928329, 82.926010, 0.000000, 1.000000}, // - 156
	{0.067550, 0.035686, -0.000017, 90.928329, 82.926010, 0.000000, 1.000000}, // - 157
	{0.090676, 0.039383, -0.001726, 90.928329, 88.667900, 0.000000, 1.000000}, // - 158
	{0.090676, 0.039383, -0.003532, 90.928329, 88.667900, 0.000000, 1.000000}, // - 159
	{0.098662, 0.017441, -0.001589, 90.928329, 88.667900, 0.000000, 1.000000}, // - 160
	{0.105388, 0.038409, 0.003155, 90.928329, 88.667900, 0.000000, 1.000000},  // - 161
	{0.097415, 0.036904, -0.000525, 90.928329, 88.667900, 0.000000, 1.000000}, // - 162
	{0.088934, 0.023302, -0.004153, 90.928329, 80.393875, 0.000000, 1.000000}, // - 163
	{0.088934, 0.023302, -0.004153, 90.928329, 80.393875, 0.000000, 1.000000}, // - 164
	{0.087018, 0.051364, 0.000484, 90.928329, 94.584838, 0.000000, 1.000000},  // - 165
	{0.087018, 0.051364, 0.000484, 90.928329, 94.584838, 0.000000, 1.000000},  // - 166
	{0.095996, 0.038787, 0.000484, 90.928329, 84.315711, 0.000000, 1.000000},  // - 167
	{0.089094, 0.034001, -0.006451, 90.928329, 84.315711, 0.000000, 1.000000}, // - 168
	{0.075700, 0.028082, -0.006451, 90.928329, 84.315711, 0.000000, 1.000000}, // - 169
	{0.093751, 0.041968, -0.005545, 90.928329, 84.315711, 0.000000, 1.000000}, // - 170
	{0.090124, 0.031055, -0.000505, 90.928329, 84.315711, 0.000000, 1.000000}, // - 171
	{0.066033, 0.032915, -0.002713, 90.928329, 84.315711, 0.000000, 1.000000}, // - 172
	{0.088287, 0.045350, -0.005384, 90.928329, 84.315711, 0.000000, 1.000000}, // - 173
	{0.087750, 0.042129, -0.005384, 90.928329, 84.315711, 0.000000, 1.000000}, // - 174
	{0.092384, 0.039294, -0.005384, 90.928329, 84.315711, 0.000000, 1.000000}, // - 175
	{0.097661, 0.039065, -0.006344, 90.928329, 80.736480, 0.000000, 1.000000}, // - 176
	{0.097114, 0.039641, -0.006692, 90.928329, 80.736480, 0.000000, 1.000000}, // - 177
	{0.069354, 0.039641, -0.000474, 90.928329, 80.736480, 0.000000, 1.000000}, // - 178
	{0.091414, 0.039641, -0.005617, 90.928329, 80.736480, 0.000000, 1.000000}, // - 179
	{0.094914, 0.039641, -0.005617, 90.928329, 80.736480, 0.000000, 1.000000}, // - 180
	{0.117232, 0.033217, -0.001099, 90.928329, 82.396362, 0.000000, 1.000000}, // - 181
	{0.082569, 0.032748, -0.003248, 90.928329, 87.394371, 0.000000, 1.000000}, // - 182
	{0.095527, 0.027237, -0.001960, 90.928329, 86.443649, 0.000000, 1.000000}, // - 183
	{0.095527, 0.040994, -0.006878, 90.928329, 86.443649, 0.000000, 1.000000}, // - 184
	{0.085663, 0.030601, -0.002345, 90.928329, 81.496513, 0.000000, 1.000000}, // - 185
	{0.085663, 0.030601, -0.001015, 90.928329, 81.496513, 0.000000, 1.000000}, // - 186
	{0.076527, 0.027211, 0.008500, 90.928329, 74.401092, 0.000000, 1.000000},  // - 187
	{0.096669, 0.032578, 0.001662, 90.928329, 83.502502, 0.000000, 1.000000},  // - 188
	{0.098753, 0.032129, -0.001659, 90.928329, 90.153724, 0.000000, 1.000000}, // - 189
	{0.092821, 0.035572, -0.001659, 90.928329, 90.153724, 0.000000, 1.000000}, // - 190
	{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000, 1.000000}, // - 191
	{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000, 1.000000}, // - 192
	{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000, 1.000000}, // - 193
	{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000, 1.000000}, // - 194
	{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000, 1.000000}, // - 195
	{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000, 1.000000}, // - 196
	{0.100630, 0.020568, -0.001132, 90.928329, 90.153724, 0.000000, 1.000000}, // - 197
	{0.077905, 0.028523, 0.000000, 89.675476, 89.270309, 0.000000, 1.000000},  // - 198
	{0.099095, 0.022463, 0.000000, 89.675476, 89.270309, 0.000000, 1.000000},  // - 199
	{0.103182, 0.031106, 0.000000, 89.675476, 89.270309, 0.000000, 1.000000},  // - 200
	{0.078426, 0.038546, 0.000000, 89.675476, 89.270309, 0.000000, 1.000000},  // - 201
	{0.101092, 0.035797, -0.002997, 89.675476, 82.081153, 0.000000, 1.000000}, // - 202
	{0.092009, 0.042780, -0.005841, 89.675476, 84.463294, 0.000000, 1.000000}, // - 203
	{0.092009, 0.042780, -0.005841, 89.675476, 84.463294, 0.000000, 1.000000}, // - 204
	{0.092969, 0.027782, -0.002959, 89.675476, 84.463294, 0.000000, 1.000000}, // - 205
	{0.105109, 0.036128, -0.000471, 89.675476, 84.463294, 0.000000, 1.000000}, // - 206
	{0.066892, 0.024410, -0.002792, 89.675476, 84.463294, 0.000000, 1.000000}, // - 207
	{0.088610, 0.043561, 0.001273, 281.516479, 89.674781, 167.551193, 1.000000}, // - 208
	{0.084046, 0.013608, -0.002792, 89.675476, 81.667831, 0.000000, 1.000000}, // - 209
	{0.084046, 0.013608, -0.001034, 89.675476, 81.667831, 0.000000, 1.000000}, // - 210
	{0.067610, 0.033777, -0.001034, 89.675476, 85.214485, 0.000000, 1.000000}, // - 211
	{0.094159, 0.020717, 0.000715, 89.675476, 85.214485, 0.000000, 1.000000},  // - 212
	{0.098744, 0.036786, -0.001770, 89.675476, 85.214485, 0.000000, 1.000000}, // - 213
	{0.068755, 0.036786, -0.001770, 89.675476, 85.214485, 0.000000, 1.000000}, // - 214
	{0.068755, 0.026863, -0.001770, 89.675476, 85.214485, 0.000000, 1.000000}, // - 215
	{0.068755, 0.026863, -0.001770, 89.675476, 85.214485, 0.000000, 1.000000}, // - 216
	{0.095765, 0.030034, -0.001770, 89.675476, 85.214485, 0.000000, 1.000000}, // - 217
	{0.085486, 0.039427, -0.003311, 89.675476, 85.214485, 0.000000, 1.000000}, // - 218
	{0.068874, 0.027850, -0.001021, 89.675476, 85.214485, 0.000000, 1.000000}, // - 219
	{0.052931, 0.050390, -0.002062, 89.675476, 88.113647, 0.000000, 1.000000}, // - 220
	{0.094479, 0.034432, 0.000875, 89.675476, 83.572830, 0.000000, 1.000000},  // - 221
	{0.094479, 0.034432, -0.000596, 89.675476, 83.572830, 0.000000, 1.000000}, // - 222
	{0.094479, 0.062073, -0.003098, 89.675476, 83.572830, 0.000000, 1.000000}, // - 223
	{0.064458, 0.029760, -0.001460, 89.675476, 83.572830, 0.000000, 1.000000}, // - 224
	{0.064458, 0.029760, -0.001460, 89.675476, 83.572830, 0.000000, 1.000000}, // - 225
	{0.072095, 0.029760, -0.001460, 89.675476, 83.572830, 0.000000, 1.000000}, // - 226
	{0.110619, 0.043037, -0.001466, 89.675476, 86.927627, 0.000000, 1.000000}, // - 227
	{0.099446, 0.050772, -0.001466, 89.675476, 85.103805, 0.000000, 1.000000}, // - 228
	{0.078635, 0.023680, -0.000275, 89.675476, 73.445220, 0.000000, 1.000000}, // - 229
	{0.043357, 0.028726, -0.000275, 89.675476, 73.445220, 0.000000, 1.000000}, // - 230
	{0.092488, 0.049972, -0.000275, 89.675476, 88.981941, 0.000000, 1.000000}, // - 231
	{0.092488, 0.016739, -0.000275, 89.675476, 88.981941, 0.000000, 1.000000}, // - 232
	{0.071677, 0.037055, -0.002878, 89.675476, 88.981941, 0.000000, 1.000000}, // - 233
	{0.082745, 0.004209, -0.002878, 89.675476, 88.981941, 0.000000, 1.000000}, // - 234
	{0.057909, 0.021331, -0.002878, 89.675476, 88.981941, 0.000000, 1.000000}, // - 235
	{0.079016, 0.021331, -0.000419, 89.675476, 77.678733, 0.000000, 1.000000}, // - 236
	{0.074572, 0.021331, -0.000419, 89.675476, 84.527442, 0.000000, 1.000000}, // - 237
	{0.074572, 0.038346, -0.001500, 89.675476, 84.527442, 0.000000, 1.000000}, // - 238
	{0.111645, 0.011549, 0.006237, 89.675476, 84.527442, 0.000000, 1.000000},  // - 239
	{0.090766, 0.044221, -0.000423, 89.675476, 89.461883, 0.000000, 1.000000}, // - 240
	{0.069491, 0.049021, -0.000423, 89.675476, 89.461883, 0.000000, 1.000000}, // - 241
	{0.059706, 0.031911, -0.000423, 89.675476, 89.461883, 0.000000, 1.000000}, // - 242
	{0.065242, 0.031911, -0.000423, 89.675476, 89.461883, 0.000000, 1.000000}, // - 243
	{0.065242, 0.051077, -0.001103, 89.675476, 89.461883, 0.000000, 1.000000}, // - 244
	{0.082393, 0.038233, 0.000410, 89.675476, 89.461883, 0.000000, 1.000000},  // - 245
	{0.079338, 0.044859, -0.002535, 89.675476, 89.461883, 0.000000, 1.000000}, // - 246
	{0.101566, 0.037019, 0.000750, 89.675476, 83.514060, 0.000000, 1.000000},  // - 247
	{0.091887, 0.047776, -0.000040, 89.675476, 83.514060, 0.000000, 1.000000}, // - 248
	{0.089745, 0.044044, 0.004071, 89.675476, 83.514060, 0.000000, 1.000000},  // - 249
	{0.094214, 0.044044, -0.007274, 89.675476, 83.514060, 0.000000, 1.000000}, // - 250
	{0.072282, 0.044044, -0.001468, 89.675476, 90.444763, 0.000000, 1.000000}, // - 251
	{0.095764, 0.034224, -0.000264, 89.675476, 82.959915, 0.000000, 1.000000}, // - 252
	{0.087454, 0.026208, -0.000264, 89.675476, 82.959915, 0.000000, 1.000000}, // - 253
	{0.099198, 0.037362, -0.000264, 89.675476, 82.959915, 0.000000, 1.000000}, // - 254
	{0.070845, 0.019943, 0.003505, 89.675476, 73.529716, 0.000000, 1.000000},  // - 255
	{0.065373, 0.033656, -0.001141, 89.675476, 83.002151, 0.000000, 1.000000}, // - 256
	{0.070077, 0.033656, -0.001141, 89.675476, 83.002151, 0.000000, 1.000000}, // - 257
	{0.089536, 0.041904, 0.000715, 89.675476, 83.002151, 0.000000, 1.000000},  // - 258
	{0.084822, 0.041904, 0.000715, 89.675476, 83.002151, 0.000000, 1.000000},  // - 259
	{0.093009, 0.031491, -0.001568, 89.675476, 83.002151, 0.000000, 1.000000}, // - 260
	{0.093009, 0.015023, -0.001477, 89.675476, 83.002151, 0.000000, 1.000000}, // - 261
	{0.076580, 0.039782, -0.001477, 89.675476, 88.620780, 0.000000, 1.000000}, // - 262
	{0.076580, 0.028967, -0.001477, 89.675476, 88.620780, 0.000000, 1.000000}, // - 263
	{0.075424, 0.043059, -0.001477, 89.675476, 88.620780, 0.000000, 1.000000}, // - 264
	{0.089655, 0.021726, -0.001477, 89.675476, 88.620780, 0.000000, 1.000000}, // - 265
	{0.096792, 0.014114, -0.003062, 89.675476, 85.166038, 0.000000, 1.000000}, // - 266
	{0.094886, 0.024989, -0.003184, 89.675476, 85.166038, 0.000000, 1.000000}, // - 267
	{0.094886, 0.024989, -0.003184, 89.675476, 85.166038, 0.000000, 1.000000}, // - 268
	{0.102252, 0.024989, -0.003184, 89.675476, 85.166038, 0.000000, 1.000000}, // - 269
	{0.102252, 0.024989, 0.000529, 89.675476, 85.166038, 0.000000, 1.000000},  // - 270
	{0.096134, 0.025462, 0.000529, 89.675476, 79.225112, 0.000000, 1.000000},  // - 271
	{0.099226, 0.032663, 0.000529, 89.675476, 79.225112, 0.000000, 1.000000},  // - 272
	{0.080779, 0.028227, -0.001415, 281.516479, 91.776855, 167.551193, 1.061396}, // - 273
	{0.089833, 0.022466, -0.001590, 89.675476, 88.636062, 0.000000, 1.000000}, // - 274
	{0.089833, 0.022466, -0.001590, 89.675476, 88.636062, 0.000000, 1.000000}, // - 275
	{0.089833, 0.022466, -0.001590, 89.675476, 88.636062, 0.000000, 1.000000}, // - 276
	{0.082718, 0.062596, -0.000201, 89.675476, 88.636062, 0.000000, 1.000000}, // - 277
	{0.082718, 0.062596, -0.000201, 89.675476, 88.636062, 0.000000, 1.000000}, // - 278
	{0.087652, 0.059379, -0.000201, 89.675476, 88.636062, 0.000000, 1.000000}, // - 279
	{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000, 1.000000}, // - 280
	{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000, 1.000000}, // - 281
	{0.090877, 0.026643, -0.003091, 89.675476, 88.636062, 0.000000, 1.000000}, // - 282
	{0.090877, 0.026643, -0.003091, 89.675476, 88.636062, 0.000000, 1.000000}, // - 283
	{0.090877, 0.053674, 0.009879, 89.675476, 88.636062, 0.000000, 1.000000},  // - 284
	{0.104320, 0.041487, 0.008021, 89.675476, 88.636062, 0.000000, 1.000000},  // - 285
	{0.087062, 0.021779, -0.003307, 89.675476, 88.636062, 0.000000, 1.000000}, // - 286
	{0.073173, 0.048856, 0.005337, 89.675476, 92.561180, 0.000000, 1.000000},  // - 287
	{0.090294, 0.027592, -0.003497, 89.675476, 92.561180, 0.000000, 1.000000}, // - 288
	{0.081684, 0.015000, 0.001780, 281.516479, 108.106758, 169.790878, 1.042815}, // - 289
	{0.086562, 0.042698, -0.000612, 89.675476, 92.561180, 0.000000, 1.000000}, // - 290
	{0.096768, 0.039233, -0.000612, 89.675476, 83.550270, 0.000000, 1.000000}, // - 291
	{0.079939, 0.020731, -0.005162, 89.675476, 83.550270, 0.000000, 1.000000}, // - 292
	{0.097107, 0.027826, -0.005162, 89.675476, 88.505996, 0.000000, 1.000000}, // - 293
	{0.097107, 0.037636, 0.000618, 89.675476, 88.505996, 0.000000, 1.000000},  // - 294
	{0.079985, 0.035006, -0.000826, 89.675476, 87.533462, 0.000000, 1.000000}, // - 295
	{0.088445, 0.024209, -0.002076, 89.675476, 73.285072, 0.000000, 1.000000}, // - 296
	{0.094039, 0.035411, 0.000490, 89.675476, 84.277572, 0.000000, 1.000000},  // - 297
	{0.099553, 0.024683, -0.002919, 89.675476, 84.277572, 0.000000, 1.000000}, // - 298
	{0.099553, 0.044356, -0.000285, 89.675476, 84.277572, 0.000000, 1.000000}  // - 299
};

new Float:POS_Accesorio_Pelo[300][9] = {
	{0.108588, -0.004280, 0.000000, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.000000 }, // Hair3 - 0
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 1
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 2
	{0.070000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.399999, 1.500000, 1.200000 }, // Hair3 - 3
	{0.108999, 0.004999, 0.000000, 0.000000, 0.000000, 0.000000, 1.299999, 1.100000, 1.200000 }, // Hair3 - 4
	{0.093999, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.299999, 1.200000, 1.200000 }, // Hair3 - 5
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 6
	{0.099690, 0.006124, -0.003632, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.178597 }, // Hair3 - 7
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 8
	{0.075812, 0.007086, -0.003632, 0.000000, 0.000000, 0.504608, 2.675273, 1.004458, 1.130290 }, // Hair3 - 9
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 10
	{0.073011, -0.000845, 0.005339, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.149878 }, // Hair3 - 11
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 12
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 13
	{0.088216, 0.009086, 0.005339, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.149878 }, // Hair3 - 14
	{0.069295, -0.023192, -0.001476, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 0.998685 }, // Hair3 - 15
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 16
	{0.100861, -0.000708, 0.001642, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.033313 }, // Hair3 - 17
	{0.062683, -0.000708, 0.001642, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.022677 }, // Hair3 - 18
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 19
	{0.097281, -0.006789, 0.000686, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.089968 }, // Hair3 - 20
	{0.080904, -0.002786, -0.005819, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.118435 }, // Hair3 - 21
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 22
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 23
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 24
	{0.080904, 0.002488, -0.000037, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.043299 }, // Hair3 - 25
	{0.062522, 0.013497, -0.000037, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.175585 }, // Hair3 - 26
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 27
	{0.087827, 0.022751, -0.005296, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.219193 }, // Hair3 - 28
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 29
	{0.077708, 0.011525, -0.005296, 0.000000, 0.000000, 0.504608, 1.004458, 1.004458, 1.219193 }, // Hair3 - 30
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 31
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 32
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 33
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 34
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 35
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 36
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 37
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 38
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 39
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 40
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 41
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 42
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 43
	{0.079044, 0.014414, -0.000931, 0.000000, 0.000000, 357.597473, 1.004458, 1.004458, 0.900948 }, // Hair3 - 44
	{0.060674, 0.006197, -0.000931, 0.000000, 0.000000, 357.597473, 1.004458, 1.004458, 1.019663 }, // Hair3 - 45
	{0.087941, 0.018147, -0.000931, 0.000000, 0.000000, 357.597473, 1.004458, 1.004458, 1.139707 }, // Hair3 - 46
	{0.084668, 0.006726, -0.000931, 0.000000, 0.000000, 357.597473, 1.004458, 1.004458, 1.142034 }, // Hair3 - 47
	{0.099493, -0.017821, -0.002006, 0.000000, 0.000000, 357.597473, 1.004458, 1.004458, 1.142034 }, // Hair3 - 48
	{0.079672, 0.012987, -0.001040, 0.000000, 0.000000, 357.597473, 1.004458, 1.004458, 0.986149 }, // Hair3 - 49
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 50
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 51
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 52
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 53
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 54
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 55
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 56
	{0.119527, 0.015450, -0.002653, 0.000000, 0.000000, 357.597473, 1.004458, 1.004458, 1.060347 }, // Hair3 - 57
	{0.075583, -0.001295, -0.002653, 0.000000, 0.000000, 357.597473, 1.004458, 1.004458, 0.948482 }, // Hair3 - 58
	{0.095139, 0.003601, -0.002653, 0.000000, 0.000000, 4.176807, 1.004458, 1.004458, 1.128250 }, // Hair3 - 59
	{0.095139, 0.003562, -0.002653, 0.000000, 0.000000, 4.176807, 1.004458, 1.004458, 1.100457 }, // Hair3 - 60
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 61
	{0.093398, 0.018343, 0.006919, 0.000000, 0.000000, 4.176807, 1.004458, 1.004458, 1.009026 }, // Hair3 - 62
	{0.084164, -0.001245, 0.000018, 0.000000, 0.000000, 4.176807, 1.004458, 1.004458, 1.179215 }, // Hair3 - 63
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 64
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 65
	{0.095307, 0.009252, 0.000018, 0.000000, 0.000000, 4.176807, 1.004458, 1.004458, 1.051705 }, // Hair3 - 66
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 67
	{0.101020, 0.016734, -0.003369, 0.000000, 0.000000, 4.176807, 1.004458, 1.004458, 0.997687 }, // Hair3 - 68
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 69
	{0.087212, 0.017980, 0.007104, 0.000000, 0.000000, 4.176807, 1.004458, 1.004458, 1.049646 }, // Hair3 - 70
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 71
	{0.089513, 0.014271, -0.001790, 0.000000, 0.000000, 4.176807, 1.004458, 1.004458, 1.032754 }, // Hair3 - 72
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 73
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 74
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 75
	{0.077374, -0.010765, 0.002583, 0.000000, 0.000000, 4.176807, 1.004458, 1.004458, 1.166910 }, // Hair3 - 76
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 77
	{0.079938, 0.012189, 0.002583, 0.000000, 0.000000, 4.176807, 1.004458, 1.004458, 1.166910 }, // Hair3 - 78
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 79
	{0.076820, -0.014839, 0.002583, 0.000000, 0.000000, 350.695648, 1.004458, 1.004458, 1.071538 }, // Hair3 - 80
	{0.076820, -0.014839, 0.002583, 0.000000, 0.000000, 350.695648, 1.004458, 1.004458, 1.071538 }, // Hair3 - 81
	{0.104624, 0.014979, 0.002583, 0.000000, 0.000000, 356.442108, 1.004458, 1.004458, 1.141624 }, // Hair3 - 82
	{0.093609, 0.006488, 0.002583, 0.000000, 0.000000, 356.442108, 1.004458, 1.004458, 1.141624 }, // Hair3 - 83
	{0.106974, 0.006488, 0.002583, 0.000000, 0.000000, 356.442108, 1.004458, 1.004458, 1.141624 }, // Hair3 - 84
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 85
	{0.070000, -0.009999, 0.000000, 0.000000, 0.000000, 350.000000, 1.200000, 1.200000, 1.100000 }, // Hair3 - 86
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 87
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 88
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 89
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 90
	{0.076668, -0.010447, -0.003085, 0.000000, 0.000000, 3.968300, 1.004458, 1.004458, 1.169261 }, // Hair3 - 91
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 92
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 93
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 94
	{0.070631, -0.016430, 0.000185, 0.000000, 0.000000, 3.968300, 1.004458, 1.004458, 1.079532 }, // Hair3 - 95
	{0.085213, 0.007071, -0.002542, 0.000000, 0.000000, 3.968300, 1.004458, 1.004458, 1.094804 }, // Hair3 - 96
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 97
	{0.081412, 0.025877, 0.000684, 0.000000, 0.000000, 3.968300, 1.004458, 1.004458, 1.156216 }, // Hair3 - 98
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 99
	{0.096130, -0.002822, 0.002127, 0.000000, 0.000000, 358.993652, 1.004458, 1.004458, 1.156216 }, // Hair3 - 100
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 101
	{0.088931, 0.009656, -0.003107, 0.000000, 0.000000, 358.993652, 1.004458, 1.004458, 1.042739 }, // Hair3 - 102
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 103
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 104
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 105
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 106
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 107
	{0.111707, 0.012517, 0.000836, 1.349158, 0.000000, 349.588562, 1.004458, 1.004458, 0.861656 }, // Hair3 - 108
	{0.111707, 0.024860, 0.000836, 1.349158, 0.000000, 355.732360, 1.004458, 1.004458, 0.893029 }, // Hair3 - 109
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 110
	{0.091159, 0.003268, -0.001098, 1.349158, 0.000000, 359.983459, 1.004458, 1.004458, 1.003022 }, // Hair3 - 111
	{0.083389, 0.004525, -0.001098, 1.349158, 0.000000, 6.963862, 1.004458, 1.004458, 0.915353 }, // Hair3 - 112
	{0.098555, -0.000253, -0.001098, 1.349158, 0.000000, 2.182152, 1.004458, 1.004458, 1.080508 }, // Hair3 - 113
	{0.105434, 0.007519, -0.003082, 1.349158, 0.000000, 3.462919, 1.004458, 1.004458, 0.996621 }, // Hair3 - 114
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 115
	{0.105434, 0.007519, -0.003082, 1.349158, 0.000000, 3.462919, 1.004458, 1.004458, 0.996621 }, // Hair3 - 116
	{0.073719, 0.011567, -0.001081, 1.349158, 0.000000, 358.537384, 1.004458, 1.004458, 1.053219 }, // Hair3 - 117
	{0.078061, 0.011567, -0.001081, 1.349158, 0.000000, 2.812902, 1.004458, 1.004458, 1.053219 }, // Hair3 - 118
	{0.070000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.200000, 1.200000, 1.100000 }, // Hair3 - 119
	{0.088413, -0.004958, -0.001081, 1.349158, 0.000000, 356.769927, 1.004458, 1.004458, 1.134856 }, // Hair3 - 120
	{0.098040, -0.013431, 0.000846, 1.349158, 0.000000, 352.953826, 1.004458, 1.004458, 1.165797 }, // Hair3 - 121
	{0.097684, -0.008173, 0.000846, 1.349158, 0.000000, 352.953826, 1.004458, 1.004458, 1.069886 }, // Hair3 - 122
	{0.082243, -0.000975, -0.003736, 1.349158, 0.000000, 352.953826, 1.004458, 1.004458, 1.270665 }, // Hair3 - 123
	{0.083105, -0.000273, -0.001209, 1.349158, 0.000000, 352.953826, 1.004458, 1.004458, 1.167312 }, // Hair3 - 124
	{0.089598, 0.003350, -0.001209, 1.349158, 0.000000, 7.936543, 1.004458, 1.004458, 1.055302 }, // Hair3 - 125
	{0.107306, -0.014673, 0.000547, 1.162765, 0.000000, 0.930281, 1.004458, 1.004458, 1.133381 }, // Hair3 - 126
	{0.097297, 0.002157, 0.000547, 1.162765, 0.000000, 356.993957, 1.004458, 1.004458, 1.132299 }, // Hair3 - 127
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 128
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 129
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 130
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 131
	{-0.000896, 0.005557, 0.000547, 1.162765, 0.000000, 349.529785, 1.004458, 1.004458, 0.975846 }, // Hair3 - 132
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 133
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 134
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 135
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 136
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 137
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 138
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 139
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 140
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 141
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 142
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 143
	{0.089415, -0.005394, -0.003360, 1.162765, 0.000000, 354.949035, 1.004458, 1.004458, 1.377530 }, // Hair3 - 144
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 145
	{0.084664, -0.005025, -0.003360, 1.162765, 0.000000, 354.949035, 1.004458, 1.004458, 1.063808 }, // Hair3 - 146
	{0.068039, -0.006231, 0.003438, 1.162765, 0.000000, 348.373596, 1.004458, 1.004458, 1.091637 }, // Hair3 - 147
	{0.077481, -0.006293, 0.003438, 1.162765, 0.000000, 3.232684, 1.004458, 1.004458, 1.143243 }, // Hair3 - 148
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 149
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 150
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 151
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 152
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 153
	{0.061059, -0.000941, 0.003438, 1.162765, 0.000000, 354.961517, 1.004458, 1.004458, 1.064656 }, // Hair3 - 154
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 155
	{0.088869, -0.006497, 0.003438, 1.162765, 0.000000, 354.961517, 1.004458, 1.004458, 1.322631 }, // Hair3 - 156
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 157
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 158
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 159
	{0.080472, -0.006497, 0.000619, 1.162765, 0.000000, 354.961517, 1.004458, 1.004458, 1.024554 }, // Hair3 - 160
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 161
	{0.099750, -0.004397, 0.000619, 1.162765, 0.000000, 357.063781, 1.004458, 1.004458, 1.093557 }, // Hair3 - 162
	{0.085568, -0.002210, -0.000876, 1.162765, 0.000000, 353.987701, 1.004458, 1.004458, 1.017031 }, // Hair3 - 163
	{0.085617, -0.002210, -0.000876, 1.162765, 0.000000, 353.987701, 1.004458, 1.004458, 1.017031 }, // Hair3 - 164
	{0.076236, 0.004471, -0.000876, 1.162765, 0.000000, 353.987701, 1.004458, 1.004458, 1.126474 }, // Hair3 - 165
	{0.076236, 0.004471, -0.000876, 1.162765, 0.000000, 353.987701, 1.004458, 1.004458, 1.126474 }, // Hair3 - 166
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 167
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 168
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 169
	{0.082516, 0.004471, -0.000876, 1.162765, 0.000000, 356.341644, 1.004458, 1.004458, 1.126474 }, // Hair3 - 170
	{0.095091, -0.004251, -0.000876, 1.162765, 0.000000, 356.341644, 1.004458, 1.004458, 1.145727 }, // Hair3 - 171
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 172
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 173
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 174
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 175
	{0.110327, -0.012279, -0.003095, 1.162765, 0.000000, 353.170532, 1.004458, 1.004458, 1.138159 }, // Hair3 - 176
	{0.096507, -0.004908, -0.003095, 1.162765, 0.000000, 353.170532, 1.004458, 1.004458, 1.256144 }, // Hair3 - 177
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 178
	{0.093613, 0.001893, -0.003095, 1.162765, 0.000000, 355.963073, 1.004458, 1.004458, 1.097507 }, // Hair3 - 179
	{0.097174, -0.011787, -0.003095, 1.162765, 0.000000, 355.963073, 1.004458, 1.004458, 1.176252 }, // Hair3 - 180
	{0.098671, 0.026786, -0.000061, 1.162765, 0.000000, 355.963073, 1.004458, 1.004458, 1.074810 }, // Hair3 - 181
	{0.077510, 0.012967, -0.000061, 1.162765, 0.000000, 1.151019, 1.004458, 1.004458, 1.132787 }, // Hair3 - 182
	{0.086433, 0.000554, -0.000061, 1.162765, 0.000000, 1.151019, 1.004458, 1.004458, 1.167121 }, // Hair3 - 183
	{0.101167, -0.003799, -0.001940, 1.162765, 0.000000, 0.578940, 1.004458, 1.004458, 1.100660 }, // Hair3 - 184
	{0.088131, -0.001998, -0.001940, 1.162765, 0.000000, 0.578940, 1.004458, 1.004458, 1.100660 }, // Hair3 - 185
	{0.101592, -0.012444, -0.001830, 1.162765, 0.000000, 0.578940, 1.004458, 1.004458, 1.129892 }, // Hair3 - 186
	{0.079601, -0.016813, 0.007176, 1.162765, 0.000000, 355.034423, 1.004458, 1.004458, 1.090405 }, // Hair3 - 187
	{0.090677, -0.000343, 0.002180, 1.162765, 0.000000, 355.034423, 1.004458, 1.004458, 1.055292 }, // Hair3 - 188
	{0.095982, -0.001331, 0.002180, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 1.142861 }, // Hair3 - 189
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 190
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 191
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 192
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 193
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 194
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 195
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 196
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 197
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 198
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 199
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 200
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 201
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 202
	{0.087364, 0.004175, -0.001923, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 1.105261 }, // Hair3 - 203
	{0.087364, 0.004175, -0.001923, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 1.105261 }, // Hair3 - 204
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 205
	{0.110781, 0.006567, -0.001923, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 1.007790 }, // Hair3 - 206
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 207
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 208
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 209
	{0.082535, -0.005237, -0.001923, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 0.995132 }, // Hair3 - 210
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 211
	{0.062871, -0.001359, -0.001923, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 1.048056 }, // Hair3 - 212
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 213
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 214
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 215
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 216
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 217
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 218
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 219
	{0.059144, 0.013152, -0.001230, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 1.073572 }, // Hair3 - 220
	{0.094527, -0.006164, 0.002706, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 1.247534 }, // Hair3 - 221
	{0.094527, -0.011945, 0.002706, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 1.226916 }, // Hair3 - 222
	{0.089071, 0.014463, 0.002706, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 1.192765 }, // Hair3 - 223
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 224
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 225
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 226
	{0.101175, 0.014766, 0.002706, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 1.126656 }, // Hair3 - 227
	{0.092572, 0.007272, 0.002706, 1.162765, 0.000000, 357.113464, 1.004458, 1.004458, 1.235207 }, // Hair3 - 228
	{0.079486, -0.015010, 0.000872, 1.162765, 0.000000, 350.970611, 1.004458, 1.004458, 1.098212 }, // Hair3 - 229
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 230
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 231
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 232
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 233
	{0.078231, -0.017629, 0.000872, 1.162765, 0.000000, 351.789215, 1.004458, 1.004458, 1.018379 }, // Hair3 - 234
	{0.049378, -0.001035, 0.000872, 1.162765, 0.000000, 348.162139, 1.004458, 1.004458, 0.966751 }, // Hair3 - 235
	{0.080933, -0.007481, 0.000872, 1.162765, 0.000000, 348.162139, 1.004458, 1.004458, 1.095109 }, // Hair3 - 236
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 237
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 238
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 239
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 240
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 241
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 242
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 243
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 244
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 245
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 246
	{0.087829, -0.001369, 0.000872, 1.162765, 0.000000, 3.899056, 1.004458, 1.004458, 1.201375 }, // Hair3 - 247
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 248
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 249
	{0.078370, 0.009865, 0.000872, 1.162765, 0.000000, 352.236450, 1.004458, 1.004458, 1.166651 }, // Hair3 - 250
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 251
	{0.088582, -0.006075, 0.000872, 1.162765, 0.000000, 352.236450, 1.004458, 1.004458, 1.210478 }, // Hair3 - 252
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 253
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 254
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 255
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 256
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 257
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 258
	{0.072341, -0.001438, 0.002612, 1.162765, 0.000000, 352.128753, 1.004458, 1.004458, 1.218888 }, // Hair3 - 259
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 260
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 261
	{0.075398, 0.005842, 0.002612, 1.162765, 0.000000, 357.731414, 1.004458, 1.004458, 1.057977 }, // Hair3 - 262
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 263
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 264
	{0.074374, -0.003570, 0.002612, 1.162765, 0.000000, 353.925384, 1.004458, 1.004458, 1.109009 }, // Hair3 - 265
	{0.080137, -0.009302, 0.002612, 1.162765, 0.000000, 353.925384, 1.004458, 1.004458, 1.131146 }, // Hair3 - 266
	{0.067543, 0.001360, 0.002612, 1.162765, 0.000000, 349.140075, 1.004458, 1.004458, 1.146864 }, // Hair3 - 267
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 },  // Hair3 - 269
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 },  // Hair3 - 269
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 },  // Hair3 - 270
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 },  // Hair3 - 271
	{0.084866, 0.000078, 0.002612, 1.162765, 0.000000, 350.338287, 1.004458, 1.004458, 1.146864 }, // Hair3 - 272
	{0.059999, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.200000, 1.200000, 1.100000 }, // Hair3 - 273
	{0.082516, 0.006275, 0.002612, 1.162765, 0.000000, 350.338287, 1.004458, 1.004458, 1.090817 }, // Hair3 - 274
	{0.088237, 0.005707, -0.000952, 1.162765, 0.000000, 354.032653, 1.004458, 1.004458, 1.042391 }, // Hair3 - 275
	{0.093156, 0.002306, -0.000952, 1.162765, 0.000000, 357.562286, 1.004458, 1.004458, 0.996686 }, // Hair3 - 276
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 277
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 278
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 279
	{0.089934, 0.005118, -0.000952, 1.162765, 0.000000, 354.893707, 1.004458, 1.004458, 1.037778 }, // Hair3 - 280
	{0.089934, 0.005118, -0.000952, 1.162765, 0.000000, 354.893707, 1.004458, 1.004458, 1.037778 }, // Hair3 - 281
	{0.084915, 0.003095, -0.000952, 1.162765, 0.000000, 354.893707, 1.004458, 1.004458, 1.104662 }, // Hair3 - 282
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 283
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 284
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 285
	{0.086468, 0.001470, -0.000952, 1.162765, 0.000000, 354.893707, 1.004458, 1.004458, 1.092748 }, // Hair3 - 286
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 287
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 288
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 289
	{0.066092, -0.004346, -0.000952, 1.162765, 0.000000, 354.893707, 1.004458, 1.004458, 1.234344 }, // Hair3 - 290
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 291
	{0.074633, 0.006723, -0.000952, 1.162765, 0.000000, 354.744812, 1.004458, 1.004458, 1.020303 }, // Hair3 - 292
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 293
	{0.091338, 0.011203, -0.000952, 1.162765, 0.000000, 7.673956, 1.004458, 1.004458, 1.129834 }, // Hair3 - 294
	{0.077449, 0.006221, 0.002460, 1.162765, 0.000000, 355.039520, 1.004458, 1.004458, 1.108941 }, // Hair3 - 295
	{0.069757, -0.014896, 0.002460, 1.162765, 0.000000, 339.120452, 1.004458, 1.004458, 1.179332 }, // Hair3 - 296
	{0.086319, -0.014856, 0.002460, 1.162765, 0.000000, 357.547332, 1.004458, 1.004458, 1.285995 }, // Hair3 - 297
	{0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, // Hair3 - 298
	{0.091403, 0.024850, 0.002460, 1.162765, 0.000000, 357.547332, 1.004458, 1.004458, 1.193961 } // Hair3 - 299
};

static const Float: EntregaLadron[][] =
{
	{735.35, -1804.15, 13.12},
	{345.3384, -1315.2172, 15.5893},
	{701.3901, -1200.0107, 17.8875},
	{1302.2891, -1246.0732, 13.9886},
	{1289.7131, -1175.4156, 25.2246}
};

static const ColoresGZ[] =
{
	0xC8C3C381,// GRIS (SIN FAMILIA)
 	0x00CF0081,// FAMILIA 1: GROVE (VERDE)
 	0xAF00AF81,// FAMILIA 2: BALLAS (MORADO)
 	0x0000FF81, // FAMILIA 3: SUREÑOS (AZUL)
	0xC8C3C381, //NO SE
 	0x00CF0081, //NO SE
 	0xAF00AF81, //NO SE
	0xC8C3C381, //NO SE
 	0x00CF0081, //NO SE
 	0xAF00AF81 //NO SE
};

enum E_ESTACION_DATA
{
	estObjID,
	estNegID,
	Float:estX,
	Float:estY,
	Float:estZ,
	Float:estAngle,
	Text3D:estLabelID,
	estLitros
}

enum E_PLANTA_DATA
{
	plantaTipo,
	Float:plantaX,
	Float:plantaY,
	Float:plantaZ,
	plantaMax,
	plantaGramos,
	plantaObjID,
	Text3D:plantaLabelID,
	plantaOwner[MAX_PLAYER_NAME],
	plantaCasaID,
	plantaRegada
}

enum E_GRAFFITI_DATA
{
	grafObjID,
	grafColor,
	Float: grafX,
	Float: grafY,
	Float: grafZ,
	Float: grafRotX,
	Float: grafRotY,
	Float: grafRotZ,
	grafTexto[10],
	grafTime,
	grafOwner[MAX_PLAYER_NAME]
}

static const ColorGraffiti[][4] =
{
	{0xFF00D300, 0xFF00D300, 0xFF00D300, 0xFF00D300},// TRANSPARENTE (SIN FAMILIA)
	{0xF000D300, 0xE000D300, 0xD000D300, 0xC000D300},// VERDE (GROVE)
	{0xF0AF00AF, 0xE0AF00AF, 0xD0AF00AF, 0xC0AF00AF},// MORADO (BALLAS)
	{0xF00000FF, 0xE00000FF, 0xD00000FF, 0xC00000FF},// AZUL (SUREÑOS)
	{0xF000D300, 0xE000D300, 0xD000D300, 0xC000D300},// VERDE (NO SE)
	{0xF0AF00AF, 0xE0AF00AF, 0xD0AF00AF, 0xC0AF00AF},// MORADO (NO SE)
	{0xF000D300, 0xE000D300, 0xD000D300, 0xC000D300},// VERDE (NO SE)
	{0xF0AF00AF, 0xE0AF00AF, 0xD0AF00AF, 0xC0AF00AF}// MORADO (NO SE)
};

stock ARGBToRGBA(color)
{
	new
	    str[20];

	format(str, 20, "%x", color);
	strcat(str, "FF");

	if(!sscanf(str, "h", color))
	{
		return color;
	}
	return 0;
}

enum E_SPEEDCAM_INFO
{
	//Object Pos
	Float:camX,
	Float:camY,
	Float:camZ,
	Float:camAngle,
	//Min-Max
	Float:camMinX,
	Float:camMinY,
	Float:camMaxX,
	Float:camMaxY,
	//Data
	camSpeed,
	camMulta,
	//Obj - Label - Zone
	camZoneID,
	camObjID,
	Text3D:camLabelID
}

// ---====[ Ayuntamiento restringido ]====---- //

new
	restriccion1,
	restriccion2,
	restriccion3,
	restriccion4,
	restriccion5,
	restriccion6,
	restriccion7,
	restriccion8,
	restriccion9;

// ---====[ Enums ]====---- //   VARIABLES JUGADOR

enum InfoJ
{
	jClave,
	jPreguntaS[MAX_CARACTERES_PS],
	jRespuestaS,
	jNameCode,
	bool:jRegistrado,
 	jSexo,
	jEdad,
	jPelea,
	jEstilo,
	jDNI,
	Float:jVida,
	Float:jChaleco,
	jRopa[MAX_ROPA],
	jCurrentSkin,
	jDinero,
	jBanco,
	jNivel,
 	Float:jExperiencia,
	Float:jHambre,
	Float:jCansancio,
	Float:jOrina,
 	Float:jPosX,
 	Float:jPosY,
 	Float:jPosZ,
 	jInterior,
 	jVirtualWorld,
	jAdmin,
	jLider,
	jMiembro,
	jFacDuty,
	jRango,
	jEncarcelado,
	jTiempoCarcel,
	jMinutos,
	jHoras,
	jLiderFam,
	jMiembroFam,
	jRangoFam,
	jTrabajo,
	jNivelTrabajo,
	jEntregas,
	jNecesidades,
	jSaldo,
	jIDCuentaB,
	jCurrentObj,
	jCurrentObjD,
	jObjetoColgado,
	jObjetoColgadoData,
	jChalecoObj,
	jChalecoData,
	bool:jBuscadorVeh,
	jAdminJail[MAX_PLAYER_NAME],
	bool:jLicenciaAuto,
	bool:jLicenciaMoto,
	bool:jLicenciaArmas,
	jCosechas,
	jAccesorio[MAX_ACCESORIOS],
	jAttachModel[MAX_ACCESORIOS],
	jAttachBone[MAX_ACCESORIOS],
	bool:jAttachOcultado[MAX_ACCESORIOS],
	jEstrellas,
	bool:jBomba,
	jRepartidas,
	jBarridas,
	jAcento,
	bool:jMuerto,
	bool:jBlockDudas,
	bool:jBlockFam,
	bool:jBlockFac,
	bool:jEsposado,
	bool:jObjInfo,
	jTiempoDudas,
	jIbu400,
	jIbu600,
	jFalopeado,
	jPapeado,
	jAdv,
	jAdmAdv,
	Float:jAttachPosx[MAX_ACCESORIOS],
	Float:jAttachPosy[MAX_ACCESORIOS],
	Float:jAttachPosz[MAX_ACCESORIOS],
	Float:jAttachAngx[MAX_ACCESORIOS],
	Float:jAttachAngy[MAX_ACCESORIOS],
	Float:jAttachAngz[MAX_ACCESORIOS],
	Float:jAttachEscx[MAX_ACCESORIOS],
	Float:jAttachEscy[MAX_ACCESORIOS],
	Float:jAttachEscz[MAX_ACCESORIOS]
};

enum E_NEGOCIO_DATA
{
	nNombre[MAX_CARACTERES_NAME],
	nComprador[MAX_PLAYER_NAME],
	nContra,
	Float:nEntrada_x,
	Float:nEntrada_y,
	Float:nEntrada_z,
	Float:nSalida_x,
	Float:nSalida_y,
	Float:nSalida_z,
	nDinero,
	nVW,
	nInt,
	nPrecio,
	bool:nComprado,
	bool:nCerrado,
	nPrecioEntrada,
	nTipo,
	nIcono,
	nStock[MAX_STOCK_NEGOCIO],
	nVentaStock[MAX_STOCK_NEGOCIO],
	nPickup,
	Text3D:nLabelID,
	Float:nEntrega_x,
	Float:nEntrega_y,
	Float:nEntrega_z
}

enum E_CASA_DATA
{
	cNombre[MAX_CARACTERES_NAME],
	cComprador[MAX_PLAYER_NAME],
	cContra,
	Float:cEntrada_x,
	Float:cEntrada_y,
	Float:cEntrada_z,
	Float:cSalida_x,
	Float:cSalida_y,
	Float:cSalida_z,
	cDinero,
	cVW,
	cInt,
	cPrecio,
	bool:cComprada,
	bool:cCerrada,
	cFamilia,
	cArmarioObjeto[MAX_LUGARES_CASA],
	cArmarioData[MAX_LUGARES_CASA],
	cContra_puerta,
	cDireccion[30],
	cObjModel[MAX_MUEBLES_CASA],
	Float:cObjPosX[MAX_MUEBLES_CASA],
	Float:cObjPosY[MAX_MUEBLES_CASA],
	Float:cObjPosZ[MAX_MUEBLES_CASA],
	Float:cObjRotX[MAX_MUEBLES_CASA],
	Float:cObjRotY[MAX_MUEBLES_CASA],
	Float:cObjRotZ[MAX_MUEBLES_CASA],
	cPickup,
	Text3D:cLabelID
}

enum E_INTINFO
{
	Float:intEntrada_x,
	Float:intEntrada_y,
	Float:intEntrada_z,
	Float:intEntrada_a,

	Float:intSalida_x,
	Float:intSalida_y,
	Float:intSalida_z,
	Float:intSalida_a,

	intInt,
	intInt2,
	intTiempo
}

enum E_GARAGE_DATA
{
	gInt,
	gVW,
	gIDCasa,
	Float:gIntV_x,
	Float:gIntV_y,
	Float:gInt_x,
	Float:gInt_y,
	Float:gInt_z,
	Float:gExt_x,
	Float:gExt_y,
	Float:gExt_z,
	Float:gExtV_x,
	Float:gExtV_y,
	Float:gAng,
	bool:gCerrado,
	Text3D:gLabelID
}

enum iInfo
{
	Float:iPos_x,
	Float:iPos_y,
	Float:iPos_z,
	iInt,
	iNombre[24]
}

enum E_CONTRATOH
{
	hitPor[MAX_PLAYER_NAME],
	hitDinero,
	hitVictima[MAX_PLAYER_NAME]
}


enum E_CAMILLA
{
	camiObjID,
	camiUsadaPor,
}

enum fInfo
{
	fContra[18],
	fDinero,
	fMiembros,
	fLider[MAX_PLAYER_NAME],
	fRangos,
	fRLider[MAX_RANGO_LEN]
};

enum famInfo
{
	fNombre[MAX_CARACTERES_NAME],
	fContra[18],
	fDinero,
	Float:fPos_x,
	Float:fPos_y,
	Float:fPos_z,
	fRango_1[18],
	fRango_2[18],
	fRango_3[18],
	fRango_4[18],
	fRango_5[18],
	fNombre_L[18],
	fMiembros,
	fColor,
	fLider[MAX_PLAYER_NAME],
	bool:fPandilla
}

enum CamaraI
{
	CamNombre[20],
	Float:CamPosX,
	Float:CamPosY,
	Float:CamPosZ,
	Float:CamRotX,
	Float:CamRotY,
	Float:CamRotZ,
	CamInt
}

enum E_OBJETO_TIRADO
{
	obj_t_Type,
	obj_t_Data,
	Float: obj_t_x,
	Float: obj_t_y,
	Float: obj_t_z,
	Float: obj_t_rx,
	Float: obj_t_ry,
	Float: obj_t_rz,
	obj_t_vw,
	obj_t_time,
	obj_t_ObjectID,
	Text3D:obj_t_LabelID
}

enum E_VEH_VENTA
{
	ventaID,
	ventaModel,
	Float:ventaX,
	Float:ventaY,
	Float:ventaZ,
	Float:ventaAngulo,
	ventaColor[2],
	ventaInt,
	ventaVW
}

enum E_VEH_GENERAL
{
	vRadio,

	//Venta
	vehMetros
}


enum InfoPorton_Ex2
{
	portID,
	portModel,
	Float:pX,
	Float:pY,
	Float:pZ,
	Float:pRX,
	Float:pRY,
	Float:pRZ,
	Float:pAX,
	Float:pAY,
	Float:pAZ,
	portFamilia,
	portCasa,
	Float:portVelocidad
};

/*enum E_TICKET_INFO
{
	ticketJugador[MAX_PLAYER_NAME char],
	ticketTexto[128 char],
	ticketTitulo[30 char],
	bool:ticketOn
}*/

enum entInfo
{
	Float:ePosx,
	Float:ePosy,
	Float:ePosz,
	NombreEntrega[25]
}

enum camInfo
{
	camCarga,
	camChofer[MAX_PLAYER_NAME]
}

enum rPos
{
	Float:Posx,
	Float:Posy,
	Float:Posz
}

enum gRandPos
{
	Float:PosVx,
	Float:PosVy,
	Float:Posx,
	Float:Posy,
	Float:Posz,
	IntPG
}

enum objInfo
{
	oID,
	oIDModel,
	Float:oPosx,
	Float:oPosy,
	Float:oPosz,
	Float:oAngx,
	Float:oAngy,
	Float:oAngz,
	oNombre[26],
	oTamano,
	oColor,
	oTamanoO,
	oIndexO
}

static const InfoCamara[MAX_CAMARAS][CamaraI] =
{
	{"Centro\n",1542.625732,-1714.364746,27.157493,0.000000,0.000000,67.199989,0},
	{"Grove\n",2229.954833,-1721.087036,18.462814,0.000000,0.000000,54.599998,0},
	{"Grotti\n",582.885864,-1271.972900,37.272178,0.000000,0.000000,43.100006,0},
	{"Unity\n",1788.588378,-1868.551269,27.015766,0.000000,0.000000,-140.499969,0}
};

static const PosCajero[11][rPos] =
{
    {2241.60009766,-1722.69995117,13.199999},
	{2423.39990234,-2111.80004883,12.899999},
	{1774.40002441,-1303.19995117,13.199999},
	{488.00000000,-1269.19995117,15.399999},
	{1539.19995117,-1611.40002441,13.199999},
	{1497.09997559,-1022.20001221,23.5},
	{815.70001221,-1356.50000000,13.0000},
	{-832.294738, 1629.097534, 1004.099780},
	{-847.641479, 1612.629760, 1004.079699},
	{-831.937500, 1613.122192, 1004.029833},
	{0.0, 0.0, 0.0}
};

enum E_INFOTV
{
	bool:tvPrendida,
	Float:tvPos[3],
	Text3D:tvLabelID
}

enum E_GZ
{
	gzID,
	Float:gzMin[2],
	Float:gzMax[2],
	gzPandilla
}

static const Float:PosMapas[][3] =
{
	{1420.4203,-2278.3896,13.5469},
	{1536.2032,-1684.4418,13.5469},
	{614.5687,-1229.0382,18.4063},
	{1188.0443,-1338.4818,13.5703}
};

static const ComidaRandom[3][entInfo] =
{
	{788.7081,-1607.7781,13.0451,"Burger shot"},
	{1195.3383,-885.7877,42.6999,"Burger shot"},
	{922.6721,-1367.2224,13.387,"Polleria"}
};

static const ProductosVariosRandom[4][entInfo] =
{
	{1330.0690,-1759.7898,13.5321,"24/7"},
	{1330.2429,-895.0700,39.5781,"24/7"},
	{1853.1027,-1863.1195,13.578,"24/7"},
	{1001.3561,-906.2241,42.1897,"24/7"}
};

static const RopaRandom[2][entInfo] =
{
    {459.1196,-1509.3938,30.6371,"Victim"},
    {507.6712,-1370.8846,15.7813,"ProLaps"}
};

static const GunObjectIDs[200] =
{
   1575,  331, 333, 334, 335, 336, 337, 338, 339, 341, 321, 322, 323, 324, 325, 326, 342, 343, 344, -1,  -1 , -1 ,
   346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 372, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367,
   368, 369, 1575
};

static const InfoPGarage[4][gRandPos] =
{
	{424.8867,-95.2384,424.9882,-92.0879,1001.9422,10},//1P
	{424.8867,-95.2384,424.9882,-92.0879,1011.9422,10},//1P (2)
	{1256.3330,-862.0385,1256.1805,-858.8985,1091.2500,12},//2P
	{1249.9900,-861.5973,1249.9752,-858.9730,1091.2571,12}//2P
};

static const Float:PosCosechador[][] =
{
	{-333.4692,-1551.5880,17.4959},
	{-256.9904,-1548.0887,4.8160},
	{-231.5370,-1506.2548,8.2647},
	{-296.2882,-1502.8801,9.9922},
	{-330.5794,-1537.3042,16.1080},
	{-279.7478,-1497.7610,7.1128},
	{-245.2324,-1533.0647,7.2700},
	{-301.9364,-1512.7740,11.2018},
	{-237.8461,-1532.9968,7.7409},
	{-299.5619,-1556.5031,10.9817},
	{-334.6909,-1498.9265,15.7652},
	{-298.4679,-1506.9617,10.4160},
	{-232.6167,-1502.5851,8.4119},
	{-314.3433,-1508.2867,13.0306},
	{-257.6104,-1544.8319,4.9910},
	{-284.9919,-1494.5419,7.9653},
	{-323.5702,-1540.3977,14.9458},
	{-216.5785,-1513.3771,8.6452},
	{-296.1812,-1474.7650,9.0749},
	{-299.5686,-1538.0913,10.9153},
	{-239.8322,-1495.4973,8.2345},
	{-329.6028,-1545.0481,16.3307},
	{-267.9359,-1492.1549,6.1680},
	{-246.8104,-1539.8185,6.2150},
	{-316.2400,-1517.5505,13.4661},
	{-273.7764,-1471.4912,5.1318},
	{-218.9790,-1503.2214,9.2434},
	{-294.9313,-1551.9855,9.9503},
	{-331.6007,-1502.5297,15.3900},
	{-252.5156,-1475.8700,5.7722},
	{-244.1072,-1534.8844,7.1269},
	{-309.7529,-1544.1749,12.8320},
	{-249.9255,-1526.8011,7.4270},
	{-239.9843,-1476.6034,5.9913},
	{-320.4266,-1508.0272,13.8714},
	{-248.5892,-1489.2422,7.2629},
	{-230.0903,-1520.7223,8.0347},
	{-297.0505,-1524.3223,10.4066},
	{-311.2873,-1481.5403,12.2303},
	{-241.0233,-1518.3217,8.0381},
	{-252.2939,-1476.2091,5.8159},
	{-312.1794,-1478.0223,12.2565},
	{-326.4589,-1451.7711,15.0675}
};

static const Float:PosCosechadorLVL2[][] =
{
	{-326.8195,-1432.4333,16.3058},
	{-323.3792,-1363.7814,11.256},
	{-271.7128,-1316.8467,10.7647},
	{-184.8188,-1341.7499,5.9516},
	{-193.0944,-1394.7660,6.1860},
	{-275.7877,-1409.0581,12.5183},
	{-222.9586,-1331.8920,11.9227},
	{-302.0227,-1352.5582,9.2418},
	{-189.3108,-1413.5991,4.0111},
	{-206.7104,-1329.0688,11.0320},
	{-295.1722,-1324.9316,9.647},
	{-269.2221,-1393.3704,12.0535},
	{-194.6432,-1362.6427,5.8616},
	{-280.3448,-1420.4486,12.5267},
	{-261.5758,-1327.5559,9.7007},
	{-180.5184,-1358.3851,5.0497},
	{-259.3883,-1355.7599,9.6120},
	{-303.7245,-1324.9417,9.6941},
	{-323.9457,-1396.4388,14.0701},
	{-243.8454,-1415.7764,8.8089},
	{-257.9005,-1336.6881,8.6278},
	{-309.9982,-1389.8918,13.130},
	{-254.2996,-1334.4839,8.9944},
	{-185.2626,-1344.0186,5.7393},
	{-236.5471,-1420.5681,7.4577},
	{-294.4330,-1385.4451,11.2914},
	{-196.8177,-1346.0685,8.0010},
	{-232.7183,-1399.5902,9.6823},
	{-278.3015,-1338.4418,8.176},
	{-313.5264,-1378.5321,11.5986},
	{-260.7183,-1398.0408,11.5577},
	{-184.0902,-1346.2943,5.374},
	{-266.0182,-1349.1570,8.820},
	{-301.3180,-1409.1227,14.6790},
	{-231.3233,-1353.0618,8.5059},
	{-297.7330,-1318.5404,10.0505},
	{-229.7041,-1328.7260,11.4365},
	{-197.7808,-1398.5493,6.4561},
	{-285.7790,-1411.5129,13.199},
	{-286.7552,-1339.7042,8.421},
	{-202.2247,-1337.1835,11.1936},
	{-169.4673,-1386.9995,4.4710},
	{-242.6228,-1422.5020,7.7871},
	{-302.2856,-1406.3257,14.601},
	{-277.8114,-1367.0129,10.7527},
	{-241.9338,-1329.2371,9.919},
	{-315.9160,-1368.3363,10.829},
	{-263.4617,-1415.8734,10.5638},
	{-225.4660,-1337.0029,11.0773},
	{-307.9829,-1409.4314,14.9137},
	{-342.9226,-1446.7858,19.6799}
};

static const Float:PosCosechadorMari[][] =
{
	{-1018.879, -1625.632, 77.358},
	{-989.426, -1620.803, 77.343},
	{-981.567, -1595.859, 77.344},
	{-1002.971, -1588.634, 77.350},
	{-999.472, -1614.842, 77.344},
	{-1025.369, -1612.559, 77.344},
	{-1009.058, -1592.011, 77.351},
	{-981.299, -1593.088, 77.344},
	{-1003.966, -1574.583, 77.349},
	{-1014.876, -1616.694, 77.345},
	{-1017.097, -1660.169, 77.564}
};


enum AttachmentEnum
{
    attachmodel,
    attachname[21],
    attachprecio
}

static const ObjetosInterior[][] =
{
	{0000, 0000, "ERROR - NULL"}, // 1
	{2165, 1500, "PC + Escritorio"}, // 1
	{2356, 100, "Silla de Escritorio"}, // 2
	{2028, 350, "Consola CJD500"}, // 3
	{2779, 600, "Máquina de juegos"}, // 4
	{2030, 750, "Mesa de Marmol"}, // 5
	{2086, 1000, "Mesa de Vidrio"}, // 6
	{2112, 300, "Mesa de madera A"}, // 7
	{2115, 600, "Mesa de madera B"}, // 8
	{2079, 80, "Silla A"}, // 9
	{2120, 150, "Silla B"}, // 10
	{2121, 50, "Silla Roja"}, // 11
	{2096, 100, "Silla Grande"}, // 12
	{2069, 100, "Lampara"}, // 13
	{2103, 800, "Estereo"}, // 14
	{2132, 200, "Fregadera Blanca"}, // 15
	{2141, 900, "Heladera Blanca"}, // 16
	{2149, 600, "Microondas"}, // 17
	{2161, 500, "Estanteria"}, // 18
	{2167, 750, "Armario"}, // 19
	{2202, 1500, "Fotocopiadora"}, // 20
	{2313, 900, "TV + DVD Player"}, // 21
	{2312, 1200, "Television A"}, // 22
	{2316, 1200, "Television B"}, // 23
	{2322, 1200, "Television C"}, // 24
	{2298, 1000, "Cama Azul"}, // 25
	{2299, 1000, "Cama Marron"}, // 26
	{2300, 1000, "Cama Amarilla"}, // 27
	{2301, 1000, "Cama Amarilla-Roja"}, // 28
	{2526, 1250, "Bañera"}, // 29
	{2527, 1200, "Ducha"}, // 30
	{2524, 200, "Lavado"}, // 31
	{2525, 200, "Inodoro"}, // 32
	{1208, 120, "Lavaropa"}, // 33
	{1762, 120, "Sillón A"}, // 34
	{1765, 120, "Sollón B"}, // 35
	{1761, 700, "Sofa A"}, // 36
	{1764, 700, "Sofa B"}, // 37
	{1409, 20, "Tacho de basura"}, // 38
	{2627, 500, "Cinta para correr"}, // 39
	{2630, 480, "Bicicleta Fija"}, // 40
	{2964, 1000, "Mesa de pool"}, // 41
	{1502, 200, "Puerta"}, // 42
	{19317, 600, "Guitarra eléctrica"}, // 43
	{2134, 400, "Cocina blanca Parte 1"}, // 44
	{2133, 400, "Cocina blanca Parte 2"}, // 45
	{2131, 400, "Cocina blanca Parte 3"}, // 46
	{2130, 200, "Fregadera Roja"}, // 47
	{2128, 900, "Heladera Roja"}, // 48
	{2127, 300, "Cocina roja Parte 1"}, // 49
	{2129, 300, "Cocina roja Parte 2"}, // 50
	{2294, 300, "Cocina roja Parte 3"}, // 51
	{19166, 100, "Cuadro de San Andreas"}, // 52
	{19172, 100, "Cuadro de Santa Maria B."}, // 53
	{19173, 100, "Cuadro de San Fierro"}, // 54
	// --------------| ADDED IN v2 |----------------- //
	{1840, 120, "Parlante"}, // 54
	{1839, 230, "Equipo de música"}, // 54
	{1828, 80, "Alfombra Leopardo"}, // 54
	{1817, 60, "Mesa ratona"}, // 54
	{1808, 30, "Bidón de agua"}, // 54
	{1803, 155, "Cama madera"}, // 54
	{1755, 210, "Sofá azul"}, // 54
	{1760, 210, "Sillón azul"}, // 54
	{1753, 210, "Sillón marron"}, // 54
	{1744, 30, "Estante"}, // 54
	{1742, 300, "Mueble+libros"}, // 54
	{1738, 90, "Estufa pared"}, // 54
	{1735, 160, "Sofá floreado"}, // 54
	{1726, 270, "Sillón negro"}, // 54
	{1727, 270, "Sofá negro"}, // 54
	{1724, 270, "Sofá negro madera"}, // 54
	{1723, 270, "Sillón negro madera"}, // 54
	{1717, 150, "Televisor c/pie"}, // 54
	{1705, 270, "Sofá marrón madera"}, // 54
	{1702, 270, "Sillón marrón madera"}, // 54
	{16779, 100, "Ventilador"}, // 54
	{1649, 70, "Vidrio"}, // 54
	// ----------------------------------
	{2135, 500, "Horno + extractor Beige"}, // 55
	{2136, 200, "Fregadera Beige"}, // 56
	{2137, 300, "Cocina Beige Parte 1"}, // 57
	{2139, 300, "Cocina Beige Parte 2"}, // 58
	{2140, 300, "Cocina Beige Parte 3"}, // 59
	{2160, 200, "Fregadera de madera"}, // 60
	{2159, 300, "Cocina madera parte 1"}, // 61
	{2158, 300, "Cocina madera parte 2"}, // 62
	{2157, 300, "Cocina madera parte 3"}, // 63
	{19354, 400, "Pared media negra"}, // 64
	{19355, 400, "Pared media gris"}, // 65
	{19356, 400, "Pared media madera"}, // 66
	{19357, 400, "Pared media blanca"}, // 67
	{19384, 350, "Marco puerta negro"}, // 68
	{19385, 350, "Marco puerta gris"}, // 69
	{19386, 350, "Marco puerta madera"}, // 70
	{19387, 350, "Marco puerta blanco"}, // 71
	{19400, 350, "Marco ventana negro"}, // 72
	{19401, 350, "Marco ventana gris"}, // 73
	{19402, 350, "Marco ventana madera"}, // 74
	{19403, 350, "Marco ventana blanco"}, // 75
	{19427, 280, "Pared chica negra"}, // 76
	{19428, 280, "Pared chica gris"}, // 77
	{19429, 280, "Pared chica madera"}, // 78
	{19430, 280, "Pared chica blanca"}, // 79
	{19446, 280, "Pared grande negra"}, // 80
	{19447, 280, "Pared grande gris"}, // 81
	{19448, 280, "Pared grande madera"}, // 82
	{19449, 280, "Pared grande blanca"}, // 83
	//AGREGADOS (ESTO NO QUEDA ASI)
	//Oficina
	{1826, 1000, "Escritorio Blanco"},
	{1806, 350, "Silla de escritorio"},
	{1963, 1200, "Escritorio moderno"},
	{1998, 1600, "Escritorio largo +pc+telefono"},
	{1999, 1500, "Escritorio + Pc"},
	{2002, 700, "Dispenser"},
	{2017, 2100, "Cocina"},
	{2066, 650, "Casilleros"},
	{2065, 650, "Casillero de metal"},
	{2074, 200, "Lampara pequeña"},
	{2161, 700, "Librero mediano"},
	{2162, 950, "Librero pequeño"},
	{2163, 650, "Armario pequeño"},
	{2164, 1000, "Armario+librero"},
	{2165, 1500, "Escritorio+Pc+Libros"},
	{2167, 900, "Armario blanco"},
	{2196, 90, "Lámpara de mesa"},
	{2199, 800, "Estantes de oficina"},
	{2169, 1155, "Escritorio K"},
	{2197, 600, "Casilleros"},
	{2184, 1700, "Escritorio Grande"},
	{2186, 960, "Fotocopiadora"},
	{2207, 700, "Escritorio de oficina"},
	{2208, 300, "Escritorio"},
	//Comedor
	{1737, 800, "Mesa de madera"},
	{1811, 260, "Silla A"},
	{1813, 600, "Mesa blanca"},
	{2013, 1600, "Fregadora A"},
	{2014, 1000, "Mesada A"},
	{2109, 850, "Mesa redonda"},
	{2116, 900, "Mesa ondulada"},
	{2118, 1600, "Mesa de marmol"},
	{2123, 600, "Silla blanca"},
	{2124, 900, "Silla de comedor"},
	//Sala
	{1820, 500, "Mesa Ratona De Madera"},
	{1822, 600, "Mesa Ratona c/Vidrio"},
	{1757, 900, "Sofá"},
	{1756, 950, "Sofá"},
	{1823, 450, "Mesa Ratona"},
	{1755, 640, "Sillón"},
	{1761, 990, "Sofá"},
	{1762, 650, "Sillón"},
	{1768, 800, "Sofá"},
	{1769, 650, "Sillón"},
	{1814, 400, "Mesa ratona"},
	{2023, 300, "Lámpara"},
	{2096, 400, "Silla de madera vieja"},
	{2026, 650, "Lámpara de techo"},
	{2108, 1300, "Lampara Lujosa"},
	{2560, 400, "Cortinas largas"},
	{2561, 600, "Cortinas largas"},
	{2558, 500, "Cortinas cortas"},
	{2559, 500, "cortinas cortas"},
	{2595, 400, "Televisor"},
	//Decoración
	{1828, 3000, "Alfombra De Leopardo"},
	{1846, 300, "Vidrio"},
	{2244, 60, "Planta G"},
	{2245, 45, "Planta E"},
	{2247, 90, "Planta c/vidrio"},
	{2251, 400, "Planta+jarron importado"},
	{2255, 40, "Cuadro 1"},
	{2254, 40, "Cuadro 2"},
	{2256, 40, "Cuadro 3"},
	{2257, 200, "Cuadro 4"},
	{2258, 200, "Cuadro 5"},
	{2259, 200, "Cuadro 6"},
	{2260, 200, "Cuadro 7"},
	{2261, 200, "Cuadro 8"},
	{2262, 200, "Cuadro 9"},
	{2263, 200, "Cuadro 10"},
	{2264, 200, "Cuadro 11"},
	{2265, 200, "Cuadro 12"},
	{2266, 200, "Cuadro 13"},
	{2267, 200, "Cuadro 14"},
	{2268, 200, "Cuadro 15"},
	{2269, 200, "Cuadro 16"},
	{2524, 1000, "Pileta Lujosa"},
	{2271, 200, "Cuadro 17"},
	{2272, 200, "Cuadro 18"},
	{2273, 200, "Cuadro 19"},
	{2274, 200, "Cuadro 20"},
	{2275, 200, "Cuadro 21"},
	{2276, 200, "Cuadro 22"},
	{2614, 600, "Maguja doble"},
	//Electrodomesticos
	{1840, 500, "Parlante chico"},
	{1786, 980, "Televisor A"},
	{1809, 600, "Equipo de música"},
	{2099, 1300, "Estereo+Parlantes"},
	{2101, 800, "Estereo simple"},
	{2102, 500, "Estereo todo en uno"},
	{2104, 1500, "Equipo de musica"},
	{2149, 750, "Microondas"},
	{2190, 1000, "PC"},
	{2226, 400, "Radio"},
	{2229, 3800, "Parlante LX-2000"},
	{2231, 1600, "Parlante LX-750"},
	{2232, 5600, "Parlante LX-5000"},
	{2233, 2000, "Parlante LX-1000"},
	{2596, 790, "Televisor Z"},
	//Sanitario
	{1778, 90, "Lampazo"},
	{2514, 700, "Inodoro A"},
	{2515, 600, "Pileta A"},
	{2516, 1200, "Bañera"},
	{2517, 2300, "Ducha A"},
	{2518, 770, "Pileta B"},
	{2521, 660, "Inodoro B"},
	{2523, 900, "Pileta + alfombrita"},
	{2525, 990, "Inodoro Lujoso"},
	{2526, 1000, "Bañera Lujosa"},
	{2527, 1200, "Ducha +cortinas"},
	{2528, 980, "Inodoro C"},
	//Habitacion
	{1799, 1200, "Cama A"},
	{1801, 950, "Cama B"},
	{2087, 1400, "Cajonera"},
	{2089, 1200, "Cajonera negra"},
	{2090, 800, "Cama simple"},
	{2091, 1900, "Mueble+tv"},
	{2093, 1300, "Mueble+tv pequeño"},
	{2025, 700, "Armario"},
	{2029, 680, "Mesa"},
	{2105, 500, "Lampara A"},
	{2106, 600, "Lampara B"},
	{2031, 650, "Mesa"},
	{2048, 300, "Bandera B"},
	{2224, 4500, "Televisor redondo"},
	{2200, 800, "Armario"},
	{2204, 800, "Armario"},
	{2205, 600, "Escritorio"},
	{2566, 2000, "Cama lujosa"},
	{2573, 2500, "Armario+mueble"},
	{2297, 2000, "Cómoda+Televisor"},
	{2574, 1500, "Mueble+mesa"},
	{2576, 1630, "Armario+Mueble"},
	{2302, 499, "Cama simple B"},
	//Otros
	{1946, 40, "Pelota"},
	{1962, 20, "Disco A"},
	{1961, 20, "Disco B"},
	{1960, 20, "Disco C"},
	{1808, 300, "Bidón de agua"},
	{2010, 300, "Planta A"},
	{2010, 300, "Planta B"},
	{2047, 300, "Bandera A"},
	{2075, 2000, "Luz de techo"},
	{2078, 1600, "Armario"},
	{2194, 230, "Cactus"},
	{2195, 300, "Planta"},
	{2240, 200, "Planta"},
	{2241, 200, "Planta B"},
	{2627, 1600, "Cinta"},
	{2628, 1900, "MegaTricep"},
	{2629, 2100, "UltraTricep"},
	{2630, 1555, "Bicicleta fija"},
	//Cocina
	{1805, 150, "Silla de cocina"},
	{2018, 650, "Lavarropa"},
	{2143, 1100, "Lavarropas A"},
	{2144, 1350, "Cocina A"},
	{2145, 950, "Alacena"},
	{2156, 1000, "Mesada A"},
	{2158, 1900, "Heladera A"},
	//Construccion
	{19363, 1000, "Pared mediana gastada"},
	{19365, 1000, "pared mediana gris"},
	{19369, 1100, "Pared mediana bordeada"},
	{19383, 1500, "Marco doble color"},
	{19388, 1300, "Marco Gris"},
	{19450, 2000, "Pared Larga doblecolor"},
	{19461, 1600, "pared larga bordeada"},
	{19358, 1200, "pared corta doble color"},
	{1491, 790, "Puerta de MAdera"},
	{1492, 780, "Puerta verde"},
	{1494, 800, "Puerta azul"}
};

static const AttachmentObjects[][AttachmentEnum] =
{
	{18636, "Gorra (policia)",20},
	{18638, "Casco (minero)",15},
	{18639, "Sombrero",25},
	{18640, "Pelo",40},
	{18975, "Pelo 2",40},
	{19136, "Pelo 3",40},
	{19274, "Pelo 4",40},
	{19516, "Pelo 5",40},
	{19517, "Pelo 6",40},
	{19518, "Pelo 7",40},
	{19519, "Pelo 8",40},
	{19520, "Sombrero (Piloto)",40},
	{19521, "Sombrero (Policia)",40},
	{18641, "Linterna",10},
	{18645, "Casco de moto",30},
	{18891, "Bandana 1",10},
	{18892, "Bandana 2",10},
	{18893, "Bandana 3",10},
	{18894, "Bandana 4",10},
	{18895, "Bandana 5",10},
	{18896, "Bandana 6",10},
	{18897, "Bandana 7",10},
	{18898, "Bandana 8",10},
	{18899, "Bandana 9",10},
	{18900, "Bandana 10",10},
	{18901, "Bandana 11",10},
	{18902, "Bandana 12",10},
	{18903, "Bandana 13",10},
	{18904, "Bandana 14",10},
	{18905, "Bandana 15",10},
	{18906, "Bandana 16",10},
	{18907, "Bandana 17",10},
	{18908, "Bandana 18",10},
	{18909, "Bandana 19",10},
	{18910, "Bandana 20",10},
	{18911, "Bandana 22",10},
	{18912, "Bandana 23",10},
	{18913, "Bandana 24",10},
	{18914, "Bandana 25",10},
	{18915, "Bandana 26",10},
	{18916, "Bandana 27",10},
	{18917, "Bandana 28",10},
	{18918, "Bandana 29",10},
	{18919, "Bandana 30",10},
	{18920, "Bandana 31",10},
	{18921, "Boina",10},
	{18922, "Boina 1",10},
	{18923, "Boina 2",10},
	{18924, "Boina 3",10},
	{18925, "Boina 4",10},
	{18926, "Gorra",10},
	{18927, "Gorra 1",10},
	{18928, "Gorra 2",10},
	{18929, "Gorra 3",10},
	{18930, "Gorra 4",10},
	{18931, "Gorra 5",10},
	{18932, "Gorra 6",10},
	{18933, "Gorra 7",10},
	{18934, "Gorra 8",10},
	{18935, "Gorra 9",10},
	{18936, "Casco",10},
	{18937, "Casco 1",10},
	{18938, "Casco 2",10},
	{18939, "Gorra 10",10},
	{18940, "Gorra 11",10},
	{18941, "Gorra 12",10},
	{18942, "Gorra 13",10},
	{18943, "Gorra 14",10},
	{18944, "Sombrero",30},
	{18945, "Sombrero 1",30},
	{18946, "Sombrero 2",30},
	{18947, "Sombrero 3",30},
	{18948, "Sombrero 4",30},
	{18949, "Sombrero 5",30},
	{18950, "Sombrero 6",30},
	{18951, "Sombrero 7",30},
	{18952, "Casco (boxeo)",30},
	{18953, "Sombrero 8",30},
	{18954, "Sombrero 9",30},
	{18955, "Gorra 15",15},
	{18956, "Gorra 16",15},
	{18957, "Gorra 17",15},
	{18958, "Gorra 18",15},
	{18959, "Gorra 19",15},
	{18960, "Gorra 20",15},
	{18961, "Gorra 21",15},
	{18962, "Sombrero 10",30},
	{18964, "Bufon",15},
	{18965, "Bufon 1",15},
	{18966, "Bufon 2",15},
	{18967, "Gorro",15},
	{18968, "Gorro 1",15},
	{18969, "Gorro 2",15},
	{18970, "Gorro 3",15},
	{18971, "Gorro 4",15},
	{18972, "Gorro 5",15},
	{18973, "Gorro 6",15},
	{18974, "Mascara (Zorro)",60},
	{18976, "Casco (moto)",30},
	{18977, "Casco (moto) 1",30},
	{18978, "Casco (moto) 2",30},
	{18979, "Casco (moto) 3",30},
	{19006, "Lentes",15},
	{19007, "Lentes",15},
	{19008, "Lentes",15},
	{19009, "Lentes",15},
	{19010, "Lentes",15},
	{19011, "Lentes",15},
	{19012, "Lentes",15},
	{19013, "Lentes",15},
	{19014, "Lentes",15},
	{19015, "Lentes",15},
	{19016, "Lentes",15},
	{19017, "Lentes",15},
	{19018, "Lentes",15},
	{19019, "Lentes",15},
	{19020, "Lentes",15},
	{19021, "Lentes",15},
	{19022, "Lentes",15},
	{19023, "Lentes",15},
	{19024, "Lentes",15},
	{19025, "Lentes",15},
	{19026, "Lentes",15},
	{19027, "Lentes",15},
	{19028, "Lentes",15},
	{19029, "Lentes",15},
	{19030, "Lentes",15},
	{19031, "Lentes",15},
	{19032, "Lentes",15},
	{19033, "Lentes",15},
	{19034, "Lentes",15},
	{19035, "Lentes",15},
	{19039, "Reloj",8},
	{19040, "Reloj",8},
	{19041, "Reloj",8},
	{19042, "Reloj",8},
	{19043, "Reloj",8},
	{19044, "Reloj",8},
	{19045, "Reloj",8},
	{19046, "Reloj",8},
	{19047, "Reloj",8},
	{19048, "Reloj",8},
	{19049, "Reloj",8},
	{19050, "Reloj",8},
	{19051, "Reloj",8},
	{19052, "Reloj",8},
	{19053, "Reloj",8},
	{19093, "Gorra blanca",20},
	{19095, "Sombrero",20},
	{19096, "Sombrero",20},
	{19097, "Sombrero",20},
	{19098, "Sombrero",20},
	{19099, "Sombrero (policia)",80},
	{19100, "Sombrero (policia)",80},
	{19101, "Casco (policia)",80},
	{19102, "Casco (policia)",80},
	{19103, "Casco (policia)",80},
	{19104, "Casco (policia)",80},
	{19105, "Casco (policia)",80},
	{19106, "Casco (policia)",80},
	{19107, "Casco (policia)",80},
	{19108, "Casco (policia)",80},
	{19109, "Casco (policia)",80},
	{19110, "Casco (policia)",80},
	{19111, "Casco (policia)",80},
	{19112, "Casco (policia)",80},
	{19113, "Casco",40},
	{19114, "Casco",40},
	{19115, "Casco",40},
	{19116, "Casco",40},
	{19117, "Casco",40},
	{19118, "Casco",40},
	{19119, "Casco",40},
	{19120, "Casco",40},
	{19137, "Sombrero (polleria)",30},
	{19138, "Lentes",30},
	{19139, "Lentes",30},
	{19140, "Lentes",30},
	{19141, "Casco (SWAT)",120},
	{19160, "Sombrero",120},
	{19161, "Gorra (policia)",120},
	{19162, "Gorra (policia)",120},
	{19352, "Galera",120},
	{19487, "Galera",120},
	{19488, "Sombrero",30},
	{19421, "Headphone",110},
	{19422, "Headphone",110},
	{19423, "Headphone",110},
	{19424, "Headphone",110}
};

/*new LibroPolicia[][] =
{
	!"La policía está instituida para proteger a los habitantes del territorio\n\
 	en su libertad y en los derechos que de ésta se derivan, por los medios y\n\
 	con los límites declarados por la Constitución Nacional, en la ley, en las\n\
  	Convenciones y Tratados Internacionales, en el Reglamento de Policía y en \n\
  	los principios universales del derecho.",
	!"La policia compromete la conservación del orden público interno. El orden\n\
	público que protege la policía resulta de la prevención y la eliminación de\n\
	las perturbaciones de la seguridad, de la tranquilidad, de la salubridad y \n\
	la moralidad públicas.",
	"La libertad se define y garantiza en la Constitución en las Convenciones y \n\
	Tratados Internacionales y la regulación de su ejercicio corresponde a la ley a los reglamentos.",
	!"En ningún caso la policía podrá emplear medios incompatibles con los principios humanitarios.",
	!"Las normas y los servicios de policía son medios para prevenir la infracción penal.",
	!"Ninguna actividad de policía puede contrariar a quien ejerza su derecho sino a quien abuse de él.",
	!"Podrá reglamentarse el ejercicio de la libertad en cuanto se desarrolle en lugar público o abierto\n\
	al público o de modo que trascienda de lo privado.",
	!"La constitución nacional otorga a la Policía determinados permisos para actuar.\n\
	Cualquier ruptura de alguna de estas normas, el policía será sentenciado\n\
 	a diversos castigos impuestos por el "#R_LSPD_L".",
	!"La constitucion nacional, otorga los siguientes permisos:\n\
	\t• Utilizar únicamente el arma que brinde el "#R_LSPD_L".\n\
	\t• Utilizar el uniforme impuesto por el "#R_LSPD_L"\n\
	\t• En caso de un sospechoso demorado, se debe obtener el permiso del "#R_LSPD_L"\n\
	\t  para efectuar cualquier acción, que implique la detención, encarcelación del mismo\n\
	\t• Las armas, deben ser utilizadas únicamente en caso de que sea necesaria.",
	!"Cualquier acto efectuado por un policía, que viole los derechos civiles de\n\
	cualquier persona, será gravemente sancionado, dependiendo de la gravedad del caso",
	!"Las llamadas Advertencias policiales, son aplicadas en caso de que un agente\n\
	viole, o rompa las leyes anteriormente mencionadas, el "#R_LSPD_L" aplcará la\n\
	sanción correspondiente, ya sea sumando advertencias, o expulsadolo del cuerpo\n\
	policial.",
	!"A una suma de 4 (cuatro) advertencias, el policía será expulsado.",
	!"Existen códigos de abreviatura, como por ejemplo, el botón ''REF'' en la radio\n\
	para pedir refuerzos. Este, reporta tu ubicación a los demás oficiales, e informa\n\
	que vallan.",
	!"Existen códigos claves para utilizar en los informes, estos son:\n\
	\t• IPP: Invación a propiedad privada.\n\
	\t• VDC: Violación de derechos civiles\n\
	\t• AP: Abuso del poder de un oficial\n\
	\t• PAI: Portación de armas ilegal (Sin licencia)\n\
	\t• SNI: Sujeto no identificado"
};*/

static const AttachmentBones[][] =
{
	{"Columna vertebral"},
	{"Cabeza"},
	{"Brazo izquierdo"},
	{"Brazo derecho"},
	{"Mano izquierda"},
	{"Mano derecha"},
	{"Muslo izquierdo"},
	{"Muslo derecho"},
	{"Pie izquierdo"},
	{"Pie derecho"},
	{"Pantorrilla derecha"},
	{"Pantorrilla izquierda"},
	{"Antebrazo izquierdo"},
	{"Brazo derecho"},
	{"Clavícula izquierda"},
	{"Clavícula derecha"},
	{"Cuello"},
	{"Mandíbula"}
};

static const PosRepartidorBici[37][rPos] =
{
	{1784.8794,-1286.4650,13.1454},
	{1709.5210,-1343.7234,13.0589},
	{1518.9237,-1445.9404,13.051},
	{1294.7712,-1543.3961,13.0571},
	{1153.1699,-1566.7540,13.0564},
	{1032.6443,-1555.7172,13.0605},
	{1038.4423,-1332.6990,13.0589},
	{1001.9288,-1154.4996,23.3532},
	{1022.6967,-1135.4106,23.3352},
	{1087.3840,-1068.3732,27.9118},
	{1428.0126,-959.0988,35.8540},
	{1437.9546,-939.0643,35.5922},
	{1423.3790,-873.6474,49.2838},
	{1472.0377,-885.6097,56.3801},
	{1521.1304,-848.2230,65.4246},
	{1522.2830,-798.5494,73.2076},
	{1513.0347,-775.9583,79.6695},
	{1463.7498,-731.5829,92.9745},
	{1238.4674,-729.4493,95.1268},
	{1081.3834,-775.9934,107.6036},
	{920.9072,-669.8862,117.2162},
	{790.5565,-808.3723,65.3238},
	{915.0607,-833.7178,92.6228},
	{865.7886,-859.6664,76.9895},
	{833.7240,-866.7861,68.4361},
	{853.9235,-892.4321,64.6792},
	{480.1762,-1283.3325,15.1101},
	{192.5630,-1739.2463,3.7983},
	{396.0812,-1779.6624,5.0975},
	{703.9941,-1770.5037,13.0422},
	{912.0363,-1530.7986,13.0665},
	{1425.5543,-1559.8296,13.0495},
	{1993.7052,-1756.5781,12.8852},
	{2077.0566,-1732.2482,12.8888},
	{2077.2341,-1718.1078,12.8968},
	{2077.4238,-1703.0667,12.9025},
	{2031.3412,-1294.9836,20.4294}
};

static const Float: Camillas [][] =
{
	{2033.06177, 2893.05981, 1104.23755, 0.00000},
	{2036.92114, 2884.84375, 1104.23755, 0.00000},
	{2036.88745, 2872.36279, 1104.23755, 0.00000},
	{2033.06372, 2876.89282, 1104.23755, 0.00000},
	{2033.03674, 2887.18750, 1104.23755, 0.00000}
};

new
	InfoNegocio  			[MAX_NEGOCIOS]   			[E_NEGOCIO_DATA],
	InfoCasa	 			[MAX_CASAS]      			[E_CASA_DATA],
	InfoGarage   			[MAX_GARAGES]    			[E_GARAGE_DATA],
	InfoInteriorCasa 		[MAX_INTERIORES_CASA] 		[iInfo],
	InfoFaccion  			[MAX_FACCIONES+1]			[fInfo],
	InfoCamion				[MAX_CAMIONES+1]			[camInfo],
	InfoFamilia  			[MAX_FAMILIAS]   			[famInfo],
	InfoJugador  			[MAX_PLAYERS]    			[InfoJ],
	InfoJugadorTemp     	[MAX_PLAYERS]           	[InfoJ],
	Objeto		 			[MAX_OBJETOS]				[objInfo],
	InfoPorton_Ex			[MAX_PORTONES]				[InfoPorton_Ex2],
	ObjetoTirado			[MAX_OBJETOS_T]				[E_OBJETO_TIRADO],
	InfoTV		 			[MAX_TVS]					[E_INFOTV],
	InfoGZ	 	 			[MAX_GZS]					[E_GZ],
	InfoInterior			[MAX_INTERIORES]			[E_INTINFO],
	InfoCamilla				[sizeof(Camillas)]			[E_CAMILLA],
	InfoContrato			[MAX_CONTRATOS]				[E_CONTRATOH],
	InfoRango				[MAX_FACCIONES]				[MAX_RANGOS_FAC]		[MAX_RANGO_LEN],
	KeyPadInfo				[MAX_KEYPAD]				[E_KEYPAD],
	InfoMineral				[sizeof(PosMinerales)+1]	[E_MINERAL],
	Veh                 	[MAX_VEHICLES]          	[E_VEH_GENERAL],
	CamaraVelocidad     	[MAX_CAMARAS_VELOCIDAD] 	[E_SPEEDCAM_INFO],
	InfoGraffiti			[MAX_GRAFFITIS]				[E_GRAFFITI_DATA],
	InfoEstacion        	[MAX_ESTACIONES]        	[E_ESTACION_DATA],
	InfoPlanta          	[MAX_PLANTAS] 				[E_PLANTA_DATA],
	CasilleroLSPD       	[MAX_CASILLEROS_LSPD]   	[E_CASILLERO_DATA],
	CasilleroLSEM       	[MAX_CASILLEROS_LSEM]   	[E_CASILLERO_DATA],
	InfoHornoBigFoot    	[MAX_HORNOS_BIGFOOT]    	[E_HORNO_BF_DATA],
	InfoHornoBlackAso    	[MAX_HORNOS_BLACKASO]    	[E_HORNO_BA_DATA],
	InfoDestiladorBigFoot	[MAX_DESTILADORES_BIGFOOT]	[E_DESTILADOR_DATA],
	LaboratorioBigFoot		[E_LAB_DATA],
	FabricaBlackAso         [E_FAB_DATA],
	PedidoCamioneros        [MAX_PEDIDOS_CAMIONEROS]    [E_PEDIDO_CAMIONEROS],
	MuebleCasa 				[MAX_CASAS]					[MAX_MUEBLES_CASA]		[e_MUEBLE_DATA]

;


new
	Total_Interiores_Creados,
	Total_Cuentas_Bancarias;

// ---====[ Puertas y KeyControl ]====---- //

new
	PEJERCITO1,
	PEJERCITO2,
	PFUERZAAEREA,
	PLSTV[2],
	BGROTTI,
	PGOB[2],
	BGOB,
	BDEPTOSG,
	PMECAS[2],
	PMECASDEP,
	PCELDAS[3],
	PHITMAN[2],
	PHLSMD,
	PDLSMD,
	PCARCEL,
	PCARCELVISITAS,
	POFICINAMILITAR,
	BPEAJESF[2],
	BPEAJELV[2],
	PCELDALSEM[5],
	PCAMIONEROS,
	B_LSPD, // Barrera
	PU_LSPD, // Puerta
	PO_LSPD, // Porton
	B_LSMD;

//KeyPads
new
	KP_HabitacionLSMD[2],
	KP_DirectorLSMD,
	KP_EntradaCarceles[2],
	KP_PortonEjercito[2],
	KP_PortonEjercito2[2],
	KP_Mecas[2],
	KP_Mecas2[2],
	KP_MecasDep[2],
	KP_CarcelEntrada[2],
	KP_CarcelVisita[2],
	KP_OficinaMilitar[2],
	KP_Carcel[7][2],
	KP_CeldaLSEM[5],
	KP_Medico;

stock Float: GetPointZPos(const Float: fX, const Float: fY, &Float: fZ = 0.0) // by: RyDeR's
{
        if(!((-3000.0 < fX < 3000.0) && (-3000.0 < fY < 3000.0)))
		{
  			return 0.0;
		}
        static
        	File: s_hMap
        ;

        if(!s_hMap)
        {
        	s_hMap = fopen("SAfull.hmap", io_read);

			if(!s_hMap)
			{
  				return 0.0;
			}
        }
        new
        	afZ[1]
        ;

        fseek(s_hMap, ((6000 * (-floatround(fY, floatround_tozero) + 3000) + (floatround(fX, floatround_tozero) + 3000)) << 1));
        fblockread(s_hMap, afZ);

        return (fZ = ((afZ[0] >>> 16) * 0.01));
}

stock MostrarNecesidadesEx(playerid)
{
	if(InfoJugador[playerid][jNecesidades] == 0)
	{
		MostrarNecesidades(playerid, -1);
	}
	else if(InfoJugador[playerid][jNecesidades] == 1)
	{
		MostrarNecesidades(playerid);
	}
	return 1;
}

stock MostrarNecesidades(playerid, tiempo = 6)
{
	//Titulo & fondo.
	TextDrawShowForPlayer(playerid, TDNecesidadesBOX);
	TextDrawShowForPlayer(playerid, TDNecesidades);

	//Hambre
	if(TDHambre[playerid][0] == PlayerText:INVALID_TEXT_DRAW)
	{
		TDHambre[playerid][0] = CreatePlayerTextDraw(playerid, 532.000000, 252.373321, "_~n~_");
		PlayerTextDrawLetterSize(playerid, TDHambre[playerid][0], 0.557995, 1.256531);
		PlayerTextDrawTextSize(playerid, TDHambre[playerid][0], 619.999877, -11.946662);
		PlayerTextDrawAlignment(playerid, TDHambre[playerid][0], 1);
		PlayerTextDrawColor(playerid, TDHambre[playerid][0], -1);
		PlayerTextDrawUseBox(playerid, TDHambre[playerid][0], true);
		PlayerTextDrawBoxColor(playerid, TDHambre[playerid][0], 100);
		PlayerTextDrawSetShadow(playerid, TDHambre[playerid][0], 0);
		PlayerTextDrawSetOutline(playerid, TDHambre[playerid][0], 1);
		PlayerTextDrawBackgroundColor(playerid, TDHambre[playerid][0], 51);
		PlayerTextDrawFont(playerid, TDHambre[playerid][0], 1);
		PlayerTextDrawSetProportional(playerid, TDHambre[playerid][0], 1);
	}
	if(TDHambre[playerid][1] == PlayerText:INVALID_TEXT_DRAW)
	{
		TDHambre[playerid][1] = CreatePlayerTextDraw(playerid, 534.919738, 255.090545, "Hambre");
		PlayerTextDrawLetterSize(playerid, TDHambre[playerid][1], 0.310797, 1.107195);
		PlayerTextDrawTextSize(playerid, TDHambre[playerid][1], 628.000000, -14.933332);
		PlayerTextDrawAlignment(playerid, TDHambre[playerid][1], 1);
		PlayerTextDrawColor(playerid, TDHambre[playerid][1], -1);
		PlayerTextDrawSetShadow(playerid, TDHambre[playerid][1], 0);
		PlayerTextDrawSetOutline(playerid, TDHambre[playerid][1], 0);
		PlayerTextDrawBackgroundColor(playerid, TDHambre[playerid][1], 255);
		PlayerTextDrawFont(playerid, TDHambre[playerid][1], 1);
		PlayerTextDrawSetProportional(playerid, TDHambre[playerid][1], 1);
	}

	//Vejiga
	if(TDVejiga[playerid][0] == PlayerText:INVALID_TEXT_DRAW)
	{
		TDVejiga[playerid][0] = CreatePlayerTextDraw(playerid, 531.640014, 281.373199, "_~n~_");
		PlayerTextDrawLetterSize(playerid, TDVejiga[playerid][0], 0.557995, 1.256531);
		PlayerTextDrawTextSize(playerid, TDVejiga[playerid][0], 619.999877, -11.946662);
		PlayerTextDrawAlignment(playerid, TDVejiga[playerid][0], 1);
		PlayerTextDrawColor(playerid, TDVejiga[playerid][0], -1);
		PlayerTextDrawUseBox(playerid, TDVejiga[playerid][0], true);
		PlayerTextDrawBoxColor(playerid, TDVejiga[playerid][0], 100);
		PlayerTextDrawSetShadow(playerid, TDVejiga[playerid][0], 0);
		PlayerTextDrawSetOutline(playerid, TDVejiga[playerid][0], 1);
		PlayerTextDrawBackgroundColor(playerid, TDVejiga[playerid][0], 51);
		PlayerTextDrawFont(playerid, TDVejiga[playerid][0], 1);
		PlayerTextDrawSetProportional(playerid, TDVejiga[playerid][0], 1);
	}
	if(TDVejiga[playerid][1] == PlayerText:INVALID_TEXT_DRAW)
	{
		TDVejiga[playerid][1] = CreatePlayerTextDraw(playerid, 534.319763, 284.463867, "Vejiga");
		PlayerTextDrawLetterSize(playerid, TDVejiga[playerid][1], 0.310797, 1.107195);
		PlayerTextDrawTextSize(playerid, TDVejiga[playerid][1], 628.000000, -14.933332);
		PlayerTextDrawAlignment(playerid, TDVejiga[playerid][1], 1);
		PlayerTextDrawColor(playerid, TDVejiga[playerid][1], -1);
		PlayerTextDrawSetShadow(playerid, TDVejiga[playerid][1], 0);
		PlayerTextDrawSetOutline(playerid, TDVejiga[playerid][1], 0);
		PlayerTextDrawBackgroundColor(playerid, TDVejiga[playerid][1], 255);
		PlayerTextDrawFont(playerid, TDVejiga[playerid][1], 1);
		PlayerTextDrawSetProportional(playerid, TDVejiga[playerid][1], 1);
	}

	//Estado
	if(TDEstado[playerid][0] == PlayerText:INVALID_TEXT_DRAW)
	{
		TDEstado[playerid][0] = CreatePlayerTextDraw(playerid, 531.680236, 310.522460, "_~n~_");
		PlayerTextDrawLetterSize(playerid, TDEstado[playerid][0], 0.557995, 1.256531);
		PlayerTextDrawTextSize(playerid, TDEstado[playerid][0], 619.999877, -11.946662);
		PlayerTextDrawAlignment(playerid, TDEstado[playerid][0], 1);
		PlayerTextDrawColor(playerid, TDEstado[playerid][0], -1);
		PlayerTextDrawUseBox(playerid, TDEstado[playerid][0], true);
		PlayerTextDrawBoxColor(playerid, TDEstado[playerid][0], 100);
		PlayerTextDrawSetShadow(playerid, TDEstado[playerid][0], 0);
		PlayerTextDrawSetOutline(playerid, TDEstado[playerid][0], 1);
		PlayerTextDrawBackgroundColor(playerid, TDEstado[playerid][0], 51);
		PlayerTextDrawFont(playerid, TDEstado[playerid][0], 1);
		PlayerTextDrawSetProportional(playerid, TDEstado[playerid][0], 1);
	}
	if(TDEstado[playerid][1] == PlayerText:INVALID_TEXT_DRAW)
	{
		TDEstado[playerid][1] = CreatePlayerTextDraw(playerid, 534.519836, 313.090576, "Estado");
		PlayerTextDrawLetterSize(playerid, TDEstado[playerid][1], 0.310797, 1.107195);
		PlayerTextDrawTextSize(playerid, TDEstado[playerid][1], -884.000000, -477.866668);
		PlayerTextDrawAlignment(playerid, TDEstado[playerid][1], 1);
		PlayerTextDrawColor(playerid, TDEstado[playerid][1], -1);
		PlayerTextDrawSetShadow(playerid, TDEstado[playerid][1], 0);
		PlayerTextDrawSetOutline(playerid, TDEstado[playerid][1], 0);
		PlayerTextDrawBackgroundColor(playerid, TDEstado[playerid][1], 255);
		PlayerTextDrawFont(playerid, TDEstado[playerid][1], 1);
		PlayerTextDrawSetProportional(playerid, TDEstado[playerid][1], 1);
	}

	//Hambre
	if(BHambre[playerid] == INVALID_PLAYER_BAR_ID)
	{
		BHambre[playerid] = CreatePlayerProgressBar(playerid, 535.00, 269.00, 81.50, 1.50, C_BARRA_HAMBRE, 100.0);
	}
	SetPlayerProgressBarValue(playerid, BHambre[playerid], InfoJugador[playerid][jHambre]);
	ShowPlayerProgressBar(playerid, BHambre[playerid]);
	PlayerTextDrawShow(playerid, TDHambre[playerid][0]);
	PlayerTextDrawShow(playerid, TDHambre[playerid][1]);

	//Vejiga
	if(BOrina[playerid] == INVALID_PLAYER_BAR_ID)
	{
		BOrina[playerid] = CreatePlayerProgressBar(playerid, 535.00, 299.00, 81.50, 1.50, C_BARRA_VEJIGA, 100.0);
	}
	SetPlayerProgressBarValue(playerid, BOrina[playerid], InfoJugador[playerid][jOrina]);
	ShowPlayerProgressBar(playerid, BOrina[playerid]);
	PlayerTextDrawShow(playerid, TDVejiga[playerid][0]);
	PlayerTextDrawShow(playerid, TDVejiga[playerid][1]);

	//Estado
	if(BCansancio[playerid] == INVALID_PLAYER_BAR_ID)
	{
		BCansancio[playerid] = CreatePlayerProgressBar(playerid, 535.00, 328.00, 81.50, 1.50, C_BARRA_ESTADO, 100.0);
	}
	SetPlayerProgressBarValue(playerid, BCansancio[playerid], InfoJugador[playerid][jCansancio]);
	ShowPlayerProgressBar(playerid, BCansancio[playerid]);
	PlayerTextDrawShow(playerid, TDEstado[playerid][0]);
	PlayerTextDrawShow(playerid, TDEstado[playerid][1]);

	if(tiempo == -1)
	{
		TiempoNecesidades[playerid] = -1;
	}
	else
	{
		TiempoNecesidades[playerid] = (gettime() + tiempo);
	}
	return 1;
}

stock SacarNecesidades(playerid)
{
	//Titulo & fondo.
	TextDrawHideForPlayer(playerid, TDNecesidadesBOX);
	TextDrawHideForPlayer(playerid, TDNecesidades);

	//Hambre
	if(TDHambre[playerid][0] != PlayerText:INVALID_TEXT_DRAW)
	{
		PlayerTextDrawDestroy(playerid, TDHambre[playerid][0]);
		TDHambre[playerid][0] = PlayerText:INVALID_TEXT_DRAW;
	}
	if(TDHambre[playerid][1] != PlayerText:INVALID_TEXT_DRAW)
	{
		PlayerTextDrawDestroy(playerid, TDHambre[playerid][1]);
		TDHambre[playerid][1] = PlayerText:INVALID_TEXT_DRAW;
	}

	//Vejiga
	if(TDVejiga[playerid][0] != PlayerText:INVALID_TEXT_DRAW)
	{
		PlayerTextDrawDestroy(playerid, TDVejiga[playerid][0]);
		TDVejiga[playerid][0] = PlayerText:INVALID_TEXT_DRAW;
	}
	if(TDVejiga[playerid][1] != PlayerText:INVALID_TEXT_DRAW)
	{
		PlayerTextDrawDestroy(playerid, TDVejiga[playerid][1]);
		TDVejiga[playerid][1] = PlayerText:INVALID_TEXT_DRAW;
	}

	//Estado
	if(TDEstado[playerid][0] != PlayerText:INVALID_TEXT_DRAW)
	{
		PlayerTextDrawDestroy(playerid, TDEstado[playerid][0]);
		TDEstado[playerid][0] = PlayerText:INVALID_TEXT_DRAW;
	}
	if(TDEstado[playerid][1] != PlayerText:INVALID_TEXT_DRAW)
	{
		PlayerTextDrawDestroy(playerid, TDEstado[playerid][1]);
		TDEstado[playerid][1] = PlayerText:INVALID_TEXT_DRAW;
	}

	//Hambre
	if(BHambre[playerid] != INVALID_PLAYER_BAR_ID)
	{
		DestroyPlayerProgressBar(playerid, BHambre[playerid]);
		BHambre[playerid] = INVALID_PLAYER_BAR_ID;
	}
	//Vejiga
	if(BOrina[playerid] != INVALID_PLAYER_BAR_ID)
	{
		DestroyPlayerProgressBar(playerid, BOrina[playerid]);
		BOrina[playerid] = INVALID_PLAYER_BAR_ID;
	}
	//Estado
	if(BCansancio[playerid] != INVALID_PLAYER_BAR_ID)
	{
		DestroyPlayerProgressBar(playerid, BCansancio[playerid]);
		BCansancio[playerid] = INVALID_PLAYER_BAR_ID;
	}
	return 1;
}

stock SPEC_SetPlayerVirtualWorld(playerid, vw)
{
	SetPlayerVirtualWorld(playerid, vw);

	// Spec
	foreach(Player, i)
	{
	    if (Specteando_ID[i] == playerid)
	    {
	    	SetPlayerVirtualWorld(i, vw);
		}
	}

	// Interiores
	if (INT_CUSTOM_VW <= vw < INT_MAX_VW)
	{
	    if (GetPVarInt (playerid, "mapIntL"))
	        DestroyIntMap (playerid);

		PreloadMap (playerid, vw - INT_CUSTOM_VW);
	}
	else
	{
		if (GetPVarInt (playerid, "mapIntL"))
	 		DestroyIntMap (playerid);
	}

	// Casas
	if(CasaActual[playerid] != INVALID_HOUSE_ID)
	{
		Loop(m, MAX_MUEBLES_CASA, 0)
	    {
	        if(OBJ_Mueble[playerid][m] != INVALID_OBJECT_ID)
	        {
				//MensajeF(playerid, -1, "PlayerObject(%d) Destruido!", OBJ_Mueble[playerid][m]);
				DestroyPlayerObject(playerid, OBJ_Mueble[playerid][m]);
	            OBJ_Mueble[playerid][m] = INVALID_OBJECT_ID;
			}
		}
	}

	if(100 <= vw < 100+MAX_CASAS) //Cargar Muebles
	{
	    new
	        house = vw-100;

		Loop(m, MAX_MUEBLES_CASA, 0)
		{
			if(InfoCasa[house][cObjPosX][m] != 0.0 && InfoCasa[house][cObjPosY][m] != 0.0 && InfoCasa[house][cObjPosZ][m] != 0.0)
			{
				OBJ_Mueble[playerid][m] = CreatePlayerObject(playerid,  InfoCasa[house][cObjModel][m],
    																	InfoCasa[house][cObjPosX][m],
    																	InfoCasa[house][cObjPosY][m],
    																	InfoCasa[house][cObjPosZ][m],
    																	InfoCasa[house][cObjRotX][m],
    																	InfoCasa[house][cObjRotY][m],
    																	InfoCasa[house][cObjRotZ][m]);
				//MensajeF(playerid, -1, "PlayerObject(%d) creado!", OBJ_Mueble[playerid][m]);
			}
		}

		CasaActual[playerid] = house;
	}
	else
	{
	    CasaActual[playerid] = INVALID_HOUSE_ID;
	}
	return 1;
}

#if defined _ALS_SetPlayerVirtualWorld
	#undef SetPlayerVirtualWorld
#else
	#define _ALS_SetPlayerVirtualWorld
#endif

#define SetPlayerVirtualWorld SPEC_SetPlayerVirtualWorld

stock udb_hash(buf[]) // by: DracoBlue
{
    new length=strlen(buf);
    new s1 = 1;
    new s2 = 0;
    new n;
    for (n=0; n<length; n++)
    {
       s1 = (s1 + buf[n]) % 65521;
       s2 = (s2 + s1)     % 65521;
    }
    return (s2 << 16) + s1;
}

stock GetZoneNameAtCoord(Float:x, Float:y, zone[], len = sizeof(zone))
{
 	for (new i = 0; i != sizeof (ZoneNames); ++i)
 	{
		if (x >= ZoneNames[i][zoneArea][0] && x <= ZoneNames[i][zoneArea][3] && y >= ZoneNames[i][zoneArea][1] && y <= ZoneNames[i][zoneArea][4])
		{
		    strunpack (zone, ZoneNames[i][zoneName], len);
			return i;
		}
	}
	return -1;
}


stock ActualizarTDCargador(playerid)
{
	new
	    string[18];

	format(string, sizeof(string), "~b~~h~~h~~h~%d", Cargadores[playerid]);

	if(TDCargador[playerid] == PlayerText:INVALID_TEXT_DRAW)
	{
		TDCargador[playerid] = CreatePlayerTextDraw(playerid, 521.039550, 16.725336, string);
		PlayerTextDrawLetterSize(playerid, TDCargador[playerid], 0.333199, 1.622400);
		PlayerTextDrawAlignment(playerid, TDCargador[playerid], 2);
		PlayerTextDrawColor(playerid, TDCargador[playerid], -1);
		PlayerTextDrawSetShadow(playerid, TDCargador[playerid], 0);
		PlayerTextDrawSetOutline(playerid, TDCargador[playerid], 1);
		PlayerTextDrawBackgroundColor(playerid, TDCargador[playerid], 51);
		PlayerTextDrawFont(playerid, TDCargador[playerid], 2);
		PlayerTextDrawSetProportional(playerid, TDCargador[playerid], 1);
		PlayerTextDrawShow(playerid, TDCargador[playerid]);
	}
	else
	{
	    PlayerTextDrawSetString(playerid, TDCargador[playerid], string);
	}
	return 1;
}

// -========================================================================- //
stock GM_SetPlayerSkin(playerid, S)
{
	if (IsPlayerConnected(playerid))
	{
	    if (InfoJugador[playerid][jObjetoColgado] > 0)
	    {
	  		new
	            objectid = InfoJugador[playerid][jObjetoColgado],
				Float:x, Float:y, Float:z,
				Float:rx, Float:ry, Float:rz,
				Float:ex, Float:ey, Float:ez;

			GetAttachedObjectOffSet(S, InfoJugador[playerid][jObjetoColgado], x, y, z, rx, ry, rz, ex, ey, ez);
			SetPlayerAttachedObject(playerid, SLOT_ESPALDA, ObjectData[objectid][invObjID], 1, x, y, z, rx, ry, rz, ex, ey, ez, ObjectData[objectid][invColor1], ObjectData[objectid][invColor2]);
		}

		if(InfoJugador[playerid][jChalecoObj] > 0)
		{
			new
				Float:x, Float:y, Float:z,
				Float:rx, Float:ry, Float:rz,
				Float:ex, Float:ey, Float:ez;

			GetAttachedObjectOffSet(S, InfoJugador[playerid][jChalecoObj], x, y, z, rx, ry, rz, ex, ey, ez);
			SetPlayerAttachedObject(playerid, SLOT_CHALECO, ObjectData[InfoJugador[playerid][jChalecoObj]][invObjID], 1, x, y, z, rx, ry, rz, ex, ey, ez, ObjectData[InfoJugador[playerid][jChalecoObj]][invColor1], ObjectData[InfoJugador[playerid][jChalecoObj]][invColor2]);
		}
		SetPlayerSkin(playerid, S);
		return 1;
	}
	return 0;
}

#if defined _ALS_SetPlayerSkin
	#undef SetPlayerSkin
#else
	#define _ALS_SetPlayerSkin
#endif
#define SetPlayerSkin GM_SetPlayerSkin

stock GetServerLatency()
{
	new
		Ping,
		bool:HavePlayers,
	 	CountPlayers;

	#if defined foreach
	foreach(new i : Player)
	#else
	for(new i; i < GetMaxPlayers(); ++i) if(IsPlayerConnected(i) && !IsPlayerNPC(i))
	#endif
	{
		#if !defined foreach
		CountPlayers++;
		#endif
		Ping += GetPlayerPing(i);
		if(!HavePlayers) HavePlayers = true;
	}
	if(!HavePlayers) return -1;
	#if defined foreach
	CountPlayers = Iter_Count(Player);
	#endif
	return (HavePlayers) ? (floatround( Ping / CountPlayers )) : (-1);

}

stock GetVehicleWheelPosition (vehicleid, Float: wheel_data [][], &Float: wheel_z)
{
	new
	    Float: m_x [2],
	    Float: m_y [2],
	    Float: m_z [2],

	    Float: x,
	    Float: y,
	    Float: z,

		Float: angle,

		modelid = GetVehicleModel (vehicleid);

	GetVehiclePos (vehicleid, x, y, z);
	GetVehicleZAngle (vehicleid, angle);

	GetVehicleModelInfo (modelid, VEHICLE_MODEL_INFO_WHEELSFRONT, m_x [0], m_y [0], m_z [0]);
	GetVehicleModelInfo (modelid, VEHICLE_MODEL_INFO_WHEELSREAR, m_x [1], m_y [1], m_z [1]);

	wheel_z = (z + m_z [0]);

	// Adelante
	wheel_data[0][0] = x + (m_y [0] * floatsin(-angle, degrees)) + (m_x [0] * floatsin(-(angle-90.0), degrees));
	wheel_data[0][1] = y + (m_y [0] * floatcos(-angle, degrees)) + (m_x [0] * floatcos(-(angle-90.0), degrees));

	m_x [0] -= m_x [0];

	wheel_data[1][0] = x + (m_y [0] * floatsin(-angle, degrees)) + (m_x [0] * floatsin(-(angle-90.0), degrees));
	wheel_data[1][1] = y + (m_y [0] * floatcos(-angle, degrees)) + (m_x [0] * floatcos(-(angle-90.0), degrees));

	// Atras
	wheel_data[2][0] = x + (m_y [1] * floatsin(-angle, degrees)) + (m_x [1] * floatsin(-(angle-90.0), degrees));
	wheel_data[2][1] = y + (m_y [1] * floatcos(-angle, degrees)) + (m_x [1] * floatcos(-(angle-90.0), degrees));

	m_x [1] -= m_x [1];

	wheel_data[3][0] = x + (m_y [1] * floatsin(-angle, degrees)) + (m_x [1] * floatsin(-(angle-90.0), degrees));
	wheel_data[3][1] = y + (m_y [1] * floatcos(-angle, degrees)) + (m_x [1] * floatcos(-(angle-90.0), degrees));
}

CALLBACK: Float: GetWeaponPower (objectid)
{
	new
	    Float: extra_damage = 1.0;
	switch (ObjectData[objectid][invData])
	{
	    case 3:
	        extra_damage = 2.6;

	    case 5:
	        extra_damage = 3.6;

	    case 22:
	        extra_damage = 1.45;

		case 23:
		    extra_damage = 1.136;

		case 24:
		    extra_damage = 1.108;

		case 25:
		    extra_damage = 1.3;

		case 28:
		    extra_damage = 1.75;

		case 29:
		    extra_damage = 1.33;

		case 30:
		    extra_damage = 1.9;

		case 31:
		    extra_damage = 1.7;

		case 32:
		    extra_damage = 2.0;

		case 33:
		    extra_damage = 2.0;

	}
	if (strfind (ObjectData[objectid][invName], "de Oro") != -1)
	{
 		extra_damage += 0.5;
	}
	else if (strfind (ObjectData[objectid][invName], "de Diamante") != -1)
	{
 		extra_damage += 0.75;
	}
	return extra_damage;
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	if (weaponid == INV_GetWeapon (playerid))
	{
	    new
	        ammo = GetPlayerAmmo (playerid);
	        
		if (ammo <= 0)
		{
		    ResetPlayerWeapons (playerid);
		    INV_Ammo [playerid] = 0;
		}

		INV_Ammo [playerid] = ammo - 1;
		
		if (hittype == BULLET_HIT_TYPE_PLAYER)
		{
		    LastOPWS [playerid] = GetTickCount ();
		}
		else if (hittype == BULLET_HIT_TYPE_VEHICLE)
		{
		    LastVehicleShot [hitid] = GetTickCount ();
		}
	}
    return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float: amount, weaponid, bodypart)
{
	if (GetTickCount() - LastOPWS [playerid])
	{
		//OnPlayerShotPlayer (playerid, damagedid, weaponid, bodypart);
	}
	return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float: amount, weaponid)
{
	if(weaponid == 34)
	{
		if(!ProxDetectorS(2.5, playerid, issuerid))
		{
		    SetPlayerHealth(playerid, 0.0);
		    SetPlayerArmour(playerid, 0.0);
		    KillerID[playerid] = issuerid;
			Mensaje(playerid, -1, "Fuiste asesinado por un disparo de Sniper");
			return 1;
		}
	}

  	if(issuerid != INVALID_PLAYER_ID)
  	{
  	    if(weaponid == WEAP_TAZER && GetPVarInt(issuerid,"TAZER_DK"))
  	    {
   	        if(IsPlayerInAnyVehicle(playerid))
			   RemovePlayerFromVehicle(playerid);

			SetPVarInt(playerid,"TAZEADO",1);
			TextoJugador(playerid,"~r~electrocutado~n~~n~~w~espera que te quiten los cables",5000,3);

   			new
			   Str[60];

   			A_Format(Str,"dispara con su arma tazer a %s",NombreJugador(playerid));
   			AutoRol(issuerid,Str);

			TogglePlayerCrack(playerid, true, 2);

			new
			    Float:x, Float:y, Float:z;

			GetPlayerPos(playerid, x, y, z);
			PlaySoundInArea(6003, 10.0, x, y, z);
		}
		else
		{
			new
			    obj = GetObject (issuerid);

			if (obj != -1)
			{
				amount = floatmul(amount, GetWeaponPower(obj));
			}

			if (amount > 0)
			{
			    new
					Float: rest_health = amount;

				if (ArmourData[playerid] > 0.0)
				{
				    if (ArmourData[playerid] > amount)
				    {
						ArmourData[playerid] -= amount;
						SetPlayerArmour(playerid, ArmourData[playerid]);
	                   	return 1;
					}
					else
					{
						rest_health = amount - ArmourData[playerid];
					    ArmourData[playerid] = 0;
						SetPlayerArmour(playerid, ArmourData[playerid]);
					}
				}
				HealthData[playerid] -= rest_health;

				if (HealthData[playerid] <= 0.0)
				{
					KillerID[playerid] = issuerid;
				    HealthData[playerid] = 0.0;
				    SetPlayerHealth(playerid, 0.0);
				    return 1;
				}
				SetPlayerHealth (playerid, HealthData[playerid]);
			}
		}
		if(InfoJugador[issuerid][jHoras] < 2)
		{
		    CongelarEx(issuerid, 10);
			Error(issuerid, "¡No puedes herir en las primeras dos horas de juego!");
		}
	}
	else
	{
	    HealthData[playerid] -= amount;
	}
	return 1;
}

stock GM_SetPlayerHealth(playerid, Float: health)
{
	if (0 <= playerid < MAX_PLAYERS)
	{
	    if (health < 0.0)
	        health = 0.0;

		if (health > 99.0)
			health = 99.0;

		if (health <= 0.0)
		{
		    if (HospitalData [playerid] != -1)
		    {
		        return 1;
			}
			if (LoginTime[playerid] > gettime())
			{
			    return 1;
			}
		}

		HealthData[playerid] = health;
		SetPlayerHealth(playerid, health);
		return 1;
	}
	return 0;
}

#if defined _ALS_SetPlayerHealth
	#undef SetPlayerHealth
#else
	#define _ALS_SetPlayerHealth
#endif


#define SetPlayerHealth GM_SetPlayerHealth

stock GM_SetPlayerArmour(playerid, Float: armour)
{
	if (0 <= playerid < MAX_PLAYERS)
	{
	    if (armour < 0.0)
	        armour = 0.0;

		if (armour > 99.0)
			armour = 99.0;

		ArmourData[playerid] = armour;
		SetPlayerArmour(playerid, armour);
		return 1;
	}
	return 0;
}

#if defined _ALS_SetPlayerArmour
	#undef SetPlayerArmour
#else
	#define _ALS_SetPlayerArmour
#endif
#define SetPlayerArmour GM_SetPlayerArmour

stock IsValidNeg(negid)
{
	if(0 <= negid < MAX_NEGOCIOS)
	{
	    if(InfoNegocio[negid][nVW] != 0)
	        return 1;
	}
	return 0;
}

stock IsValidHouse(houseid)
{
	if(0 <= houseid < MAX_CASAS)
	{
	    if(InfoCasa[houseid][cVW] != 0)
	        return 1;
	}
	return 0;
}

stock IsValidGarage(garageid)
{
	if(0 <= garageid < MAX_GARAGES)
	{
	    if(InfoGarage[garageid][gVW] != 0)
	        return 1;
	}
	return 0;
}

// ---====[ Main ]====---- //

main()
{
	new b;
	#emit load.pri b
	#emit stor.pri b

	INI_Load("Datos_generales.ini");

	printf ("\n\n\n   =>> Ciudad Real RP - V4 fue cargado correctamente (%d ms)\n\n\n", (GetTickCount() - tCount));

	return 1;
}

public OnGameModeInit()
{
	printf("MAX_PLAYERS: %d", MAX_PLAYERS);
	
	initMySQL();

	static
		bool: Var;

	if(!Var)
	{
	    _OnGameModeInit();
	    Var = true;
	}
	return 1;
}

stock MySQL_CheckConnection ()
{
	//opmysql_tquery( "SELECT * FROM `Vehiculos`", false, "OnQueryFinish", "ii", INVALID_PLAYER_ID, query_type_unknown);
	return 1;
}

stock initMySQL ()
{
	LoadTable ("Usuarios", table_Usuarios, table_Usuarios_data, sizeof (table_Usuarios_data));
	return 1;
}

stock LoadLogs ()
{
	opmysql_tquery(
	"CREATE TABLE IF NOT EXISTS \
 	log_admins (`log_id` INT(11) NOT NULL AUTO_INCREMENT,\
 	`Date` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\
 	`Log` VARCHAR(144),\
	 PRIMARY KEY (`log_id`))", "OnQueryFinish", "ii", 0, query_type_unknown);

	opmysql_tquery(
	"CREATE TABLE IF NOT EXISTS \
 	log_pagos (`log_id` INT(11) NOT NULL AUTO_INCREMENT,\
 	`Date` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\
 	`Log` VARCHAR(144),\
	 PRIMARY KEY (`log_id`))", "OnQueryFinish", "ii", 0, query_type_unknown);

	opmysql_tquery(
	"CREATE TABLE IF NOT EXISTS \
 	log_propiedades (`log_id` INT(11) NOT NULL AUTO_INCREMENT,\
 	`Date` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\
 	`Log` VARCHAR(144),\
	 PRIMARY KEY (`log_id`))", "OnQueryFinish", "ii", 0, query_type_unknown);

	opmysql_tquery(
	"CREATE TABLE IF NOT EXISTS \
 	log_bloqueos (`log_id` INT(11) NOT NULL AUTO_INCREMENT,\
 	`Date` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\
 	`Log` VARCHAR(144),\
	 PRIMARY KEY (`log_id`))", "OnQueryFinish", "ii", 0, query_type_unknown);

	opmysql_tquery(
	"CREATE TABLE IF NOT EXISTS \
 	log_banco (`log_id` INT(11) NOT NULL AUTO_INCREMENT,\
 	`Date` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\
 	`Log` VARCHAR(144),\
	 PRIMARY KEY (`log_id`))", "OnQueryFinish", "ii", 0, query_type_unknown);

	opmysql_tquery(
	"CREATE TABLE IF NOT EXISTS \
 	log_cf (`log_id` INT(11) NOT NULL AUTO_INCREMENT,\
 	`Date` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\
 	`Log` VARCHAR(144),\
	 PRIMARY KEY (`log_id`))", "OnQueryFinish", "ii", 0, query_type_unknown);

	opmysql_tquery(
	"CREATE TABLE IF NOT EXISTS \
 	log_multas (`log_id` INT(11) NOT NULL AUTO_INCREMENT,\
 	`Date` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\
 	`Log` VARCHAR(144),\
	 PRIMARY KEY (`log_id`))", "OnQueryFinish", "ii", 0, query_type_unknown);

	opmysql_tquery(
	"CREATE TABLE IF NOT EXISTS \
 	log_cp (`log_id` INT(11) NOT NULL AUTO_INCREMENT,\
 	`Date` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\
 	`Log` VARCHAR(144),\
	 PRIMARY KEY (`log_id`))", "OnQueryFinish", "ii", 0, query_type_unknown);

	opmysql_tquery(
	"CREATE TABLE IF NOT EXISTS \
 	log_jail (`log_id` INT(11) NOT NULL AUTO_INCREMENT,\
 	`Date` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\
 	`Log` VARCHAR(144),\
	 PRIMARY KEY (`log_id`))", "OnQueryFinish", "ii", 0, query_type_unknown);
}

stock LoadTable (const tablename[], const header[], const array[][], size)
{
	new
	    str [150],
		i = -1;

	strcat (str, header);
	opmysql_tquery(str, "OnQueryFinish", "ii", INVALID_PLAYER_ID, query_type_unknown);

	size --;
	while (i++ < size)
	{
		A_Format (str, "ALTER TABLE `%s` ADD %s", tablename, array [i]);
		opmysql_tquery(str, "OnQueryFinish", "ii", INVALID_PLAYER_ID, query_type_unknown);
	}
	return 1;
}

_OnGameModeInit()
{
	tCount = GetTickCount();

	Loop(i,MAX_PLAYERS,0)
	{
	    Loop(t,MAX_TIMERS,0)
	    {
			Timer_Jugador[i][t] = INVALID_TIMER_ID;
		}
	}

	Loop(i,MAX_PLAYERS,0)
	{
	    Loop(t,MAX_PCP,0)
	    {
			Checkpoint_Jugador[i][t] = PlayerCP:INVALID_PCP_ID;
		}
	}

	AntiDeAMX();
	BarcoImportaciones(5); // Borrar armas por las dudas que queden ahí.

	// ---====[ Areas ]====---- //

	zCamionerosLVL1 = CreateDynamicRectangle(2420.5486, -2062.4370, 2704.5022, -2145.6912);
	zCosechadorLVL1 = CreateDynamicRectangle(-153.3136, -1297.8480, -482.0711, -1605.4917);
	zMecanicos = CreateDynamicRectangle(1655.9662,-2185.4504, 1560.0028,-2138.8269);
	zDepMecanicos = CreateDynamicRectangle(1563.5029,-2184.1829, 1654.0519,-2136.8730);
	zPatioCarcel = CreateDynamicRectangle(2055.8254,-2025.0559, 2120.1121,-1969.5254);

	// ---====[ KeyPads ]====---- //

	KP_HabitacionLSMD[0] = CreateKeyPad(2549.3005, 1264.6318, 866.8463, 175.4);// Entrar
	KP_HabitacionLSMD[1] = CreateKeyPad(2549.3193, 1264.5052, 866.8463, -3.5); //Salir

	KP_DirectorLSMD = CreateKeyPad(2033.1040, 2864.5178, 1105.2193, -180.0);

	KP_Medico = CreateKeyPad(2034.7882, 2896.3757, 1105.2193, 180.0);

	KP_EntradaCarceles[0] = CreateKeyPad(2529.0087, -1295.7281, 1031.8918, -91.3); //Entrada
	KP_EntradaCarceles[1] = CreateKeyPad(2529.486,  -1295.809,  1031.8918, 90.0); //Salida

	KP_PortonEjercito[0] = CreateKeyPad(2720.4741, -2410.6699, 14.1028, 90); //Salida
	KP_PortonEjercito[1] = CreateKeyPad(2719.9865, -2409.9416, 13.9309, -90.6); //entrada

	KP_PortonEjercito2[0] = CreateKeyPad(2720.4697, -2498.7429, 14.1340, 90.1); //Salida
	KP_PortonEjercito2[1] = CreateKeyPad(2719.9812, -2499.3322, 13.9526, -90.8); //entrada

	//Puertas
	KP_Mecas[0] = CreateKeyPad(1600.0, -2185.0493, 14.0168, 0.000); //Entrada
	KP_Mecas[1] = CreateKeyPad(1600.0, -2184.3208, 14.0246, 180.0); //Salida

	KP_Mecas2[0] = CreateKeyPad(1625.4725, -2185.0571, 14.0168, 0.0); //Entrada
	KP_Mecas2[1] = CreateKeyPad(1625.4725, -2184.3303, 14.0168, 180.0); //Salida

	//Depósito
	KP_MecasDep[0] = CreateKeyPad(1551.0103, -2184.8046, 14.0168, 0.0); //Entrada
	KP_MecasDep[1] = CreateKeyPad(1551.0103, -2184.5646, 14.0168, 180.0); //Salida

	//Cárceles
	KP_CarcelEntrada[0] = CreateKeyPad(1586.1538, -1499.0620, 1066.8093, -90.299); //Entrada
	KP_CarcelEntrada[1] = CreateKeyPad(1586.3187, -1499.0483, 1066.8093, 90.0); //Salida

	//Visita Carcel
	KP_CarcelVisita[0] = CreateKeyPad(1586.6997,-1515.7468,1066.8093,90.4000); //Entrada
	KP_CarcelVisita[1] = CreateKeyPad(1586.5477,-1515.6291,1066.8093,-91.3000); //Salida

	//Militares
	KP_OficinaMilitar[0] = CreateKeyPad(1339.9788,-1826.6629,1566.4620,176.0000); //Entrada
	KP_OficinaMilitar[1] = CreateKeyPad(1339.9620,-1826.7807,1566.4652,0.0000); //Salida

	KP_CeldaLSEM[0] = CreateKeyPad(1340.0822, -1850.1934, 1556.5412, 0.0);
	KP_CeldaLSEM[1] = CreateKeyPad(1343.2822, -1850.1934, 1556.5412, 0.0);
	KP_CeldaLSEM[2] = CreateKeyPad(1346.4822, -1850.1934, 1556.5412, 0.0);
	KP_CeldaLSEM[3] = CreateKeyPad(1349.5822, -1850.1934, 1556.5412, 0.0);
	KP_CeldaLSEM[4] = CreateKeyPad(1352.6822, -1850.1934, 1556.5412, 0.0);

	// ---====[ Puertas ]====---- //

	PCARCEL = CreateDynamicObject(1495, 1586.25244, -1497.18213, 1065.31824,   0.00000, 0.00000, -89.94000);
	PCARCELVISITAS = CreateDynamicObject(1495, 1586.60913, -1516.06799, 1065.31873,  0.00000, 0.00000, -89.88000);

	POFICINAMILITAR = CreateDynamicObject(1495, 1340.21289, -1826.70618, 1564.96423,   0.00000, 0.00000, 0.0);

	PEJERCITO1 = CreateDynamicObject(975,2720.30004883,-2405.39990234,14.19999981,0.00000000,0.00000000,270.00000000); //puerta 1 cerrada
	PEJERCITO2 = CreateDynamicObject(975,2720.30004883,-2504.00000000,14.19999981,0.00000000,0.00000000,270.00000000); //puerta 2 cerrada

	PFUERZAAEREA = CreateDynamicObject(980,482.00000000,-2312.00000000,4.40000010,0.00000000,0.00000000,0.00000000); //Fuerza aerea

	PLSTV[0] = CreateDynamicObject(971,778.00000000,-1384.90002441,13.10000038,0.00000000,0.00000000,0.00000000); //puerta cerrada 1
	PLSTV[1] = CreateDynamicObject(971,777.90002441,-1330.30004883,13.00000000,0.00000000,0.00000000,0.00000000); //puerta cerrada 2

	BGROTTI = CreateDynamicObject_e(2920,558.90002441,-1255.69995117,17.10000038,90.00000000,0.00000000,300.00000000); //barreracerrada

	PGOB[0] = CreateDynamicObject(980,1264.59997559,-2048.30004883,60.90000153,0.00000000,0.00000000,180.00000000); //puerta1cerrada
	PGOB[1] = CreateDynamicObject(980,1211.09997559,-2037.40002441,70.80000305,0.00000000,0.00000000,270.00000000); //puerta2cerrada

	BGOB = CreateDynamicObject(968,1430.90002441,-1883.19995117,13.30000019,0.00000000,270.00000000,0.00000000); //barreracerrada

	BDEPTOSG = CreateDynamicObject(968,2188.96411133,-1776.94152832,13.17317390,0.00000000,270,0.00000000); //object(barrierturn) (1)

	PMECAS[0] = CreateDynamicObject(980,1594.5999800,-2184.8999000,13.5000000,0.0000000,0.0000000,179.9950000); //AirPortGate (Cerrada)
	PMECAS[1] = CreateDynamicObject(980,1630.9000200,-2184.8999000,13.5000000,0.0000000,0.0000000,179.9950000); //AirPortGate (Cerrada)
	PMECASDEP = CreateDynamicObject(980,1557.1999500,-2184.6999500,13.5000000,0.0000000,0.0000000,180.0000000); //AirPortGate (Cerrada)

	PCELDAS[0] = CreateDynamicObject(1495, 2565.63, -1300.40, 1030.42,   0.00, 0.00, -89.82);
	PCELDAS[1] = CreateDynamicObject(1495, 2565.64, -1303.40, 1030.42,   0.00, 0.00, -270.54);
	PCELDAS[2] = CreateDynamicObject(971, 2529.24, -1290.99, 1030.11,   0.00, 0.00, 90.12);

	PHITMAN[0] = CreateDynamicObject(16773,282.7000122,-1542.4000244,25.3999996,0.0000000,0.0000000,326.0000000); //puertecerrada1
	PHITMAN[1] = CreateDynamicObject(16773,321.2000122,-1488.3000488,25.3999996,0.0000000,0.0000000,325.9973145); //puertacerrada2

	PHLSMD = CreateDynamicObject(1495, 2035.1304, 2896.3079, 1103.7463, 0.0, 0.0, -0.0);
	PDLSMD = CreateDynamicObject(1495, 2033.4930, 2864.4583, 1103.7463, 0.0, 0.0, 0.0);

	BPEAJESF[0] = CreateDynamicObject(968, C_PEAJE_SF_0, R_PEAJE_SF_0_C);
	BPEAJESF[1] = CreateDynamicObject(968, C_PEAJE_SF_1, R_PEAJE_SF_1_C);

	PCELDALSEM[0] = CreateDynamicObject(19302, 1339.15271, -1850.10486, 1556.34009,   0.00000, 0.00000, 0.00000);
	PCELDALSEM[1] = CreateDynamicObject(19302, 1342.22351, -1850.10486, 1556.32007,   0.00000, 0.00000, 0.00000);
	PCELDALSEM[2] = CreateDynamicObject(19302, 1345.34863, -1850.12000, 1556.32007,   0.00000, 0.00000, 0.00000);
	PCELDALSEM[3] = CreateDynamicObject(19302, 1348.52783, -1850.12378, 1556.32007,   0.00000, 0.00000, 0.00000);
	PCELDALSEM[4] = CreateDynamicObject(19302, 1351.81042, -1850.15100, 1556.32007,   0.00000, 0.00000, 0.00000);

	PCAMIONEROS = CreateDynamicObject(980, 2232.923828, -2215.902587, 15.296889, 0.000000, 0.000000, -44.799991); // Puerta.camioclosed.

	B_LSPD = CreateDynamicObject(968, 1544.70361, -1630.91638, 13.10080, 0.00000, -270.00000, 90.00000);
	PO_LSPD = CreateDynamicObject(3037, 1589.75623, -1637.94482, 14.58210, 0.00000, 0.00000, 89.76000);
	PU_LSPD = CreateDynamicObject(1495, 1582.61487, -1637.93005, 12.35418, 0.00000, 0.00000, 0.00000);

	B_LSMD = CreateDynamicObject(968, 1145.329589, -1291.419677, 13.434122, 0.000000, -91.099998, 0.000000); // lsmd.

	//CÁMARAS DE SEGURIDAD - LSPD
	Loop(i,MAX_CAMARAS,0)
	{
		OBJ_Camara[i] = CreateObject(2921,InfoCamara[i][CamPosX],InfoCamara[i][CamPosY],InfoCamara[i][CamPosZ],InfoCamara[i][CamRotX],InfoCamara[i][CamRotY],InfoCamara[i][CamRotZ]);
	}

	//CAJAS FUERTES
	Loop (i, sizeof(CajaFuertePos), 0)
	{
	    CreateDynamicObject (2332, CajaFuertePos[i][0], CajaFuertePos[i][1], CajaFuertePos[i][2], CajaFuertePos[i][3], CajaFuertePos[i][4], CajaFuertePos[i][5]);
		CreateDynamic3DTextLabel ("Caja fuerte\n\n"#CBLANCO"Usa "#CINFO"/cajafuerte "#CBLANCO"para usarla.", C_VERDE, CajaFuertePos[i][0], CajaFuertePos[i][1], CajaFuertePos[i][2], 2.5);
	}

	//CÁRCELES
	Loop(i, sizeof CeldasLSPD, 0)
	{
	    OBJ_Celda[i] = CreateDynamicObject(19302, CeldasLSPD[i][0], CeldasLSPD[i][1], CeldasLSPD[i][2], 0.0, 0.0, 0.0);

		new
		    str[20];

		A_Format(str, "Celda "#CAMARILLO"nº %d", i+1);
		CreateDynamic3DTextLabel(str, C_BLANCO,  CeldasLSPD[i][0], CeldasLSPD[i][1], CeldasLSPD[i][2]+1.5, 4.0);

		if (CeldasLSPD[i][1] > -1600.0)
		{
 			KP_Celda[i] = CreateKeyPad(CeldasLSPD[i][0]-1.0, CeldasLSPD[i][1]-0.1, CeldasLSPD[i][2], 0.0);
		}
		else
		{
 			KP_Celda[i] = CreateKeyPad(CeldasLSPD[i][0]-1.0, CeldasLSPD[i][1]+0.1, CeldasLSPD[i][2], 180.0);
		}
	}

	CreateDynamicObject(8411, 1571.61438, -1229.61951, 1000.72717,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 1597.18750, -1244.33032, 1065.64856,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19379, 1597.20740, -1253.94519, 1065.64856,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19379, 1586.69250, -1244.33105, 1065.64856,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19417, 1600.81946, -1244.05713, 1067.46387,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19417, 1597.63818, -1244.05713, 1067.46387,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19417, 1594.45679, -1244.05713, 1067.46387,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19379, 1607.67126, -1244.32703, 1065.64856,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19463, 1589.65173, -1243.88611, 1067.46387,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19398, 1591.24292, -1244.03894, 1067.46387,   0.00000, 0.00000, -90.18000);
	CreateDynamicObject(19463, 1594.51685, -1239.80212, 1067.46387,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19463, 1604.11584, -1239.79004, 1067.46387,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19463, 1602.34570, -1239.32092, 1067.46387,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19463, 1608.85693, -1247.77100, 1067.46387,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19463, 1607.18567, -1249.05518, 1067.46387,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19463, 1602.44495, -1253.79749, 1067.46387,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19463, 1589.65430, -1253.47314, 1067.46387,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14407, 1600.66370, -1261.68286, 1062.57166,   0.00000, 0.00000, -179.81949);
	CreateDynamicObject(19398, 1600.92554, -1258.66785, 1067.46387,   0.00000, 0.00000, -90.18000);
	CreateDynamicObject(19463, 1594.37683, -1258.65845, 1067.46387,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19463, 1602.44995, -1263.23865, 1067.46387,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19463, 1602.44995, -1263.39868, 1063.96387,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19463, 1599.26868, -1263.37793, 1067.46387,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19463, 1599.28625, -1263.33789, 1063.96387,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19463, 1602.44995, -1263.39868, 1060.48389,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19463, 1599.28625, -1263.33789, 1060.48389,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19393, 1600.81885, -1268.13293, 1062.02441,   0.00000, 0.00000, -90.18000);
	CreateDynamicObject(19463, 1608.85608, -1238.17163, 1067.46387,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 1586.73254, -1253.94519, 1065.64856,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1600.91382, -1272.02026, 1060.23340,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1600.91382, -1281.64026, 1060.23340,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1600.91382, -1291.24036, 1060.23340,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19456, 1594.52441, -1268.12964, 1062.03381,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19377, 1590.43384, -1272.02026, 1060.23340,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1590.43384, -1281.64026, 1060.23340,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1590.43384, -1291.24036, 1060.23340,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1611.41382, -1272.02026, 1060.23340,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1611.40613, -1281.64343, 1060.23340,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1611.40308, -1291.25098, 1060.23340,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19456, 1584.95105, -1268.13428, 1062.03381,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19456, 1585.40869, -1272.89343, 1062.03381,   0.00000, 0.00000, -179.93976);
	CreateDynamicObject(19456, 1585.41455, -1282.48010, 1062.03381,   0.00000, 0.00000, -179.93976);
	CreateDynamicObject(19456, 1585.42883, -1292.06763, 1062.03381,   0.00000, 0.00000, -179.93976);
	CreateDynamicObject(19456, 1590.16748, -1295.02710, 1062.03381,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19393, 1596.56396, -1295.03955, 1062.02441,   0.00000, 0.00000, -90.18000);
	CreateDynamicObject(19456, 1602.80981, -1295.03369, 1062.03381,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19456, 1612.40564, -1295.03003, 1062.03381,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19456, 1616.33850, -1290.34937, 1062.03381,   0.00000, 0.00000, -179.93976);
	CreateDynamicObject(19456, 1616.33862, -1280.72375, 1062.03381,   0.00000, 0.00000, -179.93976);
	CreateDynamicObject(19456, 1616.32568, -1271.12073, 1062.03381,   0.00000, 0.00000, -179.93976);
	CreateDynamicObject(19456, 1607.14587, -1268.13855, 1062.03381,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19456, 1616.70142, -1268.12976, 1062.03381,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19456, 1600.57104, -1268.12256, 1065.50391,   0.00000, 0.00000, -90.18010);
	CreateDynamicObject(19456, 1600.55115, -1268.12097, 1068.98389,   0.00000, 0.00000, -90.18010);
	CreateDynamicObject(19456, 1610.18591, -1268.13855, 1065.50391,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19456, 1619.76794, -1268.13501, 1065.50391,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19456, 1590.93213, -1268.11609, 1065.50391,   0.00000, 0.00000, -90.18010);
	CreateDynamicObject(19456, 1581.33105, -1268.12256, 1065.50391,   0.00000, 0.00000, -90.18010);
	CreateDynamicObject(19463, 1589.65430, -1263.09985, 1067.46387,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1610.18591, -1268.13855, 1068.98389,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19456, 1619.76794, -1268.13501, 1068.98389,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19456, 1590.95105, -1268.08264, 1068.98389,   0.00000, 0.00000, -90.18010);
	CreateDynamicObject(19456, 1581.33105, -1268.12256, 1068.98389,   0.00000, 0.00000, -90.18010);
	CreateDynamicObject(19456, 1616.32568, -1271.12073, 1065.49377,   0.00000, 0.00000, -179.93980);
	CreateDynamicObject(19456, 1616.33862, -1280.72375, 1065.49377,   0.00000, 0.00000, -179.93980);
	CreateDynamicObject(19456, 1616.35840, -1290.35083, 1065.49377,   0.00000, 0.00000, -179.93980);
	CreateDynamicObject(19456, 1612.40564, -1295.03003, 1065.49377,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19456, 1602.80981, -1295.03369, 1065.49377,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19456, 1593.20984, -1295.03369, 1065.49377,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19456, 1583.60974, -1295.03369, 1065.49377,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19456, 1615.25684, -1271.25110, 1062.03381,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19393, 1610.51575, -1269.72229, 1062.02783,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19393, 1610.51575, -1272.92224, 1062.02783,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19393, 1610.51575, -1276.10217, 1062.02783,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19393, 1610.51575, -1279.30225, 1062.02783,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19393, 1610.51575, -1282.48218, 1062.02783,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19393, 1610.51575, -1285.66223, 1062.02783,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19393, 1610.51575, -1288.84216, 1062.02783,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19393, 1610.51575, -1292.02222, 1062.02783,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1615.27612, -1274.43628, 1062.03381,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19456, 1615.25684, -1277.65100, 1062.03381,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19456, 1615.25684, -1280.85095, 1062.03381,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19456, 1615.25684, -1284.03101, 1062.03381,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19456, 1615.25684, -1287.15100, 1062.03381,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19456, 1615.25684, -1290.45105, 1062.03381,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19456, 1615.25684, -1293.55103, 1062.03381,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19456, 1610.51892, -1298.34338, 1062.03381,   0.00000, 0.00000, -179.93976);
	CreateDynamicObject(19456, 1585.42883, -1292.06763, 1065.49377,   0.00000, 0.00000, -179.93980);
	CreateDynamicObject(19456, 1585.41455, -1282.48010, 1065.49377,   0.00000, 0.00000, -179.93980);
	CreateDynamicObject(19456, 1585.40869, -1272.89343, 1065.49377,   0.00000, 0.00000, -179.93980);
	CreateDynamicObject(19377, 1601.55127, -1263.34131, 1069.25513,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19393, 1590.53467, -1269.74170, 1062.02783,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1612.59644, -1290.45166, 1063.71338,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1612.59644, -1280.84363, 1063.71338,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1612.59644, -1271.25415, 1063.71338,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1602.10815, -1296.51868, 1063.71338,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19456, 1585.75037, -1271.28894, 1062.03381,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19393, 1590.53467, -1272.94165, 1062.02783,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19393, 1590.53467, -1276.14172, 1062.02783,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19393, 1590.53467, -1279.34167, 1062.02783,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19393, 1590.53467, -1282.54175, 1062.02783,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19393, 1590.53467, -1285.74170, 1062.02783,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19393, 1590.53467, -1288.94165, 1062.02783,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19393, 1590.53467, -1292.14172, 1062.02783,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1590.54944, -1298.48962, 1062.03381,   0.00000, 0.00000, -179.93976);
	CreateDynamicObject(19456, 1585.79041, -1274.58887, 1062.03381,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19456, 1585.77588, -1277.75513, 1062.03381,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19456, 1585.80420, -1280.93433, 1062.03381,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19456, 1585.79041, -1284.14893, 1062.03381,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19456, 1585.79041, -1287.36890, 1062.03381,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19456, 1585.79041, -1290.54895, 1062.03381,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19456, 1585.79041, -1293.76892, 1062.03381,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19393, 1610.51575, -1269.72229, 1065.48779,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19393, 1610.51575, -1272.92224, 1065.48779,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19393, 1610.51575, -1276.10217, 1065.48779,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19393, 1610.51575, -1279.30225, 1065.48779,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19393, 1610.51575, -1282.48218, 1065.48779,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19393, 1610.51575, -1285.66223, 1065.48779,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19393, 1610.51575, -1288.84216, 1065.48779,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19393, 1610.51575, -1292.02222, 1065.48779,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1610.51892, -1298.34338, 1065.48779,   0.00000, 0.00000, -179.93980);
	CreateDynamicObject(19456, 1615.25684, -1293.55103, 1065.49377,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19456, 1615.25684, -1290.45105, 1065.49377,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19456, 1615.25684, -1287.15100, 1065.49377,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19456, 1615.25684, -1284.03101, 1065.49390,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19456, 1615.25684, -1280.85095, 1065.49377,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19456, 1615.25684, -1277.65100, 1065.49377,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19456, 1615.27612, -1274.43628, 1065.49377,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19456, 1615.25684, -1271.25110, 1065.49377,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19377, 1591.62817, -1296.51868, 1063.71338,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1581.12939, -1296.52563, 1063.71338,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1587.73352, -1286.90747, 1063.71338,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19393, 1590.53467, -1292.14172, 1065.48779,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1590.51660, -1298.50781, 1065.47375,   0.00000, 0.00000, -179.93980);
	CreateDynamicObject(19377, 1587.73352, -1277.30750, 1063.71338,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1587.73303, -1267.68762, 1063.71338,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19393, 1590.53467, -1288.94165, 1065.48779,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19393, 1590.53467, -1285.74170, 1065.48779,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19393, 1590.53467, -1282.54175, 1065.48779,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19393, 1590.53467, -1279.34167, 1065.48779,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19393, 1590.53467, -1276.14172, 1065.48779,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19393, 1590.53467, -1272.94165, 1065.48779,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19393, 1590.53467, -1269.74170, 1065.48779,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14407, 1601.69189, -1289.33533, 1060.63159,   0.00000, 0.00000, -360.23941);
	CreateDynamicObject(19462, 1599.71265, -1289.23315, 1060.77600,   -35.00000, -2.00000, 0.00000);
	CreateDynamicObject(19462, 1603.75452, -1289.23108, 1060.77600,   -35.00000, -2.00000, 0.00000);
	CreateDynamicObject(19304, 1605.60400, -1291.77307, 1064.41663,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19462, 1605.19617, -1295.77161, 1061.91699,   0.00000, -2.00000, 19.01999);
	CreateDynamicObject(19462, 1599.43420, -1295.94507, 1061.91699,   0.00000, -2.00000, -3.48001);
	CreateDynamicObject(19304, 1597.79089, -1291.74646, 1064.41663,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19304, 1594.67090, -1291.74646, 1064.41663,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1585.79041, -1290.54895, 1065.47375,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19456, 1585.79041, -1287.36890, 1065.47375,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19456, 1585.79041, -1284.14893, 1065.47375,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19456, 1585.80420, -1280.93433, 1065.47375,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19456, 1585.77588, -1277.75513, 1065.47375,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19456, 1585.79041, -1274.58887, 1065.47375,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19456, 1585.75037, -1271.28894, 1065.47375,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19304, 1607.38354, -1290.02844, 1064.41663,   0.00000, 0.00000, -89.88007);
	CreateDynamicObject(19304, 1607.38354, -1286.53369, 1064.41663,   0.00000, 0.00000, -89.88010);
	CreateDynamicObject(19304, 1607.38354, -1283.03223, 1064.41663,   0.00000, 0.00000, -89.88010);
	CreateDynamicObject(19304, 1607.38354, -1279.55249, 1064.41663,   0.00000, 0.00000, -89.88010);
	CreateDynamicObject(19304, 1607.37537, -1276.08337, 1064.41663,   0.00000, 0.00000, -89.88010);
	CreateDynamicObject(19304, 1607.37134, -1272.64600, 1064.41663,   0.00000, 0.00000, -89.88010);
	CreateDynamicObject(19304, 1607.36426, -1269.15857, 1064.41663,   0.00000, 0.00000, -89.88010);
	CreateDynamicObject(19304, 1592.93030, -1289.98938, 1064.41663,   0.00000, 0.00000, -89.88010);
	CreateDynamicObject(19304, 1592.93030, -1286.50940, 1064.41663,   0.00000, 0.00000, -89.88010);
	CreateDynamicObject(19304, 1592.93030, -1283.02942, 1064.41663,   0.00000, 0.00000, -89.88010);
	CreateDynamicObject(19304, 1592.93030, -1279.52942, 1064.41663,   0.00000, 0.00000, -89.88010);
	CreateDynamicObject(19304, 1592.93030, -1276.04944, 1064.41663,   0.00000, 0.00000, -89.88010);
	CreateDynamicObject(19304, 1592.93030, -1272.56946, 1064.41663,   0.00000, 0.00000, -89.88010);
	CreateDynamicObject(19304, 1592.91797, -1269.06384, 1064.41663,   0.00000, 0.00000, -89.88010);
	CreateDynamicObject(19456, 1594.64697, -1299.85791, 1062.03381,   0.00000, 0.00000, -179.93980);
	CreateDynamicObject(19377, 1600.93665, -1300.85706, 1060.23340,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1590.44995, -1300.86365, 1060.23340,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19456, 1598.26990, -1299.85791, 1062.03381,   0.00000, 0.00000, -179.93980);
	CreateDynamicObject(19377, 1595.76379, -1310.47400, 1060.23340,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19456, 1598.27893, -1309.35266, 1062.03381,   0.00000, 0.00000, -179.93980);
	CreateDynamicObject(19456, 1597.68274, -1309.07312, 1062.03381,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19377, 1585.27466, -1310.48096, 1060.23340,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19456, 1589.90735, -1304.60486, 1062.03381,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19393, 1591.29382, -1309.07312, 1062.02441,   0.00000, 0.00000, -90.18000);
	CreateDynamicObject(19377, 1585.26904, -1320.10229, 1060.23340,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1595.75537, -1320.11243, 1060.23340,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19456, 1582.37830, -1313.84314, 1062.03381,   0.00000, 0.00000, -179.93980);
	CreateDynamicObject(19456, 1584.90747, -1309.06555, 1062.03381,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19456, 1593.49377, -1331.89392, 1062.03381,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19456, 1598.28748, -1318.68066, 1062.03381,   0.00000, 0.00000, -179.93980);
	CreateDynamicObject(19456, 1582.37854, -1323.33386, 1062.03381,   0.00000, 0.00000, -179.93980);
	CreateDynamicObject(19456, 1598.29541, -1328.25415, 1062.03381,   0.00000, 0.00000, -179.93980);
	CreateDynamicObject(19377, 1595.75537, -1329.71240, 1060.23340,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1585.26782, -1329.72192, 1060.23340,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19456, 1588.69128, -1331.05164, 1062.03381,   0.00000, 0.00000, -179.93980);
	CreateDynamicObject(19461, 1593.54895, -1326.46033, 1064.51526,   -180.00000, 0.00000, -92.00000);
	CreateDynamicObject(19461, 1593.48889, -1326.46033, 1059.75513,   0.00000, 0.00000, -91.62000);
	CreateDynamicObject(3578, 1592.70581, -1273.29163, 1059.55603,   0.00000, 0.00000, -90.47996);
	CreateDynamicObject(3578, 1592.61108, -1283.51563, 1059.55603,   0.00000, 0.00000, -90.47996);
	CreateDynamicObject(3578, 1592.51111, -1293.79358, 1059.55603,   0.00000, 0.00000, -90.48000);
	CreateDynamicObject(3578, 1607.96094, -1273.35315, 1059.55603,   0.00000, 0.00000, -90.47996);
	CreateDynamicObject(3578, 1607.86182, -1283.62756, 1059.55603,   0.00000, 0.00000, -90.47996);
	CreateDynamicObject(3578, 1607.75818, -1293.88232, 1059.55603,   0.00000, 0.00000, -90.47996);
	CreateDynamicObject(19456, 1583.96155, -1331.90771, 1062.03381,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19456, 1583.94531, -1326.29883, 1062.03381,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(12842, 1585.29089, -1322.44458, 1060.73853,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(12842, 1585.35522, -1313.31726, 1060.73853,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(12842, 1594.93140, -1321.03711, 1060.73853,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(12842, 1595.03650, -1312.87500, 1060.73853,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1579.95776, -1300.86560, 1060.23340,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19456, 1585.13220, -1299.87952, 1062.03381,   0.00000, 0.00000, -179.93976);
	CreateDynamicObject(19456, 1580.46289, -1296.37317, 1062.03381,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19393, 1583.54199, -1304.59766, 1062.02441,   0.00000, 0.00000, -90.18000);
	CreateDynamicObject(19456, 1577.13745, -1304.60571, 1062.03381,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19456, 1566.92249, -1300.48511, 1062.03381,   0.00000, 0.00000, -179.93976);
	CreateDynamicObject(19377, 1581.13513, -1306.16003, 1063.71338,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1591.63403, -1306.15637, 1063.71338,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1591.63403, -1315.77649, 1063.71338,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1581.15405, -1315.77649, 1063.71338,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1602.12939, -1306.11328, 1063.71338,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1602.12585, -1315.73315, 1063.71338,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1602.09631, -1325.34192, 1063.71338,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1591.61035, -1325.39905, 1063.71338,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1581.13684, -1325.40247, 1063.71338,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19456, 1580.09766, -1309.41589, 1062.03381,   0.00000, 0.00000, -179.93976);
	CreateDynamicObject(19377, 1569.51599, -1301.00732, 1060.23340,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19456, 1570.92163, -1296.38489, 1062.03381,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19456, 1567.58643, -1304.61621, 1062.03381,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19377, 1593.85059, -1335.01270, 1063.71338,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1570.67102, -1300.03088, 1063.71338,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1591.06641, -1253.86426, 1069.25513,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1591.06750, -1244.24084, 1069.25513,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1601.54333, -1244.56165, 1069.25513,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1612.02673, -1244.56055, 1069.25513,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1601.55945, -1253.71521, 1069.25513,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(2627, 1584.54749, -1297.57214, 1060.31775,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2627, 1583.36755, -1297.59204, 1060.31775,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2627, 1582.16748, -1297.59204, 1060.31775,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2627, 1581.08752, -1297.59204, 1060.31775,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2628, 1579.33057, -1297.63989, 1060.57300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2628, 1578.25061, -1297.63989, 1060.57300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2628, 1577.09058, -1297.63989, 1060.57300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2628, 1576.07056, -1297.63989, 1060.57300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14791, 1570.05139, -1300.43079, 1061.70020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2630, 1577.02209, -1303.53015, 1060.32031,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2630, 1578.44214, -1303.53015, 1060.32031,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2630, 1579.52209, -1303.53015, 1060.32031,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2630, 1580.64209, -1303.53015, 1060.32031,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2630, 1581.64209, -1303.53015, 1060.32031,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1590.57507, -1291.74927, 1067.17236,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1601.05505, -1291.74927, 1067.17236,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1611.53516, -1291.68933, 1067.17236,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1611.52673, -1282.07397, 1067.17236,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1611.53662, -1272.52917, 1067.17236,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1601.03662, -1272.52917, 1067.17236,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1601.05664, -1282.12915, 1067.17236,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1590.59656, -1272.52917, 1067.17236,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1590.59656, -1282.14917, 1067.17236,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(2170, 1589.48743, -1331.40845, 1060.27856,   0.00000, 0.00000, 178.31970);
	CreateDynamicObject(2415, 1590.38770, -1331.10193, 1060.27576,   0.00000, 0.00000, 180.11960);
	CreateDynamicObject(2416, 1591.65613, -1331.62561, 1060.27625,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2418, 1594.72034, -1331.17236, 1060.29370,   0.00000, 0.00000, -179.69971);
	CreateDynamicObject(2451, 1597.00085, -1331.21570, 1060.29175,   0.00000, 0.00000, -179.70020);
	CreateDynamicObject(2514, 1615.76440, -1270.90613, 1060.30017,   0.00000, 0.00000, -90.12000);
	CreateDynamicObject(1800, 1612.64771, -1268.75732, 1060.32117,   0.00000, 0.00000, -89.94011);
	CreateDynamicObject(1800, 1612.75366, -1271.83289, 1060.32117,   0.00000, 0.00000, -89.94011);
	CreateDynamicObject(2514, 1615.79980, -1274.11572, 1060.30017,   0.00000, 0.00000, -90.12000);
	CreateDynamicObject(1800, 1612.77612, -1275.06519, 1060.32117,   0.00000, 0.00000, -89.94011);
	CreateDynamicObject(2514, 1615.76221, -1277.31763, 1060.30017,   0.00000, 0.00000, -90.12000);
	CreateDynamicObject(1800, 1612.75830, -1278.24231, 1060.32117,   0.00000, 0.00000, -89.94011);
	CreateDynamicObject(2514, 1615.74011, -1280.53040, 1060.30017,   0.00000, 0.00000, -90.12000);
	CreateDynamicObject(1800, 1612.69482, -1281.47253, 1060.32117,   0.00000, 0.00000, -89.94011);
	CreateDynamicObject(2514, 1615.74561, -1283.70874, 1060.30017,   0.00000, 0.00000, -90.12000);
	CreateDynamicObject(1800, 1612.71191, -1284.71216, 1060.32117,   0.00000, 0.00000, -89.94011);
	CreateDynamicObject(2514, 1615.75317, -1286.81116, 1060.30017,   0.00000, 0.00000, -90.12000);
	CreateDynamicObject(1800, 1612.76819, -1287.86719, 1060.32117,   0.00000, 0.00000, -89.94011);
	CreateDynamicObject(2514, 1615.81738, -1290.06421, 1060.30017,   0.00000, 0.00000, -90.12000);
	CreateDynamicObject(1800, 1612.70667, -1291.10815, 1060.32117,   0.00000, 0.00000, -89.94011);
	CreateDynamicObject(2514, 1615.80029, -1293.15955, 1060.30017,   0.00000, 0.00000, -90.12000);
	CreateDynamicObject(1800, 1612.64771, -1268.75732, 1063.74121,   0.00000, 0.00000, -89.94010);
	CreateDynamicObject(2514, 1615.76440, -1270.90613, 1063.80017,   0.00000, 0.00000, -90.12000);
	CreateDynamicObject(1800, 1612.75366, -1271.83289, 1063.74121,   0.00000, 0.00000, -89.94010);
	CreateDynamicObject(2514, 1615.79980, -1274.11572, 1063.74121,   0.00000, 0.00000, -90.12000);
	CreateDynamicObject(1800, 1612.77612, -1275.06519, 1063.74121,   0.00000, 0.00000, -89.94010);
	CreateDynamicObject(2514, 1615.76221, -1277.31763, 1063.74121,   0.00000, 0.00000, -90.12000);
	CreateDynamicObject(1800, 1612.75830, -1278.24231, 1063.74121,   0.00000, 0.00000, -89.94010);
	CreateDynamicObject(2514, 1615.74011, -1280.53040, 1063.74121,   0.00000, 0.00000, -90.12000);
	CreateDynamicObject(1800, 1612.69482, -1281.47253, 1063.74121,   0.00000, 0.00000, -89.94010);
	CreateDynamicObject(2514, 1615.74561, -1283.70874, 1063.74121,   0.00000, 0.00000, -90.12000);
	CreateDynamicObject(1800, 1612.71191, -1284.71216, 1063.74121,   0.00000, 0.00000, -89.94010);
	CreateDynamicObject(2514, 1615.75317, -1286.81116, 1063.74121,   0.00000, 0.00000, -90.12000);
	CreateDynamicObject(1800, 1612.76819, -1287.86719, 1063.74121,   0.00000, 0.00000, -89.94010);
	CreateDynamicObject(2514, 1615.81738, -1290.06421, 1063.74121,   0.00000, 0.00000, -90.12000);
	CreateDynamicObject(1800, 1612.70667, -1291.10815, 1063.74121,   0.00000, 0.00000, -89.94010);
	CreateDynamicObject(2514, 1615.80029, -1293.15955, 1063.74121,   0.00000, 0.00000, -90.12000);
	CreateDynamicObject(1800, 1584.46252, -1268.72021, 1060.32117,   0.00000, 0.00000, -89.94011);
	CreateDynamicObject(2514, 1586.00635, -1270.86011, 1060.30017,   0.00000, 0.00000, -270.41992);
	CreateDynamicObject(2514, 1586.02612, -1273.91724, 1060.30017,   0.00000, 0.00000, -270.41989);
	CreateDynamicObject(1800, 1584.46252, -1272.00024, 1060.32117,   0.00000, 0.00000, -89.94010);
	CreateDynamicObject(1800, 1584.46252, -1275.28015, 1060.32117,   0.00000, 0.00000, -89.94010);
	CreateDynamicObject(2514, 1586.02612, -1277.23718, 1060.30017,   0.00000, 0.00000, -270.41989);
	CreateDynamicObject(1800, 1584.46252, -1278.42017, 1060.32117,   0.00000, 0.00000, -89.94010);
	CreateDynamicObject(2514, 1586.02612, -1280.53723, 1060.30017,   0.00000, 0.00000, -270.41989);
	CreateDynamicObject(1800, 1584.46252, -1281.58020, 1060.32117,   0.00000, 0.00000, -89.94010);
	CreateDynamicObject(2514, 1586.02612, -1283.59717, 1060.30017,   0.00000, 0.00000, -270.41989);
	CreateDynamicObject(1800, 1584.46533, -1284.83997, 1060.32117,   0.00000, 0.00000, -89.94010);
	CreateDynamicObject(2514, 1586.00659, -1286.92139, 1060.30017,   0.00000, 0.00000, -270.41989);
	CreateDynamicObject(1800, 1584.46533, -1288.14001, 1060.32117,   0.00000, 0.00000, -89.94010);
	CreateDynamicObject(2514, 1585.96777, -1289.98608, 1060.30017,   0.00000, 0.00000, -270.41989);
	CreateDynamicObject(1800, 1584.46533, -1291.26001, 1060.32117,   0.00000, 0.00000, -89.94010);
	CreateDynamicObject(2514, 1585.96777, -1293.08606, 1060.30017,   0.00000, 0.00000, -270.41989);
	CreateDynamicObject(2514, 1585.96777, -1293.08606, 1063.76025,   0.00000, 0.00000, -270.41989);
	CreateDynamicObject(1800, 1584.46533, -1291.26001, 1063.78125,   0.02000, 0.00000, -89.94010);
	CreateDynamicObject(1800, 1584.46533, -1288.14001, 1063.78125,   0.00000, 0.00000, -89.94010);
	CreateDynamicObject(1800, 1584.46533, -1284.83997, 1063.78125,   0.00000, 0.00000, -89.94010);
	CreateDynamicObject(1800, 1584.46252, -1281.58020, 1063.78125,   0.00000, 0.00000, -89.94010);
	CreateDynamicObject(1800, 1584.46252, -1278.42017, 1063.78125,   0.00000, 0.00000, -89.94010);
	CreateDynamicObject(1800, 1584.46252, -1275.28015, 1063.78125,   0.00000, 0.00000, -89.94010);
	CreateDynamicObject(1800, 1584.46252, -1272.00024, 1063.78125,   0.00000, 0.00000, -89.94010);
	CreateDynamicObject(1800, 1584.46252, -1268.72021, 1063.78125,   0.00000, 0.00000, -89.94010);
	CreateDynamicObject(2514, 1585.96777, -1289.98608, 1063.76025,   0.00000, 0.00000, -270.41989);
	CreateDynamicObject(2514, 1586.00659, -1286.92139, 1063.76025,   0.00000, 0.00000, -270.41989);
	CreateDynamicObject(2514, 1586.02612, -1283.59717, 1063.76025,   0.00000, 0.00000, -270.41989);
	CreateDynamicObject(2514, 1586.02612, -1280.53723, 1063.76025,   0.00000, 0.00000, -270.41989);
	CreateDynamicObject(2514, 1586.02612, -1277.23718, 1063.76025,   0.00000, 0.00000, -270.41989);
	CreateDynamicObject(2514, 1586.02612, -1273.91724, 1063.76025,   0.00000, 0.00000, -270.41989);
	CreateDynamicObject(2514, 1586.00635, -1270.86011, 1063.76025,   0.00000, 0.00000, -270.41989);
	CreateDynamicObject(2165, 1595.15283, -1243.45459, 1065.73608,   0.00000, 0.00000, -179.87993);
	CreateDynamicObject(2165, 1598.42944, -1243.47632, 1065.73608,   0.00000, 0.00000, -179.87993);
	CreateDynamicObject(2165, 1601.64099, -1243.44385, 1065.73608,   0.00000, 0.00000, -179.87993);
	CreateDynamicObject(1806, 1594.75244, -1242.07813, 1065.73621,   0.00000, 0.00000, -179.51988);
	CreateDynamicObject(1806, 1597.87244, -1242.07813, 1065.73621,   0.00000, 0.00000, -179.51990);
	CreateDynamicObject(1806, 1600.93237, -1242.07813, 1065.73621,   0.00000, 0.00000, -179.51990);
	CreateDynamicObject(2163, 1600.94373, -1239.71082, 1065.70825,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2161, 1599.22778, -1239.87585, 1065.71765,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2161, 1599.22778, -1239.87585, 1067.03772,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2161, 1597.90784, -1239.87585, 1065.71765,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2161, 1597.90784, -1239.87585, 1067.03772,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2162, 1595.93091, -1239.87976, 1065.69666,   0.00000, 0.00000, 0.06000);
	CreateDynamicObject(2163, 1600.94373, -1239.71082, 1066.60828,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2161, 1594.40845, -1239.91284, 1065.71765,   0.00000, 0.00000, 0.12000);
	CreateDynamicObject(2161, 1594.41589, -1239.93140, 1067.05774,   0.00000, 0.00000, 0.12000);
	CreateDynamicObject(2161, 1593.10840, -1239.91284, 1065.71765,   0.00000, 0.00000, 0.12000);
	CreateDynamicObject(2161, 1593.10840, -1239.91284, 1067.03772,   0.00000, 0.00000, 0.12000);
	CreateDynamicObject(1703, 1590.29285, -1250.29187, 1065.73462,   0.00000, 0.00000, 90.36000);
	CreateDynamicObject(1703, 1590.22827, -1253.20825, 1065.73462,   0.00000, 0.00000, 90.36000);
	CreateDynamicObject(1703, 1590.22827, -1256.04834, 1065.73462,   0.00000, 0.00000, 90.36000);
	CreateDynamicObject(2811, 1590.15869, -1258.18286, 1065.67444,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1703, 1593.94995, -1258.09888, 1065.73462,   0.00000, 0.00000, 179.81982);
	CreateDynamicObject(1703, 1597.21582, -1258.11743, 1065.73462,   0.00000, 0.00000, 179.81982);
	CreateDynamicObject(2811, 1598.82813, -1258.01013, 1065.67444,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(15038, 1590.28650, -1240.32910, 1066.31665,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(15038, 1607.87341, -1248.56909, 1066.33667,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1703, 1602.67859, -1240.42029, 1065.73462,   0.00000, 0.00000, -0.54000);
	CreateDynamicObject(1703, 1606.51782, -1240.42224, 1065.73462,   0.00000, 0.00000, -0.54000);
	CreateDynamicObject(2811, 1605.63855, -1240.33838, 1065.67444,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1703, 1605.42212, -1248.47400, 1065.73462,   0.00000, 0.00000, 179.81982);
	CreateDynamicObject(15038, 1590.21057, -1246.19360, 1066.31665,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1494, 1590.50415, -1244.03174, 1065.70752,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1846, 1597.63000, -1243.11926, 1067.54541,   -88.00000, -91.00000, 88.72000);
	CreateDynamicObject(1846, 1600.91602, -1243.10278, 1067.54541,   -88.00000, -91.00000, 88.72000);
	CreateDynamicObject(1846, 1594.42407, -1243.09363, 1067.54541,   -88.00000, -91.00000, 88.72000);
	CreateDynamicObject(2287, 1601.89404, -1254.90601, 1068.00110,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1703, 1601.89685, -1254.64014, 1065.73462,   0.00000, 0.00000, 269.93930);
	CreateDynamicObject(1703, 1601.87500, -1250.63147, 1065.73462,   0.00000, 0.00000, 269.93930);
	CreateDynamicObject(2288, 1601.87451, -1250.80908, 1067.82581,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2276, 1608.26953, -1242.83643, 1067.80371,   0.00000, 0.00000, -90.24000);
	CreateDynamicObject(2270, 1590.22949, -1246.83215, 1067.76672,   0.00000, 0.00000, 89.87990);
	CreateDynamicObject(2267, 1589.76538, -1250.31750, 1068.20740,   0.00000, 0.00000, 90.11996);
	CreateDynamicObject(2263, 1590.24585, -1254.89856, 1067.89758,   0.00000, 0.00000, 90.30000);
	CreateDynamicObject(1557, 1608.79297, -1243.59985, 1065.71313,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1557, 1608.82153, -1246.60291, 1065.71313,   0.00000, 0.00000, -269.69949);
	CreateDynamicObject(2270, 1608.26318, -1247.70117, 1067.16895,   0.00000, 0.00000, -89.99980);
	CreateDynamicObject(3578, 1604.67151, -1279.05835, 1059.55603,   0.00000, 0.00000, -51.18000);
	CreateDynamicObject(3578, 1597.17786, -1277.42810, 1059.55603,   0.00000, 0.00000, -153.11928);


	Loop(i, sizeof(PuertasCarcel), 0)
	{
		KP_Carcel[i][0] = CreateKeyPad(PuertasCarcel[i][0], PuertasCarcel[i][1], PuertasCarcel[i][2], PuertasCarcel[i][3]);
		KP_Carcel[i][1] = CreateKeyPad(PuertasCarcel[i][4], PuertasCarcel[i][5], PuertasCarcel[i][6], PuertasCarcel[i][7]);

		OBJ_Carcel[i] = CreateDynamicObject(1495, PuertasCarcel[i][8], PuertasCarcel[i][9], PuertasCarcel[i][10], 0.0, 0.0, PuertasCarcel[i][11]);
	}

	Loop(i, sizeof(PuertasComisaria), 0)
	{
		KP_Comisaria[i][0] = CreateKeyPad(PuertasComisaria[i][0], PuertasComisaria[i][1], PuertasComisaria[i][2], PuertasComisaria[i][3]);
	    if (PuertasComisaria[i][4] == 1.0)
	    {
			OBJ_Comisaria[i] = CreateDynamicObject(19302, PuertasComisaria[i][8], PuertasComisaria[i][9], PuertasComisaria[i][10], 0.0, 0.0, PuertasComisaria[i][11]);
		}
		else
		{
			OBJ_Comisaria[i] = CreateDynamicObject(1495, PuertasComisaria[i][8], PuertasComisaria[i][9], PuertasComisaria[i][10], 0.0, 0.0, PuertasComisaria[i][11]);
			KP_Comisaria[i][1] = CreateKeyPad(PuertasComisaria[i][4], PuertasComisaria[i][5], PuertasComisaria[i][6], PuertasComisaria[i][7]);
		}
	}

	// --==] Objetos estáticos [==-- //
	#define CreateObject CreateDynamicObject
	//          ATAJOS CAMIONEROS       //
	CreateObject(978, 2408.51, -2135.93, 13.35,   0.00, 0.00, 270.20);
	CreateObject(978, 2408.53, -2125.21, 13.35,   0.00, 0.00, 270.20);
	CreateObject(978, 2408.44, -2114.63, 13.35,   0.00, 0.00, 270.20);
	CreateObject(978, 2408.38, -2104.32, 13.35,   0.00, 0.00, 270.20);
	CreateObject(978, 2408.31, -2093.94, 13.35,   0.00, 0.00, 270.20);
	CreateObject(978, 2408.23, -2083.38, 13.35,   0.00, 0.00, 270.20);
	CreateObject(978, 2408.21, -2073.33, 13.35,   0.00, 0.00, 270.20);
	CreateObject(978, 2408.16, -2063.02, 13.35,   0.00, 0.00, 270.20);
	CreateObject(978, 2413.84, -2141.88, 13.35,   0.00, 0.00, 359.36);
	CreateObject(978, 2421.29, -2137.77, 13.35,   0.00, 0.00, 419.42);
	CreateObject(3722, 2197.81, -2014.58, 16.87,   3.14, 0.00, 45.12);
	CreateObject(3722, 2183.70, -1979.14, 16.87,   3.14, 0.00, -86.40);

	//              	INT OFICINA MINERIA                        //
	CreateObject(18009, -770.85938, 1304.85986, 1000.45117,   0.00000, 0.00000, 0.00000);
	CreateObject(19452, -773.21307, 1301.89661, 999.01300,   0.00000, 0.00000, -90.06000);
	CreateObject(19452, -766.49103, 1297.20288, 998.99298,   0.00000, 0.00000, -179.75990);
	CreateObject(1557, -766.54114, 1299.22021, 997.45831,   0.00000, 0.00000, -270.60001);
	CreateObject(19452, -772.21838, 1291.57874, 997.60596,   0.00000, -91.00000, -180.00000);
	CreateObject(19452, -775.47717, 1291.57312, 997.64600,   0.00000, -91.00000, -180.00000);
	CreateObject(19452, -776.65723, 1291.57312, 997.66602,   0.00000, -91.00000, -180.00000);
	CreateObject(19452, -774.76691, 1307.30176, 998.93298,   0.00000, 0.00000, -90.06000);
	CreateObject(19452, -784.40692, 1307.30176, 998.93298,   0.00000, 0.00000, -90.06000);
	CreateObject(19452, -765.16382, 1307.28931, 998.93298,   0.00000, 0.00000, -90.06000);
	CreateObject(3851, -776.96600, 1295.20459, 999.11438,   0.00000, 0.00000, -89.88000);
	CreateObject(2008, -768.22815, 1303.90234, 997.20245,   0.00000, 0.00000, 93.29996);
	CreateObject(1663, -766.80145, 1304.88000, 997.65509,   0.00000, 0.00000, -88.32002);
	CreateObject(2196, -768.23999, 1304.54150, 998.01337,   0.00000, 0.00000, 34.62003);
	CreateObject(2007, -767.53204, 1302.52161, 997.20398,   0.00000, 0.00000, -179.09995);
	CreateObject(2007, -768.49139, 1302.51160, 997.20398,   0.00000, 0.00000, -179.09990);
	CreateObject(2007, -769.45142, 1302.51160, 997.20398,   0.00000, 0.00000, -179.09990);
	CreateObject(2164, -764.89618, 1303.64551, 997.24365,   0.00000, 0.00000, -87.47993);
	CreateObject(2164, -764.94855, 1305.38623, 997.24365,   0.00000, 0.00000, -87.47993);
	CreateObject(2262, -781.36926, 1296.71887, 999.69568,   0.00000, 0.00000, 89.63990);
	CreateObject(2262, -772.77649, 1306.72205, 999.76453,   0.00000, 0.00000, 0.00000);
	CreateObject(2261, -774.39398, 1306.72156, 999.67291,   0.00000, 0.00000, 0.00000);
	CreateObject(2108, -765.56995, 1306.64221, 997.20239,   0.00000, 0.00000, 0.00000);
	CreateObject(19452, -784.64063, 1302.02197, 997.97302,   0.00000, 0.00000, -90.06000);
	CreateObject(1491, -779.85400, 1302.02588, 997.24707,   0.00000, 0.00000, 0.00000);
	CreateObject(19452, -783.01923, 1302.01184, 1001.47302,   0.00000, 0.00000, -90.06000);
	CreateObject(1757, -772.14575, 1295.73218, 997.70526,   0.00000, 0.00000, -180.72000);
	CreateObject(19452, -770.76288, 1291.47546, 996.89301,   0.00000, 0.00000, -179.75990);
	CreateObject(19452, -777.92291, 1291.47546, 996.89301,   0.00000, 0.00000, -179.75990);
	CreateObject(1757, -775.34332, 1295.65955, 997.70526,   0.00000, 0.00000, -180.72000);
	CreateObject(1823, -776.93140, 1297.00916, 997.60449,   0.00000, 0.00000, 0.00000);
	CreateObject(1823, -773.89734, 1296.95117, 997.60449,   0.00000, 0.00000, 0.00000);
	CreateObject(2161, -770.96460, 1307.20508, 997.18689,   0.00000, 0.00000, 0.00000);
	CreateObject(2161, -770.96460, 1307.20508, 998.50690,   0.00000, 0.00000, 0.00000);
	CreateObject(2161, -769.66461, 1307.20508, 997.18689,   0.00000, 0.00000, 0.00000);
	CreateObject(2161, -769.66461, 1307.20508, 998.50690,   0.00000, 0.00000, 0.00000);
	CreateObject(2737, -782.32172, 1305.00574, 999.36768,   0.00000, 0.00000, 90.42000);
	CreateObject(2284, -776.01343, 1306.73328, 999.67657,   0.00000, 0.00000, 0.00000);
	CreateObject(2283, -777.86029, 1307.19556, 999.85193,   0.00000, 0.00000, 0.00000);
	CreateObject(19452, -776.84369, 1295.09778, 998.85303,   0.00000, 0.00000, -90.00000);
	CreateObject(19452, -767.21332, 1295.08667, 998.85303,   0.00000, 0.00000, -90.00000);
	CreateObject(19452, -766.64093, 1293.64404, 998.99298,   0.00000, 0.00000, -179.75990);
	CreateObject(3851, -765.68597, 1295.20459, 999.11438,   0.00000, 0.00000, -89.88000);
	CreateObject(3851, -776.96600, 1295.20459, 999.11438,   0.00000, 0.00000, -89.88000);
	CreateObject(3851, -766.75928, 1292.85522, 999.11438,   0.00000, 0.00000, -179.99992);
	CreateObject(19452, -763.74371, 1301.88464, 999.01300,   0.00000, 0.00000, -90.06000);
	CreateObject(2161, -782.35229, 1304.60498, 997.18689,   0.00000, 0.00000, 90.36000);

	//              	EXIT MINERIA                        //
	CreateObject(1508, 699.50000, 894.90002, -38.00000,   0.00000, 0.00000, 0.00000);
	CreateObject(2395, 697.59998, 898.00000, -41.82000,   0.00000, 0.00000, 0.00000);
	CreateObject(2395, 693.90002, 898.00000, -41.80000,   0.00000, 0.00000, 0.00000);
	CreateObject(2395, 696.65997, 898.19000, -41.80000,   0.00000, 0.00000, 180.00000);
	CreateObject(2395, 693.90002, 898.00000, -39.10000,   0.00000, 0.00000, 0.00000);
	CreateObject(2395, 697.59998, 898.00000, -39.10000,   0.00000, 0.00000, 0.00000);
	CreateObject(2395, 696.65997, 898.19000, -39.10000,   0.00000, 0.00000, 179.99500);
	CreateObject(2395, 704.00000, 898.19000, -39.10000,   0.00000, 0.00000, 180.00000);
	CreateObject(2395, 700.28998, 898.19000, -39.10000,   0.00000, 0.00000, 179.99500);
	CreateObject(2395, 700.39899, 898.19000, -41.80000,   0.00000, 0.00000, 179.99500);
	CreateObject(2395, 699.90002, 895.40002, -36.22000,   270.00000, 0.00000, 0.00000);
	CreateObject(2395, 699.90002, 892.65997, -36.22000,   269.99500, 0.00000, 0.00000);
	CreateObject(2395, 699.90002, 891.75000, -36.22000,   269.99500, 0.00000, 0.00000);
	CreateObject(2395, 696.29999, 895.40002, -36.22000,   269.99500, 0.00000, 0.00000);
	CreateObject(2395, 693.90002, 895.40002, -36.22000,   269.99500, 0.00000, 0.00000);
	CreateObject(2395, 696.20001, 892.65997, -36.22000,   269.99500, 0.00000, 0.00000);
	CreateObject(2395, 696.20001, 891.70001, -36.22000,   269.99500, 0.00000, 0.00000);
	CreateObject(2395, 693.88000, 892.65997, -36.22000,   269.99500, 0.00000, 0.00000);
	CreateObject(2395, 693.88000, 891.77698, -36.22000,   269.99500, 0.00000, 0.00000);
	CreateObject(2395, 699.90002, 891.70001, -41.66666,   0.00000, 0.00000, 0.00000);
	CreateObject(2395, 699.90002, 891.70001, -39.00000,   0.00000, 0.00000, 0.00000);
	CreateObject(2395, 696.16803, 891.70001, -41.66000,   0.00000, 0.00000, 0.00000);
	CreateObject(2395, 696.19000, 891.70001, -39.00000,   0.00000, 0.00000, 0.00000);
	CreateObject(2395, 693.90002, 891.70001, -41.66000,   0.00000, 0.00000, 0.00000);
	CreateObject(2395, 693.90002, 891.70001, -39.00000,   0.00000, 0.00000, 0.00000);
	CreateObject(2395, 696.65198, 891.85999, -41.65000,   0.00000, 0.00000, 179.99500);
	CreateObject(2395, 699.40002, 891.85999, -41.65000,   0.00000, 0.00000, 179.99500);
	CreateObject(2395, 696.65002, 891.85999, -39.05000,   0.00000, 0.00000, 179.99500);
	CreateObject(2395, 700.38000, 891.85602, -39.04000,   0.00000, 0.00000, 179.99500);
	CreateObject(2395, 694.00000, 898.20001, -36.40000,   90.00000, 180.00000, 180.00000);
	CreateObject(2395, 697.63000, 898.13000, -36.40000,   90.00000, 0.00000, 0.00000);
	CreateObject(2395, 693.90002, 895.59998, -36.40000,   90.00000, 0.00000, 0.00000);
	CreateObject(2395, 697.70001, 895.29999, -36.36000,   90.00000, 0.00000, 0.00000);
	CreateObject(2395, 696.29999, 894.50000, -36.40000,   90.00000, 0.00000, 0.00000);
	CreateObject(2395, 693.90002, 894.50000, -36.40000,   90.00000, 0.00000, 0.00000);
	CreateObject(2395, 696.09998, 895.79999, -36.40000,   90.00000, 0.00000, 0.00000);
	CreateObject(337, 694.36560, 891.90649, -37.47910,   0.00000, 0.00000, -76.14000);
	CreateObject(337, 694.86560, 891.90649, -37.47910,   0.00000, 0.00000, -76.14000);
	CreateObject(337, 695.44562, 891.90649, -37.47910,   0.00000, 0.00000, -76.14000);
	CreateObject(337, 696.00562, 891.90649, -37.47910,   0.00000, 0.00000, -76.14000);
	CreateObject(337, 696.60559, 891.90649, -37.47910,   0.00000, 0.00000, -76.14000);
	CreateObject(337, 697.18561, 891.90649, -37.47910,   0.00000, 0.00000, -76.14000);
	CreateObject(337, 697.78558, 891.90649, -37.47910,   0.00000, 0.00000, -76.14000);
	CreateObject(337, 698.38562, 891.90649, -37.47910,   0.00000, 0.00000, -76.14000);
	CreateObject(337, 694.18561, 891.88647, -38.91910,   0.00000, 0.00000, -76.14000);
	CreateObject(337, 694.05731, 891.88831, -37.49910,   0.00000, 0.00000, -76.14000);
	CreateObject(337, 694.64563, 891.88647, -38.91910,   0.00000, 0.00000, -76.14000);
	CreateObject(337, 695.18561, 891.88647, -38.91910,   0.00000, 0.00000, -76.14000);
	CreateObject(337, 695.78558, 891.88647, -38.91910,   0.00000, 0.00000, -76.14000);
	CreateObject(337, 696.36560, 891.88647, -38.91910,   0.00000, 0.00000, -76.14000);
	CreateObject(337, 696.94562, 891.88647, -38.91910,   0.00000, 0.00000, -76.14000);
	CreateObject(337, 697.50562, 891.88647, -38.91910,   0.00000, 0.00000, -76.14000);
	CreateObject(337, 698.02557, 891.88647, -38.91910,   0.00000, 0.00000, -76.14000);
	CreateObject(337, 698.60559, 891.88647, -38.91910,   0.00000, 0.00000, -76.14000);
	CreateObject(2370, 694.22388, 896.80743, -40.05110,   0.00000, 0.00000, -2.70000);
	CreateObject(2370, 695.80621, 896.75024, -40.05110,   0.00000, 0.00000, -2.70000);
	CreateObject(19120, 693.90887, 896.52417, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 694.18890, 896.50421, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 694.52887, 896.50421, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 693.90887, 896.52417, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 694.89191, 896.48608, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 695.35193, 896.46613, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 695.74933, 896.44629, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 696.14929, 896.44629, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 696.58929, 896.42627, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 696.58929, 896.90631, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 696.16931, 896.94629, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 696.58929, 896.42627, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 695.77148, 896.93048, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 695.37152, 896.93048, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 694.89148, 896.93048, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 694.55151, 896.93048, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 694.17151, 896.93048, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 693.89148, 896.93048, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 693.89148, 897.49048, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 694.17151, 897.49048, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 694.57147, 897.49048, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 694.95148, 897.49048, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 695.47150, 897.49048, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 695.85150, 897.49048, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 696.27148, 897.49048, -39.11040,   -11.00000, -88.00000, 0.00000);
	CreateObject(19120, 696.61151, 897.49048, -39.11040,   -11.00000, -88.00000, 0.00000);

	#undef CreateObject

	//  CASAS
	CreateObject( 14718, 220.48, 1277.57, 1081.13,   0.0, 0.00, 0.0);
	CreateObject( 1498,  222.73, 1272.61, 1081.13,   0.0, 0.00, 0.0);
	CreateObject( 14700, 326.40, 1459.42, 1084.94,   0.0, 0.00, 0.0);
	CreateObject( 1498,  325.57, 1455.30, 1083.42,   0.0, 0.00, 0.0);
	CreateObject( 14712, 272.79, 1244.54, 1084.83,   0.0, 0.00, 0.0);
	CreateObject( 1498,  275.01, 1236.99, 1083.29,   0.0, 0.00, 0.0);
	CreateObject( 14702, 265.00, 1199.27, 1083.55,   0.0, 0.00, 0.0);
	CreateObject( 14725, 269.04, 1195.98, 1082.11,   0.0, 0.00, 0.0);
	CreateObject( 14726, 269.03, 1196.05, 1082.11,   0.0, 0.00, 0.0);
	CreateObject( 14727, 269.09, 1196.01, 1082.11,   0.0, 0.00, 0.0);
	CreateObject( 14716, 269.08, 1196.00, 1082.11,   0.0, 0.00, 0.0);
	CreateObject( 14750, 27.60,  1329.24, 1089.88,   0.0, 0.00, 0.0);
	CreateObject( 1506,  25.04,  1319.87, 1083.36,   0.0, 0.00, 0.0);
	//Casa piso celeste SF
	CreateObject(15042, 2313.37, -1198.41, 1050.02,   0.0, 0.00, 0.00);
	CreateObject(1506, 2307.57, -1199.07, 1047.98,   0.0, 0.00, 0.00);
	CreateObject(1506, 2318.22, -1199.06, 1047.98,   0.0, 0.00, 0.00);
	//Casa Int 13
	CreateObject(14708, 236.63, 1136.16, 1081.76,   0.0, 0.00, 0.0);
	//Casa Int 15
	CreateObject(14706, 268.30, 1075.16, 1086.41,   0.0, 0.00, 0.0);
	//Casa Int 16
	CreateObject(14758, 139.52, 1395.56, 1084.73,   0.00, 0.00, 0.00);
	CreateObject(14757, 154.28, 1399.51, 1084.52,   0.00, 0.00, 0.00);
	CreateObject(1506, 138.75, 1395.49, 1082.85,   0.00, 0.00, 0.00);
	CreateObject(1506, 140.25, 1395.50, 1082.85,   0.00, 0.00, 0.00);
	//Casa Int 17
	CreateObject(14707, 238.41, 995.35, 1087.60,   0.00, 0.00, 0.00);
	CreateObject(1506, 251.53, 994.35, 1083.73,   0.00, 0.00, -90.66);
	CreateObject(1506, 251.54, 995.81, 1083.73,   0.00, 0.00, -90.66);

	// EDIFICIO INT-GROTTI
	CreateObject(9953,-936.59997559,1941.69995117,40.90000153,0.00000000,0.00000000,220.00000000); //object(ottos_autos_sfe) (1)
	CreateObject(9953,-963.00000000,1918.09997559,40.90000153,0.00000000,0.00000000,40.25000000); //object(ottos_autos_sfe) (2)

	// Piso Garage 2P
	CreateObject(14388,1260.09960938,-839.29980469,1093.50000000,0.00000000,0.00000000,0.00000000); //object(madddoggs02) (1)
	CreateObject(14388,1259.69995117,-839.40002441,1089.80004883,0.00000000,0.00000000,0.00000000); //object(madddoggs02) (2)

	// Piso Garage 1P
	CreateObject(18082,424.89999390,-97.30000305,1001.70001221,0.00000000,0.00000000,0.00000000); //object(cj_barber2) (1)
	CreateObject(18082,424.79998779,-94.00000000,1003.20001221,0.00000000,0.00000000,180.00000000); //object(cj_barber2) (2)

	// Piso Garage 1P (2)
	CreateObject(18082,424.89999390,-97.30000305,1001.70001221+10,0.00000000,0.00000000,0.00000000); //object(cj_barber2) (1)
	CreateObject(18082,424.79998779,-94.00000000,1003.20001221+10,0.00000000,0.00000000,180.00000000); //object(cj_barber2) (2)

	// ---====[ Configuración general ]====---- //

    SetGameModeText(MODE_SERVER);
	SendRconCommand("hostname "#NOMBRE_SERVER"");
    SendRconCommand("mapname Los Santos");
    SendRconCommand("weburl "#FORO_SERVER"");
    SendRconCommand("rcon_password "#RCON_SERVER"");
	AllowInteriorWeapons(1);
 	DisableInteriorEnterExits();
 	UsePlayerPedAnims();
    ManualVehicleEngineAndLights();
   	ActualizarHora();
   	EnableStuntBonusForAll(false);
    SetNameTagDrawDistance(20.0);

	// ---====[ Timers ]====---- //

	repeat BajaGasolina();
	repeat ActualizarVelocimetro();
 	repeat SubeExperiencia();
	repeat ChequearVida();
	repeat BajaSaldo();
	repeat NecesitaDroga();
	repeat Timer_Segundo();

	ClimaAleatorio();
	repeat ClimaAleatorio();

	SetTimer("ActivarArmasEnI",3000,false);

	// ---====[ 3D Labels ]====---- //
	CreateDynamic3DTextLabel("Usa "#CAMARILLO"/armamento "#CBLANCO"para retirar un arma o cargador "#CROJO"[Sólo lideres].",C_BLANCO,228.0966,-1488.1224,1011.767,6.0);
	CreateDynamic3DTextLabel("Depósito municipal\n\n"#CBLANCO"Si tiene su vehículo aquí, puede ingresar\nusando el comando "#CINFO"/entrar deposito."#CBLANCO"\nEl costo de ingreso es de "#CVERDE"$800",C_ROJO,1674.5366,-1699.9175,14.5416,12);
	CreateDynamic3DTextLabel("Usa "#CINFO"/salir deposito "#CBLANCO"para retirarte del estacionamiento.",C_BLANCO,2318.6609,2446.1277,3.2734,12);
	CreateDynamic3DTextLabel("Ascensor\n\nAcercate para utilizarlo",C_BLANCO,288.4164,1224.2498,1566.0165,4);
	CreateDynamic3DTextLabel("Ascensor",C_BLANCO,1524.4832,-1677.9523,6.2188+0.5,4);
	CreateDynamic3DTextLabel("Ascensor",C_BLANCO,1565.0422,-1685.4037,28.3956+0.5,4);
	CreateDynamic3DTextLabel("Utiliza "#CINFO"/ropero "#CBLANCO"para cambiarte el uniforme",C_ROJO,-1802.8511,-235.4642,1066.0093,8);//ropero LSPD
	CreateDynamic3DTextLabel("Utiliza "#CINFO"/ropero "#CBLANCO"para cambiarte el uniforme",C_BLANCO,1294.4070,-1781.8568,1565.9921+0.5,8);//ropero LSEM
	CreateDynamic3DTextLabel("Cárceles\n\nUsa "#CINFO"/arrestar",C_BLANCO,1589.1508,-1526.6434,1066.3394+0.5,8);//
	CreateDynamic3DTextLabel("Quirófano\n\nUtiliza "#CINFO"/curar",C_BLANCO,2025.6810,2869.0496,1104.7494,2);
	CreateDynamic3DTextLabel("Quirófano\n\nUtiliza "#CINFO"/curar",C_BLANCO,2022.4231,2857.4907,1104.7494,2);
	CreateDynamic3DTextLabel("Puedes usar el ropero, con "#CINFO"/ropero\n"#CBLANCO"Puedes ponerte en servicio con "#CINFO"/servicio\n"#CBLANCO"Líderes pueden hablar por "#CINFO"/gob",C_BLANCO,2018.3445,2863.1958,1104.7494+0.5,2);// LSMD
	CreateDynamic3DTextLabel("Para iniciar una transmisión\n"#CINFO"(/iniciar transmision/programa)",C_BLANCO,1268.6841,-1185.3862,1565.9968,8);
	CreateDynamic3DTextLabel("Puedes "#CINFO"/usar camaras "#CBLANCO"de seguridad.",C_BLANCO,287.5326,1195.3621,1562.4764,8);
	CreateDynamic3DTextLabel("Hitman\n\n"#CBLANCO"Usa "#CINFO"/contrato "#CBLANCO"para insectos venenosos.", C_ROJO, 320.1897,-1485.6438,24.7143, 5);
	CreateDynamic3DTextLabel("Depósito de vehículos\n\n"#CBLANCO"Use "#CINFO"/entrar deposito "#CBLANCO"para ingresar\nUse "#CINFO"/embargar "#CBLANCO"para embargar un vehículo.",C_ROJO,2064.5808,-2075.9402,13.546,12);
	CreateDynamic3DTextLabel("Usa "#CINFO"/salir deposito "#CBLANCO"para retirarte.",C_BLANCO,1958.5638,-867.0821,1292.4653,12);
	CreateDynamic3DTextLabel("Para pagar multas, usa "#CINFO"/pagar multas",C_BLANCO,297.1155,178.8438,1007.171,3);
	CreateDynamic3DTextLabel("Puedes pagar la embargación de tu vehículo, usa "#CINFO"/pagar embargacion",C_BLANCO,299.0748,178.8610,1007.1719,3);
	CreateDynamic3DTextLabel(""#CROJO"Peaje: "#CAZULRARO"Los Santos & San Fierro\n\n"#CBLANCO"Usa "#CINFO"/peaje "#CBLANCO"para abrir la barrera "#CVERDE"(Tarifa: $15)",C_BLANCO, 57.10400, -1532.26917, 5.62030, 15.0);
	CreateDynamic3DTextLabel(""#CROJO"Peaje: "#CAZULRARO"Los Santos & Las Venturas\n\n"#CBLANCO"Usa "#CINFO"/peaje "#CBLANCO"para abrir la barrera "#CVERDE"(Tarifa: $15)",C_BLANCO, -1751.46399, -712.29333, 29.85430, 15.0);

	//Labels tiendas de ropa
	CreateDynamic3DTextLabel("Ropero\n\nUsa "#CINFO"/comprar ropa "#CBLANCO"para comprar una prenda.\nUsa "#CINFO"/comprar accesorios "#CBLANCO"para comprar lentes, sombreros, etcétera.",C_BLANCO,181.5338,-86.7284,1002.0234,5);//Zip
	CreateDynamic3DTextLabel("Ropero\n\nUsa "#CINFO"/comprar ropa "#CBLANCO"para comprar una prenda.\nUsa "#CINFO"/comprar accesorios "#CBLANCO"para comprar lentes, sombreros, etcétera.",C_BLANCO,208.8329,-3.5260,1001.2178,5);//Victim
	CreateDynamic3DTextLabel("Ropero\n\nUsa "#CINFO"/comprar ropa "#CBLANCO"para comprar una prenda.\nUsa "#CINFO"/comprar accesorios "#CBLANCO"para comprar lentes, sombreros, etcétera.",C_BLANCO,214.6280,-40.2542,1002.0234,5);//SubUrban
	CreateDynamic3DTextLabel("Ropero\n\nUsa "#CINFO"/comprar ropa "#CBLANCO"para comprar una prenda.\nUsa "#CINFO"/comprar accesorios "#CBLANCO"para comprar lentes, sombreros, etcétera.",C_BLANCO,202.0402,-131.0054,1003.5078,5);//ProLaps
	CreateDynamic3DTextLabel("Ropero\n\nUsa "#CINFO"/comprar ropa "#CBLANCO"para comprar una prenda.\nUsa "#CINFO"/comprar accesorios "#CBLANCO"para comprar lentes, sombreros, etcétera.",C_BLANCO,215.9159,-154.7793,1000.5234,5);//Didier
	CreateDynamic3DTextLabel("Ropero\n\nUsa "#CINFO"/comprar ropa "#CBLANCO"para comprar una prenda.\nUsa "#CINFO"/comprar accesorios "#CBLANCO"para comprar lentes, sombreros, etcétera.",C_BLANCO,217.5361,-97.7467,1005.2578,5);//Binco

	//Trabajos
	CreateDynamic3DTextLabel("Recepción de trabajo (Camionero)\nPuedes firmar un contrato para hacerte camionero\n\n"#CINFO"(/firmar contrato)",C_BLANCO,2430.00000000,-2115.69995117,13.80000019,10);
	CreateDynamic3DTextLabel("Recepción de trabajo (Cosechador)\nPuedes firmar un contrato para hacerte cosechador\n\n"#CINFO"(/firmar contrato)",C_BLANCO,-382.9777,-1426.2620,26.3193,10);
	CreateDynamic3DTextLabel("Recepción de trabajo (Repartidor de diarios)\nPuedes firmar un contrato para hacerte repartidor de diarios\n\n"#CINFO"(/firmar contrato)",C_BLANCO,2028.3854,-1274.0673,20.9812,10);
	CreateDynamic3DTextLabel("Recepción de trabajo (Basurero)\nPuedes firmar un contrato para hacerte basurero\n\n"#CINFO"(/firmar contrato)",C_BLANCO,1279.0297,-1248.3020,14.010,10);
	CreateDynamic3DTextLabel("Recepción de trabajo (Taxista)\nPuedes firmar un contrato para hacerte taxista\n\n"#CINFO"(/firmar contrato)",C_BLANCO,2164.3105,-1732.3943,13.5438,10.0);
	CreateDynamic3DTextLabel("Trabajo Ilegal(Ladrón)\nPuedes hacerte ladron aquí\n\n"#CINFO"(/firmar contrato)",C_BLANCO,992.4819,-1255.5576,15.0313,10);
	CreateDynamic3DTextLabel("Recepción de trabajo (Repartidor de pizza)\nPuedes firmar un contrato para hacerte repartidor de pizza\n\n"#CINFO"(/firmar contrato)",C_BLANCO,2094.7319,-1830.0093,13.5737,10);
	CreateDynamic3DTextLabel("Recepción de trabajo (Minero)\nPuedes firmar un contrato para hacerte minero (Necesita nivel 5)\n\n"#CINFO"(/firmar contrato)",C_BLANCO,-769.5964,1304.3396,998.209,10);

	CreateDynamic3DTextLabel("Puedes sacar tarjeta de crédito\n\nUsa "#CINFO"/retirar tarjeta",C_BLANCO,-851.5117,1633.1498,1004.750,8);
	CreateDynamic3DTextLabel("Puedes retirar una licencia\n\n"#CINFO"(/retirar licencia)",C_BLANCO,-2029.9017,-119.1597,1035.1719,8);
	CreateDynamic3DTextLabel("Barra\n\nUse "#CINFO"/comprar bebida",C_BLANCO,499.7788,-18.8157,1000.67,8);
	CreateDynamic3DTextLabel("24/7\n\nUse "#CINFO"/comprar productos "#CBLANCO"para adquirir un producto.",C_BLANCO,-29.5425,-184.9853,1003.546,8);
	CreateDynamic3DTextLabel("Shop de Estación de servicio\n\nUse "#CINFO"/comprar productos "#CBLANCO"para adquirir un producto.",C_BLANCO,-22.2099,-138.2904,1003.5469,8);
	CreateDynamic3DTextLabel("Barra\n\nUse "#CINFO"/comprar bebida",C_BLANCO,499.6957,-75.4998,998.7578,8);
	CreateDynamic3DTextLabel("Hipermercado\n"#CINFO"(/comprar tecnologia/muebles)",C_BLANCO,-1705.09997559,1887.00000000,1068.80004883,8);
	CreateDynamic3DTextLabel("Mercado negro\n"#CINFO"(/comprar elementos)",C_BLANCO,1691.1962,-1949.8903,8.2500,8);
	CreateDynamic3DTextLabel("Puedes publicar un anuncio "#CAZUL2"($3 el caractér)\n\n"#CINFO"/anuncio",C_BLANCO,-1976.2544,602.3967,1055.5859,6);
	CreateDynamic3DTextLabel("Farmacia\n\nUsa "#CINFO"/comprar medicamentos",C_BLANCO,176.2873,-73.2911,963.2859,8);
	CreateDynamic3DTextLabel(MSG_TECLAENTRAR,C_BLANCO,-1911.7047,1.2205,(1061.1436)+1, 100);
	CreateDynamic3DTextLabel("Ropero"#MSG_TECLAENTRAR"",C_BLANCO,368.29998779,194.00000000,1008.70001221,5);//ropero (GOB)
	CreateDynamic3DTextLabel("Ropero\n"#CINFO"(/ropero)",C_BLANCO,348.89999390,164.50000000,1014.20001221,5);// (/ropero GOB)
	CreateDynamic3DTextLabel("Armamento\n"#CINFO"(/armamento)",C_BLANCO,349.70001221,160.80000305,1014.20001221,5);// (/armamento GOB)
	CreateDynamic3DTextLabel("Micrófono\n"#CINFO"(/gob)",C_BLANCO,358.7458,203.6272,1008.382,5);
	CreateDynamic3DTextLabel("Puedes ponerte en "#CINFO"/servicio "#CBLANCO"o hablar por "#CINFO"/gob",C_BLANCO,-1801.5547,-235.2897,1066.009,6);//lspd
	CreateDynamic3DTextLabel("Puedes ponerte en "#CINFO"/servicio "#CBLANCO"o hablar por "#CINFO"/gob",C_BLANCO,2744.3435,-2453.8425,13.8623,6);//lsem
	CreateDynamic3DTextLabel("Puedes ponerte en "#CINFO"/servicio",C_BLANCO,1652.2441,-2166.0044,13.6369,6);//mecanicos
	CreateDynamic3DTextLabel("Taller mecánico\n\n"#CBLANCO"Aquí los mecánicos podrán tunear, pintar, o reparar un vehículo",C_ROJO,1597.2704,-2154.1785,13.5547,5.0);
	CreateDynamic3DTextLabel("Pizzeria\n\n"#CINFO"(/comprar comida)",C_BLANCO, 373.9077,-119.6210,1001.4922, 10.0);
	CreateDynamic3DTextLabel("Burger Shot\n\n"#CINFO"(/comprar comida)",C_BLANCO,375.7025,-68.0881,1001.5151, 10.0);
	CreateDynamic3DTextLabel("Polleria\n\n"#CINFO"(/comprar comida)",C_BLANCO, 369.5210,-6.5896,1001.8589, 10.0);
	CreateDynamic3DTextLabel("Campo de marihuana", C_BLANCO, -1062.8748,-1614.1770,76.3672, 9);
	CreateDynamic3DTextLabel("Puedes "#CINFO"/recibir subsidio "#CBLANCO"por parte del gobierno.", C_BLANCO, -851.2987,1624.7511,1004.750, 5.0);
	CreateDynamic3DTextLabel("Secretaria\n\n"#CBLANCO"Utiliza "#CINFO"/dialogar "#CBLANCO"para conversar con Claudia", C_VERDE, 295.3074,1244.4556,1566.0165, 3);
	CreateDynamic3DTextLabel("Puedes hablar con "#CVERDE"Truth"#CBLANCO", el dueño de esta granja, usa "#CINFO"/dialogar", C_BLANCO, -1109.3120,-1638.5265,76.36, 4.0);
	CreateDynamic3DTextLabel("Precios de piezas para vehículos", C_BLANCO,1622.5079,-2156.9409,13.5547, 5);
	CreateDynamic3DTextLabel("Usa "#CINFO"/comprar frecuencia "#CBLANCO"para adquirir una frecuencia. "#CVERDE"(Costo: $6.000)\n"#CBLANCO"Usa "#CINFO"/pagar frecuencia "#CBLANCO"para renovar una frecuencia. "#CVERDE"(Costo: $400)", C_BLANCO, -1976.2792,609.8074,1055.5859, 3.5);
	CreateDynamic3DTextLabel(""#CVERDE"Herramientas de minería\n\n"#CBLANCO"Usa "#CINFO"/recoger pala "#CBLANCO"para obtener la pala.\nUsa "#CINFO"/dejar pala "#CBLANCO"para dejarla.", C_BLANCO, -39.6190,-1781.3674,743.9971, 3.5);
	CreateDynamic3DTextLabel(""#CVERDE"Comedor\n\n"#CBLANCO"Use "#CINFO"/comedor "#CBLANCO"para pedir comida.", C_BLANCO, 1587.9299,-1549.8568,1062.3993, 3.5);

	Loop(i,11,0) CreateDynamic3DTextLabel("Cajero automático\n\n"#CBLANCO"Usa "#CINFO"/cajero "#CBLANCO"para realizar operaciones bancarias.",C_VERDE,PosCajero[i][Posx],PosCajero[i][Posy],PosCajero[i][Posz]+1.5,8.0);

	Loop(i,sizeof PosMapas, 0)
	{
	    CreateDynamic3DTextLabel("Mapa de turismo\n\n"#CBLANCO"Usa "#CINFO"/mapa "#CBLANCO"para usarlo.",C_VERDE,PosMapas[i][0],PosMapas[i][1],PosMapas[i][2],12);
		CreateDynamicObject(1444,PosMapas[i][0],PosMapas[i][1],PosMapas[i][2]-0.2,0,0,0);
	}

	Loop(i, sizeof PosCosechadorMari-1, 0)
	{
		//CreateDynamicObject(3409, PosCosechadorMari[i][0], PosCosechadorMari[i][1], PosCosechadorMari[i][2]-2.3, 0, 0, 0);
	}

	Loop(i, sizeof Camillas, 0)
	{
		CrearCamilla(Camillas[i][0], Camillas[i][1], Camillas[i][2], Camillas[i][3]);
	}

	// ---====[ Pickups ]====---- //

	CreateDynamicPickup(ID_PICKUPARMAMENTO, 1, 228.0966,-1488.1224,1011.767);
	CreateDynamicPickup(ID_PICKUPINFO, 1, 297.1155,178.8438,1007.1719);//pagar multas
	CreateDynamicPickup(ID_PICKUPINFO, 1, 299.0748,178.8610,1007.1719);//pagar embargaciones
	CreateDynamicPickup(ID_PICKUPROPERO, 1, 2018.3445,2863.1958,1104.7494); //Ropero LSMD
	CreateDynamicPickup(ID_PICKUPINT,1,1524.4832,-1677.9523,6.2188,-1,-1,-1,30);
	CreateDynamicPickup(ID_PICKUPINT,1,1565.0422,-1685.4037,28.3956,-1,-1,-1,30);

	CreateDynamicPickup(ID_PICKUPINT,1,238.80000305,182.5,1003.20001221,-1,-1,-1,30);//Ejercito equipo
	CreateDynamicPickup(ID_PICKUPINT,1,-851.5117,1633.1498,1004.7500);//(/retirar tarjeta)
	CreateDynamicPickup(ID_PICKUPROPERO,1,-1802.8511,-235.4642,1066.0093,-1,-1,-1,30);//ropero LSPD
	CreateDynamicPickup(ID_PICKUPROPERO,1,1294.4070,-1781.8568,1565.9921,-1,-1,-1,30);//ropero LSEM
	CreateDynamicPickup(ID_PICKUPARMAMENTO,1,294.00000000,-38.09999847,1001.70001221,-1,-1,-1,30);//Armamento Militar
	CreateDynamicPickup(19418 ,1,1589.1508,-1526.6434,1066.3394,-1,-1,-1,40);//carceles (/arrestar)
	CreateDynamicPickup(ID_PICKUPINT,1,-1911.7047,1.2205,1061.1436,-1,-1,-1,15);//Aeropuerto - adentro
	CreateDynamicPickup(ID_PICKUPINFO,1,499.7788,-18.8157,1000.67,-1,-1,-1,25);//alhambra (bebidas)
	CreateDynamicPickup(ID_PICKUPINFO,1,-29.5425,-184.9853,1003.546,-1,-1,-1);//24/7 /comprar
	CreateDynamicPickup(ID_PICKUPINFO,1,-22.2099,-138.2904,1003.5469,-1,-1,-1);//estación /comprar
	CreateDynamicPickup(ID_PICKUPINFO,1,499.6957,-75.4998,998.7578,-1,-1,-1);//bar /comprar
	CreateDynamicPickup(ID_PICKUPINFO,1,1587.9299,-1549.8568,1062.3993);
	CreateDynamicPickup(ID_PICKUPINFO,1,176.2873,-73.2911,963.2859);// /comprar medicamentos

	CreateDynamicPickup(ID_PICKUPARMAMENTO,1,313.8407,-133.2842,999.601,-1,-1,-1,30);//ammu nation
	CreateDynamicPickup(ID_PICKUPTRABAJO,1,2028.3854,-1274.0673,20.9812,-1,-1,-1,50);//trabajo repartidor de diarios
	CreateDynamicPickup(ID_PICKUPTRABAJO,1,1279.0297,-1248.3020,14.010,-1,-1,-1,60);//Trabajo (basurero)
	CreateDynamicPickup(ID_PICKUPTRABAJO,1,992.4819,-1255.5576,15.0313,-1,-1,-1,60);//Trabajo (ladron)
	CreateDynamicPickup(ID_PICKUPTRABAJO,1,2094.7319,-1830.0093,13.5737,-1,-1,-1,60);//Trabajo (repartidor de pizza)
	CreateDynamicPickup(ID_PICKUPTRABAJO,1,2164.3105,-1732.3943,13.5438,-1,-1,-1,60);//Trabajo (Taxista)
	CreateDynamicPickup(ID_PICKUPTRABAJO,1,-769.5964,1304.3396,998.209);//Trabajo (Minero)
	CreateDynamicPickup(ID_PICKUPHITMAN, 1, 320.1897,-1485.6438,24.7143); // HITMAN

	CreateDynamicPickup(ID_PICKUPARMAMENTO,1,1691.1962,-1949.8903,8.2500,-1,-1,-1,60);// /comprar (Mercado negro)
	CreateDynamicPickup(ID_PICKUPINT,1,-1705.09997559,1887.00000000,1068.80004883,-1,-1,-1,30);// (/comprar tecnologia)
	CreateDynamicPickup(ID_PICKUPINT,1,368.29998779,194.00000000,1008.70001221,-1,-1,-1,30);//ropero (GOB)
	CreateDynamicPickup(ID_PICKUPROPERO,1,348.89999390,164.50000000,1014.20001221,-1,-1,-1,30);// (/ropero GOB)
	CreateDynamicPickup(ID_PICKUPARMAMENTO,1,349.70001221,160.80000305,1014.20001221,-1,-1,-1,30);// (/armamento GOB)
	CreateDynamicPickup(ID_PICKUPINT,1,358.7458,203.6272,1008.382,-1,-1,-1,40);// (/gob)
	CreateDynamicPickup(ID_PICKUPINFO,1,-1801.5547,-235.2897,1066.0090);// servicio LSPD
	CreateDynamicPickup(ID_PICKUPINFO,1,256.8769,288.6640,984.0469);// servicio LSEM
	CreateDynamicPickup(ID_PICKUPINFO,1,1652.2441,-2166.0044,13.6369);// servicio LSEM
	CreateDynamicPickup(ID_PICKUPINT,1,-1976.2544,602.3967,1055.5859,-1,-1,-1,30);// /anuncio LSTV
	CreateDynamicPickup(ID_PICKUPINFO,1,1597.2704,-2154.1785,13.5547,-1,-1,-1,80);//taller (/tunear)
	CreateDynamicPickup(ID_PICKUPINFO,1,1622.5079,-2156.9409,13.5547); //Pizarron Mecas.
	CreateDynamicPickup(ID_PICKUPINT,1,2064.5808,-2075.9402,13.546);// depósito policial (ext)
	CreateDynamicPickup(ID_PICKUPINT,1,1958.5638,-867.0821,1292.4653);// depósito policial (int)
	CreateDynamicPickup(ID_PICKUPINFO, 1, -1976.2792,609.8074,1055.5859); // comprar frecuencia
	CreateDynamicPickup(ID_PICKUPINFO, 1, -39.6190,-1781.3674,743.9971); // recoger pala dejar
	CreateDynamicPickup(ID_PICKUPCAJAFUERTE, 1, -851.2987,1624.7511,1004.7500); // Subsidio

	//  Ascensor Hitman
	CreateDynamicPickup(ID_PICKUPINT, 1, 350.2999878,178.0000000,1014.2000122);
	CreateDynamicPickup(ID_PICKUPINT, 1, 333.7999878,165.8000031,1014.2000122);

	CreateDynamicPickup(ID_PICKUPARMAMENTO, 1,331.6000061,175.1999969,1014.2000122); // /armamento Hitman
	CreateDynamicPickup(ID_PICKUPROPERO,    1,329.2000122,177.5000000,1014.2000122);// /incognito Hitman

	//Pickups tiendas de ropa
	CreateDynamicPickup(ID_PICKUPROPERO,1,181.5338,-86.7284,1002.0234,-1,-1,-1,15);//Zip
	CreateDynamicPickup(ID_PICKUPROPERO,1,208.8329,-3.5260,1001.2178,-1,-1,-1,15);//Victim
	CreateDynamicPickup(ID_PICKUPROPERO,1,214.6280,-40.2542,1002.0234,-1,-1,-1,15);//SubUrban
	CreateDynamicPickup(ID_PICKUPROPERO,1,202.0402,-131.0054,1003.5078,-1,-1,-1,15);//ProLaps
	CreateDynamicPickup(ID_PICKUPROPERO,1,215.9159,-154.7793,1000.5234,-1,-1,-1,15);//Didier
	CreateDynamicPickup(ID_PICKUPROPERO,1,217.5361,-97.7467,1005.2578,-1,-1,-1,15);//Binco

	PElevadorLSPD = CreateDynamicPickup(ID_PICKUPINT,1,288.4164,1224.2498,1566.0165);

	//PEstadio = CreateDynamicPickup(19300,2,2695.5884,-1704.5596,11.8438,-1,-1,-1,30);

	//Licencias
	CreateDynamicPickup(ID_PICKUPINT,1,-2029.9017,-119.1597,1035.1719,-1,-1,-1,15);//Licencias
	CreateDynamicPickup(ID_PICKUPINFO, 1, 374.4480,185.7052,1014.18);// Computadora hitman

	// ---====[ Vehículos ]====---- //

	//      					AUTOS DE RENTA
	veh_create(426,1391.29980469,-2347.09960938,13.39999962,0.00000000,1,1, 60 * 15); //Premier
	veh_create(426,1407.50000000,-2346.89990234,13.39999962,0.00000000,1,1, 60 * 15); //Premier
	veh_create(426,1385.40002441,-2347.39990234,13.39999962,0.00000000,1,1, 60 * 15); //Premier
	veh_create(426,1413.30004883,-2346.69995117,13.39999962,0.00000000,1,1, 60 * 15); //Premier
	veh_create(445,1386.80004883,-2314.60009766,13.50000000,180.00000000,1,1, 60 * 15); //Admiral
	veh_create(445,1391.80004883,-2314.30004883,13.50000000,180.00000000,1,1, 60 * 15); //Admiral
	veh_create(445,1279.09997559,-1347.09997559,13.19999981,90.00000000,1,1, 60 * 15); //Admiral - hospital
	veh_create(445,1414.30004883,-2314.89990234,13.50000000,180.00000000,1,1, 60 * 15); //Admiral
	veh_create(547,1413.19995117,-2261.10009766,13.39999962,0.00000000,1,1, 60 * 15); //Primo
	veh_create(547,1280.30004883,-1368.00000000,13.19999981,90.00000000,1,1, 60 * 15); //Primo - hospital
	veh_create(547,1397.00000000,-2260.69921875,13.39999962,0.00000000,1,1, 60 * 15); //Primo
	veh_create(547,1279.00000000,-1311.50000000,13.19999981,90.00000000,1,1, 60 * 15); //Primo - hospital
	veh_create(585,1391.50000000,-2225.10009766,13.19999981,180.00000000,1,1, 60 * 15); //Emperor
	veh_create(585,1279.00000000,-1318.50000000,13.19999981,90.00000000,1,1, 60 * 15); //Emperor - hospital
	veh_create(585,1407.69995117,-2224.50000000,13.19999981,180.00000000,1,1, 60 * 15); //Emperor
	veh_create(585,1413.50000000,-2224.50000000,13.19999981,180.00000000,1,1, 60 * 15); //Emperor
	veh_create(585,1402.30004883,-2224.89990234,13.19999981,180.00000000,1,1, 60 * 15); //Emperor
	veh_create(585,1279.09997559,-1304.80004883,13.19999981,90.00000000,1,1, 60 * 15); //Emperor - hospital
	veh_create(547,1407.50000000,-2261.39990234,13.39999962,0.00000000,1,1, 60 * 15); //Primo
	veh_create(547,1391.00000000,-2261.10009766,13.39999962,0.00000000,1,1, 60 * 15); //Primo
	veh_create(445,1397.69995117,-2314.69995117,13.50000000,180.00000000,1,1, 60 * 15); //Admiral
	veh_create(445,1279.00000000,-1325.80004883,13.19999981,90,1,1, 60 * 15); //Admiral - hospital
	veh_create(426,1396.50000000,-2347.19995117,13.39999962,0.00000000,1,1, 60 * 15); //Premier
	veh_create(426,1402.00000000,-2347.30004883,13.39999962,0.00000000,1,1, 60 * 15); //Premier

	// -===========================-
	#define CreateFactionVehicle(%0|%1) veh_setFaction(veh_create(%1, .type = VEH_TYPE_FACVEH, .bools = OPTION_CLOSE_ON_SPAWN),%0)
	#define CreateJobVehicle(%0|%1)     veh_setJob(veh_create(%1, .type = VEH_TYPE_JOBVEH),%0)
	// -===========================-

	//                  			AUTOS LSPD                                  //
	CreateFactionVehicle(IDLSPD|596,1559.1567,-1711.0026,5.6201,359.4141,0,1); // LSPD CAR
	CreateFactionVehicle(IDLSPD|596,1570.1930,-1710.3677,5.6124,359.5776,0,1); // LSPD CAR
	CreateFactionVehicle(IDLSPD|596,1574.5313,-1710.3890,5.6108,0.0626,0,1); // LSPD CAR
	CreateFactionVehicle(IDLSPD|596,1578.5676,-1710.4360,5.6107,357.9809,0,1); // LSPD car
	CreateFactionVehicle(IDLSPD|523,1562.6703,-1711.0708,5.4552,331.7386,0,1); // MOTO LSPD
	CreateFactionVehicle(IDLSPD|523,1566.1294,-1711.7048,5.4596,0.5866,0,1); // MOTO LSPD
	CreateFactionVehicle(IDLSPD|497,1568.6851,-1646.2839,28.5757,177.1500,0,1); // Heli l
	CreateFactionVehicle(IDLSPD|497,1567.1556,-1701.8015,28.5715,181.4655,0,1); // Heli l
	CreateFactionVehicle(IDLSPD|601,1586.2190,-1671.7070,5.6524,270.4478,0,1); // S.W.A.T
	CreateFactionVehicle(IDLSPD|597,1601.9562,-1704.2455,5.7634,89.4259,0,0); // FBI Rancher
	CreateFactionVehicle(IDLSPD|597,1601.9718,-1700.0463,5.7642,90.0285,0,0); // FBI Rancher
	CreateFactionVehicle(IDLSPD|599,1601.8977,-1695.9855,6.0830,88.6540,0,1); // Ranger
	CreateFactionVehicle(IDLSPD|599,1601.7292,-1691.9491,6.0812,89.4121,0,1); // Ranger
	CreateFactionVehicle(IDLSPD|427,1585.2740,-1667.7440,6.0775,268.2414,0,1); // Enforcer
	CreateFactionVehicle(IDLSPD|523,1585.1995,-1679.0804,5.4635,293.9985,0,1); // Moto LSPD
	CreateFactionVehicle(IDLSPD|523,1584.9594,-1675.2955,5.4876,271.1712,0,1); // Moto LSPD
	CreateFactionVehicle(IDLSPD|427,2019.3818,-2083.1465,13.6785,1.0299, 0, 0);
	CreateFactionVehicle(IDLSPD|427,2028.3521,-2083.5911,13.6788,356.8264, 0, 0);
	CreateFactionVehicle(IDLSPD|525,2037.0944,-2049.4570,13.4244,176.3462, 0, 0);
	CreateFactionVehicle(IDLSPD|525,2041.3755,-2049.6174,13.4208,177.7700, 0, 0);

	//                          AUTOS EJERCITO / FUERZA AEREA
	CreateFactionVehicle(IDLSEM|425,2725.0386, -3032.8125, 13.5369, 0.0000, 16, 16);
	CreateFactionVehicle(IDLSEM|520,2726.2607, -2930.8716, 12.8001, 88.2000, 16, 16);
	CreateFactionVehicle(IDLSEM|548,2726.2053, -2977.4229, 13.7618, 0.0000, 16, 16);
	CreateFactionVehicle(IDLSEM|593,2694.6936, -2929.3328, 12.8138, 89.1000, 16, 16);
	CreateFactionVehicle(IDLSEM|432,2785.9373, -2456.3389, 13.7395, 89.4000, 16, 16);
	CreateFactionVehicle(IDLSEM|433,2794.6836, -2418.0435, 13.9299, 88.0200, 16, 16);
	CreateFactionVehicle(IDLSEM|433,2778.9199, -2417.9048, 13.9299, 88.0200, 16, 16);
	CreateFactionVehicle(IDLSEM|470,2737.6177, -2464.3433, 13.4407, 0.0000, 16, 16);
	CreateFactionVehicle(IDLSEM|470,2737.8174, -2474.1865, 13.4407, 0.0000, 16, 16);
	CreateFactionVehicle(IDLSEM|470,2743.5637, -2474.0300, 13.4407, 0.0000, 16, 16);
	CreateFactionVehicle(IDLSEM|470,2743.6128, -2464.1858, 13.4407, 0.0000, 16, 16);
	CreateFactionVehicle(IDLSEM|471,2766.8970, -2510.9175, 13.1683, 0.0000, 16, 16);
	CreateFactionVehicle(IDLSEM|471,2767.0129, -2506.7837, 13.1683, 0.0000, 16, 16);
	CreateFactionVehicle(IDLSEM|468,2774.1008, -2507.9619, 13.1868, 0.0000, 16, 16);
	CreateFactionVehicle(IDLSEM|468,2772.3293, -2507.4028, 13.1868, 0.0000, 16, 16);
	CreateFactionVehicle(IDLSEM|468,2773.0981, -2510.5396, 13.1868, 0.0000, 16, 16);
	CreateFactionVehicle(IDLSEM|468,2775.6406, -2511.2720, 13.1868, 0.0000, 16, 16);
	CreateFactionVehicle(IDLSEM|471,2770.8357, -2511.3000, 13.1683, 0.0000, 16, 16);
	CreateFactionVehicle(IDLSEM|471,2770.0325, -2506.8486, 13.1683, 0.0000, 16, 16);
	CreateFactionVehicle(IDLSEM|425,2768.8848, -2978.3770, 13.5369, 0.0000, 16, 16);
	CreateFactionVehicle(IDLSEM|447,2699.6912, -2303.1980, 1.7381, 0.0000, 16, 16);
	CreateFactionVehicle(IDLSEM|548,2770.7744, -3030.0654, 13.7618, 0.0000, 16, 16);
	CreateFactionVehicle(IDLSEM|520,2726.5046, -2915.5068, 12.8001, 88.2000, 16, 16);
	CreateFactionVehicle(IDLSEM|447,2712.6287, -2303.5476, 1.7381, 0.0000, 16, 16);
	CreateFactionVehicle(IDLSEM|430,2726.2612, -2306.0852, 3.2918, 0.0000, 16, 16);
	CreateFactionVehicle(IDLSEM|430,2737.0581, -2306.0859, 3.2918, 0.0000, 16, 16);
	CreateFactionVehicle(IDLSEM|593, 2694.5688, -2915.0339, 12.8138, 89.1000, 16, 16);
	CreateFactionVehicle(IDLSEM|430, 2767.7959, -2856.4841, 0.6651, 0.0000, 16, 16);

	//                          AUTOS LSMD
	CreateFactionVehicle(IDLSMD|563,1163.90002441,-1317.59997559,32.40000153,270.00000000,155,1); //Raindance
	CreateFactionVehicle(IDLSMD|497,1156.50000000,-1297.40002441,32.09999847,90.00000000,155,1); //Police Maverick
	CreateFactionVehicle(IDLSMD|416,1121.50000000,-1329.19995117,13.50000000,0.00000000,155,1); //Ambulance
	CreateFactionVehicle(IDLSMD|416,1126.19995117,-1329.09997559,13.50000000,0.00000000,155,1); //Ambulance
	CreateFactionVehicle(IDLSMD|596,1113.59997559,-1328.59997559,13.10000038,0.00000000,155,1); //Police Car (LSPD)
	CreateFactionVehicle(IDLSMD|596,1109.30004883,-1328.50000000,13.10000038,0.00000000,155,1); //Police Car (LSPD)
	CreateFactionVehicle(IDLSMD|461,1116.59997559,-1325.30004883,13.50000000,0.00000000,155,1); //PCJ-600
	CreateFactionVehicle(IDLSMD|461,1118.09997559,-1329.59997559,13.50000000,0.00000000,155,1); //PCJ-600
	CreateFactionVehicle(IDLSMD|596,1100.09997559,-1328.90002441,13.10000038,0.00000000,155,1); //Police Car (LSPD)
	CreateFactionVehicle(IDLSMD|596,1095.90002441,-1329.09997559,13.10000038,0.00000000,155,1); //Police Car (LSPD)
	CreateFactionVehicle(IDLSMD|471,1103.59997559,-1325.40002441,13.39999962,0.00000000,155,1); //Quad
	CreateFactionVehicle(IDLSMD|471,1105.09997559,-1330.09997559,13.39999962,0.00000000,155,1); //Quad
	CreateFactionVehicle(IDLSMD|416,1135.59997559,-1340.30004883,13.50000000,0.00000000,155,1); //Ambulance
	CreateFactionVehicle(IDLSMD|416,1143.50000000,-1339.59997559,13.30000019,0.00000000,155,1); //Ambulance
	CreateFactionVehicle(IDLSMD|416,1139.30004883,-1338.90002441,13.50000000,0.00000000,155,1); //Ambulance

	//                      CAMIONES (CAMIONEROS)
	CreateJobVehicle(ID_Camionero|414,2519.10009766,-2115.30004883,13.69999981,0.00000000,-1,-1, 60*5); //Mule
	CreateJobVehicle(ID_Camionero|414,2511.30004883,-2115.30004883,13.69999981,0.00000000,-1,-1, 60*5); //Mule
	CreateJobVehicle(ID_Camionero|414,2502.60009766,-2115.19995117,13.69999981,0.00000000,-1,-1, 60*5); //Mule
	CreateJobVehicle(ID_Camionero|414,2492.60009766,-2114.60009766,13.69999981,0.00000000,-1,-1, 60*5); //Mule
	CreateJobVehicle(ID_Camionero|414,2481.50000000,-2114.30004883,13.69999981,0.00000000,-1,-1, 60*5); //Mule
	CreateJobVehicle(ID_Camionero|414,2468.80004883,-2114.00000000,13.69999981,0.00000000,-1,-1, 60*5); //Mule
	CreateJobVehicle(ID_Camionero|414,2457.39990234,-2114.19995117,13.69999981,0.00000000,-1,-1, 60*5); //Mule
	CreateJobVehicle(ID_Camionero|414,2446.00000000,-2114.50000000,13.69999981,0.00000000,-1,-1, 60*5); //Mule
	CreateJobVehicle(ID_Camionero|440,2536.39990234,-2082.10009766,13.80000019,90.00000000,-1,-1, 60*5); //Rumpo
	CreateJobVehicle(ID_Camionero|440,2537.30004883,-2086.50000000,13.80000019,90.00000000,-1,-1, 60*5); //Rumpo
	CreateJobVehicle(ID_Camionero|440,2537.10009766,-2093.19995117,13.80000019,90.00000000,-1,-1, 60*5); //Rumpo
	CreateJobVehicle(ID_Camionero|459,2537.89990234,-2098.89990234,13.69999981,90.00000000,-1,-1, 60*5); //Berkley's RC Van
	CreateJobVehicle(ID_Camionero|459,2537.60009766,-2104.39990234,13.69999981,90.00000000,-1,-1, 60*5); //Berkley's RC Van
	CreateJobVehicle(ID_Camionero|459,2537.39990234,-2109.69995117,13.69999981,90.00000000,-1,-1, 60*5); //Berkley's RC Van

	//                      COSECHADORAS                    //
	CreateJobVehicle(ID_Cosechador|532,-375.9665, -1531.9557, 23.6264, -85.6800,6,6,60*5); // Cosechadora
	CreateJobVehicle(ID_Cosechador|532,-374.4462, -1544.0831, 23.6264, -85.6800,6,6,60*5); // Cosechadora
	CreateJobVehicle(ID_Cosechador|532,-373.4890, -1556.3516, 23.6264, -85.6800,6,6,60*5); // Cosechadora
	CreateJobVehicle(ID_Cosechador|532,-378.1626, -1522.9635, 23.6264, -70.0200,6,6,60*5); // Cosechadora

	//                      LSTV                            //
	CreateFactionVehicle(IDLSTV|487,739.09997559,-1375.50000000,26.00000000,90.00000000,-1,-1); //Maverick
	CreateFactionVehicle(IDLSTV|488,744.09997559,-1364.50000000,26.00000000,92.00000000,-1,-1); //News Chopper
	CreateFactionVehicle(IDLSTV|582,758.79998779,-1343.80004883,13.69999981,270.00000000,103,103); //Newsvan
	CreateFactionVehicle(IDLSTV|582,750.40002441,-1335.00000000,13.69999981,90.00000000,103,103); //Newsvan
	CreateFactionVehicle(IDLSTV|582,750.09997559,-1340.09997559,13.69999981,90.00000000,103,103); //Newsvan
	CreateFactionVehicle(IDLSTV|582,749.70001221,-1343.69995117,13.69999981,90.00000000,103,103); //Newsvan
	CreateFactionVehicle(IDLSTV|559,735.59997559,-1336.50000000,13.30000019,180.00000000,103,103); //Jester
	CreateFactionVehicle(IDLSTV|461,758.29998779,-1340.00000000,13.19999981,270.00000000,103,1); //PCJ-600
	CreateFactionVehicle(IDLSTV|461,758.20001221,-1334.30004883,13.19999981,270.00000000,103,1); //PCJ-600
	CreateFactionVehicle(IDLSTV|559,740.09997559,-1336.50000000,13.30000019,180.00000000,103,1); //Jester
	CreateFactionVehicle(IDLSTV|409,759.09997559,-1337.00000000,13.50000000,270.00000000,106,1); //Stretch

	//                  MECANICOS                       //
	CreateFactionVehicle(IDMECANICOS|525,1628.9968,-2140.1121,13.4336,180.0000000,25,56); //Tow Truck
	CreateFactionVehicle(IDMECANICOS|525,1634.4783,-2140.3076,13.4561,180.0000000,25,56); //Tow Truck
	CreateFactionVehicle(IDMECANICOS|525,1639.7163,-2140.2190,13.4361,180.0000000,25,56); //Tow Truck
	CreateFactionVehicle(IDMECANICOS|525,1645.0983,-2140.4182,13.4697,180.0000000,25,56); //Tow Truck
	CreateFactionVehicle(IDMECANICOS|525,1650.5770,-2140.1460,13.4560,180.0000000,25,56); //Tow Truck

	//              BICIS TRABAJO REPARTIDOR                //
	CreateJobVehicle(ID_RepartidorB|509,2035.2075,-1295.0660,20.4456,90.2665,1,1,60*5); // bici 1
	CreateJobVehicle(ID_RepartidorB|509,2034.9890,-1300.1499,20.4312,90.1729,1,1,60*5); // bici 1
	CreateJobVehicle(ID_RepartidorB|509,2035.0818,-1304.8444,20.4182,90.0780,1,1,60*5); // bici 1
	CreateJobVehicle(ID_RepartidorB|509,2035.1302,-1290.2566,20.4581,92.2842,1,1,60*5); // bici 1
	CreateJobVehicle(ID_RepartidorB|509,2035.2446,-1285.1028,20.4720,93.1096,1,1,60*5); // bici 1
	CreateJobVehicle(ID_RepartidorB|509,2025.1853,-1301.4414,20.4031,184.4070,1,1,60*5); // bici 1
	CreateJobVehicle(ID_RepartidorB|509,2025.1450,-1296.8195,20.4210,179.4778,1,1,60*5); // bici 1
	CreateJobVehicle(ID_RepartidorB|509,2025.1860,-1292.4224,20.4368,179.4332,1,1,60*5); // bici 1
	CreateJobVehicle(ID_RepartidorB|509,2025.2262,-1288.2374,20.4529,179.3936,1,1,60*5); // bici 1
	CreateJobVehicle(ID_RepartidorB|509,2025.2816,-1283.8074,20.4687,179.2912,1,1,60*5); // bici 1

	//              CAMIONES DE BASURA                //
	CreateJobVehicle(ID_Basurero|408,1238.30004883,-1250.59997559,16.89999962,270.00000000,-1,-1,60*5); //Trashmaster
	CreateJobVehicle(ID_Basurero|408,1252.59997559,-1267.09997559,16.89999962,270.00000000,-1,-1,60*5); //Trashmaster
	CreateJobVehicle(ID_Basurero|408,1252.90002441,-1261.90002441,16.89999962,270.00000000,-1,-1,60*5); //Trashmaster
	CreateJobVehicle(ID_Basurero|408,1252.69995117,-1256.09997559,16.89999962,270.00000000,-1,-1,60*5); //Trashmaster
	CreateJobVehicle(ID_Basurero|408,1262.50000000,-1255.69995117,16.39999962,270.00000000,-1,-1,60*5); //Trashmaster
	CreateJobVehicle(ID_Basurero|408,1263.00000000,-1261.90002441,16.39999962,270.00000000,-1,-1,60*5); //Trashmaster
	CreateJobVehicle(ID_Basurero|408,1263.09997559,-1266.90002441,16.39999962,270.00000000,-1,-1,60*5); //Trashmaster
	CreateJobVehicle(ID_Basurero|408,1279.30004883,-1238.30004883,16.39999962,180.00000000,-1,-1,60*5); //Trashmaster

	//              AUTOS DEL GOBIERNO          //
	CreateFactionVehicle(IDGOBIERNO|490,1274.50000000,-2040.50000000,59.40000153,90.00000000,0,1); //FBI Rancher
	CreateFactionVehicle(IDGOBIERNO|490,1274.59997559,-2032.80004883,59.40000153,90.00000000,0,1); //FBI Rancher
	CreateFactionVehicle(IDGOBIERNO|409,1247.19995117,-2011.69995117,59.70000076,180.00000000,0,1); //Stretch
	CreateFactionVehicle(IDGOBIERNO|523,1247.00000000,-2023.59997559,59.50000000,270.00024414,0,1); //HPV1000
	CreateFactionVehicle(IDGOBIERNO|523,1247.19995117,-2027.59997559,59.50000000,270.00000000,0,1); //HPV1000
	CreateFactionVehicle(IDGOBIERNO|411,1247.80004883,-2033.09997559,59.59999847,270.00000000,0,1); //Infernus
	CreateFactionVehicle(IDGOBIERNO|411,1247.69995117,-2040.80004883,59.59999847,270.00000000,0,1); //Infernus
	CreateFactionVehicle(IDGOBIERNO|560,1275.09997559,-2025.90002441,58.79999924,90.00000000,0,1); //Sultan
	CreateFactionVehicle(IDGOBIERNO|560,1275.40002441,-2019.09997559,58.79999924,90.00000000,0,1); //Sultan
	CreateFactionVehicle(IDGOBIERNO|421,1274.40002441,-2012.40002441,59.00000000,90.00000000,0,1); //Washington
	CreateFactionVehicle(IDGOBIERNO|563,1195.59997559,-2019.09997559,69.90000153,270.00000000,0,1); //Raindance
	CreateFactionVehicle(IDGOBIERNO|563,1196.50000000,-2053.80004883,69.90000153,270.00000000,0,1); //Raindance
	CreateFactionVehicle(IDGOBIERNO|417,1152.90002441,-2019.59997559,68.00000000,270.00000000,0,1); //Leviathan
	CreateFactionVehicle(IDGOBIERNO|417,1153.00000000,-2055.30004883,68.00000000,270.00000000,0,1); //Leviathan

	//              HITMAN              //
	CreateFactionVehicle(IDHITMAN|560,278.7000122,-1534.9000244,24.3999996,235.9973145,0,0); //Sultan
	CreateFactionVehicle(IDHITMAN|482,284.5000000,-1526.1999512,24.7999992,236.0000000,0,0); //Burrito
	CreateFactionVehicle(IDHITMAN|554,288.1000061,-1521.0000000,24.7999992,236.0000000,0,0); //Yosemite
	CreateFactionVehicle(IDHITMAN|415,300.6000061,-1503.1999512,24.5000000,236.0000000,0,0); //Cheetah
	CreateFactionVehicle(IDHITMAN|477,297.6000061,-1507.9000244,24.5000000,235.5000000,0,0); //ZR-350
	CreateFactionVehicle(IDHITMAN|409,300.6000061,-1491.6999512,24.5000000,236.0000000,0,0); //Stretch
	CreateFactionVehicle(IDHITMAN|521,304.6000061,-1486.5999756,24.2999992,236.0000000,0,0); //FCR-900

	//              CAMIONEROS LVL: 2              //
	CreateJobVehicle(ID_Camionero|515, -474.2061, -474.0198, 26.7533, 179.2200, -1, -1, 100);
	CreateJobVehicle(ID_Camionero|515, -484.1528, -473.7698, 26.7533, 179.2200, -1, -1, 100);
	CreateJobVehicle(ID_Camionero|515, -494.7004, -474.0380, 26.7533, 179.2200, -1, -1, 100);
	CreateJobVehicle(ID_Camionero|515, -504.6794, -473.8775, 26.7533, 179.2200, -1, -1, 100);
	CreateJobVehicle(ID_Camionero|515, -514.8195, -473.8259, 26.7533, 179.2200, -1, -1, 100);
	CreateJobVehicle(ID_Camionero|515, -524.5757, -473.9580, 26.7533, 179.2200, -1, -1, 100);

	//              CAMIONEROS LVL 2 (CARGAS)             //
	veh_create(435, -978.8101, -684.2756, 32.8219, 88.7119, -1, -1, 100);
	veh_create(435, -978.7954, -674.3043, 32.8219, 88.7119, -1, -1, 100);
	veh_create(435, -978.6477, -664.0270, 32.8219, 88.7119, -1, -1, 100);
	veh_create(435, -978.6447, -653.5461, 32.8219, 88.7119, -1, -1, 100);
	veh_create(435, -978.5058, -643.5342, 32.8219, 88.7119, -1, -1, 100);

	veh_create(450, 2587.1094, 2772.2971, 12.2551, 89.7000, -1, -1, 100);
	veh_create(450, 2586.9614, 2764.7866, 12.2551, 89.7000, -1, -1, 100);
	veh_create(450, 2587.1038, 2756.6685, 12.2551, 89.7000, -1, -1, 100);
	veh_create(450, 2587.1763, 2748.6216, 12.2551, 89.7000, -1, -1, 100);
	veh_create(450, 2586.8013, 2740.2673, 12.2551, 89.7000, -1, -1, 100);

	veh_create(591, 284.3467, 1340.9998, 12.1626, 0.0000, -1, -1, 100);
	veh_create(591, 277.9458, 1340.9329, 12.1626, 0.0000, -1, -1, 100);
 	veh_create(591, 271.3472, 1341.0750, 12.1626, 0.0000, -1, -1, 100);
	veh_create(591, 264.2848, 1341.0283, 12.1626, 0.0000, -1, -1, 100);
	veh_create(591, 258.0042, 1341.0635, 12.1626, 0.0000, -1, -1, 100);

	//              REPARTIDOR DE PIZZA                 //
	CreateJobVehicle(ID_RepartidorP|448,2113.1201,-1824.5374,13.1553,178.1092, 6, 3, 200);
	CreateJobVehicle(ID_RepartidorP|448,2116.7688,-1824.6216,13.1560,183.3079, 6, 3, 200);
	CreateJobVehicle(ID_RepartidorP|448,2120.4487,-1824.6055,13.1558,177.1241, 6, 3, 200);
	CreateJobVehicle(ID_RepartidorP|448,2109.4717,-1824.6201,13.1551,181.8205, 6, 3, 200);

	//                  TAXIS                           //
	CreateJobVehicle(ID_Taxista|420,2118.2163,-1737.7179,13.3395,89.2750,6,6, 200); // Taxi
	CreateJobVehicle(ID_Taxista|420,2125.0942,-1737.6635,13.3537,90.6437,6,6, 200); // Taxi
	CreateJobVehicle(ID_Taxista|420,2131.7900,-1737.8279,13.3555,89.9791,6,6, 200); // Taxi
	CreateJobVehicle(ID_Taxista|420,2139.3425,-1737.8673,13.3617,91.3867,6,6, 200); // Taxi
	CreateJobVehicle(ID_Taxista|420,2145.7073,-1737.8964,13.3526,91.1047,6,6, 200); // Taxi
	CreateJobVehicle(ID_Taxista|420,2145.7659,-1727.0321,13.3473,270.2422,6,6, 200); // Taxi
	CreateJobVehicle(ID_Taxista|420,2138.5676,-1726.8756,13.3470,269.1436,6,6, 200); // Taxi
	CreateJobVehicle(ID_Taxista|420,2131.6589,-1726.8344,13.3479,270.9272,6,6, 200); // Taxi
	CreateJobVehicle(ID_Taxista|420,2124.4856,-1726.8193,13.3496,268.9480,6,6, 200); // Taxi
	CreateJobVehicle(ID_Taxista|420,2117.6470,-1726.4598,13.3593,269.8850,6,6, 200); // Taxi

	//                  NUEVOS AUTOS LSPD
	CreateFactionVehicle(IDLSPD|427, 2028.2693,-2050.2446,13.6787,178.9102, 0, 0, 3600*HORAS_RVEH);
	CreateFactionVehicle(IDLSPD|427, 2019.7972,-2050.3945,13.6829,179.4380, 0, 0, 3600*HORAS_RVEH);
	CreateFactionVehicle(IDLSPD|525, 2045.8931,-2049.6165,13.4335,177.6968, 0, 0, 3600*HORAS_RVEH);
	CreateFactionVehicle(IDLSPD|525, 2050.2881,-2049.5903,13.4270,178.3871, 0, 0, 3600*HORAS_RVEH);
	CreateFactionVehicle(IDLSPD|525, 2059.0132,-2049.6316,13.4232,179.1720, 0, 0, 3600*HORAS_RVEH);
	CreateFactionVehicle(IDLSPD|596, 1591.4371, -1711.0272, 5.5470, 358.7638, 0, 1, 3600*HORAS_RVEH);
	CreateFactionVehicle(IDLSPD|596, 1595.3333, -1711.1681, 5.5469, 359.1981, 0, 1, 3600*HORAS_RVEH);
	CreateFactionVehicle(IDLSPD|596, 1583.3822, -1710.9973, 5.5962, 359.8880, 0, 1, 3600*HORAS_RVEH);
	CreateFactionVehicle(IDLSPD|596, 1587.4177, -1710.9647, 5.5958, 357.2534, 0, 1, 3600*HORAS_RVEH);

	VehConSirena[0] = veh_create(402, 2049.9014,-2067.7817,13.2465,0.6315, 0, 0,3600*HORAS_RVEH);
	VehConSirena[1] = veh_create(402, 2045.6891,-2067.7712,13.2533,0.0254, 0, 0,3600*HORAS_RVEH);
	VehConSirena[2] = veh_create(402, 2041.3781,-2067.8643,13.2574,358.7935, 0, 0,3600*HORAS_RVEH);
	VehConSirena[3] = veh_create(402, 2036.9790,-2084.8784,13.2025,358.633, 0, 0,3600*HORAS_RVEH);
	VehConSirena[4] = veh_create(402, 2036.8721,-2067.7378,13.2539,0.0725, 0, 0,3600*HORAS_RVEH);
	VehConSirena[5] = veh_create(415, 2041.2600,-2084.7056,13.2032,0.7328, 0, 0,3600*HORAS_RVEH);
	VehConSirena[6] = veh_create(415, 2045.7271,-2084.7737,13.2007,358.030, 0, 0,3600*HORAS_RVEH);
	VehConSirena[7] = veh_create(415, 2049.9583,-2084.5181,13.2032,358.4309, 0, 0,3600*HORAS_RVEH);

	Loop(s,8,0)
	{
		veh_setFaction(VehConSirena[s], IDLSPD);
	}

	Truth_VehID = veh_create(532,-1103.8887,-1620.8103,77.3386,269.7661,70,152, 15000); // Cosechadora de Truth.

	CreateFactionVehicle(IDCAMIONEROS|591, -532.7018, 2595.0894, 54.0653, -92.1000, -1, -1,3600*HORAS_RVEH);
	CreateFactionVehicle(IDCAMIONEROS|435, 2203.1157, -2211.1611, 14.0758, 585.7802, -1, -1,3600*HORAS_RVEH);
	CreateFactionVehicle(IDCAMIONEROS|591, 2196.3357, -2218.3640, 14.1382, 225.4800, -1, -1,3600*HORAS_RVEH);
	CreateFactionVehicle(IDCAMIONEROS|584, 2189.1147, -2225.0745, 14.5402, 225.4800, -1, -1,3600*HORAS_RVEH);
	CreateFactionVehicle(IDCAMIONEROS|403, 2226.8901, -2252.1348, 14.1382, 403.4398, -1, -1,3600*HORAS_RVEH);
	CreateFactionVehicle(IDCAMIONEROS|403, 2219.4050, -2259.5310, 14.1382, 403.4398, -1, -1,3600*HORAS_RVEH);
	CreateFactionVehicle(IDCAMIONEROS|456, 2210.7083, -2265.7942, 13.7921, 44.8200, -1, -1,3600*HORAS_RVEH);
	CreateFactionVehicle(IDCAMIONEROS|456, 2203.6323, -2272.6399, 13.7921, 44.8200, -1, -1,3600*HORAS_RVEH);
	CreateFactionVehicle(IDCAMIONEROS|456, 2194.9563, -2280.0737, 13.7921, 44.8200, -1, -1,3600*HORAS_RVEH);

	// ---====[ Cargado de datos ]====---- //

	CargarHornosBigFoot();
	CargarHornosBlackAso();
	CargarFrecuencias();
	CargarObjetosTirados();
	CargarCasillerosLSPD();
	CargarCasillerosLSEM();
	CargarPlantasMarihuana();
	CargarEstaciones();
	CargarGraffitis();
	CargarMecanicos();
	CargarCamarasVelocidad();
	CargarPreciosModelos();
   	CargarInteriores();
	CargarFacciones();
	CargarNegocios();
	CargarPCs(); // OP:PC
	CargarCasas();
	CargarInteriores_C();
	CargarFamilias();
	CargarGarages();
	CargarObjetos();
	CargarPortones();
	CargarTelevisores();
	CargarModelos();
	CargarGangZones();
	CargarContratos();
	CargarArmeriaHitman();
	CargarPedidosCamioneros();
	CrearMinerales();
	CargarFabricasDroga();
	CargarMaxCuentaB();
	CargarNPCS();

	//  -------=========[ MAPS ]=========------- //

	/*
	    Interiores ...
	        Formato: .INT [name]

		Exteriores ...
		    Formato: .EXT [name]

		Otros ...
		    Formato: .OTHER [name]

	*/

	//.EXT LSPD
	CreateDynamicObject(3851, 1578.76831, -1637.85986, 16.80383,   0.00000, 0.00000, 89.93999); // vidrio puertita
	CreateDynamicObject(970, 1547.23535, -1633.01758, 13.11005,   0.00000, 0.00000, 181.20006); // Vallas
	CreateDynamicObject(970, 1549.29211, -1635.05090, 13.11005,   0.00000, 0.00000, 269.76004);
	CreateDynamicObject(970, 1546.62109, -1622.79126, 13.11005,   0.00000, 0.00000, 180.54008);
	CreateDynamicObject(970, 1548.72339, -1620.67590, 13.11005,   0.00000, 0.00000, 269.27988);

	//.EXT LSMD
	CreateDynamicObject(1568, 1189.89502, -1381.35303, 12.40430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1568, 1211.72180, -1381.97693, 12.40430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1568, 1211.73669, -1329.37146, 12.40430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1568, 1189.88257, -1328.61047, 12.40430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1568, 1189.90295, -1294.70496, 12.40430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1568, 1211.68372, -1295.38403, 12.40430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1190.28967, -1372.49109, 13.20420,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1190.28442, -1346.89185, 13.20420,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1190.29163, -1303.69299, 13.20420,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1211.14966, -1372.29114, 13.20420,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1211.16821, -1346.71790, 13.20420,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1211.16589, -1321.13147, 13.20420,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1211.16138, -1301.91602, 13.20420,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(996, 1145.909423, -1346.457763, 13.637101, 0.000000, 0.000000, 89.999954); // lsmd.
	CreateDynamicObject(996, 1138.451538, -1347.062133, 13.627229, 0.000000, 0.000000, 0.000000); // lsmd.
	CreateDynamicObject(996, 1089.742553, -1329.237548, 13.352866, 0.000000, 0.000000, -88.500000); // lsmd.
	CreateDynamicObject(967, 1137.369262, -1291.774414, 12.546870, 0.000000, 0.000000, 87.500099); // lsmd.
	CreateDynamicObject(966, 1145.301757, -1291.418579, 12.597631, 0.000000, 0.000000, 0.000000); // lsmd.
	CreateDynamicObject(970, 1147.859130, -1291.273437, 13.239387, 0.000000, 0.000000, 0.000000); // lsmd.
	CreateDynamicObject(970, 1134.475341, -1291.066040, 13.116868, 0.000000, 0.000000, 0.000000); // lsmd.

	//.EXT LSTV
	CreateDynamicObject(3660,764.19921875,-1331.00000000,14.39999962,0.00000000,0.00000000,358.74755859); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,742.09997559,-1330.80004883,14.39999962,0.00000000,0.00000000,1.25000000); //object(lasairfbed_las) (2)
	CreateDynamicObject(1360,753.20001221,-1330.50000000,13.30000019,0.00000000,0.00000000,90.00000000); //object(cj_bush_prop3) (1)
	CreateDynamicObject(1360,753.20001221,-1331.50000000,13.30000019,0.00000000,0.00000000,90.00000000); //object(cj_bush_prop3) (2)
	CreateDynamicObject(982,746.20001221,-1332.30004883,13.19999981,0.00000000,0.00000000,90.50000000); //object(fenceshit) (1)
	CreateDynamicObject(984,765.50000000,-1332.40002441,13.19999981,0.00000000,0.00000000,88.75000000); //object(fenceshit2) (2)
	CreateDynamicObject(982,781.90002441,-1343.50000000,13.19999981,0.00000000,0.00000000,0.00000000); //object(fenceshit) (2)
	CreateDynamicObject(982,781.90002441,-1369.09997559,13.19999981,0.00000000,0.00000000,0.00000000); //object(fenceshit) (3)
	CreateDynamicObject(3509,784.39941406,-1379.00000000,12.60000038,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_r01) (2)
	CreateDynamicObject(3509,784.50000000,-1368.00000000,12.60000038,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_r01) (3)
	CreateDynamicObject(3509,784.79980469,-1358.00000000,12.60000038,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_r01) (4)
	CreateDynamicObject(3509,784.59960938,-1347.50000000,12.60000038,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_r01) (5)
	CreateDynamicObject(3509,784.40002441,-1337.00000000,12.60000038,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_r01) (6)
	CreateDynamicObject(3472,783.09997559,-1343.50000000,7.30000019,0.00000000,0.00000000,90.00000000); //object(circuslampost03) (1)
	CreateDynamicObject(3472,783.79980469,-1353.50000000,7.30000019,0.00000000,0.00000000,90.00000000); //object(circuslampost03) (2)
	CreateDynamicObject(3472,783.79980469,-1362.79980469,7.30000019,0.00000000,0.00000000,90.00000000); //object(circuslampost03) (3)
	CreateDynamicObject(3472,783.79998779,-1373.59997559,7.30000019,0.00000000,0.00000000,90.00000000); //object(circuslampost03) (4)
	CreateDynamicObject(3508,759.90002441,-1331.50000000,13.00000000,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_g02) (2)
	CreateDynamicObject(3508,771.40002441,-1331.69995117,13.00000000,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_g02) (3)
	CreateDynamicObject(3508,765.70001221,-1331.59997559,13.00000000,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_g02) (4)
	CreateDynamicObject(3508,755.20001221,-1331.40002441,13.00000000,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_g02) (5)
	CreateDynamicObject(3508,750.00000000,-1331.30004883,13.00000000,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_g02) (6)
	CreateDynamicObject(3508,744.00000000,-1331.19995117,13.00000000,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_g02) (7)
	CreateDynamicObject(3508,738.79998779,-1331.09997559,13.00000000,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_g02) (8)
	CreateDynamicObject(3508,734.29998779,-1331.00000000,13.00000000,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_g02) (9)
	CreateDynamicObject(3472,768.20001221,-1332.19995117,7.30000019,0.00000000,0.00000000,90.00000000); //object(circuslampost03) (5)
	CreateDynamicObject(3472,757.70001221,-1331.69995117,7.30000019,0.00000000,0.00000000,90.00000000); //object(circuslampost03) (6)
	CreateDynamicObject(3472,747.20001221,-1331.59997559,7.30000019,0.00000000,0.00000000,90.00000000); //object(circuslampost03) (7)
	CreateDynamicObject(3472,741.50000000,-1331.89941406,7.30000019,0.00000000,0.00000000,90.00000000); //object(circuslampost03) (8)
	CreateDynamicObject(5837,771.20001221,-1379.09997559,14.19999981,0.00000000,0.00000000,270.00000000); //object(ci_guardhouse1) (1)
	CreateDynamicObject(1251,757.70001221,-1335.40002441,12.60000038,0.00000000,0.00000000,270.00000000); //object(smashbar) (1)
	CreateDynamicObject(984,754.20001221,-1338.59997559,13.19999981,0.00000000,0.00000000,0.00000000); //object(fenceshit2) (3)
	CreateDynamicObject(1251,757.70001221,-1338.59997559,12.60000038,0.00000000,0.00000000,270.00000000); //object(smashbar) (2)
	CreateDynamicObject(1251,757.70001221,-1341.80004883,12.60000038,0.00000000,0.00000000,270.00000000); //object(smashbar) (3)
	CreateDynamicObject(1251,757.70001221,-1345.00000000,12.60000038,0.00000000,0.00000000,270.00000000); //object(smashbar) (4)
	CreateDynamicObject(1251,757.59997559,-1332.30004883,12.60000038,0.00000000,0.00000000,270.00000000); //object(smashbar) (5)
	CreateDynamicObject(1251,750.70001221,-1345.00000000,12.60000038,0.00000000,0.00000000,270.00000000); //object(smashbar) (6)
	CreateDynamicObject(1251,750.70001221,-1341.80004883,12.60000038,0.00000000,0.00000000,270.00000000); //object(smashbar) (7)
	CreateDynamicObject(1251,750.70001221,-1336.90002441,12.60000038,0.00000000,0.00000000,270.00000000); //object(smashbar) (9)
	CreateDynamicObject(1251,750.70001221,-1332.30004883,12.60000038,0.00000000,0.00000000,270.00000000); //object(smashbar) (10)
	CreateDynamicObject(1251,734.40002441,-1335.90002441,12.60000038,0.00000000,0.00000000,0.00000000); //object(smashbar) (11)
	CreateDynamicObject(1251,738.20001221,-1335.90002441,12.60000038,0.00000000,0.00000000,0.00000000); //object(smashbar) (12)
	CreateDynamicObject(1251,741.39941406,-1335.89941406,12.60000038,0.00000000,0.00000000,0.00000000); //object(smashbar) (13)
	CreateDynamicObject(2924,754.79998779,-1383.09997559,13.89999962,0.00000000,0.00000000,90.00000000); //object(kmb_crash3door) (1)
	CreateDynamicObject(10150,754.50000000,-1382.09960938,26.70000076,0.00000000,0.00000000,0.00000000); //object(fdorsfe) (1)
	CreateDynamicObject(10150,750.40002441,-1382.19995117,26.70000076,0.00000000,0.00000000,0.00000000); //object(fdorsfe) (2)
	CreateDynamicObject(10150,752.40002441,-1380.09997559,26.70000076,0.00000000,0.00000000,90.00000000); //object(fdorsfe) (3)
	CreateDynamicObject(10150,752.50000000,-1384.19995117,26.70000076,0.00000000,0.00000000,90.00000000); //object(fdorsfe) (4)
	CreateDynamicObject(10150,752.40002441,-1382.19995117,28.70000076,0.00000000,90.00000000,0.00000000); //object(fdorsfe) (5)
	CreateDynamicObject(2924,750.29998779,-1382.69995117,25.89999962,0.00000000,0.00000000,90.00000000); //object(kmb_crash3door) (2)
	CreateDynamicObject(3660,782.70001221,-1340.30004883,14.39999962,0.00000000,0.00000000,90.00000000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,785.20001221,-1340.30004883,14.39999962,0.00000000,0.00000000,270.00000000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,785.20001221,-1359.90002441,14.39999962,0.00000000,0.00000000,270.00000000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,782.70001221,-1359.90002441,14.39999962,0.00000000,0.00000000,90.00000000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,783.20001221,-1374.90002441,14.39999962,0.00000000,0.00000000,270.00000000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,784.29998779,-1290.19995117,14.39999962,0.00000000,0.00000000,270.00000000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,784.50000000,-1375.19995117,14.39999962,0.00000000,0.00000000,90.00000000); //object(lasairfbed_las) (1)
	CreateDynamicObject(7952,734.09997559,-1328.90002441,13.30000019,0.00000000,0.00000000,90.00000000); //object(miragehedge09) (1)
	CreateDynamicObject(7952,691.70001221,-1328.80004883,13.30000019,0.00000000,0.00000000,90.00000000); //object(miragehedge09) (2)
	CreateDynamicObject(982,761.20001221,-1327.80004883,13.19999981,0.00000000,0.00000000,90.00000000); //object(fenceshit) (4)
	CreateDynamicObject(982,735.59997559,-1327.80004883,13.19999981,0.00000000,0.00000000,90.00000000); //object(fenceshit) (5)
	CreateDynamicObject(982,710.00000000,-1327.80004883,13.19999981,0.00000000,0.00000000,90.00000000); //object(fenceshit) (6)
	CreateDynamicObject(982,684.40002441,-1327.80004883,13.19999981,0.00000000,0.00000000,90.00000000); //object(fenceshit) (7)
	CreateDynamicObject(982,660.40002441,-1327.80004883,13.19999981,0.00000000,0.00000000,90.00000000); //object(fenceshit) (8)
	CreateDynamicObject(3472,721.50000000,-1329.90002441,7.30000019,0.00000000,0.00000000,270.00000000); //object(circuslampost03) (8)
	CreateDynamicObject(3472,698.90002441,-1329.80004883,7.30000019,0.00000000,0.00000000,270.00000000); //object(circuslampost03) (8)
	CreateDynamicObject(3472,678.40002441,-1330.00000000,7.30000019,0.00000000,0.00000000,270.00000000); //object(circuslampost03) (8)
	CreateDynamicObject(3472,657.79998779,-1329.59997559,7.30000019,0.00000000,0.00000000,270.00000000); //object(circuslampost03) (8)
	CreateDynamicObject(16613,-239.00000000,1783.09997559,99.09999847,0.00000000,0.00000000,44.99450684); //object(des_bigtelescope) (1)
	CreateDynamicObject(3763,721.50000000,-1372.59997559,61.29999924,0.00000000,0.00000000,0.00000000); //object(ce_radarmast3) (1)
	CreateDynamicObject(14537,757.00000000,-1364.90002441,14.50000000,0.00000000,0.00000000,0.00000000); //object(pdomesbar) (1)
	CreateDynamicObject(1594,762.09997559,-1371.80004883,13.00000000,0.00000000,0.00000000,0.00000000); //object(chairsntable) (1)
	CreateDynamicObject(1594,765.00000000,-1368.19995117,13.00000000,0.00000000,0.00000000,0.00000000); //object(chairsntable) (2)
	CreateDynamicObject(1594,765.00000000,-1361.40002441,13.00000000,0.00000000,0.00000000,0.00000000); //object(chairsntable) (4)
	CreateDynamicObject(1594,765.90002441,-1364.19995117,13.00000000,0.00000000,0.00000000,0.00000000); //object(chairsntable) (5)
	CreateDynamicObject(1594,763.20001221,-1357.80004883,13.00000000,0.00000000,0.00000000,0.00000000); //object(chairsntable) (8)
	CreateDynamicObject(1670,762.20001221,-1371.90002441,13.39999962,0.00000000,0.00000000,0.00000000); //object(propcollecttable) (1)
	CreateDynamicObject(1670,765.00000000,-1368.30004883,13.39999962,0.00000000,0.00000000,0.00000000); //object(propcollecttable) (2)
	CreateDynamicObject(1670,765.79998779,-1364.40002441,13.39999962,0.00000000,0.00000000,0.00000000); //object(propcollecttable) (3)
	CreateDynamicObject(1670,764.90002441,-1361.50000000,13.39999962,0.00000000,0.00000000,0.00000000); //object(propcollecttable) (4)
	CreateDynamicObject(1670,763.20001221,-1358.00000000,13.39999962,0.00000000,0.00000000,0.00000000); //object(propcollecttable) (5)
	CreateDynamicObject(2008,770.79998779,-1377.09997559,12.80000019,0.00000000,0.00000000,0.00000000); //object(officedesk1) (1)
	CreateDynamicObject(3851,647.50000000,-1377.59997559,14.80000019,0.00000000,0.00000000,0.00000000); //object(carshowwin_sfsx) (1)
	CreateDynamicObject(3851,647.50000000,-1377.59997559,18.79999924,0.00000000,0.00000000,0.00000000); //object(carshowwin_sfsx) (3)
	CreateDynamicObject(3851,647.40002441,-1372.00000000,14.80000019,0.00000000,0.00000000,0.00000000); //object(carshowwin_sfsx) (4)
	CreateDynamicObject(3851,647.50000000,-1366.30004883,18.70000076,0.00000000,0.00000000,0.00000000); //object(carshowwin_sfsx) (5)
	CreateDynamicObject(3851,647.50000000,-1355.00000000,18.70000076,0.00000000,0.00000000,0.00000000); //object(carshowwin_sfsx) (6)
	CreateDynamicObject(3851,647.70001221,-1334.80004883,18.70000076,0.00000000,0.00000000,0.00000000); //object(carshowwin_sfsx) (7)
	CreateDynamicObject(3851,647.70001221,-1346.00000000,18.70000076,0.00000000,0.00000000,359.75000000); //object(carshowwin_sfsx) (8)
	CreateDynamicObject(3851,647.70001221,-1334.80004883,14.69999981,0.00000000,0.00000000,0.00000000); //object(carshowwin_sfsx) (9)
	CreateDynamicObject(3851,647.70001221,-1343.19995117,14.69999981,0.00000000,0.00000000,359.75000000); //object(carshowwin_sfsx) (10)
	CreateDynamicObject(1597,645.29998779,-1338.69995117,15.10000038,0.00000000,0.00000000,0.00000000); //object(cntrlrsac1) (1)
	CreateDynamicObject(1597,646.00000000,-1377.30004883,15.19999981,0.00000000,0.00000000,0.00000000); //object(cntrlrsac1) (2)
	CreateDynamicObject(10150,754.59997559,-1382.50000000,14.69999981,0.00000000,0.00000000,0.00000000); //object(fdorsfe) (1)
	CreateDynamicObject(10150,754.70001221,-1382.80004883,14.60000038,0.00000000,0.00000000,0.00000000); //object(fdorsfe) (1)
	CreateDynamicObject(1318,754.70001221,-1382.30004883,14.30000019,0.00000000,0.00000000,0.00000000); //object(arrow) (1)
	CreateDynamicObject(1318,754.70001221,-1382.30004883,15.50000000,0.00000000,180.00000000,0.00000000); //object(arrow) (2)
	CreateDynamicObject(3934,744.20001221,-1364.19995117,24.70000076,0.00000000,0.00000000,0.00000000); //object(helipad01) (1)
	CreateDynamicObject(3934,737.59997559,-1375.59997559,24.70000076,0.00000000,0.00000000,0.00000000); //object(helipad01) (2)

	//.INT AEROPUERTO
	CreateDynamicObject(3971,-1915.95117188,15.18066406,1062.69409180,0.00000000,0.00000000,0.00000000); //object(cj_bag_reclaim) (1)
	CreateDynamicObject(3967,-1942.85058594,13.41308594,1073.08288574,0.00000000,0.00000000,0.00000000); //object(airport_int2) (2)
	CreateDynamicObject(6888,-1908.58056641,26.73178673,1061.31201172,0.00000000,90.00000000,90.00000000); //object(vegasnedge06) (1)
	CreateDynamicObject(3851,-1913.78564453,-0.67592573,1061.76818848,0.00000000,0.00000000,270.00000000); //object(carshowwin_sfsx) (1)
	CreateDynamicObject(3851,-1902.49450684,-0.66817290,1061.76818848,0.00000000,0.00000000,269.99499512); //object(carshowwin_sfsx) (2)
 	CreateDynamicObject(3851,-1903.68554688,2.89538622,1061.76818848,0.00000000,0.00000000,359.99450684); //object(carshowwin_sfsx) (3)
 	CreateDynamicObject(1649,-1919.46813965,6.18574953,1061.80932617,0.00000000,0.00000000,90.00000000); //object(wglasssmash) (1)
 	CreateDynamicObject(1649,-1919.41467285,1.69509816,1061.80932617,0.00000000,0.00000000,90.00000000); //object(wglasssmash) (2)
  	CreateDynamicObject(1649,-1926.04479980,8.47107601,1061.80932617,0.00000000,0.00000000,179.99450684); //object(wglasssmash) (4)
	CreateDynamicObject(1806,-1926.25573730,6.55859566,1060.14355469,0.00000000,0.00000000,8.00000000); //object(med_office_chair) (1)
	CreateDynamicObject(1806,-1924.48559570,6.47626019,1060.14355469,0.00000000,0.00000000,0.00000000); //object(med_office_chair) (2)
	CreateDynamicObject(1806,-1921.36572266,6.61152077,1060.14355469,0.00000000,0.00000000,304.00000000); //object(med_office_chair) (3)
	CreateDynamicObject(1806,-1921.31738281,5.09286022,1060.14355469,0.00000000,0.00000000,271.99951172); //object(med_office_chair) (4)
	CreateDynamicObject(2009,-1921.13793945,7.77984095,1060.14355469,0.00000000,0.00000000,270.00000000); //object(officedesk2l) (1)
	CreateDynamicObject(1999,-1920.12512207,5.80370378,1060.14355469,0.00000000,0.00000000,270.00000000); //object(officedesk2) (1)
	CreateDynamicObject(1999,-1925.38305664,7.73806667,1060.14355469,0.00000000,0.00000000,359.99450684); //object(officedesk2) (2)
	CreateDynamicObject(2009,-1927.36193848,6.73737240,1060.14355469,0.00000000,0.00000000,359.99450684); //object(officedesk2l) (2)
	CreateDynamicObject(1649,-1919.46777344,6.18554688,1061.80932617,0.00000000,0.00000000,270.00000000); //object(wglasssmash) (5)
	CreateDynamicObject(1649,-1926.04394531,8.47070312,1061.80932617,0.00000000,0.00000000,359.99450684); //object(wglasssmash) (6)
	CreateDynamicObject(2172,-1922.10266113,2.29035783,1060.14355469,0.00000000,0.00000000,180.00000000); //object(med_office2_desk_1) (1)
	CreateDynamicObject(2172,-1920.16711426,2.32808352,1060.14355469,0.00000000,0.00000000,180.00000000); //object(med_office2_desk_1) (2)
	CreateDynamicObject(1806,-1920.91381836,3.37708330,1060.14355469,0.00000000,0.00000000,169.99951172); //object(med_office_chair) (7)
	CreateDynamicObject(2175,-1926.82275391,5.52760744,1060.14355469,0.00000000,0.00000000,180.00000000); //object(med_office4_desk_3) (1)
	CreateDynamicObject(1518,-1926.87341309,5.62063646,1061.30004883,0.00000000,0.00000000,163.99993896); //object(dyn_tv_2) (1)
	CreateDynamicObject(1782,-1927.37719727,6.89274979,1061.03198242,0.00000000,0.00000000,266.00000000); //object(med_video_2) (1)
	CreateDynamicObject(1782,-1925.36596680,7.72732687,1061.03198242,0.00000000,0.00000000,189.99548340); //object(med_video_2) (2)
	CreateDynamicObject(1782,-1920.89013672,7.90189362,1061.03198242,0.00000000,0.00000000,177.99206543); //object(med_video_2) (3)
	CreateDynamicObject(1782,-1920.13256836,5.54518509,1061.03198242,0.00000000,0.00000000,95.98950195); //object(med_video_2) (4)
	CreateDynamicObject(1808,-1924.43750000,5.17484379,1060.14355469,0.00000000,0.00000000,178.00000000); //object(cj_watercooler2) (1)
	CreateDynamicObject(2186,-1923.26049805,3.52963758,1060.14355469,0.00000000,0.00000000,89.99996948); //object(photocopier_1) (1)
	CreateDynamicObject(14608,-1935.13073730,11.35891819,1061.81396484,0.00000000,0.00000000,273.99902344); //object(triad_buddha01) (1)
	CreateDynamicObject(1533,-1884.96496582,16.83487892,1060.16857910,0.00000000,0.00000000,269.99996948); //object(gen_doorext12) (1)
	CreateDynamicObject(1533,-1884.95117188,18.33911705,1060.16857910,0.00000000,0.00000000,269.99450684); //object(gen_doorext12) (2)
	CreateDynamicObject(1533,-1884.96960449,20.26784134,1060.16857910,0.00000000,0.00000000,269.99450684); //object(gen_doorext12) (3)
	CreateDynamicObject(1533,-1884.97998047,21.77085876,1060.16857910,0.00000000,0.00000000,269.99450684); //object(gen_doorext12) (4)
	CreateDynamicObject(1533,-1889.63903809,8.55360699,1060.16857910,0.00000000,0.00000000,177.99450684); //object(gen_doorext12) (5)
	CreateDynamicObject(1533,-1887.16137695,8.51877213,1060.16857910,0.00000000,0.00000000,177.98950195); //object(gen_doorext12) (6)
	CreateDynamicObject(1533,-1938.43652344,15.33934689,1060.16857910,0.00000000,0.00000000,91.98950195); //object(gen_doorext12) (7)
	CreateDynamicObject(1533,-1938.48291016,16.83814049,1060.16857910,0.00000000,0.00000000,91.98852539); //object(gen_doorext12) (8)
	CreateDynamicObject(1533,-1938.51696777,18.73773956,1060.16857910,0.00000000,0.00000000,91.98852539); //object(gen_doorext12) (9)
	CreateDynamicObject(1533,-1938.56323242,20.26156807,1060.16857910,0.00000000,0.00000000,91.98852539); //object(gen_doorext12) (10)
	CreateDynamicObject(1533,-1910.29296875,-0.62402344,1060.16857910,0.00000000,0.00000000,179.98352051); //object(gen_doorext12) (11)
	CreateDynamicObject(1533,-1911.79614258,-0.66267604,1060.16857910,0.00000000,0.00000000,179.98352051); //object(gen_doorext12) (12)
	CreateDynamicObject(1533,-1922.26416016,8.49345016,1060.16857910,0.00000000,0.00000000,179.98352051); //object(gen_doorext12) (11)
	CreateDynamicObject(1649,-1921.70324707,8.51707745,1061.80932617,0.00000000,0.00000000,359.99450684); //object(wglasssmash) (6)
	CreateDynamicObject(3850,-1936.66674805,13.96198368,1060.68945312,0.00000000,0.00000000,90.00000000); //object(carshowbann_sfsx) (2)
	CreateDynamicObject(3850,-1933.52758789,12.99287510,1060.68945312,0.00000000,0.00000000,56.00000000); //object(carshowbann_sfsx) (3)
	CreateDynamicObject(3850,-1932.12585449,10.31136322,1060.68945312,0.00000000,0.00000000,359.99975586); //object(carshowbann_sfsx) (4)
	CreateDynamicObject(3850,-1918.08386230,20.30905914,1060.68945312,0.00000000,0.00000000,87.99731445); //object(carshowbann_sfsx) (5)
	CreateDynamicObject(3850,-1919.85864258,18.65610695,1060.68945312,0.00000000,0.00000000,177.99499512); //object(carshowbann_sfsx) (6)
	CreateDynamicObject(3850,-1919.97387695,15.22746944,1060.68945312,0.00000000,0.00000000,177.98950195); //object(carshowbann_sfsx) (7)
	CreateDynamicObject(3850,-1914.66064453,20.18191910,1060.68945312,0.00000000,0.00000000,87.99499512); //object(carshowbann_sfsx) (8)
	CreateDynamicObject(3850,-1918.29260254,13.48203087,1060.68945312,0.00000000,0.00000000,87.99499512); //object(carshowbann_sfsx) (9)
	CreateDynamicObject(3850,-1914.87670898,13.36492920,1060.68945312,0.00000000,0.00000000,87.99499512); //object(carshowbann_sfsx) (10)
	CreateDynamicObject(3850,-1913.06848145,16.61343193,1060.68945312,0.00000000,0.00000000,177.99499512); //object(carshowbann_sfsx) (11)
	CreateDynamicObject(1704,-1914.10571289,16.99391747,1060.14355469,0.00000000,0.00000000,269.99996948); //object(kb_chair03) (1)
	CreateDynamicObject(1723,-1917.47595215,19.27788162,1060.14355469,0.00000000,0.00000000,0.00000000); //object(mrk_seating1) (1)
	CreateDynamicObject(1723,-1918.73937988,15.88104534,1060.14355469,0.00000000,0.00000000,88.00000000); //object(mrk_seating1) (2)
	CreateDynamicObject(1723,-1915.28344727,14.35449409,1060.14355469,0.00000000,0.00000000,177.99499512); //object(mrk_seating1) (3)
	CreateDynamicObject(1827,-1916.28442383,16.80001450,1060.14355469,0.00000000,0.00000000,0.00000000); //object(man_sdr_tables) (1)
	CreateDynamicObject(1572,-1886.03247070,25.55627632,1060.71423340,0.00000000,0.00000000,158.00000000); //object(cj_air_trolly) (1)
	CreateDynamicObject(1572,-1886.64379883,29.08264732,1060.71423340,0.00000000,0.00000000,175.99987793); //object(cj_air_trolly) (2)
	CreateDynamicObject(1572,-1887.93261719,24.25136566,1060.71423340,0.00000000,0.00000000,175.99548340); //object(cj_air_trolly) (3)
	CreateDynamicObject(2773,-1891.28588867,9.72731018,1060.66076660,0.00000000,0.00000000,0.00000000); //object(cj_airprt_bar) (1)
	CreateDynamicObject(2773,-1886.10632324,11.94846344,1060.66076660,0.00000000,0.00000000,269.99996948); //object(cj_airprt_bar) (2)
	CreateDynamicObject(2773,-1888.15246582,11.93920422,1060.66076660,0.00000000,0.00000000,269.99450684); //object(cj_airprt_bar) (3)
	CreateDynamicObject(2773,-1890.20288086,11.95936108,1060.66076660,0.00000000,0.00000000,269.99450684); //object(cj_airprt_bar) (4)
	CreateDynamicObject(2773,-1924.67517090,9.72974396,1060.66076660,0.00000000,0.00000000,0.00000000); //object(cj_airprt_bar) (5)
	CreateDynamicObject(2773,-1924.66455078,11.63750362,1060.66076660,0.00000000,0.00000000,0.00000000); //object(cj_airprt_bar) (6)
	CreateDynamicObject(2773,-1927.45581055,9.79865837,1060.66076660,0.00000000,0.00000000,0.00000000); //object(cj_airprt_bar) (7)
	CreateDynamicObject(2773,-1927.46936035,11.70828915,1060.66076660,0.00000000,0.00000000,0.00000000); //object(cj_airprt_bar) (8)
	CreateDynamicObject(2773,-1925.99975586,9.78141212,1060.66076660,0.00000000,0.00000000,0.00000000); //object(cj_airprt_bar) (9)
	CreateDynamicObject(2773,-1918.22204590,6.52163410,1060.66076660,0.00000000,0.00000000,268.00000000); //object(cj_airprt_bar) (10)
	CreateDynamicObject(2773,-1918.22497559,5.19272375,1060.66076660,0.00000000,0.00000000,267.99499512); //object(cj_airprt_bar) (11)
	CreateDynamicObject(2773,-1918.11254883,3.64645100,1060.66076660,0.00000000,0.00000000,267.99499512); //object(cj_airprt_bar) (12)
	CreateDynamicObject(1210,-1907.64831543,25.33385849,1060.59228516,90.00000000,179.30346680,180.69650269); //object(briefcase) (1)
	CreateDynamicObject(1210,-1907.65991211,26.45854759,1060.59228516,90.00000000,179.30236816,180.69213867); //object(briefcase) (2)
	CreateDynamicObject(1210,-1909.15844727,26.42445374,1060.59228516,90.00000000,179.31018066,2.68420410); //object(briefcase) (3)
	CreateDynamicObject(1210,-1909.13085938,25.22412872,1060.59228516,90.00000000,180.69223022,357.30230713); //object(briefcase) (4)
	CreateDynamicObject(1210,-1918.30358887,25.47170258,1060.59228516,90.00000000,179.30786133,2.68066406); //object(briefcase) (5)
	CreateDynamicObject(1210,-1919.77233887,25.52063751,1060.59228516,0.00000000,0.00012207,181.98852539); //object(briefcase) (6)
	CreateDynamicObject(8229,-1939.48583984,8.32464790,1062.84472656,0.00000000,0.00000000,0.00000000); //object(vgsbikeschl02) (1)
	CreateDynamicObject(8229,-1938.85388184,21.38716316,1062.84472656,0.00000000,0.00000000,269.99996948); //object(vgsbikeschl02) (2)
	CreateDynamicObject(8229,-1884.84948730,19.48977661,1062.84472656,0.00000000,0.00000000,269.99450684); //object(vgsbikeschl02) (3)
	CreateDynamicObject(8229,-1892.29614258,8.31526089,1062.84472656,0.00000000,0.00000000,359.99450684); //object(vgsbikeschl02) (4)

	//.VIP JHESUS_TUA
	CreateDynamicObject(19457, 1195.07251, -1832.44702, 14.12760,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19457, 1195.05286, -1822.81055, 14.12760,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19457, 1199.78259, -1818.06641, 14.12760,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19457, 1199.78674, -1837.17456, 14.12760,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19365, 1206.18884, -1837.17285, 14.12760,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19457, 1224.20667, -1837.17456, 14.12760,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19457, 1233.73389, -1837.17065, 14.12760,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19457, 1243.36255, -1837.18579, 14.12760,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19457, 1252.97107, -1837.20508, 14.12760,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19365, 1259.33911, -1837.18201, 14.12760,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19365, 1262.53284, -1837.19287, 14.12760,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19365, 1277.25708, -1837.23584, 14.12760,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19365, 1280.47595, -1837.23889, 14.12760,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19457, 1282.01001, -1832.50464, 14.12760,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19457, 1282.00842, -1822.87744, 14.12760,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19457, 1281.99988, -1813.24878, 14.12760,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19457, 1281.99658, -1803.68494, 14.12760,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19365, 1281.99426, -1797.30737, 14.12760,   0.00000, 0.00000, -180.06010);
	CreateDynamicObject(19365, 1281.98865, -1794.89514, 14.12760,   0.00000, 0.00000, -180.06010);
	CreateDynamicObject(19457, 1277.24255, -1793.25623, 14.12760,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19457, 1267.66516, -1793.26294, 14.12760,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19457, 1258.15173, -1793.27722, 14.12760,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(984, 1195.05554, -1824.49683, 16.44140,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 1201.48975, -1817.94397, 16.44140,   0.00000, 0.00000, -88.79999);
	CreateDynamicObject(984, 1195.05933, -1830.80249, 16.44140,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 1201.39331, -1837.21875, 16.44140,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(984, 1225.84497, -1837.13855, 16.48140,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(984, 1238.61182, -1837.15845, 16.48140,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(984, 1251.41260, -1837.18091, 16.48140,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(984, 1257.81848, -1837.18945, 16.48140,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(983, 1278.86169, -1837.24158, 16.48140,   0.00000, 0.00000, -90.00010);
	CreateDynamicObject(984, 1282.04602, -1830.84570, 16.44140,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 1282.04443, -1818.03882, 16.44140,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 1282.05884, -1805.24121, 16.44140,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 1282.02795, -1799.65320, 16.44140,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 1275.64001, -1793.25720, 16.48140,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(984, 1262.81714, -1793.25000, 16.48140,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(18850, 1257.18335, -1769.77625, 22.11448,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2964, 1278.84338, -1800.06494, 12.35930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16151, 1269.12524, -1794.32996, 12.74380,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1432, 1272.79199, -1801.78650, 12.48430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 1268.76953, -1801.77930, 12.48430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 1265.48694, -1801.81091, 12.48430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 1265.78381, -1805.62073, 12.48430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 1268.77869, -1805.88208, 12.48430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 1272.20642, -1805.65393, 12.48430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19457, 1277.16174, -1808.43347, 14.12760,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19457, 1267.61719, -1808.43262, 14.12760,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19394, 1261.23755, -1808.44873, 14.12760,   0.00000, 0.00000, -89.82000);
	CreateDynamicObject(19457, 1254.88892, -1808.46252, 14.12760,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19457, 1249.27051, -1803.79529, 14.12760,   0.00000, 0.00000, -169.44000);
	CreateDynamicObject(8557, 1240.56348, -1834.71753, 13.86650,   0.00000, 0.00000, -180.05991);
	CreateDynamicObject(1502, 1260.49341, -1808.47412, 12.37770,   0.00000, 0.00000, 0.00000);

	//.EXT LSEM
	CreateDynamicObject(2026, 274.43741, 1230.32996, 1568.32654,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2026, 283.52728, 1234.42603, 1568.31689,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2026, 289.42520, 1241.90222, 1568.30652,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2026, 262.29910, 1230.00842, 1568.28076,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2026, 283.29654, 1224.71069, 1568.29663,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3749, 2319.98877, -2663.27271, 18.21620,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3749, 2384.08813, -2399.97559, 18.21620,   0.00000, 0.00000, -133.85985);
	CreateDynamicObject(3749, 2320.52539, -2117.25781, 18.00590,   0.00000, 0.00000, -135.05975);
	CreateDynamicObject(3887, 2798.82056, -2535.33667, 20.66620,   0.00000, 0.00000, -360.42001);
	CreateDynamicObject(3707, 2700.92188, -2536.59155, 20.26000,   0.00000, 0.00000, -270.12000);
	CreateDynamicObject(3887, 2769.06958, -2528.89111, 20.66620,   0.00000, 0.00000, 180.05991);
	CreateDynamicObject(3866, 2792.36426, -2486.54272, 20.18420,   0.00000, 0.00000, 87.84003);
	CreateDynamicObject(3753, 2768.20972, -2872.05884, 2.40222,   0.00000, 0.00000, -1.62000);
	CreateDynamicObject(3928, 2725.54199, -3031.39575, 12.00367,   0.00000, 0.00000, 2.06234);
	CreateDynamicObject(3928, 2726.53760, -2977.40625, 12.00367,   0.00000, 0.00000, 2.06234);
	CreateDynamicObject(3624, 2773.54639, -2905.46533, 16.34060,   0.00000, 0.00000, -0.96000);
	CreateDynamicObject(3928, 2769.11084, -2977.78833, 12.00367,   0.00000, 0.00000, -2.43766);
	CreateDynamicObject(3928, 2770.57397, -3028.83105, 12.00367,   0.00000, 0.00000, -2.43766);
	CreateDynamicObject(3624, 2772.11377, -2938.65259, 16.34060,   0.00000, 0.00000, -0.96000);
	CreateDynamicObject(19340, 2748.10645, -2966.45337, 7.99000,   0.00000, 0.00000, 179.57970);

	// Pisos estáticos
	CreateObject(10767, 2657.14453, -2921.80420, -3.46998,   0.00000, 0.00000, -46.02000, 400.0);
	CreateObject(10766, 2529.64429, -2919.54663, 9.19900,   0.00000, 0.00000, 88.98000, 400.0);
	CreateObject(19340, 2748.10742, -2966.45337, 0.49040,   0.00000, 0.00000, 179.57970, 400.0);

	//.EXT RUSA
	CreateDynamicObject(9339, 1041.65100, -366.76959, 73.47140,   0.00000, 0.00000, -91.91998);
	CreateDynamicObject(3749, 1019.52570, -365.57584, 78.33280,   0.00000, 0.00000, -2.76000);
	CreateDynamicObject(9339, 1067.53992, -367.64236, 73.47140,   0.00000, 0.00000, -91.91998);
	CreateDynamicObject(9339, 1093.46021, -368.50320, 73.47140,   0.00000, 0.00000, -91.91998);
	CreateDynamicObject(9339, 1110.27844, -369.06119, 73.47140,   0.00000, 0.00000, -91.92000);
	CreateDynamicObject(9339, 1110.27832, -369.06119, 72.31140,   0.00000, 0.00000, -91.92000);
	CreateDynamicObject(9339, 1122.93384, -356.59357, 73.47140,   0.00000, 0.00000, -178.56006);
	CreateDynamicObject(9339, 1122.93384, -356.59360, 72.13140,   0.00000, 0.00000, -178.56010);
	CreateDynamicObject(9339, 1122.28040, -330.64951, 73.47140,   0.00000, 0.00000, -178.56006);
	CreateDynamicObject(9339, 1121.62537, -304.66180, 73.47140,   0.00000, 0.00000, -178.56006);
	CreateDynamicObject(9339, 1121.46606, -298.43469, 73.47140,   0.00000, 0.00000, -178.56006);
	CreateDynamicObject(9339, 1108.16516, -285.11121, 73.47140,   0.00000, 0.00000, -91.92000);
	CreateDynamicObject(9339, 1121.46606, -298.43469, 72.15140,   0.00000, 0.00000, -178.56010);
	CreateDynamicObject(9339, 1108.16516, -285.11121, 72.11140,   0.00000, 0.00000, -91.92000);
	CreateDynamicObject(9339, 1082.42615, -284.23068, 73.47140,   0.00000, 0.00000, -91.92000);
	CreateDynamicObject(9339, 1056.41040, -283.35580, 73.47140,   0.00000, 0.00000, -91.92000);
	CreateDynamicObject(9339, 1030.43408, -282.47174, 73.47140,   0.00000, 0.00000, -91.92000);
	CreateDynamicObject(9339, 1022.53571, -282.21552, 73.47140,   0.00000, 0.00000, -91.92000);
	CreateDynamicObject(9339, 1009.95355, -351.81570, 73.47140,   0.00000, 0.00000, -179.76001);
	CreateDynamicObject(9339, 1009.85565, -326.37631, 73.47140,   0.00000, 0.00000, -179.76001);
	CreateDynamicObject(9339, 1009.74738, -300.48798, 73.47140,   0.00000, 0.00000, -179.76001);
	CreateDynamicObject(9339, 1009.69751, -294.76620, 73.47140,   0.00000, 0.00000, -179.76001);
	CreateDynamicObject(8674, 1009.95782, -357.89731, 75.60120,   0.02000, 0.00000, -89.76000);
	CreateDynamicObject(8674, 1009.89423, -347.58655, 75.60120,   0.02000, 0.00000, -89.76000);
	CreateDynamicObject(8674, 1009.86340, -337.30280, 75.60120,   0.02000, 0.00000, -89.76000);
	CreateDynamicObject(8674, 1009.83038, -326.99170, 75.60120,   0.02000, 0.00000, -89.76000);
	CreateDynamicObject(8674, 1009.79852, -316.71069, 75.60120,   0.02000, 0.00000, -89.76000);
	CreateDynamicObject(8674, 1009.73547, -306.41772, 75.60120,   0.02000, 0.00000, -89.76000);
	CreateDynamicObject(8674, 1009.68658, -296.11655, 75.60120,   0.02000, 0.00000, -89.76000);
	CreateDynamicObject(8674, 1009.65863, -286.88483, 75.60120,   0.02000, 0.00000, -89.76000);
	CreateDynamicObject(8674, 1014.75824, -281.88046, 75.58120,   0.02000, 0.00000, -181.92010);
	CreateDynamicObject(8674, 1025.04614, -282.23770, 75.58120,   0.02000, 0.00000, -181.92010);
	CreateDynamicObject(8674, 1035.31104, -282.57693, 75.58120,   0.02000, 0.00000, -181.92010);
	CreateDynamicObject(8674, 1045.57373, -282.93646, 75.58120,   0.02000, 0.00000, -181.92010);
	CreateDynamicObject(8674, 1055.82825, -283.28101, 75.58120,   0.02000, 0.00000, -181.92010);
	CreateDynamicObject(8674, 1066.12708, -283.62418, 75.58120,   0.02000, 0.00000, -181.92010);
	CreateDynamicObject(8674, 1076.42139, -283.98224, 75.58120,   0.02000, 0.00000, -181.92010);
	CreateDynamicObject(8674, 1086.70056, -284.32449, 75.58120,   0.02000, 0.00000, -181.92010);
	CreateDynamicObject(8674, 1096.99182, -284.67032, 75.58120,   0.02000, 0.00000, -181.92010);
	CreateDynamicObject(8674, 1107.28906, -285.01532, 75.58120,   0.02000, 0.00000, -181.92010);
	CreateDynamicObject(8674, 1116.04370, -285.31870, 75.58120,   0.02000, 0.00000, -181.92010);
	CreateDynamicObject(8674, 1121.33337, -290.61029, 75.58120,   0.02000, 0.00000, -88.56000);
	CreateDynamicObject(8674, 1121.59729, -300.90161, 75.58120,   0.02000, 0.00000, -88.56000);
	CreateDynamicObject(8674, 1121.86340, -311.20859, 75.58120,   0.02000, 0.00000, -88.56000);
	CreateDynamicObject(8674, 1122.11670, -321.49539, 75.58120,   0.02000, 0.00000, -88.56000);
	CreateDynamicObject(8674, 1122.38037, -331.77982, 75.58120,   0.02000, 0.00000, -88.56000);
	CreateDynamicObject(8674, 1122.62634, -342.06366, 75.58120,   0.02000, 0.00000, -88.56000);
	CreateDynamicObject(8674, 1122.88013, -352.33203, 75.58120,   0.02000, 0.00000, -88.56000);
	CreateDynamicObject(8674, 1123.12256, -362.62704, 75.58120,   0.02000, 0.00000, -88.56000);
	CreateDynamicObject(8674, 1123.15112, -364.40689, 75.58120,   0.02000, 0.00000, -88.56000);
	CreateDynamicObject(8674, 1118.16492, -369.35077, 75.60120,   0.02000, 0.00000, -181.92010);
	CreateDynamicObject(8674, 1107.86218, -368.99277, 75.60120,   0.02000, 0.00000, -181.92010);
	CreateDynamicObject(8674, 1097.58459, -368.63297, 75.60120,   0.02000, 0.00000, -181.92010);
	CreateDynamicObject(8674, 1087.28503, -368.28552, 75.60120,   0.02000, 0.00000, -181.92010);
	CreateDynamicObject(8674, 1077.00574, -367.93918, 75.60120,   0.02000, 0.00000, -181.92010);
	CreateDynamicObject(8674, 1066.72693, -367.59311, 75.60120,   0.02000, 0.00000, -181.92010);
	CreateDynamicObject(8674, 1056.43152, -367.24969, 75.60120,   0.02000, 0.00000, -181.92010);
	CreateDynamicObject(8674, 1046.14465, -366.89474, 75.60120,   0.02000, 0.00000, -181.92010);
	CreateDynamicObject(8674, 1035.84192, -366.54538, 75.60120,   0.02000, 0.00000, -181.92010);
	CreateDynamicObject(8674, 1033.97229, -366.49368, 75.60120,   0.02000, 0.00000, -181.92010);
	CreateDynamicObject(3603, 1101.10754, -310.39401, 78.71690,   0.00000, 0.00000, 90.17994);
	CreateDynamicObject(3934, 1068.82251, -352.46921, 72.98270,   0.00000, 0.00000, -91.74000);
	CreateDynamicObject(3934, 1045.68250, -352.46921, 72.98270,   0.00000, 0.00000, -91.74000);
	CreateDynamicObject(13206, 1116.35779, -341.24011, 73.05980,   0.00000, 0.00000, 89.94000);
	CreateDynamicObject(13206, 1116.35779, -360.80011, 73.05980,   0.00000, 0.00000, 89.94000);
	CreateDynamicObject(8674, 1033.97229, -366.49371, 78.36120,   0.02000, 0.00000, -181.92010);
	CreateDynamicObject(8674, 1035.84192, -366.54541, 78.36120,   0.02000, 0.00000, -181.92010);
	CreateDynamicObject(8674, 1046.14465, -366.89471, 78.36120,   0.02000, 0.00000, -181.92010);
	CreateDynamicObject(8674, 1056.43152, -367.24969, 78.36120,   0.02000, 0.00000, -181.92010);
	CreateDynamicObject(8674, 1066.72693, -367.59311, 78.36120,   0.02000, 0.00000, -181.92010);
	CreateDynamicObject(8674, 1077.00574, -367.93921, 78.36120,   0.02000, 0.00000, -181.92010);
	CreateDynamicObject(8674, 1087.28503, -368.28549, 78.36120,   0.02000, 0.00000, -181.92010);
	CreateDynamicObject(8674, 1097.58459, -368.63300, 78.36120,   0.02000, 0.00000, -181.92010);
	CreateDynamicObject(8674, 1107.86218, -368.99280, 78.36120,   0.02000, 0.00000, -181.92010);
	CreateDynamicObject(8674, 1118.16492, -369.35080, 78.36120,   0.02000, 0.00000, -181.92010);
	CreateDynamicObject(8674, 1123.15112, -364.40689, 78.36120,   0.02000, 0.00000, -88.56000);
	CreateDynamicObject(8674, 1123.12256, -362.62701, 78.36120,   0.02000, 0.00000, -88.56000);
	CreateDynamicObject(8674, 1122.88013, -352.33200, 78.36120,   0.02000, 0.00000, -88.56000);
	CreateDynamicObject(8674, 1122.62634, -342.06369, 78.36120,   0.02000, 0.00000, -88.56000);
	CreateDynamicObject(8674, 1122.38037, -331.77979, 78.36120,   0.02000, 0.00000, -88.56000);
	CreateDynamicObject(8674, 1122.11670, -321.49539, 78.36120,   0.02000, 0.00000, -88.56000);
	CreateDynamicObject(8674, 1121.86340, -311.20859, 78.36120,   0.02000, 0.00000, -88.56000);
	CreateDynamicObject(8674, 1121.59729, -300.90161, 78.36120,   0.02000, 0.00000, -88.56000);
	CreateDynamicObject(8674, 1121.33337, -290.61029, 78.36120,   0.02000, 0.00000, -88.56000);
	CreateDynamicObject(8674, 1116.04370, -285.31870, 78.36120,   0.02000, 0.00000, -181.92010);
	CreateDynamicObject(8674, 1107.28906, -285.01529, 78.36120,   0.02000, 0.00000, -181.92010);
	CreateDynamicObject(8674, 1096.99182, -284.67029, 78.36120,   0.02000, 0.00000, -181.92010);
	CreateDynamicObject(8674, 1086.70056, -284.32449, 78.36120,   0.02000, 0.00000, -181.92010);
	CreateDynamicObject(8674, 1076.42139, -283.98221, 78.36120,   0.02000, 0.00000, -181.92010);
	CreateDynamicObject(8674, 1066.12708, -283.62421, 78.36120,   0.02000, 0.00000, -181.92010);
	CreateDynamicObject(8674, 1055.82825, -283.28101, 78.36120,   0.02000, 0.00000, -181.92010);
	CreateDynamicObject(8674, 1045.57446, -282.91650, 78.36120,   0.02000, 0.00000, -181.92010);
	CreateDynamicObject(8674, 1035.31104, -282.57690, 78.36120,   0.02000, 0.00000, -181.92010);
	CreateDynamicObject(8674, 1025.04614, -282.23770, 78.36120,   0.02000, 0.00000, -181.92010);
	CreateDynamicObject(8674, 1014.75818, -281.88049, 78.36120,   0.02000, 0.00000, -181.92010);
	CreateDynamicObject(8674, 1009.95782, -357.89731, 78.36120,   0.02000, 0.00000, -89.76000);
	CreateDynamicObject(8674, 1009.89423, -347.58649, 78.36120,   0.02000, 0.00000, -89.76000);
	CreateDynamicObject(8674, 1009.86340, -337.30280, 78.36120,   0.02000, 0.00000, -89.76000);
	CreateDynamicObject(8674, 1009.83038, -326.99170, 78.36120,   0.02000, 0.00000, -89.76000);
	CreateDynamicObject(8674, 1009.79852, -316.71069, 78.36120,   0.02000, 0.00000, -89.76000);
	CreateDynamicObject(8674, 1009.73547, -306.41769, 78.36120,   0.02000, 0.00000, -89.76000);
	CreateDynamicObject(8674, 1009.68658, -296.11649, 78.36120,   0.02000, 0.00000, -89.76000);
	CreateDynamicObject(8674, 1009.65863, -286.88480, 78.36120,   0.02000, 0.00000, -89.76000);

	//.EXT AYUNTAMIENTO
	new
	    texturedobjid;

	texturedobjid = CreateObject(3980, 1479.76917, -1789.67566, 22.65472,   0.00000, 0.00000, 0.00000, 300.0); // Ayunta
	SetObjectMaterial(texturedobjid,10,6134,"venice_law","stonewall_la",0);
	SetObjectMaterial(texturedobjid,8,6134,"venice_law","stonewall_la",0);
	SetObjectMaterial(texturedobjid,3,9332,"newstuff_sfn","ahoodfence2",0);
	SetObjectMaterial(texturedobjid,2,6134,"venice_law","stonewall_la",0);
	SetObjectMaterial(texturedobjid,4,6134,"venice_law","stonewall_la",0);

	texturedobjid = CreateObject(4186, 1479.55811, -1693.12122, 19.58420,   0.00000, 0.00000, 0.00000, 300.0); // Plaza 1
	SetObjectMaterial(texturedobjid,2,6134,"venice_law","stonewall_la",0);
	SetObjectMaterial(texturedobjid,3,9332,"newstuff_sfn","ahoodfence2",0);

	texturedobjid = CreateObject(3985, 1479.56555, -1631.44543, 12.08810,   0.00000, 0.00000, 0.00000, 300.0); // Plaza 2
	SetObjectMaterial(texturedobjid,2,6134,"venice_law","stonewall_la",0);
	SetObjectMaterial(texturedobjid,3,9332,"newstuff_sfn","ahoodfence2",0);


	//.EXT LSPD2
	CreateObject(7184, 2019.26660, -2036.31494, 14.64030,   0.00000, 0.00000, -270.29990, 400.0);
	CreateObject(7009, 2094.66968, -2064.16284, 26.47090,   0.00000, 0.00000, 0.00000, 400.0);
	CreateDynamicObject(3578, 2055.70801, -2100.08228, 11.79290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3578, 2061.11011, -2095.20996, 11.79290,   0.00000, 0.00000, 90.30000);
	CreateDynamicObject(3578, 2050.30127, -2095.18384, 11.79290,   0.00000, 0.00000, 90.30000);
	CreateDynamicObject(1557, 2052.61328, -2094.79736, 12.58660,   0.00000, 0.00000, -0.72000);
	CreateDynamicObject(1557, 2055.61426, -2094.82690, 12.58660,   0.00000, 0.00000, -180.35970);
	CreateDynamicObject(19452, 2115.84888, -2068.79883, 14.93250,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19452, 2115.84888, -2068.79883, 11.43250,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19452, 2118.39990, -2071.86035, 14.93250,   0.00000, 0.00000, 0.18000);
	CreateDynamicObject(19452, 2118.39990, -2072.02026, 11.45250,   0.00000, 0.00000, 0.18000);
	CreateDynamicObject(19452, 2113.69312, -2076.76001, 14.93250,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19452, 2106.92285, -2076.80371, 14.93250,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19433, 2103.47485, -2077.26270, 14.93950,   0.00000, 0.00000, -55.92000);
	CreateDynamicObject(19433, 2102.16553, -2078.14502, 14.93950,   0.00000, 0.00000, -55.92000);
	CreateDynamicObject(19433, 2101.84204, -2078.38037, 14.93950,   0.00000, 0.00000, -55.92000);
	CreateDynamicObject(19433, 2100.80420, -2079.09619, 14.71950,   0.00000, 0.00000, -54.89999);
	CreateDynamicObject(19433, 2099.68579, -2079.85767, 14.25930,   0.00000, 0.00000, -55.68000);
	CreateDynamicObject(19433, 2098.47974, -2080.65625, 13.77930,   0.00000, 0.00000, -55.68000);
	CreateDynamicObject(19433, 2097.29419, -2081.46289, 13.35930,   0.00000, 0.00000, -55.68000);
	CreateDynamicObject(19433, 2096.01074, -2082.34766, 12.85930,   0.00000, 0.00000, -55.68000);
	CreateDynamicObject(19433, 2094.69189, -2083.24902, 12.17930,   0.00000, 0.00000, -55.68000);
	CreateDynamicObject(19433, 2093.44189, -2084.20557, 11.69930,   0.00000, 0.00000, -52.38000);
	CreateDynamicObject(19433, 2092.28540, -2084.98730, 11.29930,   0.00000, 0.00000, -60.12001);
	CreateDynamicObject(19452, 2106.92285, -2076.80371, 11.45250,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19452, 2113.69312, -2076.76001, 11.45250,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19433, 2103.47485, -2077.26270, 11.45250,   0.00000, 0.00000, -55.92000);
	CreateDynamicObject(19433, 2102.16553, -2078.14502, 11.45250,   0.00000, 0.00000, -55.92000);
	CreateDynamicObject(19433, 2101.84204, -2078.38037, 11.45250,   0.00000, 0.00000, -55.92000);
	CreateDynamicObject(19433, 2100.80420, -2079.09619, 11.23250,   0.00000, 0.00000, -54.90000);
	CreateDynamicObject(970, 2118.47339, -2074.40015, 17.20680,   0.00000, 0.00000, -89.82000);
	CreateDynamicObject(970, 2118.40088, -2066.47607, 17.20680,   0.00000, 0.00000, -89.82000);
	CreateDynamicObject(970, 2116.39185, -2076.46313, 17.20680,   0.00000, 0.00000, -179.99969);
	CreateDynamicObject(970, 2112.25171, -2076.46313, 17.20680,   0.00000, 0.00000, -179.99969);
	CreateDynamicObject(970, 2108.11182, -2076.46313, 17.20680,   0.00000, 0.00000, -179.99969);
	CreateDynamicObject(970, 2106.91992, -2076.44360, 17.20680,   0.00000, 0.00000, -179.99969);
	CreateDynamicObject(970, 2103.08594, -2077.53467, 17.20680,   0.00000, 0.00000, -148.43985);
	CreateDynamicObject(970, 2118.45361, -2070.26025, 17.20680,   0.00000, 0.00000, -89.82000);
	CreateDynamicObject(1557, 2105.75708, -2067.94043, 16.69850,   0.00000, 0.00000, -180.23970);
	CreateDynamicObject(1557, 2102.75562, -2067.92383, 16.69990,   0.00000, 0.00000, -0.48000);
	CreateDynamicObject(8838, 2147.57056, -2074.86743, 14.05380,   0.00000, 0.00000, -44.22001);
	CreateDynamicObject(8838, 2122.49438, -2099.59863, 14.05380,   0.00000, 0.00000, -185.33986);
	CreateDynamicObject(19377, 2010.29309, -2091.53662, 12.46330,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 2010.38782, -2081.91455, 12.46330,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 2010.38782, -2072.29468, 12.46330,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 2010.44788, -2062.67456, 12.46330,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 2010.52795, -2043.99463, 12.46330,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 2010.46790, -2053.61475, 12.46330,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 2011.03735, -2034.37598, 12.46330,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 2021.02795, -2043.99463, 12.46330,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(8838, 2182.34180, -2109.06201, 14.05380,   0.00000, 0.00000, -44.22000);
	CreateDynamicObject(19377, 2011.03735, -2028.75598, 12.46330,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(8674, 2110.21216, -2020.49756, 13.86490,   0.00000, 0.00000, -45.78000);
	CreateDynamicObject(8674, 2102.98169, -2013.18274, 13.86490,   0.00000, 0.00000, -44.81998);
	CreateDynamicObject(8674, 2095.68091, -2005.94324, 13.86490,   0.00000, 0.00000, -44.81998);
	CreateDynamicObject(8674, 2088.36182, -1998.69312, 13.86490,   0.00000, 0.00000, -44.81998);
	CreateDynamicObject(8674, 2081.06177, -1991.44592, 13.86490,   0.00000, 0.00000, -44.81998);
	CreateDynamicObject(8674, 2073.75049, -1984.22131, 13.86490,   0.00000, 0.00000, -44.81998);
	CreateDynamicObject(8674, 2065.55518, -1978.20081, 13.86490,   0.00000, 0.00000, -27.83997);
	CreateDynamicObject(8674, 2059.84937, -1980.81348, 13.86490,   0.00000, 0.00000, 77.03999);
	CreateDynamicObject(8674, 2059.40210, -1990.92639, 13.86490,   0.00000, 0.00000, 97.74002);
	CreateDynamicObject(8674, 2060.78638, -2001.12292, 13.86490,   0.00000, 0.00000, 97.74002);
	CreateDynamicObject(8674, 2063.11890, -2011.10291, 13.86490,   0.00000, 0.00000, 108.72002);
	CreateDynamicObject(8674, 2065.84546, -2020.96960, 13.86490,   0.00000, 0.00000, 102.06001);
	CreateDynamicObject(8674, 2065.84546, -2020.96960, 16.76490,   0.00000, 0.00000, 102.06000);
	CreateDynamicObject(8674, 2063.10010, -2011.10986, 16.76490,   0.00000, 0.00000, 108.72000);
	CreateDynamicObject(8674, 2060.78638, -2001.12292, 16.76490,   0.00000, 0.00000, 97.74000);
	CreateDynamicObject(8674, 2059.40210, -1990.92639, 16.76490,   0.00000, 0.00000, 97.74000);
	CreateDynamicObject(8674, 2059.84937, -1980.81348, 16.76490,   0.00000, 0.00000, 77.04000);
	CreateDynamicObject(8674, 2065.55518, -1978.20081, 16.76490,   0.00000, 0.00000, -27.84000);
	CreateDynamicObject(8674, 2073.75049, -1984.22131, 16.76490,   0.00000, 0.00000, -44.82000);
	CreateDynamicObject(8674, 2081.06177, -1991.44592, 16.76490,   0.00000, 0.00000, -44.82000);
	CreateDynamicObject(8674, 2088.36182, -1998.69312, 16.76490,   0.00000, 0.00000, -44.82000);
	CreateDynamicObject(8674, 2095.68091, -2005.94324, 16.76490,   0.00000, 0.00000, -44.82000);
	CreateDynamicObject(8674, 2102.98169, -2013.18274, 16.76490,   0.00000, 0.00000, -44.82000);
	CreateDynamicObject(8674, 2110.21216, -2020.49756, 16.76490,   0.00000, 0.00000, -45.78000);
	CreateDynamicObject(1557, 2084.54175, -2023.93250, 12.51410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2632, 2101.86157, -2022.02539, 12.53549,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(946, 2084.84619, -2009.07983, 14.70780,   0.00000, 0.00000, 43.26002);
	CreateDynamicObject(946, 2062.07007, -1986.42590, 14.70780,   0.00000, 0.00000, -136.67996);
	CreateDynamicObject(2114, 2076.82373, -2001.31897, 12.63730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1810, 2074.86304, -2023.32593, 12.51590,   0.00000, 0.00000, -180.53996);
	CreateDynamicObject(1810, 2073.69556, -2023.25720, 12.51590,   0.00000, 0.00000, -180.53996);
	CreateDynamicObject(1810, 2072.53613, -2023.17017, 12.51590,   0.00000, 0.00000, -180.53996);
	CreateDynamicObject(2632, 2101.08447, -2016.51685, 12.53549,   0.00000, 0.00000, 2.64000);

	new blankobj;

	blankobj = CreateDynamicObject(10183, 2177.12964, -2106.28149, 12.55590,   0.00000, 0.00000, 1.44005);
	SetDynamicObjectMaterial(blankobj, 0, -1, "none", "none", 0xFFFFFF00);

	blankobj = CreateDynamicObject(10183, 2147.99121, -2077.89453, 12.55590,   0.00000, 0.00000, 0.72000);
	SetDynamicObjectMaterial(blankobj, 0, -1, "none", "none", 0xFFFFFF00);

	blankobj = CreateDynamicObject(10183, 2122.90186, -2097.97827, 12.55590,   0.00000, 0.00000, -139.92029);
	SetDynamicObjectMaterial(blankobj, 0, -1, "none", "none", 0xFFFFFF00);


	//.INT OFICINA DE PAGOS LSPD2
	new
		WallTextured[16];

	WallTextured[0] = CreateDynamicObject(19452, 272.59201, 185.40820, 1007.71179,   0.00000, 0.00000, 0.00000);
	WallTextured[1] = CreateDynamicObject(19452, 272.59201, 185.40820, 1011.19177,   0.00000, 0.00000, 0.00000);
	WallTextured[2] = CreateDynamicObject(19452, 272.59201, 175.84821, 1007.71179,   0.00000, 0.00000, 0.00000);
	WallTextured[3] = CreateDynamicObject(19452, 272.59201, 175.84821, 1011.19177,   0.00000, 0.00000, 0.00000);
	WallTextured[4] = CreateDynamicObject(19452, 272.59201, 166.26820, 1007.71179,   0.00000, 0.00000, 0.00000);
	WallTextured[5] = CreateDynamicObject(19452, 272.59201, 166.26820, 1011.21179,   0.00000, 0.00000, 0.00000);
	WallTextured[6] = CreateDynamicObject(19452, 277.39911, 189.17670, 1009.33582,   0.00000, 0.00000, -90.00000);
	WallTextured[7] = CreateDynamicObject(19452, 277.39911, 189.17670, 1005.87579,   0.00000, 0.00000, -90.00000);
	WallTextured[8] = CreateDynamicObject(19452, 286.97910, 189.17670, 1005.87579,   0.00000, 0.00000, -90.00000);
	WallTextured[9] = CreateDynamicObject(19452, 286.97910, 189.17670, 1009.37579,   0.00000, 0.00000, -90.00000);
	WallTextured[10] = CreateDynamicObject(19452, 296.57910, 189.17670, 1005.87579,   0.00000, 0.00000, -90.00000);
	WallTextured[11] = CreateDynamicObject(19452, 296.57910, 189.17670, 1009.35577,   0.00000, 0.00000, -90.00000);
	WallTextured[12] = CreateDynamicObject(19452, 306.15909, 189.17670, 1005.87579,   0.00000, 0.00000, -90.00000);
	WallTextured[13] = CreateDynamicObject(19452, 306.15909, 189.17670, 1009.35577,   0.00000, 0.00000, -90.00000);
	WallTextured[14] = CreateDynamicObject(19452, 289.12143, 167.59956, 1005.87579,   0.00000, 0.00000, -90.00000);
	WallTextured[15] = CreateDynamicObject(19452, 289.12140, 167.59959, 1009.35577,   0.00000, 0.00000, -90.00000);

	Loop(i, sizeof(WallTextured), 0)
	    SetDynamicObjectMaterial(WallTextured[i], 0, 14853, "gen_prgas" ,"office_wallnu1");

	CreateDynamicObject(1557, 286.62460, 167.69431, 1006.15479,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1557, 286.93921, 167.62360, 1006.15479,   0.00000, 0.00000, -14.34000);
	CreateDynamicObject(1557, 286.93921, 167.62360, 1006.15479,   0.00000, 0.00000, -14.34000);
	CreateDynamicObject(1557, 289.63959, 167.69431, 1006.15479,   0.00000, 0.00000, -180.12010);
	CreateDynamicObject(2773, 298.02219, 178.62544, 1006.67108,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 299.98270, 178.63535, 1006.67108,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 299.04260, 179.58083, 1006.67108,   0.00000, 0.00000, 89.81995);
	CreateDynamicObject(2773, 297.12259, 179.58080, 1006.67108,   0.00000, 0.00000, 89.82000);
	CreateDynamicObject(2773, 296.14221, 178.62540, 1006.67108,   0.00000, 0.00000, 0.00000);

	//.OTHER CASILLEROS LSEM
	CreateDynamicObject(14782, 1303.65857, -1794.88025, 1565.98450,   0.00000, 0.00000, 179.88000);
	CreateDynamicObject(14782, 1320.09790, -1794.88220, 1565.98450,   0.00000, 0.00000, 179.88000);
	CreateDynamicObject(14782, 1333.01160, -1794.88293, 1565.98450,   0.00000, 0.00000, 179.88000);
	CreateDynamicObject(14782, 1338.25110, -1801.03687, 1565.98450,   0.00000, 0.00000, 89.88007);
	CreateDynamicObject(14782, 1303.37463, -1787.97339, 1565.98450,   0.00000, 0.00000, 0.00008);
	CreateDynamicObject(14782, 1320.40125, -1787.90991, 1565.98450,   0.00000, 0.00000, 0.00008);
	CreateDynamicObject(14782, 1338.02502, -1787.89868, 1565.98450,   0.00000, 0.00000, 0.00008);
	CreateDynamicObject(14782, 1343.87488, -1797.36914, 1565.98450,   0.00000, 0.00000, -89.75987);

	//.INT DEPOSITO
	CreateDynamicObject(14576, 313.19299, 1888.72278, 1998.70825,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 313.34473, 1896.27075, 1992.30774,   0.00000, 0.00000, -90.06000);
	CreateDynamicObject(1506, 312.33890, 1896.11914, 1990.54614,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19386, 313.07870, 1896.20142, 1992.26758,   0.00000, 0.00000, -90.00010);
	CreateDynamicObject(19462, 311.98120, 1876.03491, 1991.66882,   0.00000, 0.00000, -89.93996);
	CreateDynamicObject(1506, 312.46271, 1876.09375, 1990.48987,   0.00000, 0.00000, 0.00000);

	//.EXT F.A
	CreateDynamicObject(3644, 2794.31006, -1911.89478, 15.09160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3644, 2794.13843, -1932.90234, 15.09160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3644, 2793.93408, -1953.97839, 15.09160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3644, 2793.80420, -1974.06274, 15.09160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3644, 2744.30713, -1914.66943, 15.09160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3644, 2744.21094, -1935.74963, 15.09160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3644, 2744.08984, -1956.75781, 15.09160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3644, 2744.02930, -1973.67041, 15.09160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1327, 2760.58789, -1934.91431, 13.00910,   0.00000, -88.00000, 0.00000);
	CreateDynamicObject(12957, 2762.49585, -1983.53015, 13.18590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2677, 2762.39307, -1972.92932, 12.82120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2677, 2776.74487, -1968.24390, 12.82120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2677, 2777.04346, -1938.41797, 12.82120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2677, 2762.45117, -1940.63928, 12.82120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3594, 2776.98633, -1982.37695, 13.04680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(5173, 2823.47559, -1928.97449, 7.83320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(5173, 2823.80518, -1909.17310, 7.83320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(5173, 2823.47559, -1926.37451, 7.83320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(5173, 2823.52539, -1954.34155, 7.82790,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1265, 2725.99976, -1974.12549, 12.96540,   -0.18000, 0.00000, 0.00000);
	CreateDynamicObject(1265, 2730.96436, -1960.87305, 12.96540,   -0.18000, 0.00000, 0.00000);
	CreateDynamicObject(1265, 2728.90527, -1948.48242, 12.96540,   -0.18000, 0.00000, 0.00000);
	CreateDynamicObject(1265, 2727.59106, -1933.59058, 12.96540,   -0.18000, 0.00000, 0.00000);
	CreateDynamicObject(1265, 2728.58276, -1924.57214, 12.96540,   -0.18000, 0.00000, 0.00000);
	CreateDynamicObject(1236, 2731.91895, -1965.21667, 13.14730,   0.00000, 0.00000, -90.60000);
	CreateDynamicObject(1236, 2756.16382, -1963.58643, 13.14730,   0.00000, 0.00000, -90.60000);
	CreateDynamicObject(1236, 2781.82959, -1964.94080, 13.14730,   0.00000, 0.00000, -90.60000);
	CreateDynamicObject(1236, 2789.68823, -2001.70203, 13.14730,   0.00000, 0.00000, -90.60000);
	CreateDynamicObject(1777, 2755.80371, -1965.53564, 13.29380,   0.00000, 0.00000, 84.23998);

	//.EXT 24/7 AYUNTA
	CreateDynamicObject(7035, 1332.24988, -1759.08154, 16.19980,   0.00000, 0.00000, 179.09990);
	CreateDynamicObject(1557, 1350.77380, -1759.56311, 12.45580,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1557, 1353.80029, -1759.60315, 12.45580,   0.00000, 0.00000, 179.03999);
	CreateDynamicObject(7971, 1335.69128, -1828.35254, 17.31630,   0.00000, 0.00000, -90.90000);
	CreateDynamicObject(983, 1324.03137, -1788.60242, 13.22370,   0.00000, 0.00000, -58.20000);
	CreateDynamicObject(983, 1321.34912, -1799.89404, 13.22370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1321.35120, -1793.46277, 13.22370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1379.98254, -1800.82666, 13.24370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1379.98254, -1794.43591, 13.24370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1376.84900, -1790.58240, 13.24370,   0.00000, 0.00000, 78.06002);
	CreateDynamicObject(983, 1324.62329, -1797.63623, 13.22370,   0.00000, 0.00000, -91.20004);
	CreateDynamicObject(983, 1342.89160, -1797.76013, 13.22370,   0.00000, 0.00000, -90.96001);
	CreateDynamicObject(983, 1349.26721, -1797.87683, 13.24370,   0.00000, 0.00000, -90.96000);
	CreateDynamicObject(983, 1355.66809, -1797.98218, 13.20370,   0.00000, 0.00000, -90.96000);
	CreateDynamicObject(983, 1359.02844, -1801.23486, 13.22370,   0.00000, 0.00000, -176.93980);
	CreateDynamicObject(983, 1331.03430, -1797.77502, 13.22370,   0.00000, 0.00000, -91.20000);
	CreateDynamicObject(970, 1377.04126, -1742.30505, 13.06330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1372.90125, -1742.30505, 13.06330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1368.78125, -1742.30505, 13.06330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1364.62134, -1742.30505, 13.06330,   0.00000, 0.00000, 0.72000);
	CreateDynamicObject(970, 1379.14734, -1744.36731, 13.06330,   0.00000, 0.00000, -89.70000);
	CreateDynamicObject(970, 1379.16479, -1748.48755, 13.06330,   0.00000, 0.00000, -89.70000);
	CreateDynamicObject(970, 1379.18555, -1752.61060, 13.06330,   0.00000, 0.00000, -89.70000);
	CreateDynamicObject(970, 1379.21033, -1756.75830, 13.06330,   0.00000, 0.00000, -89.70000);
	CreateDynamicObject(970, 1379.22534, -1760.89954, 13.06330,   0.00000, 0.00000, -89.70000);
	CreateDynamicObject(970, 1379.25427, -1765.03198, 13.06330,   0.00000, 0.00000, -89.70000);
	CreateDynamicObject(970, 1324.53845, -1742.28760, 13.06330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1328.65344, -1742.27795, 13.06330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1332.79480, -1742.26770, 13.06330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1334.51489, -1742.27112, 13.06330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1336.60828, -1744.33972, 13.06330,   0.00000, 0.00000, -89.70000);
	CreateDynamicObject(970, 1336.63330, -1748.48413, 13.06330,   0.00000, 0.00000, -89.70000);
	CreateDynamicObject(970, 1336.65918, -1752.62451, 13.06330,   0.00000, 0.00000, -89.70000);
	CreateDynamicObject(970, 1336.69519, -1756.77539, 13.06330,   0.00000, 0.00000, -89.70000);
	CreateDynamicObject(970, 1336.71191, -1760.93335, 13.06330,   0.00000, 0.00000, -89.70000);

	//.INT CARCEL
	new
	    objectide;

    //- Recepción
    objectide = CreateDynamicObject(19172, 1567.550170, -1483.618408, 1067.930297, 0.0, 0.0, 90.0);
	SetDynamicObjectMaterialText(objectide, 0, " ", 80, "Arial", 35, 0, 0x00FFFF00, 0, 0);
	SetDynamicObjectMaterialText(objectide, 1, "Recepción", 80, "Arial", 35, 0, 0xFFFFFFFF, 0, 0);

    //- Visitas (Cliente)
    objectide = CreateDynamicObject(19172, 1565.214965, -1499.433227, 1067.830200, 0.0, 0.0, 0.4);
	SetDynamicObjectMaterialText(objectide, 0, " ", 80, "Arial", 35, 0, 0x00FFFF00, 0, 0);
	SetDynamicObjectMaterialText(objectide, 1, "Visitas", 80, "Arial", 35, 0, 0xFFFFFFFF, 0, 0);

    //- Cárcel
    objectide = CreateDynamicObject(19172, 1586.155151, -1496.085327, 1066.429443, 0.0, 0.0, 90.0);
	SetDynamicObjectMaterialText(objectide, 0, " ", 80, "Arial", 40, 0, 0x00FFFF00, 0, 0);
	SetDynamicObjectMaterialText(objectide, 1, "Cárceles", 80, "Arial", 40, 0, 0xFFFFFFFF, 0, 0);

	//.INT GARAGE LSPD
	CreateObject(7244, 1991.10339, -862.20502, 1300.59814,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9339, 2029.29541, -836.38141, 1308.94409,   0.00000, 0.00000, 80.22000);
	CreateDynamicObject(7488, 1932.04749, -859.00372, 1280.47144,   0.00000, 0.00000, 89.93999);
	CreateDynamicObject(3037, 1957.81531, -867.39020, 1293.18994,   0.00000, 0.00000, -0.06000);
	CreateDynamicObject(7488, 1990.27563, -798.45135, 1280.47144,   0.00000, 0.00000, 89.93999);

	//.EXT TAXISTAS
	CreateDynamicObject(8841,2132.7202100,-1732.4736300,15.7385000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(4597,2132.0146500,-1735.1163300,12.5462000,0.0000000,0.0000000,0.3600100); //
	CreateDynamicObject(4597,2132.0146500,-1735.1163300,12.5462000,0.0000000,0.0000000,0.3600100); //
	CreateDynamicObject(4597,2131.6728500,-1729.8564500,12.5518000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(970,2106.1201200,-1740.3828100,13.0638000,0.0000000,0.0000000,70.6200000); //
	CreateDynamicObject(966,2107.7023900,-1736.3363000,12.5560000,0.0000000,0.0000000,-107.9400200); //
	CreateDynamicObject(4639,2108.6975100,-1737.9614300,14.2339000,0.0000000,0.0000000,-18.3000000); //
	CreateDynamicObject(970,2110.4465300,-1727.6757800,13.0638000,0.0000000,0.0000000,70.6200000); //
	CreateDynamicObject(970,2111.8190900,-1723.7889400,13.0638000,0.0000000,0.0000000,70.6200000); //
	CreateDynamicObject(970,2114.5358900,-1721.5152600,13.0638000,0.0000000,0.0000000,7.0200000); //
	CreateDynamicObject(970,2107.5107400,-1742.3101800,13.0638000,0.0000000,0.0000000,0.2400000); //
	CreateDynamicObject(970,2111.6555200,-1742.2866200,13.0638000,0.0000000,0.0000000,0.2400000); //
	CreateDynamicObject(970,2115.8012700,-1742.2705100,13.0638000,0.0000000,0.0000000,0.2400000); //
	CreateDynamicObject(970,2119.9582500,-1742.2471900,13.0438000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(970,2124.1145000,-1742.2740500,13.0438000,0.0000000,0.0000000,-0.4200000); //
	CreateDynamicObject(970,2128.2299800,-1742.2780800,13.0438000,0.0000000,0.0000000,0.0600000); //
	CreateDynamicObject(970,2132.3317900,-1742.2796600,13.0438000,0.0000000,0.0000000,0.0600000); //
	CreateDynamicObject(970,2136.4057600,-1742.3000500,13.0438000,0.0000000,0.0000000,0.0600000); //
	CreateDynamicObject(970,2140.5283200,-1742.2985800,13.0438000,0.0000000,0.0000000,0.0600000); //
	CreateDynamicObject(970,2144.6711400,-1742.2971200,13.0438000,0.0000000,0.0000000,0.0600000); //
	CreateDynamicObject(970,2148.8210400,-1742.2866200,13.0438000,0.0000000,0.0000000,0.0600000); //
	CreateDynamicObject(970,2152.9670400,-1742.2710000,13.0438000,0.0000000,0.0000000,0.0600000); //
	CreateDynamicObject(970,2157.1445300,-1742.2716100,13.0438000,0.0000000,0.0000000,0.0600000); //
	CreateDynamicObject(970,2161.2607400,-1742.3068800,13.0438000,0.0000000,0.0000000,-0.1200000); //
	CreateDynamicObject(970,2165.4082000,-1742.3211700,13.0438000,0.0000000,0.0000000,-0.1200000); //
	CreateDynamicObject(970,2169.5522500,-1742.2989500,13.0438000,0.0000000,0.0000000,1.0200000); //
	CreateDynamicObject(970,2173.1003400,-1742.2246100,13.0438000,0.0000000,0.0000000,1.0200000); //
	CreateDynamicObject(970,2175.1201200,-1740.1644300,13.0438000,0.0000000,0.0000000,-89.7000000); //
	CreateDynamicObject(970,2175.0947300,-1736.0344200,13.0438000,0.0000000,0.0000000,-89.7000000); //
	CreateDynamicObject(970,2175.0703100,-1731.9069800,13.0438000,0.0000000,0.0000000,-89.9400000); //
	CreateDynamicObject(970,2175.0752000,-1727.7519500,13.0438000,0.0000000,0.0000000,-89.9400000); //
	CreateDynamicObject(970,2118.6604000,-1721.6005900,13.0638000,0.0000000,0.0000000,-9.3000000); //
	CreateDynamicObject(970,2122.7387700,-1722.2641600,13.0638000,0.0000000,0.0000000,-9.3000000); //
	CreateDynamicObject(970,2126.8579100,-1722.9502000,13.0638000,0.0000000,0.0000000,-9.3000000); //
	CreateDynamicObject(970,2130.9594700,-1723.1604000,13.0638000,0.0000000,0.0000000,3.6600000); //
	CreateDynamicObject(970,2135.0856900,-1722.9401900,13.0638000,0.0000000,0.0000000,2.4600000); //
	CreateDynamicObject(970,2139.2028800,-1722.8216600,13.0638000,0.0000000,0.0000000,0.9600000); //
	CreateDynamicObject(970,2143.3342300,-1722.7519500,13.0638000,0.0000000,0.0000000,0.9600000); //
	CreateDynamicObject(970,2147.4665500,-1722.7450000,13.0638000,0.0000000,0.0000000,-0.8400000); //
	CreateDynamicObject(970,2151.5861800,-1722.8103000,13.0638000,0.0000000,0.0000000,-0.8400000); //
	CreateDynamicObject(970,2155.7507300,-1722.8669400,13.0638000,0.0000000,0.0000000,-0.8400000); //
	CreateDynamicObject(970,2159.9047900,-1722.9279800,13.0638000,0.0000000,0.0000000,-0.8400000); //
	CreateDynamicObject(970,2164.0168500,-1722.9939000,13.0638000,0.0000000,0.0000000,-0.8400000); //
	CreateDynamicObject(970,2168.1540500,-1723.0535900,13.0638000,0.0000000,0.0000000,-0.8400000); //
	CreateDynamicObject(970,2173.6650400,-1724.3092000,13.0438000,0.0000000,0.0000000,-44.0400000); //
	CreateDynamicObject(970,2170.3579100,-1723.0677500,13.0638000,0.0000000,0.0000000,-0.8400000); //
	CreateDynamicObject(968,2107.7360800,-1736.2546400,13.2390000,-0.5400000,-2.4000000,-102.2400000); //

	//.INT DEPOSITO MUNICIPAL
	CreateDynamicObject(10558, 1673.80, -1699.89, 14.53,   0.00, 0.00, -0.12); // Entrada
	CreateDynamicObject(10558, 2319.78, 2446.37, 4.26,   0.00, 0.00, 0.24);
	CreateDynamicObject(19377, 2319.67, 2447.67, 2.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(19377, 2319.69, 2438.06, 2.87,   0.00, 0.00, 360.06);
	CreateDynamicObject(19377, 2294.66, 2495.84, 4.28,   0.00, 0.00, 0.00);
	CreateDynamicObject(19377, 2294.65, 2505.47, 4.28,   0.00, 0.00, 0.00);
	CreateDynamicObject(7244, 2268.82, 2462.97, 0.68,    0.00, 0.00, 0.00);
	CreateDynamicObject(7184, 2251.25, 2490.91, 11.90,   0.00, 0.00, 90.00);

	//.OTHER CARCEL OOC
	CreateDynamicObject(18856, 424.38, -2481.58, -27.49,   0.00, 0.00, 0.20);

	//.EXT PIZZERO
	CreateDynamicObject(3034, 2121.6001, -1822.31006, 14.6, 0, 0, 0);
	CreateDynamicObject(2395, 2120.18994, -1822.69995, 13.69999, 270, 0, 0);

	//.OTHER PUERTA JUZGADO
	CreateDynamicObject(19176, 1411.369262,-1699.351684,14.059483,0,0,54.59999);

	//.INT JUZGADO
	CreateDynamicObject_e(11244,839.0000000,116.0999985,977.5999756,0.0000000,0.0000000,270.0000000); //object(gen_whouse02_sfs01) (1)
	CreateDynamicObject_e(13078,841.4000244,117.9000015,985.7999878,0.0000000,180.0000000,0.0000000); //object(cewrehse07) (1)
	CreateDynamicObject_e(18462,825.5000000,119.9000015,982.0999756,0.0000000,0.0000000,0.0000000); //object(cs_detrok10) (1)
	CreateDynamicObject_e(18462,825.5000000,110.3000031,982.0999756,0.0000000,0.0000000,0.0000000); //object(cs_detrok10) (2)
	CreateDynamicObject_e(18462,830.2999878,124.8000031,982.0999756,0.0000000,0.0000000,270.0000000); //object(cs_detrok10) (3)
	CreateDynamicObject_e(18462,834.5999756,120.8000031,982.0999756,0.0000000,0.0000000,180.0000000); //object(cs_detrok10) (4)
	CreateDynamicObject_e(18462,839.4000244,116.0999985,982.0999756,0.0000000,0.0000000,269.9945068); //object(cs_detrok10) (5)
	CreateDynamicObject_e(18462,849.0000000,116.0999985,982.0999756,0.0000000,0.0000000,269.9890137); //object(cs_detrok10) (6)
	CreateDynamicObject_e(18462,852.5999756,111.5000000,982.0999756,0.0000000,0.0000000,179.9890137); //object(cs_detrok10) (7)
	CreateDynamicObject_e(18462,848.0999756,106.9000015,982.0999756,0.0000000,0.0000000,90.0000000); //object(cs_detrok10) (8)
	CreateDynamicObject_e(18462,838.5000000,106.9000015,982.0999756,0.0000000,0.0000000,90.0000000); //object(cs_detrok10) (9)
	CreateDynamicObject_e(18462,829.0000000,106.9000015,982.0999756,0.0000000,0.0000000,90.0000000); //object(cs_detrok10) (10)
	CreateDynamicObject_e(18460,850.7999878,111.5000000,980.4000244,0.0000000,270.0000000,0.0000000); //object(cs_detrok08) (1)
	CreateDynamicObject_e(18460,847.2999878,111.5000000,980.4000244,0.0000000,270.0000000,0.0000000); //object(cs_detrok08) (2)
	CreateDynamicObject_e(18460,843.7999878,111.5000000,980.4000244,0.0000000,270.0000000,0.0000000); //object(cs_detrok08) (3)
	CreateDynamicObject_e(18460,840.2999878,111.5000000,980.4000244,0.0000000,270.0000000,0.0000000); //object(cs_detrok08) (4)
	CreateDynamicObject_e(18460,836.7999878,111.5000000,980.4000244,0.0000000,270.0000000,0.0000000); //object(cs_detrok08) (5)
	CreateDynamicObject_e(18460,833.2999878,111.5000000,980.4000244,0.0000000,270.0000000,0.0000000); //object(cs_detrok08) (6)
	CreateDynamicObject_e(18460,829.7999878,111.5000000,980.4000244,0.0000000,270.0000000,0.0000000); //object(cs_detrok08) (7)
	CreateDynamicObject_e(18460,826.2999878,111.5000000,980.4000244,0.0000000,270.0000000,0.0000000); //object(cs_detrok08) (8)
	CreateDynamicObject_e(18460,826.5000000,121.0999985,980.4000244,0.0000000,270.0000000,0.0000000); //object(cs_detrok08) (9)
	CreateDynamicObject_e(18460,830.0000000,121.0999985,980.4000244,0.0000000,270.0000000,0.0000000); //object(cs_detrok08) (10)
	CreateDynamicObject_e(18460,833.5000000,121.0999985,980.4000244,0.0000000,270.0000000,0.0000000); //object(cs_detrok08) (11)
	CreateDynamicObject_e(16012,830.0000000,124.4000015,982.0000000,0.0000000,0.0000000,0.0000000); //object(des_ntcafe) (1)
	CreateDynamicObject_e(18608,843.4000244,114.1999969,984.0999756,0.0000000,0.0000000,270.0000000); //object(counts_lights01) (1)
	CreateDynamicObject_e(18608,843.0000000,109.6999969,984.0999756,0.0000000,0.0000000,270.0000000); //object(counts_lights01) (2)
	CreateDynamicObject_e(11245,839.5999756,115.9000015,982.0999756,0.0000000,0.0000000,0.0000000); //object(sfsefirehseflag) (1)
	CreateDynamicObject_e(11245,839.7999878,107.0999985,982.0999756,0.0000000,0.0000000,0.0000000); //object(sfsefirehseflag) (2)
	CreateDynamicObject_e(2435,849.0000000,112.8000031,980.5000000,0.0000000,0.0000000,270.0000000); //object(cj_ff_conter_2) (1)
	CreateDynamicObject_e(2435,849.0000000,111.9000015,980.5000000,0.0000000,0.0000000,270.0000000); //object(cj_ff_conter_2) (2)
	CreateDynamicObject_e(2435,849.0000000,111.0000000,980.5000000,0.0000000,0.0000000,270.0000000); //object(cj_ff_conter_2) (3)
	CreateDynamicObject_e(2435,849.0000000,110.0999985,980.5000000,0.0000000,0.0000000,270.0000000); //object(cj_ff_conter_2) (4)
	CreateDynamicObject_e(18460,851.2000122,111.5000000,980.5000000,0.0000000,270.0000000,0.0000000); //object(cs_detrok08) (12)
	CreateDynamicObject_e(18460,851.2000122,111.5000000,980.5999756,0.0000000,270.0000000,0.0000000); //object(cs_detrok08) (13)
	CreateDynamicObject_e(1714,850.7000122,111.5000000,980.7000122,0.0000000,0.0000000,270.0000000); //object(kb_swivelchair1) (1)
	CreateDynamicObject_e(1714,848.5999756,108.4000015,980.5000000,0.0000000,0.0000000,270.0000000); //object(kb_swivelchair1) (2)
	CreateDynamicObject_e(1714,848.7000122,114.5999985,980.5000000,0.0000000,0.0000000,270.0000000); //object(kb_swivelchair1) (3)
	CreateDynamicObject_e(2435,844.2999878,107.4000015,980.2999878,0.0000000,0.0000000,90.0000000); //object(cj_ff_conter_2) (5)
	CreateDynamicObject_e(2435,844.2999878,108.3000031,980.2999878,0.0000000,0.0000000,90.0000000); //object(cj_ff_conter_2) (6)
	CreateDynamicObject_e(2435,844.2999878,115.5999985,980.2999878,0.0000000,0.0000000,90.0000000); //object(cj_ff_conter_2) (7)
	CreateDynamicObject_e(2435,844.2999878,114.6999969,980.2999878,0.0000000,0.0000000,90.0000000); //object(cj_ff_conter_2) (8)
	CreateDynamicObject_e(1671,842.9000244,107.9000015,980.9000244,0.0000000,0.0000000,90.0000000); //object(swivelchair_a) (1)
	CreateDynamicObject_e(1671,843.0999756,115.0999985,980.9000244,0.0000000,0.0000000,90.0000000); //object(swivelchair_a) (2)
	CreateDynamicObject_e(1663,839.0999756,115.0000000,980.9000244,0.0000000,0.0000000,90.0000000); //object(swivelchair_b) (1)
	CreateDynamicObject_e(1663,839.0999756,114.3000031,980.9000244,0.0000000,0.0000000,90.0000000); //object(swivelchair_b) (2)
	CreateDynamicObject_e(1663,839.0999756,113.5000000,980.9000244,0.0000000,0.0000000,90.0000000); //object(swivelchair_b) (3)
	CreateDynamicObject_e(1663,839.0000000,109.5999985,980.9000244,0.0000000,0.0000000,90.0000000); //object(swivelchair_b) (4)
	CreateDynamicObject_e(1663,839.0000000,108.6999969,980.9000244,0.0000000,0.0000000,90.0000000); //object(swivelchair_b) (5)
	CreateDynamicObject_e(1663,839.0000000,107.9000015,980.9000244,0.0000000,0.0000000,90.0000000); //object(swivelchair_b) (6)
	CreateDynamicObject_e(1663,837.0999756,113.4000015,980.9000244,0.0000000,0.0000000,90.0000000); //object(swivelchair_b) (7)
	CreateDynamicObject_e(1663,837.0999756,114.3000031,980.9000244,0.0000000,0.0000000,90.0000000); //object(swivelchair_b) (8)
	CreateDynamicObject_e(1663,837.0999756,115.0000000,980.9000244,0.0000000,0.0000000,90.0000000); //object(swivelchair_b) (9)
	CreateDynamicObject_e(1663,837.2999878,109.5999985,980.9000244,0.0000000,0.0000000,90.0000000); //object(swivelchair_b) (10)
	CreateDynamicObject_e(1663,837.2999878,108.8000031,980.9000244,0.0000000,0.0000000,90.0000000); //object(swivelchair_b) (11)
	CreateDynamicObject_e(1663,837.2999878,108.0000000,980.9000244,0.0000000,0.0000000,90.0000000); //object(swivelchair_b) (12)
	CreateDynamicObject_e(2773,838.2000122,110.6999969,981.0000000,0.0000000,0.0000000,270.0000000); //object(cj_airprt_bar) (1)
	CreateDynamicObject_e(2773,838.2000122,112.6999969,981.0000000,0.0000000,0.0000000,270.0000000); //object(cj_airprt_bar) (2)
	CreateDynamicObject_e(2773,841.2000122,112.6999969,981.0000000,0.0000000,0.0000000,270.0000000); //object(cj_airprt_bar) (3)
	CreateDynamicObject_e(2773,841.2000122,110.6999969,981.0000000,0.0000000,0.0000000,270.0000000); //object(cj_airprt_bar) (4)
	CreateDynamicObject_e(2773,835.4000244,110.6999969,981.0000000,0.0000000,0.0000000,270.0000000); //object(cj_airprt_bar) (5)
	CreateDynamicObject_e(2773,835.5000000,112.6999969,981.0000000,0.0000000,0.0000000,270.0000000); //object(cj_airprt_bar) (6)
	CreateDynamicObject_e(2775,852.2000122,111.5999985,982.7999878,0.0000000,0.0000000,270.0000000); //object(cj_airprt_mon) (1)
	CreateDynamicObject_e(630,832.5999756,123.5999985,981.5000000,0.0000000,0.0000000,0.0000000); //object(veg_palmkb8) (1)
	CreateDynamicObject_e(630,827.5000000,123.8000031,981.5000000,0.0000000,0.0000000,0.0000000); //object(veg_palmkb8) (2)
	CreateDynamicObject_e(630,834.0000000,116.3000031,981.5000000,0.0000000,0.0000000,0.0000000); //object(veg_palmkb8) (4)
	CreateDynamicObject_e(1892,831.7999878,116.0999985,980.5000000,0.0000000,0.0000000,0.0000000); //object(security_gatsh) (1)
	CreateDynamicObject_e(1892,826.7999878,116.0999985,980.5000000,0.0000000,0.0000000,0.0000000); //object(security_gatsh) (2)
	CreateDynamicObject_e(2185,830.5999756,116.0000000,980.5000000,0.0000000,0.0000000,180.0000000); //object(med_office6_desk_1) (1)
	CreateDynamicObject_e(1663,830.0000000,115.0999985,980.9000244,0.0000000,0.0000000,180.0000000); //object(swivelchair_b) (13)

	//.EXT COSECHADORES
	CreateDynamicObject(3276, -378.47, -1516.44, 22.63,   3.14, 0.00, 25.48);
	CreateDynamicObject(3276, -381.59, -1526.81, 22.02,   3.14, 0.00, -78.14);
	CreateDynamicObject(3276, -378.95, -1540.56, 21.61,   3.14, 0.00, -83.96);
	CreateDynamicObject(3276, -377.42, -1554.44, 21.31,   3.14, 0.00, -83.96);
	CreateDynamicObject(3276, -371.16, -1562.53, 21.31,   3.14, 0.00, 3.28);
	CreateDynamicObject(1454, -382.81, -1519.87, 22.47,   356.86, 0.00, 12.22);
	CreateDynamicObject(1454, -379.94, -1533.47, 21.65,   356.86, 0.00, 12.22);
	CreateDynamicObject(1454, -378.42, -1547.55, 21.55,   356.86, 0.00, 0.10);
	CreateDynamicObject(1454, -376.99, -1561.50, 21.25,   356.86, 0.00, 2.14);
	CreateDynamicObject(693, -167.30, -1428.25, 4.42,   3.14, 0.00, 2.38);
	CreateDynamicObject(693, -184.21, -1289.66, 2.55,   3.14, 0.00, 2.38);
	CreateDynamicObject(693, -187.31, -1239.54, -6.17,   3.14, 0.00, 2.38);
	CreateDynamicObject(693, -263.69, -1271.39, -4.21,   3.14, 0.00, 2.38);
	CreateDynamicObject(693, -278.49, -1244.88, -4.21,   3.14, 0.00, 2.38);
	CreateDynamicObject(790, -167.60, -1261.53, 7.28,   3.14, 0.00, 1.37);
	CreateDynamicObject(684, -157.94, -1306.17, 2.45,   0.00, 0.00, 0.00);
	CreateDynamicObject(684, -159.10, -1316.56, 2.35,   0.00, 85.00, -18.00);
	CreateDynamicObject(833, -160.10, -1325.05, 2.95,   0.00, 0.00, 0.00);
	CreateDynamicObject(973, -157.98, -1333.41, 2.88,   0.00, 0.00, 264.06);
	CreateDynamicObject(973, -158.91, -1342.74, 2.88,   0.00, 0.00, 264.66);
	CreateDynamicObject(973, -159.58, -1352.09, 2.88,   0.00, 0.00, 267.00);
	CreateDynamicObject(973, -159.94, -1361.47, 2.88,   0.00, 0.00, 268.38);
	CreateDynamicObject(973, -159.90, -1370.86, 2.88,   0.00, 0.00, 272.16);
	CreateDynamicObject(973, -159.54, -1380.23, 2.88,   0.00, 0.00, 272.16);
	CreateDynamicObject(973, -158.92, -1389.57, 2.88,   0.00, 0.00, 275.46);
	CreateDynamicObject(973, -157.84, -1398.89, 2.88,   0.00, 0.00, 277.74);
	CreateDynamicObject(973, -156.38, -1408.15, 2.88,   0.00, 0.00, 280.44);
	CreateDynamicObject(973, -154.39, -1417.32, 2.88,   0.00, 0.00, 283.98);
	CreateDynamicObject(973, -151.71, -1426.31, 2.88,   0.00, 0.00, 289.26);
	CreateDynamicObject(973, -148.40, -1435.06, 2.88,   0.00, 0.00, 292.08);
	CreateDynamicObject(973, -144.56, -1443.59, 2.88,   0.00, 0.00, 296.64);
	CreateDynamicObject(833, -149.06, -1454.90, 2.95,   0.00, 0.00, -57.24);
	CreateDynamicObject(833, -144.87, -1450.83, 2.95,   0.00, 0.00, -89.58);
	CreateDynamicObject(684, -155.51, -1460.70, 6.24,   98.00, 164.00, -21.00);
	CreateDynamicObject(684, -158.59, -1464.81, 6.24,   98.00, 164.00, 52.02);
	CreateDynamicObject(684, -162.98, -1469.10, 6.24,   64.00, 164.00, 90.00);
	CreateDynamicObject(684, -168.26, -1472.95, 6.24,   64.00, 164.00, 268.98);
	CreateDynamicObject(833, -162.44, -1465.54, 5.78,   0.00, 0.00, -57.24);
	CreateDynamicObject(3425, -382.18, -1508.72, 32.61,   356.86, 0.00, 19.70);

	//.EXT SUREÑOS 13
	CreateDynamicObject(17513,1880.8000488,-2023.1999512,4.5000000,0.0000000,0.0000000,0.0000000); //object(lae2_ground04) (1)
	CreateDynamicObject(2114,1882.5999756,-2030.5000000,12.6000004,0.0000000,0.0000000,0.0000000); //object(basketball) (1)
	CreateDynamicObject(2114,1885.1999512,-2034.3000488,12.6000004,0.0000000,0.0000000,0.0000000); //object(basketball) (2)
	CreateDynamicObject(2114,1879.9000244,-2035.3000488,12.6000004,0.0000000,0.0000000,0.0000000); //object(basketball) (3)
	CreateDynamicObject(946,1882.5999756,-2039.1999512,14.6999998,0.0000000,0.0000000,0.0000000); //object(bskball_lax) (1)
	CreateDynamicObject(946,1882.6999512,-2019.0000000,14.6999998,0.0000000,0.0000000,180.0000000); //object(bskball_lax) (2)
	CreateDynamicObject(1594,1875.6999512,-2016.4000244,13.0000000,0.0000000,0.0000000,0.0000000); //object(chairsntable) (1)
	CreateDynamicObject(1594,1879.6999512,-2014.6999512,13.0000000,0.0000000,0.0000000,0.0000000); //object(chairsntable) (2)
	CreateDynamicObject(1670,1875.5999756,-2016.5000000,13.3999996,0.0000000,0.0000000,0.0000000); //object(propcollecttable) (1)
	CreateDynamicObject(1670,1879.6999512,-2014.8000488,13.3999996,0.0000000,0.0000000,0.0000000); //object(propcollecttable) (2)
	CreateDynamicObject(3119,1875.6999512,-2021.5999756,12.8000002,0.0000000,0.0000000,0.0000000); //object(cs_ry_props) (1)
	CreateDynamicObject(1440,1895.9000244,-2034.1999512,13.1000004,0.0000000,0.0000000,0.0000000); //object(dyn_box_pile_3) (1)
	CreateDynamicObject(1440,1870.9000244,-2035.5999756,13.1000004,0.0000000,0.0000000,0.0000000); //object(dyn_box_pile_3) (2)
	CreateDynamicObject(12957,1859.0999756,-2026.1999512,13.3999996,0.0000000,0.0000000,0.0000000); //object(sw_pickupwreck01) (1)
	CreateDynamicObject(2672,1889.8000488,-2024.9000244,12.8000002,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_4) (1)
	CreateDynamicObject(2674,1889.9000244,-2021.0999756,12.6000004,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_2) (1)
	CreateDynamicObject(2677,1890.4000244,-2028.3000488,12.8000002,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_7) (1)
	CreateDynamicObject(3594,1926.1999512,-2002.3000488,13.1999998,0.0000000,0.0000000,0.0000000); //object(la_fuckcar1) (1)
	CreateDynamicObject(1413,1925.8000488,-2042.5999756,13.8000002,0.0000000,0.0000000,0.0000000); //object(dyn_mesh_3) (1)
	CreateDynamicObject(1413,1920.5000000,-2042.5999756,13.8000002,0.0000000,0.0000000,0.0000000); //object(dyn_mesh_3) (2)
	CreateDynamicObject(1413,1915.1999512,-2042.5000000,13.8000002,0.0000000,0.0000000,0.0000000); //object(dyn_mesh_3) (3)
	CreateDynamicObject(1413,1900.5999756,-2042.6999512,13.8000002,0.0000000,0.0000000,0.0000000); //object(dyn_mesh_3) (5)
	CreateDynamicObject(1413,1895.8000488,-2041.1999512,13.8000002,0.0000000,0.0000000,326.0000000); //object(dyn_mesh_3) (6)
	CreateDynamicObject(1413,1869.5000000,-2042.9000244,13.8000002,0.0000000,0.0000000,0.0000000); //object(dyn_mesh_3) (7)
	CreateDynamicObject(1413,1864.1999512,-2042.8000488,13.8000002,0.0000000,0.0000000,0.0000000); //object(dyn_mesh_3) (8)
	CreateDynamicObject(1413,1852.1999512,-2042.6999512,13.8000002,0.0000000,0.0000000,0.0000000); //object(dyn_mesh_3) (9)
	CreateDynamicObject(1413,1846.9000244,-2042.5999756,13.8000002,0.0000000,0.0000000,0.0000000); //object(dyn_mesh_3) (10)
	CreateDynamicObject(1413,1843.5999756,-2040.0000000,13.8000002,0.0000000,0.0000000,280.2500000); //object(dyn_mesh_3) (11)
	CreateDynamicObject(3119,1887.0000000,-2015.9000244,12.8000002,0.0000000,0.0000000,0.0000000); //object(cs_ry_props) (2)
	CreateDynamicObject(1440,1905.4000244,-2026.1999512,13.1000004,0.0000000,0.0000000,0.0000000); //object(dyn_box_pile_3) (3)
	CreateDynamicObject(1440,1879.8000488,-2004.3000488,13.1000004,0.0000000,0.0000000,0.0000000); //object(dyn_box_pile_3) (4)

	//.EXT HITMAN
	CreateDynamicObject(2946,283.2999878,-1510.6999512,23.8999996,0.0000000,0.0000000,325.5000000); //object(cr_door_03) (3)
	CreateDynamicObject(2946,285.0996094,-1508.0996094,23.8999996,0.0000000,0.0000000,145.4919434); //object(cr_door_03) (4)
	CreateDynamicObject(3934,321.6000061,-1507.3000488,75.5999985,0.0000000,0.0000000,0.0000000); //object(helipad01) (1)

	//.OTHER PAYNSPRAY TAPADOS
	CreateDynamicObject(19377, -1935.108642, 239.225875, 34.156250, 0.000000, 0.000000, -89.799949);
	CreateDynamicObject(19377, -2716.319335, 218.202224, 4.179687, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(19377, 2644.124023, -2039.189941, 11.234062, -1.500021, -0.200000, 89.999984);
	CreateDynamicObject(19377, 1042.862182, -1025.971435, 31.875671, 0.000000, 0.000000, 89.899963);
	CreateDynamicObject(19377, 2386.671630, 1043.633056, 10.820312, 0.000000, 0.000000, 90.000007);
	CreateDynamicObject(19377, 1843.502197, -1854.967407, 10.409748, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(19377, 2005.242919, 2303.465087, 10.820312, 0.000000, 0.000000, 89.700050);
	CreateDynamicObject(19377, -1787.482666, 1209.508178, 25.125000, 0.000000, 0.000000, 90.099983);
	CreateDynamicObject(19377, 720.046875, -462.469024, 15.903699, 0.000000, 0.000000, 90.000030);
	CreateDynamicObject(19377, -1421.173217, 2590.981445, 55.227497, 0.000000, 0.000000, 89.000038);
	CreateDynamicObject(19377, -99.606025, 1111.586425, 19.343750, 0.000000, 0.000000, 90.199989);
	CreateDynamicObject(19377, 2071.529052, -1830.954345, 13.142802, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(19377, -2425.913574, 1028.063232, 50.390625, 0.000000, 0.000000, 91.200019);
	CreateDynamicObject(19377, 1968.285766, 2162.526123, 10.820312, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(19377, 489.340393, -1735.311645, 11.308824, 0.000000, 0.000000, -101.899993);
	CreateDynamicObject(19377, 1025.891601, -1029.417236, 30.736160, 0.000000, 0.000000, -90.099983);
	CreateDynamicObject(19377, 2393.932617, 1483.681274, 10.671875, 0.000000, 0.000000, 90.000030);
	CreateDynamicObject(19377, -1905.037719, 277.640899, 41.039070, 0.000000, 0.000000, 88.499977);

	//.EXT GASOLINERA VINEWOOD
	CreateDynamicObject(4730,1022.7000122,-885.0000000,45.0999985,0.0000000,0.0000000,26.7500000); //object(billbrdlan2_03) (1)
	CreateDynamicObject(978,1000.0999756,-936.5000000,42.0000000,0.0000000,0.0000000,8.0000000); //object(sub_roadright) (2)
	CreateDynamicObject(978,1009.2999878,-935.2000122,42.0000000,0.0000000,0.0000000,7.9980469); //object(sub_roadright) (3)
	CreateDynamicObject(978,1009.5999756,-936.9000244,42.0000000,0.0000000,0.0000000,187.9980469); //object(sub_roadright) (4)
	CreateDynamicObject(978,1000.4000244,-938.2000122,42.0000000,0.0000000,0.0000000,187.9925537); //object(sub_roadright) (5)
	CreateDynamicObject(8843,1003.7000122,-940.2000122,41.2000008,0.0000000,0.0000000,96.0000000); //object(arrows01_lvs) (1)
	CreateDynamicObject(8843,1003.9000244,-932.7999878,41.2000008,0.0000000,0.0000000,275.9985352); //object(arrows01_lvs) (2)
	CreateDynamicObject(11417,1008.5000000,-948.0000000,46.0999985,0.0000000,0.0000000,0.0000000); //object(xenonsign2_sfse) (1)
	CreateDynamicObject(13562,1005.2999878,-921.2000122,46.7000008,0.0000000,0.0000000,0.0000000); //object(bigsprunkpole) (1)
	CreateDynamicObject(1244,1012.2999878,-929.2000122,42.0999985,0.0000000,0.0000000,96.0000000); //object(petrolpump) (1)
	CreateDynamicObject(1650,1012.2000122,-928.7000122,43.7000008,0.0000000,0.0000000,10.0000000); //object(petrolcanm) (1)
	CreateDynamicObject(7313,1001.5999756,-946.0000000,45.5999985,0.0000000,0.0000000,8.0000000); //object(vgsn_scrollsgn01) (1)
	CreateDynamicObject(7301,1039.0999756,-929.0999756,45.5999985,0.0000000,0.0000000,323.7500000); //object(vgsn_addboard03) (1)
	CreateDynamicObject(1444,1001.0000000,-927.2999878,42.0999985,0.0000000,0.0000000,100.0000000); //object(dyn_street_sign_2) (1)
	CreateDynamicObject(2599,1000.2999878,-922.2000122,41.7999992,0.0000000,0.0000000,0.0000000); //object(cj_sex_shop_sign) (1)
	CreateDynamicObject(2714,1000.5000000,-917.7999878,45.2999992,0.0000000,0.0000000,280.0000000); //object(cj_open_sign_2) (1)
	CreateDynamicObject(3467,999.7000122,-916.7000122,42.0000000,0.0000000,0.0000000,0.0000000); //object(vegstreetsign1) (1)

	//.INT FARMACIA
	CreateDynamicObject(19460, 162.20000, -73.60000, 964.03998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19460, 186.73940, -77.89730, 964.03998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19460, 162.19920, -64.09960, 964.03998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19460, 166.89999, -63.50000, 964.03998,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19460, 176.50000, -63.50000, 964.03998,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1893, 176.81955, -73.25069, 965.79999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, 166.89999, -73.30000, 965.79999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, 166.80000, -68.80000, 965.79999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, 176.61426, -68.66438, 965.79999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2198, 170.63702, -74.38227, 962.17999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2309, 170.99010, -75.78994, 962.20001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2011, 175.28688, -64.07365, 962.29999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2011, 170.09261, -64.20328, 962.29999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1884, 162.60397, -79.41013, 962.20001,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1887, 163.73685, -82.47573, 962.20001,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1888, 162.82500, -76.42880, 962.20001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1889, 168.40887, -79.70633, 962.20001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1890, 171.37863, -79.71806, 962.20001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2412, 174.80643, -63.96421, 962.20001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2412, 171.06001, -64.04581, 962.20001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2921, 163.62814, -64.45952, 965.70001,   2.70227, 250.17599, 263.42795);
	CreateDynamicObject(19458, 164.00000, -68.30000, 962.20001,   0.00000, 270.00000, 0.00000);
	CreateDynamicObject(19458, 167.50000, -68.30000, 962.20001,   0.00000, 270.00000, 0.00000);
	CreateDynamicObject(19458, 171.00000, -68.30000, 962.20001,   0.00000, 270.00000, 0.00000);
	CreateDynamicObject(19458, 174.50000, -68.30000, 962.20001,   0.00000, 270.00000, 0.00000);
	CreateDynamicObject(19458, 178.00000, -68.30000, 962.20001,   0.00000, 270.00000, 0.00000);
	CreateDynamicObject(19458, 174.48000, -77.90000, 962.20001,   0.00000, 270.00000, 0.00000);
	CreateDynamicObject(19458, 170.98000, -77.90000, 962.20001,   0.00000, 270.00000, 0.00000);
	CreateDynamicObject(19458, 177.98000, -77.90000, 962.20001,   0.00000, 270.00000, 0.00000);
	CreateDynamicObject(19458, 167.48000, -77.90001, 962.20001,   0.00000, 270.00000, 0.00000);
	CreateDynamicObject(19458, 164.00000, -77.90000, 962.20001,   0.00000, 270.00000, 0.00000);
	CreateDynamicObject(19458, 175.25841, -73.92520, 961.50000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19458, 165.62486, -73.92780, 961.50000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2414, 162.67760, -74.23680, 962.20947,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2414, 164.68230, -74.23680, 962.20947,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2414, 166.68221, -74.23680, 962.20947,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2414, 168.68230, -74.23680, 962.20947,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2414, 172.58440, -74.23680, 962.20947,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2414, 174.57970, -74.23680, 962.20947,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2414, 176.58000, -74.23680, 962.20947,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2414, 178.58031, -74.23680, 962.20947,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2309, 176.41902, -75.85496, 962.20001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1890, 174.36375, -79.72228, 962.20001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1889, 177.34587, -79.74583, 962.20001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1890, 166.71140, -82.75375, 962.20001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1887, 169.68610, -82.51461, 962.20001,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19458, 181.46980, -77.90000, 962.20001,   0.00000, 270.00000, 0.00000);
	CreateDynamicObject(19458, 181.50000, -68.30000, 962.20001,   0.00000, 270.00000, 0.00000);
	CreateDynamicObject(1890, 172.64615, -82.76177, 962.20001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1889, 175.63126, -82.75793, 962.20001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19396, 183.24660, -74.65010, 964.03998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2414, 179.69670, -75.19970, 962.20947,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2414, 179.69670, -77.18950, 962.20947,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19396, 180.03072, -77.11586, 961.51050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19396, 180.03815, -75.45191, 961.51050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 184.95731, -77.90000, 962.20001,   0.00000, 270.00000, 0.00000);
	CreateDynamicObject(19460, 183.24660, -68.23210, 964.03998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19460, 188.12050, -73.06200, 964.03998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19460, 183.23289, -81.06640, 964.03998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19460, 181.96700, -82.75480, 964.03998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19460, 186.12260, -63.49310, 964.03998,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19460, 172.32851, -82.75480, 964.03998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19460, 162.69490, -82.75260, 964.03998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19460, 162.20110, -83.21260, 964.03998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 183.23421, -73.85480, 962.28003,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19176, 172.54005, -63.66143, 963.69598,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1889, 178.63020, -82.71976, 962.20001,   0.00000, 0.00000, 0.59997);
	CreateDynamicObject(4594, 174.29779, -97.62506, 988.14001,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(2528, 186.18155, -77.19272, 962.27393,   0.00000, 0.00000, 269.09991);
	CreateDynamicObject(2527, 183.96198, -81.09908, 962.29480,   0.00000, 0.00000, 181.86011);
	CreateDynamicObject(2515, 186.39270, -79.41730, 963.51703,   0.00000, 0.00000, 269.09991);
	CreateDynamicObject(1893, 184.33151, -79.04463, 965.79999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1514, 176.32860, -74.33380, 963.49738,   0.00000, 0.00000, 179.52000);
	CreateDynamicObject(1274, 176.35437, -73.85580, 962.82294,   0.00000, 0.00000, 0.00000);

	//.EXT MECANICOS
	CreateDynamicObject(3268,1610.2998000,-2146.0996100,12.6000000,0.0000000,0.0000000,90.0000000); //object(mil_hangar1_)(1)
	CreateDynamicObject(8947,1629.0996100,-2172.5000000,9.5000000,0.0000000,0.0000000,0.0000000); //object(vgelkup)(1)
	CreateDynamicObject(8947,1614.3994100,-2172.5000000,9.5000000,0.0000000,0.0000000,0.0000000); //object(vgelkup)(2)
	CreateDynamicObject(8947,1599.6992200,-2172.5000000,9.5000000,0.0000000,0.0000000,0.0000000); //object(vgelkup)(3)
	CreateDynamicObject(8947,1585.0999800,-2172.5000000,9.5000000,0.0000000,0.0000000,0.0000000); //object(vgelkup)(4)
	CreateDynamicObject(8947,1570.3994100,-2172.5000000,9.5000000,0.0000000,0.0000000,0.0000000); //object(vgelkup)(5)
	CreateDynamicObject(8947,1570.3994100,-2147.9892600,9.5000000,0.0000000,0.0000000,0.0000000); //object(vgelkup)(6)
	CreateDynamicObject(8947,1585.0999800,-2147.9899900,9.5000000,0.0000000,0.0000000,0.0000000); //object(vgelkup)(7)
	CreateDynamicObject(8947,1599.6999500,-2147.9899900,9.5000000,0.0000000,0.0000000,0.0000000); //object(vgelkup)(8)
	CreateDynamicObject(8947,1614.4000200,-2147.9899900,9.5000000,0.0000000,0.0000000,0.0000000); //object(vgelkup)(9)
	CreateDynamicObject(8947,1629.0996100,-2147.9892600,9.5000000,0.0000000,0.0000000,0.0000000); //object(vgelkup)(10)
	CreateDynamicObject(9339,1655.0000000,-2148.7675800,13.2500000,0.0000000,0.0000000,0.0000000); //object(sfnvilla001_cm)(1)
	CreateDynamicObject(9339,1655.0000000,-2148.7675800,14.6300000,0.0000000,0.0000000,0.0000000); //object(sfnvilla001_cm)(2)
	CreateDynamicObject(9339,1623.3994100,-2135.8398400,13.2500000,0.0000000,0.0000000,90.0000000); //object(sfnvilla001_cm)(5)
	CreateDynamicObject(9339,1623.3994100,-2135.8398400,14.6300000,0.0000000,0.0000000,90.0000000); //object(sfnvilla001_cm)(6)
	CreateDynamicObject(9339,1608.3000500,-2135.8400900,13.2500000,0.0000000,0.0000000,90.0000000); //object(sfnvilla001_cm)(7)
	CreateDynamicObject(9339,1608.2998000,-2135.8398400,14.6300000,0.0000000,0.0000000,90.0000000); //object(sfnvilla001_cm)(8)
	CreateDynamicObject(9339,1583.2900400,-2140.9299300,13.2500000,0.0000000,0.0000000,113.0000000); //object(sfnvilla001_cm)(9)
	CreateDynamicObject(9339,1583.2900400,-2140.9299300,14.6300000,0.0000000,0.0000000,113.0000000); //object(sfnvilla001_cm)(10)
	CreateDynamicObject(9339,1575.0000000,-2144.4499500,13.2500000,0.0000000,0.0000000,113.0000000); //object(sfnvilla001_cm)(11)
	CreateDynamicObject(9339,1575.0000000,-2144.4499500,14.6300000,0.0000000,0.0000000,113.0000000); //object(sfnvilla001_cm)(12)
	CreateDynamicObject(9339,1563.0000000,-2171.5996100,13.2500000,0.0000000,0.0000000,0.0000000); //object(sfnvilla001_cm)(13)
	CreateDynamicObject(8947,1555.6999500,-2172.5000000,9.5000000,0.0000000,0.0000000,0.0000000); //object(vgelkup)(11)
	CreateDynamicObject(8947,1555.6992200,-2147.9892600,9.5000000,0.0000000,0.0000000,0.0000000); //object(vgelkup)(12)
	CreateDynamicObject(9339,1550.5000000,-2153.3701200,13.2500000,0.0000000,0.0000000,106.9960000); //object(sfnvilla001_cm)(14)
	CreateDynamicObject(8231,1645.1992200,-2173.4775400,14.3400000,0.0000000,0.0000000,90.0000000); //object(vgsbikeschl05)(1)
	CreateDynamicObject(9339,1563.0000000,-2171.5996100,14.6300000,0.0000000,0.0000000,0.0000000); //object(sfnvilla001_cm)(15)
	CreateDynamicObject(9339,1576.0219700,-2184.6879900,13.2500000,0.0000000,0.0000000,90.0000000); //object(sfnvilla001_cm)(16)
	CreateDynamicObject(9339,1576.0214800,-2184.6875000,14.6300000,0.0000000,0.0000000,90.0000000); //object(sfnvilla001_cm)(17)
	CreateDynamicObject(9339,1550.5000000,-2153.3701200,14.6300000,0.0000000,0.0000000,106.9960000); //object(sfnvilla001_cm)(18)
	CreateDynamicObject(8947,1540.9899900,-2172.5000000,9.5000000,0.0000000,0.0000000,0.0000000); //object(vgelkup)(14)
	CreateDynamicObject(8947,1545.2998000,-2148.0000000,9.5000000,0.0000000,0.0000000,0.0000000); //object(vgelkup)(15)
	CreateDynamicObject(9339,1538.4000200,-2184.6875000,13.2500000,0.0000000,0.0000000,90.0000000); //object(sfnvilla001_cm)(19)
	CreateDynamicObject(9339,1538.4000200,-2184.6875000,14.6300000,0.0000000,0.0000000,90.0000000); //object(sfnvilla001_cm)(20)
	CreateDynamicObject(9339,1489.7600100,-2171.7739300,13.2500000,0.0000000,0.0000000,0.0000000); //object(sfnvilla001_cm)(21)
	CreateDynamicObject(9339,1612.7998000,-2184.5996100,13.3000000,0.0000000,0.0000000,90.0000000); //object(sfnvilla001_cm)(24)
	CreateDynamicObject(9131,1589.1999500,-2184.6999500,13.7000000,0.0000000,0.0000000,0.0000000); //object(shbbyhswall13_lvs)(2)
	CreateDynamicObject(9131,1589.1999500,-2184.6999500,15.2000000,0.0000000,0.0000000,0.0000000); //object(shbbyhswall13_lvs)(3)
	CreateDynamicObject(9131,1600.0000000,-2184.6999500,13.7000000,0.0000000,0.0000000,0.0000000); //object(shbbyhswall13_lvs)(4)
	CreateDynamicObject(9131,1600.0000000,-2184.6999500,15.2000000,0.0000000,0.0000000,0.0000000); //object(shbbyhswall13_lvs)(5)
	CreateDynamicObject(8673,1610.7998000,-2184.5996100,14.8000000,0.0000000,0.0000000,0.0000000); //object(csrsfence03_lvs)(5)
	CreateDynamicObject(8673,1615.7392600,-2184.5996100,14.8000000,0.0000000,0.0000000,0.0000000); //object(csrsfence03_lvs)(6)
	CreateDynamicObject(9131,1625.4799800,-2184.6992200,13.7000000,0.0000000,0.0000000,0.0000000); //object(shbbyhswall13_lvs)(6)
	CreateDynamicObject(9131,1625.4799800,-2184.6992200,15.2000000,0.0000000,0.0000000,0.0000000); //object(shbbyhswall13_lvs)(7)
	CreateDynamicObject(9131,1636.2900400,-2184.6992200,13.7000000,0.0000000,0.0000000,0.0000000); //object(shbbyhswall13_lvs)(8)
	CreateDynamicObject(9131,1636.2900400,-2184.6992200,15.2000000,0.0000000,0.0000000,0.0000000); //object(shbbyhswall13_lvs)(9)
	CreateDynamicObject(10281,1610.5999800,-2156.8999000,20.3000000,0.0000000,0.0000000,0.0000000); //object(michsign_sfe)(1)
	CreateDynamicObject(1215,1636.3000500,-2185.1001000,15.6000000,9.9980000,0.0000000,0.0000000); //object(bollardlight)(1)
	CreateDynamicObject(1215,1625.5000000,-2185.1001000,15.6000000,9.9980000,0.0000000,0.0000000); //object(bollardlight)(2)
	CreateDynamicObject(1215,1600.0000000,-2185.1001000,15.6000000,9.9980000,0.0000000,0.0000000); //object(bollardlight)(3)
	CreateDynamicObject(1215,1589.1999500,-2185.1001000,15.6000000,9.9980000,0.0000000,0.0000000); //object(bollardlight)(4)
	CreateDynamicObject(1215,1562.9000200,-2184.5000000,13.1000000,0.0000000,0.0000000,0.0000000); //object(bollardlight)(6)
	CreateDynamicObject(939,1623.9000200,-2139.5000000,15.0000000,0.0000000,0.0000000,90.0000000); //object(cj_df_unit)(1)
	CreateDynamicObject(942,1623.9000200,-2145.0000000,15.0000000,0.0000000,0.0000000,90.0000000); //object(cj_df_unit_2)(1)
	CreateDynamicObject(1704,1639.8000500,-2165.1001000,12.6000000,0.0000000,0.0000000,0.0000000); //object(kb_chair03)(1)
	CreateDynamicObject(1714,1650.6999500,-2168.1999500,12.6000000,0.0000000,0.0000000,270.0000000); //object(kb_swivelchair1)(1)
	CreateDynamicObject(1723,1637.1999500,-2168.5000000,12.6000000,0.0000000,0.0000000,90.0000000); //object(mrk_seating1)(1)
	CreateDynamicObject(1811,1647.8000500,-2167.1001000,13.3000000,0.0000000,0.0000000,152.0000000); //object(med_din_chair_5)(1)
	CreateDynamicObject(2207,1649.0000000,-2167.3000500,12.6000000,0.0000000,0.0000000,270.0000000); //object(med_office7_desk_1)(1)
	CreateDynamicObject(2308,1652.1999500,-2165.0000000,12.6000000,0.0000000,0.0000000,270.0000000); //object(med_office4_desk_4)(1)
	CreateDynamicObject(2174,1653.1999500,-2170.6999500,12.6000000,0.0000000,0.0000000,179.9950000); //object(med_office4_desk_2)(1)
	CreateDynamicObject(1811,1647.8000500,-2169.1001000,13.3000000,0.0000000,0.0000000,208.0000000); //object(med_din_chair_5)(3)
	CreateDynamicObject(2370,1639.9000200,-2168.1001000,12.6000000,0.0000000,0.0000000,0.0000000); //object(shop_set_1_table)(1)
	CreateDynamicObject(2239,1637.0999800,-2164.8999000,12.6000000,0.0000000,0.0000000,263.9960000); //object(cj_mlight16)(1)
	CreateDynamicObject(631,1637.0000000,-2170.1999500,13.5000000,0.0000000,0.0000000,0.0000000); //object(veg_palmkb9)(2)
	CreateDynamicObject(631,1642.0000000,-2165.1999500,13.5000000,0.0000000,0.0000000,0.0000000); //object(veg_palmkb9)(3)
	CreateDynamicObject(10183,1542.7998000,-2180.7998000,12.6000000,0.0000000,0.0000000,225.5000000); //object(ferspaces) (1)
	CreateDynamicObject(8947,1526.3000500,-2172.5000000,9.5000000,0.0000000,0.0000000,0.0000000); //object(vgelkup)(14)
	CreateDynamicObject(8947,1511.5999800,-2172.5000000,9.5000000,0.0000000,0.0000000,0.0000000); //object(vgelkup)(14)
	CreateDynamicObject(8947,1497.0000000,-2172.5000000,9.5000000,0.0000000,0.0000000,0.0000000); //object(vgelkup)(14)
	CreateDynamicObject(9339,1525.0000000,-2184.6875000,13.2500000,0.0000000,0.0000000,90.0000000); //object(sfnvilla001_cm)(19)
	CreateDynamicObject(9339,1525.0000000,-2184.6875000,14.6300000,0.0000000,0.0000000,90.0000000); //object(sfnvilla001_cm)(20)
	CreateDynamicObject(9339,1502.8000500,-2184.6875000,13.2500000,0.0000000,0.0000000,90.0000000); //object(sfnvilla001_cm)(20)
	CreateDynamicObject(9339,1502.7998000,-2184.6875000,14.6300000,0.0000000,0.0000000,90.0000000); //object(sfnvilla001_cm)(20)
	CreateDynamicObject(9339,1489.7600100,-2171.7739300,14.6300000,0.0000000,0.0000000,0.0000000); //object(sfnvilla001_cm)(21)
	CreateDynamicObject(9339,1525.0000000,-2157.1799300,13.2500000,0.0000000,0.0000000,90.0000000); //object(sfnvilla001_cm)(20)
	CreateDynamicObject(9339,1525.0000000,-2157.1799300,14.6300000,0.0000000,0.0000000,90.0000000); //object(sfnvilla001_cm)(20)
	CreateDynamicObject(10183,1512.5999800,-2180.8999000,12.6000000,0.0000000,0.0000000,225.5000000); //object(ferspaces) (2)
	CreateDynamicObject(9339,1489.7690400,-2158.0300300,2.2670000,90.0000000,90.0000000,90.0000000); //object(sfnvilla001_cm)(20)
	CreateDynamicObject(9339,1502.6899400,-2157.1799300,13.2500000,0.0000000,0.0000000,90.0000000); //object(sfnvilla001_cm)(20)
	CreateDynamicObject(9339,1502.6894500,-2157.1796900,14.6300000,0.0000000,0.0000000,90.0000000); //object(sfnvilla001_cm)(20)
	CreateDynamicObject(8947,1530.6999500,-2148.0000000,9.5000000,0.0000000,0.0000000,0.0000000); //object(vgelkup)(15)
	CreateDynamicObject(8947,1516.0999800,-2148.0000000,9.5000000,0.0000000,0.0000000,0.0000000); //object(vgelkup)(15)
	CreateDynamicObject(8947,1502.0999800,-2153.0000000,9.5000000,0.0000000,0.0000000,270.0000000); //object(vgelkup)(15)
	CreateDynamicObject(10183,1510.0996100,-2161.0996100,12.6000000,0.0000000,0.0000000,45.5000000); //object(ferspaces) (3)
	CreateDynamicObject(8230,1645.3000500,-2173.3999000,14.5000000,0.0000000,0.0000000,90.0000000); //object(vgsbikeschl01)(1)
	CreateDynamicObject(1502,1636.5000000,-2170.5996100,12.5000000,0.0000000,0.0000000,270.0000000); //object(gen_doorint04)(1)
	CreateDynamicObject(8947,1643.6999500,-2151.8999000,9.5000000,0.0000000,0.0000000,0.0000000); //object(vgelkup)(10)
	CreateDynamicObject(9339,1642.0999800,-2135.8398400,13.2500000,0.0000000,0.0000000,90.0000000); //object(sfnvilla001_cm)(5)
	CreateDynamicObject(9339,1623.3994100,-2135.8398400,14.6300000,0.0000000,0.0000000,90.0000000); //object(sfnvilla001_cm)(6)
	CreateDynamicObject(9339,1642.0999800,-2135.8398400,14.6300000,0.0000000,0.0000000,90.0000000); //object(sfnvilla001_cm)(6)
	CreateDynamicObject(8947,1647.5999800,-2151.8999000,9.5000000,0.0000000,0.0000000,0.0000000); //object(vgelkup)(10)
	CreateDynamicObject(8947,1642.6999500,-2143.1001000,9.5000000,0.0000000,0.0000000,90.0000000); //object(vgelkup)(10)
	CreateDynamicObject(9339,1563.0000000,-2165.3999000,13.2500000,0.0000000,0.0000000,0.0000000); //object(sfnvilla001_cm)(15)
	CreateDynamicObject(9339,1563.0000000,-2165.3999000,14.6300000,0.0000000,0.0000000,0.0000000); //object(sfnvilla001_cm)(15)
	CreateDynamicObject(9339,1655.0000000,-2171.6001000,13.2500000,0.0000000,0.0000000,0.0000000); //object(sfnvilla001_cm)(2)
	CreateDynamicObject(9339,1655.0000000,-2171.6001000,14.6300000,0.0000000,0.0000000,0.0000000); //object(sfnvilla001_cm)(2)
	CreateDynamicObject(9339,1649.3994100,-2184.5996100,13.2500000,0.0000000,0.0000000,90.0000000); //object(sfnvilla001_cm)(6)
	CreateDynamicObject(9339,1649.4000200,-2184.5996100,14.6300000,0.0000000,0.0000000,90.0000000); //object(sfnvilla001_cm)(6)
	CreateDynamicObject(12928,1573.3994100,-2177.2998000,12.6000000,0.0000000,0.0000000,180.0000000); //object(sw_shedinterior04) (3)
	CreateDynamicObject(12929,1573.3994100,-2177.2998000,12.6000000,0.0000000,0.0000000,180.0000000); //object(sw_shed06) (1)
	CreateDynamicObject(7709,1568.0999800,-2173.3000500,14.1200000,0.0000000,0.0000000,90.0000000); //object(vgwbom1) (1)
	CreateDynamicObject(10282,1571.0000000,-2177.1999500,13.6000000,0.0000000,0.0000000,90.0000000); //object(mich_int_sfe) (2)
	CreateDynamicObject(12928,1573.3994100,-2168.3999000,12.6000000,0.0000000,0.0000000,179.9950000); //object(sw_shedinterior04) (3)
	CreateDynamicObject(12929,1573.3994100,-2168.3999000,12.6000000,0.0000000,0.0000000,179.9950000); //object(sw_shed06) (1)
	CreateDynamicObject(10282,1571.0000000,-2168.3000500,13.6000000,0.0000000,0.0000000,90.0000000); //object(mich_int_sfe) (3)
	CreateDynamicObject(7709,1568.0999800,-2164.5000000,14.1200000,0.0000000,0.0000000,90.0000000); //object(vgwbom1) (2)
	CreateDynamicObject(12929,1573.3994100,-2159.5000000,12.6000000,0.0000000,0.0000000,179.9950000); //object(sw_shed06) (1)
	CreateDynamicObject(12928,1573.3994100,-2159.5000000,12.6000000,0.0000000,0.0000000,179.9950000); //object(sw_shedinterior04) (3)
	CreateDynamicObject(10282,1571.0000000,-2159.3999000,13.6000000,0.0000000,0.0000000,90.0000000); //object(mich_int_sfe) (4)
	CreateDynamicObject(7709,1568.0999800,-2155.5000000,14.1200000,0.0000000,0.0000000,90.0000000); //object(vgwbom1) (3)
	CreateDynamicObject(3089,1596.3399700,-2136.1599100,13.9000000,0.0000000,0.0000000,0.0000000); //object(ab_casdorlok) (1)
	CreateDynamicObject(3089,1622.6999500,-2136.1001000,13.9000000,0.0000000,0.0000000,0.0000000); //object(ab_casdorlok) (2)
	CreateDynamicObject(937,1601.5000000,-2136.8000500,13.0000000,0.0000000,0.0000000,0.0000000); //object(cj_df_worktop) (1)
	CreateDynamicObject(937,1603.4000200,-2136.8000500,13.0000000,0.0000000,0.0000000,0.0000000); //object(cj_df_worktop) (2)
	CreateDynamicObject(2651,1601.0999800,-2136.3000500,14.4000000,0.0000000,0.0000000,0.0000000); //object(cj_skate_wall1) (1)
	CreateDynamicObject(2651,1602.1999500,-2136.3000500,14.4000000,0.0000000,0.0000000,0.0000000); //object(cj_skate_wall1) (2)
	CreateDynamicObject(2651,1603.3000500,-2136.3000500,14.4000000,0.0000000,0.0000000,0.0000000); //object(cj_skate_wall1) (3)
	CreateDynamicObject(2752,1600.9000200,-2136.5000000,13.5000000,0.0000000,0.0000000,0.0000000); //object(cj_hairspray2) (1)
	CreateDynamicObject(2749,1601.0000000,-2137.0000000,13.5000000,0.0000000,0.0000000,0.0000000); //object(cj_hairspray) (1)
	CreateDynamicObject(365,1601.8000500,-2136.6001000,13.7000000,0.0000000,0.0000000,0.0000000); //object(1)
	CreateDynamicObject(365,1601.8000500,-2137.0000000,13.7000000,0.0000000,0.0000000,0.0000000); //object(2)
	CreateDynamicObject(365,1603.5999800,-2136.5000000,13.7000000,0.0000000,0.0000000,0.0000000); //object(3)
	CreateDynamicObject(365,1603.0000000,-2137.0000000,13.7000000,0.0000000,0.0000000,0.0000000); //object(4)
	CreateDynamicObject(365,1603.6999500,-2137.1999500,13.7000000,0.0000000,0.0000000,0.0000000); //object(5)
	CreateDynamicObject(365,1598.5999800,-2136.5000000,12.8000000,0.0000000,0.0000000,0.0000000); //object(6)
	CreateDynamicObject(1084,1595.5000000,-2151.3000500,15.6000000,0.0000000,0.0000000,0.0000000); //object(wheel_lr5) (1)
	CreateDynamicObject(1085,1595.5000000,-2150.1999500,15.6000000,0.0000000,0.0000000,0.0000000); //object(wheel_gn2) (2)
	CreateDynamicObject(1083,1595.5000000,-2149.1001000,15.6000000,0.0000000,0.0000000,0.0000000); //object(wheel_lr2) (1)
	CreateDynamicObject(1082,1595.5000000,-2148.0000000,15.6000000,0.0000000,0.0000000,0.0000000); //object(wheel_gn1) (1)
	CreateDynamicObject(1081,1595.5000000,-2146.8999000,15.6000000,0.0000000,0.0000000,0.0000000); //object(wheel_sr4) (1)
	CreateDynamicObject(1080,1595.5000000,-2145.8000500,15.6000000,0.0000000,0.0000000,0.0000000); //object(wheel_sr5) (1)
	CreateDynamicObject(1079,1595.5000000,-2151.3000500,14.6000000,0.0000000,0.0000000,0.0000000); //object(wheel_sr1) (1)
	CreateDynamicObject(1078,1595.5000000,-2150.1999500,14.6000000,0.0000000,0.0000000,0.0000000); //object(wheel_lr3) (1)
	CreateDynamicObject(1077,1595.5000000,-2149.1001000,14.5000000,0.0000000,0.0000000,0.0000000); //object(wheel_lr1) (1)
	CreateDynamicObject(1076,1595.5000000,-2148.0000000,14.5000000,0.0000000,0.0000000,0.0000000); //object(wheel_lr4) (2)
	CreateDynamicObject(1075,1595.5000000,-2146.8999000,14.5000000,0.0000000,0.0000000,0.0000000); //object(wheel_sr2) (1)
	CreateDynamicObject(1074,1595.5000000,-2145.8000500,14.4000000,0.0000000,0.0000000,0.0000000); //object(wheel_sr3) (1)
	CreateDynamicObject(1073,1595.5000000,-2148.5000000,16.6000000,0.0000000,0.0000000,0.0000000); //object(wheel_sr6) (1)
	CreateDynamicObject(3037,1641.3979500,-2164.1001000,14.2620000,0.0000000,0.0000000,90.0000000); //object(warehouse_door2b) (1)
	CreateDynamicObject(3037,1649.2299800,-2164.1010700,14.2620000,0.0000000,0.0000000,90.0000000); //object(warehouse_door2b) (2)
	CreateDynamicObject(8673,1647.0000000,-2184.6999500,14.8000000,0.0000000,0.0000000,0.0000000); //object(csrsfence03_lvs)(5)
	CreateDynamicObject(8673,1578.9000200,-2184.8000500,14.8000000,0.0000000,0.0000000,0.0000000); //object(csrsfence03_lvs)(5)
	CreateDynamicObject(8673,1573.4300500,-2184.8000500,14.8000000,0.0000000,0.0000000,0.0000000); //object(csrsfence03_lvs)(5)
	CreateDynamicObject(8673,1541.4000200,-2184.8000500,14.8000000,0.0000000,0.0000000,0.0000000); //object(csrsfence03_lvs)(5)
	CreateDynamicObject(8673,1523.5999800,-2184.8000500,14.8000000,0.0000000,0.0000000,0.0000000); //object(csrsfence03_lvs)(5)
	CreateDynamicObject(8673,1503.1999500,-2184.8000500,14.8000000,0.0000000,0.0000000,0.0000000); //object(csrsfence03_lvs)(5)
	CreateDynamicObject(8673,1500.1992200,-2184.7998000,14.8000000,0.0000000,0.0000000,0.0000000); //object(csrsfence03_lvs)(5)
	CreateDynamicObject(8673,1489.7399900,-2174.3601100,14.8000000,0.0000000,0.0000000,90.0000000); //object(csrsfence03_lvs)(5)
	CreateDynamicObject(8673,1489.7399900,-2167.3000500,14.8000000,0.0000000,0.0000000,90.0000000); //object(csrsfence03_lvs)(5)
	CreateDynamicObject(8673,1500.1999500,-2157.3000500,14.8000000,0.0000000,0.0000000,0.0000000); //object(csrsfence03_lvs)(5)
	CreateDynamicObject(8673,1520.5999800,-2157.3000500,14.8000000,0.0000000,0.0000000,0.0000000); //object(csrsfence03_lvs)(5)
	CreateDynamicObject(8673,1528.0000000,-2157.3000500,14.8000000,0.0000000,0.0000000,0.0000000); //object(csrsfence03_lvs)(5)
	CreateDynamicObject(8673,1548.0000000,-2154.2500000,14.8000000,0.0000000,0.0000000,17.0000000); //object(csrsfence03_lvs)(5)
	CreateDynamicObject(8673,1553.4000200,-2152.6001000,14.8000000,0.0000000,0.0000000,16.9960000); //object(csrsfence03_lvs)(5)
	CreateDynamicObject(8673,1572.5899700,-2145.6001000,14.8000000,0.0000000,0.0000000,22.9960000); //object(csrsfence03_lvs)(5)
	CreateDynamicObject(8673,1586.2500000,-2139.8000500,14.8000000,0.0000000,0.0000000,22.9940000); //object(csrsfence03_lvs)(5)
	CreateDynamicObject(8673,1605.9000200,-2135.8999000,14.8000000,0.0000000,0.0000000,0.0000000); //object(csrsfence03_lvs)(5)
	CreateDynamicObject(8673,1626.3000500,-2135.8999000,14.8000000,0.0000000,0.0000000,0.0000000); //object(csrsfence03_lvs)(5)
	CreateDynamicObject(8673,1645.0000000,-2135.8999000,14.8000000,0.0000000,0.0000000,0.0000000); //object(csrsfence03_lvs)(5)
	CreateDynamicObject(8673,1655.0000000,-2145.8999000,14.8000000,0.0000000,0.0000000,90.0000000); //object(csrsfence03_lvs)(5)
	CreateDynamicObject(8673,1655.0000000,-2166.3000500,14.8000000,0.0000000,0.0000000,90.0000000); //object(csrsfence03_lvs)(5)
	CreateDynamicObject(8673,1655.0000000,-2174.1999500,14.8000000,0.0000000,0.0000000,90.0000000); //object(csrsfence03_lvs)(5)
	CreateDynamicObject(9339,1563.0000000,-2150.1999500,2.2660000,90.0000000,270.0000000,90.0000000); //object(sfnvilla001_cm)(15)

	//.EXT DEPTOS GROOVE
	CreateDynamicObject(982,2190.47631836,-1798.11914062,13.23664379,0.00000000,0.00000000,0.00000000); //object(fenceshit) (1)
	CreateDynamicObject(984,2162.133906,-1790.68994141,13.15733051,0.00000000,0.00000000,270.00000000); //object(fenceshit2) (1)
	CreateDynamicObject(983,2171.71630859,-1790.70153809,13.20391560,0.00000000,0.00000000,270.00000000); //object(fenceshit3) (1)
	CreateDynamicObject(966,2188.93115234,-1776.95007324,12.37317085,0.00000000,0.00000000,358.00000000); //object(bar_gatebar01) (1)
	CreateDynamicObject(991,2192.51074219,-1776.83593750,13.56833649,0.00000000,0.00000000,0.00000000); //object(bar_barriergate1) (1)
	CreateDynamicObject(991,21.63134766,-1776.73754883,13.56833649,0.00000000,0.00000000,0.00000000); //object(bar_barriergate1) (2)
	CreateDynamicObject(1251,2175.40209961,-1792.94201660,12.41358185,0.00000000,0.00000000,0.00000000); //object(smashbar) (1)
	CreateDynamicObject(1251,2172.01123047,-1793.18725586,12.41358185,0.00000000,0.00000000,0.00000000); //object(smashbar) (2)
	CreateDynamicObject(1251,2168.81542969,-1793.34594727,12.41358185,0.00000000,0.00000000,0.00000000); //object(smashbar) (3)
	CreateDynamicObject(1251,2165.41943359,-1793.49194336,12.41358185,0.00000000,0.00000000,0.00000000); //object(smashbar) (4)
	CreateDynamicObject(1251,2162.29980469,-1793.67114258,12.41358185,0.00000000,0.00000000,0.00000000); //object(smashbar) (5)
	CreateDynamicObject(1251,2159.02880859,-1793.81005859,12.41358185,0.00000000,0.00000000,0.00000000); //object(smashbar) (6)
	CreateDynamicObject(1251,2155.320312,-1793.97192383,12.41358185,0.00000000,0.00000000,0.00000000); //object(smashbar) (7)
	CreateDynamicObject(1251,2188.39184570,-16.13183594,12.42907143,0.00000000,0.00000000,90.00000000); //object(smashbar) (8)
	CreateDynamicObject(1251,2188.08935547,-19.65161133,12.42907143,0.00000000,0.00000000,90.00000000); //object(smashbar) (9)
	CreateDynamicObject(1251,2188.16308594,-1792.70166016,12.42907143,0.00000000,0.00000000,90.00000000); //object(smashbar) (10)
	CreateDynamicObject(1251,2188.16015625,-1795.70556641,12.42907143,0.00000000,0.00000000,90.00000000); //object(smashbar) (11)
	CreateDynamicObject(1251,2188.05273438,-1798.61621094,12.42907143,0.00000000,0.00000000,90.00000000); //object(smashbar) (12)
	CreateDynamicObject(1251,2188.08691406,-1801.86865234,12.42907143,0.00000000,0.00000000,90.00000000); //object(smashbar) (13)
	CreateDynamicObject(1251,2188.07543945,-1804.697598,12.42907143,0.00000000,0.00000000,90.00000000); //object(smashbar) (14)
	CreateDynamicObject(1251,2188.19921875,-1807.74511719,12.42907143,0.00000000,0.00000000,90.00000000); //object(smashbar) (15)
	CreateDynamicObject(1251,2188.23510742,-1810.52185059,12.42907143,0.00000000,0.00000000,90.00000000); //object(smashbar) (16)
	CreateDynamicObject(982,2168.18969727,-1810.91308594,13.23664379,0.00000000,0.00000000,270.00000000); //object(fenceshit) (3)
	CreateDynamicObject(1251,2181.25219727,-1808.59960938,12.42823982,0.00000000,0.00000000,0.00000000); //object(smashbar) (17)
	CreateDynamicObject(1251,21.17553711,-1808.52856445,12.42823982,0.00000000,0.00000000,0.00000000); //object(smashbar) (18)
	CreateDynamicObject(1251,2175.03881836,-1808.60229492,12.42823982,0.00000000,0.00000000,0.00000000); //object(smashbar) (19)
	CreateDynamicObject(1251,2172.16479492,-1808.49462891,12.42823982,0.00000000,0.00000000,0.00000000); //object(smashbar) (20)
	CreateDynamicObject(1251,2169.31591797,-1808.38867188,12.42823982,0.00000000,0.00000000,359.00000000); //object(smashbar) (21)
	CreateDynamicObject(1251,2166.43164062,-1808.43151855,12.42823982,0.00000000,0.00000000,358.99475098); //object(smashbar) (22)
	CreateDynamicObject(1251,2163.47363281,-1808.46728516,12.42823982,0.00000000,0.00000000,358.99475098); //object(smashbar) (23)
	CreateDynamicObject(1251,2160.45874023,-1808.59973145,12.42823982,0.00000000,0.00000000,358.99475098); //object(smashbar) (24)
	CreateDynamicObject(1251,2157.27514648,-1808.62084961,12.42823982,0.00000000,0.00000000,358.99475098); //object(smashbar) (25)

	//.EXT GOBIERNO
	CreateDynamicObject(970, 1245.09778, -2045.64319, 59.55100,   0.00000, 2.00000, -2.00000);
	CreateDynamicObject(970, 1249.26233, -2045.80164, 59.41100,   0.00000, 2.00000, -2.00000);
	CreateDynamicObject(970, 1253.39709, -2045.96204, 59.28100,   0.00000, 2.00000, -2.00000);
	CreateDynamicObject(970, 1257.51392, -2046.11487, 59.14100,   0.00000, 2.00000, -2.00000);
	CreateDynamicObject(966, 1259.71387, -2046.20313, 58.19710,   0.00000, 0.00000, -183.18010);
	CreateDynamicObject(970, 1268.76184, -2046.64563, 58.64100,   0.00000, 0.00000, -2.00000);
	CreateDynamicObject(970, 1272.88806, -2046.79004, 58.64100,   0.00000, 0.00000, -2.00000);
	CreateDynamicObject(970, 1277.00684, -2046.92053, 58.64100,   0.00000, 0.00000, -2.00000);
	CreateDynamicObject(970, 1279.86218, -2044.95679, 58.64100,   0.00000, 0.00000, 89.68000);
	CreateDynamicObject(970, 1277.77185, -2046.96240, 58.64100,   0.00000, 0.00000, -2.00000);
	CreateDynamicObject(970, 1279.88354, -2040.83789, 58.64100,   0.00000, 0.00000, 90.40000);
	CreateDynamicObject(970, 1279.86768, -2036.71228, 58.64100,   0.00000, 0.00000, 89.92000);
	CreateDynamicObject(970, 1279.85437, -2032.57996, 58.64100,   0.00000, 0.00000, 90.22000);
	CreateDynamicObject(970, 1279.85352, -2028.44983, 58.64100,   0.00000, 0.00000, 89.86000);
	CreateDynamicObject(970, 1279.86572, -2024.32129, 58.64100,   0.00000, 0.00000, 89.86000);
	CreateDynamicObject(970, 1279.88611, -2020.15735, 58.64100,   0.00000, 0.00000, 89.86000);
	CreateDynamicObject(970, 1279.89172, -2016.03149, 58.64100,   0.00000, 0.00000, 89.86000);
	CreateDynamicObject(970, 1279.90710, -2011.88074, 58.64100,   0.00000, 0.00000, 89.86000);
	CreateDynamicObject(970, 1279.92029, -2009.18970, 58.64100,   0.00000, 0.00000, 89.86000);
	CreateDynamicObject(970, 1277.86108, -2007.11682, 58.66100,   0.00000, 1.00000, 0.00000);
	CreateDynamicObject(970, 1273.71582, -2007.11682, 58.72100,   0.00000, 1.00000, 0.00000);
	CreateDynamicObject(970, 1269.59668, -2007.11682, 58.79100,   0.00000, 1.00000, 0.00000);
	CreateDynamicObject(970, 1265.44592, -2007.09094, 58.85100,   0.00000, 1.00000, 0.00000);
	CreateDynamicObject(970, 1261.30164, -2007.08838, 58.93100,   0.00000, 1.00000, 0.00000);
	CreateDynamicObject(970, 1257.16174, -2007.08752, 59.01100,   0.00000, 1.00000, 0.00000);
	CreateDynamicObject(970, 1253.03699, -2007.08875, 59.09100,   0.00000, 1.00000, 0.00000);
	CreateDynamicObject(970, 1248.90845, -2007.08264, 59.17100,   0.00000, 1.00000, 0.00000);
	CreateDynamicObject(970, 1244.76331, -2007.09644, 59.25100,   0.00000, 1.00000, 0.00000);
	CreateDynamicObject(970, 1242.77295, -2009.16211, 59.56100,   0.00000, 0.00000, 89.86000);
	CreateDynamicObject(970, 1242.75940, -2013.30359, 59.56100,   0.00000, 0.00000, 89.86000);
	CreateDynamicObject(970, 1242.76013, -2017.46667, 59.56100,   0.00000, 0.00000, 89.86000);
	CreateDynamicObject(970, 1242.75415, -2021.59570, 59.56100,   0.00000, 0.00000, 89.86000);
	CreateDynamicObject(970, 1242.74622, -2025.65955, 59.56100,   0.00000, 0.00000, 89.86000);
	CreateDynamicObject(970, 1242.73083, -2029.79053, 59.56100,   0.00000, 0.00000, 89.86000);
	CreateDynamicObject(970, 1242.71033, -2033.91248, 59.56100,   0.00000, 0.00000, 89.86000);
	CreateDynamicObject(970, 1242.68677, -2038.07300, 59.56100,   0.00000, 0.00000, 89.86000);
	CreateDynamicObject(970, 1242.67200, -2042.20435, 59.56100,   0.00000, 0.00000, 89.86000);
	CreateDynamicObject(970, 1242.68518, -2043.52893, 59.56100,   0.00000, 0.00000, 89.86000);
	CreateDynamicObject(970, 1244.73096, -2045.62585, 59.55100,   0.00000, 2.00000, -2.00000);
	CreateDynamicObject(970, 1210.71765, -2042.46350, 68.50000,   0.00000, 0.00000, -90.24010);
	CreateDynamicObject(970, 1210.69775, -2046.60352, 68.50000,   0.00000, 0.00000, -90.24010);
	CreateDynamicObject(970, 1210.67981, -2050.74536, 68.50000,   0.00000, 0.00000, -90.24010);
	CreateDynamicObject(970, 1210.66101, -2054.90479, 68.50000,   0.00000, 0.00000, -90.24010);
	CreateDynamicObject(970, 1210.64734, -2059.02905, 68.50000,   0.00000, 0.00000, -90.24010);
	CreateDynamicObject(970, 1210.63574, -2063.17261, 68.50000,   0.00000, 0.00000, -90.24010);
	CreateDynamicObject(970, 1210.72644, -2031.56348, 68.50000,   0.00000, 0.00000, -90.24010);
	CreateDynamicObject(970, 1210.74524, -2027.41846, 68.50000,   0.00000, 0.00000, -90.24010);
	CreateDynamicObject(970, 1210.75830, -2023.24927, 68.50000,   0.00000, 0.00000, -90.24010);
	CreateDynamicObject(970, 1210.77600, -2019.10925, 68.50000,   0.00000, 0.00000, -90.24010);
	CreateDynamicObject(970, 1210.79651, -2014.98315, 68.50000,   0.00000, 0.00000, -90.24010);
	CreateDynamicObject(970, 1210.81494, -2010.84644, 68.50000,   0.00000, 0.00000, -90.24010);
	CreateDynamicObject(8557, 1277.12195, -2025.71631, 59.50670,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(8557, 1245.63208, -2026.68396, 60.36670,   0.00000, 0.00000, -270.35950);

	//.INT HIPERMERCADO
	CreateDynamicObject_e(18459,-1709.09960938,1884.69921875,1069.50000000,0.00000000,0.00000000,0.00000000); //object(cs_detrok07) (1)
	CreateDynamicObject_e(18459,-1709.09960938,1894.29980469,1069.50000000,0.00000000,0.00000000,0.00000000); //object(cs_detrok07) (2)
	CreateDynamicObject_e(18459,-1709.09960938,1903.89941406,1069.50000000,0.00000000,0.00000000,0.00000000); //object(cs_detrok07) (3)
	CreateDynamicObject_e(18459,-1704.30004883,1879.80004883,1069.50000000,0.00000000,0.00000000,270.00000000); //object(cs_detrok07) (4)
	CreateDynamicObject_e(18459,-1694.69995117,1879.80004883,1069.50000000,0.00000000,0.00000000,270.00000000); //object(cs_detrok07) (5)
	CreateDynamicObject_e(18459,-1689.79980469,1884.59960938,1069.50000000,0.00000000,0.00000000,0.00000000); //object(cs_detrok07) (6)
	CreateDynamicObject_e(18459,-1689.79980469,1894.19921875,1069.50000000,0.00000000,0.00000000,0.00000000); //object(cs_detrok07) (7)
	CreateDynamicObject_e(18459,-1689.79980469,1903.79980469,1069.50000000,0.00000000,0.00000000,0.00000000); //object(cs_detrok07) (8)
	CreateDynamicObject_e(18459,-1694.59997559,1908.69995117,1069.50000000,0.00000000,0.00000000,270.00000000); //object(cs_detrok07) (9)
	CreateDynamicObject_e(18459,-1704.19921875,1908.69921875,1069.50000000,0.00000000,0.00000000,270.00000000); //object(cs_detrok07) (10)
	CreateDynamicObject_e(18459,-1704.30004883,1907.59997559,1067.69995117,0.00000000,270.00000000,270.00000000); //object(cs_detrok07) (10)
	CreateDynamicObject_e(18459,-1704.30004883,1904.09997559,1067.69995117,0.00000000,270.00000000,270.00000000); //object(cs_detrok07) (10)
	CreateDynamicObject_e(18459,-1704.30004883,1900.59997559,1067.69995117,0.00000000,270.00000000,270.00000000); //object(cs_detrok07) (10)
	CreateDynamicObject_e(18459,-1704.19995117,1897.09997559,1067.69995117,0.00000000,270.00000000,270.00000000); //object(cs_detrok07) (10)
	CreateDynamicObject_e(18459,-1704.19995117,1893.59997559,1067.69995117,0.00000000,270.00000000,270.00000000); //object(cs_detrok07) (10)
	CreateDynamicObject_e(18459,-1704.19995117,1890.09997559,1067.69995117,0.00000000,270.00000000,270.00000000); //object(cs_detrok07) (10)
	CreateDynamicObject_e(18459,-1704.19995117,1886.59997559,1067.69995117,0.00000000,270.00000000,270.00000000); //object(cs_detrok07) (10)
	CreateDynamicObject_e(18459,-1704.19995117,1883.09997559,1067.69995117,0.00000000,270.00000000,270.00000000); //object(cs_detrok07) (10)
	CreateDynamicObject_e(18459,-1704.19995117,1879.59997559,1067.69995117,0.00000000,270.00000000,270.00000000); //object(cs_detrok07) (10)
	CreateDynamicObject_e(18459,-1694.69995117,1904.30004883,1067.69995117,0.00000000,270.00000000,90.00000000); //object(cs_detrok07) (10)
	CreateDynamicObject_e(18459,-1694.69995117,1907.69995117,1067.69995117,0.00000000,270.00000000,90.00000000); //object(cs_detrok07) (10)
	CreateDynamicObject_e(18459,-1694.69995117,1900.90002441,1067.69995117,0.00000000,270.00000000,90.00000000); //object(cs_detrok07) (10)
	CreateDynamicObject_e(18459,-1694.69995117,1897.40002441,1067.69995117,0.00000000,270.00000000,90.00000000); //object(cs_detrok07) (10)
	CreateDynamicObject_e(18459,-1694.69995117,1894.00000000,1067.69995117,0.00000000,270.00000000,90.00000000); //object(cs_detrok07) (10)
	CreateDynamicObject_e(18459,-1694.59997559,1890.59997559,1067.69995117,0.00000000,270.00000000,90.00000000); //object(cs_detrok07) (10)
	CreateDynamicObject_e(18459,-1694.59997559,1887.09997559,1067.69995117,0.00000000,270.00000000,89.99993896); //object(cs_detrok07) (10)
	CreateDynamicObject_e(18459,-1694.59997559,1883.59997559,1067.69995117,0.00000000,270.00000000,90.00000000); //object(cs_detrok07) (10)
	CreateDynamicObject_e(18459,-1694.59997559,1880.09997559,1067.69995117,0.00000000,270.00000000,90.00000000); //object(cs_detrok07) (10)
	CreateDynamicObject_e(1429,-1708.50000000,1904.09997559,1069.30004883,0.00000000,0.00000000,90.00000000); //object(dyn_tv) (1)
	CreateDynamicObject_e(1743,-1704.00000000,1907.00000000,1067.80004883,0.00000000,0.00000000,0.00000000); //object(med_cabinet_3) (1)
	CreateDynamicObject_e(1742,-1707.09997559,1908.59997559,1067.80004883,0.00000000,0.00000000,0.00000000); //object(med_bookshelf) (1)
	CreateDynamicObject_e(1740,-1705.80004883,1907.00000000,1067.80004883,0.00000000,0.00000000,0.00000000); //object(low_cabinet_3) (1)
	CreateDynamicObject_e(1417,-1705.00000000,1908.09997559,1068.00000000,0.00000000,0.00000000,0.00000000); //object(dyn_cupboard) (1)
	CreateDynamicObject_e(1416,-1708.69995117,1903.69995117,1068.40002441,0.00000000,0.00000000,90.00000000); //object(dyn_unit) (1)
	CreateDynamicObject_e(1429,-1708.50000000,1903.30004883,1069.30004883,0.00000000,0.00000000,90.00000000); //object(dyn_tv) (2)
	CreateDynamicObject_e(1416,-1708.69995117,1902.30004883,1068.40002441,0.00000000,0.00000000,90.00000000); //object(dyn_unit) (2)
	CreateDynamicObject_e(1416,-1708.69995117,1900.90002441,1068.40002441,0.00000000,0.00000000,90.00000000); //object(dyn_unit) (3)
	CreateDynamicObject_e(1416,-1708.69995117,1899.50000000,1068.40002441,0.00000000,0.00000000,90.00000000); //object(dyn_unit) (4)
	CreateDynamicObject_e(1416,-1708.69995117,1898.09997559,1068.40002441,0.00000000,0.00000000,90.00000000); //object(dyn_unit) (5)
	CreateDynamicObject_e(1416,-1708.69995117,1896.69995117,1068.40002441,0.00000000,0.00000000,90.00000000); //object(dyn_unit) (6)
	CreateDynamicObject_e(1416,-1708.69995117,1895.30004883,1068.40002441,0.00000000,0.00000000,90.00000000); //object(dyn_unit) (7)
	CreateDynamicObject_e(1518,-1708.40002441,1902.59997559,1069.30004883,0.00000000,0.00000000,90.00000000); //object(dyn_tv_2) (1)
	CreateDynamicObject_e(1518,-1708.40002441,1901.90002441,1069.30004883,0.00000000,0.00000000,90.00000000); //object(dyn_tv_2) (2)
	CreateDynamicObject_e(1747,-1708.80004883,1901.50000000,1069.00000000,0.00000000,0.00000000,90.00000000); //object(low_tv_2) (1)
	CreateDynamicObject_e(1747,-1708.69995117,1900.80004883,1069.00000000,0.00000000,0.00000000,90.00000000); //object(low_tv_2) (2)
	CreateDynamicObject_e(1751,-1708.90002441,1900.00000000,1069.00000000,0.00000000,0.00000000,90.00000000); //object(med_tv_4) (1)
	CreateDynamicObject_e(1751,-1708.90002441,1899.09997559,1069.00000000,0.00000000,0.00000000,90.00000000); //object(med_tv_4) (2)
	CreateDynamicObject_e(1752,-1708.69995117,1898.09997559,1069.00000000,0.00000000,0.00000000,90.00000000); //object(swank_tv_3) (1)
	CreateDynamicObject_e(1752,-1708.69995117,1897.00000000,1069.00000000,0.00000000,0.00000000,90.00000000); //object(swank_tv_3) (2)
	CreateDynamicObject_e(1752,-1708.69995117,1895.80004883,1069.00000000,0.00000000,0.00000000,90.00000000); //object(swank_tv_3) (3)
	CreateDynamicObject_e(1796,-1690.80004883,1903.80004883,1067.80004883,0.00000000,0.00000000,0.00000000); //object(low_bed_4) (1)
	CreateDynamicObject_e(1797,-1691.30004883,1900.59997559,1067.80004883,0.00000000,0.00000000,0.00000000); //object(swank_bed_3) (1)
	CreateDynamicObject_e(1798,-1691.40002441,1897.50000000,1067.80004883,0.00000000,0.00000000,0.00000000); //object(swank_bed_1) (1)
	CreateDynamicObject_e(1799,-1693.30004883,1904.09997559,1067.80004883,0.00000000,0.00000000,0.00000000); //object(med_bed_4) (1)
	CreateDynamicObject_e(1802,-1693.50000000,1900.19995117,1067.80004883,0.00000000,0.00000000,0.00000000); //object(med_bed_2) (1)
	CreateDynamicObject_e(1803,-1693.50000000,1897.09997559,1067.80004883,0.00000000,0.00000000,0.00000000); //object(med_bed_7) (1)
	CreateDynamicObject_e(2090,-1691.50000000,1893.80004883,1067.80004883,0.00000000,0.00000000,0.00000000); //object(swank_bed_5) (1)
	CreateDynamicObject_e(2091,-1696.30004883,1908.30004883,1067.80004883,0.00000000,0.00000000,0.00000000); //object(tv_ward_med_1) (1)
	CreateDynamicObject_e(2093,-1697.90002441,1906.90002441,1067.80004883,0.00000000,0.00000000,0.00000000); //object(tv_ward_low) (1)
	CreateDynamicObject_e(2099,-1700.90002441,1908.30004883,1067.80004883,0.00000000,0.00000000,0.00000000); //object(med_hi_fi_1) (1)
	CreateDynamicObject_e(2100,-1699.40002441,1908.30004883,1067.80004883,0.00000000,0.00000000,0.00000000); //object(med_hi_fi_2) (1)
	CreateDynamicObject_e(2101,-1702.00000000,1908.00000000,1067.80004883,0.00000000,0.00000000,0.00000000); //object(med_hi_fi_3) (1)
	CreateDynamicObject_e(2102,-1703.50000000,1908.09997559,1069.09997559,0.00000000,0.00000000,0.00000000); //object(low_hi_fi_2) (1)
	CreateDynamicObject_e(2103,-1696.09997559,1908.09997559,1069.80004883,0.00000000,0.00000000,0.00000000); //object(low_hi_fi_1) (1)
	CreateDynamicObject_e(2104,-1708.19995117,1908.50000000,1067.80004883,0.00000000,0.00000000,0.00000000); //object(swank_hi_fi) (1)
	CreateDynamicObject_e(2127,-1690.30004883,1889.40002441,1067.80004883,0.00000000,0.00000000,270.00000000); //object(cj_k1_fridge_unit) (1)
	CreateDynamicObject_e(2130,-1690.40002441,1887.30004883,1067.80004883,0.00000000,0.00000000,270.00000000); //object(cj_k1_sink) (1)
	CreateDynamicObject_e(2131,-1690.40002441,1885.30004883,1067.80004883,0.00000000,0.00000000,270.00000000); //object(cj_kitch2_fridge) (1)
	CreateDynamicObject_e(2132,-1690.40002441,1883.00000000,1067.80004883,0.00000000,0.00000000,270.00000000); //object(cj_kitch2_sink) (1)
	CreateDynamicObject_e(2135,-1690.30004883,1890.59997559,1067.80004883,0.00000000,0.00000000,270.00000000); //object(cj_k3_cooker) (1)
	CreateDynamicObject_e(2136,-1690.50000000,1892.80004883,1067.80004883,0.00000000,0.00000000,266.00000000); //object(cj_k3_sink) (1)
	CreateDynamicObject_e(2230,-1699.19995117,1897.50000000,1067.80004883,0.00000000,0.00000000,0.00000000); //object(swank_speaker_2) (1)
	CreateDynamicObject_e(2231,-1698.30004883,1897.50000000,1067.80004883,0.00000000,0.00000000,0.00000000); //object(swank_speaker_3) (1)
	CreateDynamicObject_e(2232,-1700.50000000,1897.30004883,1068.40002441,0.00000000,0.00000000,0.00000000); //object(med_speaker_4) (1)
	CreateDynamicObject_e(2233,-1697.30004883,1897.59997559,1067.80004883,0.00000000,0.00000000,0.00000000); //object(swank_speaker_4) (1)
	CreateDynamicObject_e(2296,-1708.69995117,1890.50000000,1067.80004883,0.00000000,0.00000000,90.00000000); //object(tv_unit_1) (1)
	CreateDynamicObject_e(2297,-1701.50000000,1900.50000000,1067.80004883,0.00000000,0.00000000,0.00000000); //object(tv_unit_2) (1)
	CreateDynamicObject_e(2298,-1697.19995117,1896.90002441,1067.80004883,0.00000000,0.00000000,0.00000000); //object(swank_bed_7) (1)
	CreateDynamicObject_e(2300,-1700.09997559,1900.69995117,1067.80004883,0.00000000,0.00000000,0.00000000); //object(med_bed_8) (1)
	CreateDynamicObject_e(2301,-1704.59997559,1901.69995117,1067.80004883,0.00000000,0.00000000,0.00000000); //object(med_bed_9) (1)
	CreateDynamicObject_e(2415,-1702.30004883,1895.00000000,1067.80004883,0.00000000,0.00000000,0.00000000); //object(cj_ff_fryer) (1)
	CreateDynamicObject_e(2417,-1700.69995117,1895.09997559,1067.80004883,0.00000000,0.00000000,0.00000000); //object(cj_ff_cooker) (1)
	CreateDynamicObject_e(2421,-1698.40002441,1895.40002441,1067.80004883,0.00000000,0.00000000,0.00000000); //object(cj_ff_microw) (1)
	CreateDynamicObject_e(2452,-1696.69995117,1895.69995117,1067.80004883,0.00000000,0.00000000,0.00000000); //object(cj_ff_fridge2) (1)
	CreateDynamicObject_e(2514,-1700.00000000,1892.90002441,1067.80004883,0.00000000,0.00000000,0.00000000); //object(cj_toilet1) (1)
	CreateDynamicObject_e(2517,-1701.69995117,1892.30004883,1067.80004883,0.00000000,0.00000000,0.00000000); //object(cj_shower1) (1)
	CreateDynamicObject_e(2522,-1697.69995117,1893.40002441,1067.80004883,0.00000000,0.00000000,0.00000000); //object(cj_bath3) (1)
	CreateDynamicObject_e(2525,-1699.90002441,1891.69995117,1067.80004883,0.00000000,0.00000000,0.00000000); //object(cj_toilet4) (1)
	CreateDynamicObject_e(2526,-1703.59997559,1892.00000000,1067.80004883,0.00000000,0.00000000,0.00000000); //object(cj_bath4) (1)
	CreateDynamicObject_e(2627,-1703.50000000,1889.09997559,1067.80004883,0.00000000,0.00000000,0.00000000); //object(gym_treadmill) (1)
	CreateDynamicObject_e(2628,-1700.50000000,1889.30004883,1067.80004883,0.00000000,0.00000000,0.00000000); //object(gym_bench2) (1)
	CreateDynamicObject_e(2629,-1697.40002441,1890.19995117,1067.80004883,0.00000000,0.00000000,0.00000000); //object(gym_bench1) (1)
	CreateDynamicObject_e(2630,-1701.69995117,1887.69995117,1067.80004883,0.00000000,0.00000000,0.00000000); //object(gym_bike) (1)
	CreateDynamicObject_e(2631,-1698.50000000,1887.69995117,1067.80004883,0.00000000,0.00000000,0.00000000); //object(gym_mat1) (1)
	CreateDynamicObject_e(2632,-1694.90002441,1891.59997559,1067.80004883,0.00000000,0.00000000,0.00000000); //object(gym_mat02) (1)
	CreateDynamicObject_e(2864,-1697.59997559,1893.90002441,1068.69995117,0.00000000,0.00000000,0.00000000); //object(gb_kitchplatecln04) (1)
	CreateDynamicObject_e(2623,-1707.59997559,1883.69995117,1069.40002441,0.00000000,0.00000000,90.00000000); //object(cj_pro_counter) (1)
	CreateDynamicObject_e(2623,-1707.59997559,1887.19995117,1069.40002441,0.00000000,0.00000000,90.00000000); //object(cj_pro_counter) (2)
	CreateDynamicObject_e(2604,-1693.59997559,1887.59997559,1068.59997559,0.00000000,0.00000000,0.00000000); //object(cj_police_counter) (1)
	CreateDynamicObject_e(2948,-1697.00000000,1879.90002441,1067.80004883,0.00000000,0.00000000,270.00000000); //object(cr_door_02) (1)
	CreateDynamicObject_e(2948,-1698.90002441,1879.90002441,1067.80004883,0.00000000,0.00000000,90.00000000); //object(cr_door_02) (2)
	CreateDynamicObject_e(10932,-1700.40002441,1891.09997559,1067.40002441,0.00000000,0.00000000,0.00000000); //object(station03_sfs) (1)

	//.EXT MERCADO NEGRO
	CreateDynamicObject(3050,1702.59997559,-1971.00000000,8.80000019,0.00000000,180.00000000,270.00000000); //object(des_quarrygate2) (1)
	CreateDynamicObject(3050,1702.59997559,-1964.90002441,8.80000019,0.00000000,179.99450684,270.00000000); //object(des_quarrygate2) (5)
	CreateDynamicObject(1491,1702.59997559,-1971.00000000,7.80000019,0.00000000,0.00000000,90.00000000); //object(gen_doorint01) (2)
	CreateDynamicObject(3050,1692.40002441,-1942.50000000,9.30000019,0.00000000,179.99450684,180.00000000); //object(des_quarrygate2) (6)
	CreateDynamicObject(3050,1697.00000000,-1942.50000000,9.30000019,0.00000000,179.99450684,179.99450684); //object(des_quarrygate2) (7)
	CreateDynamicObject(2637,1691.40002441,-1948.30004883,7.69999981,0.00000000,0.00000000,0.00000000); //object(cj_pizza_table2) (1)
	CreateDynamicObject(2637,1693.50000000,-1948.30004883,7.69999981,0.00000000,0.00000000,0.00000000); //object(cj_pizza_table2) (2)
	CreateDynamicObject(2637,1689.30004883,-1948.30004883,7.69999981,0.00000000,0.00000000,0.00000000); //object(cj_pizza_table2) (3)
	CreateDynamicObject(2639,1693.59997559,-1946.59997559,7.90000010,0.00000000,0.00000000,180.00000000); //object(cj_pizza_chair3) (1)
	CreateDynamicObject(2639,1689.19995117,-1946.59997559,7.90000010,0.00000000,0.00000000,179.99450684); //object(cj_pizza_chair3) (2)
	CreateDynamicObject(2639,1691.40002441,-1946.59997559,7.90000010,0.00000000,0.00000000,179.99450684); //object(cj_pizza_chair3) (3)
	CreateDynamicObject(335,1689.19995117,-1948.59997559,8.39999962,0.00000000,179.99993896,0.00000000); //object(1)
	CreateDynamicObject(336,1689.59997559,-1948.69995117,8.19999981,0.00000000,86.00000000,0.00000000); //object(2)
	CreateDynamicObject(344,1690.50000000,-1948.90002441,8.30000019,0.00000000,0.00000000,0.00000000); //object(3)
	CreateDynamicObject(346,1691.59997559,-1948.50000000,8.19999981,284.13928223,188.21380615,183.96813965); //object(4)
	CreateDynamicObject(347,1690.80004883,-1948.59997559,8.19999981,295.88571167,23.43753052,21.30682373); //object(5)
	CreateDynamicObject(348,1691.40002441,-1948.09997559,8.19999981,278.00000000,359.99987793,359.99987793); //object(6)
	CreateDynamicObject(349,1692.80004883,-1948.30004883,8.19999981,281.64614868,59.34017944,58.81481934); //object(7)
	CreateDynamicObject(352,1693.69995117,-1948.30004883,8.19999981,272.82812500,134.98236084,133.01733398); //object(8)
	CreateDynamicObject(355,1692.80004883,-1948.69995117,8.19999981,278.24462891,103.94561768,104.08547974); //object(9)
	CreateDynamicObject(357,1689.59997559,-1948.19995117,8.19999981,280.19604492,78.80456543,78.62957764); //object(10)
	CreateDynamicObject(372,1690.50000000,-1948.00000000,8.19999981,274.47143555,116.52294922,116.59280396); //object(11)
	CreateDynamicObject(373,1688.50000000,-1948.50000000,8.60000038,332.45904541,300.23733521,249.57638550); //object(12)
	CreateDynamicObject(2043,1688.69995117,-1949.90002441,7.40000010,0.00000000,0.00000000,0.00000000); //object(ammo_box_m4) (1)
	CreateDynamicObject(930,1693.50000000,-1956.90002441,7.69999981,0.00000000,0.00000000,0.00000000); //object(o2_bottles) (1)
	CreateDynamicObject(925,1689.19995117,-1961.80004883,8.30000019,0.00000000,0.00000000,0.00000000); //object(rack2) (1)
	CreateDynamicObject(964,1689.09997559,-1958.00000000,7.30000019,0.00000000,0.00000000,0.00000000); //object(cj_metal_crate) (1)
	CreateDynamicObject(2359,1689.09997559,-1956.30004883,7.50000000,0.00000000,0.00000000,0.00000000); //object(ammo_box_c5) (1)
	CreateDynamicObject(2358,1689.09997559,-1955.19995117,7.40000010,0.00000000,0.00000000,0.00000000); //object(ammo_box_c2) (1)
	CreateDynamicObject(2043,1693.80004883,-1959.90002441,7.40000010,0.00000000,0.00000000,0.00000000); //object(ammo_box_m4) (2)
	CreateDynamicObject(942,1691.69995117,-1974.59997559,10.30000019,0.00000000,0.00000000,0.00000000); //object(cj_df_unit_2) (1)
	CreateDynamicObject(939,1696.80004883,-1974.50000000,10.30000019,0.00000000,0.00000000,0.00000000); //object(cj_df_unit) (1)
	CreateDynamicObject(1636,1699.69995117,-1972.00000000,8.19999981,0.00000000,0.00000000,0.00000000); //object(rcbomb) (1)
	CreateDynamicObject(1654,1689.59997559,-1958.19995117,8.50000000,0.00000000,0.00000000,0.00000000); //object(dynamite) (1)
	CreateDynamicObject(964,1690.40002441,-1958.00000000,7.30000019,0.00000000,0.00000000,0.00000000); //object(cj_metal_crate) (2)
	CreateDynamicObject(964,1689.69995117,-1972.19995117,7.80000019,0.00000000,0.00000000,80.00000000); //object(cj_metal_crate) (3)
	CreateDynamicObject(964,1689.90002441,-1971.00000000,7.80000019,0.00000000,0.00000000,79.99694824); //object(cj_metal_crate) (4)
	CreateDynamicObject(8843,1703.69995117,-1971.19995117,7.90000010,0.00000000,0.00000000,90.00000000); //object(arrows01_lvs) (1)
	CreateDynamicObject(8843,1691.90002441,-1962.90002441,7.30000019,0.00000000,0.00000000,0.00000000); //object(arrows01_lvs) (2)

	//.EXT BASUREROS DESCARGAS
	CreateDynamicObject(18245,2568.00000000,-878.79998779,94.30000305,0.00000000,6.00000000,0.00000000); //object(cuntwjunk02) (1)
	CreateDynamicObject(18249,2494.30004883,-846.90002441,99.30000305,354.17886353,14.07406616,341.45593262); //object(cuntwjunk05) (1)
	CreateDynamicObject(13591,2555.39990234,-856.70001221,84.40000153,0.00000000,6.00000000,0.00000000); //object(kickcar28) (1)
	CreateDynamicObject(3594,2548.60009766,-856.79998779,85.19999695,0.00000000,10.00000000,0.00000000); //object(la_fuckcar1) (1)
	CreateDynamicObject(3594,2545.80004883,-856.50000000,85.69999695,0.00000000,9.99755859,0.00000000); //object(la_fuckcar1) (2)
	CreateDynamicObject(3594,2542.80004883,-856.59997559,86.19999695,0.00000000,9.99755859,0.00000000); //object(la_fuckcar1) (3)
	CreateDynamicObject(852,2529.80004883,-853.59997559,87.59999847,0.00000000,0.00000000,0.00000000); //object(cj_urb_rub_4) (1)
	CreateDynamicObject(853,2528.10009766,-852.59997559,88.30000305,0.00000000,10.00000000,0.00000000); //object(cj_urb_rub_5) (1)
	CreateDynamicObject(18249,2515.39990234,-855.00000000,96.00000000,0.00000000,3.99707031,333.99938965); //object(cuntwjunk05) (2)
	CreateDynamicObject(18249,2597.89941406,-851.89941406,80.90000153,356.08337402,12.02453613,340.82885742); //object(cuntwjunk05) (3)
	CreateDynamicObject(18248,2505.80004883,-816.20001221,97.59999847,0.00000000,0.00000000,339.99633789); //object(cuntwjunk01) (2)
	CreateDynamicObject(18248,2499.00000000,-814.09997559,97.40000153,0.00000000,0.00000000,339.99389648); //object(cuntwjunk01) (3)
	CreateDynamicObject(853,2530.89990234,-851.20001221,87.90000153,0.00000000,0.00000000,0.00000000); //object(cj_urb_rub_5) (2)
	CreateDynamicObject(852,2532.69995117,-854.90002441,87.19999695,0.00000000,0.00000000,0.00000000); //object(cj_urb_rub_4) (2)
	CreateDynamicObject(851,2533.89990234,-852.50000000,87.30000305,0.00000000,0.00000000,0.00000000); //object(cj_urb_rub_2) (1)
	CreateDynamicObject(851,2529.30004883,-856.20001221,88.00000000,0.00000000,0.00000000,0.00000000); //object(cj_urb_rub_2) (2)
	CreateDynamicObject(849,2533.50000000,-858.59997559,87.30000305,0.00000000,0.00000000,0.00000000); //object(cj_urb_rub_3) (1)
	CreateDynamicObject(849,2536.30004883,-856.50000000,86.90000153,0.00000000,0.00000000,0.00000000); //object(cj_urb_rub_3) (2)
	CreateDynamicObject(5291,2463.69995117,-852.79998779,114.09999847,0.00000000,0.00000000,0.00000000); //object(snpedscrsap_las01) (1)
	CreateDynamicObject(2890,2537.50000000,-844.79998779,86.59999847,0.00000000,0.00000000,0.00000000); //object(kmb_skip) (1)
	CreateDynamicObject(1440,2542.89990234,-846.79998779,86.19999695,0.00000000,0.00000000,0.00000000); //object(dyn_box_pile_3) (1)
	CreateDynamicObject(1439,2535.50000000,-864.09997559,86.59999847,0.00000000,0.00000000,0.00000000); //object(dyn_dumpster_1) (1)
	CreateDynamicObject(1365,2526.39990234,-838.00000000,89.30000305,0.00000000,0.00000000,0.00000000); //object(cj_big_skip1) (1)

	//.EXT BASUREROS
	CreateDynamicObject(852,1235.90002441,-1266.40002441,12.39999962,0.00000000,0.00000000,0.00000000); //object(cj_urb_rub_4) (2)
	CreateDynamicObject(849,1240.19995117,-1266.40002441,12.69999981,0.00000000,0.00000000,0.00000000); //object(cj_urb_rub_3) (1)
	CreateDynamicObject(1440,1243.40002441,-1264.50000000,12.89999962,0.00000000,0.00000000,0.00000000); //object(dyn_box_pile_3) (1)
	CreateDynamicObject(1358,1232.50000000,-1267.80004883,13.69999981,0.00000000,0.00000000,0.00000000); //object(cj_skip_rubbish) (1)
	CreateDynamicObject(2674,1239.50000000,-1261.40002441,16.20000076,0.00000000,0.00000000,0.00000000); //object(proc_rubbish_2) (1)
	CreateDynamicObject(960,1237.50000000,-1264.09997559,12.69999981,0.00000000,0.00000000,0.00000000); //object(cj_arm_crate) (1)
	CreateDynamicObject(2890,1263.50000000,-1238.90002441,15.69999981,0.00000000,0.00000000,0.00000000); //object(kmb_skip) (1)
	CreateDynamicObject(1358,1255.59997559,-1240.80004883,18.20000076,0.00000000,0.00000000,0.00000000); //object(cj_skip_rubbish) (2)
	CreateDynamicObject(923,1251.00000000,-1239.40002441,17.60000038,0.00000000,0.00000000,0.00000000); //object(packing_carates2) (1)
	CreateDynamicObject(3035,1268.59997559,-1271.40002441,13.30000019,0.00000000,0.00000000,0.00000000); //object(tmp_bin) (1)
	CreateDynamicObject(3035,1266.09997559,-1271.40002441,13.30000019,0.00000000,0.00000000,0.00000000); //object(tmp_bin) (2)
	CreateDynamicObject(3035,1263.30004883,-1271.50000000,13.30000019,0.00000000,0.00000000,0.00000000); //object(tmp_bin) (3)
	CreateDynamicObject(3035,1260.50000000,-1271.30004883,13.30000019,0.00000000,0.00000000,0.00000000); //object(tmp_bin) (4)

	//.INT LSTV (PUBLICO)
	CreateDynamicObject_e(18611,-1971.30004883,607.29998779,1056.19995117,0.00000000,0.00000000,0.00000000); //object(cs_landbit_71_a) (1)
	CreateDynamicObject_e(18610,-1973.09997559,607.40002441,1054.50000000,0.00000000,270.00000000,0.00000000); //object(cs_landbit_70_a) (1)
	CreateDynamicObject_e(18610,-1976.59997559,607.40002441,1054.50000000,0.00000000,270.00000000,0.00000000); //object(cs_landbit_70_a) (2)
	CreateDynamicObject_e(18610,-1980.09997559,607.40002441,1054.50000000,0.00000000,270.00000000,0.00000000); //object(cs_landbit_70_a) (3)
	CreateDynamicObject_e(18611,-1980.19995117,607.59997559,1056.19995117,0.00000000,0.00000000,0.00000000); //object(cs_landbit_71_a) (2)
	CreateDynamicObject_e(18610,-1980.09997559,597.79998779,1054.50000000,0.00000000,270.00000000,0.00000000); //object(cs_landbit_70_a) (4)
	CreateDynamicObject_e(18610,-1976.59997559,597.79998779,1054.50000000,0.00000000,270.00000000,0.00000000); //object(cs_landbit_70_a) (5)
	CreateDynamicObject_e(18610,-1973.09997559,597.79998779,1054.50000000,0.00000000,270.00000000,0.00000000); //object(cs_landbit_70_a) (6)
	CreateDynamicObject_e(18611,-1971.30004883,597.90002441,1056.19995117,0.00000000,0.00000000,0.00000000); //object(cs_landbit_71_a) (4)
	CreateDynamicObject_e(18611,-1980.19995117,598.00000000,1056.19995117,0.00000000,0.00000000,0.00000000); //object(cs_landbit_71_a) (5)
	CreateDynamicObject_e(18611,-1975.50000000,612.19921875,1056.19995117,0.00000000,0.00000000,90.00000000); //object(cs_landbit_71_a) (6)
	CreateDynamicObject_e(18611,-1975.59997559,593.40002441,1056.19995117,0.00000000,0.00000000,90.00000000); //object(cs_landbit_71_a) (8)
	CreateDynamicObject_e(1705,-1976.69995117,611.40002441,1054.59997559,0.00000000,0.00000000,300.00000000); //object(kb_chair04) (1)
	CreateDynamicObject_e(1705,-1976.19995117,608.79998779,1054.59997559,0.00000000,0.00000000,229.99816895); //object(kb_chair04) (2)
	CreateDynamicObject_e(1714,-1979.59960938,609.69921875,1054.59997559,0.00000000,0.00000000,79.99694824); //object(kb_swivelchair1) (1)
	CreateDynamicObject_e(2008,-1978.50000000,610.40002441,1054.59997559,0.00000000,0.00000000,270.00000000); //object(officedesk1) (1)
	CreateDynamicObject_e(2008,-1978.59997559,603.09997559,1054.59997559,0.00000000,0.00000000,270.00000000); //object(officedesk1) (2)
	CreateDynamicObject_e(1714,-1979.69995117,602.20001221,1054.59997559,0.00000000,0.00000000,79.99694824); //object(kb_swivelchair1) (2)
	CreateDynamicObject_e(1705,-1976.59997559,601.79998779,1054.59997559,0.00000000,0.00000000,229.99328613); //object(kb_chair04) (3)
	CreateDynamicObject_e(1705,-1977.00000000,603.90002441,1054.59997559,0.00000000,0.00000000,299.99328613); //object(kb_chair04) (4)
	CreateDynamicObject_e(2193,-1973.00000000,610.50000000,1054.59997559,0.00000000,0.00000000,0.00000000); //object(med_office2_desk_2) (1)
	CreateDynamicObject_e(2193,-1972.00000000,607.59997559,1054.59997559,0.00000000,0.00000000,90.00000000); //object(med_office2_desk_2) (2)
	CreateDynamicObject_e(2746,-1972.59997559,598.00000000,1055.19995117,0.00000000,0.00000000,0.00000000); //object(cj_donut_chair) (1)
	CreateDynamicObject_e(2747,-1972.80004883,600.00000000,1055.00000000,0.00000000,0.00000000,0.00000000); //object(cj_donut_table) (1)
	CreateDynamicObject_e(2748,-1972.80004883,601.50000000,1055.19995117,0.00000000,0.00000000,0.00000000); //object(cj_donut_chair2) (1)
	CreateDynamicObject_e(2748,-1972.59997559,595.00000000,1055.19995117,0.00000000,0.00000000,180.00000000); //object(cj_donut_chair2) (2)
	CreateDynamicObject_e(2747,-1972.69995117,596.20001221,1055.00000000,0.00000000,0.00000000,0.00000000); //object(cj_donut_table) (2)
	CreateDynamicObject_e(2837,-1972.90002441,600.00000000,1055.40002441,0.00000000,0.00000000,0.00000000); //object(gb_takeaway02) (1)
	CreateDynamicObject_e(2837,-1972.80004883,596.29998779,1055.40002441,0.00000000,0.00000000,0.00000000); //object(gb_takeaway02) (2)
	CreateDynamicObject_e(1505,-1977.80004883,593.50000000,1054.59997559,0.00000000,0.00000000,0.00000000); //object(gen_doorext07) (1)
	CreateDynamicObject_e(1714,-1972.19995117,610.70001221,1054.59997559,0.00000000,0.00000000,179.99694824); //object(kb_swivelchair1) (3)
	CreateDynamicObject_e(1714,-1972.00000000,608.40002441,1054.59997559,0.00000000,0.00000000,269.99450684); //object(kb_swivelchair1) (4)
	CreateDynamicObject_e(16001,-1980.09997559,602.79998779,1056.59997559,0.00000000,90.00000000,0.00000000); //object(drvin_projhut) (1)
	CreateDynamicObject_e(16001,-1980.09997559,610.09997559,1056.59997559,0.00000000,90.00000000,0.00000000); //object(drvin_projhut) (2)
	CreateDynamicObject_e(18610,-1976.59997559,597.79998779,1057.80004883,0.00000000,270.00000000,0.00000000); //object(cs_landbit_70_a) (7)
	CreateDynamicObject_e(18610,-1980.09997559,597.79998779,1057.80004883,0.00000000,270.00000000,0.00000000); //object(cs_landbit_70_a) (8)
	CreateDynamicObject_e(18610,-1973.09997559,597.79998779,1057.80004883,0.00000000,270.00000000,0.00000000); //object(cs_landbit_70_a) (9)
	CreateDynamicObject_e(18610,-1973.09997559,607.40002441,1057.80004883,0.00000000,270.00000000,0.00000000); //object(cs_landbit_70_a) (10)
	CreateDynamicObject_e(18610,-1980.09997559,607.40002441,1057.80004883,0.00000000,270.00000000,0.00000000); //object(cs_landbit_70_a) (11)
	CreateDynamicObject_e(18610,-1976.59997559,607.40002441,1057.80004883,0.00000000,270.00000000,0.00000000); //object(cs_landbit_70_a) (12)
	CreateDynamicObject_e(14406,-1979.19995117,594.40002441,1054.09997559,0.00000000,0.00000000,240.00000000); //object(mansion-light05) (1)
	CreateDynamicObject_e(14406,-1974.50000000,611.29998779,1054.09997559,0.00000000,0.00000000,89.99633789); //object(mansion-light05) (2)

	//.EXT GROTTI
	CreateDynamicObject_e(1850,554.29998779,-1257.59997559,16.20000076,0.00000000,0.00000000,30.00000000); //object(shop_shelf08) (1)
	CreateDynamicObject_e(1850,557.09997559,-1256.00000000,16.20000076,0.00000000,0.00000000,29.99816895); //object(shop_shelf08) (2)
	CreateDynamicObject_e(1850,559.90002441,-1254.40002441,16.20000076,0.00000000,0.00000000,29.99816895); //object(shop_shelf08) (3)
	CreateDynamicObject_e(4640,561.40002441,-1254.19995117,17.89999962,0.00000000,0.00000000,20.00000000); //object(paypark_lan03) (1)
	CreateDynamicObject_e(1250,559.20001221,-1255.59997559,16.79999924,0.00000000,0.00000000,300.00000000); //object(smashbarpost) (1)
	CreateDynamicObject_e(1483,522.09997559,-1292.30004883,18.20000076,0.00000000,0.00000000,90.00000000); //object(dyn_garrage2) (1)
	CreateDynamicObject_e(1483,528.79998779,-1292.19995117,18.20000076,0.00000000,0.00000000,90.00000000); //object(dyn_garrage2) (2)
	CreateDynamicObject_e(1483,535.50000000,-1292.19995117,18.20000076,0.00000000,0.00000000,90.00000000); //object(dyn_garrage2) (3)
	CreateDynamicObject_e(1483,542.19921875,-1292.19921875,18.20000076,0.00000000,0.00000000,90.00000000); //object(dyn_garrage2) (4)
	CreateDynamicObject_e(1483,548.89941406,-1292.09960938,18.20000076,0.00000000,0.00000000,90.00000000); //object(dyn_garrage2) (5)
	CreateDynamicObject_e(1483,544.59997559,-1267.00000000,18.20000076,0.00000000,0.00000000,305.50000000); //object(dyn_garrage2) (7)
	CreateDynamicObject_e(1483,539.09997559,-1270.90002441,18.20000076,0.00000000,0.00000000,305.49682617); //object(dyn_garrage2) (8)
	CreateDynamicObject_e(1483,533.59997559,-1275.00000000,18.20000076,0.00000000,0.00000000,307.49682617); //object(dyn_garrage2) (9)
	CreateDynamicObject_e(1483,528.20001221,-1279.09997559,18.20000076,0.00000000,0.00000000,307.49633789); //object(dyn_garrage2) (10)
	CreateDynamicObject_e(1483,522.79998779,-1283.30004883,18.20000076,0.00000000,0.00000000,307.49633789); //object(dyn_garrage2) (11)
	CreateDynamicObject_e(1260,559.09960938,-1298.79980469,30.29999924,0.00000000,0.00000000,251.65832520); //object(billbd3) (2)
	CreateDynamicObject_e(4731,560.29998779,-1299.50000000,35.50000000,0.00000000,0.00000000,191.75000000); //object(billbrdlan2_05) (1)
	CreateDynamicObject_e(4731,559.90002441,-1299.90002441,35.50000000,0.00000000,0.00000000,11.74987793); //object(billbrdlan2_05) (2)
	CreateDynamicObject_e(8322,545.40002441,-1313.00000000,20.00000000,0.00000000,0.00000000,344.00000000); //object(vgsbboardsigns08) (1)
	CreateDynamicObject_e(10281,542.50000000,-1293.50000000,28.60000038,0.00000000,0.00000000,180.00000000); //object(michsign_sfe) (1)
	CreateDynamicObject_e(18454,518.20001221,-1299.30004883,15.89999962,0.00000000,0.00000000,0.00000000); //object(cs_detrok02) (1)
	CreateDynamicObject_e(18454,518.20001221,-1299.30004883,19.29999924,0.00000000,0.00000000,0.00000000); //object(cs_detrok02) (2)
	CreateDynamicObject_e(18454,518.09997559,-1299.30004883,22.70000076,0.00000000,0.00000000,0.00000000); //object(cs_detrok02) (4)
	CreateDynamicObject_e(18454,566.40002441,-1299.09997559,22.70000076,0.00000000,0.00000000,0.00000000); //object(cs_detrok02) (9)
	CreateDynamicObject_e(18454,566.40002441,-1299.09997559,19.20000076,0.00000000,0.00000000,0.00000000); //object(cs_detrok02) (10)
	CreateDynamicObject_e(18454,566.40002441,-1299.09997559,15.69999981,0.00000000,0.00000000,0.00000000); //object(cs_detrok02) (11)
	CreateDynamicObject_e(10558,556.50000000,-1294.40002441,18.20000076,0.00000000,0.00000000,270.00000000); //object(tbnsfs) (1)
	CreateDynamicObject_e(18458,556.59997559,-1294.30004883,24.29999924,0.00000000,0.00000000,270.00000000); //object(cs_detrok06) (1)
	CreateDynamicObject_e(18458,556.59997559,-1294.30004883,20.79999924,0.00000000,0.00000000,270.00000000); //object(cs_detrok06) (2)
	CreateDynamicObject_e(18458,556.59997559,-1294.30004883,17.29999924,0.00000000,0.00000000,270.00000000); //object(cs_detrok06) (3)
	CreateDynamicObject_e(18454,564.70001221,-1294.40002441,19.60000038,270.00000000,180.00000000,270.00000000); //object(cs_detrok02) (12)
	CreateDynamicObject_e(18454,561.20001221,-1294.40002441,19.60000038,270.00000000,179.99450684,270.00000000); //object(cs_detrok02) (13)
	CreateDynamicObject_e(18454,550.09997559,-1294.40002441,19.60000038,270.00000000,179.99450684,270.00000000); //object(cs_detrok02) (14)
	CreateDynamicObject_e(18454,546.59997559,-1294.40002441,19.60000038,270.00000000,179.99450684,270.00000000); //object(cs_detrok02) (15)
	CreateDynamicObject_e(18454,543.20001221,-1294.30004883,19.60000038,270.00000000,179.99450684,270.00000000); //object(cs_detrok02) (17)
	CreateDynamicObject_e(18454,539.70001221,-1294.30004883,19.60000038,270.00000000,179.99450684,270.00000000); //object(cs_detrok02) (18)
	CreateDynamicObject_e(18454,536.20001221,-1294.30004883,19.60000038,270.00000000,179.99450684,270.00000000); //object(cs_detrok02) (19)
	CreateDynamicObject_e(18454,532.70001221,-1294.30004883,19.60000038,270.00000000,179.99450684,270.00000000); //object(cs_detrok02) (20)
	CreateDynamicObject_e(18454,529.29998779,-1294.30004883,19.60000038,270.00000000,179.99450684,270.00000000); //object(cs_detrok02) (21)
	CreateDynamicObject_e(18454,525.79998779,-1294.30004883,19.60000038,270.00000000,179.99450684,270.00000000); //object(cs_detrok02) (22)
	CreateDynamicObject_e(18454,522.29998779,-1294.40002441,19.60000038,270.00000000,179.99450684,270.00000000); //object(cs_detrok02) (23)
	CreateDynamicObject_e(18454,519.50000000,-1294.40002441,19.60000038,270.00000000,179.99450684,270.00000000); //object(cs_detrok02) (24)
	CreateDynamicObject_e(1566,562.29998779,-1294.30004883,17.70000076,0.00000000,0.00000000,0.00000000); //object(cj_ws_door) (1)
	CreateDynamicObject_e(1566,565.40002441,-1294.30004883,17.70000076,0.00000000,0.00000000,180.00000000); //object(cj_ws_door) (2)

	//.INT GROTTI
	CreateDynamicObject_e(10249,-941.59997559,1938.90002441,38.00000000,0.00000000,0.00000000,220.00000000); //object(ottos_bits) (1)
	CreateDynamicObject_e(10249,-957.90002441,1921.19995117,38.00000000,0.00000000,0.00000000,39.99572754); //object(ottos_bits) (2)
	CreateDynamicObject_e(10008,-935.50000000,1943.90002441,32.70000076,0.00000000,0.00000000,190.00000000); //object(fer_cars2_sfe) (1)
	CreateDynamicObject_e(10008,-964.09997559,1916.00000000,32.70000076,0.00000000,0.00000000,339.99755859); //object(fer_cars2_sfe) (2)
	CreateDynamicObject_e(10009,-963.79998779,1915.80004883,38.70000076,0.00000000,0.00000000,340.25000000); //object(fer_cars3_sfe) (1)
	CreateDynamicObject_e(10009,-935.90002441,1943.80004883,38.70000076,0.00000000,0.00000000,190.24658203); //object(fer_cars3_sfe) (2)
	CreateDynamicObject_e(18461,-963.29998779,1933.09997559,43.09999847,90.00000000,180.00000000,204.00048828); //object(cs_detrok09) (1)
	CreateDynamicObject_e(18461,-964.70001221,1936.19995117,43.09999847,90.00000000,179.99450684,203.99963379); //object(cs_detrok09) (2)
	CreateDynamicObject_e(18461,-964.70001221,1936.19995117,33.50000000,90.00000000,179.99450684,203.99963379); //object(cs_detrok09) (3)
	CreateDynamicObject_e(18461,-963.29998779,1933.09997559,33.50000000,90.00000000,179.99450684,203.99963379); //object(cs_detrok09) (4)
	CreateDynamicObject_e(18461,-963.29998779,1933.09997559,23.89999962,90.00000000,179.99450684,203.99963379); //object(cs_detrok09) (5)
	CreateDynamicObject_e(18461,-964.70001221,1936.19995117,23.89999962,90.00000000,179.99450684,203.99963379); //object(cs_detrok09) (6)
	CreateDynamicObject_e(18461,-936.50000000,1926.69995117,23.89999962,90.00000000,179.99450684,203.99963379); //object(cs_detrok09) (7)
	CreateDynamicObject_e(18461,-935.09997559,1923.50000000,23.89999962,90.00000000,179.99450684,203.99963379); //object(cs_detrok09) (8)
	CreateDynamicObject_e(18461,-935.09997559,1923.50000000,33.50000000,90.00000000,179.99450684,203.99963379); //object(cs_detrok09) (9)
	CreateDynamicObject_e(18461,-936.50000000,1926.69995117,33.50000000,90.00000000,179.99450684,203.99963379); //object(cs_detrok09) (10)
	CreateDynamicObject_e(18461,-936.50000000,1926.69995117,43.09999847,90.00000000,179.99450684,203.99963379); //object(cs_detrok09) (11)
	CreateDynamicObject_e(18461,-935.09997559,1923.50000000,43.09999847,90.00000000,179.99450684,203.99963379); //object(cs_detrok09) (12)
	CreateDynamicObject_e(1566,-963.00000000,1932.80004883,29.39999962,0.00000000,0.00000000,113.24707031); //object(cj_ws_door) (2)
	CreateDynamicObject_e(1566,-964.29998779,1935.69995117,29.39999962,0.00000000,0.00000000,293.24707031); //object(cj_ws_door) (3)

	//.EXT ITALIANA
	CreateDynamicObject(3749,836.90002441,-1929.09997559,17.70000076,0.00000000,0.00000000,0.00000000); //object(clubgate01_lax) (1)
	CreateDynamicObject(985,823.50000000,-1929.00000000,13.60000038,0.00000000,0.00000000,0.00000000); //object(gate_autor) (2)
	CreateDynamicObject(985,849.40002441,-1928.80004883,13.60000038,0.00000000,0.00000000,0.00000000); //object(gate_autor) (3)
	CreateDynamicObject(3606,836.59997559,-2056.69995117,15.30000019,0.00000000,0.00000000,180.00000000); //object(bevbrkhus1) (1)
	CreateDynamicObject(16362,845.00000000,-2020.00000000,15.00000000,0.00000000,0.00000000,0.00000000); //object(desn2_tscanopy) (1)
	CreateDynamicObject(16362,845.00000000,-1979.19995117,15.00000000,0.00000000,0.00000000,0.00000000); //object(desn2_tscanopy) (2)
	CreateDynamicObject(3753,811.90002441,-2015.19995117,3.40000010,0.00000000,0.00000000,90.00000000); //object(dockwall_las2) (1)
	CreateDynamicObject(987,816.00000000,-1989.09997559,2.59999990,0.00000000,0.00000000,180.00000000); //object(elecfence_bar) (1)
	CreateDynamicObject(987,804.09997559,-1989.09997559,2.59999990,0.00000000,0.00000000,269.99450684); //object(elecfence_bar) (2)
	CreateDynamicObject(3749,805.70001221,-2010.80004883,8.19999981,0.00000000,0.00000000,90.00000000); //object(clubgate01_lax) (2)
	CreateDynamicObject(987,803.90002441,-2020.69995117,2.59999990,0.00000000,0.00000000,269.98901367); //object(elecfence_bar) (3)
	CreateDynamicObject(987,804.00000000,-2032.69995117,2.59999990,0.00000000,0.00000000,359.98901367); //object(elecfence_bar) (4)
	CreateDynamicObject(987,816.00000000,-2032.80004883,2.59999990,0.00000000,0.00000000,89.98352051); //object(elecfence_bar) (5)
	CreateDynamicObject(8378,821.09997559,-2009.59997559,1.29999995,0.00000000,0.00000000,90.00000000); //object(vgsbighngrdoor) (1)

	//.EXT BEACHMOTORS
	CreateDynamicObject_e(11317,477.69921875,-1872.39941406,9.60000038,0.00000000,0.00000000,270.00000000); //object(carshow_sfse) (1)
	CreateDynamicObject_e(3851,481.89999390,-1852.90002441,6.50000000,0.00000000,0.00000000,90.00000000); //object(carshowwin_sfsx) (2)
	CreateDynamicObject_e(3851,468.79998779,-1853.19995117,6.40000010,0.00000000,0.00000000,90.00000000); //object(carshowwin_sfsx) (3)
	CreateDynamicObject_e(3851,455.70001221,-1853.30004883,6.40000010,0.00000000,0.00000000,90.00000000); //object(carshowwin_sfsx) (4)
	CreateDynamicObject_e(10184,502.69921875,-1845.39941406,4.19999981,0.00000000,90.00000000,179.99450684); //object(sfcopdr) (1)
	CreateDynamicObject_e(10184,496.70001221,-1845.40002441,4.19999981,0.00000000,90.00000000,179.99450684); //object(sfcopdr) (2)
	CreateDynamicObject_e(3851,455.70001221,-1879.30004883,6.40000010,0.00000000,0.00000000,90.00000000); //object(carshowwin_sfsx) (6)
	CreateDynamicObject_e(3851,468.89999390,-1879.09997559,6.40000010,0.00000000,0.00000000,90.00000000); //object(carshowwin_sfsx) (7)
	CreateDynamicObject_e(3851,448.29998779,-1872.50000000,6.30000019,0.00000000,0.00000000,0.00000000); //object(carshowwin_sfsx) (8)
	CreateDynamicObject_e(10184,448.29998779,-1871.09997559,1.79999995,0.00000000,0.00000000,0.00000000); //object(sfcopdr) (3)
	CreateDynamicObject_e(10184,456.79998779,-1879.59997559,1.79999995,0.00000000,0.00000000,90.00000000); //object(sfcopdr) (4)
	CreateDynamicObject_e(10184,473.70001221,-1879.59997559,1.79999995,0.00000000,0.00000000,90.00000000); //object(sfcopdr) (5)
	CreateDynamicObject_e(10184,482.89999390,-1894.40002441,1.89999998,0.00000000,0.00000000,90.00000000); //object(sfcopdr) (6)
	CreateDynamicObject_e(10184,498.60000610,-1894.40002441,1.89999998,0.00000000,0.00000000,90.00000000); //object(sfcopdr) (7)
	CreateDynamicObject_e(10184,507.20001221,-1886.09997559,1.89999998,0.00000000,0.00000000,180.00000000); //object(sfcopdr) (8)
	CreateDynamicObject_e(3093,507.20001221,-1894.50000000,7.00000000,0.00000000,0.00000000,89.25000000); //object(cuntgirldoor) (1)
	CreateDynamicObject_e(3093,507.20001221,-1894.50000000,4.50000000,0.00000000,0.00000000,89.24743652); //object(cuntgirldoor) (2)
	CreateDynamicObject_e(10184,474.39999390,-1886.00000000,1.89999998,0.00000000,0.00000000,0.00000000); //object(sfcopdr) (9)
	CreateDynamicObject_e(3361,443.20001221,-1865.09997559,9.39999962,0.00000000,0.00000000,179.99993896); //object(cxref_woodstair) (1)
	CreateDynamicObject_e(3361,437.00000000,-1865.09997559,5.19999981,0.00000000,0.00000000,179.99450684); //object(cxref_woodstair) (2)
	CreateDynamicObject_e(3361,432.79998779,-1865.09997559,2.40000010,0.00000000,0.00000000,179.99450684); //object(cxref_woodstair) (3)
	CreateDynamicObject_e(3361,444.79980469,-1865.19921875,0.10000000,0.00000000,179.99450684,179.99450684); //object(cxref_woodstair) (4)
	CreateDynamicObject_e(10154,477.50000000,-1868.90002441,4.40000010,0.00000000,270.00000000,179.99450684); //object(pier69gdr) (11)
	CreateDynamicObject_e(10154,483.00000000,-1868.90002441,4.40000010,0.00000000,270.00000000,179.99450684); //object(pier69gdr) (12)
	CreateDynamicObject_e(1999,475.39999390,-1866.69995117,4.40000010,0.00000000,0.00000000,0.00000000); //object(officedesk2) (1)
	CreateDynamicObject_e(1999,477.70001221,-1866.69995117,4.40000010,0.00000000,0.00000000,0.00000000); //object(officedesk2) (2)
	CreateDynamicObject_e(1999,480.10000610,-1866.69995117,4.40000010,0.00000000,0.00000000,0.00000000); //object(officedesk2) (3)
	CreateDynamicObject_e(1999,482.29998779,-1866.59997559,4.40000010,0.00000000,0.00000000,0.00000000); //object(officedesk2) (4)
	CreateDynamicObject_e(1999,484.50000000,-1867.19995117,4.40000010,0.00000000,0.00000000,298.00000000); //object(officedesk2) (5)
	CreateDynamicObject_e(1999,475.10000610,-1868.69995117,4.40000010,0.00000000,0.00000000,90.00000000); //object(officedesk2) (6)
	CreateDynamicObject_e(2356,483.29998779,-1867.90002441,4.40000010,0.00000000,0.00000000,0.00000000); //object(police_off_chair) (1)
	CreateDynamicObject_e(2356,481.10000610,-1868.00000000,4.40000010,0.00000000,0.00000000,0.00000000); //object(police_off_chair) (2)
	CreateDynamicObject_e(2356,478.79998779,-1868.19995117,4.40000010,0.00000000,0.00000000,0.00000000); //object(police_off_chair) (3)
	CreateDynamicObject_e(2356,476.39999390,-1867.80004883,4.40000010,0.00000000,0.00000000,0.00000000); //object(police_off_chair) (4)
	CreateDynamicObject_e(2356,475.89999390,-1867.80004883,4.40000010,0.00000000,0.00000000,86.00000000); //object(police_off_chair) (5)
	CreateDynamicObject_e(2356,484.20001221,-1868.59997559,4.40000010,0.00000000,0.00000000,302.00000000); //object(police_off_chair) (6)
	CreateDynamicObject_e(14867,480.20001221,-1869.59997559,5.90000010,0.00000000,0.00000000,0.00000000); //object(bobbie-cupboards) (1)
	CreateDynamicObject_e(3934,481.70001221,-1887.90002441,11.10000038,0.00000000,0.00000000,0.00000000); //object(helipad01) (1)
	CreateDynamicObject_e(3934,499.60000610,-1862.30004883,11.10000038,0.00000000,0.00000000,0.00000000); //object(helipad01) (2)
	CreateDynamicObject_e(3934,464.79998779,-1862.09997559,11.10000038,0.00000000,0.00000000,0.00000000); //object(helipad01) (4)
	CreateDynamicObject_e(8843,502.70001221,-1845.90002441,4.40000010,0.00000000,0.00000000,0.00000000); //object(arrows01_lvs) (1)
	CreateDynamicObject_e(8843,496.60000610,-1846.09997559,4.40000010,0.00000000,0.00000000,180.00000000); //object(arrows01_lvs) (2)
	CreateDynamicObject_e(18462,500.60000610,-1856.09997559,4.30000019,0.00000000,270.00000000,270.00000000); //object(cs_detrok10) (1)
	CreateDynamicObject_e(18462,500.60000610,-1859.59997559,4.30000019,0.00000000,270.00000000,270.00000000); //object(cs_detrok10) (2)
	CreateDynamicObject_e(18462,491.00000000,-1859.59997559,4.30000019,0.00000000,270.00000000,270.00000000); //object(cs_detrok10) (3)
	CreateDynamicObject_e(18462,491.00000000,-1856.09997559,4.30000019,0.00000000,270.00000000,270.00000000); //object(cs_detrok10) (4)
	CreateDynamicObject_e(18462,481.39999390,-1856.09997559,4.30000019,0.00000000,270.00000000,270.00000000); //object(cs_detrok10) (5)
	CreateDynamicObject_e(18462,481.39999390,-1859.59997559,4.30000019,0.00000000,270.00000000,270.00000000); //object(cs_detrok10) (6)
	CreateDynamicObject_e(18462,471.79998779,-1859.59997559,4.30000019,0.00000000,270.00000000,270.00000000); //object(cs_detrok10) (7)
	CreateDynamicObject_e(18462,471.79998779,-1856.09997559,4.30000019,0.00000000,270.00000000,270.00000000); //object(cs_detrok10) (8)
	CreateDynamicObject_e(18462,462.20001221,-1856.09997559,4.30000019,0.00000000,270.00000000,270.00000000); //object(cs_detrok10) (9)
	CreateDynamicObject_e(18462,462.20001221,-1859.59997559,4.30000019,0.00000000,270.00000000,270.00000000); //object(cs_detrok10) (10)
	CreateDynamicObject_e(18462,454.89999390,-1859.59997559,4.30000019,0.00000000,270.00000000,270.00000000); //object(cs_detrok10) (11)
	CreateDynamicObject_e(18462,454.50000000,-1856.09997559,4.30000019,0.00000000,270.00000000,270.00000000); //object(cs_detrok10) (12)
	CreateDynamicObject_e(3378,435.39999390,-1913.80004883,-1.10000002,0.00000000,0.00000000,0.00000000); //object(ce_beerpile01) (1)
	CreateDynamicObject_e(3378,435.50000000,-1936.30004883,-1.10000002,0.00000000,0.00000000,0.00000000); //object(ce_beerpile01) (2)
	CreateDynamicObject_e(996,438.10000610,-1903.90002441,0.80000001,0.00000000,0.00000000,270.00000000); //object(lhouse_barrier1) (1)
	CreateDynamicObject_e(996,432.70001221,-1904.19995117,0.80000001,0.00000000,0.00000000,270.00000000); //object(lhouse_barrier1) (2)
	CreateDynamicObject_e(996,432.89999390,-1915.59997559,0.80000001,0.00000000,0.00000000,270.00000000); //object(lhouse_barrier1) (3)
	CreateDynamicObject_e(996,438.10000610,-1915.59997559,0.80000001,0.00000000,0.00000000,270.00000000); //object(lhouse_barrier1) (4)
	CreateDynamicObject_e(996,438.20001221,-1927.50000000,0.80000001,0.00000000,0.00000000,270.00000000); //object(lhouse_barrier1) (5)
	CreateDynamicObject_e(996,433.00000000,-1927.40002441,0.80000001,0.00000000,0.00000000,270.00000000); //object(lhouse_barrier1) (6)
	CreateDynamicObject_e(996,433.00000000,-1940.00000000,0.80000001,0.00000000,0.00000000,270.00000000); //object(lhouse_barrier1) (7)
	CreateDynamicObject_e(996,438.29998779,-1940.00000000,0.80000001,0.00000000,0.00000000,270.00000000); //object(lhouse_barrier1) (8)
	CreateDynamicObject_e(997,433.89999390,-1947.59997559,0.20000000,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (1)
	CreateDynamicObject_e(18623,430.89999390,-1914.00000000,-0.10000000,0.00000000,90.00000000,0.00000000); //object(cs_landbit_68_a) (1)
	CreateDynamicObject_e(18623,430.89999390,-1912.40002441,-0.10000000,0.00000000,90.00000000,0.00000000); //object(cs_landbit_68_a) (2)
	CreateDynamicObject_e(18623,439.89999390,-1912.30004883,-0.10000000,0.00000000,90.00000000,0.00000000); //object(cs_landbit_68_a) (3)
	CreateDynamicObject_e(18623,439.89999390,-1913.90002441,-0.10000000,0.00000000,90.00000000,0.00000000); //object(cs_landbit_68_a) (4)
	CreateDynamicObject_e(18623,440.00000000,-1923.80004883,-0.10000000,0.00000000,90.00000000,0.00000000); //object(cs_landbit_68_a) (5)
	CreateDynamicObject_e(18623,440.00000000,-1925.40002441,-0.10000000,0.00000000,90.00000000,0.00000000); //object(cs_landbit_68_a) (6)
	CreateDynamicObject_e(18623,430.89999390,-1925.59997559,-0.10000000,0.00000000,90.00000000,0.00000000); //object(cs_landbit_68_a) (7)
	CreateDynamicObject_e(18623,430.89999390,-1924.00000000,-0.10000000,0.00000000,90.00000000,0.00000000); //object(cs_landbit_68_a) (8)
	CreateDynamicObject_e(18623,430.89999390,-1936.59997559,-0.10000000,0.00000000,90.00000000,0.00000000); //object(cs_landbit_68_a) (9)
	CreateDynamicObject_e(18623,430.89999390,-1938.19995117,-0.10000000,0.00000000,90.00000000,0.00000000); //object(cs_landbit_68_a) (10)
	CreateDynamicObject_e(18623,440.10000610,-1936.59997559,-0.10000000,0.00000000,90.00000000,0.00000000); //object(cs_landbit_68_a) (11)
	CreateDynamicObject_e(18623,440.10000610,-1938.19995117,-0.10000000,0.00000000,90.00000000,0.00000000); //object(cs_landbit_68_a) (12)

	//.EXT YAKUZA
	CreateDynamicObject(9482,498.20001221,-1456.50000000,20.00000000,0.00000000,0.00000000,75.99792480); //object(chinagate) (1)
	CreateDynamicObject(3471,506.60000610,-1456.90002441,16.20000076,0.00000000,0.00000000,65.99841309); //object(vgschinalion1) (1)
	CreateDynamicObject(991,506.69921875,-1458.39941406,16.79999924,0.00000000,0.00000000,345.99792480); //object(bar_barriergate1) (2)
	CreateDynamicObject(991,506.69921875,-1458.39941406,19.20000076,0.00000000,0.00000000,345.99792480); //object(bar_barriergate1) (3)
	CreateDynamicObject(991,489.29980469,-1454.50000000,17.50000000,0.00000000,0.00000000,345.99792480); //object(bar_barriergate1) (5)
	CreateDynamicObject(991,489.29980469,-1454.50000000,19.79999924,0.00000000,0.00000000,345.99792480); //object(bar_barriergate1) (6)
	CreateDynamicObject(991,495.59960938,-1456.00000000,22.50000000,0.00000000,0.00000000,347.99743652); //object(bar_barriergate1) (7)
	CreateDynamicObject(991,500.70001221,-1457.09997559,22.50000000,0.00000000,0.00000000,347.99743652); //object(bar_barriergate1) (8)
	CreateDynamicObject(1568,490.60000610,-1450.90002441,16.00000000,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (1)
	CreateDynamicObject(1568,505.69921875,-1456.09960938,15.19999981,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (2)
	CreateDynamicObject(1568,493.20001221,-1452.30004883,16.00000000,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (3)
	CreateDynamicObject(1568,507.89941406,-1456.59960938,15.19999981,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(18001,474.29998779,-1520.40002441,25.79999924,0.00000000,270.00000000,93.99978638); //object(int_barbera07) (1)
	CreateDynamicObject(18001,474.20001221,-1519.00000000,25.79999924,0.00000000,270.00000000,93.99902344); //object(int_barbera07) (2)
	CreateDynamicObject(18001,474.20001221,-1519.00000000,33.90000153,0.00000000,270.00000000,93.99902344); //object(int_barbera07) (3)
	CreateDynamicObject(18001,474.29998779,-1520.40002441,33.90000153,0.00000000,270.00000000,93.99902344); //object(int_barbera07) (4)
	CreateDynamicObject(1569,474.29998779,-1521.09997559,19.39999962,0.00000000,0.00000000,96.00000000); //object(adam_v_door) (1)
	CreateDynamicObject(1569,474.00000000,-1518.30004883,19.39999962,0.00000000,0.00000000,275.99853516); //object(adam_v_door) (2)
	CreateDynamicObject(1569,469.39999390,-1514.19995117,39.09999847,0.00000000,0.00000000,347.99853516); //object(adam_v_door) (3)
	CreateDynamicObject(1569,472.29998779,-1514.80004883,39.09999847,0.00000000,0.00000000,167.99743652); //object(adam_v_door) (4)
	CreateDynamicObject(9482,499.50000000,-1556.50000000,20.29999924,0.00000000,0.00000000,127.99792480); //object(chinagate) (1)
	CreateDynamicObject(991,501.20001221,-1555.30004883,22.50000000,0.00000000,0.00000000,36.00000000); //object(bar_barriergate1) (7)
	CreateDynamicObject(991,497.39999390,-1558.09997559,22.50000000,0.00000000,0.00000000,35.99670410); //object(bar_barriergate1) (7)
	CreateDynamicObject(991,506.89999390,-1551.00000000,17.39999962,0.00000000,0.00000000,35.99670410); //object(bar_barriergate1) (7)
	CreateDynamicObject(991,506.89999390,-1551.00000000,19.79999924,0.00000000,0.00000000,35.99670410); //object(bar_barriergate1) (7)
	CreateDynamicObject(991,492.60000610,-1562.00000000,19.79999924,0.00000000,0.00000000,35.99670410); //object(bar_barriergate1) (7)
	CreateDynamicObject(991,492.60000610,-1562.00000000,17.39999962,0.00000000,0.00000000,35.99670410); //object(bar_barriergate1) (7)
	CreateDynamicObject(3471,491.79998779,-1452.00000000,17.10000038,0.00000000,0.00000000,61.99487305); //object(vgschinalion1) (1)
	CreateDynamicObject(1568,497.39999390,-1562.90002441,15.60000038,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (2)
	CreateDynamicObject(1568,494.89999390,-1564.59997559,15.60000038,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (2)
	CreateDynamicObject(1568,506.89999390,-1555.59997559,15.60000038,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (2)
	CreateDynamicObject(1568,509.60000610,-1553.40002441,15.60000038,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (2)
	CreateDynamicObject(3471,495.79998779,-1563.40002441,17.10000038,0.00000000,0.00000000,307.99035645); //object(vgschinalion1) (1)
	CreateDynamicObject(3471,508.10000610,-1554.59997559,17.10000038,0.00000000,0.00000000,307.98522949); //object(vgschinalion1) (1)
	CreateDynamicObject(1568,503.70001221,-1462.30004883,15.89999962,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,488.50000000,-1457.00000000,16.39999962,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,480.29998779,-1474.69995117,18.20000076,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,494.10000610,-1481.40002441,18.20000076,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,479.60000610,-1499.40002441,19.10000038,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,491.60000610,-1500.30004883,19.10000038,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,492.50000000,-1521.40002441,19.10000038,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,477.70001221,-1525.09997559,19.10000038,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,489.50000000,-1554.80004883,16.70000076,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,502.79998779,-1546.40002441,16.50000000,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(3934,471.39999390,-1542.59997559,39.59999847,0.00000000,0.00000000,0.00000000); //object(helipad01) (1)
	CreateDynamicObject(3934,468.50000000,-1526.19995117,39.59999847,0.00000000,0.00000000,0.00000000); //object(helipad01) (2)
	CreateDynamicObject(16290,487.39999390,-1491.19995117,26.29999924,0.00000000,0.00000000,31.99768066); //object(cn2_slines07) (2)
	CreateDynamicObject(16290,487.70001221,-1529.00000000,27.50000000,0.00000000,0.00000000,31.99768066); //object(cn2_slines07) (3)
	CreateDynamicObject(3534,483.79998779,-1493.00000000,26.29999924,0.00000000,179.99450684,11.99707031); //object(trdlamp01) (4)
	CreateDynamicObject(3534,486.10000610,-1489.50000000,27.10000038,0.00000000,179.99450684,11.99157715); //object(trdlamp01) (5)
	CreateDynamicObject(3534,491.79998779,-1483.30004883,24.89999962,0.00000000,179.99450684,11.99157715); //object(trdlamp01) (6)
	CreateDynamicObject(3534,489.29998779,-1485.90002441,26.00000000,0.00000000,179.99450684,11.99707031); //object(trdlamp01) (4)
	CreateDynamicObject(3534,480.89999390,-1497.30004883,25.39999962,0.00000000,179.99450684,11.99707031); //object(trdlamp01) (4)
	CreateDynamicObject(3534,487.20001221,-1526.30004883,28.10000038,0.00000000,179.99450684,11.99157715); //object(trdlamp01) (5)
	CreateDynamicObject(3534,490.60000610,-1522.69995117,26.79999924,0.00000000,179.99450684,11.99157715); //object(trdlamp01) (5)
	CreateDynamicObject(3534,485.10000610,-1529.19995117,27.89999962,0.00000000,179.99450684,11.99157715); //object(trdlamp01) (5)
	CreateDynamicObject(3534,482.00000000,-1533.80004883,26.89999962,0.00000000,179.99450684,11.99157715); //object(trdlamp01) (5)
	CreateDynamicObject(1568,518.59997559,-1448.50000000,14.00000000,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,519.50000000,-1466.19995117,14.00000000,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,520.79998779,-1487.40002441,13.30000019,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,521.09997559,-1506.50000000,13.50000000,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,520.90002441,-1525.19995117,14.00000000,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,520.09997559,-1538.30004883,14.50000000,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,519.09997559,-1563.19995117,15.30000019,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,505.20001221,-1575.40002441,15.10000038,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,487.89999390,-1574.19995117,19.39999962,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,474.89999390,-1573.50000000,23.20000076,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,460.29998779,-1574.19995117,24.10000038,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,460.10000610,-1557.59997559,25.89999962,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,459.89999390,-1543.30004883,27.20000076,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,459.70001221,-1527.30004883,28.50000000,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,459.70001221,-1513.59997559,29.79999924,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,454.89999390,-1485.40002441,29.79999924,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,449.20001221,-1469.19995117,29.50000000,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,462.70001221,-1459.30004883,26.50000000,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,479.10000610,-1450.30004883,20.70000076,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(1568,501.20001221,-1438.69995117,14.00000000,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(3038,490.00000000,-1502.09997559,28.29999924,0.00000000,0.00000000,90.00000000); //object(ct_lanterns) (1)
	CreateDynamicObject(3038,481.79998779,-1502.09997559,28.20000076,0.00000000,0.00000000,90.00000000); //object(ct_lanterns) (2)
	CreateDynamicObject(3038,473.70001221,-1501.90002441,28.20000076,0.00000000,0.00000000,90.00000000); //object(ct_lanterns) (3)

	//.EXT AUTOS RENTA HOSPITAL
	CreateDynamicObject(8838, 1396.75916, -2263.63940, 14.01070,   0.00000, 0.00000, -179.87981);
	CreateDynamicObject(8838, 1400.37170, -2243.23584, 14.01070,   0.00000, 0.00000, -179.87981);
	CreateDynamicObject(8838, 1397.83813, -2226.04785, 14.01070,   0.00000, 0.00000, -179.87981);
	CreateDynamicObject(8838, 1398.85291, -2206.51782, 13.99690,   0.00000, 0.00000, -0.96000);
	CreateDynamicObject(8838, 1364.20691, -2230.48145, 13.99690,   0.00000, 0.00000, 89.57999);

	//.INT LICENCIAS
	CreateDynamicObject(18284,1415.80004883,-39.20000076,1002.90002441,0.00000000,0.00000000,0.00000000); //object(cw_tscanopy) (1)
	CreateDynamicObject(973,1400.00000000,-5.69999981,1000.79998779,0.00000000,0.00000000,359.99450684); //object(sub_roadbarrier) (5)
	CreateDynamicObject(973,1412.90002441,-10.60000038,1000.79998779,0.00000000,0.00000000,89.98901367); //object(sub_roadbarrier) (7)
	CreateDynamicObject(973,1404.50000000,-10.39999962,1000.79998779,0.00000000,0.00000000,89.98901367); //object(sub_roadbarrier) (8)
	CreateDynamicObject(973,1399.69995117,-24.79999924,1000.79998779,0.00000000,0.00000000,179.98901367); //object(sub_roadbarrier) (10)
	CreateDynamicObject(973,1404.50000000,-13.69999981,1000.79998779,0.00000000,0.00000000,90.00000000); //object(sub_roadbarrier) (11)
	CreateDynamicObject(973,1395.09997559,2.79999995,1000.79998779,0.00000000,0.00000000,0.00000000); //object(sub_roadbarrier) (12)
	CreateDynamicObject(973,1408.80004883,-24.79999924,1000.79998779,0.00000000,0.00000000,179.98352051); //object(sub_roadbarrier) (13)
	CreateDynamicObject(973,1411.09997559,-1.50000000,1000.79998779,0.00000000,0.00000000,111.98901367); //object(sub_roadbarrier) (14)
	CreateDynamicObject(973,1404.69995117,2.79999995,1000.79998779,0.00000000,0.00000000,0.00000000); //object(sub_roadbarrier) (15)
	CreateDynamicObject(973,1412.90002441,-20.00000000,1000.79998779,0.00000000,0.00000000,89.98901367); //object(sub_roadbarrier) (16)
	CreateDynamicObject(973,1400.09997559,-18.29999924,1000.79998779,0.00000000,0.00000000,180.00000000); //object(sub_roadbarrier) (17)
	CreateDynamicObject(973,1395.00000000,-29.50000000,1000.79998779,0.00000000,0.00000000,269.98352051); //object(sub_roadbarrier) (18)
	CreateDynamicObject(973,1400.00000000,-34.29999924,1000.79998779,0.00000000,0.00000000,359.97802734); //object(sub_roadbarrier) (19)
	CreateDynamicObject(973,1400.00000000,-40.50000000,1000.79998779,0.00000000,0.00000000,359.97802734); //object(sub_roadbarrier) (20)
	CreateDynamicObject(973,1391.00000000,-40.50000000,1000.79998779,0.00000000,0.00000000,359.97802734); //object(sub_roadbarrier) (21)
	CreateDynamicObject(973,1386.40002441,-35.79999924,1000.79998779,0.00000000,0.00000000,89.97802734); //object(sub_roadbarrier) (22)
	CreateDynamicObject(973,1386.40002441,-28.79999924,1000.79998779,0.00000000,0.00000000,89.97802734); //object(sub_roadbarrier) (23)
	CreateDynamicObject(973,1386.40002441,-23.10000038,1000.79998779,0.00000000,0.00000000,89.97802734); //object(sub_roadbarrier) (24)
	CreateDynamicObject(973,1391.09997559,-18.29999924,1000.79998779,0.00000000,0.00000000,179.97802734); //object(sub_roadbarrier) (25)
	CreateDynamicObject(973,1390.69995117,-5.69999981,1000.79998779,0.00000000,0.00000000,359.98901367); //object(sub_roadbarrier) (26)
	CreateDynamicObject(973,1385.69995117,2.79999995,1000.79998779,0.00000000,0.00000000,359.98901367); //object(sub_roadbarrier) (27)
	CreateDynamicObject(13593,1389.59997559,-2.79999995,1000.70001221,0.00000000,0.00000000,90.00000000); //object(kickramp03) (1)
	CreateDynamicObject(13593,1383.69995117,-3.00000000,1000.70001221,0.00000000,0.00000000,270.00000000); //object(kickramp03) (2)
	CreateDynamicObject(13593,1383.69995117,-0.20000000,1000.70001221,0.00000000,0.00000000,270.00000000); //object(kickramp03) (3)
	CreateDynamicObject(13593,1389.59997559,0.00000000,1000.70001221,0.00000000,0.00000000,90.00000000); //object(kickramp03) (4)
	CreateDynamicObject(5153,1386.59997559,-0.80000001,1001.20001221,0.00000000,25.00000000,270.50000000); //object(stuntramp7_las2) (1)
	CreateDynamicObject(5153,1386.50000000,-2.09999990,1001.20001221,0.00000000,24.99938965,270.49987793); //object(stuntramp7_las2) (2)
	CreateDynamicObject(973,1381.00000000,-5.69999981,1000.79998779,0.00000000,0.00000000,359.98901367); //object(sub_roadbarrier) (28)
	CreateDynamicObject(973,1371.69995117,-5.69999981,1000.79998779,0.00000000,0.00000000,359.98901367); //object(sub_roadbarrier) (29)
	CreateDynamicObject(973,1376.19995117,2.79999995,1000.79998779,0.00000000,0.00000000,359.98901367); //object(sub_roadbarrier) (30)
	CreateDynamicObject(973,1365.90002441,2.79999995,1000.79998779,0.00000000,0.00000000,359.98901367); //object(sub_roadbarrier) (31)
	CreateDynamicObject(973,1359.80004883,-1.20000005,1000.79998779,0.00000000,0.00000000,89.98901367); //object(sub_roadbarrier) (32)
	CreateDynamicObject(973,1359.80004883,-10.89999962,1000.79998779,0.00000000,0.00000000,89.98901367); //object(sub_roadbarrier) (33)
	CreateDynamicObject(973,1371.50000000,-18.29999924,1000.79998779,0.00000000,0.00000000,179.98901367); //object(sub_roadbarrier) (35)
	CreateDynamicObject(973,1359.80004883,-20.20000076,1000.79998779,0.00000000,0.00000000,89.98901367); //object(sub_roadbarrier) (36)
	CreateDynamicObject(973,1364.30004883,-24.89999962,1000.79998779,0.00000000,0.00000000,179.98901367); //object(sub_roadbarrier) (37)
	CreateDynamicObject(973,1373.69995117,-24.89999962,1000.79998779,0.00000000,0.00000000,179.98352051); //object(sub_roadbarrier) (38)
	CreateDynamicObject(973,1381.69995117,-18.29999924,1000.79998779,0.00000000,0.00000000,179.98352051); //object(sub_roadbarrier) (39)
	CreateDynamicObject(7894,1400.80004883,-12.00000000,1000.50000000,0.00000000,0.00000000,90.00000000); //object(vegascrashbar05) (1)
	CreateDynamicObject(973,1378.19995117,-29.60000038,1000.79998779,0.00000000,0.00000000,269.98352051); //object(sub_roadbarrier) (40)
	CreateDynamicObject(973,1373.59997559,-34.29999924,1000.79998779,0.00000000,0.00000000,179.97802734); //object(sub_roadbarrier) (41)
	CreateDynamicObject(973,1363.09997559,-34.29999924,1000.79998779,0.00000000,0.00000000,179.97253418); //object(sub_roadbarrier) (42)
	CreateDynamicObject(973,1381.50000000,-40.50000000,1000.79998779,0.00000000,0.00000000,179.97253418); //object(sub_roadbarrier) (44)
	CreateDynamicObject(973,1371.59997559,-40.50000000,1000.79998779,0.00000000,0.00000000,179.97253418); //object(sub_roadbarrier) (45)
	CreateDynamicObject(3380,1403.40002441,-11.69999981,999.90002441,0.00000000,0.00000000,280.00000000); //object(ce_hairpinl) (1)
	CreateDynamicObject(16023,1404.40002441,-33.40000153,1001.09997559,0.00000000,0.00000000,170.00000000); //object(des_trxingsign02) (1)
	CreateDynamicObject(16023,1405.19995117,-41.90000153,1001.09997559,0.00000000,0.00000000,169.99694824); //object(des_trxingsign02) (2)
	CreateDynamicObject(1315,1379.59997559,-25.70000076,1003.20001221,0.00000000,0.00000000,180.00000000); //object(trafficlight1) (1)
	CreateDynamicObject(1315,1387.69995117,0.69999999,1003.20001221,0.00000000,0.00000000,89.99450684); //object(trafficlight1) (2)
	CreateDynamicObject(1318,1403.50000000,-37.50000000,999.90002441,0.00000000,90.00000000,0.00000000); //object(arrow) (1)
	CreateDynamicObject(1318,1399.09997559,-37.20000076,999.90002441,0.00000000,90.00000000,0.00000000); //object(arrow) (2)
	CreateDynamicObject(1318,1391.30004883,-37.09999847,999.90002441,0.00000000,90.00000000,270.00000000); //object(arrow) (3)
	CreateDynamicObject(1318,1391.19995117,-29.79999924,999.90002441,0.00000000,90.00000000,270.00000000); //object(arrow) (4)
	CreateDynamicObject(1318,1391.19995117,-21.79999924,999.90002441,0.00000000,90.00000000,180.00000000); //object(arrow) (5)
	CreateDynamicObject(1318,1398.69995117,-21.70000076,999.90002441,0.00000000,90.00000000,179.99450684); //object(arrow) (6)
	CreateDynamicObject(1318,1409.50000000,-21.60000038,999.90002441,0.00000000,90.00000000,269.99450684); //object(arrow) (7)
	CreateDynamicObject(1318,1408.59997559,-3.79999995,999.90002441,0.00000000,90.00000000,309.98901367); //object(arrow) (8)
	CreateDynamicObject(1318,1399.80004883,-0.69999999,999.90002441,0.00000000,90.00000000,359.98474121); //object(arrow) (9)
	CreateDynamicObject(1318,1374.00000000,-1.39999998,999.90002441,0.00000000,90.00000000,359.98352051); //object(arrow) (10)
	CreateDynamicObject(1318,1374.19995117,-8.69999981,999.90002441,0.00000000,90.00000000,179.98352051); //object(arrow) (11)
	CreateDynamicObject(1318,1362.50000000,-8.00000000,999.90002441,0.00000000,90.00000000,89.98352051); //object(arrow) (12)
	CreateDynamicObject(1318,1366.59997559,-21.50000000,999.90002441,0.00000000,90.00000000,179.98352051); //object(arrow) (13)
	CreateDynamicObject(1318,1390.00000000,-9.30000019,999.90002441,0.00000000,90.00000000,179.98352051); //object(arrow) (14)
	CreateDynamicObject(1318,1390.50000000,-16.10000038,999.90002441,0.00000000,90.00000000,359.98352051); //object(arrow) (15)
	CreateDynamicObject(1318,1374.09997559,-15.60000038,999.90002441,0.00000000,90.00000000,359.97802734); //object(arrow) (16)
	CreateDynamicObject(1318,1383.00000000,-28.79999924,999.90002441,0.00000000,90.00000000,89.97802734); //object(arrow) (17)
	CreateDynamicObject(1318,1371.50000000,-37.40000153,999.90002441,0.00000000,90.00000000,359.97802734); //object(arrow) (18)
	CreateDynamicObject(1318,1370.90002441,-44.40000153,999.90002441,0.00000000,90.00000000,179.97802734); //object(arrow) (19)
	CreateDynamicObject(1337,2463.08007812,-852.18554688,102.53424835,0.00000000,0.00000000,0.00000000); //object(binnt07_la) (1)

	//.OTHER CAJEROS AUTOMATICOS
	CreateDynamicObject(2942,2241.60009766,-1722.69995117,13.19999981,0.00000000,0.00000000,358.00000000); //object(kmb_atm1) (1)
	CreateDynamicObject(2942,2423.39990234,-2111.80004883,12.89999962,0.00000000,0.00000000,270.00000000); //object(kmb_atm1) (3)
	CreateDynamicObject(2942,1774.40002441,-1303.19995117,13.19999981,0.00000000,0.00000000,269.99450684); //object(kmb_atm1) (4)
	CreateDynamicObject(2942,488.00000000,-1269.19995117,15.39999962,0.00000000,0.00000000,35.98999023); //object(kmb_atm1) (6)
	CreateDynamicObject(2942,1539.19995117,-1611.40002441,13.19999981,0.00000000,0.00000000,270.00000000); //object(kmb_atm1) (7)
	CreateDynamicObject(2942,1497.09997559,-1022.20001221,23.50000000,0.00000000,0.00000000,358.00000000); //object(kmb_atm1) (8)
	CreateDynamicObject(2942,815.70001221,-1356.50000000,13.00000000,0.00000000,0.00000000,180.00000000); //object(kmb_atm1) (24)
	CreateDynamicObject(2942, -832.294738, 1629.097534, 1004.399780, 0.000000, 0.000000, -88.000022); // cajero.
	CreateDynamicObject(2942, -847.641479, 1612.629760, 1004.379699, 0.000000, 0.000000, 179.000015); // cajero.
	CreateDynamicObject(2942, -831.937500, 1613.122192, 1004.329833, 0.000000, 0.000000, -88.699989); // cajero.

	//.OTHER GARAGE (1 PLAZA)
	CreateDynamicObject(3354,424.89999390,-91.69999695,1002.20001221,0.00000000,0.00000000,270.00000000,-1,-1,-1,30); //object(burbdoor2ref) (1)
	CreateDynamicObject(11393,423.70001221,-99.19999695,1002.50000000,0.00000000,0.00000000,359.25000000,-1,-1,-1,30); //object(hubprops1_sfs) (1)

	//.OTHER GARAGE (1 PLAZA) 2.
	CreateDynamicObject(3354,424.89999390,-91.69999695,1002.20001221+10,0.00000000,0.00000000,270.00000000,-1,-1,-1,30); //object(burbdoor2ref) (1)
	CreateDynamicObject(11393,423.70001221,-99.19999695,1002.50000000+10,0.00000000,0.00000000,359.25000000,-1,-1,-1,30); //object(hubprops1_sfs) (1)

	//.OTHER GARAGE (2 PLAZAS)
	CreateDynamicObject(2395,1259.80004883,-863.29998779,1092.90002441,0.00000000,90.00000000,270.00000000,-1,-1,-1,30); //object(cj_sports_wall) (9)
	CreateDynamicObject(2395,1259.80004883,-860.59997559,1092.90002441,0.00000000,90.00000000,270.00000000,-1,-1,-1,30); //object(cj_sports_wall) (10)
	CreateDynamicObject(2395,1259.80004883,-857.90002441,1092.90002441,0.00000000,90.00000000,270.00000000,-1,-1,-1,30); //object(cj_sports_wall) (11)
	CreateDynamicObject(2395,1246.19995117,-860.79998779,1092.90002441,0.00000000,90.00000000,90.00000000,-1,-1,-1,30); //object(cj_sports_wall) (12)
	CreateDynamicObject(2395,1246.19995117,-863.50000000,1092.90002441,0.00000000,90.00000000,90.00000000,-1,-1,-1,30); //object(cj_sports_wall) (13)
	CreateDynamicObject(2395,1246.19995117,-866.20001221,1092.90002441,0.00000000,90.00000000,90.00000000,-1,-1,-1,30); //object(cj_sports_wall) (14)
	CreateDynamicObject(3354,1256.19995117,-858.09997559,1091.50000000,0.00000000,0.00000000,90.00000000,-1,-1,-1,30); //object(burbdoor2ref) (1)
	CreateDynamicObject(3354,1249.90002441,-858.09997559,1091.50000000,0.00000000,0.00000000,90.00000000,-1,-1,-1,30); //object(burbdoor2ref) (2)

	//.EXT CAMIONEROS (TRABAJO)
	CreateDynamicObject(3626,2430.69995117,-2115.50000000,14.00000000,0.00000000,0.00000000,179.99450684); //object(dckwrkhut) (1)
	CreateDynamicObject(3577,2436.89990234,-2116.00000000,13.30000019,0.00000000,0.00000000,270.00000000); //object(dockcrates1_la) (1)
	CreateDynamicObject(1724,2427.00000000,-2116.39990234,12.80000019,0.00000000,0.00000000,90.00000000); //object(mrk_seating1b) (1)
	CreateDynamicObject(2008,2428.00000000,-2115.19995117,12.80000019,0.00000000,0.00000000,270.00000000); //object(officedesk1) (1)
	CreateDynamicObject(1724,2429.69995117,-2116.30004883,12.80000019,0.00000000,0.00000000,230.00000000); //object(mrk_seating1b) (2)
	CreateDynamicObject(1724,2429.30004883,-2114.39990234,12.80000019,0.00000000,0.00000000,299.99877930); //object(mrk_seating1b) (3)
	CreateDynamicObject(2286,2432.50000000,-2117.60009766,14.30000019,0.00000000,0.00000000,180.00000000); //object(frame_5) (1)
	CreateDynamicObject(2284,2430.50000000,-2117.10009766,13.80000019,0.00000000,0.00000000,180.00000000); //object(frame_6) (1)
	CreateDynamicObject(2280,2426.89990234,-2115.89990234,13.60000038,0.00000000,0.00000000,90.00000000); //object(frame_thick_1) (1)
	CreateDynamicObject(2163,2427.60009766,-2114.00000000,13.89999962,0.00000000,0.00000000,0.00000000); //object(med_office_unit_2) (1)
	CreateDynamicObject(2167,2435.00000000,-2116.10009766,12.80000019,0.00000000,0.00000000,270.00000000); //object(med_office_unit_7) (1)
	CreateDynamicObject(2069,2434.60009766,-2114.30004883,12.80000019,0.00000000,0.00000000,0.00000000); //object(cj_mlight7) (1)
	CreateDynamicObject(3578,2535.69995117,-2083.89990234,11.89999962,0.00000000,0.00000000,0.00000000); //object(dockbarr1_la) (1)
	CreateDynamicObject(3578,2535.60009766,-2089.60009766,11.89999962,0.00000000,0.00000000,0.00000000); //object(dockbarr1_la) (2)
	CreateDynamicObject(3578,2535.50000000,-2095.60009766,11.89999962,0.00000000,0.00000000,0.00000000); //object(dockbarr1_la) (3)
	CreateDynamicObject(3578,2535.69995117,-2101.30004883,11.89999962,0.00000000,0.00000000,0.00000000); //object(dockbarr1_la) (4)
	CreateDynamicObject(3578,2535.89990234,-2106.80004883,11.89999962,0.00000000,0.00000000,0.00000000); //object(dockbarr1_la) (5)
	CreateDynamicObject(3578,2536.10009766,-2112.30004883,11.89999962,0.00000000,0.00000000,0.00000000); //object(dockbarr1_la) (6)
	CreateDynamicObject(3578,2535.60009766,-2079.50000000,11.89999962,0.00000000,0.00000000,0.00000000); //object(dockbarr1_la) (7)
	CreateDynamicObject(3578,2521.80004883,-2116.39990234,11.89999962,0.00000000,0.00000000,270.00000000); //object(dockbarr1_la) (8)
	CreateDynamicObject(3578,2515.50000000,-2116.39990234,11.89999962,0.00000000,0.00000000,270.00000000); //object(dockbarr1_la) (9)
	CreateDynamicObject(3578,2507.69995117,-2116.39990234,11.89999962,0.00000000,0.00000000,270.00000000); //object(dockbarr1_la) (10)
	CreateDynamicObject(3578,2498.00000000,-2116.39990234,11.89999962,0.00000000,0.00000000,270.00000000); //object(dockbarr1_la) (11)
	CreateDynamicObject(3578,2487.50000000,-2116.30004883,11.89999962,0.00000000,0.00000000,270.00000000); //object(dockbarr1_la) (12)
	CreateDynamicObject(3578,2474.19995117,-2116.50000000,11.89999962,0.00000000,0.00000000,270.00000000); //object(dockbarr1_la) (13)
	CreateDynamicObject(3578,2462.80004883,-2116.39990234,11.89999962,0.00000000,0.00000000,270.00000000); //object(dockbarr1_la) (14)
	CreateDynamicObject(3578,2451.80004883,-2116.39990234,11.89999962,0.00000000,0.00000000,270.00000000); //object(dockbarr1_la) (15)
	CreateDynamicObject(3567,2458.30004883,-2076.80004883,13.39999962,0.00000000,0.00000000,0.00000000); //object(lasnfltrail) (1)
	CreateDynamicObject(3458,2538.30004883,-2093.69995117,14.10000038,0.00000000,0.00000000,90.00000000); //object(vgncarshade1) (1)
	CreateDynamicObject(3567,2393.89990234,-2075.00000000,13.39999962,0.00000000,0.00000000,270.00000000); //object(lasnfltrail) (2)
	CreateDynamicObject(3567,2394.19995117,-2085.50000000,13.39999962,0.00000000,0.00000000,270.00000000); //object(lasnfltrail) (3)
	CreateDynamicObject(3567,2394.89990234,-2095.19995117,13.39999962,0.00000000,0.00000000,270.00000000); //object(lasnfltrail) (4)
	CreateDynamicObject(3567,2395.69995117,-2105.39990234,13.39999962,0.00000000,0.00000000,270.00000000); //object(lasnfltrail) (5)
	CreateDynamicObject(3567,2396.50000000,-2115.39990234,13.39999962,0.00000000,0.00000000,270.00000000); //object(lasnfltrail) (6)
	CreateDynamicObject(3567,2397.39990234,-2126.60009766,13.39999962,0.00000000,0.00000000,270.00000000); //object(lasnfltrail) (7)
	CreateDynamicObject(3567,2398.00000000,-2137.60009766,13.39999962,0.00000000,0.00000000,270.00000000); //object(lasnfltrail) (8)
	CreateDynamicObject(16477,2650.19995117,-2130.89990234,12.50000000,0.00000000,0.00000000,90.00000000); //object(des_stwngas1) (1)
	CreateDynamicObject(11417,2537.89990234,-2122.60009766,17.39999962,0.00000000,0.00000000,0.00000000); //object(xenonsign2_sfse) (1)
	CreateDynamicObject(3864,2636.00000000,-2128.00000000,18.60000038,0.00000000,0.00000000,230.00000000); //object(ws_floodlight) (1)

	//.EXT GROOVE
	CreateDynamicObject(947,2500.69995117,-1667.30004883,14.60000038,0.00000000,0.00000000,94.00000000); //object(bskballhub_lax01) (1)
	CreateDynamicObject(947,2474.00000000,-1665.90002441,14.60000038,0.00000000,0.00000000,273.99902344); //object(bskballhub_lax01) (2)
	CreateDynamicObject(17513,2490.10009766,-1664.59997559,4.40000010,0.00000000,0.00000000,270.00000000); //object(lae2_ground04) (1)
	CreateDynamicObject(17969,2467.50000000,-1658.50000000,12.50000000,0.00000000,90.00000000,0.00000000); //object(hub_graffitti) (1)
	CreateDynamicObject(3092,2534.89990234,-1667.59997559,15.39999962,0.00000000,0.00000000,268.00000000); //object(dead_tied_cop) (1)
	CreateDynamicObject(3006,2481.69995117,-1651.80004883,12.50000000,0.00000000,0.00000000,0.00000000); //object(smash_box_brk) (1)
	CreateDynamicObject(16151,2533.39990234,-1666.80004883,14.50000000,0.00000000,0.00000000,0.00000000); //object(ufo_bar) (1)
	CreateDynamicObject(3051,2521.30004883,-1671.19995117,15.19999981,0.00000000,0.00000000,0.00000000); //object(lift_dr) (1)
	CreateDynamicObject(3051,2521.39990234,-1671.19995117,16.70000076,0.00000000,0.00000000,0.00000000); //object(lift_dr) (2)
	CreateDynamicObject(1491,2534.60009766,-1670.80004883,14.00000000,0.00000000,0.00000000,90.00000000); //object(gen_doorint01) (1)
	CreateDynamicObject(1679,2526.79980469,-1669.69921875,15.00000000,0.00000000,0.00000000,0.00000000); //object(chairsntableml) (1)
	CreateDynamicObject(1670,2526.69921875,-1669.89941406,15.39999962,0.00000000,0.00000000,0.00000000); //object(propcollecttable) (1)
	CreateDynamicObject(1670,2526.69995117,-1669.40002441,15.39999962,0.00000000,0.00000000,0.00000000); //object(propcollecttable) (2)
	CreateDynamicObject(1670,2532.39990234,-1669.00000000,15.10000038,0.00000000,0.00000000,0.00000000); //object(propcollecttable) (3)
	CreateDynamicObject(1670,2532.50000000,-1668.00000000,15.10000038,0.00000000,0.00000000,0.00000000); //object(propcollecttable) (4)
	CreateDynamicObject(1670,2532.30004883,-1666.50000000,15.10000038,0.00000000,0.00000000,0.00000000); //object(propcollecttable) (5)
	CreateDynamicObject(1670,2532.39990234,-1665.00000000,15.10000038,0.00000000,0.00000000,0.00000000); //object(propcollecttable) (6)
	CreateDynamicObject(1485,2526.60009766,-1669.69995117,15.39999962,0.00000000,0.00000000,0.00000000); //object(cj_ciggy) (1)
	CreateDynamicObject(1485,2526.89990234,-1669.69995117,15.39999962,0.00000000,0.00000000,0.00000000); //object(cj_ciggy) (2)
	CreateDynamicObject(1679,2524.60009766,-1666.59997559,15.00000000,0.00000000,0.00000000,0.00000000); //object(chairsntableml) (1)
	CreateDynamicObject(1670,2524.60009766,-1666.80004883,15.39999962,0.00000000,0.00000000,0.00000000); //object(propcollecttable) (1)
	CreateDynamicObject(1670,2524.39990234,-1666.40002441,15.39999962,0.00000000,0.00000000,0.00000000); //object(propcollecttable) (1)
	CreateDynamicObject(1946,2487.30004883,-1666.19995117,12.60000038,0.00000000,0.00000000,0.00000000); //object(baskt_ball_hi) (1)
	CreateDynamicObject(1447,2482.10009766,-1689.19995117,13.10000038,0.00000000,0.00000000,0.00000000); //object(dyn_mesh_4) (1)
	CreateDynamicObject(2891,2535.00000000,-1666.80004883,14.19999981,0.00000000,0.00000000,0.00000000); //object(kmb_packet) (1)
	CreateDynamicObject(2891,2535.19995117,-1666.09997559,14.19999981,0.00000000,0.00000000,0.00000000); //object(kmb_packet) (2)
	CreateDynamicObject(2891,2535.50000000,-1666.69995117,14.19999981,0.00000000,0.00000000,0.00000000); //object(kmb_packet) (3)
	CreateDynamicObject(2891,2535.50000000,-1666.69995117,14.39999962,0.00000000,0.00000000,0.00000000); //object(kmb_packet) (4)
	CreateDynamicObject(2891,2535.50000000,-1666.69995117,14.60000038,0.00000000,0.00000000,0.00000000); //object(kmb_packet) (5)
	CreateDynamicObject(2891,2535.19995117,-1666.09997559,14.39999962,0.00000000,0.00000000,0.00000000); //object(kmb_packet) (6)
	CreateDynamicObject(2891,2535.19995117,-1666.09997559,14.60000038,0.00000000,0.00000000,0.00000000); //object(kmb_packet) (7)
	CreateDynamicObject(910,2464.89990234,-1650.80004883,13.69999981,0.00000000,0.00000000,0.00000000); //object(bust_cabinet_4) (1)
	CreateDynamicObject(3119,2507.50000000,-1670.80004883,12.69999981,0.00000000,0.00000000,0.00000000); //object(cs_ry_props) (1)
	CreateDynamicObject(3119,2497.80004883,-1659.80004883,12.69999981,0.00000000,0.00000000,0.00000000); //object(cs_ry_props) (2)
	CreateDynamicObject(1415,2478.60009766,-1687.59997559,12.50000000,0.00000000,0.00000000,180.00000000); //object(dyn_dumpster) (1)
	CreateDynamicObject(1264,2476.10009766,-1653.19995117,12.89999962,0.00000000,0.00000000,0.00000000); //object(blackbag1) (1)
	CreateDynamicObject(1264,2503.50000000,-1651.19995117,12.89999962,0.00000000,0.00000000,0.00000000); //object(blackbag1) (2)
	CreateDynamicObject(3380,2448.30004883,-1664.50000000,12.50000000,0.00000000,0.00000000,262.00000000); //object(ce_hairpinl) (1)
	CreateDynamicObject(1528,2422.89990234,-1682.50000000,14.80000019,0.00000000,0.00000000,0.00000000); //object(tag_seville) (1)
	CreateDynamicObject(1528,2478.30004883,-1660.40002441,12.39999962,0.00000000,90.00000000,0.00000000); //object(tag_seville) (2)
	CreateDynamicObject(1528,2489.69995117,-1674.19995117,12.39999962,0.00000000,90.00000000,0.00000000); //object(tag_seville) (3)
	CreateDynamicObject(1528,2435.50000000,-1680.90002441,14.69999981,0.00000000,0.00000000,270.00000000); //object(tag_seville) (4)
	CreateDynamicObject(1226,2509.00000000,-1674.30004883,16.39999962,0.00000000,0.00000000,344.00000000); //object(lamppost3) (1)
	CreateDynamicObject(1226,2478.30004883,-1653.19995117,16.39999962,0.00000000,0.00000000,107.99841309); //object(lamppost3) (2)
	CreateDynamicObject(1226,2456.50000000,-1653.59997559,16.39999962,0.00000000,0.00000000,93.99560547); //object(lamppost3) (3)
	CreateDynamicObject(618,2455.89990234,-1684.40002441,12.50000000,0.00000000,0.00000000,0.00000000); //object(veg_treea3) (1)
	CreateDynamicObject(618,2505.39990234,-1648.80004883,12.50000000,0.00000000,0.00000000,0.00000000); //object(veg_treea3) (2)
	CreateDynamicObject(647,2505.80004883,-1648.50000000,14.00000000,0.00000000,0.00000000,0.00000000); //object(new_bushsm) (1)

	//.EXT AEROPUERTO
    CreateDynamicObject(18284,1392.19921875,-2313.59960938,15.50000000,0.00000000,0.00000000,270.00000000); //object(cw_tscanopy) (1)
    CreateDynamicObject(18284,1408.69995117,-2313.50000000,15.39999962,0.00000000,0.00000000,270.00000000); //object(cw_tscanopy) (2)
    CreateDynamicObject(18284,1407.69995117,-2348.19995117,15.39999962,0.00000000,0.00000000,270.00000000); //object(cw_tscanopy) (3)
    CreateDynamicObject(18284,1391.19921875,-2348.29980469,15.50000000,0.00000000,0.00000000,270.00000000); //object(cw_tscanopy) (4)
    CreateDynamicObject(18284,1391.09997559,-2262.19995117,15.50000000,0.00000000,0.00000000,270.00000000); //object(cw_tscanopy) (5)
    CreateDynamicObject(18284,1407.59960938,-2262.09960938,15.39999962,0.00000000,0.00000000,270.00000000); //object(cw_tscanopy) (6)
    CreateDynamicObject(18284,1407.90002441,-2223.30004883,15.50000000,0.00000000,0.00000000,270.00000000); //object(cw_tscanopy) (7)
    CreateDynamicObject(18284,1391.40002441,-2223.19995117,15.39999962,0.00000000,0.00000000,270.00000000); //object(cw_tscanopy) (8)
    CreateDynamicObject(970,1416.30004883,-2296.50000000,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (1)
    CreateDynamicObject(970,1412.29980469,-2296.50000000,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (2)
    CreateDynamicObject(970,1408.19921875,-2296.50000000,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (3)
    CreateDynamicObject(970,1404.09997559,-2296.50000000,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (4)
    CreateDynamicObject(970,1400.00000000,-2296.50000000,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (5)
    CreateDynamicObject(970,1395.90002441,-2296.50000000,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (6)
    CreateDynamicObject(970,1391.80004883,-2296.50000000,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (7)
    CreateDynamicObject(970,1389.69995117,-2298.60009766,13.10000038,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (8)
    CreateDynamicObject(970,1389.69995117,-2302.69995117,13.10000038,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (9)
    CreateDynamicObject(970,1391.69995117,-2304.80004883,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (10)
    CreateDynamicObject(970,1395.80004883,-2304.80004883,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (11)
    CreateDynamicObject(970,1399.90002441,-2304.80004883,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (12)
    CreateDynamicObject(970,1404.00000000,-2304.80004883,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (13)
    CreateDynamicObject(970,1408.09997559,-2304.80004883,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (14)
    CreateDynamicObject(970,1412.19995117,-2304.80004883,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (15)
    CreateDynamicObject(970,1416.30004883,-2304.80004883,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (16)
    CreateDynamicObject(970,1418.40002441,-2302.69995117,13.10000038,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (17)
    CreateDynamicObject(970,1418.40002441,-2298.60009766,13.10000038,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (19)
    CreateDynamicObject(870,1416.00000000,-2300.89990234,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (1)
    CreateDynamicObject(870,1416.59997559,-2298.69995117,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (2)
    CreateDynamicObject(870,1414.40002441,-2298.60009766,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (3)
    CreateDynamicObject(870,1413.50000000,-2301.10009766,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (4)
    CreateDynamicObject(870,1414.80004883,-2302.89990234,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (5)
    CreateDynamicObject(870,1411.90002441,-2302.89990234,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (6)
    CreateDynamicObject(870,1411.50000000,-2299.69995117,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (7)
    CreateDynamicObject(870,1409.69995117,-2298.10009766,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (8)
    CreateDynamicObject(870,1412.50000000,-2297.89990234,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (9)
    CreateDynamicObject(870,1409.80004883,-2301.80004883,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (10)
    CreateDynamicObject(870,1409.80004883,-2303.30004883,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (11)
    CreateDynamicObject(870,1408.00000000,-2300.30004883,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (12)
    CreateDynamicObject(870,1406.00000000,-2302.89990234,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (13)
    CreateDynamicObject(870,1405.30004883,-2299.19995117,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (14)
    CreateDynamicObject(870,1407.30004883,-2302.69995117,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (15)
    CreateDynamicObject(870,1407.69995117,-2297.89990234,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (16)
    CreateDynamicObject(870,1405.69995117,-2297.89990234,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (17)
    CreateDynamicObject(870,1403.90002441,-2297.80004883,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (18)
    CreateDynamicObject(870,1404.00000000,-2302.00000000,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (19)
    CreateDynamicObject(870,1402.30004883,-2300.10009766,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (20)
    CreateDynamicObject(870,1401.19995117,-2302.69995117,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (21)
    CreateDynamicObject(870,1401.80004883,-2297.69995117,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (22)
    CreateDynamicObject(870,1399.80004883,-2299.69995117,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (23)
    CreateDynamicObject(870,1399.19995117,-2302.10009766,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (24)
    CreateDynamicObject(870,1396.50000000,-2302.50000000,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (25)
    CreateDynamicObject(870,1397.90002441,-2300.89990234,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (26)
    CreateDynamicObject(870,1396.59997559,-2298.69995117,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (27)
    CreateDynamicObject(870,1398.30004883,-2297.69995117,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (28)
    CreateDynamicObject(870,1395.30004883,-2300.60009766,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (29)
    CreateDynamicObject(870,1394.00000000,-2298.39990234,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (30)
    CreateDynamicObject(870,1391.50000000,-2298.10009766,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (31)
    CreateDynamicObject(870,1392.40002441,-2301.10009766,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (32)
    CreateDynamicObject(870,1391.30004883,-2299.69995117,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (33)
    CreateDynamicObject(870,1391.30004883,-2303.19995117,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (34)
    CreateDynamicObject(870,1394.19995117,-2303.19995117,12.80000019,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (35)
    CreateDynamicObject(1597,1412.19995117,-2286.30004883,15.00000000,0.00000000,0.00000000,270.00000000); //object(cntrlrsac1) (1)
    CreateDynamicObject(1597,1397.79980469,-2286.29980469,15.00000000,0.00000000,0.00000000,270.00000000); //object(cntrlrsac1) (2)
    CreateDynamicObject(1597,1383.19995117,-2286.10009766,15.00000000,0.00000000,0.00000000,270.00000000); //object(cntrlrsac1) (3)
    CreateDynamicObject(11489,1357.59960938,-2285.59960938,12.50000000,0.00000000,0.00000000,91.99951172); //object(dam_statues) (1)
    CreateDynamicObject(3877,1398.50000000,-2300.60009766,11.19999981,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (1)
    CreateDynamicObject(3877,1403.69995117,-2300.39990234,11.19999981,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (2)
    CreateDynamicObject(3877,1409.00000000,-2301.89990234,11.19999981,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (3)
    CreateDynamicObject(3877,1413.50000000,-2301.69995117,11.19999981,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (4)
    CreateDynamicObject(3877,1409.69995117,-2299.89990234,11.19999981,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (5)
    CreateDynamicObject(3877,1391.69995117,-2301.00000000,11.19999981,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (6)
    CreateDynamicObject(1231,1391.59997559,-2331.10009766,15.30000019,0.00000000,0.00000000,0.00000000); //object(streetlamp2) (1)
    CreateDynamicObject(1231,1401.40002441,-2331.19995117,15.30000019,0.00000000,0.00000000,0.00000000); //object(streetlamp2) (2)
    CreateDynamicObject(1231,1411.19995117,-2331.00000000,15.30000019,0.00000000,0.00000000,0.00000000); //object(streetlamp2) (3)
    CreateDynamicObject(1231,1384.90002441,-2331.10009766,15.30000019,0.00000000,0.00000000,0.00000000); //object(streetlamp2) (4)
    CreateDynamicObject(970,1407.90002441,-2276.30004883,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (3)
    CreateDynamicObject(970,1412.09997559,-2276.30004883,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (3)
    CreateDynamicObject(970,1416.30004883,-2276.30004883,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (3)
    CreateDynamicObject(970,1403.69995117,-2276.30004883,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (3)
    CreateDynamicObject(970,1399.50000000,-2276.30004883,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (3)
    CreateDynamicObject(970,1395.30004883,-2276.30004883,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (3)
    CreateDynamicObject(970,1391.19995117,-2276.30004883,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (3)
    CreateDynamicObject(970,1389.09997559,-2274.19995117,13.10000038,0.00000000,0.00000000,270.00000000); //object(fencesmallb) (3)
    CreateDynamicObject(970,1389.09997559,-2270.10009766,13.10000038,0.00000000,0.00000000,270.00000000); //object(fencesmallb) (3)
    CreateDynamicObject(970,1391.09997559,-2268.00000000,13.10000038,0.00000000,0.00000000,180.00000000); //object(fencesmallb) (3)
    CreateDynamicObject(970,1395.19995117,-2268.00000000,13.10000038,0.00000000,0.00000000,179.99450684); //object(fencesmallb) (3)
    CreateDynamicObject(970,1399.40002441,-2268.00000000,13.10000038,0.00000000,0.00000000,179.99450684); //object(fencesmallb) (3)
    CreateDynamicObject(970,1403.59997559,-2268.00000000,13.10000038,0.00000000,0.00000000,179.99450684); //object(fencesmallb) (3)
    CreateDynamicObject(970,1407.80004883,-2268.00000000,13.10000038,0.00000000,0.00000000,179.99450684); //object(fencesmallb) (3)
    CreateDynamicObject(970,1412.00000000,-2268.00000000,13.10000038,0.00000000,0.00000000,179.99450684); //object(fencesmallb) (3)
    CreateDynamicObject(970,1416.30004883,-2268.00000000,13.10000038,0.00000000,0.00000000,179.99450684); //object(fencesmallb) (3)
    CreateDynamicObject(970,1418.40002441,-2270.10009766,13.10000038,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (3)
    CreateDynamicObject(970,1418.40002441,-2274.30004883,13.10000038,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (3)
    CreateDynamicObject(869,1416.19995117,-2273.80004883,13.00000000,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (1)
    CreateDynamicObject(869,1415.90002441,-2270.00000000,13.00000000,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (2)
    CreateDynamicObject(869,1411.59997559,-2270.60009766,13.00000000,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (3)
    CreateDynamicObject(869,1411.90002441,-2274.39990234,13.00000000,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (4)
    CreateDynamicObject(869,1407.40002441,-2274.19995117,13.00000000,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (5)
    CreateDynamicObject(869,1407.59997559,-2270.19995117,13.00000000,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (6)
    CreateDynamicObject(869,1403.09997559,-2270.50000000,13.00000000,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (7)
    CreateDynamicObject(869,1403.90002441,-2274.30004883,13.00000000,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (8)
    CreateDynamicObject(869,1399.69995117,-2274.10009766,13.00000000,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (9)
    CreateDynamicObject(869,1395.30004883,-2272.69995117,13.00000000,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (10)
    CreateDynamicObject(869,1391.69995117,-2274.30004883,13.00000000,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (11)
    CreateDynamicObject(869,1391.90002441,-2270.60009766,13.00000000,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (12)
    CreateDynamicObject(869,1395.40002441,-2270.00000000,13.00000000,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (13)
    CreateDynamicObject(869,1399.09997559,-2270.60009766,13.00000000,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (14)
    CreateDynamicObject(869,1395.90002441,-2274.50000000,13.00000000,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (15)
    CreateDynamicObject(869,1399.00000000,-2272.39990234,13.00000000,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (16)
    CreateDynamicObject(869,1403.50000000,-2272.60009766,13.00000000,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (17)
    CreateDynamicObject(869,1407.80004883,-2272.50000000,13.00000000,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (18)
    CreateDynamicObject(869,1413.30004883,-2272.19995117,13.00000000,0.00000000,0.00000000,0.00000000); //object(veg_pflowerswee) (19)
    CreateDynamicObject(3877,1394.90002441,-2273.00000000,11.19999981,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (7)
    CreateDynamicObject(3877,1401.09997559,-2271.39990234,11.19999981,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (8)
    CreateDynamicObject(3877,1408.40002441,-2273.00000000,11.19999981,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (9)
    CreateDynamicObject(3877,1416.00000000,-2269.30004883,11.19999981,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (10)
    CreateDynamicObject(3877,1407.69995117,-2272.39990234,11.19999981,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (11)
    CreateDynamicObject(3877,1391.19995117,-2274.19995117,11.19999981,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (12)
    CreateDynamicObject(3511,1405.00000000,-2286.60009766,9.80000019,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b01) (2)
    CreateDynamicObject(718,1390.40002441,-2286.50000000,12.60000038,357.99993896,180.00000000,180.00000000); //object(vgs_palm04) (1)
    CreateDynamicObject(718,1405.09997559,-2286.69995117,12.60000038,357.99499512,179.99450684,179.99450684); //object(vgs_palm04) (3)
    CreateDynamicObject(3511,1390.19995117,-2286.39990234,9.80000019,0.00000000,0.00000000,0.00000000); //object(vgsn_nitree_b01) (4)
    CreateDynamicObject(1297,1399.09997559,-2291.30004883,15.89999962,0.00000000,0.00000000,268.00000000); //object(lamppost1) (1)
    CreateDynamicObject(1297,1399.40002441,-2281.30004883,15.89999962,0.00000000,0.00000000,93.99499512); //object(lamppost1) (2)
    CreateDynamicObject(1297,1413.19995117,-2281.50000000,15.89999962,0.00000000,0.00000000,93.99353027); //object(lamppost1) (3)
    CreateDynamicObject(1231,1395.50000000,-2241.69995117,15.30000019,0.00000000,0.00000000,0.00000000); //object(streetlamp2) (6)
    CreateDynamicObject(1231,1385.59997559,-2241.60009766,15.30000019,0.00000000,0.00000000,0.00000000); //object(streetlamp2) (7)
    CreateDynamicObject(1231,1404.69995117,-2241.89990234,15.30000019,0.00000000,0.00000000,0.00000000); //object(streetlamp2) (8)
    CreateDynamicObject(1231,1414.69995117,-2241.60009766,15.30000019,0.00000000,0.00000000,0.00000000); //object(streetlamp2) (9)
    CreateDynamicObject(982,1403.19921875,-2333.59960938,13.30000019,0.00000000,0.00000000,270.00000000); //object(fenceshit) (1)
    CreateDynamicObject(982,1403.30004883,-2328.10009766,13.30000019,0.00000000,0.00000000,270.00000000); //object(fenceshit) (2)
    CreateDynamicObject(983,1387.09997559,-2333.60009766,13.30000019,0.00000000,0.00000000,270.00000000); //object(fenceshit3) (1)
    CreateDynamicObject(983,1387.19921875,-2328.09960938,13.30000019,0.00000000,0.00000000,270.00000000); //object(fenceshit3) (3)
    CreateDynamicObject(4597,1400.30004883,-2310.10009766,13.00000000,0.00000000,0.00000000,0.00000000); //object(crprkblok4_lan2) (1)
    CreateDynamicObject(4597,1399.80004883,-2351.89990234,13.00000000,0.00000000,0.00000000,0.00000000); //object(crprkblok4_lan2) (2)
    CreateDynamicObject(5837,1396.40002441,-2331.30004883,14.30000019,0.00000000,0.00000000,0.00000000); //object(ci_guardhouse1) (1)
    CreateDynamicObject(8406,1418.39941406,-2323.59960938,18.10000038,0.00000000,0.00000000,90.00000000); //object(carparksign01_lvs) (1)
    CreateDynamicObject(982,1396.50000000,-2244.89941406,13.30000019,0.00000000,0.00000000,270.00000000); //object(fenceshit) (1)
    CreateDynamicObject(982,1396.50000000,-2239.30004883,13.30000019,0.00000000,0.00000000,270.00000000); //object(fenceshit) (1)
    CreateDynamicObject(983,1412.50000000,-2239.30004883,13.30000019,0.00000000,0.00000000,270.00000000); //object(fenceshit3) (3)
    CreateDynamicObject(983,1412.59997559,-2244.89990234,13.30000019,0.00000000,0.00000000,270.00000000); //object(fenceshit3) (3)
    CreateDynamicObject(5837,1400.09997559,-2241.69995117,14.30000019,0.00000000,0.00000000,0.00000000); //object(ci_guardhouse1) (1)
    CreateDynamicObject(8406,1418.59997559,-2255.30004883,18.10000038,0.00000000,0.00000000,90.00000000); //object(carparksign01_lvs) (1)
    CreateDynamicObject(970,1368.90002441,-2285.50000000,13.10000038,0.00000000,0.00000000,326.00000000); //object(fencesmallb) (2)
    CreateDynamicObject(970,1365.59997559,-2283.50000000,13.10000038,0.00000000,0.00000000,331.99536133); //object(fencesmallb) (2)
    CreateDynamicObject(970,1362.09997559,-2281.30004883,13.10000038,0.00000000,0.00000000,321.99536133); //object(fencesmallb) (2)
    CreateDynamicObject(970,1358.90002441,-2278.80004883,13.10000038,0.00000000,0.00000000,321.99279785); //object(fencesmallb) (2)
    CreateDynamicObject(970,1356.69995117,-2279.50000000,13.10000038,0.00000000,0.00000000,73.99279785); //object(fencesmallb) (2)
    CreateDynamicObject(970,1355.50000000,-2283.50000000,13.10000038,0.00000000,0.00000000,73.98742676); //object(fencesmallb) (2)
    CreateDynamicObject(970,1355.09997559,-2287.50000000,13.10000038,0.00000000,0.00000000,93.98742676); //object(fencesmallb) (2)
    CreateDynamicObject(970,1355.40002441,-2291.60009766,13.10000038,0.00000000,0.00000000,93.98254395); //object(fencesmallb) (2)
    CreateDynamicObject(970,1357.50000000,-2292.89990234,13.10000038,0.00000000,0.00000000,201.98254395); //object(fencesmallb) (2)
    CreateDynamicObject(970,1361.30004883,-2291.19995117,13.10000038,0.00000000,0.00000000,205.97814941); //object(fencesmallb) (2)
    CreateDynamicObject(970,1365.00000000,-2289.39990234,13.10000038,0.00000000,0.00000000,205.97717285); //object(fencesmallb) (2)
    CreateDynamicObject(970,1368.69995117,-2287.60009766,13.10000038,0.00000000,0.00000000,205.97717285); //object(fencesmallb) (2)
    CreateDynamicObject(2745,1360.09997559,-2283.60009766,13.80000019,0.00000000,0.00000000,104.00000000); //object(cj_stat_3) (1)
    CreateDynamicObject(2745,1360.40002441,-2287.30004883,13.80000019,0.00000000,0.00000000,59.99658203); //object(cj_stat_3) (2)
    CreateDynamicObject(8406,1418.50000000,-2343.39990234,18.10000038,0.00000000,0.00000000,90.00000000); //object(carparksign01_lvs) (1)
    CreateDynamicObject(8406,1418.69995117,-2234.19995117,18.10000038,0.00000000,0.00000000,90.00000000); //object(carparksign01_lvs) (1)
    CreateDynamicObject(982,1380.19995117,-2253.89990234,13.30000019,0.00000000,0.00000000,180.00000000); //object(fenceshit) (1)
    CreateDynamicObject(982,1380.19995117,-2233.10009766,13.30000019,0.00000000,0.00000000,179.99450684); //object(fenceshit) (1)
    CreateDynamicObject(982,1380.69995117,-2331.50000000,13.30000019,0.00000000,0.00000000,179.99450684); //object(fenceshit) (1)
    CreateDynamicObject(3472,1405.80004883,-2331.19995117,5.30000019,0.00000000,0.00000000,0.00000000); //object(circuslampost03) (1)
    CreateDynamicObject(3472,1387.50000000,-2331.39990234,5.30000019,0.00000000,0.00000000,0.00000000); //object(circuslampost03) (3)
    CreateDynamicObject(3472,1408.19995117,-2241.89990234,4.30000019,0.00000000,0.00000000,0.00000000); //object(circuslampost03) (4)
    CreateDynamicObject(3472,1386.00000000,-2242.30004883,4.30000019,0.00000000,0.00000000,0.00000000); //object(circuslampost03) (5)
    CreateDynamicObject(9833,1408.19995117,-2273.19995117,15.50000000,0.00000000,0.00000000,0.00000000); //object(fountain_sfw) (1)
    CreateDynamicObject(9833,1408.80004883,-2300.69995117,15.50000000,0.00000000,0.00000000,0.00000000); //object(fountain_sfw) (2)

	//.EXT PUERTO LSEM
	CreateDynamicObject(3406, 2818.69556, -2435.81787, 8.96657,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3406, 2818.68921, -2437.83252, 8.96657,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3406, 2818.69360, -2439.82813, 8.96657,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19452, 2812.25732, -2439.82690, 11.75860,   0.00000, 117.00000, 0.00000);
	CreateDynamicObject(3406, 2818.70190, -2441.82813, 8.96657,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3406, 2818.67114, -2443.82031, 8.96657,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19452, 2815.60425, -2439.83276, 10.95460,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, 2819.09961, -2439.83325, 10.99460,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, 2820.82300, -2439.83057, 10.97460,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1232, 2822.19678, -2435.37451, 13.73773,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 2813.79858, -2435.39600, 13.73773,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 2814.02515, -2444.26563, 13.73773,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 2822.11865, -2444.23535, 13.73773,   0.00000, 0.00000, 0.00000);

	// ---====[ Textdraws ]====---- //

	// Velocimetro
	TDVelocimetroBOX = TextDrawCreate(531.120361, 351.215911, "_");
	TextDrawLetterSize(TDVelocimetroBOX, 0.429996, 0.674130);
	TextDrawTextSize(TDVelocimetroBOX, 619.999877, -11.946661);
	TextDrawAlignment(TDVelocimetroBOX, 1);
	TextDrawColor(TDVelocimetroBOX, -1);
	TextDrawUseBox(TDVelocimetroBOX, true);
	TextDrawBoxColor(TDVelocimetroBOX, 1010580735);
	TextDrawSetShadow(TDVelocimetroBOX, 0);
	TextDrawSetOutline(TDVelocimetroBOX, 1);
	TextDrawBackgroundColor(TDVelocimetroBOX, 51);
	TextDrawFont(TDVelocimetroBOX, 1);
	TextDrawSetProportional(TDVelocimetroBOX, 1);

	TDVelocimetroTXT = TextDrawCreate(530.039733, 348.258514, "VELOCIDAD");
	TextDrawLetterSize(TDVelocimetroTXT, 0.354797, 1.189329);
	TextDrawTextSize(TDVelocimetroTXT, 628.000000, -14.933332);
	TextDrawAlignment(TDVelocimetroTXT, 1);
	TextDrawColor(TDVelocimetroTXT, -1061109505);
	TextDrawSetShadow(TDVelocimetroTXT, 0);
	TextDrawSetOutline(TDVelocimetroTXT, 0);
	TextDrawBackgroundColor(TDVelocimetroTXT, 255);
	TextDrawFont(TDVelocimetroTXT, 1);
	TextDrawSetProportional(TDVelocimetroTXT, 1);

	TDVelocimetroFondo = TextDrawCreate(530.920227, 363.506408, "_~n~_");
	TextDrawLetterSize(TDVelocimetroFondo, 0.557995, 1.256531);
	TextDrawTextSize(TDVelocimetroFondo, 619.999877, -11.946661);
	TextDrawAlignment(TDVelocimetroFondo, 1);
	TextDrawColor(TDVelocimetroFondo, -1);
	TextDrawUseBox(TDVelocimetroFondo, true);
	TextDrawBoxColor(TDVelocimetroFondo, 100);
	TextDrawSetShadow(TDVelocimetroFondo, 0);
	TextDrawSetOutline(TDVelocimetroFondo, 1);
	TextDrawBackgroundColor(TDVelocimetroFondo, 51);
	TextDrawFont(TDVelocimetroFondo, 1);
	TextDrawSetProportional(TDVelocimetroFondo, 1);

	// Gasolimetro
	TDGasolimetroBOX = TextDrawCreate(530.520385, 400.749206, "_");
	TextDrawLetterSize(TDGasolimetroBOX, 0.429996, 0.674130);
	TextDrawTextSize(TDGasolimetroBOX, 619.999877, -11.946661);
	TextDrawAlignment(TDGasolimetroBOX, 1);
	TextDrawColor(TDGasolimetroBOX, -1);
	TextDrawUseBox(TDGasolimetroBOX, true);
	TextDrawBoxColor(TDGasolimetroBOX, 1010580735);
	TextDrawSetShadow(TDGasolimetroBOX, 0);
	TextDrawSetOutline(TDGasolimetroBOX, 1);
	TextDrawBackgroundColor(TDGasolimetroBOX, 51);
	TextDrawFont(TDGasolimetroBOX, 1);
	TextDrawSetProportional(TDGasolimetroBOX, 1);

	TDGasolimetroTXT = TextDrawCreate(531.759765, 397.567626, "COMBUSTIBLE");
	TextDrawLetterSize(TDGasolimetroTXT, 0.354797, 1.189329);
	TextDrawTextSize(TDGasolimetroTXT, 628.000000, -14.933332);
	TextDrawAlignment(TDGasolimetroTXT, 1);
	TextDrawColor(TDGasolimetroTXT, -1061109505);
	TextDrawSetShadow(TDGasolimetroTXT, 0);
	TextDrawSetOutline(TDGasolimetroTXT, 0);
	TextDrawBackgroundColor(TDGasolimetroTXT, 255);
	TextDrawFont(TDGasolimetroTXT, 1);
	TextDrawSetProportional(TDGasolimetroTXT, 1);

	TDGasolimetroFondo = TextDrawCreate(530.960144, 412.367736, "_~n~_");
	TextDrawLetterSize(TDGasolimetroFondo, 0.557995, 1.256531);
	TextDrawTextSize(TDGasolimetroFondo, 619.999877, -11.946661);
	TextDrawAlignment(TDGasolimetroFondo, 1);
	TextDrawColor(TDGasolimetroFondo, -1);
	TextDrawUseBox(TDGasolimetroFondo, true);
	TextDrawBoxColor(TDGasolimetroFondo, 100);
	TextDrawSetShadow(TDGasolimetroFondo, 0);
	TextDrawSetOutline(TDGasolimetroFondo, 1);
	TextDrawBackgroundColor(TDGasolimetroFondo, 51);
	TextDrawFont(TDGasolimetroFondo, 1);
	TextDrawSetProportional(TDGasolimetroFondo, 1);

	BOXContadorKM = TextDrawCreate(531.120544, 388.549499, "_");
	TextDrawLetterSize(BOXContadorKM, 0.427594, 0.151463);
	TextDrawTextSize(BOXContadorKM, 619.999877, -11.946660);
	TextDrawAlignment(BOXContadorKM, 1);
	TextDrawColor(BOXContadorKM, -1);
	TextDrawUseBox(BOXContadorKM, true);
	TextDrawBoxColor(BOXContadorKM, 1010580735);
	TextDrawSetShadow(BOXContadorKM, 0);
	TextDrawSetOutline(BOXContadorKM, 1);
	TextDrawBackgroundColor(BOXContadorKM, 51);
	TextDrawFont(BOXContadorKM, 1);
	TextDrawSetProportional(BOXContadorKM, 1);

	// Faso (Efecto)
	TDEfectoFaso = TextDrawCreate(697.199951, 1.500000, "usebox");
	TextDrawLetterSize(TDEfectoFaso, 0.000000, 49.778148);
	TextDrawTextSize(TDEfectoFaso, -26.000000, 0.000000);
	TextDrawAlignment(TDEfectoFaso, 1);
	TextDrawColor(TDEfectoFaso, 0);
	TextDrawUseBox(TDEfectoFaso, true);
	TextDrawBoxColor(TDEfectoFaso, 0xFF00001E);
	TextDrawSetShadow(TDEfectoFaso, 0);
	TextDrawSetOutline(TDEfectoFaso, 0);
	TextDrawFont(TDEfectoFaso, 0);

	// SpecialBar
	TDSpecialBarBOX = TextDrawCreate(533.599609, 139.626434, "_");
	TextDrawLetterSize(TDSpecialBarBOX, 0.429996, 0.674130);
	TextDrawTextSize(TDSpecialBarBOX, 619.999877, -11.946661);
	TextDrawAlignment(TDSpecialBarBOX, 1);
	TextDrawColor(TDSpecialBarBOX, -1);
	TextDrawUseBox(TDSpecialBarBOX, true);
	TextDrawBoxColor(TDSpecialBarBOX, 1010580735);
	TextDrawSetShadow(TDSpecialBarBOX, 0);
	TextDrawSetOutline(TDSpecialBarBOX, 1);
	TextDrawBackgroundColor(TDSpecialBarBOX, 51);
	TextDrawFont(TDSpecialBarBOX, 1);
	TextDrawSetProportional(TDSpecialBarBOX, 1);

	TDSpecialBarFondo = TextDrawCreate(532.960083, 152.287475, "_~n~_");
	TextDrawLetterSize(TDSpecialBarFondo, 0.557995, 1.256531);
	TextDrawTextSize(TDSpecialBarFondo, 619.999877, -11.946661);
	TextDrawAlignment(TDSpecialBarFondo, 1);
	TextDrawColor(TDSpecialBarFondo, -1);
	TextDrawUseBox(TDSpecialBarFondo, true);
	TextDrawBoxColor(TDSpecialBarFondo, 100);
	TextDrawSetShadow(TDSpecialBarFondo, 0);
	TextDrawSetOutline(TDSpecialBarFondo, 1);
	TextDrawBackgroundColor(TDSpecialBarFondo, 51);
	TextDrawFont(TDSpecialBarFondo, 1);
	TextDrawSetProportional(TDSpecialBarFondo, 1);

	// Necesidades
	TDNecesidadesBOX = TextDrawCreate(531.720275, 239.709289, "_");
	TextDrawLetterSize(TDNecesidadesBOX, 0.429996, 0.674130);
	TextDrawTextSize(TDNecesidadesBOX, 619.999877, -11.946662);
	TextDrawAlignment(TDNecesidadesBOX, 1);
	TextDrawColor(TDNecesidadesBOX, -1);
	TextDrawUseBox(TDNecesidadesBOX, true);
	TextDrawBoxColor(TDNecesidadesBOX, 1010580735);
	TextDrawSetShadow(TDNecesidadesBOX, 0);
	TextDrawSetOutline(TDNecesidadesBOX, 1);
	TextDrawBackgroundColor(TDNecesidadesBOX, 51);
	TextDrawFont(TDNecesidadesBOX, 1);
	TextDrawSetProportional(TDNecesidadesBOX, 1);

	TDNecesidades = TextDrawCreate(532.239746, 237.498519, "NECESIDADES");
	TextDrawLetterSize(TDNecesidades, 0.354797, 1.189329);
	TextDrawTextSize(TDNecesidades, 628.000000, -14.933332);
	TextDrawAlignment(TDNecesidades, 1);
	TextDrawColor(TDNecesidades, -1061109505);
	TextDrawSetShadow(TDNecesidades, 0);
	TextDrawSetOutline(TDNecesidades, 0);
	TextDrawBackgroundColor(TDNecesidades, 255);
	TextDrawFont(TDNecesidades, 1);
	TextDrawSetProportional(TDNecesidades, 1);

	// Taximetro
	TDTaximetroTXT = TextDrawCreate(532.112243, 106.619941, "TAXIMETRO");
	TextDrawLetterSize(TDTaximetroTXT, 0.255596, 1.047461);
	TextDrawTextSize(TDTaximetroTXT, 121.600067, -16.426668);
	TextDrawAlignment(TDTaximetroTXT, 1);
	TextDrawColor(TDTaximetroTXT, -1061109505);
	TextDrawSetShadow(TDTaximetroTXT, 0);
	TextDrawSetOutline(TDTaximetroTXT, 0);
	TextDrawBackgroundColor(TDTaximetroTXT, 255);
	TextDrawFont(TDTaximetroTXT, 1);
	TextDrawSetProportional(TDTaximetroTXT, 1);

	TDTaximetroBOX = TextDrawCreate(531.120361, 108.549217, "_");
	TextDrawLetterSize(TDTaximetroBOX, 0.429996, 0.674130);
	TextDrawTextSize(TDTaximetroBOX, 619.999877, -11.946660);
	TextDrawAlignment(TDTaximetroBOX, 1);
	TextDrawColor(TDTaximetroBOX, -1);
	TextDrawUseBox(TDTaximetroBOX, true);
	TextDrawBoxColor(TDTaximetroBOX, 1010580735);
	TextDrawSetShadow(TDTaximetroBOX, 0);
	TextDrawSetOutline(TDTaximetroBOX, 1);
	TextDrawBackgroundColor(TDTaximetroBOX, 51);
	TextDrawFont(TDTaximetroBOX, 1);
	TextDrawSetProportional(TDTaximetroBOX, 1);

	// Pizza
	PizzaTiempo = TextDrawCreate(61.000000, 287.000000, "_");
	TextDrawBackgroundColor(PizzaTiempo, 0x00000000);
	TextDrawFont(PizzaTiempo, 5);
	TextDrawLetterSize(PizzaTiempo, 0.500000, 1.000000);
	TextDrawColor(PizzaTiempo, -1);
	TextDrawSetOutline(PizzaTiempo, 1);
	TextDrawSetProportional(PizzaTiempo, 0);
	TextDrawUseBox(PizzaTiempo, 1);
	TextDrawBoxColor(PizzaTiempo, 0x00000000);
	TextDrawTextSize(PizzaTiempo, -60.000000, 50.000000);
	TextDrawSetPreviewModel(PizzaTiempo, 2881);
	TextDrawSetPreviewRot(PizzaTiempo, 180.000000, 0.000000, -55.000000, 1.000000);

	// KEYPAD (Fondo)
	KeyPad_Fondo = TextDrawCreate(206.000000, 56.000000+60.000000, "ld_dual:backgnd");
	TextDrawBackgroundColor(KeyPad_Fondo, 255);
	TextDrawFont(KeyPad_Fondo, 4);
	TextDrawLetterSize(KeyPad_Fondo, 0.500000, 1.000000);
	TextDrawColor(KeyPad_Fondo, -1);
	TextDrawSetOutline(KeyPad_Fondo, 0);
	TextDrawSetProportional(KeyPad_Fondo, 1);
	TextDrawSetShadow(KeyPad_Fondo, 1);
	TextDrawUseBox(KeyPad_Fondo, 1);
	TextDrawBoxColor(KeyPad_Fondo, 255);
	TextDrawTextSize(KeyPad_Fondo, 70.00000*MAX_KEY_NUMBERS, 100.000000);
	TextDrawSetSelectable(KeyPad_Fondo, 0);

	// TV
	TDTV[0] = TextDrawCreate(-10.000000, 0.000000, "_");
	TextDrawBackgroundColor(TDTV[0], 255);
	TextDrawFont(TDTV[0], 1);
	TextDrawLetterSize(TDTV[0], 0.600000, 3.000000);
	TextDrawColor(TDTV[0], -1);
	TextDrawSetOutline(TDTV[0], 0);
	TextDrawSetProportional(TDTV[0], 1);
	TextDrawSetShadow(TDTV[0], 1);
	TextDrawUseBox(TDTV[0], 1);
	TextDrawBoxColor(TDTV[0], 255);
	TextDrawTextSize(TDTV[0], 640.000000, 0.000000);

	TDTV[1] = TextDrawCreate(-10.000000, 426.000000, "_");
	TextDrawBackgroundColor(TDTV[1], 255);
	TextDrawFont(TDTV[1], 1);
	TextDrawLetterSize(TDTV[1], 0.600000, 3.000000);
	TextDrawColor(TDTV[1], -1);
	TextDrawSetOutline(TDTV[1], 0);
	TextDrawSetProportional(TDTV[1], 1);
	TextDrawSetShadow(TDTV[1], 1);
	TextDrawUseBox(TDTV[1], 1);
	TextDrawBoxColor(TDTV[1], 255);
	TextDrawTextSize(TDTV[1], 640.000000, 0.000000);

	TDTV[2] = TextDrawCreate(260.000000, 0.000000, "~r~L~g~E~b~D");
	TextDrawBackgroundColor(TDTV[2], -1);
	TextDrawFont(TDTV[2], 1);
	TextDrawLetterSize(TDTV[2], 1.159999, 2.199999);
	TextDrawColor(TDTV[2], -1);
	TextDrawSetOutline(TDTV[2], 1);
	TextDrawSetProportional(TDTV[2], 1);
	TextDrawUseBox(TDTV[2], 1);
	TextDrawBoxColor(TDTV[2], 255);
	TextDrawTextSize(TDTV[2], 330.000000, 0.000000);

	TDTV[3] = TextDrawCreate(586.000000, 422.000000, "l");
	TextDrawBackgroundColor(TDTV[3], 255);
	TextDrawFont(TDTV[3], 1);
	TextDrawLetterSize(TDTV[3], 0.899999, 1.299998);
	TextDrawColor(TDTV[3], 16777215);
	TextDrawSetOutline(TDTV[3], 0);
	TextDrawSetProportional(TDTV[3], 1);
	TextDrawSetShadow(TDTV[3], 1);

	TDTV[4] = TextDrawCreate(580.000000, 421.000000, "o");
	TextDrawBackgroundColor(TDTV[4], 255);
	TextDrawFont(TDTV[4], 2);
	TextDrawLetterSize(TDTV[4], 0.759999, 3.200000);
	TextDrawColor(TDTV[4], 16777215);
	TextDrawSetOutline(TDTV[4], 0);
	TextDrawSetProportional(TDTV[4], 1);
	TextDrawSetShadow(TDTV[4], 1);

	TDTV[5] = TextDrawCreate(246.000000, 4.000000, "~<~");
	TextDrawBackgroundColor(TDTV[5], 255);
	TextDrawFont(TDTV[5], 1);
	TextDrawLetterSize(TDTV[5], 0.529999, 1.299999);
	TextDrawColor(TDTV[5], -1);
	TextDrawSetOutline(TDTV[5], 0);
	TextDrawSetProportional(TDTV[5], 1);
	TextDrawSetShadow(TDTV[5], 1);

	TDTV[6] = TextDrawCreate(326.000000, 4.000000, "~>~");
	TextDrawBackgroundColor(TDTV[6], 255);
	TextDrawFont(TDTV[6], 1);
	TextDrawLetterSize(TDTV[6], 0.529999, 1.299999);
	TextDrawColor(TDTV[6], -1);
	TextDrawSetOutline(TDTV[6], 0);
	TextDrawSetProportional(TDTV[6], 1);
	TextDrawSetShadow(TDTV[6], 1);

	TDTV[7] = TextDrawCreate(316.000000, 424.000000, "~>~");
	TextDrawBackgroundColor(TDTV[7], 255);
	TextDrawFont(TDTV[7], 1);
	TextDrawLetterSize(TDTV[7], 0.579999, 2.000000);
	TextDrawColor(TDTV[7], -1);
	TextDrawSetOutline(TDTV[7], 0);
	TextDrawSetProportional(TDTV[7], 1);
	TextDrawSetShadow(TDTV[7], 1);

	TDTV[8] = TextDrawCreate(246.000000, 424.000000, "~<~");
	TextDrawBackgroundColor(TDTV[8], 255);
	TextDrawFont(TDTV[8], 1);
	TextDrawLetterSize(TDTV[8], 0.579999, 2.000000);
	TextDrawColor(TDTV[8], -1);
	TextDrawSetOutline(TDTV[8], 0);
	TextDrawSetProportional(TDTV[8], 1);
	TextDrawSetShadow(TDTV[8], 1);

 	TV_Azul = TextDrawCreate(-10.000000, 30.000000, "_");
	TextDrawBackgroundColor(TV_Azul, 255);
	TextDrawFont(TV_Azul, 1);
	TextDrawLetterSize(TV_Azul, 0.400000, 43.300010);
	TextDrawColor(TV_Azul, C_AZUL);
	TextDrawSetOutline(TV_Azul, 0);
	TextDrawSetProportional(TV_Azul, 1);
	TextDrawSetShadow(TV_Azul, 1);
	TextDrawUseBox(TV_Azul, 1);
	TextDrawBoxColor(TV_Azul, C_AZUL);
	TextDrawTextSize(TV_Azul, 640.000000, 0.000000);

	TV_Apagado = TextDrawCreate(-10.000000, 30.000000, "_");
	TextDrawBackgroundColor(TV_Apagado, 255);
	TextDrawFont(TV_Apagado, 1);
	TextDrawLetterSize(TV_Apagado, 0.400000, 43.300010);
	TextDrawColor(TV_Apagado, -1);
	TextDrawSetOutline(TV_Apagado, 0);
	TextDrawSetProportional(TV_Apagado, 1);
	TextDrawSetShadow(TV_Apagado, 1);
	TextDrawUseBox(TV_Apagado, 1);
	TextDrawBoxColor(TV_Apagado, 255);
	TextDrawTextSize(TV_Apagado, 640.000000, 0.000000);

	CAMARA_Seg[0] = TextDrawCreate(0.000000, 0.000000, "ld_none:tvcorn");
	TextDrawBackgroundColor(CAMARA_Seg[0], 255);
	TextDrawFont(CAMARA_Seg[0], 4);
	TextDrawLetterSize(CAMARA_Seg[0], 0.500000, 1.000000);
	TextDrawColor(CAMARA_Seg[0], -1);
	TextDrawSetOutline(CAMARA_Seg[0], 0);
	TextDrawSetProportional(CAMARA_Seg[0], 1);
	TextDrawSetShadow(CAMARA_Seg[0], 1);
	TextDrawUseBox(CAMARA_Seg[0], 1);
	TextDrawBoxColor(CAMARA_Seg[0], 255);
	TextDrawTextSize(CAMARA_Seg[0], 316.000000, 193.000000);

	CAMARA_Seg[1] = TextDrawCreate(640.000000, 0.000000, "ld_none:tvcorn");
	TextDrawBackgroundColor(CAMARA_Seg[1], 255);
	TextDrawFont(CAMARA_Seg[1], 4);
	TextDrawLetterSize(CAMARA_Seg[1], 0.500000, 1.000000);
	TextDrawColor(CAMARA_Seg[1], -1);
	TextDrawSetOutline(CAMARA_Seg[1], 0);
	TextDrawSetProportional(CAMARA_Seg[1], 1);
	TextDrawSetShadow(CAMARA_Seg[1], 1);
	TextDrawUseBox(CAMARA_Seg[1], 1);
	TextDrawBoxColor(CAMARA_Seg[1], 255);
	TextDrawTextSize(CAMARA_Seg[1], -324.000000, 206.000000);

	CAMARA_Seg[2] = TextDrawCreate(640.000000, 449.000000, "ld_none:tvcorn");
	TextDrawBackgroundColor(CAMARA_Seg[2], 255);
	TextDrawFont(CAMARA_Seg[2], 4);
	TextDrawLetterSize(CAMARA_Seg[2], 0.500000, 1.000000);
	TextDrawColor(CAMARA_Seg[2], -1);
	TextDrawSetOutline(CAMARA_Seg[2], 0);
	TextDrawSetProportional(CAMARA_Seg[2], 1);
	TextDrawSetShadow(CAMARA_Seg[2], 1);
	TextDrawUseBox(CAMARA_Seg[2], 1);
	TextDrawBoxColor(CAMARA_Seg[2], 255);
	TextDrawTextSize(CAMARA_Seg[2], -324.000000, -258.000000);

	CAMARA_Seg[3] = TextDrawCreate(-2.000000, 451.000000, "ld_none:tvcorn");
	TextDrawBackgroundColor(CAMARA_Seg[3], 255);
	TextDrawFont(CAMARA_Seg[3], 4);
	TextDrawLetterSize(CAMARA_Seg[3], 0.500000, 1.000000);
	TextDrawColor(CAMARA_Seg[3], -1);
	TextDrawSetOutline(CAMARA_Seg[3], 0);
	TextDrawSetProportional(CAMARA_Seg[3], 1);
	TextDrawSetShadow(CAMARA_Seg[3], 1);
	TextDrawUseBox(CAMARA_Seg[3], 1);
	TextDrawBoxColor(CAMARA_Seg[3], 255);
	TextDrawTextSize(CAMARA_Seg[3], 344.000000, -276.000000);

	Registro[0] = TextDrawCreate(593.000000, 130.000000, "_");
	TextDrawBackgroundColor(Registro[0], 255);
	TextDrawFont(Registro[0], 1);
	TextDrawLetterSize(Registro[0], 0.500000, 5.099998);
	TextDrawColor(Registro[0], -1);
	TextDrawSetOutline(Registro[0], 0);
	TextDrawSetProportional(Registro[0], 1);
	TextDrawSetShadow(Registro[0], 1);
	TextDrawUseBox(Registro[0], 1);
	TextDrawBoxColor(Registro[0], 100);
	TextDrawTextSize(Registro[0], 440.000000, 10.000000);

	Registro[1] = TextDrawCreate(593.000000, 185.000000, "_");
	TextDrawBackgroundColor(Registro[1] , 255);
	TextDrawFont(Registro[1] , 1);
	TextDrawLetterSize(Registro[1] , 0.500000, 5.099998);
	TextDrawColor(Registro[1] , -1);
	TextDrawSetOutline(Registro[1], 0);
	TextDrawSetProportional(Registro[1] , 1);
	TextDrawSetShadow(Registro[1] , 1);
	TextDrawUseBox(Registro[1], 1);
	TextDrawBoxColor(Registro[1] , 100);
	TextDrawTextSize(Registro[1] , 440.000000, 10.000000);

	Registro[2] = TextDrawCreate(593.000000, 240.000000, "_");
	TextDrawBackgroundColor(Registro[2], 255);
	TextDrawFont(Registro[2], 1);
	TextDrawLetterSize(Registro[2], 0.500000, 5.099998);
	TextDrawColor(Registro[2], -1);
	TextDrawSetOutline(Registro[2], 0);
	TextDrawSetProportional(Registro[2], 1);
	TextDrawSetShadow(Registro[2], 1);
	TextDrawUseBox(Registro[2], 1);
	TextDrawBoxColor(Registro[2], 100);
	TextDrawTextSize(Registro[2], 440.000000, 10.000000);

	Registro[3] = TextDrawCreate(593.000000, 295.000000, "_");
	TextDrawBackgroundColor(Registro[3], 255);
	TextDrawFont(Registro[3], 1);
	TextDrawLetterSize(Registro[3], 0.500000, 5.099998);
	TextDrawColor(Registro[3], -1);
	TextDrawSetOutline(Registro[3], 0);
	TextDrawSetProportional(Registro[3], 1);
	TextDrawSetShadow(Registro[3], 1);
	TextDrawUseBox(Registro[3], 1);
	TextDrawBoxColor(Registro[3], 100);
	TextDrawTextSize(Registro[3], 440.000000, 10.000000);

	BOXTuto[0] = TextDrawCreate(650.000000, 0.000000, "_");
	TextDrawBackgroundColor(BOXTuto[0], 255);
	TextDrawFont(BOXTuto[0], 1);
	TextDrawLetterSize(BOXTuto[0], 0.500000, 11.799999);
	TextDrawColor(BOXTuto[0], -1);
	TextDrawSetOutline(BOXTuto[0], 0);
	TextDrawSetProportional(BOXTuto[0], 1);
	TextDrawSetShadow(BOXTuto[0], 1);
	TextDrawUseBox(BOXTuto[0], 1);
	TextDrawBoxColor(BOXTuto[0], 255);
	TextDrawTextSize(BOXTuto[0], -20.000000, 0.000000);

	BOXTuto[1] = TextDrawCreate(650.000000, 342.000000, "_");
	TextDrawBackgroundColor(BOXTuto[1], 255);
	TextDrawFont(BOXTuto[1], 1);
	TextDrawLetterSize(BOXTuto[1], 0.500000, 11.799999);
	TextDrawColor(BOXTuto[1], -1);
	TextDrawSetOutline(BOXTuto[1], 0);
	TextDrawSetProportional(BOXTuto[1], 1);
	TextDrawSetShadow(BOXTuto[1], 1);
	TextDrawUseBox(BOXTuto[1], 1);
	TextDrawBoxColor(BOXTuto[1], 255);
	TextDrawTextSize(BOXTuto[1], -20.000000, 0.000000);

	Registro[4] = TextDrawCreate(479.000000, 130.000000, "sexo~n~~n~~n~edad~n~~n~~n~pelea~n~~n~~n~estilo");
	TextDrawBackgroundColor(Registro[4], 255);
	TextDrawFont(Registro[4], 2);
	TextDrawLetterSize(Registro[4], 0.589999, 2.000000);
	TextDrawColor(Registro[4], -1);
	TextDrawSetOutline(Registro[4], 1);
	TextDrawSetProportional(Registro[4], 1);

	Fondo_Licencia = TextDrawCreate(268.000000, 185.000000, "ld_drv:nawtxt");
	TextDrawBackgroundColor(Fondo_Licencia, 255);
	TextDrawFont(Fondo_Licencia, 4);
	TextDrawLetterSize(Fondo_Licencia, 2.200000, 18.000000);
	TextDrawColor(Fondo_Licencia, -1);
	TextDrawSetOutline(Fondo_Licencia, 0);
	TextDrawSetProportional(Fondo_Licencia, 1);
	TextDrawSetShadow(Fondo_Licencia, 1);
	TextDrawUseBox(Fondo_Licencia, 1);
	TextDrawBoxColor(Fondo_Licencia, 255);
	TextDrawTextSize(Fondo_Licencia, 139.000000, 119.000000);
	TextDrawSetSelectable(Fondo_Licencia, 0);

	CEL.LoadTextDraws(); //OP:CEL
	PC.LoadTextDraws(); //OP:PC

	//SISTEMA DE BANCO
	//Normales (BOXS)
	Cajero[0] = TextDrawCreate(0.000000, 0.000000, "_");
	TextDrawBackgroundColor(Cajero[0], 255);
	TextDrawFont(Cajero[0], 1);
	TextDrawLetterSize(Cajero[0], 0.500000, 54.000000);
	TextDrawColor(Cajero[0], -1);
	TextDrawSetOutline(Cajero[0], 0);
	TextDrawSetProportional(Cajero[0], 1);
	TextDrawSetShadow(Cajero[0], 1);
	TextDrawUseBox(Cajero[0], 1);
	TextDrawBoxColor(Cajero[0], 56575);
	TextDrawTextSize(Cajero[0], 650.000000, 0.000000);

	Cajero[1] = TextDrawCreate(30.000000, 154.000000, "_");
	TextDrawBackgroundColor(Cajero[1], 255);
	TextDrawFont(Cajero[1], 2);
	TextDrawLetterSize(Cajero[1], 0.820000, 26.000000);
	TextDrawColor(Cajero[1], -1);
	TextDrawSetOutline(Cajero[1], 0);
	TextDrawSetProportional(Cajero[1], 1);
	TextDrawSetShadow(Cajero[1], 1);
	TextDrawUseBox(Cajero[1], 1);
	TextDrawBoxColor(Cajero[1], 255);
	TextDrawTextSize(Cajero[1], 620.000000, 50.000000);

	Cajero[2] = TextDrawCreate(190.000000, 159.000000, "operaciones disponibles:");
	TextDrawBackgroundColor(Cajero[2], 255);
	TextDrawFont(Cajero[2], 2);
	TextDrawLetterSize(Cajero[2], 0.419999, 3.000000);
	TextDrawColor(Cajero[2], -1);
	TextDrawSetOutline(Cajero[2], 0);
	TextDrawSetProportional(Cajero[2], 1);
	TextDrawSetShadow(Cajero[2], 1);

	//Cámaras de velocidad
	flash = TextDrawCreate(-20.000000,2.000000,"|");
	TextDrawUseBox(flash,1);
	TextDrawBoxColor(flash,0xffffff66);
	TextDrawTextSize(flash,660.000000,22.000000);
	TextDrawAlignment(flash,0);
	TextDrawBackgroundColor(flash,0x000000ff);
	TextDrawFont(flash,3);
	TextDrawLetterSize(flash,1.000000,52.200000);
	TextDrawColor(flash,0xffffffff);
	TextDrawSetOutline(flash,1);
	TextDrawSetProportional(flash,1);
	TextDrawSetShadow(flash,1);

	//Hora
    TDHora = TextDrawCreate(260.000000, 427.000000, "~b~~h~~h~_");
	TextDrawBackgroundColor(TDHora, 255);
	TextDrawFont(TDHora, 3);
	TextDrawLetterSize(TDHora, 0.700000, 2.000000);
	TextDrawColor(TDHora, -1);
	TextDrawSetOutline(TDHora, 1);
	TextDrawSetProportional(TDHora, 1);

	//Inventario
	TDManoHUD = TextDrawCreate(492.080200, 427.392028, "hud:fist");
	TextDrawLetterSize(TDManoHUD, 0.000000, 0.000000);
	TextDrawTextSize(TDManoHUD, 22.399963, 17.173339);
	TextDrawAlignment(TDManoHUD, 1);
	TextDrawColor(TDManoHUD, -1);
	TextDrawSetShadow(TDManoHUD, 0);
	TextDrawSetOutline(TDManoHUD, 0);
	TextDrawFont(TDManoHUD, 4);

	//CLICKEABLES:

	Registro[5] = TextDrawCreate(472.000000, 357.000000, "TERMINAR");
	TextDrawBackgroundColor(Registro[5], 255);
	TextDrawFont(Registro[5], 1);
	TextDrawLetterSize(Registro[5], 0.559999, 2.699999);
	TextDrawColor(Registro[5], -1);
	TextDrawSetOutline(Registro[5], 0);
	TextDrawSetProportional(Registro[5], 1);
	TextDrawSetShadow(Registro[5], 1);
	TextDrawUseBox(Registro[5], 1);
	TextDrawBoxColor(Registro[5], 100);
	TextDrawTextSize(Registro[5], 560.000000, 30.000000);

	//Sexo
	FlechaSexo[0] = TextDrawCreate(420.000000, 135.000000, "<");
	TextDrawBackgroundColor(FlechaSexo[0], 255);
	TextDrawFont(FlechaSexo[0], 1);
	TextDrawLetterSize(FlechaSexo[0], 1.069998, 4.199998);
	TextDrawColor(FlechaSexo[0], -1);
	TextDrawSetOutline(FlechaSexo[0], 1);
	TextDrawSetProportional(FlechaSexo[0], 1);
	TextDrawUseBox(FlechaSexo[0], 1);
	TextDrawBoxColor(FlechaSexo[0], 0);
	TextDrawTextSize(FlechaSexo[0],  442.000000, 30.000000);

	FlechaSexo[1] = TextDrawCreate(587.000000, 135.000000, ">");
	TextDrawBackgroundColor(FlechaSexo[1], 255);
	TextDrawFont(FlechaSexo[1], 1);
	TextDrawLetterSize(FlechaSexo[1], 0.899999, 4.299997);
	TextDrawColor(FlechaSexo[1], -1);
	TextDrawSetOutline(FlechaSexo[1], 1);
	TextDrawSetProportional(FlechaSexo[1], 1);
	TextDrawUseBox(FlechaSexo[1], 1);
	TextDrawBoxColor(FlechaSexo[1], 0);
	TextDrawTextSize(FlechaSexo[1], 612.000000, 30.000000);

	//Edad
	FlechaEdad[0] = TextDrawCreate(421.000000, 188.000000, "<");
	TextDrawBackgroundColor(FlechaEdad[0], 255);
	TextDrawFont(FlechaEdad[0], 1);
	TextDrawLetterSize(FlechaEdad[0], 1.019999, 4.400000);
	TextDrawColor(FlechaEdad[0], -1);
	TextDrawSetOutline(FlechaEdad[0], 1);
	TextDrawSetProportional(FlechaEdad[0], 1);
	TextDrawUseBox(FlechaEdad[0], 1);
	TextDrawBoxColor(FlechaEdad[0], 0);
	TextDrawTextSize(FlechaEdad[0],442.000000, 30.000000);

	FlechaEdad[1] = TextDrawCreate(586.000000, 187.000000, ">");
	TextDrawBackgroundColor(FlechaEdad[1], 255);
	TextDrawFont(FlechaEdad[1], 1);
	TextDrawLetterSize(FlechaEdad[1], 0.959999, 4.299999);
	TextDrawColor(FlechaEdad[1], -1);
	TextDrawSetOutline(FlechaEdad[1], 1);
	TextDrawSetProportional(FlechaEdad[1], 1);
	TextDrawUseBox(FlechaEdad[1], 1);
	TextDrawBoxColor(FlechaEdad[1], 0);
	TextDrawTextSize(FlechaEdad[1], 612.000000, 30.000000);

	//Pelea
	FlechaPelea[0] = TextDrawCreate(420.000000, 241.000000, "<");
	TextDrawBackgroundColor(FlechaPelea[0], 255);
	TextDrawFont(FlechaPelea[0], 1);
	TextDrawLetterSize(FlechaPelea[0], 1.089999, 4.500000);
	TextDrawColor(FlechaPelea[0], -1);
	TextDrawSetOutline(FlechaPelea[0], 1);
	TextDrawSetProportional(FlechaPelea[0], 1);
	TextDrawUseBox(FlechaPelea[0], 1);
	TextDrawBoxColor(FlechaPelea[0], 0);
	TextDrawTextSize(FlechaPelea[0],442.000000, 30.000000);

	FlechaPelea[1] = TextDrawCreate(587.000000, 244.000000, ">");
	TextDrawBackgroundColor(FlechaPelea[1], 255);
	TextDrawFont(FlechaPelea[1], 1);
	TextDrawLetterSize(FlechaPelea[1], 0.920000, 4.199999);
	TextDrawColor(FlechaPelea[1], -1);
	TextDrawSetOutline(FlechaPelea[1], 1);
	TextDrawSetProportional(FlechaPelea[1], 1);
	TextDrawUseBox(FlechaPelea[1], 1);
	TextDrawBoxColor(FlechaPelea[1], 0);
	TextDrawTextSize(FlechaPelea[1],612.000000, 30.000000);

	//Estilo
	FlechaEstilo[0] = TextDrawCreate(423.000000, 296.000000, "<");
	TextDrawBackgroundColor(FlechaEstilo[0], 255);
	TextDrawFont(FlechaEstilo[0], 1);
	TextDrawLetterSize(FlechaEstilo[0], 0.980000, 4.700000);
	TextDrawColor(FlechaEstilo[0], -1);
	TextDrawSetOutline(FlechaEstilo[0], 1);
	TextDrawSetProportional(FlechaEstilo[0], 1);
	TextDrawUseBox(FlechaEstilo[0], 1);
	TextDrawBoxColor(FlechaEstilo[0], 0);
	TextDrawTextSize(FlechaEstilo[0], 442.000000, 30.000000);

	FlechaEstilo[1] = TextDrawCreate(587.000000, 298.000000, ">");
	TextDrawBackgroundColor(FlechaEstilo[1], 255);
	TextDrawFont(FlechaEstilo[1], 1);
	TextDrawLetterSize(FlechaEstilo[1], 0.980000, 4.399999);
	TextDrawColor(FlechaEstilo[1], -1);
	TextDrawSetOutline(FlechaEstilo[1], 1);
	TextDrawSetProportional(FlechaEstilo[1], 1);
	TextDrawUseBox(FlechaEstilo[1], 1);
	TextDrawBoxColor(FlechaEstilo[1], 0);
	TextDrawTextSize(FlechaEstilo[1], 612.000000, 30.000000);

	//Binco
	FlechaCRopa[0] = TextDrawCreate(160.000000, 190.000000, "~<~");
	TextDrawBackgroundColor(FlechaCRopa[0], 255);
	TextDrawFont(FlechaCRopa[0], 1);
	TextDrawLetterSize(FlechaCRopa[0], 1.800000, 4.400000);
	TextDrawColor(FlechaCRopa[0], -1);
	TextDrawSetOutline(FlechaCRopa[0], 0);
	TextDrawSetProportional(FlechaCRopa[0], 1);
	TextDrawSetShadow(FlechaCRopa[0], 1);
	TextDrawBoxColor(FlechaCRopa[0], 255);
	TextDrawTextSize(FlechaCRopa[0], 200.000000, 80);

	FlechaCRopa[1] = TextDrawCreate(427.000000, 193.000000, "~>~");
	TextDrawBackgroundColor(FlechaCRopa[1], 255);
	TextDrawFont(FlechaCRopa[1], 1);
	TextDrawLetterSize(FlechaCRopa[1], 1.800000, 4.400000);
	TextDrawColor(FlechaCRopa[1], -1);
	TextDrawSetOutline(FlechaCRopa[1], 1);
	TextDrawSetProportional(FlechaCRopa[1], 1);
	TextDrawBoxColor(FlechaCRopa[1], 255);
	TextDrawTextSize(FlechaCRopa[1], 463.000000,80);

	CRopa = TextDrawCreate(400.000000, 340.000000, "comprar");
	TextDrawBackgroundColor(CRopa, 255);
	TextDrawFont(CRopa, 3);
	TextDrawLetterSize(CRopa, 0.500000, 1.600000);
	TextDrawColor(CRopa, -1);
	TextDrawSetOutline(CRopa, 1);
	TextDrawSetProportional(CRopa, 1);
	TextDrawUseBox(CRopa, 1);
	TextDrawBoxColor(CRopa, 2105376125);
	TextDrawTextSize(CRopa, 474.000000, 30);

	SCRopa = TextDrawCreate(180.000000, 340.000000, "salir");
	TextDrawBackgroundColor(SCRopa, 255);
	TextDrawFont(SCRopa, 3);
	TextDrawLetterSize(SCRopa, 0.500000, 1.600000);
	TextDrawColor(SCRopa, -1);
	TextDrawSetOutline(SCRopa, 1);
	TextDrawSetProportional(SCRopa, 1);
	TextDrawUseBox(SCRopa, 1);
	TextDrawBoxColor(SCRopa, 2105376125);
	TextDrawTextSize(SCRopa, 222.000000, 30);

	PCRopa = TextDrawCreate(420.000000, 358.000000, "~g~$400");
	TextDrawBackgroundColor(PCRopa, 255);
	TextDrawFont(PCRopa, 3);
	TextDrawLetterSize(PCRopa, 0.500000, 1.600000);
	TextDrawColor(PCRopa, -1);
	TextDrawSetOutline(PCRopa, 1);
	TextDrawSetProportional(PCRopa, 1);
	TextDrawUseBox(PCRopa, 1);
	TextDrawBoxColor(PCRopa, 2105376125);
	TextDrawTextSize(PCRopa, 461.000000, 10);

	//BANCO

	Operaciones[0] = TextDrawCreate(60.000000, 210.000000, "DEPOSITAR");
	TextDrawBackgroundColor(Operaciones[0], 255);
	TextDrawFont(Operaciones[0], 2);
	TextDrawLetterSize(Operaciones[0], 0.500000, 3.799999);
	TextDrawColor(Operaciones[0], -1);
	TextDrawSetOutline(Operaciones[0], 1);
	TextDrawSetProportional(Operaciones[0], 1);
	TextDrawUseBox(Operaciones[0], 1);
	TextDrawBoxColor(Operaciones[0], 44287);
	TextDrawTextSize(Operaciones[0], 178.000000, 40.000000);

	Operaciones[1] = TextDrawCreate(247.000000, 210.000000, "retirar");
	TextDrawBackgroundColor(Operaciones[1], 255);
	TextDrawFont(Operaciones[1], 2);
	TextDrawLetterSize(Operaciones[1], 0.780000, 3.799999);
	TextDrawColor(Operaciones[1], -1);
	TextDrawSetOutline(Operaciones[1], 1);
	TextDrawSetProportional(Operaciones[1], 1);
	TextDrawUseBox(Operaciones[1], 1);
	TextDrawBoxColor(Operaciones[1], 44287);
	TextDrawTextSize(Operaciones[1], 381.000000, 40.000000);

	Operaciones[2] = TextDrawCreate(450.000000, 210.000000, "transferir");
	TextDrawBackgroundColor(Operaciones[2], 255);
	TextDrawFont(Operaciones[2], 2);
	TextDrawLetterSize(Operaciones[2], 0.540000, 3.799999);
	TextDrawColor(Operaciones[2], -1);
	TextDrawSetOutline(Operaciones[2], 1);
	TextDrawSetProportional(Operaciones[2], 1);
	TextDrawUseBox(Operaciones[2], 1);
	TextDrawBoxColor(Operaciones[2], 44287);
	TextDrawTextSize(Operaciones[2], 587.000000, 40.000000);

	SCajero = TextDrawCreate(531.000000, 52.000000, "~b~~h~~h~salir");
	TextDrawBackgroundColor(SCajero, 255);
	TextDrawFont(SCajero, 2);
	TextDrawLetterSize(SCajero, 0.600000, 1.799999);
	TextDrawColor(SCajero, -1);
	TextDrawSetOutline(SCajero, 1);
	TextDrawSetProportional(SCajero, 1);
	TextDrawUseBox(SCajero, 1);
	TextDrawBoxColor(SCajero, -131);
	TextDrawTextSize(SCajero, 605.000000, 30);

   	Vendado = TextDrawCreate(0.000000, 0.000000, "_");
	TextDrawBackgroundColor(Vendado, 255);
	TextDrawFont(Vendado, 1);
	TextDrawLetterSize(Vendado, 0.500000, 54.000000);
	TextDrawColor(Vendado, -1);
	TextDrawSetOutline(Vendado, 0);
	TextDrawSetProportional(Vendado, 1);
	TextDrawSetShadow(Vendado, 1);
	TextDrawUseBox(Vendado, 1);
	TextDrawBoxColor(Vendado, 255);
	TextDrawTextSize(Vendado, 650.000000, 0.000000);

   	Cargando = TextDrawCreate(460.000000, 380.800048, "Cargando...");
	TextDrawLetterSize(Cargando, 0.505999, 2.608000);
	TextDrawAlignment(Cargando, 1);
	TextDrawColor(Cargando, -1378294017);
	TextDrawSetShadow(Cargando, 0);
	TextDrawSetOutline(Cargando, -2);
	TextDrawBackgroundColor(Cargando, 51);
	TextDrawFont(Cargando, 2);
	TextDrawSetProportional(Cargando, 1);

	//SISTEMA DE CUENTA
	CuentaBox = TextDrawCreate(60.000000, 291.000000, "_");
	TextDrawBackgroundColor(CuentaBox, 255);
	TextDrawFont(CuentaBox, 1);
	TextDrawLetterSize(CuentaBox, 0.600000, 3.700001);
	TextDrawColor(CuentaBox, -1);
	TextDrawSetOutline(CuentaBox, 0);
	TextDrawSetProportional(CuentaBox, 1);
	TextDrawSetShadow(CuentaBox, 1);
	TextDrawUseBox(CuentaBox, 1);
	TextDrawBoxColor(CuentaBox, -1768515946);
	TextDrawTextSize(CuentaBox, 560.000000, 0.000000);

	CuentaGen = TextDrawCreate(167.000000, 300.000000, "general");
	TextDrawBackgroundColor(CuentaGen, 255);
	TextDrawFont(CuentaGen, 3);
	TextDrawLetterSize(CuentaGen, 0.520000, 1.800000);
	TextDrawColor(CuentaGen, 2052048639);
	TextDrawSetOutline(CuentaGen, 1);
	TextDrawSetProportional(CuentaGen, 1);
	TextDrawTextSize(CuentaGen, 236.000000, 40.000000);

	CuentaCas = TextDrawCreate(270.000000, 300.000000, "casas");
	TextDrawBackgroundColor(CuentaCas, 255);
	TextDrawFont(CuentaCas, 3);
	TextDrawLetterSize(CuentaCas, 0.520000, 1.800000);
	TextDrawColor(CuentaCas, 2052048639);
	TextDrawSetOutline(CuentaCas, 1);
	TextDrawSetProportional(CuentaCas, 1);
	TextDrawTextSize(CuentaCas, 323.000000, 40.000000);

	CuentaNeg = TextDrawCreate(360.000000, 300.000000, "negocios");
	TextDrawBackgroundColor(CuentaNeg, 255);
	TextDrawFont(CuentaNeg, 3);
	TextDrawLetterSize(CuentaNeg, 0.520000, 1.800000);
	TextDrawColor(CuentaNeg, 2052048639);
	TextDrawSetOutline(CuentaNeg, 1);
	TextDrawSetProportional(CuentaNeg, 1);
	TextDrawTextSize(CuentaNeg, 436.000000, 40.000000);

	CuentaVeh = TextDrawCreate(458.000000, 300.000000, "vehiculos");
	TextDrawBackgroundColor(CuentaVeh, 255);
	TextDrawFont(CuentaVeh, 3);
	TextDrawLetterSize(CuentaVeh, 0.520000, 1.800000);
	TextDrawColor(CuentaVeh, 2052048639);
	TextDrawSetOutline(CuentaVeh, 1);
	TextDrawSetProportional(CuentaVeh, 1);
	TextDrawTextSize(CuentaVeh, 544.000000, 40.000000);

	CuentaArmas = TextDrawCreate(77.000000, 300.000000, "INV.");
	TextDrawBackgroundColor(CuentaArmas, 255);
	TextDrawFont(CuentaArmas, 3);
	TextDrawLetterSize(CuentaArmas, 0.519999, 1.799999);
	TextDrawColor(CuentaArmas, 2052048639);
	TextDrawSetOutline(CuentaArmas, 1);
	TextDrawSetProportional(CuentaArmas, 1);
	TextDrawBoxColor(CuentaArmas, 255);
	TextDrawTextSize(CuentaArmas, 136.000000, 40.000000);

	//Clickeables:
	TextDrawSetSelectable(FlechaSexo[0],1);
	TextDrawSetSelectable(FlechaSexo[1],1);
	TextDrawSetSelectable(FlechaEdad[0],1);
	TextDrawSetSelectable(FlechaEdad[1],1);
	TextDrawSetSelectable(FlechaPelea[0],1);
	TextDrawSetSelectable(FlechaPelea[1],1);
	TextDrawSetSelectable(FlechaEstilo[0],1);
	TextDrawSetSelectable(FlechaEstilo[1],1);
	TextDrawSetSelectable(Registro[5],1);
	TextDrawSetSelectable(FlechaCRopa[0],1);
	TextDrawSetSelectable(FlechaCRopa[1],1);
	TextDrawSetSelectable(CRopa,1);
	TextDrawSetSelectable(SCRopa,1);
	TextDrawSetSelectable(Operaciones[0],1);
	TextDrawSetSelectable(Operaciones[1],1);
	TextDrawSetSelectable(Operaciones[2],1);
	TextDrawSetSelectable(SCajero,1);
	TextDrawSetSelectable(CuentaGen,1);
	TextDrawSetSelectable(CuentaCas,1);
	TextDrawSetSelectable(CuentaNeg,1);
	TextDrawSetSelectable(CuentaVeh,1);
	TextDrawSetSelectable(CuentaArmas,1);
	TextDrawSetSelectable(TDTV[4], 1);
	//TextDrawSetSelectable(TDTV[7], 1);
	//TextDrawSetSelectable(TDTV[8], 1);
	return 1;
}


stock CargarPText(i)
{
	//Banco
	Cuenta_Balance[0][i] = CreatePlayerTextDraw(i,398.000000, 10.000000, "Cuenta: ~r~DESCONOCIDO");
	PlayerTextDrawBackgroundColor(i,Cuenta_Balance[0][i], 255);
	PlayerTextDrawFont(i,Cuenta_Balance[0][i], 1);
	PlayerTextDrawLetterSize(i,Cuenta_Balance[0][i],0.509999, 2.800000);
	PlayerTextDrawColor(i,Cuenta_Balance[0][i], -1);
	PlayerTextDrawSetOutline(i,Cuenta_Balance[0][i], 0);
	PlayerTextDrawSetProportional(i,Cuenta_Balance[0][i], 1);
	PlayerTextDrawSetShadow(i,Cuenta_Balance[0][i], 1);

	Cuenta_Balance[1][i] = CreatePlayerTextDraw(i,130.000000, 334.000000, "balance: ~g~$0");
	PlayerTextDrawBackgroundColor(i,Cuenta_Balance[1][i], 255);
	PlayerTextDrawFont(i,Cuenta_Balance[1][i], 2);
	PlayerTextDrawLetterSize(i,Cuenta_Balance[1][i], 0.820000, 3.000000);
	PlayerTextDrawColor(i,Cuenta_Balance[1][i], -1);
	PlayerTextDrawSetOutline(i,Cuenta_Balance[1][i], 0);
	PlayerTextDrawSetProportional(i,Cuenta_Balance[1][i], 1);
	PlayerTextDrawSetShadow(i,Cuenta_Balance[1][i], 1);
	return 1;
}

stock CargarLlaves(playerid)
{
	new
	    Path[20+MAX_PLAYER_NAME],
		VehID_K;

	A_Format(Path, "Vehiculos/Llaves/%s.ini", pName(playerid));

	if(!fexist(Path)) return 0;

	new
		File:Fileh = fopen(Path, io_read),
		str[5];

	while(fread(Fileh, str))
	{
	    sscanf(str, "i", VehID_K);
	    Bit_Set(Llave_veh[playerid], VehID_K, true);
	}

	fclose(Fileh);
	return 1;
}

stock GuardarLlaves(playerid)
{
	new
	    Path[23+MAX_PLAYER_NAME];

	A_Format(Path, "Vehiculos/Llaves/%s.ini", pName(playerid));

	new
		File:Fileh = fopen(Path, io_write),
		str[5];

	foreach(veh, i)
	{
		if(Bit_Get(Llave_veh[playerid], i))
		{
		    A_Format(str,"%d\n", i);
			fwrite(Fileh, str);
		}
	}

	fclose(Fileh);

	return 1;
}


stock DarLlavesCuenta(account[], fac)
{
	if(!fac)
	    return 0;

	new
	    Path[23+MAX_PLAYER_NAME];

	A_Format(Path, "Vehiculos/Llaves/%s.ini", account);

	new
		File:Fileh = fopen(Path, io_write),
		str[5];

	foreach(veh, i)
	{
		if(veh_getFaction(i) == fac)
		{
		    A_Format(str,"%d\n", i);
			fwrite(Fileh, str);
		}
	}

	fclose(Fileh);
	return 1;
}

stock SacarLlavesCuenta(account[])
{
	new
	    Path[23+MAX_PLAYER_NAME];

	A_Format(Path, "Vehiculos/Llaves/%s.ini", account);

	fremove(Path);
	return 1;
}

stock MensajeTD(playerid,string[],tiempo)
{
	if(MsgText[playerid] == PlayerText:INVALID_TEXT_DRAW)
	{
		MsgText[playerid] = CreatePlayerTextDraw(playerid,382.079, 340.000000, string);
		PlayerTextDrawAlignment(playerid,MsgText[playerid], 2);
		PlayerTextDrawBackgroundColor(playerid,MsgText[playerid], 255);
		PlayerTextDrawFont(playerid,MsgText[playerid], 1);
		PlayerTextDrawLetterSize(playerid,MsgText[playerid], 0.430000, 1.999999);
		PlayerTextDrawColor(playerid,MsgText[playerid], -1);
		PlayerTextDrawSetOutline(playerid,MsgText[playerid], 0);
		PlayerTextDrawSetProportional(playerid,MsgText[playerid], 1);
		PlayerTextDrawSetShadow(playerid,MsgText[playerid], 2);
		PlayerTextDrawUseBox(playerid, MsgText[playerid], true);
		PlayerTextDrawBoxColor(playerid, MsgText[playerid], 1);
		PlayerTextDrawTextSize(playerid, MsgText[playerid], 360.0, 460.0);

		PlayerTextDrawShow(playerid, MsgText[playerid]);
		SetTimerEx("EsconderMsg",tiempo,0,"d",playerid);
	}
	else
	{
	    PlayerTextDrawHide(playerid, MsgText[playerid]);
	    PlayerTextDrawSetString(playerid, MsgText[playerid], string);
		SetTimerEx("ShowTD_ERROR",100,0,"d",playerid);
		SetTimerEx("EsconderMsg",tiempo+100,0,"d",playerid);
	}
	return 1;
}

CALLBACK: ShowTD_ERROR(playerid)
{
	PlayerTextDrawShow(playerid, MsgText[playerid]);
}

stock Error(playerid, error[])
{
	return MensajeTD(playerid, _TD(error) , strlen(error) * 80);
}

CALLBACK: EsconderMsg(playerid)
{
	if(MsgText[playerid] != PlayerText:INVALID_TEXT_DRAW)
	{
		PlayerTextDrawDestroy(playerid,MsgText[playerid]);
		MsgText[playerid] = PlayerText:INVALID_TEXT_DRAW;
		return 1;
	}
	return 0;
}

OnPlayerFinishTut(playerid)
{
	SetPlayerInterior(playerid, 0);
	CamaraAleatoria(playerid);

    new
		SDialog[652];

    strcat(SDialog,""#CBLANCO"Ya hemos terminado de configurar tu personaje. Para poder finalizar el registro, y jugar correctamente\n");
	strcat(SDialog,""#CBLANCO"en el servidor, tendrás que hacer un Test de rol, para demostrar sus conocimientos de RolePlay. Si sabe\n");
    strcat(SDialog,""#CBLANCO"rolear,y tiene experiencia en servidores RolePlay, puede saltar el tutorial y pasara directamente al test\n");
    strcat(SDialog,""#CBLANCO"de rol, no obstante si no sabe rolear, vease el tutorial, y luego de ver el tutorial se le hara el test.\n\n");
    strcat(SDialog,""#CINFO"\t¿Qué desea hacer?");
    Dialog(playerid, dSabeReglas ,DIALOG_STYLE_MSGBOX,""#CNARANJA"Información - test de rol",SDialog,"Ver reglas","Saltearlas");

	LimpiarPantalla(playerid, 10);
	return 1;
}

CALLBACK: MEANDO(playerid)
{
	if(!IsPlayerConnected(playerid)) return 1;

	if(InfoJugador[playerid][jSexo] == 1)
	{
		if(!(GetPlayerSpecialAction(playerid) & SPECIAL_ACTION_PISSING)) return 1;
	}

	if(InfoJugador[playerid][jOrina] > 5)
	{
		InfoJugador[playerid][jOrina] -= 5.0;
		SetTimerEx("MEANDO",1000,false,"i",playerid);
		GameTextForPlayer(playerid,"~y~meando", 1500, 4);
	}
	else
	{
	    Mensaje(playerid,-1,"Terminaste. Para dejar de mear, presiona "#CINFO"[F] o [ENTER]");
	    InfoJugador[playerid][jOrina] = 0.0;
	    ToggleOrina (playerid, false);
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	MostrarNecesidadesEx(playerid);
	return 1;
}

CALLBACK: DORMIR(playerid)
{
	if (!IsPlayerConnected (playerid))
		return 1;
		
	if (!(PlayerBools [playerid] & e_DURMIENDO))
		return 1;

	if (InfoJugador [playerid][jCansancio] < 100)
	{
	    InfoJugador [playerid][jCansancio] += 1.0;
		SetTimerEx( "DORMIR", 2000, false, "i", playerid);
	}
	else
	{
	    InfoJugador [playerid][jCansancio] = 100.0;
	    Mensaje(playerid, -1, "Te despertaste, tu estado actual es bueno y te sientes descansado.");
		Despertarse (playerid);
	}
	MostrarNecesidadesEx(playerid);
	return 1;
}

stock Despertarse (playerid)
{
	if (!IsPlayerInAnyVehicle (playerid))
	{
		ApplyAnimation (playerid, "SUNBATHE", "Lay_Bac_out", 4.0, 0, 0, 0, 0, 0);
	}
 	PlayerBools [playerid] &= ~e_DURMIENDO;
	TextDrawHideForPlayer (playerid, Vendado);
 	Descongelar (playerid);
	return 1;
}

stock Float:frandom (Float:max, Float:min = 0.0, dp = 4) // by: Y_Less
{
    new
        Float:mul = floatpower(10.0, dp),
        imin = floatround(min * mul),
        imax = floatround(max * mul);

    return float(random(imax - imin) + imin) / mul;
}

public OnGameModeExit()
{
	//CloseAndSaveGameMode();
	return 1;
}


CALLBACK: CloseAndSaveGameMode()
{
	//Streamer
	DestroyAllDynamicMapIcons();
	DestroyAllDynamic3DTextLabels();
	DestroyAllDynamicAreas();
	DestroyAllDynamicObjects();
	DestroyAllDynamicPickups();
	DestroyAllDynamicCPs();
	DestroyAllDynamicRaceCPs();

	//SA:MP
	for(new a; a < MAX_OBJECTS; a++)
	{
	    DestroyObject(a);
	}

	for(new a; a < MAX_TEXT_DRAWS; a++)
    {
		TextDrawDestroy(Text:a);
	}

	for(new a; a < MAX_GANG_ZONES; a++)
	{
	    GangZoneDestroy(a);
	}


	for(new a; a < MAX_3DTEXT_GLOBAL; a++)
	{
		Delete3DTextLabel(Text3D:a);
	}

	for(new a; a < MAX_PICKUPS; a++)
	{
	    DestroyPickup(a);
	}

	//PLAYER
	Loop(i,MAX_PLAYERS,0)
	{
	    for(new a; a < MAX_PLAYER_TEXT_DRAWS; a++)
	    {
	        PlayerTextDrawDestroy(i, PlayerText:a);
		}
		for(new a; a < MAX_OBJECTS; a++)
		{
		    DestroyPlayerObject(i, a);
		}
		Kick(i);
	}
	return 1;
}

public OnQueryError(errorid, error[], callback[], query[], connectionHandle)
{
	if (errorid == 1060) // Duplicate column bla
	    return 1;

	new
	    str [1000],
		File: Arch = fopen ("mysql_ERR.txt", io_append);

	switch (errorid)
	{
	    case 2003: // no conectó al server
	    {
			Loop (i, 5, 0)
			{
			    MensajeAdmin (C_ROJO, "[ATENCIÓN - ERROR EN LA DB 'CRV4'] "#CBLANCO"No se puede establecer la conexión MySQL con la base de datos (ERR 20003) ..", Moderador);
			    MensajeAdmin (C_ROJO, "TODAS CONSULTAS ENVIADAS FUERON RECHAZADAS - ABORTANDO CONEXIÓN DEL SERVIDOR ..", Moderador);
			}

			foreach (Player, i)
			{
			    if (InfoJugador [i][jAdmin] < Moderador)
			    {
			        LimpiarPantalla (i, 9);
				}
			}
			MensajeTodos (C_ROJO, "El servidor entró en un modo de mantenimiento. En tiempo indefinido estaremos de vuelta.");
			foreach (Player, i)
			{
			    if (InfoJugador [i][jAdmin] < Dueno)
			    {
			        DelayKick (i);
				}
			}
			SendRconCommand ("hostname Ciudad Real RP V4 - ESTAMOS EN MANTENIMIENTO.");
			SendRconCommand ("password crrp");
			printf ("CERRANDO SERVIDOR - SE PERDIO LA CONEXIÓN A LA BASE DE DATOS MYSQL.");
		}
	    case ER_DBACCESS_DENIED_ERROR:
	    {
	        fwrite (Arch, "===================== DBACCESS DENIED ===================\r\n");
			A_Format (str, "Error: %s\r\n", error);
	        fwrite (Arch, str);
			A_Format (str, "Query: %s\r\n", query);
	        fwrite (Arch, str);
			A_Format (str, "Callback: %s\r\n", callback);
	        fwrite (Arch, str);
			printf ("\nMYSQL - \tDBACCESS DENIED ERROR\nError: %s\nQuery: %s\nCallback: %s\n", error, query, callback);
		}
	    case ER_ACCESS_DENIED_ERROR:
	    {
	        fwrite (Arch, "===================== ACCESS DENIED ===================\r\n");
			A_Format (str, "Error: %s\r\n", error);
	        fwrite (Arch, str);
			A_Format (str, "Query: %s\r\n", query);
	        fwrite (Arch, str);
			A_Format (str, "Callback: %s\r\n", callback);
	        fwrite (Arch, str);
			printf ("\nMYSQL - \tACCESS DENIED ERROR\nError: %s\nQuery: %s\nCallback: %s\n", error, query, callback);
		}
	    case ER_UNKNOWN_TABLE:
	    {
	        fwrite (Arch, "===================== UNKNOWN TABLE ===================\r\n");
			A_Format (str, "Error: %s\r\n", error);
	        fwrite (Arch, str);
			A_Format (str, "Query: %s\r\n", query);
	        fwrite (Arch, str);
			A_Format (str, "Callback: %s\r\n", callback);
	        fwrite (Arch, str);
			printf ("\nMYSQL - \tUNKNOWN TABLE ERROR\nError: %s\nQuery: %s\nCallback: %s\n", error, query, callback);
		}
	    case ER_SYNTAX_ERROR:
	    {
	        fwrite (Arch, "===================== SYNTAX ERROR ===================\r\n");
			A_Format (str, "Error: %s\r\n", error);
	        fwrite (Arch, str);
			A_Format (str, "Query: %s\r\n", query);
	        fwrite (Arch, str);
			A_Format (str, "Callback: %s\r\n", callback);
	        fwrite (Arch, str);
			printf ("\nMYSQL - \tSYNTAX ERROR\nError: %s\nQuery: %s\nCallback: %s\n", error, query, callback);
		}
		default:
		{
	        A_Format (str, "===================== ERRORID: %d ===================\r\n", errorid);
	        fwrite (Arch, str);
			A_Format (str, "Error: %s\r\n", error);
	        fwrite (Arch, str);
			A_Format (str, "Query: %s\r\n", query);
	        fwrite (Arch, str);
			A_Format (str, "Callback: %s\r\n", callback);
	        fwrite (Arch, str);
			printf ("\nMYSQL - \tERRORID: %d\nError: %s\nQuery: %s\nCallback: %s\n", errorid, error, query, callback);
		}
	}
	fclose (Arch);
	return 1;
}

#define MySQL_GetInt(%0,%1,%2) 		cache_get_field_content(%0, %1, dest_int); 	sscanf (dest_int, "d", %2)
#define MySQL_GetFloat(%0,%1,%2) 	cache_get_field_content(%0, %1, dest_float); sscanf (dest_float, "f", %2)
#define MySQL_GetString(%0,%1,%2) 	cache_get_field_content(%0, %1, dest_str); 	sscanf (dest_str, "s[125]", %2)
#define MySQL_GetBool               MySQL_GetInt

CALLBACK: OnQueryFinish (playerid, queryid)
{
	// Speed test & debug

	/*
	printf ("\n===================== OnQueryFinish ============================\n");
	
	new
		string__[512],
		time_ms = cache_get_query_exec_time(UNIT_MILLISECONDS),
		time_mic = cache_get_query_exec_time(UNIT_MICROSECONDS);
		
	cache_get_query_string (string__);

	printf ("Query: %s\n", string__);
	printf ("Time: %dms (%dmic)\n", time_ms, time_mic);

	printf ("=================================================================\n");
	*/
	if (queryid == query_type_unknown)
	    return 1;

	static
   		rows,
   		fields;

	new
 		dest_str [125],
		dest_int [10],
	 	dest_float [16];

	cache_get_data (rows, fields);

	switch (queryid)
	{
		case query_type_loadpassword:
		{
		    new
				registered;

			if (rows) // Account on mysql
			{
				InfoJugador [playerid][jClave] = cache_get_row_int (0, 0);
				registered = 1;
			}
			CallLocalFunction ("OnAccountDataReceived", "ii", playerid, registered);
		}
		case query_type_createaccount:
		{
			Dialog(playerid,dIngreso,DIALOG_STYLE_PASSWORD,HEADER_INGRESO,"","Confirmar","Salir");
		}
		case query_type_loadaccount:
		{
		    if (rows)
			{
			    new
			        time_load = GetTickCount()
				;

			    // Cargar datos
				MySQL_GetBool (0, "Registrado", InfoJugador[playerid][jRegistrado] );
				MySQL_GetInt (0, "Sexo", InfoJugador[playerid][jSexo] );
				MySQL_GetInt (0, "Edad", InfoJugador[playerid][jEdad] );
				MySQL_GetInt (0, "Pelea" , InfoJugador[playerid][jPelea] );
				MySQL_GetInt (0, "Estilo" , InfoJugador[playerid][jEstilo] );
				MySQL_GetInt (0, "DNI" , InfoJugador[playerid][jDNI] );
				MySQL_GetFloat (0, "Vida" , InfoJugador[playerid][jVida] );
				MySQL_GetFloat (0, "Chaleco" , InfoJugador[playerid][jChaleco] );
				MySQL_GetInt (0, "Ropa_0" , InfoJugador[playerid][jRopa][0] );
				MySQL_GetInt (0, "Ropa_1" , InfoJugador[playerid][jRopa][1] );
				MySQL_GetInt (0, "Ropa_2" , InfoJugador[playerid][jRopa][2] );
				MySQL_GetInt (0, "Ropa_3" , InfoJugador[playerid][jRopa][3] );
				MySQL_GetInt (0, "CurrentSkin" , InfoJugador[playerid][jCurrentSkin] );
				MySQL_GetInt (0, "Dinero" , InfoJugador[playerid][jDinero] );
				MySQL_GetInt (0, "Banco" , InfoJugador[playerid][jBanco] );
				MySQL_GetFloat (0, "Experiencia" , InfoJugador[playerid][jExperiencia] );
				MySQL_GetFloat (0, "Hambre" , InfoJugador[playerid][jHambre] );
				MySQL_GetFloat (0, "Cansancio" , InfoJugador[playerid][jCansancio] );
				MySQL_GetFloat (0, "PosX" , InfoJugador[playerid][jPosX] );
				MySQL_GetFloat (0, "PosY" , InfoJugador[playerid][jPosY] );
				MySQL_GetFloat (0, "PosZ" , InfoJugador[playerid][jPosZ] );
				MySQL_GetInt (0, "Interior" , InfoJugador[playerid][jInterior] );
				MySQL_GetInt (0, "VirtualWorld" , InfoJugador[playerid][jVirtualWorld] );
				MySQL_GetInt (0, "Admin" , InfoJugador[playerid][jAdmin] );
				MySQL_GetInt (0, "Lider" , InfoJugador[playerid][jLider] );
				MySQL_GetInt (0, "Miembro" , InfoJugador[playerid][jMiembro] );
				MySQL_GetInt (0, "Rango" , InfoJugador[playerid][jRango] );
				MySQL_GetInt (0, "Encarcelado" , InfoJugador[playerid][jEncarcelado] );
				MySQL_GetInt (0, "TiempoCarcel" , InfoJugador[playerid][jTiempoCarcel] );
				MySQL_GetInt (0, "Minutos" , InfoJugador[playerid][jMinutos] );
				MySQL_GetInt (0, "Horas" , InfoJugador[playerid][jHoras] );
				MySQL_GetInt (0, "Nivel" , InfoJugador[playerid][jNivel] );
				MySQL_GetInt (0, "LiderFam" , InfoJugador[playerid][jLiderFam] );
				MySQL_GetInt (0, "MiembroFam" , InfoJugador[playerid][jMiembroFam] );
				MySQL_GetInt (0, "RangoFam" , InfoJugador[playerid][jRangoFam] );
				MySQL_GetInt (0, "Trabajo" , InfoJugador[playerid][jTrabajo] );
				MySQL_GetInt (0, "NivelTrabajo" , InfoJugador[playerid][jNivelTrabajo] );
				MySQL_GetInt (0, "Entregas" , InfoJugador[playerid][jEntregas] );
				MySQL_GetInt (0, "IDCuentaB" , InfoJugador[playerid][jIDCuentaB] );
				MySQL_GetInt (0, "CurrentObj" , InfoJugador[playerid][jCurrentObj] );
				MySQL_GetInt (0, "CurrentObjD" , InfoJugador[playerid][jCurrentObjD] );
				MySQL_GetInt (0, "ObjetoColgado" , InfoJugador[playerid][jObjetoColgado] );
				MySQL_GetInt (0, "ObjetoColgadoData" , InfoJugador[playerid][jObjetoColgadoData] );
				MySQL_GetInt (0, "ChalecoObj" , InfoJugador[playerid][jChalecoObj] );
				MySQL_GetInt (0, "ChalecoData" , InfoJugador[playerid][jChalecoData] );
				MySQL_GetBool (0, "BuscadorVeh", InfoJugador[playerid][jBuscadorVeh] );
				MySQL_GetString (0, "AdminJail" , InfoJugador[playerid][jAdminJail] );
				MySQL_GetBool (0, "LicenciaAuto", InfoJugador[playerid][jLicenciaAuto] );
				MySQL_GetBool (0, "LicenciaMoto", InfoJugador[playerid][jLicenciaMoto] );
				MySQL_GetBool (0, "LicenciaArmas", InfoJugador[playerid][jLicenciaArmas] );
				MySQL_GetInt (0, "Cosechas" , InfoJugador[playerid][jCosechas] );
				MySQL_GetInt (0, "AttachModel_0" , InfoJugador[playerid][jAttachModel][0] );
				MySQL_GetInt (0, "AttachModel_1" , InfoJugador[playerid][jAttachModel][1] );
				MySQL_GetInt (0, "AttachModel_2" , InfoJugador[playerid][jAttachModel][2] );
				MySQL_GetInt (0, "AttachModel_3" , InfoJugador[playerid][jAttachModel][3] );
				MySQL_GetInt (0, "AttachModel_4" , InfoJugador[playerid][jAttachModel][4] );
				MySQL_GetInt (0, "AttachBone_0" , InfoJugador[playerid][jAttachBone][0] );
				MySQL_GetInt (0, "AttachBone_1" , InfoJugador[playerid][jAttachBone][1] );
				MySQL_GetInt (0, "AttachBone_2" , InfoJugador[playerid][jAttachBone][2] );
				MySQL_GetInt (0, "AttachBone_3" , InfoJugador[playerid][jAttachBone][3] );
				MySQL_GetInt (0, "AttachBone_4" , InfoJugador[playerid][jAttachBone][4] );
				MySQL_GetBool (0, "AttachOcultado_0", InfoJugador[playerid][jAttachOcultado][0] );
				MySQL_GetBool (0, "AttachOcultado_1", InfoJugador[playerid][jAttachOcultado][1] );
				MySQL_GetBool (0, "AttachOcultado_2", InfoJugador[playerid][jAttachOcultado][2] );
				MySQL_GetBool (0, "AttachOcultado_3", InfoJugador[playerid][jAttachOcultado][3] );
				MySQL_GetBool (0, "AttachOcultado_4", InfoJugador[playerid][jAttachOcultado][4] );

				new
				    inv_str [9];

				InvLoop (i, playerid)
				{
				    A_Format (inv_str, "inv_%d", i);
					MySQL_GetInt (0, inv_str, ItemInventario [playerid][i][invObject]);
				    A_Format (inv_str, "invd_%d", i);
					MySQL_GetInt (0, inv_str, ItemInventario [playerid][i][invData]);
				}

				MySQL_GetInt (0, "Estrellas" , InfoJugador[playerid][jEstrellas] );
				MySQL_GetBool (0, "Bomba", InfoJugador[playerid][jBomba] );
				MySQL_GetInt (0, "Repartidas" , InfoJugador[playerid][jRepartidas] );
				MySQL_GetInt (0, "Barridas" , InfoJugador[playerid][jBarridas] );
				MySQL_GetInt (0, "Acento" , InfoJugador[playerid][jAcento] );
				MySQL_GetBool (0, "Muerto", InfoJugador[playerid][jMuerto] );
				MySQL_GetBool (0, "BlockDudas", InfoJugador[playerid][jBlockDudas] );
				MySQL_GetBool (0, "BlockFam", InfoJugador[playerid][jBlockFam] );
				MySQL_GetBool (0, "BlockFac", InfoJugador[playerid][jBlockFac] );
				MySQL_GetBool (0, "Esposado", InfoJugador[playerid][jEsposado] );
				MySQL_GetInt (0, "TiempoDudas" , InfoJugador[playerid][jTiempoDudas] );
				MySQL_GetInt (0, "Ibu400" , InfoJugador[playerid][jIbu400] );
				MySQL_GetInt (0, "Ibu600" , InfoJugador[playerid][jIbu600] );
				MySQL_GetInt (0, "Falopeado" , InfoJugador[playerid][jFalopeado] );
				MySQL_GetInt (0, "Papeado" , InfoJugador[playerid][jPapeado] );
				MySQL_GetInt (0, "Adv" , InfoJugador[playerid][jAdv] );
				MySQL_GetInt (0, "AdmAdv" , InfoJugador[playerid][jAdmAdv] );
				MySQL_GetFloat (0, "AttachPosx_0" , InfoJugador[playerid][jAttachPosx][0] );
				MySQL_GetFloat (0, "AttachPosx_1" , InfoJugador[playerid][jAttachPosx][1] );
				MySQL_GetFloat (0, "AttachPosx_2" , InfoJugador[playerid][jAttachPosx][2] );
				MySQL_GetFloat (0, "AttachPosx_3" , InfoJugador[playerid][jAttachPosx][3] );
				MySQL_GetFloat (0, "AttachPosx_4" , InfoJugador[playerid][jAttachPosx][4] );
				MySQL_GetFloat (0, "AttachPosy_0" , InfoJugador[playerid][jAttachPosy][0] );
				MySQL_GetFloat (0, "AttachPosy_1" , InfoJugador[playerid][jAttachPosy][1] );
				MySQL_GetFloat (0, "AttachPosy_2" , InfoJugador[playerid][jAttachPosy][2] );
				MySQL_GetFloat (0, "AttachPosy_3" , InfoJugador[playerid][jAttachPosy][3] );
				MySQL_GetFloat (0, "AttachPosy_4" , InfoJugador[playerid][jAttachPosy][4] );
				MySQL_GetFloat (0, "AttachPosz_0" , InfoJugador[playerid][jAttachPosz][0] );
				MySQL_GetFloat (0, "AttachPosz_1" , InfoJugador[playerid][jAttachPosz][1] );
				MySQL_GetFloat (0, "AttachPosz_2" , InfoJugador[playerid][jAttachPosz][2] );
				MySQL_GetFloat (0, "AttachPosz_3" , InfoJugador[playerid][jAttachPosz][3] );
				MySQL_GetFloat (0, "AttachPosz_4" , InfoJugador[playerid][jAttachPosz][4] );
				MySQL_GetFloat (0, "AttachAngx_0" , InfoJugador[playerid][jAttachAngx][0] );
				MySQL_GetFloat (0, "AttachAngx_1" , InfoJugador[playerid][jAttachAngx][1] );
				MySQL_GetFloat (0, "AttachAngx_2" , InfoJugador[playerid][jAttachAngx][2] );
				MySQL_GetFloat (0, "AttachAngx_3" , InfoJugador[playerid][jAttachAngx][3] );
				MySQL_GetFloat (0, "AttachAngx_4" , InfoJugador[playerid][jAttachAngx][4] );
				MySQL_GetFloat (0, "AttachAngy_0" , InfoJugador[playerid][jAttachAngy][0] );
				MySQL_GetFloat (0, "AttachAngy_1" , InfoJugador[playerid][jAttachAngy][1] );
				MySQL_GetFloat (0, "AttachAngy_2" , InfoJugador[playerid][jAttachAngy][2] );
				MySQL_GetFloat (0, "AttachAngy_3" , InfoJugador[playerid][jAttachAngy][3] );
				MySQL_GetFloat (0, "AttachAngy_4" , InfoJugador[playerid][jAttachAngy][4] );
				MySQL_GetFloat (0, "AttachAngz_0" , InfoJugador[playerid][jAttachAngz][0] );
				MySQL_GetFloat (0, "AttachAngz_1" , InfoJugador[playerid][jAttachAngz][1] );
				MySQL_GetFloat (0, "AttachAngz_2" , InfoJugador[playerid][jAttachAngz][2] );
				MySQL_GetFloat (0, "AttachAngz_3" , InfoJugador[playerid][jAttachAngz][3] );
				MySQL_GetFloat (0, "AttachAngz_4" , InfoJugador[playerid][jAttachAngz][4] );
				MySQL_GetFloat (0, "AttachEscx_0" , InfoJugador[playerid][jAttachEscx][0] );
				MySQL_GetFloat (0, "AttachEscx_1" , InfoJugador[playerid][jAttachEscx][1] );
				MySQL_GetFloat (0, "AttachEscx_2" , InfoJugador[playerid][jAttachEscx][2] );
				MySQL_GetFloat (0, "AttachEscx_3" , InfoJugador[playerid][jAttachEscx][3] );
				MySQL_GetFloat (0, "AttachEscx_4" , InfoJugador[playerid][jAttachEscx][4] );
				MySQL_GetFloat (0, "AttachEscy_0" , InfoJugador[playerid][jAttachEscy][0] );
				MySQL_GetFloat (0, "AttachEscy_1" , InfoJugador[playerid][jAttachEscy][1] );
				MySQL_GetFloat (0, "AttachEscy_2" , InfoJugador[playerid][jAttachEscy][2] );
				MySQL_GetFloat (0, "AttachEscy_3" , InfoJugador[playerid][jAttachEscy][3] );
				MySQL_GetFloat (0, "AttachEscy_4" , InfoJugador[playerid][jAttachEscy][4] );
				MySQL_GetFloat (0, "AttachEscz_0" , InfoJugador[playerid][jAttachEscz][0] );
				MySQL_GetFloat (0, "AttachEscz_1" , InfoJugador[playerid][jAttachEscz][1] );
				MySQL_GetFloat (0, "AttachEscz_2" , InfoJugador[playerid][jAttachEscz][2] );
				MySQL_GetFloat (0, "AttachEscz_3" , InfoJugador[playerid][jAttachEscz][3] );
				MySQL_GetFloat (0, "AttachEscz_4" , InfoJugador[playerid][jAttachEscz][4] );

				// Registrado - Cargar cuenta
				if(InfoJugador[playerid][jRegistrado])
				{
					CargarCuenta (playerid);
				}
				// Tutorial
				else
				{
    				TextDrawShowForPlayer (playerid, Vendado);
					TogglePlayerSpectating(playerid, false);
				}

				// speed test
				printf("- Cuenta cargada ('%s' - %d ms).", pName(playerid), GetTickCount() - time_load);
			}
		}
		case query_type_cargarmuebles:
		{
		    if (rows)
		    {
		        for (new i; i < rows; i++)
		        {
					if (cache_get_row_int (i, 1) < 0 || cache_get_row_int (i, 2) < 0)
						continue;
						
		            MuebleCasa [cache_get_row_int (i, 1)][cache_get_row_int (i, 2)][mIndex] = cache_get_row_int (i, 3);
		            MuebleCasa [cache_get_row_int (i, 1)][cache_get_row_int (i, 2)][mPos_x] = cache_get_row_float (i, 4);
		            MuebleCasa [cache_get_row_int (i, 1)][cache_get_row_int (i, 2)][mPos_y] = cache_get_row_float (i, 5);
		            MuebleCasa [cache_get_row_int (i, 1)][cache_get_row_int (i, 2)][mPos_z] = cache_get_row_float (i, 6);
		            MuebleCasa [cache_get_row_int (i, 1)][cache_get_row_int (i, 2)][mRot_x] = cache_get_row_float (i, 7);
		            MuebleCasa [cache_get_row_int (i, 1)][cache_get_row_int (i, 2)][mRot_y] = cache_get_row_float (i, 8);
		            MuebleCasa [cache_get_row_int (i, 1)][cache_get_row_int (i, 2)][mRot_z] = cache_get_row_float (i, 9);
		            MuebleCasa [cache_get_row_int (i, 1)][cache_get_row_int (i, 2)][mTexture][0] = cache_get_row_int (i, 10);
		            MuebleCasa [cache_get_row_int (i, 1)][cache_get_row_int (i, 2)][mTexture][1] = cache_get_row_int (i, 11);
		            MuebleCasa [cache_get_row_int (i, 1)][cache_get_row_int (i, 2)][mTexture][2] = cache_get_row_int (i, 12);
		            MuebleCasa [cache_get_row_int (i, 1)][cache_get_row_int (i, 2)][mTexture][3] = cache_get_row_int (i, 13);
				}
		    }
		}
		case query_type_bank:
		{
		    if (rows)
			{
		        new
		            transferName [MAX_PLAYER_NAME],
		            transferMoney,
					val = GetPVarInt (playerid, "Dinero_Transferir"),
					aID = GetPVarInt (playerid, "ID_Transferir");

				DeletePVar(playerid,"Parte_Transferir");
				DeletePVar(playerid,"Cuenta_Transferir");
				DeletePVar(playerid,"ID_Transferir");
				DeletePVar(playerid,"Dinero_Transferir");

				if (!aID)
				    return 1;

				cache_get_row (0, 0, transferName);
				transferMoney = cache_get_row_int (0, 1);

    			InfoJugador [playerid][jBanco] -= val;
    			
    			transferMoney += val;

				new
					querystr[144];

				format (querystr, sizeof (querystr), "UPDATE `Usuarios` SET `Banco` = %d WHERE `IDCuentaB` = %d", transferMoney, aID);
				opmysql_tquery(querystr, "OnQueryFinish", "ii", INVALID_PLAYER_ID, query_type_unknown);

				A_Format(querystr,"Balance: ~g~$%d",InfoJugador [playerid][jBanco]);
				PlayerTextDrawSetString(playerid,Cuenta_Balance[1][playerid],querystr);
				MensajeF (playerid, -1, "Depositaste un total de "#CVERDE"$%d "#CBLANCO"en la cuenta número "#CROJO"%d "#CBLANCO"(Propietario: "#CINFO"%s"#CBLANCO")", val, aID, transferName);
				A_Format(querystr, "%s transfirió $%d a %s (CID: %d)", pName(playerid), val, transferName, aID);
				Log("banco", querystr);
			}
			else
			{
			    Error (playerid, "~r~Número de cuenta incorrecto - Intente nuevamente.");
				DeletePVar(playerid,"Parte_Transferir");
				DeletePVar(playerid,"Cuenta_Transferir");
				DeletePVar(playerid,"ID_Transferir");
				DeletePVar(playerid,"Dinero_Transferir");
			}
		}
		case query_type_cargarmaxcb:
		{
		    if (rows)
	    	{
		    	Total_Cuentas_Bancarias = cache_get_row_int (0, 0);
				printf ("Total de cuentas bancarias: %d", Total_Cuentas_Bancarias);
			}
		}
		case query_type_cargarmlcl:
		{
		    if (!rows) // mlcl not registered on db
		    {
		        printf ("not registered on db - create it.");
		        CreateMLCL (playerid);
			}
			else
			{
			    new
			        item [MLCL_MAX_ITEMS],
			        data [MLCL_MAX_ITEMS],
					mlcl_id;
			        
				mlcl_id = cache_get_row_int (0, 0);

				item [0] = cache_get_row_int (0, 1);
				data [0] = cache_get_row_int (0, 2);

				item [1] = cache_get_row_int (0, 3);
				data [1] = cache_get_row_int (0, 4);

				item [2] = cache_get_row_int (0, 5);
				data [2] = cache_get_row_int (0, 6);

				item [3] = cache_get_row_int (0, 7);
				data [3] = cache_get_row_int (0, 8);

				RegisterMLCLIntoMemory (mlcl_id, item, data);
				ShowMLCLForPlayer (playerid, mlcl_id, dMLCL);
				printf ("mlcl loaded from db (%s & %s)", item, data);
			}
		}
		case query_type_crearmlcl:
		{
		    new
		        mlcl_id = cache_insert_id (),
				itemdata [MLCL_MAX_ITEMS];
		        
			RegisterMLCLIntoMemory (mlcl_id, itemdata, itemdata);
			
			if (GetPVarInt (playerid, "MLCL_slot"))
			{
				InsertObjectIntoMLCL (playerid, mlcl_id, GetPVarInt (playerid, "MLCL_objectid"), GetPVarInt (playerid, "MLCL_objectdata"), GetPVarInt (playerid, "MLCL_slot"), "OnMLCLResponse");
				DeletePVar (playerid, "MLCL_objectid");
				DeletePVar (playerid, "MLCL_objectdata");
				DeletePVar (playerid, "MLCL_slot");
				printf ("mlcl created and registered on dynamic memory (0)");
			}
			else
			{
				ShowMLCLForPlayer (playerid, mlcl_id, dMLCL);
				printf ("mlcl created and registered on dynamic memory (1)");
			}
			
			new
				i,
				d,
				oc = ObjetoColgado (playerid, i, d);

			if ((oc == INV_MOCHILA || oc == INV_MALETIN) && d == 0)
			{
			    InfoJugador [playerid][jObjetoColgadoData] = mlcl_id;
			}
		}
		case query_type_email:
		{
		    if (rows)
		    {
		        LimpiarPantalla (playerid, 9);
		        Mensaje (playerid, -1, "Esa dirección de correo electrónico ya pertenece a otra cuenta.");
		        Dialog (playerid, dRegistro, DIALOG_STYLE_INPUT, HEADER_REGISTRO, DIALOG_EMAIL, "Continuar", "Salir");
				DeletePVar (playerid, "pEmail");
				return 1;
			}
			new
			    str [512],
				email [32];
			    
			GetPVarString (playerid, "pEmail", email, sizeof (email));
			format (str, sizeof (str), DIALOG_EMAIL2, email);
   			Dialog (playerid, dRegistro, DIALOG_STYLE_MSGBOX, HEADER_REGISTRO, str, "Continuar", "Volver");
			SetPVarInt (playerid, "pRegistro", 3);
		}
		case query_type_logs:
		{
			new
			    BIG_string [(155 * 20) + 40],
				format_string [155],
				log_type[20];
				
			GetPVarString (playerid, "logtype", log_type, sizeof (log_type));
			    
			for (new i = rows-1;  i > -1; i--)
			{
			    new
			        rowval_date [24],
			        rowval_log [128];
			        
				cache_get_row (i, 1, rowval_date);
				cache_get_row (i, 2, rowval_log);
			    format (format_string, sizeof (format_string), "\n{ffff00}[%s] {ffffff}%s", rowval_date, rowval_log);
			    strcat (BIG_string, format_string);
			}
			strcat (BIG_string, "\n\nBuscar:");
			
			format (format_string, 120, ""#CBLANCO"[%d resultados] Buscar en: "#CROJO"%s", rows, log_type);
			Dialog (playerid, dLogs, DIALOG_STYLE_INPUT, format_string, BIG_string, "Buscar", "Cerrar");
		}
	}
	return 1;
}

stock SendMailToActivateAccount (playerid, const email[])
{
	new
   		letter_0 = 'A' + random ('Z' - 'A'),
   		letter_1 = 'A' + random ('Z' - 'A'),
   		letter_2 = 'A' + random ('Z' - 'A'),

		num_0 = '0' + random (10),
		num_1 = '0' + random (10),
		num_2 = '0' + random (10),

		string [22],
		message [144];

	A_Format (string, "%c%c%cC%c%c%c", letter_0, letter_1, letter_2, num_0, num_1, num_2);

	SetPVarString (playerid, "pCode", string);

	A_Format (message, "\nGracias por registrar a %s en el servidor, su cÃ³digo de confirmaciÃ³n es: %s", NombreJugador_ (playerid), string);

	SendMail (email, OPTIMUS_EMAIL, "Ciudad Real RP", "Registrese en Ciudad Real RP", message);
}

CALLBACK: OnMemberDataReceived (playerid, membername[], type)
{
	new
	    rows,
	    fields;

	cache_get_data (rows, fields);

	new
	    string [100] = ""#CROJO"ERROR (SQL): No se pudieron obtener los datos (Cuenta inexistente). (rows: 0 - fields: 0)";

	if (rows)
	{
	    cache_get_row (0, 0, string);

	    if (isnull (string))
	    {
			A_Format(string, ""#CBLANCO"La última conexión de "#CINFO"%s "#CBLANCO"fue antes de "#CAMARILLO"Agosto del 2013 (v3)", membername);
		}
		else
		{
			A_Format(string, ""#CBLANCO"La última conexión de "#CINFO"%s "#CBLANCO"fue el día "#CAMARILLO"%s", membername, string);
		}
	}
	if (type == 0)
	{
		Dialog(playerid, dFac_MiembrosConex, DIALOG_STYLE_MSGBOX, "Facción > Miembros > Conexión", string, "<", "");
	}
	else
	{
    	MensajeF (playerid, -1, string);
	}
	return 1;
}



stock sleepex (time)
{
	time += GetTickCount();

	while (GetTickCount() < time) {}
}

stock Portones(playerid)
{
	Loop(i, MAX_PORTONES, 0)
	{
		if(InfoPorton_Ex[i][pX] == 0.0)
			continue;

	    if(IsPlayerInRangeOfPoint(playerid,20.0,InfoPorton_Ex[i][pX],InfoPorton_Ex[i][pY],InfoPorton_Ex[i][pZ]))
	    {
			if(InfoPorton_Ex[i][portFamilia])
			{
			    if(ID_Familia(playerid) == InfoPorton_Ex[i][portFamilia])
			    {
					new time = MoveDynamicObject(   InfoPorton_Ex[i][portID],
													InfoPorton_Ex[i][pAX],
													InfoPorton_Ex[i][pAY],
													InfoPorton_Ex[i][pAZ],
													InfoPorton_Ex[i][portVelocidad]);


					SetTimerEx("CerrarPorton_Ex",time+4000,false, "i", i);
					AutoRol(playerid,"abre el porton con su control remoto");
					return 1;
				}
			}
			else if(InfoPorton_Ex[i][portCasa])
			{
				if(TieneLlaveCasa(playerid, InfoPorton_Ex[i][portCasa]))
				{
					new time = MoveDynamicObject(   InfoPorton_Ex[i][portID],
													InfoPorton_Ex[i][pAX],
													InfoPorton_Ex[i][pAY],
													InfoPorton_Ex[i][pAZ],
													InfoPorton_Ex[i][portVelocidad]);


					SetTimerEx("CerrarPorton_Ex",time+4000,false, "i", i);
					AutoRol(playerid,"abre el porton con su control remoto");
					return 1;
				}
			}
	    }
	}
	return 0;
}

stock RecuperarSalud (playerid)
{
	CongelarEx (playerid);
	TogglePlayerCrack (playerid, false);
	SetPlayerHealth (playerid, 15.0);
	SetPlayerPos (playerid, HOSP_POS_RECUPERADO);
	SetPlayerFacingAngle (playerid, HOSP_ANG_RECUPERADO);
	SetPlayerCameraPos (playerid, HOSP_POS_CAMERA_POS);
	SetPlayerCameraLookAt (playerid, HOSP_POS_CAMERA_LOOK);
	LimpiarPantalla (playerid, 9);
	Mensaje (playerid, -1, "En este momento, tu cuerpo se encuentra en reposo.");
	SetPlayerDrunkLevel (playerid, 0);
	SetPlayerVirtualWorld (playerid, playerid);
	SetPlayerInterior (playerid, 0);
	return 1;
}

stock Confiscar (playerid)
{
	InvLoop (i,playerid)
	{
	    if (ItemInventario[playerid][i][invObject])
	    {
			new
			    invt = ItemInventario[playerid][i][invObject],
				invd = ItemInventario[playerid][i][invData];

			if (!EsLSPD (playerid) && !EsMilitar (playerid))
			{
				if (ObjectData [invt][invType] == INV_ARMA || ObjectData [invt][invType] == INV_CARGADOR)
				{
				    switch (invd)
				    {
				        case 22..34:
				        {
				            if (!InfoJugador[playerid][jLicenciaArmas])
				            {
	                            ItemInventario[playerid][i][invObject] = 0;
	                            ItemInventario[playerid][i][invData] = 0;
							}
						}
					}
				}
			}
			if (ObjectData [invt][invType] == INV_BOLSAMARI || ObjectData [invt][invType] == INV_BOLSACOCA || ObjectData [invt][invType] == INV_PORRO || ObjectData [invt][invType] == INV_PORROON)
			{
   				ItemInventario[playerid][i][invObject] = 0;
       			ItemInventario[playerid][i][invData] = 0;
			}
		}
	}
	return 1;
}

stock AgregarDineroFaccion (fac, money)
{
	if (1 <= fac <= MAX_FACCIONES)
	{
	    InfoFaccion [fac][fDinero] += money;
	    ActualizarFacciones ();
		return 1;
	}
	return 0;
}

CALLBACK: CerrarPorton_Ex(i)
{
	MoveDynamicObject(  InfoPorton_Ex[i][portID],
						InfoPorton_Ex[i][pX],
						InfoPorton_Ex[i][pY],
						InfoPorton_Ex[i][pZ],
						InfoPorton_Ex[i][portVelocidad]);
	return 1;
}

stock DisableServices (playerid)
{
	for (new s; s < MAX_SERVICIOS; s++)
	{
		if (RequestedService[playerid][s] > 0)
		{
			switch (s)
			{
				case SERVICIO_POLICIA:
				{
					new
						my_col = GetPlayerColor(playerid);

					foreach (Player, p)
					{
						if (EsLSPD(p))
						{
							SetPlayerMarkerForPlayer(p, playerid, my_col);
							Mensaje(p, -1, "Uno de los sujetos que llamó a la policía, fue transladado al hospital.");
						}
					}
				}
				case SERVICIO_TAXI:
				{
					new
						my_col = GetPlayerColor(playerid);

					foreach (Player, p)
					{
						if (InfoJugador[p][jTrabajo] == ID_Taxista)
						{
							SetPlayerMarkerForPlayer(p, playerid, my_col);
						}
					}
				}
				case SERVICIO_HOSPITAL:
				{
					new
						my_col = GetPlayerColor(playerid);

					foreach (Player, p)
					{
						if (EsMedico(p))
						{
							SetPlayerMarkerForPlayer(p, playerid, my_col);
							Mensaje(p, -1, "Uno de los sujetos que llamó al hospital, fue transladado al hospital.");
						}
					}
				}
				case SERVICIO_TALLER:
				{
					new
						my_col = GetPlayerColor(playerid);

					foreach (Player, p)
					{
						if (EsMecanico(p))
						{
							SetPlayerMarkerForPlayer(p, playerid, my_col);
						}
					}
				}
			}
			RequestedService[playerid][s] = 0;
		}
	}
}

public OnPlayerDeath(playerid,killerid,reason)
{
	if(gettime() < LoginTime[playerid])
	{
	    return 1;
	}

	killerid = KillerID[playerid];
	KillerID[playerid] = INVALID_PLAYER_ID;

	if(InfoJugador[playerid][jMuerto] == false)
	{
	    if (HospitalData [playerid] != -1)
	    {
	        return 1;
		}

	    new
	        Float:x, Float:y, Float:z, Float: Angle;

	    GetPlayerPos(playerid,x, y, z);
		GetPlayerFacingAngle(playerid, Angle);

	    InfoJugador[playerid][jMuerto] = true;

     	SetPVarInt(playerid,"ULTIMO_VW", GetPlayerVirtualWorld(playerid) );
    	SetPVarInt(playerid,"ULTIMO_INT", GetPlayerInterior(playerid) );

		SetSpawnInfo(playerid, 0, GetPlayerSkin(playerid), x, y, z, Angle, 0, 0, 0, 0, 0, 0);
		TogglePlayerCrack(playerid, true, 1);
		CongelarEx(playerid);
	}
	else
	{
	    if (HospitalData [playerid] == -1)
	    {
	        if (InfoJugador [playerid][jEncarcelado])
	        {
		    	MensajeF(playerid, -1, "Te desmayaste. Una vez muerto, volverás a la cárcel.");
			}
			else
			{
				MensajeF(playerid, -1, "Te desmayaste. En unos segundos serás trasladado al hospital de Los Santos.");
            	HospitalData [playerid] = 1;
			}
			
		    InfoJugador[playerid][jMuerto] = false;

			SetTimerEx("ApplyDeathAnim", 100, false, "i", playerid);
			DisableServices (playerid);
		}
	}
	
	if (PlayerBools [playerid] & e_LICENCIA)
	{
	    CancelLicense (playerid);
	}

	if(killerid != INVALID_PLAYER_ID)
	{
	    new
	        Killer[MAX_PLAYER_NAME];
		GetPlayerName(killerid, Killer, MAX_PLAYER_NAME );
		SetPVarString(playerid, "QFA", Killer );
	}

	Loop(i, MAX_PCP, 0)
	{
 		DestroyPCP(playerid, i);
	}

	if(reason == 0)
	{
	    if(IsPlayerInDynamicArea(killerid, zCamionerosLVL1))
	    {
	        MandarCarcelOOC (killerid, 20, "el servidor", "DM (Asesinar en camioneros)");
		}
	}

	//Sistema de mineria.
	TerminarMinear(playerid);

	if(GetPVarInt(playerid,"USANDO_MASCARA"))
	{
		DeletePVar(playerid,"USANDO_MASCARA");
	}

	if (GetPVarInt (playerid, "EstaCultivando"))
	{
	    if (IsPlayerWhitSpecialBar (playerid))
	    {
	        DestroyPlayerSpecialBar (playerid);
	        DeletePVar (playerid, "EstaCultivando");
		}
	}
	SetPVarInt(playerid, "Spawneo", 1);

	DeletePVar(playerid,"TerminoBasura");
	DeletePVar(playerid,"CAMION_BASURA");
	DeletePVar(playerid,"B_ParteLimpieza");

	if (PlayerBools [playerid] & e_REFUERZOS)
	{
	    cmd_noref(playerid, "");
	}

	if(GetPVarInt(playerid,"EN_ESTADIO")) DeletePVar(playerid,"EN_ESTADIO");

	Loop(i, sizeof Camillas, 0) if(InfoCamilla[i][camiUsadaPor] == playerid)
	{
        InfoCamilla[i][camiUsadaPor] = INVALID_PLAYER_ID;
        KillTimer2(playerid, TIMER_CAMILLA);
	}

 	SacarVelocimetro(playerid);

	if(GetPVarInt(playerid,PVarRepartidorB))
	{
		DestroyPCP(playerid, CP_REPARTIDORB);
	    DeletePVar(playerid,PVarRepartidorB);
	}

	if(killerid != INVALID_PLAYER_ID)
	{
		new
			killer_fam = ID_Familia (killerid),
			player_fam = ID_Familia (playerid);
			
		if (killer_fam && player_fam)
		{
			if (InfoFamilia[killer_fam][fPandilla] && InfoFamilia[player_fam][fPandilla] && killer_fam != player_fam)
			{
				new 
					GZ = GetPlayerGangZone(playerid);

				if(GZ != -1)
				{
					if(gzAtacadaPor[GZ] == -1 && (player_fam == InfoGZ[GZ][gzPandilla]))
					{
						if(PandillerosEnGangZone(killer_fam, GZ) < MIN_ATACANTES_GZ)
						{
							Mensaje (killerid, -1, "");
							Mensaje (killerid, -1,  "Si deseas generar una guerra de bandas, deben haber "#CROJO""#MIN_ATACANTES_GZ" "#CBLANCO"o más miembros de tu pandilla en la zona.");
						}
						else
						{
							// Buscar guerras ya iniciadas
							new
								bool: war_found = false;
							for (new i; i < MAX_GZS; i++)
							{
								if (IsValidGangZone(i))
								{
									if (gzAtacadaPor [GZ] == killer_fam)
									{
										Mensaje (killerid, -1, "");
										Mensaje (killerid, -1, "La pandilla atacada ya está luchando por un territorio. Deberás esperar a que finalize.");
										war_found = true;
										break;
									}
									if (gzAtacadaPor [GZ] == player_fam)
									{
										Mensaje (killerid, -1, "");
										Mensaje (killerid, -1, "Tu pandilla ya está luchando por un territorio. Deberás esperar a que finalize.");
										war_found = true;
										break;
									}
								}
							}
							if (war_found == false)
							{
								// Comenzar guerra de bandas
								gzAtacadaPor[GZ] = killer_fam;
								gzTiempo[GZ] = 0;
								GangZoneFlashForAll(InfoGZ[GZ][gzID], C_GZ_EN_GUERRA);
								
								// Obtener posición del map icon (promedio de cordenadas para quedar al centro)
								new
									// Zone min
									Float: min_x = (InfoGZ[GZ][gzMin][0] > InfoGZ[GZ][gzMax][0]) ? InfoGZ[GZ][gzMax][0] : InfoGZ[GZ][gzMin][0],
									Float: min_y = (InfoGZ[GZ][gzMin][1] > InfoGZ[GZ][gzMax][1]) ? InfoGZ[GZ][gzMax][1] : InfoGZ[GZ][gzMin][1],
									
									// Zone max
									Float: max_x = (InfoGZ[GZ][gzMax][0] > InfoGZ[GZ][gzMin][0]) ? InfoGZ[GZ][gzMax][0] : InfoGZ[GZ][gzMin][0],
									Float: max_y = (InfoGZ[GZ][gzMax][1] > InfoGZ[GZ][gzMin][1]) ? InfoGZ[GZ][gzMax][1] : InfoGZ[GZ][gzMin][1],
									
									// Icon pos
									Float: map_x = min_x + ((max_x - min_x) / 2.0),
									Float: map_y = min_y + ((max_y - min_y) / 2.0),
									
									map_id = 58;
									
								// Avisar a los miembros
								foreach (Player, i)
								{
									if (ID_Familia (i) == player_fam)
									{
										SetPlayerMapIcon(i, MI_GANGWARS, map_x, map_y, 0.0, map_id, -1, MAPICON_GLOBAL);
										LimpiarPantalla (i, 9);
										MensajeF (i, -1, "¡La pandilla {%06x}%s "#CBLANCO"quiere conquistar una zona que nos pertenece!", InfoFamilia [killer_fam][fColor], InfoFamilia [killer_fam][fNombre]);
									}
									else
									{
										if (ID_Familia (i) == killer_fam)
										{
											SetPlayerMapIcon(i, MI_GANGWARS, map_x, map_y, 0.0, map_id, -1, MAPICON_GLOBAL);
											LimpiarPantalla (i, 9);											MensajeF (i, -1, "¡Vamos por el territorio de la pandilla {%06x}%s!", InfoFamilia [player_fam][fColor], InfoFamilia [player_fam][fNombre]);
										}
									}
								}
							}
						}
					}
				}
			}
		}

		if(EsHitman(killerid))
		{
			Loop(i, sizeof InfoContrato, 0)
			{
			    if(strlen(InfoContrato[i][hitPor]) && InfoContrato[i][hitDinero])
			    {
					if(!strcmp(pName(playerid), InfoContrato[i][hitVictima]))
					{
					    GivePlayerMoney(killerid, InfoContrato[i][hitDinero]);
					    Mensaje(killerid, -1, "Cumpliste tu misión como hitman, se te pagó lo acordado.");
					    foreach(Player,p)
					    {
					        if(!strcmp(pName(p), InfoContrato[i][hitPor]))
					        {
					            MensajeF(p, -1, "El HITMAN %s cumplió con su palabra, y asesinó a "#CROJO"%s.", NombreJugador_(killerid), NombreJugador_(playerid) );
								break;
							}
						}
					    strclr(InfoContrato[i][hitPor]);
					    strclr(InfoContrato[i][hitVictima]);
					    InfoContrato[i][hitDinero] = 0;
					    ActualizarContratos();
					}
				}
			}
		}
	}

	//Objetos (Tirar, etc..)
	new
	    obj = GetObject(playerid);

	if(obj != -1)
	{
	    new
	        type = ObjectData[obj][invType],
			data = GetObjectData(playerid);

		RemoveObject(playerid);

		new
			Float: x,
			Float: y,
			Float: z;

		GetPlayerPos(playerid, x, y, z);
		if(type == INV_ARMA)
		{
		    z -= GetObjectTypeDif(type);
			CrearObjetoTirado(obj, data, x, y, z, -97.800048, -93.399887, -5.000010, GetPlayerVirtualWorld(playerid) );
		}
		else if(ObjectData[obj][invSize] >= 5) //Objetos que lleva
		{
		    z -= GetObjectTypeDif(type);

			new
				response = CrearObjetoTirado(obj, data, x, y, z, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid));

			if(response == -2)
			    Error(playerid, "Se produció un error, el objeto no pudo quedar en el piso.");
		}
		else
		{
			GuardarObjetoInventario(playerid, obj, -1, data);
		}
	}

	SetPlayerArmour(playerid, 0);
	SetPlayerHealth(playerid, 0);
	ResetPlayerWeapons(playerid);
	return 1;
}

stock GetVehicles(playerid) {
	new
		count;
		
	ownVeh_displayVehicles(playerid, i) {
		count++;
	}
	return count;
}

stock EsDeFacLegal(playerid)
{
	return  (
				EsLSPD(playerid)
			 || EsMilitar(playerid)
			 || EsMedico(playerid)
			 || EsDelGobierno(playerid)
			 || EsReportero(playerid)
		 	 || EsMecanico(playerid)
		  	);
}

stock CargarGangZones2(playerid)
{
	Loop(i, MAX_GZS, 0)
	{
	    if (IsValidGangZone(i))
	    {
	        if (gzAtacadaPor[i] == -1)
	        {
	        	GangZoneShowForPlayer(playerid, InfoGZ[i][gzID], ColoresGZ[InfoGZ[i][gzPandilla]]);
			}
	        else
	        {
				GangZoneFlashForPlayer(playerid, InfoGZ[i][gzID], C_GZ_EN_GUERRA );
			}
		}
	}
	if (LaboratorioBigFoot[labTiempoGuerra])
	{
		GangZoneShowForPlayer(playerid, LaboratorioBigFoot[labGangZoneID], C_GZ_EN_GUERRA);
	}
	else
	{
		GangZoneShowForPlayer(playerid, LaboratorioBigFoot[labGangZoneID], 0);
	}
	return 1;
}

stock CrearGangZone(ID,Float:Minx,Float:Miny,Float:Maxx,Float:Maxy, Familia = 0)
{
	if(InfoGZ[ID][gzID]) return printf("BUG: Se intentó sobreescribir una GangZone [ ID: %d ]", ID);

	InfoGZ[ID][gzID] = GangZoneCreate(Minx, Miny, Maxx, Maxy);
	GangZoneShowForAll(InfoGZ[ID][gzID], ColoresGZ[Familia] );

    Bit_Set( ValidGZ, ID, true );
	return 1;
}

stock CreateKeyPad(Float:x, Float:y, Float:z, Float: Angle = 0.0, vwid = -1, intid = -1)
{
	new
		slot = -1;

	for(new i = 0; i < MAX_KEYPAD; i++)
	{
		if(KeyPadInfo[i][kpPosx] == 0.0)
		{
			slot = i;
			break;
		}
	}

	if(slot == -1)
	{
		printf("[ERROR]: No se pudieron crear más KeyPads (Aumentar MAX_KEYPAD)");
		return -1;
	}

	CreateDynamicObject(OBJ_KeyPad, x, y, z, 0.0, 0.0, Angle, vwid, intid);

	KeyPadInfo[slot][kpPosx] = x;
	KeyPadInfo[slot][kpPosy] = y;
	KeyPadInfo[slot][kpPosz] = z;
	KeyPadInfo[slot][kpAngle] = Angle;
	//CreateDynamic3DTextLabel("Presiona "#CINFO"Y", 0xFFFFFFFF, x, y, z+0.5, 2.0);

	Iter_Add(KeyPads, slot);

	return slot;
}

stock PlayerWatchPlayer(playerid, targetid)
{
	new
	    Float: P[4], Float: z;

	GetPlayerPos(playerid, P[0], P[1], z);
	GetPlayerPos(targetid, P[2], P[3], z);

	SetPlayerFacingAngle(playerid, floatabs(360.0-atan2(P[2]-P[0], P[3]-P[1])) );
	return 1;
}

CALLBACK: Float: AnglePoint(Float:x, Float:y, Float:x2, Float:y2)
{
	new
	    Float: result = floatabs(360.0-atan2(x2-x, y2-y));

	return result;
}

CALLBACK: OnPlayerPressKeyPad(playerid, KeyPadID)
{
	if(KeyPadID == KP_Medico)
	{
	    if(!EsMedico(playerid)) return GameTextForPlayer(playerid, "~r~acceso denegado", 3000, 3);

	    static
	        bool: Opened;

		if(!Opened)
		{
	    	MoveDynamicObject(PHLSMD, 2033.8025, 2896.2981, 1103.7463, 4.0);
	    	Opened = true;
		}
		else
		{
	    	MoveDynamicObject(PHLSMD, 2035.1304, 2896.3079, 1103.7463, 4.0);
	    	Opened = false;
		}
	    return 1;
	}
	if(KeyPadID == KP_DirectorLSMD)
	{
	    if(InfoJugador [playerid][jLider] != IDLSMD) return GameTextForPlayer(playerid, "~r~acceso denegado", 3000, 3);

	    static
	        bool: Opened;

		if(!Opened)
		{
	    	MoveDynamicObject(PDLSMD, 2032.1307, 2864.4570, 1103.7463, 4.0);
	    	Opened = true;
		}
		else
		{
	    	MoveDynamicObject(PDLSMD, 2033.4930, 2864.4583, 1103.7463, 4.0);
	    	Opened = false;
		}

	    return 1;
	}
	if(KeyPadID == KP_EntradaCarceles[0] || KeyPadID == KP_EntradaCarceles[1])
	{
	    if(!EsLSPD(playerid)) return GameTextForPlayer(playerid, "~r~acceso denegado", 3000, 3);

	    static
	        bool: Opened;

		if(!Opened)
		{
			MoverObjeto(PCELDAS[2],2529.24, -1288.55, 1030.11);
	    	Opened = true;
		}
		else
		{
	    	MoverObjeto(PCELDAS[2], 2529.24, -1290.99, 1030.11);
	    	Opened = false;
		}

	    return 1;
	}
	if(KeyPadID == KP_PortonEjercito[0] || KeyPadID == KP_PortonEjercito[1])
	{
	    if(!EsMilitar(playerid)) return GameTextForPlayer(playerid, "~r~acceso denegado", 3000, 3);

	    static
	        bool: Opened;

		if(!Opened)
		{
			MoverObjeto(PEJERCITO1,2720.30004883,-2414.19995117,14.19999981);
	    	Opened = true;
		}
		else
		{
	    	MoverObjeto(PEJERCITO1,2720.30004883,-2405.39990234,14.19999981);
	    	Opened = false;
		}

	    return 1;
	}
	if(KeyPadID == KP_PortonEjercito2[0] || KeyPadID == KP_PortonEjercito2[1])
	{
	    if(!EsMilitar(playerid)) return GameTextForPlayer(playerid, "~r~acceso denegado", 3000, 3);

	    static
	        bool: Opened;

		if(!Opened)
		{
			MoverObjeto(PEJERCITO2,2720.30004883,-2512.89990234,14.19999981);
	    	Opened = true;
		}
		else
		{
	    	MoverObjeto(PEJERCITO2,2720.30004883,-2504.00000000,14.19999981);
	    	Opened = false;
		}

	    return 1;
	}
	if(KeyPadID == KP_Mecas[0] || KeyPadID == KP_Mecas[1])//Puerta 1
	{
	    if(!EsMecanico(playerid)) return GameTextForPlayer(playerid, "~r~acceso denegado", 3000, 3);

	    static
	        bool: Opened;

		if(!Opened)
		{
			MoverObjeto(PMECAS[0],1594.5999800,-2184.8999000,9.7000000);
	    	Opened = true;
		}
		else
		{
	    	MoverObjeto(PMECAS[0],1594.5999800,-2184.8999000,13.5000000);
	    	Opened = false;
		}

	    return 1;
	}
	if(KeyPadID == KP_Mecas2[0] || KeyPadID == KP_Mecas2[1])
	{
	    if(!EsMecanico(playerid)) return GameTextForPlayer(playerid, "~r~acceso denegado", 3000, 3);

	    static
	        bool: Opened;

		if(!Opened)
		{
	    	MoverObjeto(PMECAS[1],1630.9000200,-2184.8999000,9.7000000);
	    	Opened = true;
		}
		else
		{
			MoverObjeto(PMECAS[1],1630.9000200,-2184.8999000,13.5000000);
	    	Opened = false;
		}

	    return 1;
	}
	if(KeyPadID == KP_MecasDep[0] || KeyPadID == KP_MecasDep[1])
	{
	    if(!EsMecanico(playerid)) return GameTextForPlayer(playerid, "~r~acceso denegado", 3000, 3);

	    static
	        bool: Opened;

		if(!Opened)
		{
	    	MoverObjeto(PMECASDEP,1557.1999500,-2184.6999500,9.7000000);
	    	Opened = true;
		}
		else
		{
			MoverObjeto(PMECASDEP,1557.1999500,-2184.6999500,13.5000000);
	    	Opened = false;
		}

	    return 1;
	}
	if(KeyPadID == KP_CarcelEntrada[0] || KeyPadID == KP_CarcelEntrada[1])
	{
	    if(!EsLSPD(playerid)) return GameTextForPlayer(playerid, "~r~acceso denegado", 3000, 3);

	    static
	        bool: Opened;

		if(!Opened)
		{
	    	MoverObjeto(PCARCEL,1586.25244, -1495.86206, 1065.31824);
	    	Opened = true;
		}
		else
		{
			MoverObjeto(PCARCEL,1586.25244, -1497.18213, 1065.31824);
	    	Opened = false;
		}

	    return 1;
	}
	if(KeyPadID == KP_CarcelVisita[0] || KeyPadID == KP_CarcelVisita[1])
	{
	    if(!EsLSPD(playerid)) return GameTextForPlayer(playerid, "~r~acceso denegado", 3000, 3);

	    static
	        bool: Opened;

		if(!Opened)
		{
	    	MoverObjeto(PCARCELVISITAS,1586.60913, -1514.74805, 1065.31873);
	    	Opened = true;
		}
		else
		{
			MoverObjeto(PCARCELVISITAS,1586.60913, -1516.06799, 1065.31873);
	    	Opened = false;
		}
	    return 1;
	}
	if(KeyPadID == KP_OficinaMilitar[0] || KeyPadID == KP_OficinaMilitar[1])
	{
	    if(InfoJugador[playerid][jLider] != IDLSEM) return GameTextForPlayer(playerid, "~r~acceso denegado", 3000, 3);

	    static
	        bool: Opened;

		if(!Opened)
		{
	    	MoverObjeto(POFICINAMILITAR,1338.87292, -1826.70618, 1564.96423);
	    	Opened = true;
		}
		else
		{
			MoverObjeto(POFICINAMILITAR, 1340.21289, -1826.70618, 1564.96423);
	    	Opened = false;
		}
	    return 1;
	}
	Loop(i, sizeof(CeldasLSPD), 0)
	{
	    if (KeyPadID == KP_Celda[i])
	    {
	        if (!EsLSPD(playerid))
	            return GameTextForPlayer(playerid, "~r~ACCESO DENEGADO", 3000, 3);

		    static
		        bool: CellState [sizeof(CeldasLSPD)];

	        if (CellState[i] == false)
	        {
	            CellState[i] = true;
	            MoverObjeto(OBJ_Celda[i], CeldasLSPD[i][3], CeldasLSPD[i][4], CeldasLSPD[i][5]);
			}
			else
			{
	            CellState[i] = false;
	            MoverObjeto(OBJ_Celda[i], CeldasLSPD[i][0], CeldasLSPD[i][1], CeldasLSPD[i][2]);
			}
			return 1;
		}
	}
	Loop(i, sizeof(PuertasCarcel), 0)
	{
	    if (KeyPadID == KP_Carcel[i][0] || KeyPadID == KP_Carcel[i][1])
	    {
	        if (!EsLSPD(playerid))
	            return GameTextForPlayer(playerid, "~r~ACCESO DENEGADO", 3000, 3);

	        static
	            bool: DoorState [sizeof(PuertasCarcel)];

			if (DoorState[i] == false)
			{
			    DoorState[i] = true;
	        	MoverObjeto(OBJ_Carcel[i], PuertasCarcel[i][12], PuertasCarcel[i][13], PuertasCarcel[i][14]);
			}
			else
			{
			    DoorState[i] = false;
	        	MoverObjeto(OBJ_Carcel[i], PuertasCarcel[i][8], PuertasCarcel[i][9], PuertasCarcel[i][10]);
			}
			return 1;
		}
	}
	Loop(i, sizeof(PuertasComisaria), 0)
	{
	    if (KeyPadID == KP_Comisaria[i][0] || KeyPadID == KP_Comisaria[i][1])
	    {
	        if (!EsLSPD(playerid))
	            return GameTextForPlayer(playerid, "~r~ACCESO DENEGADO", 3000, 3);

	        static
	            bool: DoorState [sizeof(PuertasComisaria)];

			if (DoorState[i] == false)
			{
			    DoorState[i] = true;
	        	MoverObjeto(OBJ_Comisaria[i], PuertasComisaria[i][12], PuertasComisaria[i][13], PuertasComisaria[i][14]);
			}
			else
			{
			    DoorState[i] = false;
	        	MoverObjeto(OBJ_Comisaria[i], PuertasComisaria[i][8], PuertasComisaria[i][9], PuertasComisaria[i][10]);
			}
			return 1;
		}
	}
	Loop(i, sizeof(KP_CeldaLSEM), 0)
	{
	    if (KeyPadID == KP_CeldaLSEM[i])
	    {
	        if (!EsMilitar(playerid))
	            return GameTextForPlayer(playerid, "~r~ACCESO DENEGADO", 3000, 3);

	        static
	            bool: DoorState [sizeof(KP_CeldaLSEM)],
				oldOppened [sizeof(KP_CeldaLSEM)];

			if (oldOppened[i] > gettime())
				return 1;

			oldOppened[i] = gettime() + 3;

		    new
		        Float: x, Float: y, Float: z;

			GetDynamicObjectPos(PCELDALSEM[i], x, y, z);

			if (DoorState[i] == false)
			{
			    DoorState[i] = true;
	        	x += 1.4;
			}
			else
			{
			    DoorState[i] = false;
	        	x -= 1.4;
			}
			MoverObjeto(PCELDALSEM[i], x, y, z);
			return 1;
		}
	}
	return 1;
}

CALLBACK: MostrarTutorial(playerid)
{
	if(InfoJugador[playerid][jRegistrado]) return 1;

	new
	    i = GetPVarInt(playerid, "Parte_tutorial");

	if(i < sizeof(Tutorial))
	{
	    if(!i)
	    {
			TutoCuerpo[playerid] = CreatePlayerTextDraw(playerid, 20.000000, 160.000000, "_");
			PlayerTextDrawBackgroundColor(playerid, TutoCuerpo[playerid], 255);
			PlayerTextDrawFont(playerid, TutoCuerpo[playerid], 1);
			PlayerTextDrawLetterSize(playerid, TutoCuerpo[playerid], 0.250000, 1.500000);
			PlayerTextDrawColor(playerid, TutoCuerpo[playerid], -1);
			PlayerTextDrawSetOutline(playerid, TutoCuerpo[playerid], 1);
			PlayerTextDrawSetProportional(playerid, TutoCuerpo[playerid], 1);
			PlayerTextDrawUseBox(playerid, TutoCuerpo[playerid], 1);
			PlayerTextDrawBoxColor(playerid, TutoCuerpo[playerid], 4485504);
			PlayerTextDrawTextSize(playerid, TutoCuerpo[playerid], 191.000000, 0.000000);
			PlayerTextDrawSetSelectable(playerid, TutoCuerpo[playerid], 0);

			TutoTitulo[playerid] = CreatePlayerTextDraw(playerid, 37.000000, 145.000000, "_");
			PlayerTextDrawBackgroundColor(playerid, TutoTitulo[playerid], 255);
			PlayerTextDrawFont(playerid, TutoTitulo[playerid], 3);
			PlayerTextDrawLetterSize(playerid, TutoTitulo[playerid], 0.300000, 1.500000);
			PlayerTextDrawColor(playerid, TutoTitulo[playerid], -1835756160);
			PlayerTextDrawSetOutline(playerid, TutoTitulo[playerid], 1);
			PlayerTextDrawSetProportional(playerid, TutoTitulo[playerid], 1);
			PlayerTextDrawSetSelectable(playerid, TutoTitulo[playerid], 0);

			PlayerTextDrawShow(playerid, TutoCuerpo[playerid]);
			PlayerTextDrawShow(playerid, TutoTitulo[playerid]);

			SetPlayerInterior(playerid, 0);
			TogglePlayerSpectating(playerid, true);

		}

	    new
	        String[500];

		strunpack(String, Tutorial[i][tutCuerpo], 500);

		PlayerTextDrawSetString(playerid, TutoCuerpo[playerid], String);

	    SetTimerEx("MostrarTutorial", strlen(String)*60, false, "i", playerid);

		strunpack(String, Tutorial[i][tutTitulo], 500);

		PlayerTextDrawSetString(playerid, TutoTitulo[playerid], String);

	    SetPVarInt(playerid, "Parte_tutorial", i+1);

	    SetPlayerCameraPos(playerid, Tutorial[i][tutCamPos][0], Tutorial[i][tutCamPos][1], Tutorial[i][tutCamPos][2]);
	    SetPlayerCameraLookAt(playerid, Tutorial[i][tutCamPos][3], Tutorial[i][tutCamPos][4], Tutorial[i][tutCamPos][5]);
	}
	else
	{
		DeletePVar(playerid, "Parte_tutorial");
		OnPlayerFinishTut(playerid);
		PlayerTextDrawDestroy(playerid, TutoCuerpo[playerid]);
		PlayerTextDrawDestroy(playerid, TutoTitulo[playerid]);
	}
	return 1;
}

stock IsValidGangZone(ID)
{
	return (Bit_Get(ValidGZ, ID)) ? (true) : (false);
}

stock MostrarMenuNegocio(playerid, negid)
{
	if(negid == INVALID_BUSINESS_ID)
	    return 1;

	new
	    type = InfoNegocio[negid][nTipo],
	    SmallString[50],
		BigString[sizeof(SmallString)*MAX_STOCK_TYPE],
		total = GetProductsAmmount(type);

	switch (type)
	{
	    case N_247, N_ESTACION, N_BOLICHE:
	    {
			for (new i; i < total; i++)
			{
			    A_Format(SmallString, "%s		$%d		%d\n", ProductInfo[type][i][productName], ProductInfo[type][i][productPrice], InfoNegocio[negid][nStock][i]);
			    strcat(BigString, SmallString);
			}
			Dialog(playerid, dElegirBebida, DIALOG_STYLE_LIST, ""#CNARANJA"Nombre                              "#CVERDE"Precio                "#CGRIS"Stock", BigString, "Comprar", "Cancelar");
		}
	    case N_FARMACIA:
	    {
			for (new i; i < total; i++)
			{
			    A_Format(SmallString, "%s		$%d		%d\n", ProductInfo[type][i][productName], ProductInfo[type][i][productPrice], InfoNegocio[negid][nStock][i]);
			    strcat(BigString, SmallString);
			}
			Dialog(playerid, dCMedicamentos, DIALOG_STYLE_LIST, ""#CNARANJA"Nombre                              "#CVERDE"Precio                "#CGRIS"Stock", BigString, "Comprar", "Cancelar");
		}
	    case N_TECNOLOGIA:
	    {
			for (new i; i < total-1; i++)
			{
			    A_Format(SmallString, "%s		$%d		%d\n", ProductInfo[type][i][productName], ProductInfo[type][i][productPrice], InfoNegocio[negid][nStock][i]);
			    strcat(BigString, SmallString);
			}
			Dialog(playerid, dCTecnologia, DIALOG_STYLE_LIST, ""#CNARANJA"Nombre                              "#CVERDE"Precio                "#CGRIS"Stock", BigString, "Comprar", "Cancelar");
		}
		case N_COMIDA:
		{
		    if(IsPlayerInRangeOfPoint(playerid,2,369.5210,-6.5896,1001.8589)) // Polleria
		    {
				A_Format(SmallString, "Gaseosa\t\t$%d\t\t%d\n", PRECIO_GASEOSA, InfoNegocio[negid][nStock][0]);
				strcat(BigString, SmallString);

				A_Format(SmallString, "Pollo chico\t\t$%d\t\t%d\n", PRECIO_MENUCHICO, InfoNegocio[negid][nStock][1]);
				strcat(BigString, SmallString);

				A_Format(SmallString, "Pollo grande\t\t\t$%d\t\t%d\n", PRECIO_MENUGRANDE, InfoNegocio[negid][nStock][2]);
				strcat(BigString, SmallString);

				Dialog(playerid, dCComida_po, DIALOG_STYLE_LIST, ""#CNARANJA"Nombre                              "#CVERDE"Precio                "#CGRIS"Stock", BigString, "Comprar", "Cancelar");
		    }
		    else if(IsPlayerInRangeOfPoint(playerid,2,373.9077,-119.6210,1001.4922)) // Pizzeria
		    {
				A_Format(SmallString, "Gaseosa\t\t$%d\t\t%d\n", PRECIO_GASEOSA, InfoNegocio[negid][nStock][0]);
				strcat(BigString, SmallString);

				A_Format(SmallString, "Porción chica\t\t$%d\t\t%d\n", PRECIO_MENUCHICO, InfoNegocio[negid][nStock][1]);
				strcat(BigString, SmallString);

				A_Format(SmallString, "Porción grande\t\t\t$%d\t\t%d\n", PRECIO_MENUGRANDE, InfoNegocio[negid][nStock][2]);
				strcat(BigString, SmallString);

				Dialog(playerid, dCComida_pi, DIALOG_STYLE_LIST, ""#CNARANJA"Nombre                              "#CVERDE"Precio                "#CGRIS"Stock", BigString, "Comprar", "Cancelar");
		    }
		    else if(IsPlayerInRangeOfPoint(playerid,2,375.7025,-68.0881,1001.5151)) // BurguerShot
		    {
				A_Format(SmallString, "Gaseosa\t\t$%d\t\t%d\n", PRECIO_GASEOSA, InfoNegocio[negid][nStock][0]);
				strcat(BigString, SmallString);

				A_Format(SmallString, "Hamburguesa chica\t$%d\t\t%d\n", PRECIO_MENUCHICO, InfoNegocio[negid][nStock][1]);
				strcat(BigString, SmallString);

				A_Format(SmallString, "Hamburguesa grande\t$%d\t\t%d\n", PRECIO_MENUGRANDE, InfoNegocio[negid][nStock][2]);
				strcat(BigString, SmallString);

				Dialog(playerid, dCComida_h, DIALOG_STYLE_LIST, ""#CNARANJA"Nombre                              "#CVERDE"Precio                "#CGRIS"Stock", BigString, "Comprar", "Cancelar");
		    }
		}
	}
	return 1;
}

stock ActualizarStockNegocio(negid)
{
	if (0 <= negid < MAX_NEGOCIOS)
	{
		new
		    File[20];
		A_Format(File, "Negocios/%d.ini", negid);
		new
			INI:Arch = INI_Open(File);
		INI_SetTag(Arch, "data");
		for (new i; i < MAX_STOCK_NEGOCIO; i++)
		{
			A_Format(File, "Stock%d", i);
			INI_WriteInt(Arch, File, InfoNegocio[negid][nStock][i]);
		}
		INI_Close(Arch);
		return 1;
	}
	return 0;
}

stock SacarStockNegocio(negid, stocktype)
{
	if (0 <= negid < MAX_NEGOCIOS)
	{
	    if (0 <= stocktype < MAX_STOCK_NEGOCIO)
	    {
	    	if(!InfoNegocio[negid][nStock][stocktype])
	    	    return 0;

	    	InfoNegocio[negid][nStock][stocktype] --;

			new
			    File[20];

			A_Format(File, "Negocios/%d.ini", negid);
			new
				INI:Arch = INI_Open(File);
			INI_SetTag(Arch, "data");
			A_Format(File, "Stock%d", stocktype);
			INI_WriteInt(Arch, File, InfoNegocio[negid][nStock][stocktype]);
			INI_WriteInt(Arch, "Dinero", InfoNegocio[negid][nDinero]);
			INI_Close(Arch);
		}
	}
	return 1;
}

stock SetNegStock(negid, index, astock)
{
	InfoNegocio[negid][nStock][index] = astock;
	return 1;
}


stock IsValidRank(ID_FAC, Index)
{
	if(ID_FAC >= MAX_FACCIONES || ID_FAC < 1 || Index < 0)
	{
	    return 0;
	}

	return (Index < InfoFaccion[ID_FAC][fRangos]);
}

CALLBACK: Robar(playerid, item)
{
	if(!IsPlayerConnected(playerid)) return 1;
	switch(item)
	{
		case 0:
		{
		    new rMSG = random(5), MSG[90];

		    new
		        NegID = ID_Negocio(playerid);

		    if(rMSG == 0) 	   MSG = "¡No me hagas daño! Te daré todo el dinero";
		    else if(rMSG == 1) MSG = "¡No me lastimes porfavor! te daré todo.";
		    else if(rMSG == 2) MSG = "Tranquilizate, solo espera que te dare el dinero";
		    else if(rMSG == 3) MSG = "Tranquilo, no me lastimes. Aqui te doy todo";
		    else if(rMSG == 4) MSG = "¡No por favor! Tengo familia, no me mates. Te dare todo.";

		    strins(MSG, "Vendedor(a): ", 0);
			ProxDetector(20,playerid,MSG,-1,Hablar,Hablar2,Hablar3,Hablar4);

		    foreach(Player,i)
		    {
				if(EsLSPD(i))
				{
					MensajeF(i,C_INFO, "[TORRE DE CONTROL] "#CBLANCO"¡El Negocio "#CVERDE"%s "#CBLANCO"fue robado!. Sus coordenadas se marcaron en el mapa "#CROJO"(Punto rojo)", InfoNegocio[ID_Negocio(playerid)][nNombre]);
					CheckpointGPS(i, InfoNegocio[NegID][nEntrada_x], InfoNegocio[NegID][nEntrada_y], InfoNegocio[NegID][nEntrada_z], 1.0);
				}
			}
			//ApplyAnimation(NPC_NEGOCIO[NegID], "ped", "cower", 4.0, 1, 0, 0, 0, 0);
			SetTimerEx("Robar", 4000, false, "ii", playerid, 1);
		}
		case 1:
		{
		    new
				Val = 350+random(2000),
				NegID = ID_Negocio(playerid);

			if(Val > InfoNegocio[NegID][nDinero])
			{
			    Val = InfoNegocio[NegID][nDinero];
			}

			InfoNegocio[NegID][nDinero] -= Val;

		    foreach(Player,i)
		    {
				if(ID_Negocio(i) == NegID)
				{
					MensajeF(i, C_ME, "* Vendedor(a) abre la caja, y le da al ladron $%d *",Val);
				}
			}
			SetPVarInt(playerid, "DINERO_ROBADO", Val);
			SetPlayerWantedLevel(playerid, 2);
			SetTimerEx("Robar", 60000, false, "ii", playerid, 2);
		}
		case 2:
		{

			DeletePVar(playerid,"ROBANDO");
			SetPVarInt(playerid,"BUSCADO",1);

			KillTimer2(playerid, TIMER_CANCELARR);
			Timer_Jugador[playerid][TIMER_CANCELARR] = SetTimerEx("CancelarRobo", 60000 * 7, false, "i", playerid);

			new
				MaxDist = random(sizeof EntregaLadron);

			SetPlayerCP(playerid, CP_ROBO, EntregaLadron[MaxDist][0], EntregaLadron[MaxDist][1], EntregaLadron[MaxDist][2], 3);

			Mensaje(playerid,-1,"Ya cumpliste el minuto, te puedes retirar del negocio.");
			Mensaje(playerid,-1,"Se te marcó en el mapa la ubicación en la que debes dejar lo robado");
			return 1;
		}
	}
	return 1;
}

CALLBACK: Robo_RecibirDinero(playerid, npcid)
{
	RemovePlayerAttachedObject(npcid, 0);
	return ApplyAnimation(playerid,"INT_SHOP","shop_shelf",3,0,0,1,0,3000,true);
}

public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
	new VehID = GetPlayerVehicleID(playerid);
	PlayerCP<CP_ROBO>:
	{
		LiberarDePolicia(playerid);
		GivePlayerMoney(playerid, GetPVarInt(playerid,"DINERO_ROBADO"));
		MensajeF(playerid,-1,"El Robo, fue realizado con éxito. Te pagaron "#CVERDE"$%d", GetPVarInt(playerid,"DINERO_ROBADO"));
		DeletePVar(playerid,"DINERO_ROBADO");
	    DestroyPCP(playerid, CP_ROBO);
	    return 1;
	}
	PlayerCP<CP_LICENCIAVEH>:
	{
	    if(!IsPlayerInAnyVehicle(playerid)) return Error(playerid,"¡En el vehículo!");
		SetPVarInt (playerid, "licPOINTS", GetPVarInt (playerid, "licPOINTS") + 1);
		switch (GetPVarInt (playerid, "licTIPO"))
		{
			case 1:
			{
				SetPlayerCP (playerid, CP_LICENCIAVEH, LIC_Check2);
				SetPVarInt (playerid, "licTIPO",2);
			}
			case 2:
			{
				SetPlayerCP(playerid, CP_LICENCIAVEH, LIC_Check3);
				SetPVarInt(playerid, "licTIPO", 3);
			}
			case 3:
			{
				SetPlayerCP (playerid, CP_LICENCIAVEH, LIC_Check4);
				SetPVarInt (playerid, "licTIPO", 4);
			}
			case 4:
			{
				SetPlayerCP (playerid, CP_LICENCIAVEH, LIC_Check1);
				SetPVarInt (playerid, "licTIPO", 1);
			}
		}
		return 1;
	}
	PlayerCP<CP_GPS>:
	{
	    GameTextForPlayer(playerid,"~g~~h~GPS: ~w~llegaste a tu destino", 4000, 3);
	    DestroyPCP(playerid,CP_GPS);
	    return 1;
	}
	PlayerCP<CP_CAMIONERO>:
	{
		if(EsCamionero(playerid) && EsCamion(VehID))
		{
			if(GetPVarInt(playerid,"NivelCamionero") == 2)
			{
			    if(GetPVarInt(playerid, "Chofer_Camion") != VehID)
			    {
			        RemovePlayerFromVehicle(playerid);
			        return Error(playerid, "Este no es tu camión.");
				}
			    if(GetPVarInt(playerid,"PasoEntrega") == 3)
			    {
			        new
		 		        TrailerID = GetVehicleTrailer(VehID);

					Mensaje(playerid,C_INFO,"> "#CBLANCO"Ya entregaste la carga, ahora regresa para devolver el camión");
					SetPlayerCP(playerid,CP_CAMIONERO, -508.8466,-549.7501,25.5234, 5.0);
					veh_respawn(TrailerID);
					SetPVarInt(playerid, "PasoEntrega", 4);
					return 1;
			    }
			    if(GetPVarInt(playerid,"PasoEntrega") == 4)
			    {
			        new
			 			RVal;

					switch(InfoCamion[VehID][camCarga])
					{
					    case 435: RVal = 1350;
					    case 450: RVal = 2450;
					    case 591: RVal = 1900;
					    case 0:
					    {
					        return Error(playerid, "¡No tienes la carga");
						}
					}
				    Mensaje(playerid,-1,"• Trabajo "#CVERDE"finalizado "#CBLANCO"con éxito.");

					Mensaje(playerid,  1,"==================================");
					MensajeF(playerid,-1,".. Paga: "#CVERDE"$%d", RVal);
					Mensaje(playerid,  1,"==================================");

					DeletePVar(playerid,"NivelCamionero");
					GivePlayerMoney(playerid,RVal);
					DeletePVar(playerid,"Chofer_Camion");
					DeletePVar(playerid,"PasoEntrega");
					alm(InfoCamion[VehID][camChofer]," ");
					InfoCamion[VehID][camCarga] = 0;
					InfoJugador[playerid][jEntregas] ++;
					DestroyPCP(playerid,CP_CAMIONERO);
					RemovePlayerFromVehicle(playerid);
					veh_respawn(VehID);
					TrabajosPorHora[playerid][ID_Camionero] ++;
					return 1;
			    }
				return 1;
			}
			if(GetPVarInt(playerid,"PasoEntrega") == 0)
	 		{
				if(strlen(InfoCamion[VehID][camChofer]) > 3) return Error(playerid,"¡Este camión ya tiene chofer!");
				Dialog(playerid,dCargarCamion,DIALOG_STYLE_LIST,""#CBLANCO"¿Qué desea transportar?","Productos generales (24/7)\nRopa y accesorios\nComida y bebida","Aceptar","");
				CongelarEx(playerid);
			}
	 		else if(GetPVarInt(playerid,"PasoEntrega") == 2)
	 		{
	 		    new
				 	Float: VehHP;

				GetVehicleHealth(VehID, VehHP);

			    new
			        Percent_damage = floatround(VehHP/10),
			        Dinero_inicial = 450;

				Dinero_inicial -= (300-(Percent_damage*3));
			    Mensaje(playerid,-1,"• Trabajo "#CVERDE"finalizado "#CBLANCO"con éxito.");

				GivePlayerMoney(playerid, Dinero_inicial);
				Mensaje(playerid,  1,"=======================================================");
				MensajeF(playerid,-1,".. Paga inicial: "#CVERDE"$450 "#CBLANCO"| Estado del vehículo: "#CINFO"%d%%", Percent_damage);
				MensajeF(playerid,-1,".. Descuento por daños del vehículo: "#CROJO"-$%d", (300-(Percent_damage*3)));
				MensajeF(playerid,-1,".. Paga final: "#CVERDE"$%d", Dinero_inicial);
				Mensaje(playerid,  1,"=======================================================");

				DeletePVar(playerid,"Chofer_Camion");
				DeletePVar(playerid,"PasoEntrega");
				alm(InfoCamion[VehID][camChofer]," ");
				InfoCamion[VehID][camCarga] = 0;
				InfoJugador[playerid][jEntregas] ++;
				DestroyPCP(playerid,CP_CAMIONERO);
				RemovePlayerFromVehicle(playerid);
				veh_respawn(VehID);
				TrabajosPorHora[playerid][ID_Camionero] ++;
				if(InfoJugador[playerid][jNivelTrabajo] == 1)
				{
				    if(InfoJugador[playerid][jEntregas] >= 65)
				    {
				        Mensaje(playerid, -1, "Felicitaciones, ¡hiciste "#CVERDE"65 "#CBLANCO"entregas, y subiste tu nivel de camionero!");
				        Mensaje(playerid, -1, "Demostraste que sirves para entregas más difíciles, se te marco en el mapa donde debes presentarte. "#CINFO"(Camionero: Fase dos)");
						CheckpointGPS(playerid,-508.8466,-549.7501,25.5234, 5.0);
						InfoJugador[playerid][jNivelTrabajo] = 2;
					}
				}
				return 1;
	   		}
		    if(GetPVarInt(playerid,"PasoEntrega") == 1)
		    {
		        SetTimerEx("VolverCamion",10000,false,"i",playerid);
		        CongelarEx(playerid);
		        TextoJugador(playerid,"~w~descargando ~p~camion...",8000,3);
		        return 1;
		    }
		}
		return 1;
	}
	PlayerCP<CP_BASURERO>:
	{
		if(GetPVarInt(playerid,"TerminoBasura") && EsVehBasurero(VehID))
		{
 		    new
			 	Float: VehHP;

			GetVehicleHealth(VehID, VehHP);

		    new
		        Percent_damage = floatround(VehHP/10),
		        Dinero_inicial = (InfoJugador[playerid][jNivelTrabajo] == 1) ? 1500 : 2400;

			Dinero_inicial -= (100-Percent_damage)*7;

		    Mensaje(playerid,-1,"• Trabajo "#CVERDE"finalizado "#CBLANCO"con éxito.");

			GivePlayerMoney(playerid, Dinero_inicial);

		    if(InfoJugador[playerid][jNivelTrabajo] == 1)
		    {
				Mensaje(playerid,  1,"=======================================================");
				MensajeF(playerid,-1,".. Paga inicial: "#CVERDE"$1500 "#CBLANCO"| Estado del vehículo: "#CINFO"%d%%", Percent_damage);
				MensajeF(playerid,-1,".. Descuento por daños del vehículo: "#CROJO"$%d", 1500-Dinero_inicial);
				MensajeF(playerid,-1,".. Paga final: "#CVERDE"$%d", Dinero_inicial);
				Mensaje(playerid,  1,"=======================================================");
			}
			else if(InfoJugador[playerid][jNivelTrabajo] == 2)
		    {
				Mensaje(playerid,  1,"=======================================================");
				MensajeF(playerid,-1,".. Paga inicial: "#CVERDE"$2400 "#CBLANCO"| Estado del vehículo: "#CINFO"%d%%", Percent_damage);
				MensajeF(playerid,-1,".. Descuento por daños del vehículo: "#CROJO"$%d", 2400-Dinero_inicial);
				MensajeF(playerid,-1,".. Paga final: "#CVERDE"$%d", Dinero_inicial);
				Mensaje(playerid,  1,"=======================================================");
			}

			DeletePVar(playerid,"TerminoBasura");
			DeletePVar(playerid,"CAMION_BASURA");
			DeletePVar(playerid,"B_ParteLimpieza");
			InfoJugador[playerid][jBarridas] ++;
			if(InfoJugador[playerid][jBarridas] > 10 && InfoJugador[playerid][jNivelTrabajo] == 1)
			{
				Mensaje(playerid, -1,"Felicitaciones, subiste a nivel "#CVERDE"2 "#CBLANCO"en tu trabajo: "#CAZUL2"Basurero");
				Mensaje(playerid, -1,"Ahora, en tus próximas Barridas, recibirás más dinero.");
				InfoJugador[playerid][jNivelTrabajo] = 2;
			}
			veh_respawn(GetPlayerVehicleID(playerid));
			DestroyPCP(playerid, CP_BASURERO);
			TrabajosPorHora[playerid][ID_Basurero] ++;
			return 1;
		}
		return 1;
	}
	PlayerCP<CP_REPARTIDORB>:
	{
		if(GetPVarInt(playerid,PVarRepartidorB) && EsBiciRepartidora(VehID))
		{
		    new i = GetPVarInt(playerid,PVarRepartidorB);
			if(i == 37)
			{
				DestroyPCP(playerid,CP_REPARTIDORB);
			    DeletePVar(playerid,PVarRepartidorB);

			    Mensaje(playerid,-1,"• Trabajo "#CVERDE"finalizado "#CBLANCO"con éxito.");
			    if(InfoJugador[playerid][jNivelTrabajo] == 1)
			    {
					Mensaje(playerid,  1,"==================================");
					Mensaje(playerid, -1,".. Paga: "#CVERDE"$500");
					Mensaje(playerid,  1,"==================================");
					GivePlayerMoney(playerid,500);
				}
				else if(InfoJugador[playerid][jNivelTrabajo] == 2)
				{
					Mensaje(playerid,  1,"==================================");
					Mensaje(playerid, -1,".. Paga: "#CVERDE"$850");
					Mensaje(playerid,  1,"==================================");
					GivePlayerMoney(playerid,850);
				}
				InfoJugador[playerid][jRepartidas] ++;
				TrabajosPorHora[playerid][ID_RepartidorB] ++;

				if(InfoJugador[playerid][jRepartidas] > 20 && InfoJugador[playerid][jNivelTrabajo] == 1)
				{
					Mensaje(playerid, -1,"Felicitaciones, subiste a nivel "#CVERDE"2 "#CBLANCO"en tu trabajo: "#CAZUL2"Repartidor");
					Mensaje(playerid, -1,"Ahora, en tus próximas jornadas, recibirás más dinero. "#CINFO"($850)");
					InfoJugador[playerid][jNivelTrabajo] = 2;
				}
			    return 1;
			}
		    SetPlayerCP(playerid,CP_REPARTIDORB,PosRepartidorBici[i][Posx],PosRepartidorBici[i][Posy],PosRepartidorBici[i][Posz],4);
			AutoRol(playerid,"agarra un diario de su bolsa y lo tira");
			SetPVarInt(playerid,PVarRepartidorB,i+1);
			return 1;
		}
		return 1;
	}
	PlayerCP<CP_REPARTIDORP>:
	{
	    switch(GetPVarInt(playerid, "Parte_RepartirP"))
	    {
	        case 0: // checkpoint tomar pizza
			{
			    new
			        HouseID = Iter_Random(Casas),
					Float: Dist,
					Time,
					i;

				while(GetPlayerDistanceFromPoint(playerid, InfoCasa[HouseID][cEntrada_x], InfoCasa[HouseID][cEntrada_y],  InfoCasa[HouseID][cEntrada_z]) < 500.0 || HouseID < 3)
				{
				    HouseID = Iter_Random(Casas);
				    i ++;
				    if (i > 100)
				    {
				        HouseID = 200;
					}
					break;
				}

                Dist = GetPlayerDistanceFromPoint(playerid, InfoCasa[HouseID][cEntrada_x], InfoCasa[HouseID][cEntrada_y],  InfoCasa[HouseID][cEntrada_z]);
                Time = floatround(Dist/7);

   			    AutoRol(playerid, "recibe una pizza");
			    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

				SetPVarInt(playerid, "Casa_RepartirP", HouseID);
				SetPVarInt(playerid, "Parte_RepartirP", 1);
				SetPVarInt(playerid, "Tiempo_RepartirP", Time);

				TextDrawShowForPlayer(playerid, PizzaTiempo);

				new
				    PlayerText: Tiempo;

                Tiempo = CreatePlayerTextDraw(playerid, 99.000000, 304.000000, "    Tiempo: ~r~Calculando..");
				PlayerTextDrawAlignment(playerid, Tiempo, 2);
				PlayerTextDrawBackgroundColor(playerid, Tiempo, 255);
				PlayerTextDrawFont(playerid, Tiempo, 1);
				PlayerTextDrawLetterSize(playerid, Tiempo, 0.400000, 2.000000);
				PlayerTextDrawColor(playerid, Tiempo, -1);
				PlayerTextDrawSetOutline(playerid, Tiempo, 0);
				PlayerTextDrawSetProportional(playerid, Tiempo, 1);
				PlayerTextDrawSetShadow(playerid, Tiempo, 1);
				PlayerTextDrawSetSelectable(playerid, Tiempo, 0);

				PlayerTextDrawShow(playerid, Tiempo);

				SetPVarInt(playerid, "TD_RepartirP", _:Tiempo);

				KillTimer2(playerid, TIMER_REPARTIRPIZZA);
				Timer_Jugador[playerid][TIMER_REPARTIRPIZZA] = SetTimerEx("BajaTiempo_Pizza", 1000, true, "i", playerid);
				SetPlayerAttachedObject(playerid, SLOT_MANODERECHA, 1582, 5, 0.1889, 0.1099, 0.0880, 98.1999, 7.4999, -107.0999, 1.0000, 1.0000, 1.0000);
				SetPlayerCP(playerid, CP_REPARTIDORP, InfoCasa[HouseID][cEntrada_x], InfoCasa[HouseID][cEntrada_y], InfoCasa[HouseID][cEntrada_z], 2);
				Error(playerid, "Sube a una moto y dirigete al ~r~checkpoint");
			}
			case 1:
			{
			    if(IsPlayerInAnyVehicle(playerid)) return Error(playerid, "Debes bajarte el vehículo para entregar la pizza");
			    if( !(GetPlayerSpecialAction(playerid) & SPECIAL_ACTION_CARRY) ) return Error(playerid, "¿Y la ~y~pizza~w~?");
			    new
			        Val = GetPVarInt(playerid, "Perdio_RepartirP");

			    if(!Val)
				{
					Error(playerid, "~g~Bien hecho~w~, entregaste la ~y~pizza ~w~a tiempo");
				}
				else
				{
					Error(playerid, "Llegaste ~r~tarde, ~w~se te descontaron ~g~$100 ~w~por el retraso.~n~Vuelve para recibir el pago!");
				}

				KillTimer2(playerid, TIMER_REPARTIRPIZZA);

				PlayerTextDrawDestroy(playerid, PlayerText: GetPVarInt(playerid, "TD_RepartirP") );
				TextDrawHideForPlayer(playerid, PizzaTiempo);

			 	DeletePVar(playerid, "TD_RepartirP");

				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				RemovePlayerAttachedObject(playerid, SLOT_MANODERECHA);

				SetPlayerCP(playerid, CP_REPARTIDORP, 2104.5315,-1810.7769,13.5547, 2);
				SetPVarInt(playerid, "Parte_RepartirP", 2);
			}
			case 2:
			{
			    new
			        Pago = 100,
			        HouseID = GetPVarInt(playerid, "Casa_RepartirP"),
					Float: Dist = GetPlayerDistanceFromPoint(playerid, InfoCasa[HouseID][cEntrada_x], InfoCasa[HouseID][cEntrada_y], InfoCasa[HouseID][cEntrada_z]);

			    Mensaje(playerid,-1, "• Trabajo "#CVERDE"finalizado "#CBLANCO"con éxito.");
				Mensaje(playerid, 1, "==================================");
				Mensaje(playerid,-1, ".. Paga inicial: "#CVERDE"$100");

				if(GetPVarInt(playerid, "Perdio_RepartirP"))
				{
					MensajeF(playerid,-1,".. Descuento por retraso: "#CROJO"-$100", Pago);

				    Pago -= 100;
				}

				MensajeF(playerid,-1,".. Propina: "#CVERDE"$%d", floatround(Dist*0.10));

				Pago += floatround(Dist*0.10);

				MensajeF(playerid,-1,".. Paga final: "#CVERDE"$%d", Pago);
				Mensaje(playerid,  1,"==================================");
				GivePlayerMoney(playerid,Pago);

				DeletePVar(playerid, "Tiempo_RepartirP");
				DeletePVar(playerid, "Casa_RepartirP");
				DeletePVar(playerid, "Parte_RepartirP");
				DeletePVar(playerid, "Veh_RepartirP");
				DeletePVar(playerid, "Perdio_RepartirP");

				DestroyPCP(playerid, CP_REPARTIDORP);
			}
		}
	}
	PlayerCP<CP_CAMIONEROFAC>:
	{
		new
		    Paso = GetPVarInt(playerid, "CAMFAC.PASO"),
			TrailerID = GetVehicleTrailer(VehID);

		if (Paso == 1)
		{
			if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER && VehID == GetPVarInt(playerid, "CAMFAC.VEH") && TrailerID == GetPVarInt(playerid, "CAMFAC.TRAILER"))  //  Llegar a fábrica
			{
				CongelarEx (playerid);
			    SetTimerEx("CargarCamionFac", 12000, false, "i", playerid);
				GameTextForPlayer(playerid, "~w~espere mientras el camion se ~r~carga...", 20000, 3);
				return 1;
			}
			else
			{
				return Error(playerid, "No estás con el camion en el que aceptaste el pedido, o no tienes la carga.");
			}
		}
		else if (Paso == 2) // Llenar negocio
		{
			if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER && VehID == GetPVarInt(playerid, "CAMFAC.VEH") && TrailerID == GetPVarInt(playerid, "CAMFAC.TRAILER"))  //  Llegar a fábrica
			{
				new
				    pedido = -1;

				for (new i; i < MAX_PEDIDOS_CAMIONEROS; i++)
				{
				    if (PedidoCamioneros[i][p_PlayerID] == playerid)
				    {
				        pedido = i;
						break;
					}
				}

				if (pedido == -1)
				    return Error(playerid, "~r~Error: Pedido no encontrado.");

				new
				    NegID = PedidoCamioneros[pedido][p_NegID];

				for (new i; i < MAX_STOCK_NEGOCIO; i++)
				{
					InfoNegocio[NegID][nStock][i] += PedidoCamioneros[pedido][p_Stock][i];
				}
				ActualizarStockNegocio(NegID);

				foreach(Player, i)
				{
				    if (EsDuenoNegocio(i, NegID))
				    {
				        MensajeF(i, -1, "El camionero "#CAMARILLO"%s "#CBLANCO"está reponiendo los productos de tu "#CVERDE"%s.", NombreJugador_(playerid), InfoNegocio[NegID][nNombre]);
				        break;
					}
				}
				BorrarPedidoCamioneros(pedido);
				GameTextForPlayer(playerid, "~w~espere mientras el camion se ~g~descarga...", 10000, 3);
				CongelarEx(playerid, 9);
				DestroyPCP(playerid, CP_CAMIONEROFAC);

				DeletePVar(playerid, "CAMFAC.PASO");
				DeletePVar(playerid, "CAMFAC.VEH");
				DeletePVar(playerid, "CAMFAC.TRAILER");

				MensajeFaccionF(IDCAMIONEROS, ""#CNARANJA"[Facción] "#CINFO"%s "#CBLANCO"completó el pedido nº %d.", NombreJugador_(playerid), pedido);
		    	return 1;
			}
			else
			{
				return Error(playerid, "No estás con el camion que cargaste, o no tienes la carga.");
			}
		}
		else
		{
		    return Error(playerid, "~r~Error: Paso desconocido.");
		}
	}
	return 1;
}

CALLBACK: CargarCamionFac (playerid)
{
	Descongelar (playerid);

	new
	    NegID = -1;

	for (new i; i < MAX_PEDIDOS_CAMIONEROS; i++)
	{
	    if (PedidoCamioneros[i][p_PlayerID] == playerid)
	    {
	        NegID = PedidoCamioneros[i][p_NegID];
			break;
		}
	}
	if(NegID == -1)
	{
	    Error(playerid, "~r~Error: No se encontró el negocio.");
		DestroyPCP(playerid, CP_CAMIONEROFAC);
		return 1;
	}

	GameTextForPlayer(playerid, "~g~cargado", 3000, 3);

	Error(playerid, "El camión ya está ~g~cargado~w~, ahora dirigete al ~r~Negocio ~w~para cumplir el pedido.");

	SetPVarInt(playerid, "CAMFAC.PASO", 2);

	if (InfoNegocio[NegID][nEntrega_x] == 0.0)
	{
		SetPlayerCP(playerid, CP_CAMIONEROFAC, InfoNegocio[NegID][nEntrada_x], InfoNegocio[NegID][nEntrada_y], InfoNegocio[NegID][nEntrada_z], 10.0);
	}
	else
	{
		SetPlayerCP(playerid, CP_CAMIONEROFAC, InfoNegocio[NegID][nEntrega_x], InfoNegocio[NegID][nEntrega_y], InfoNegocio[NegID][nEntrega_z], 6.0);
	}
	return 1;
}

CALLBACK: BajaTiempo_Pizza(playerid)
{
	new
	    Val = GetPVarInt(playerid, "Tiempo_RepartirP"),
		string[40];

	Val -= 1;

	A_Format(string, "  Tiempo: ~b~~h~~h~%02d:%02d", (Val/60), (Val % 60) );

	SetPVarInt(playerid, "Tiempo_RepartirP", Val);

	PlayerTextDrawSetString(playerid, PlayerText: GetPVarInt(playerid, "TD_RepartirP"), string);

	if(!Val)
	{
	    SetPVarInt(playerid, "Perdio_RepartirP", true);
	    KillTimer2(playerid, TIMER_REPARTIRPIZZA);
		PlayerTextDrawSetString(playerid, PlayerText: GetPVarInt(playerid, "TD_RepartirP"), "Tiempo: ~r~00:00");
	}

	return 1;
}


CALLBACK: LiberarDePolicia(playerid)
{
	if(!IsPlayerConnected(playerid)) return 1;
	SetPlayerWantedLevel(playerid, 0);
	foreach(Player,i)
	{
	    if(EsLSPD(i))
	    {
	        SetPlayerMarkerForPlayer(i, playerid, 0xFFFFFF00);
	        Mensaje(i,-1, "El sospechoso que robó, se escapó.");
		}
	}
	DeletePVar(playerid,"BUSCADO");
	KillTimer2(playerid,TIMER_CANCELARR);
	return 1;
}

CALLBACK: CancelarRobo(playerid)
{
	DestroyPCP(playerid,CP_ROBO);
	DeletePVar(playerid, "BUSCADO");
	Mensaje(playerid,-1,"Fallaste el robo.");
	return 1;
}

stock KillTimer2(playerid,timerid)
{
	if(Timer_Jugador[playerid][timerid] != INVALID_TIMER_ID)
	{
		KillTimer(Timer_Jugador[playerid][timerid]);
		Timer_Jugador[playerid][timerid] = INVALID_TIMER_ID;
		return 1;
	}
	return 0;
}

stock DestroyPCP(playerid, index)
{
	if(0 <= index < MAX_PCP)
	{
		if(Checkpoint_Jugador[playerid][index] != PlayerCP:INVALID_PCP_ID)
		{
			DestroyDynamicCP(_:Checkpoint_Jugador[playerid][index]);
		 	Checkpoint_Jugador[playerid][index] = PlayerCP:INVALID_PCP_ID;
		 	return 1;
		}
	}
	else
	{
	    printf("BUG: Se intentó destruir un checkpoint (PCP) en un index inválido. (pid:%d-cpid:%d)", playerid, index);
	}
	return 0;
}

stock SetPlayerCP(playerid, index, Float:x, Float:y, Float:z, Float:size)
{
	if(0 <= index < MAX_PCP)
	{
		DestroyPCP(playerid, index);
		Checkpoint_Jugador[playerid][index] = PlayerCP:CreateDynamicCP(x, y, z, size, -1, -1, playerid, CHECKPOINT_STREAM);
		return 1;
	}
	else
	{
	    printf("BUG: Se intentó crear un checkpoint (PCP) en un index inválido. (pid:%d-cpid:%d)", playerid, index);
	}
	return 0;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
    if(InfoJugador[playerid][jAdmin] >= Colaborador)
	{
	    Para_Admin_Servicio
		SetPlayerPos(playerid, fX, fY, fZ);
		SetPlayerPosFindZ(playerid, fX, fY, fZ);
		return 1;
	}
    return 1;
}

public OnPlayerModelSelection(playerid, response, listid, modelid)
{
	if(GetPVarInt(playerid, "ComprandoRopa"))
	{
		if(0 <= modelid <= 299)
		{
		    if(!response)
		    {
			    DeletePVar(playerid, "ComprandoRopa");
				return 1;
			}
		    if(GetPlayerMoney(playerid) < 400)
		    {
		        Error(playerid,"¡Dinero insuficiente! Debes tener mínimo $400");
		        return 1;
			}

			new
			    NegID = ID_Negocio(playerid);

			if(NegID == INVALID_BUSINESS_ID)
			    return 1;

			if(!InfoNegocio[NegID][nStock][0])
			    return Error(playerid, "Éste negocio no tiene más trajes para vender");

	    	if( !RopaPandilla(ID_Familia(playerid), modelid) ) return Error(playerid,"¡No podes usar esta ropa, porque no perteneces a su banda!");

			InfoNegocio[NegID][nDinero] += 400;
			QuitarDinero(playerid,400);
			SacarStockNegocio(NegID, 0);

			InfoNegocio[NegID][nVentaStock][0] ++;

			ElegirRopa(playerid,modelid);
		    Mensaje(playerid,-1,"> Compraste esta prenda, por "#CPOSITIVO"$400. "#CBLANCO"Usa /ropa para más información");

		    DeletePVar(playerid, "ComprandoRopa");
			return 1;
		}
	}
	else if(GetPVarInt(playerid,"ComprandoAccesorios"))
	{
		if(listid == m_Accesorios)
		{
		    if(!response)
		    {
				DeletePVar(playerid,"ComprandoAccesorios");
				return 1;
			}

		    new i = -1;
		    Loop(a, sizeof AttachmentObjects, 0)
		    {
		        if(AttachmentObjects[a][attachmodel] == modelid)
				{
					i = a;
				}
			}
			if(i == -1) return Error(playerid,"Hubo un error en la compra, ¡lo sentimos!"),true;
			if(GetPlayerMoney(playerid) < AttachmentObjects[i][attachprecio]) return Error(playerid,"¡Dinero insuficiente!");
			SetPVarInt(playerid,"ATTACH_MOD", i);
			new Str[(50*7)+4],Str2[50];
			Loop(s, MAX_ACCESORIOS, 0)
			{
			    if(InfoJugador[playerid][jAttachModel][s])
			    {
			        A_Format(Str2,"Slot %d %s[ %s ]\n",s,(InfoJugador[playerid][jAttachOcultado][s]) ? (""#CVERDE"") : (""#CAZUL""), AttachmentObjects[InfoJugador[playerid][jAccesorio][s]][attachname]);
					strcat(Str,Str2);
					continue;
				}
				else
				{
				    A_Format(Str2,"Slot %d "#CROJO"[ Nada ]\n",s);
					strcat(Str,Str2);
					continue;
				}
			}
			Dialog(playerid,dElejirSlotA,DIALOG_STYLE_LIST,""#CBLANCO"Elije el espacio donde la guardarás",Str,"Aceptar","Cancelar");
		    DeletePVar(playerid, "ComprandoAccesorios");
		}
	}
	else if(GetPVarInt(playerid,"ComprandoMuebles"))
	{
	    if(listid == m_Muebles)
	    {
		    if(!response)
		    {
				DeletePVar(playerid,"ComprandoMuebles");
				DeletePVar(playerid, "mS_hide_list_off");
				HideModelSelectionMenu(playerid);
				return 1;
			}
			SetPVarInt(playerid,"MuebleID", modelid);
		    new Str[80 * MAX_CASAS_JUGADOR],Str2[80],bool:sucess;
		    if( !GetPVarInt(playerid,"CONFIRMA_COMPRAM") )
		    {
       		 	new
        		    OBJ_INDEX;

                BuscarModeIndexInt(modelid, OBJ_INDEX);

	           	A_Format(Str,""#CINFO"Nombre: "#CBLANCO"%s\n"#CINFO"Precio: "#CBLANCO"$%d", ObjetosInterior[OBJ_INDEX][2], ObjetosInterior[OBJ_INDEX][1]);
				Dialog(playerid, dPrecioyNombreM, DIALOG_STYLE_MSGBOX, ""#CVERDE"Datos del producto", Str, "Continuar", "Volver");
				return 1;
			}
			DeletePVar(playerid, "mS_hide_list_off");
			HideModelSelectionMenu(playerid);

		    foreach(Casas,c)
		    {
		        if(EsDuenoCasa(playerid,c) || TieneLlaveCasa(playerid,c) )
		        {
		            sucess = true;
		            A_Format(Str2,""#CBLANCO"- %s "#CPOSITIVO"( ID: %d )\n",InfoCasa[c][cNombre],c);
					strcat(Str,Str2);
				}
			}

			if(!sucess) return Dialog(playerid,dError,DIALOG_STYLE_MSGBOX,""#CINFO"Elige la casa para el mueble",""#CBLANCO"¡No tienes casas!","Cerrar","");
			Dialog(playerid,dElegirCasaM,DIALOG_STYLE_LIST,""#CINFO"Elige la casa para el mueble:",Str,"Aceptar","Cancelar");
			DeletePVar(playerid,"CONFIRMA_COMPRAM");
		}
	}
	return 1;
}

// -=================-
forward OnPlayerAttachTrailer(playerid, vehicleid, trailerid);
forward OnPlayerDettachTrailer(playerid, vehicleid, trailerid);
// -=================-

public OnPlayerAttachTrailer(playerid, vehicleid, trailerid)
{
	if(GetPVarInt(playerid,"NivelCamionero") == 2)
	{
	    if(GetPVarInt(playerid,"PasoEntrega") == 2)
	    {
	        SetPlayerCP(playerid, CP_CAMIONERO, 2389.4763, -2152.6609, 13.7500, 6.0);
	        SetPVarInt(playerid, "PasoEntrega", 3);
	        new
	            Carga[20];

			switch(GetVehicleModel(trailerid))
			{
			    case 435: Carga = "Comida";
			    case 450: Carga = "Tierra";
			    case 591: Carga = "Granos";
			}
	        MensajeF(playerid, -1, "Ya tomaste la carga "#CVERDE"(%s)"#CBLANCO". Ahora, dirigete para Los Santos, a entregarla.", Carga);
	        Mensaje(playerid, C_ROJO, "NOTA: "#CBLANCO"Recuerda que debes ir por la Ruta, manejar con grandes camiones por las calles rurales es contra la ley.");
			RemovePlayerMapIcon(playerid, MI_FABRICA_COMIDA);
			RemovePlayerMapIcon(playerid, MI_FABRICA_GRANO);
			RemovePlayerMapIcon(playerid, MI_FABRICA_TIERRA);
			alm(InfoCamion[vehicleid][camChofer],pName(playerid));
			InfoCamion[vehicleid][camCarga] = GetVehicleModel(trailerid);
			SetPVarInt(playerid,"Chofer_Camion", vehicleid);
			return 1;
		}
	    if(GetPVarInt(playerid,"PasoEntrega") == 3)
	    {
			Mensaje(playerid, -1, "Tomaste nuevamente la carga, ahora entregala.");
	        SetPlayerCP(playerid, CP_CAMIONERO, 2389.4763, -2152.6609, 13.7500, 6.0);
			return 1;
		}
	}

	return 1;
}

public OnPlayerDettachTrailer(playerid, vehicleid, trailerid)
{
	if(GetPVarInt(playerid,"NivelCamionero") == 2)
	{
	    if(GetPVarInt(playerid,"PasoEntrega") == 3)
	    {
			Error(playerid, "¡Debes buscar la carga!");
	        DestroyPCP(playerid, CP_CAMIONERO);
			return 1;
		}
	}
	return 1;
}

public OnPlayerClickTextDraw(playerid,Text:clickedid)
{
	// Anti AutoClicker
	static
	    OldClick[MAX_PLAYERS];

	new
	    tick = GetTickCount();

	if(tick < OldClick[playerid] && clickedid != Text:INVALID_TEXT_DRAW)
	    return 1;

	OldClick[playerid] = tick + 100;

	new
		bool:cancel = (clickedid == Text:INVALID_TEXT_DRAW);

	// OP:PC
	if (PC.State[playerid] != PC_STATE_NONE)
	{
	    if(clickedid == Text:INVALID_TEXT_DRAW)
	    {
			cmd_pc(playerid, "");
			return 1;
		}
		if(clickedid == PCNEG_Inicio)
		{
		    if(!GetPVarInt(playerid, "PC.INICIO"))
		    {
			    PC.ToggleMenuInicio(playerid, true);
			}
			else
			{
			    PC.ToggleMenuInicio(playerid, false);
			}
		    return 1;
		}
		else if(clickedid == PCNEG_S_Productos)
		{
		    PC.ToggleMenuInicio(playerid, false);
		    PC.ToggleMenuProductos(playerid, true);
		    if(PCNEG_PS_Nombre[playerid] != PlayerText:INVALID_TEXT_DRAW)
		    {
				TextDrawHideForPlayer(playerid, Text:PCNEG_P_ComprarProductos);
			}
		    return 1;
		}
		else if(clickedid == PCNEG_S_Ganancias)
		{
		    PC.ToggleMenuInicio(playerid, false);
		    PC.ToggleMenuGanancias(playerid, true);
		}
		else if(clickedid == PCNEG_P_Cerrar)
		{
			if(GetPVarInt(playerid, "PC.MenuProductos"))
			{
		    	PC.ToggleMenuProductos(playerid, false);
			}
			else if(GetPVarInt(playerid, "PC.MenuGanancias"))
			{
		    	PC.ToggleMenuGanancias(playerid, false);
			}
		    return 1;
		}
		else if(clickedid == PCNEG_P_ComprarProductos)
		{
			TextDrawHideForPlayer(playerid, Text:PCNEG_P_ComprarProductos);
		    PC.ToggleMenuProductosComprar(playerid, true);
		    return 1;
		}
	    else if(clickedid == PCNEG_PS_ConfirmarComprar)
	    {
	        new
	            StockComprado [MAX_STOCK_TYPE],
				str[14];

			for (new i; i < MAX_STOCK_TYPE; i++)
			{
				format(str, 14, "P_STOCK%d", i);
				StockComprado [i] = GetPVarInt(playerid, str);
				DeletePVar(playerid, str);
			}
			new
				NegID = ID_Negocio(playerid);

			if(NegID == -1)
			    return 1;

			RequestBuyProducts(playerid, NegID, StockComprado);
		}
		else if(clickedid == PCNEG_PS_Cerrar)
		{
		    if(PCNEG_P_Nombre[playerid] != PlayerText:INVALID_TEXT_DRAW)
		    {
				TextDrawShowForPlayer(playerid, Text:PCNEG_P_ComprarProductos);
			}
		    PC.ToggleMenuProductosComprar(playerid, false);
		    return 1;
		}
		for(new i; i < MAX_STOCK_TYPE; i++)
		{
		    if(clickedid == PCNEG_PS_Flecha[NEG_FLECHA_IZQUIERDA][i]) // <
		    {
		        new
		            NegID = ID_Negocio(playerid);

				new
				    Str[10];

				format(Str, 10, "P_STOCK%d", i);
				new
					PVar = GetPVarInt(playerid, Str);

				if(PVar <= 0)
				    return GameTextForPlayer(playerid, "~r~Cantidad minima: 0", 2000, 3);

				PVar--;
				SetPVarInt(playerid, Str, PVar);
				PC.ActualizarPedido(playerid, NegID);
		        return 1;
		    }
		    else if(clickedid == PCNEG_PS_Flecha[NEG_FLECHA_DERECHA][i]) // >
		    {
		        new
		            NegID = ID_Negocio(playerid);

				new
				    Str[10];

				format(Str, 10, "P_STOCK%d", i);
				new
					PVar = GetPVarInt(playerid, Str);

				if(PVar > 500)
				    return GameTextForPlayer(playerid, "~r~Cantidad maxima: 500", 2000, 3);

				PVar++;
				SetPVarInt(playerid, Str, PVar);
				PC.ActualizarPedido(playerid, NegID);
		        return 1;
		    }
		}
		return 1;
	}
	// OP:CEL
	if (CEL.State[playerid] != CEL_STATE_NONE)
	{
		if (GetPlayerDialogID(playerid) != 0)
		{
		    if (cancel)
		    {
		        SelectTextDraw(playerid, CEL_COLOR);
			}
		    return Error(playerid, "~r~Debes cerrar la ventana antes de seleccionar");
		}
	    if (clickedid == Text:INVALID_TEXT_DRAW)
	    {
			cmd_celular(playerid, "");
			return 1;
	    }
		if (CEL.State[playerid] == CEL_STATE_MARCAR)
		{
		    // Número
		    for(new i; i < 10; i++)
		    {
		        if(clickedid == CEL.MarcarNumero[i])
		        {
		            new
		                len_number = strlen(CEL.Text[playerid]);

					if(len_number > CEL_NUMBER_MAX_LEN)
					    return 1;

					if(len_number == 1)
					{
					    if(CEL.Text[playerid][0] == '_')
							CEL.Text[playerid][0] = '\0';
					}
					format(CEL.Text[playerid], CEL_NUMBER_MAX_LEN, "%s%d", CEL.Text[playerid], i);
					PlayerTextDrawSetString(playerid, CEL.MarcarTexto[playerid], CEL.Text[playerid]);
					return 1;
				}
			}
			if(clickedid == CEL.MarcarX)
			{
	            new
	                len_number = strlen(CEL.Text[playerid]);

				if(!len_number)
				    return 1;

				if(len_number == 1)
				{
				    if(CEL.Text[playerid][0] == '_')
						return 1;
				}
				strdel(CEL.Text[playerid], len_number-1, len_number);

			    if(CEL.Text[playerid][0] == '\0')
					CEL.Text[playerid][0] = '_';

				PlayerTextDrawSetString(playerid, CEL.MarcarTexto[playerid], CEL.Text[playerid]);
			}
			else if(clickedid == CEL.MarcarM)
			{
			    if(strval(CEL.Text[playerid]))
				{
					SetPVarInt(playerid, "CEL.MARCADO", strval(CEL.Text[playerid]));
					ShowPlayerDialog(playerid, dCelMas, DIALOG_STYLE_LIST, "{00BFFF}MÁS OPCIONES (+) ...", "{FF0000}» {FFFFFF}Añadir el número a {3ADF00}Contactos\n{FF0000}» {FFFFFF}Enviar un {3ADF00}SMS\n{FF0000}» {FFFFFF}Llamar", "Aceptar", "Volver");
				}
			}
			else if(clickedid == CEL.MenuVolver)
			{
				CEL.ToggleMarcar(playerid, false);
		        CEL.ToggleMenu(playerid, true);
				CEL.State[playerid] = CEL_STATE_MENU;
			}
			return 1;
		}
		if(CEL.State[playerid] == CEL_STATE_MENU)
		{
		    if(clickedid == CEL.MenuMarcar[0])
		    {
		        CEL.ToggleMenu(playerid, false);
				CEL.ToggleMarcar(playerid, true);
				CEL.State[playerid] = CEL_STATE_MARCAR;
				return 1;
		    }
		    if(clickedid == CEL.MenuMensajes[0])
		    {
		        CEL.ToggleMenu(playerid, false);
				CEL.ToggleSMS(playerid, true, GetCelNumber(playerid));
				CEL.State[playerid] = CEL_STATE_SMS;
				return 1;
		    }
		    if(clickedid == CEL.MenuContactos[0])
		    {
		        CEL.ToggleMenu(playerid, false);
				CEL.ToggleContactos(playerid, true, GetCelNumber(playerid));
				CEL.State[playerid] = CEL_STATE_CONTACT;
				return 1;
		    }
		    if(clickedid == CEL.MenuServicios[0])
		    {
		        CEL.ToggleMenu(playerid, false);
				CEL.ToggleServicios(playerid, true);
				CEL.State[playerid] = CEL_STATE_SERVICIOS;
				return 1;
		    }
		    return 1;
		}
		if(CEL.State[playerid] == CEL_STATE_SMS)
		{
		    if(clickedid == CEL.MenuVolver)
		    {
				CEL.ToggleSMS(playerid, false);
		        CEL.ToggleMenu(playerid, true);
				CEL.State[playerid] = CEL_STATE_MENU;
		    }
		    return 1;
		}
		if(CEL.State[playerid] == CEL_STATE_CONTACT)
		{
		    if(clickedid == CEL.MenuVolver)
		    {
				CEL.ToggleContactos(playerid, false);
		        CEL.ToggleMenu(playerid, true);
				CEL.State[playerid] = CEL_STATE_MENU;
		    }
		    return 1;
		}
		if(CEL.State[playerid] == CEL_STATE_SERVICIOS)
		{
		    if(clickedid == CEL.MenuVolver)
		    {
				CEL.ToggleServicios(playerid, false);
		        CEL.ToggleMenu(playerid, true);
				CEL.State[playerid] = CEL_STATE_MENU;
				return 1;
		    }
		    if(clickedid == CEL.ServiciosPolicia)
		    {
				if (RequestedService[playerid][SERVICIO_POLICIA] > 0)
				{
				    return MensajeF(playerid, -1, "Ya pediste este servicio. Debes esperar la expiración del servicio "#CROJO"(%d segs) "#CBLANCO"actual para volver a pedir.", RequestedService[playerid][SERVICIO_POLICIA]);
				}
				RequestService(playerid, SERVICIO_POLICIA);
				return 1;
			}
		    if(clickedid == CEL.ServiciosTaxis)
		    {
				if (RequestedService[playerid][SERVICIO_TAXI] > 0)
				{
				    return MensajeF(playerid, -1, "Ya pediste este servicio. Debes esperar la expiración del servicio "#CROJO"(%d segs) "#CBLANCO"actual para volver a pedir.", RequestedService[playerid][SERVICIO_TAXI]);
				}
				RequestService(playerid, SERVICIO_TAXI);
				return 1;
			}
		    if(clickedid == CEL.ServiciosHospital)
		    {
				if (RequestedService[playerid][SERVICIO_HOSPITAL] > 0)
				{
				    return MensajeF(playerid, -1, "Ya pediste este servicio. Debes esperar la expiración del servicio "#CROJO"(%d segs) "#CBLANCO"actual para volver a pedir.", RequestedService[playerid][SERVICIO_HOSPITAL]);
				}
				RequestService(playerid, SERVICIO_HOSPITAL);
				return 1;
			}
		    if(clickedid == CEL.ServiciosTaller)
		    {
				if (RequestedService[playerid][SERVICIO_TALLER] > 0)
				{
				    return MensajeF(playerid, -1, "Ya pediste este servicio. Debes esperar la expiración del servicio "#CROJO"(%d segs) "#CBLANCO"actual para volver a pedir.", RequestedService[playerid][SERVICIO_TALLER]);
				}
				RequestService(playerid, SERVICIO_TALLER);
				return 1;
			}
		    return 1;
		}
	}
	if(IsPlayerConnected(playerid))
	{
	    if(GetPVarInt(playerid, "VIENDO_TV"))
	    {
	        if(cancel)
	        {
	            return cmd_dejar(playerid, "televisor");
			}

	        if(clickedid == TDTV[4])
	        {
	            if(!InfoTV[GetPVarInt(playerid, "TV_ID")][tvPrendida])
	            {
					PrenderTV(playerid, GetPVarInt(playerid, "TV_ID"));
					MostrarTV(playerid, CANAL_LSTV);
				}
				else
				{
					ApagarTV(playerid, GetPVarInt(playerid, "TV_ID"));
				}
				return 1;
			}
			else if(clickedid == TDTV[7])// ANULADO (Solo el canal de lstv por ahora - v1 & v2)
			{
	            if(InfoTV[GetPVarInt(playerid, "TV_ID")][tvPrendida])
	            {
					new i = GetPVarInt(playerid,"TV_CANAL");
					if(i > 0 && i < 4)
					{
						MostrarTV(playerid, i+1);
					}
					else Error(playerid, "~r~no hay más canales");
				}
				else Error(playerid, "~r~La tv está apagada");
			}
			else if(clickedid == TDTV[8])
			{
	            if(InfoTV[GetPVarInt(playerid, "TV_ID")][tvPrendida])
	            {
					new i = GetPVarInt(playerid,"TV_CANAL");
					if(i > 0 && i < 4)
					{
						MostrarTV(playerid, i-1);
					}
					else Error(playerid, "~r~no hay más canales");
				}
				else Error(playerid, "~r~la tv está apagada");
			}
		}

	    if(GetPVarInt(playerid,"ViendoCuenta"))
	    {
	        if(cancel)
	        {
				return cmd_cuenta(playerid, "");
			}

	        if(!GetPVarInt(playerid,"CheckeandoCUENTA"))
	        {
		        if(clickedid == CuentaGen)
		        {
					MostrarCuenta(playerid,playerid,0);
				}
		        else if(clickedid == CuentaCas)
		        {
					MostrarCuenta(playerid,playerid,1);
				}
		        else if(clickedid == CuentaNeg)
		        {
					MostrarCuenta(playerid,playerid,2);
				}
		        else if(clickedid == CuentaVeh)
		        {
					MostrarCuenta(playerid,playerid,3);
				}
		        else if(clickedid == CuentaArmas)
		        {
					MostrarCuenta(playerid,playerid,4);
				}
			}
			else
			{
			    new playerid2 = GetPVarInt(playerid,"CheckeandoCUENTA");
		        if(clickedid == CuentaGen)
		        {
					MostrarCuenta(playerid,playerid2,0);
				}
		        else if(clickedid == CuentaCas)
		        {
					MostrarCuenta(playerid,playerid2,1);
				}
		        else if(clickedid == CuentaNeg)
		        {
					MostrarCuenta(playerid,playerid2,2);
				}
		        else if(clickedid == CuentaVeh)
		        {
					MostrarCuenta(playerid,playerid2,3);
				}
		        else if(clickedid == CuentaArmas)
		        {
					MostrarCuenta(playerid,playerid2,4);
				}
			}
		}
	    if(GetPVarInt(playerid,"EnCajero") == 1)
	    {
	        if(cancel)
	        {
				return SelectTextDraw(playerid, C_ROJO);
			}

	        if(clickedid == Operaciones[0])
	        {
	            Dialog(playerid,dCDepositar,DIALOG_STYLE_INPUT,""#CBLANCO"\tOperaciones bancarias - "#CINFO"DEPOSITAR:",""#CBLANCO"Introduce la cantidad de dinero que quieres "#CVERDE"depositar","Depositar","Cancelar");
			}
			if(clickedid == Operaciones[1])
			{
 	            Dialog(playerid,dCRetirar,DIALOG_STYLE_INPUT,""#CBLANCO"\tOperaciones bancarias - "#CINFO"RETIRAR:",""#CBLANCO"Introduce la cantidad de dinero que quieres "#CVERDE"retirar","Retirar","Cancelar");
			}
			if(clickedid == Operaciones[2])
			{
			    if(InfoJugador[playerid][jHoras] < 6) return Error(playerid,"¡Debes jugar al menos 6 horas para podes transferir dinero!");
 	            Dialog(playerid,dCTransferir,DIALOG_STYLE_INPUT,""#CBLANCO"\tOperaciones bancarias - "#CINFO"TRANSFERIR:",""#CBLANCO"Introduce el número de cuenta bancaria para transferir en dinero\n\nNOTA IMPORTANTE: El ID, es el ID de la cuenta bancaria, no la del dueño de esta.","Transferir","Cancelar");
				SetPVarInt(playerid,"Parte_Transferir",1);
			}
			if(clickedid == SCajero)
			{
			    SacarCajero(playerid);
			}
		}

		if(GetPVarInt(playerid,"Registrandose") == 1)
		{
	        if(cancel)
	        {
				return SelectTextDraw(playerid, C_ROJO);
			}
	        if(clickedid == Registro[5])
	        {
	            CancelSelectTextDraw(playerid);
	            SetPVarInt(playerid,"Registrandose",0);
	  	        GameTextForPlayer(playerid,"~r~Espere...",1000,3);
		        SetTimerEx("MostrarDatos", 1000, false, "d", playerid);
				SacarTDRegistro(playerid);
			}
			else if(clickedid == FlechaSexo[0])
			{
			    if(InfoJugador[playerid][jSexo] == 1)
			    {
	   				InfoJugador[playerid][jSexo] = 2;
					PlayerTextDrawSetString(playerid,Sexo[playerid],"~r~Femenino");
					SetPlayerSkin(playerid,12);
				}
				else
				{
	   				InfoJugador[playerid][jSexo] = 1;
					PlayerTextDrawSetString(playerid,Sexo[playerid],"~r~Masculino");
					SetPlayerSkin(playerid,60);
				}
			}
			else if(clickedid == FlechaSexo[1])
			{
			    if(InfoJugador[playerid][jSexo] == 1)
			    {
	   				InfoJugador[playerid][jSexo] = 2;
					PlayerTextDrawSetString(playerid,Sexo[playerid],"~r~Femenino");
					SetPlayerSkin(playerid,12);
				}
				else
				{
	   				InfoJugador[playerid][jSexo] = 1;
					PlayerTextDrawSetString(playerid,Sexo[playerid],"~r~Masculino");
					SetPlayerSkin(playerid,60);
				}
			}
			else if(clickedid == FlechaEdad[0])
			{
				new SEdad[6];
			    if(InfoJugador[playerid][jEdad] <= 16) return GameTextForPlayer(playerid,"^Minimo 16!",3000,3);
			    InfoJugador[playerid][jEdad] --;
				format(SEdad,sizeof(SEdad),"~r~%d",InfoJugador[playerid][jEdad]);
				PlayerTextDrawSetString(playerid,Edad[playerid],SEdad);
			}
			else if(clickedid == FlechaEdad[1])
			{
				new SEdad[6];
				if(InfoJugador[playerid][jEdad] >= 80) return GameTextForPlayer(playerid,"^Maximo 80!",3000,3);
			    InfoJugador[playerid][jEdad] ++;
				format(SEdad,sizeof(SEdad),"~r~%d",InfoJugador[playerid][jEdad]);
				PlayerTextDrawSetString(playerid,Edad[playerid],SEdad);
			}
			else if(clickedid == FlechaPelea[0])
			{
			    switch(InfoJugador[playerid][jPelea])
			    {
   					case 1:
			    	{
				        PlayerTextDrawSetString(playerid,Pelea[playerid],"~r~Kick Boxing");
				        InfoJugador[playerid][jPelea] = 3;
		          		ApplyAnimation(playerid,"GANGS","shake_carSH",4.0,1,0,0,0,8500);//Kick boxing

					}
					case 2:
					{
				        PlayerTextDrawSetString(playerid,Pelea[playerid],"~r~Boxeo");
				        InfoJugador[playerid][jPelea] = 1;
		          		ApplyAnimation(playerid,"GYMNASIUM","GYMshadowbox",4.1,1,1,1,1,9500);//boxeo
					}
					case 3:
					{
     					PlayerTextDrawSetString(playerid,Pelea[playerid],"~r~Kung Fu");
				        InfoJugador[playerid][jPelea] = 2;
		          		ApplyAnimation(playerid,"BSKTBALL","BBALL_def_loop",4.0,1,0,0,0,12500); //kung fu
					}
				}
			}

			else if(clickedid == FlechaPelea[1])
			{
			    switch(InfoJugador[playerid][jPelea])
			    {
				    case 1:
				    {
				        PlayerTextDrawSetString(playerid,Pelea[playerid],"~r~Kung Fu");
				        InfoJugador[playerid][jPelea] = 2;
		          		ApplyAnimation(playerid,"BSKTBALL","BBALL_def_loop",4.0,1,0,0,0,12500); //kung fu
					}
					case 2:
					{
				        PlayerTextDrawSetString(playerid,Pelea[playerid],"~r~Kick Boxing");
				        InfoJugador[playerid][jPelea] = 3;
		          		ApplyAnimation(playerid,"GANGS","shake_carSH",4.0,1,0,0,0,8500);//Kick boxing
					}
					case 3:
					{
				        PlayerTextDrawSetString(playerid,Pelea[playerid],"~r~Boxeo");
				        InfoJugador[playerid][jPelea] = 1;
		          		ApplyAnimation(playerid,"GYMNASIUM","GYMshadowbox",4.1,1,1,1,1,9500);//boxeo
					}
				}
			}
			else if(clickedid == FlechaEstilo[0])
			{
			    switch(InfoJugador[playerid][jEstilo])
			    {
				    case 1:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Ciego");
						InfoJugador[playerid][jEstilo] = 12;
						ApplyAnimation(playerid,"PED","Walk_Wuzi",4.1,1,1,1,1,1);
					}
				    case 2:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Normal");
						InfoJugador[playerid][jEstilo] = 1;
						ApplyAnimation(playerid,"PED","WALK_player",4.1,1,1,1,1,1);
					}
				    case 3:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Pandillero");
						InfoJugador[playerid][jEstilo] = 2;
						ApplyAnimation(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
					}
				    case 4:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Pandillero 2");
						InfoJugador[playerid][jEstilo] = 3;
						ApplyAnimation(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1);
					}
				    case 5:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Anciano");
						InfoJugador[playerid][jEstilo] = 4;
						ApplyAnimation(playerid,"PED","WALK_old",4.1,1,1,1,1,1);
					}
				    case 6:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Anciano-Gordo");
						InfoJugador[playerid][jEstilo] = 5;
						ApplyAnimation(playerid,"PED","WALK_fatold",4.1,1,1,1,1,1);
					}
				    case 7:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Gordo");
						InfoJugador[playerid][jEstilo] = 6;
						ApplyAnimation(playerid,"PED","WALK_fat",4.1,1,1,1,1,1);
					}
				    case 8:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Mujer");
						InfoJugador[playerid][jEstilo] = 7;
						ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1);
					}
				    case 9:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Mujer 2");
						InfoJugador[playerid][jEstilo] = 8;
						ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.1,1,1,1,1,1);
					}
				    case 10:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Sexi");
						InfoJugador[playerid][jEstilo] = 9;
						ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.1,1,1,1,1,1);
					}
				    case 11:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Sexi 2");
						InfoJugador[playerid][jEstilo] = 10;
						ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.1,1,1,1,1,1);
					}
				    case 12:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Hebrio");
						InfoJugador[playerid][jEstilo] = 11;
						ApplyAnimation(playerid,"PED","WALK_drunk",4.1,1,1,1,1,1);
					}
				}
			}
			else if(clickedid == FlechaEstilo[1])
			{
			    switch(InfoJugador[playerid][jEstilo])
			    {
				    case 1:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Pandillero");
						InfoJugador[playerid][jEstilo] = 2;
						ApplyAnimation(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
					}
				    case 2:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Pandillero 2");
						InfoJugador[playerid][jEstilo] = 3;
						ApplyAnimation(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1);
					}
				    case 3:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Anciano");
						InfoJugador[playerid][jEstilo] = 4;
						ApplyAnimation(playerid,"PED","WALK_old",4.1,1,1,1,1,1);
					}
				    case 4:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Anciano-Gordo");
						InfoJugador[playerid][jEstilo] = 5;
						ApplyAnimation(playerid,"PED","WALK_fatold",4.1,1,1,1,1,1);
					}
				    case 5:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Gordo");
						InfoJugador[playerid][jEstilo] = 6;
						ApplyAnimation(playerid,"PED","WALK_fat",4.1,1,1,1,1,1);
					}
				    case 6:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Mujer");
						InfoJugador[playerid][jEstilo] = 7;
						ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1);
					}
				    case 7:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Mujer 2");
						InfoJugador[playerid][jEstilo] = 8;
						ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.1,1,1,1,1,1);
					}
				    case 8:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Sexi");
						InfoJugador[playerid][jEstilo] = 9;
						ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.1,1,1,1,1,1);
					}
				    case 9:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Sexi 2");
						InfoJugador[playerid][jEstilo] = 10;
						ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.1,1,1,1,1,1);
					}
				    case 10:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Hebrio");
						InfoJugador[playerid][jEstilo] = 11;
						ApplyAnimation(playerid,"PED","WALK_drunk",4.1,1,1,1,1,1);
					}
				    case 11:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Ciego");
						InfoJugador[playerid][jEstilo] = 12;
						ApplyAnimation(playerid,"PED","Walk_Wuzi",4.1,1,1,1,1,1);
					}
				    case 12:
				    {
						PlayerTextDrawSetString(playerid,Estilo[playerid],"~r~Normal");
						InfoJugador[playerid][jEstilo] = 1;
						ApplyAnimation(playerid,"PED","WALK_player",4.1,1,1,1,1,1);
					}
				}
			}
			return 1;
		}
	}
	return 1;
}

stock EsIP(Texto[])
{
	new
		bool:Tiene2PUNTOS,
		ContadorPuntos,
		PuedePonerPunto,
		CantidadNumeros;

	for(new i, len = strlen(Texto); i < len; i++)
	{
	    if('0' <= Texto[i] <= '9')
	        CantidadNumeros++;

		if(PuedePonerPunto)
		{
	 		--PuedePonerPunto;
		 	continue;
		}
  		if(Texto[i] == '.')
  		{
			ContadorPuntos++;
			PuedePonerPunto = 1;
			continue;
		}
  		if(Texto[i] == ':')
     		Tiene2PUNTOS = true;
	}
	if(ContadorPuntos >= 3 && CantidadNumeros >= 8 && Tiene2PUNTOS)//SPAM
	    return 2;

	if(ContadorPuntos >= 3 && CantidadNumeros >= 8)//POSIBLE SPAM
	    return 1;

	return 0;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	// Anti AutoClicker
	static
	    OldClick[MAX_PLAYERS];

	new
	    tick = GetTickCount();

	if(tick < OldClick[playerid])
	    return 1;

	OldClick[playerid] = tick + 250;
	if(CEL.State[playerid] == CEL_STATE_SMS)
	{
		for(new i; i < CEL_MAX_SMS; i++)
		{
		    if(playertextid == CEL.SMSTexto[playerid][i])
			{
			    new
			        pvar_str[20],
					dialog_tittle[CEL_MAX_LEN],
					dialog_cuerpo[128 + 8 + 10];

				format(pvar_str, sizeof(pvar_str), "%dNUM", i);
				GetPVarString(playerid, pvar_str, dialog_tittle, CEL_MAX_LEN);

				format(pvar_str, sizeof(pvar_str), "%dSMS", i);
				GetPVarString(playerid, pvar_str, dialog_cuerpo, sizeof(dialog_cuerpo));

				if(dialog_tittle[0] == '-')
				    return 1;

				if(strlen(dialog_cuerpo) > 70)
				{
				    strins(dialog_cuerpo, "...\n...", 70);
				}
				strins(dialog_cuerpo, "{FFFFFF}", 0);
				ShowPlayerDialog(playerid, dCelSMS, DIALOG_STYLE_MSGBOX, dialog_tittle, dialog_cuerpo, "Volver", "Borrar");

				SetPVarInt(playerid, "CEL.SSMS", i);
				return 1;
			}
		}
		return 1;
	}
	if(CEL.State[playerid] == CEL_STATE_CONTACT)
	{
		for(new i; i < CEL_MAX_CONTACT; i++)
		{
		    if(playertextid == CEL.ContactoNombre[playerid][i])
			{
			    new
			        pvar_str[45],
					ctc_num,
					ctc_name[CEL_MAX_LEN];

				format(pvar_str, 20, "%dCNUM", i);
				ctc_num = GetPVarInt(playerid, pvar_str);

				format(pvar_str, 20, "%dCTXT", i);
				GetPVarString(playerid, pvar_str, ctc_name, sizeof(ctc_name));

				format(pvar_str, sizeof(pvar_str), "{ffffff}%s {ff0000}(%d)", ctc_name, ctc_num);
				ShowPlayerDialog(playerid, dCelContacto, DIALOG_STYLE_LIST, pvar_str, "{FF0000}» {FFFFFF}Eliminar de {3ADF00}Contactos\n{FF0000}» {FFFFFF}Enviar un {3ADF00}SMS\n{FF0000}» {FFFFFF}Llamar", "Aceptar", "Volver");

				SetPVarInt(playerid, "CEL.SCTC", i);
				return 1;
			}
		}
	}
	return 1;
}


public OnVehicleDeath(vehicleid, killerid)
{
	if(EsCamion(vehicleid))
	{
		veh_respawn(vehicleid);
	}
	for(new i; i < sizeof(VehConSirena); i++)
	{
	    if(vehicleid == VehConSirena[i])
	    {
			if(SirenaVeh[i] != INVALID_OBJECT_ID)
			{
			    DestroyObject(SirenaVeh[i]);
			    SirenaVeh[i] = INVALID_OBJECT_ID;
				break;
			}
		}
	}

	return 1;
}

stock MostrarCuenta(playeridto,playerid,item)
{
	switch(item)
	{
	    case 0:
	    {
			new
				Str[420],Str2[130],SSexo[20];

			if(InfoJugador[playerid][jSexo] == 1) SSexo = "Masculino";
			else SSexo = "Femenino";
			new Float:ExpVal = (InfoJugador[playerid][jExperiencia] * 100) / (((InfoJugador[playerid][jNivel]+1)*3)*60);
			new ExpStr[3];
			A_Format(ExpStr,"%f",ExpVal);
			strcat(Str,Str2);
			A_Format(Str2,""#CINFO"GENERAL:\t"#CBLANCO"Edad: %d | Sexo: %s | Estrellas: %d | Dinero: %d | Advertencias: %d\n",InfoJugador[playerid][jEdad],SSexo,InfoJugador[playerid][jEstrellas],GetPlayerMoney(playerid), InfoJugador[playerid][jAdv]);
			strcat(Str,Str2);
			A_Format(Str2,	""#CINFO"NIVEL:\t\t"#CBLANCO"Experiencia: %s/100 ( NIVEL %d ) | Tiempo de juego: %dh %dmin\n",ExpStr,InfoJugador[playerid][jNivel],InfoJugador[playerid][jHoras],InfoJugador[playerid][jMinutos]);
			strcat(Str,Str2);
			A_Format(Str2,  ""#CINFO"BANCO:\t\t"#CBLANCO"Balance: %d | ID de cuenta bancaria: %d\n",InfoJugador[playerid][jBanco],InfoJugador[playerid][jIDCuentaB]);
			strcat(Str,Str2);
			if(!InfoJugador[playerid][jTrabajo]) Str2 = ""#CINFO"TRABAJO:\t"#CBLANCO"Ninguno\n";
			else
			{
   				switch(InfoJugador[playerid][jTrabajo])
			    {
       				case ID_Camionero:
			        {
           				A_Format(Str2,""#CINFO"TRABAJO:\t"#CBLANCO"Camionero | Entregas: %d\n",InfoJugador[playerid][jEntregas]);
					}
     				case ID_Cosechador:
	        		{
           				A_Format(Str2,""#CINFO"TRABAJO:\t"#CBLANCO"Cosechador | Cosechas: %d\n",InfoJugador[playerid][jCosechas]);
					}
     				case ID_RepartidorB:
	        		{
           				A_Format(Str2,""#CINFO"TRABAJO:\t"#CBLANCO"Repartidor de diarios | Repartidas: %d\n",InfoJugador[playerid][jRepartidas]);
					}
     				case ID_Basurero:
	        		{
           				A_Format(Str2,""#CINFO"TRABAJO:\t"#CBLANCO"Basurero | Barridas: %d\n",InfoJugador[playerid][jBarridas]);
					}
     				case ID_Ladron:
	        		{
           				A_Format(Str2,""#CINFO"TRABAJO:\t"#CBLANCO"Ladron\n");
					}
     				case ID_RepartidorP:
	        		{
           				A_Format(Str2,""#CINFO"TRABAJO:\t"#CBLANCO"Repartidor de pizza\n");
					}
     				case ID_Taxista:
	        		{
           				A_Format(Str2,""#CINFO"TRABAJO:\t"#CBLANCO"Taxista\n");
					}
				}
			}

			strcat(Str,Str2);

			if(InfoJugador[playerid][jLider])
			A_Format(Str2,    ""#CINFO"FACCION:\t"#CBLANCO"%s | Rango: Lider\n",NombreFaccion(InfoJugador[playerid][jLider]));

			else if(InfoJugador[playerid][jMiembro])
			A_Format(Str2,    ""#CINFO"FACCION:\t"#CBLANCO"%s | Rango: %d\n",NombreFaccion(InfoJugador[playerid][jMiembro]),InfoJugador[playerid][jRango]);

			else
			A_Format(Str2, ""#CINFO"FACCION:\t"#CBLANCO"Ninguna\n");
			strcat(Str,Str2);

			if(InfoJugador[playerid][jLiderFam])
			A_Format(Str2,    ""#CINFO"FAMILIA:\t"#CBLANCO"%s | Rango: Lider\n",InfoFamilia[InfoJugador[playerid][jLiderFam]][fNombre]);

			else if(InfoJugador[playerid][jMiembroFam])
			A_Format(Str2,    ""#CINFO"FAMILIA:\t"#CBLANCO"%s | Rango: %d\n",InfoFamilia[InfoJugador[playerid][jMiembroFam]][fNombre],InfoJugador[playerid][jRangoFam]);

			else
			A_Format(Str2, ""#CINFO"FAMILIA:\t"#CBLANCO"Ninguna\n");
			strcat(Str,Str2);
			Dialog(playeridto,dError,DIALOG_STYLE_MSGBOX,pName(playerid),Str,"Cerrar","");
		}
		case 1:
		{
		    new Str[80 * MAX_CASAS_JUGADOR],Str2[80],bool:sucess;
		    foreach(Casas,c)
		    {
		        if(EsDuenoCasa(playerid,c))
		        {
		            sucess = true;
		            A_Format(Str2,""#CBLANCO"- %s "#CPOSITIVO"(ID: %d | $%d)\n",InfoCasa[c][cNombre],c, InfoCasa[c][cDinero]);
					strcat(Str,Str2);
				}
			}
			if(!sucess) return Dialog(playeridto,dError,DIALOG_STYLE_MSGBOX,""#CINFO"Tus casas:",""#CBLANCO"¡No tienes casas!","Cerrar","");
			Dialog(playeridto,dError,DIALOG_STYLE_LIST,""#CINFO"Tus casas:",Str,"Cerrar","");
		}
		case 2:
		{
		    new Str[80 * MAX_NEGOCIOS_JUGADOR],Str2[80],bool:sucess;
		    foreach(Negocios,c)
		    {
		        if(EsDuenoNegocio(playerid,c))
		        {
		            sucess = true;
		            A_Format(Str2,""#CBLANCO"- %s "#CPOSITIVO"( ID: %d )\n",InfoNegocio[c][nNombre],c);
					strcat(Str,Str2);
				}
			}
			if(!sucess) return Dialog(playeridto,dError,DIALOG_STYLE_MSGBOX,""#CINFO"Tus negocios:",""#CBLANCO"¡No tienes negocios!","Cerrar","");
			Dialog(playeridto,dError,DIALOG_STYLE_LIST,""#CINFO"Tus negocios:",Str,"Cerrar","");
		}
		case 3:
		{
		    new 
				Str[120 * E_VEH_MAX],
				Str2[130],
				bool:sucess;

			ownVeh_displayVehicles(playerid, car) {
			
				sucess = true;
		        A_Format(Str2,""#CBLANCO"- %s "#CPOSITIVO"(ID: %d)\t"#CBLANCO"Patente: "#CPOSITIVO"%s\n", veh_getNameAsString(ownVeh_ID(ownVeh:car)), ownVeh_ID(ownVeh:car), veh_getPlateAsString(ownVeh_ID(ownVeh:car)));
				strcat(Str,Str2);
			}
			
			if(!sucess) return Dialog(playeridto,dError,DIALOG_STYLE_MSGBOX,""#CINFO"Tus vehículos:",""#CBLANCO"¡No tienes vehículos!","Cerrar","");
			Dialog(playeridto,dError,DIALOG_STYLE_LIST,""#CINFO"Tus vehículos:",Str,"Cerrar","");
		}
		case 4:
		{
			MostrarInventario (playerid, playeridto, false);
		}
	}
	return 1;
}

stock SendMail( const szReceiver[ ], const szSenderMail[ ], const szSenderName[ ], const szSubject[ ], const szMessage[ ] )
{
	new
		szBuffer[ MAILER_MAX_MAIL_SIZE ] = "t=",
		iPos    = strlen( szBuffer ),
		iLength = strlen( szReceiver )
	;

	memcpy( szBuffer, szReceiver, iPos * 4, ( iLength + 1 ) * 4 );

	StringURLEncode( szBuffer[ iPos ], 1024 - iPos );

	strcat( szBuffer, "&f=" );

	iPos    = strlen( szBuffer );
	iLength = strlen( szSenderName );

	memcpy( szBuffer, szSenderName, iPos * 4, ( iLength + 1 ) * 4 );

	StringURLEncode( szBuffer[ iPos ], 1024 - iPos );

	strcat( szBuffer, "&n=" );

	iPos    = strlen( szBuffer );
	iLength = strlen( szSenderMail );

	memcpy( szBuffer, szSenderMail, iPos * 4, ( iLength + 1 ) * 4 );

	StringURLEncode( szBuffer[ iPos ], 1024 - iPos );

	strcat( szBuffer, "&s=" );

	iPos    = strlen( szBuffer );
	iLength = strlen( szSubject );

	memcpy( szBuffer, szSubject, iPos * 4, ( iLength + 1 ) * 4 );

	StringURLEncode( szBuffer[ iPos ], 1024 - iPos );

	strcat( szBuffer, "&m=" );

	iPos    = strlen( szBuffer );
	iLength = strlen( szMessage );

	memcpy( szBuffer, szMessage, iPos * 4, ( iLength + 1 ) * 4 );

	StringURLEncode( szBuffer[ iPos ], 1024 - iPos );

	printf ("http (%d, HTTP_POST, %s, %s, #OnMailScriptResponse)", 0xD00D, MAILER_URL, szBuffer);
	HTTP( 0xD00D, HTTP_POST, MAILER_URL, szBuffer, "OnMailScriptResponse" );
}

forward OnMailScriptResponse( iIndex, iResponseCode, const szData[ ] );
public  OnMailScriptResponse( iIndex, iResponseCode, const szData[ ] )
{
	printf ("[DEBUG]::OnMailScriptResponse (index=%d, responsecode=%d, data[]='%s')", iIndex, iResponseCode, szData);
}

stock IsValidEmail (const email[])
{
	new
		pos@pos = -1,
		pointpos_0 = -1,
		pointpos_1 = -1,
		len = strlen (email);

	if (len < 8 || len > 34)
	    return false;

	for (new i; i < len; i++)
	{
	    switch (email[i])
	    {
	        case '@':
	        {
		        if (pos@pos != -1)
		            return false;

				if (i < 2 || i > 30)
				    return false;

				pos@pos = i;
			}
			case '.':
			{
			    if (pos@pos != -1) // Puntos en el nombre (Antes del dominio), seria pos@pos = -1.
			    {
				    if (pos@pos+3 > i || i < 10)
				        return false;

					if (pointpos_0 == -1)
					{
					    pointpos_0 = i;
					}
					else
					{
					    if (pointpos_1 != -1)
					        return false;

						pointpos_1 = i;
					}
				}
			}
			case '0' .. '9', 'a' .. 'z', 'A' .. 'Z', '_', '+', '-':
			{
		        if (pos@pos == -1)
				{
				    if (i > 20)
				    {
				        return false;
					}
				}
			}
			default:
			{
			    return false;
			}
	    }
	}

	if (pos@pos == -1 || pointpos_0 == -1)
	    return false;

	return true;
}

stock StringURLEncode( szString[ ], iSize = sizeof( szString ) )
{
	for ( new i = 0, l = strlen( szString ); i < l; i++ )
	{
		switch ( szString[ i ] )
		{
			case '!', '(', ')', 39, '*',
			     '0' .. '9',
			     'A' .. 'Z',
			     'a' .. 'z':
			{
				continue;
			}

			case ' ':
			{
				szString[ i ] = '+';

				continue;
			}
		}

		new
			s_szHex[ 8 ]
		;

		if ( i + 3 >= iSize )
		{
			szString[ i ] = EOS;

			break;
		}

		if ( l + 3 >= iSize )
			szString[ iSize - 3 ] = EOS;

		format( s_szHex, sizeof( s_szHex ), "%02h", szString[ i ] );

		szString[ i ] = '%';

		strins( szString, s_szHex, i + 1, iSize );

		l += 2;
		i += 2;

		if ( l > iSize - 1 )
			l = iSize - 1;
	}
}

stock GetNumberOfPlayersOnThisIP(test_ip[])
{
	new against_ip[32+1];
	new x = 0;
	new ip_count = 0;
	for(x=0; x<MAX_PLAYERS; x++) {
		if(IsPlayerConnected(x)) {
		    GetPlayerIp(x,against_ip,32);
		    if(!strcmp(against_ip,test_ip)) ip_count++;
		}
	}
	return ip_count;
}

public OnPlayerConnect(playerid)
{
	if(IsPlayerNPC(playerid))
	{
	    new
	        Name[MAX_PLAYER_NAME];

		GetPlayerName(playerid, Name, MAX_PLAYER_NAME);

		if(!strcmp(Name, "Claudia"))
		{
		    NPC_CLAUDIA = playerid;
		    SetPlayerColor(playerid, 0xFFFFFF00);
		}
		else if(!strcmp(Name, "Truth"))
		{
		    NPC_TRUTH = playerid;
		    SetPlayerColor(playerid, 0xFFFFFF00);
		}
	    return 1;
	}

	if(playerid >= MAX_PLAYERS)
	{
	    MensajeF(playerid, -1, "Solo se admiten %d jugadores, ¡reporta este error en el foro!", MAX_PLAYERS);
		DelayKick(playerid);
		return 1;
	}

	#if ACTIVAR_SEGURIDAD == true

	new
	    PlayerPCI[50],
		PlayerIP[16],
		current_GTC = GetTickCount();

	static
	    OldIpData[16],
		TimeOldIp;

	GetPlayerIp(playerid, PlayerIP, 16);
	gpci(playerid, PlayerPCI, 50);

	if(!strcmp(PlayerIP, OldIpData))
	{
	    if(current_GTC - TimeOldIp < 500)
	    {
	        Kick(playerid);
	        OldIpData = "";
	        TimeOldIp = 0;
	        return 1;
		}
	}

	alm(OldIpData, PlayerIP);
	TimeOldIp = current_GTC;

	if(!strcmp(PlayerPCI, RakSAMP))
	{
		BanEx(playerid,"RakSAMP");
		return 1;
 	}

	#endif

	new sameipcount = GetNumberOfPlayersOnThisIP(PlayerIP);
	
	if (sameipcount > MAX_CONNECTIONS_PER_IP) {
	
		// 3 minutos.
		BlockIpAddress(PlayerIP, 3 * 60 * 1000);
		
		printf ("IP %s excede máximo de conexiones (%d) | Bloqueada por 3 minutos.", MAX_CONNECTIONS_PER_IP, PlayerIP);
		return 1;
	}
	
	// ---===[ General [===---- //

	new
	    Users = Iter_Count(Player);

	if(Users > Record_UsersOn)
	{
	    Record_UsersOn = Users;
	    printf("- Nuevo record de gente Online: %d personas",Users);
	    MensajeTodosF(-1,"- ¡Nuevo record de gente online! "#CINFO"%d JUGADORES",Users);
		getdate(UsersD_2,UsersD_1,UsersD_0);
		gettime(UsersT_0,UsersT_1,UsersT_2);
		ActualizarDatosGenerales();
	}

	new
		Nombre2[24],
		Pos_
	;

	GetPlayerName(playerid, Nombre2, 24);
	Pos_ = strfind(Nombre2, "_");

	if(Pos_ < 1 || Pos_ > (strlen(Nombre2)-2) || IlegalCharacterName(Nombre2))
	{
	    Mensaje(playerid, 1, "=========================================================");
	    Mensaje(playerid, C_AMARILLO,"Atención: "#CBLANCO"Con ese nombre no puede entrar al servidor. En este modo de juego");
	    MensajeF(playerid,-1,"se intenta imitar al máximo la vida real, y el nombre "#CROJO"%s "#CBLANCO"no es real.", Nombre2);
	    Mensaje(playerid, -1,"Pongase un nombre realista con formato "#CAMARILLO"Nombre_Apellido"#CBLANCO", ejemplo "#CVERDE"Tomas_Fernandez.");
	    Mensaje(playerid, -1,"No se permiten nombres de famosos, como "#CROJO"Jenifer_Lopez.");
	    Mensaje(playerid, -1,"Si su nombre cumple el formato, pero hace burla, o rompe otras reglas serás expulsado por un administrador.");
	    Mensaje(playerid, 1, "=========================================================");
		DelayKick(playerid);
		return 1;
	}

	//Desbug (Un textdraw)
	CreatePlayerTextDraw(playerid, 0.0, 0.0, "_");
	TextDrawShowForPlayer(playerid, TDHora);

	ValidarMayusculas(playerid, Nombre2, Pos_);
	SetPlayerColor(playerid,C_AZULRARO);

	ResetearVariables(playerid);
	ResetearVariablesEx(playerid);

    CargarGangZones2(playerid);
	CargarPText(playerid);

	LoginSecs[playerid] = 0;

	SetPlayerVirtualWorld(playerid, 1);

	new
	    houre,
	    timee;

	gettime(houre, timee);
	SetPlayerTime(playerid, houre, timee);
    return 0;
}

stock ActualizarDatosGenerales()
{
    new
		INI:Arch = INI_Open("Datos_generales.ini");

    INI_WriteInt(Arch,"Gente_online",Record_UsersOn);
	INI_WriteInt(Arch,"Data_0",UsersD_0);
	INI_WriteInt(Arch,"Data_1",UsersD_1);
	INI_WriteInt(Arch,"Data_2",UsersD_2);
	INI_WriteInt(Arch,"Tiempo_0",UsersT_0);
	INI_WriteInt(Arch,"Tiempo_1",UsersT_1);
	INI_WriteInt(Arch,"Tiempo_2",UsersT_2);
	INI_WriteInt(Arch,"Cuentas_Registradas", Cuentas_Registradas);
	INI_WriteInt(Arch,"Dinero_Banco", Dinero_Banco);
    INI_Close(Arch);
	return 1;
}

stock ChangeName(playerid, newname[])
{
	SetPlayerName(playerid, newname);
	alm(Nombre[playerid], newname);
	return 1;
}

stock RequestService(playerid, service)
{
	new
	    str[120],
		servicename[18],
		members;

	switch (service)
	{
	    case SERVICIO_POLICIA:
	    {
	        format(str, 120, "[Llamada entrante de %d] "#CBLANCO"A todas las unidades, se marcó en el GPS la ubicación del sujeto que llamó.", GetCelNumber(playerid));
			foreach (Player, i)
			{
			    if (EsLSPD(i) && InfoJugador[i][jFacDuty] == 1)
			    {
			    	SetPlayerMarkerForPlayer(i, playerid, COLOR_SERVICIO_POLICIA);
			    	Mensaje(i, COLOR_SERVICIO_POLICIA, str);
			    	members++;
				}
			}
			servicename = "policía";
		}
	    case SERVICIO_TAXI:
	    {
	        format(str, 120, "[Llamada entrante de %d] "#CBLANCO"Un cliente necesita un taxi, se marcó en el GPS su ubicación.", GetCelNumber(playerid));
			foreach (Player, i)
			{
			    if (InfoJugador[i][jTrabajo] == ID_Taxista)
			    {
			        if (GetPlayerState(i) == PLAYER_STATE_DRIVER)
			        {
			            if (veh_getJob(GetPlayerVehicleID(i)) == ID_Taxista)
			            {
			    			SetPlayerMarkerForPlayer(i, playerid, COLOR_SERVICIO_TAXI);
			    			Mensaje(i, COLOR_SERVICIO_TAXI, str);
			    			members++;
						}
					}
				}
			}
			servicename = "taxista";
		}
	    case SERVICIO_HOSPITAL:
	    {
	        format(str, 120, "[Llamada entrante de %d] "#CBLANCO"Sujeto llamó al hospital, al parecer necesita asistencia médica. Se marcó en el GPS su ubicación.", GetCelNumber(playerid));
			foreach (Player, i)
			{
			    if (EsMedico(i) && InfoJugador[i][jFacDuty] == 1)
			    {
			    	SetPlayerMarkerForPlayer(i, playerid, COLOR_SERVICIO_HOSPITAL);
			    	Mensaje(i, COLOR_SERVICIO_HOSPITAL, str);
					members++;
				}
			}
			servicename = "médico";
		}
	    case SERVICIO_TALLER:
	    {
	        format(str, 120, "[Llamada entrante de %d] "#CBLANCO"El sujeto llamó al taller, al parecer tiene inconvenientes técnicos. Se marcó en el GPS su ubicación.", GetCelNumber(playerid));
			foreach (Player, i)
			{
			    if (EsMecanico(i) && InfoJugador[i][jFacDuty] == 1)
			    {
			    	SetPlayerMarkerForPlayer(i, playerid, COLOR_SERVICIO_TALLER);
			    	Mensaje(i, COLOR_SERVICIO_TALLER, str);
			    	members++;
				}
			}
			servicename = "mecánico";
		}
	}

	if (!members)
	    return MensajeF(playerid, -1, "En este momento no hay "#CROJO"%ss "#CBLANCO"en servicio, intente nuevamente más tarde.", servicename);

	RequestedService[playerid][service] = 60*3;
	MensajeF(playerid, -1, "Se le informó a "#CINFO"%d "#CBLANCO"%s(s) en servicio tu ubicación, espera a que vengan.", members, servicename);
	return 1;
}

stock pName(playerid)
{
	return Nombre[playerid];
}

stock ValidarMayusculas(playerid, Nombre2[], Pos_)
{
	Nombre2[0] = toupper(Nombre2[0]);
	Nombre2[Pos_+1] = toupper(Nombre2[Pos_+1]);

	Loop(i, strlen(Nombre2), 1)
	{
	    if(i != (Pos_+1))
	    {
			Nombre2[i] = tolower(Nombre2[i]);
		}
	}

	alm(Nombre[playerid], Nombre2);
	alm(Nombre_[playerid], Nombre2);

	Nombre_[playerid][Pos_] = ' ';

	#if defined FIX_SetPlayerName
	SetPlayerName(playerid,Nombre[playerid]);
	#else
	SetPlayerName(playerid,"OTHER_NAME");
	SetPlayerName(playerid,Nombre[playerid]);
	#endif

	return true;
}

stock RemoveBuilds(playerid)
{
	//                          MILITARES                               //
	RemoveBuildingForPlayer(playerid, 3707, 2720.3203, -2530.9141, 19.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 3710, 2788.1563, -2493.9844, 16.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 3708, 2720.3203, -2530.9141, 19.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 3744, 2771.0703, -2520.5469, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3744, 2774.7969, -2534.9531, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3746, 2814.2656, -2521.4922, 25.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 3758, 2748.0156, -2571.5938, 3.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 1306, 2669.9063, -2518.6641, 19.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 5326, 2661.5156, -2465.1406, 20.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 3753, 2748.0156, -2571.5938, 3.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2774.7969, -2534.9531, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2771.0703, -2520.5469, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2783.7813, -2501.8359, 14.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 3624, 2788.1563, -2493.9844, 16.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2783.7813, -2486.9609, 14.6563, 0.25);
	RemoveBuildingForPlayer(playerid, 1278, 2773.3438, -2479.9688, 26.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 1278, 2802.4297, -2556.5234, 26.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2791.9531, -2501.8359, 14.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2797.5156, -2486.8281, 14.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2791.9531, -2486.9609, 14.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3620, 2814.2656, -2521.4922, 25.5156, 0.25);

	//                          BELLIC                                  //
	RemoveBuildingForPlayer(playerid, 3295, 1099.1172, -358.4766, 77.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 3347, 1114.2969, -353.8203, 72.7969, 0.25);
	RemoveBuildingForPlayer(playerid, 3347, 1107.5938, -358.5156, 72.7969, 0.25);
	RemoveBuildingForPlayer(playerid, 3376, 1070.4766, -355.1641, 77.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1012.2891, -282.5391, 73.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1023.4219, -279.9063, 73.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 1503, 1019.3203, -282.7891, 73.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1047.3125, -280.3359, 73.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1059.2266, -281.2656, 73.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1082.9922, -283.6797, 73.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 13451, 1146.1406, -369.1328, 49.3281, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1007.7969, -385.0078, 71.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1042.9219, -386.4531, 70.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1042.9688, -374.4766, 72.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 3425, 1015.0938, -361.1016, 84.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1007.6719, -361.6250, 73.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1042.8125, -368.1953, 73.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1007.6250, -349.8984, 73.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1007.5234, -326.4453, 73.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1007.4766, -314.7188, 73.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1007.4297, -302.9922, 73.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1007.3828, -291.2578, 73.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1083.6641, -368.5313, 73.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1071.9375, -368.5156, 73.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1060.2109, -368.4922, 73.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3375, 1070.4766, -355.1641, 77.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1094.4141, -367.9688, 72.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1092.7109, -327.0625, 73.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1095.3984, -329.8203, 73.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1095.3828, -327.4766, 73.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1092.7969, -321.4844, 73.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1092.9063, -315.9688, 73.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1093.1953, -299.2969, 73.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1093.3047, -293.7813, 73.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1096.1563, -291.2656, 73.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 656, 1096.6250, -294.4141, 72.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 3286, 1099.1172, -358.4766, 77.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 3175, 1107.5938, -358.5156, 72.7969, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1107.1172, -368.5703, 73.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3253, 1106.6406, -319.8750, 73.7422, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1106.4922, -330.0234, 73.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1100.9141, -329.9297, 73.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1106.5469, -328.1641, 73.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1101.2891, -329.5313, 72.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 3250, 1110.2422, -298.9453, 73.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1101.6719, -291.3750, 73.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1107.2656, -291.4609, 73.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 672, 1097.4688, -314.2109, 73.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 3175, 1114.2969, -353.8203, 72.7969, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1117.5781, -330.2109, 73.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1112.0000, -330.1250, 73.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 656, 1116.4453, -326.7578, 72.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1112.7813, -291.5703, 73.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1118.3750, -291.6641, 73.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1120.4297, -327.7656, 73.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1121.0234, -294.5234, 73.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1120.6250, -316.7344, 73.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1120.9297, -300.1172, 73.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1120.8203, -305.6328, 73.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1120.7344, -311.2188, 73.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1120.5391, -322.2500, 73.5703, 0.25);

	//                          EXT HOSPITAL                            //
	RemoveBuildingForPlayer(playerid, 1297, 1190.7734, -1383.2734, 15.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 1297, 1190.7734, -1350.4141, 15.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 1297, 1210.8047, -1367.3828, 15.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 1297, 1190.7734, -1320.8594, 15.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 1297, 1210.8047, -1337.8359, 15.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 1297, 1190.7734, -1299.7422, 15.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 1297, 1210.8047, -1304.9688, 15.7734, 0.25);

	//                          CAMIONEROS FAC                          //
	RemoveBuildingForPlayer(playerid, 5244, 2198.8516, -2213.9219, 14.8828, 0.25);

	//                          AYUNTA TEXTURIZED         //
	RemoveBuildingForPlayer(playerid, 4024, 1479.8672, -1790.3984, 56.0234, 0.01);
	RemoveBuildingForPlayer(playerid, 4044, 1481.1875, -1785.0703, 22.3828, 0.01);
	RemoveBuildingForPlayer(playerid, 4057, 1479.5547, -1693.1406, 19.5781, 0.01);
	RemoveBuildingForPlayer(playerid, 4210, 1479.5625, -1631.4531, 12.0781, 0.01);
	RemoveBuildingForPlayer(playerid, 4002, 1479.8672, -1790.3984, 56.0234, 0.01);
	RemoveBuildingForPlayer(playerid, 3980, 1481.1875, -1785.0703, 22.3828, 0.01);
	RemoveBuildingForPlayer(playerid, 4003, 1481.0781, -1747.0313, 33.5234, 0.01);
	RemoveBuildingForPlayer(playerid, 4186, 1479.5547, -1693.1406, 19.5781, 0.01);
	RemoveBuildingForPlayer(playerid, 3985, 1479.5625, -1631.4531, 12.0781, 0.001);

	//          				24/7 AYUNTA             //
	RemoveBuildingForPlayer(playerid, 4049, 1330.3750, -1793.0781, 22.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 4051, 1371.8203, -1754.8203, 19.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 4191, 1353.2578, -1764.5313, 15.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 4194, 1360.3828, -1840.6172, 26.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 4219, 1330.3281, -1792.5938, 23.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 4226, 1359.2813, -1796.4688, 24.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 1265, 1336.1563, -1844.0156, 12.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 1372, 1336.3359, -1842.8516, 12.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 1265, 1336.3750, -1841.5391, 13.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 1265, 1337.2578, -1841.8750, 13.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 4193, 1360.3828, -1840.6172, 26.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 1220, 1340.8906, -1835.3672, 12.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 1230, 1340.1328, -1835.0391, 12.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 1220, 1340.8672, -1834.4844, 12.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 1265, 1336.8750, -1818.2266, 12.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 1372, 1336.7891, -1816.3047, 12.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 1220, 1338.1250, -1816.5781, 12.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 1230, 1338.0781, -1815.7578, 12.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 1220, 1338.8984, -1816.1641, 12.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 1220, 1342.2734, -1806.2031, 12.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 1230, 1342.6328, -1807.0391, 12.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 1221, 1342.5156, -1805.0703, 12.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 4231, 1342.0547, -1800.2188, 25.4297, 0.25);
	RemoveBuildingForPlayer(playerid, 1220, 1338.9531, -1796.4297, 12.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 4023, 1359.2813, -1796.4688, 24.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 1230, 1338.9609, -1796.0000, 13.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 1220, 1338.9375, -1795.4609, 12.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 4112, 1330.3750, -1793.0781, 22.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 1221, 1338.9688, -1793.7266, 12.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 1372, 1337.6953, -1774.7344, 12.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 1265, 1338.7891, -1775.3203, 12.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 1265, 1337.0078, -1773.8672, 13.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 4022, 1353.2578, -1764.5313, 15.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 1532, 1353.1328, -1759.6563, 12.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1341.4531, -1755.4844, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 4021, 1371.8203, -1754.8203, 19.0469, 0.25);

	//                          CARCEL AERO                            //
	RemoveBuildingForPlayer(playerid, 5202, 2050.3594, -2045.9297, 20.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 3686, 2127.8828, -2083.2734, 16.0781, 0.25);
	RemoveBuildingForPlayer(playerid, 3688, 2159.9688, -2093.6875, 17.8594, 0.25);
	RemoveBuildingForPlayer(playerid, 3723, 2100.7031, -1989.3984, 16.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 3723, 2093.2813, -1975.5859, 16.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 3744, 2073.8281, -2091.2344, 15.1328, 0.25);
	RemoveBuildingForPlayer(playerid, 3744, 2051.0547, -2089.6094, 15.1328, 0.25);
	RemoveBuildingForPlayer(playerid, 3744, 2026.2500, -2093.3906, 15.1328, 0.25);
	RemoveBuildingForPlayer(playerid, 5313, 2043.9922, -2016.8672, 25.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 5316, 2043.9922, -2016.8672, 25.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 5357, 2177.9922, -2006.7578, 23.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2014.6328, -2105.7969, 16.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 3578, 2026.8359, -2099.4531, 13.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2026.2500, -2093.3984, 15.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 3578, 2050.5938, -2099.4609, 13.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 3578, 2074.0156, -2099.4453, 13.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 3621, 2159.9688, -2093.6875, 17.8594, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2073.8359, -2091.2188, 15.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2051.0469, -2089.6016, 15.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 3627, 2127.8828, -2083.2734, 16.0781, 0.25);
	RemoveBuildingForPlayer(playerid, 5138, 2050.3594, -2045.9297, 20.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2092.6875, -2043.3984, 15.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 1306, 2001.0234, -2024.2891, 19.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 5312, 2068.9609, -2013.4766, 24.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 2093.8828, -2003.5547, 11.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 2093.8828, -2018.8672, 11.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 2109.6016, -2018.8672, 11.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 5291, 2177.9922, -2006.7578, 23.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 3286, 2042.1953, -1986.0859, 38.3281, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 2074.2734, -1999.6016, 11.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 3722, 2100.7031, -1989.3984, 16.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 3722, 2093.2813, -1975.5859, 16.8672, 0.25);

	//                          CASA BLANCA                             //
	RemoveBuildingForPlayer(playerid, 1290, 1242.7266, -2007.3828, 64.6094, 0.25);
	RemoveBuildingForPlayer(playerid, 1290, 1280.2031, -2007.3828, 63.7734, 0.25);

	//                      LABORATORIO DE DROGA (INT)                   //
	RemoveBuildingForPlayer(playerid, 1499, 2522.3516, -1303.4063, 1047.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 1499, 2522.3359, -1300.3984, 1047.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 936, 2543.0703, -1301.0000, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 1499, 2571.3359, -1300.3984, 1043.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 1499, 2571.3516, -1303.4063, 1043.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 2676, 2538.0625, -1281.7969, 1043.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 934, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 941, 0.0, 0.0, 0.0, 6000.0);

	//                  EXT DE DROGA                //
	RemoveBuildingForPlayer(playerid, 785, -716.5781, -2153.8203, 18.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 785, -698.9063, -2151.0391, 20.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 785, -659.5703, -2170.1641, 12.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 785, -667.6563, -2138.8125, 22.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 724, -768.2578, -2151.4375, 19.4609, 0.25);

	//            		CAJAS DE ARMAS Y BALAS              //
	RemoveBuildingForPlayer(playerid, 1271, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 2358, 0.0, 0.0, 0.0, 6000.0);

	//                  CAMIONEROS FAC                  //
	RemoveBuildingForPlayer(playerid, 3744, 2193.2578, -2286.2891, 14.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 5305, 2198.8516, -2213.9219, 14.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 3747, 2234.3906, -2244.8281, 14.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 3747, 2226.9688, -2252.1406, 14.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 3747, 2219.4219, -2259.5234, 14.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 3747, 2212.0938, -2267.0703, 14.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 3747, 2204.6328, -2274.4141, 14.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2193.2578, -2286.2891, 14.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 3569, 2204.6328, -2274.4141, 14.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 3569, 2212.0938, -2267.0703, 14.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 3569, 2219.4219, -2259.5234, 14.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2217.2188, -2250.3594, 16.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 3569, 2226.9688, -2252.1406, 14.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 3569, 2234.3906, -2244.8281, 14.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 5244, 2198.8516, -2213.9219, 14.8828, 0.25);

	//                  BARCO IMPORTACIONES             //
	RemoveBuildingForPlayer(playerid, 5156, 2838.0391, -2423.8828, 10.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 5159, 2838.0313, -2371.9531, 7.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 5160, 2829.9531, -2479.5703, 5.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 5161, 2838.0234, -2358.4766, 21.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 5162, 2838.0391, -2423.8828, 10.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 5163, 2838.0391, -2532.7734, 17.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 5164, 2838.1406, -2447.8438, 15.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 5165, 2838.0313, -2520.1875, 18.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 5166, 2829.9531, -2479.5703, 5.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 5167, 2838.0313, -2371.9531, 7.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 5335, 2829.9531, -2479.5703, 5.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 5336, 2829.9531, -2479.5703, 5.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 5352, 2838.1953, -2488.6641, 29.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 5157, 2838.0391, -2532.7734, 17.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 3724, 2838.1953, -2488.6641, 29.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 5155, 2838.0234, -2358.4766, 21.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 3724, 2838.1953, -2407.1406, 29.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 5158, 2837.7734, -2334.4766, 11.9922, 0.25);

	//              F.A                 //
	RemoveBuildingForPlayer(playerid, 3696, 2794.5000, -1923.8828, 16.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3696, 2794.4922, -1965.1172, 16.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3696, 2744.0703, -1965.1172, 16.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3696, 2744.0781, -1923.8828, 16.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 1528, 2794.5313, -1906.8125, 14.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 5361, 2746.7500, -1944.7344, 14.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 5362, 2791.8359, -1944.2656, 14.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2726.3516, -1928.7734, 9.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2726.5547, -1902.2422, 9.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2728.2422, -1959.3281, 9.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2730.8672, -1960.3750, 9.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2730.9844, -1924.3438, 9.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 1307, 2751.2031, -1984.0078, 12.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 3697, 2744.0703, -1965.1172, 16.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 5301, 2746.7500, -1944.7344, 14.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 3697, 2744.0781, -1923.8828, 16.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 1307, 2758.8438, -1923.1406, 12.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 1307, 2780.1016, -1974.4609, 12.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 1307, 2782.5469, -1904.2500, 12.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 5234, 2786.7734, -1970.0625, 20.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 5308, 2791.8359, -1944.2656, 14.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 3697, 2794.5000, -1923.8828, 16.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3697, 2794.4922, -1965.1172, 16.8438, 0.25);

	//          CAMIONEROS                  //
	RemoveBuildingForPlayer(playerid, 1491, 2577.4531, -1301.9141, 1059.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 1491, 2577.4375, -1298.8906, 1059.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 14449, 2567.6172, -1294.6328, 1061.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 2672, 2557.0078, -1283.8438, 1060.3047, 0.25);
	RemoveBuildingForPlayer(playerid, 14446, 2573.1641, -1281.7031, 1064.9609, 0.25);

	//          MÁQUINAS DE BEBIDAS         //
	RemoveBuildingForPlayer(playerid, 1302, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1209, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 955, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 956, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1775, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1776, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1977, 0.0, 0.0, 0.0, 6000.0);

	//          ESTACIONES DE SERVICIO (SURTIDORES)      //
	RemoveBuildingForPlayer(playerid, 1676, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 1686, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 3465, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 1244, 0.0, 0.0, 0.0, 6000.0);

	//          ESTACIONAMIENTO         //
	RemoveBuildingForPlayer(playerid, 7184, 2251.2500, 2490.9141, 11.8984, 0.25);

	//          TAXISTAS                //
	RemoveBuildingForPlayer(playerid, 5551, 2140.5156, -1735.1406, 15.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 5633, 2089.3594, -1643.9297, 18.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2125.0859, -1748.1328, 16.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 2110.6953, -1742.5781, 12.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2121.3750, -1721.6875, 13.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2126.5781, -1722.4688, 13.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2131.8438, -1722.6563, 13.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 5410, 2140.5156, -1735.1406, 15.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2137.1094, -1722.6563, 13.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2142.3125, -1722.6563, 13.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2147.5938, -1722.6563, 13.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2152.8750, -1722.6563, 13.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2158.1484, -1722.6563, 13.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2163.4297, -1722.6563, 13.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2167.2188, -1748.1328, 16.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 2175.3125, -1730.8906, 12.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2168.7656, -1722.6563, 13.7031, 0.25);

	//          SILLA ASISTENTE LSPD    //
	RemoveBuildingForPlayer(playerid, 2356, 225.6563, 110.0781, 1002.2031, 0.25);

	//      		LVL 2 CAMIONERO         		//
	RemoveBuildingForPlayer(playerid, 1412, 2364.1953, -2149.6563, 13.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2360.4844, -2146.0313, 13.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2368.6406, -2151.4063, 13.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2373.9219, -2151.3125, 13.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2384.4688, -2151.1328, 13.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2379.1953, -2151.2188, 13.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 2387.0156, -2148.5391, 13.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 985, 2497.4063, 2777.0703, 11.5313, 0.25);
	RemoveBuildingForPlayer(playerid, 986, 2497.4063, 2769.1094, 11.5313, 0.25);
	RemoveBuildingForPlayer(playerid, 7095, 2545.5469, 2751.3828, 11.9609, 0.25);

	//      			COSECHADORES            		//
	RemoveBuildingForPlayer(playerid, 3338, -170.0313, -1359.1563, 1.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1454, -333.6953, -1434.8359, 15.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 1454, -328.9688, -1434.8359, 15.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 1454, -323.3828, -1434.8359, 14.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 1454, -315.8438, -1434.8359, 14.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1454, -307.7344, -1434.8359, 14.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 3244, -170.0313, -1359.1563, 1.5000, 0.25);

	//      CAMPO DE MARIHUANA      //
	RemoveBuildingForPlayer(playerid, 1447, -1005.1094, -1602.4375, 76.6484, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, -1010.1641, -1602.6250, 76.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, -1020.4922, -1602.8594, 76.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 1447, -1015.4297, -1602.6328, 76.7188, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, -1025.7344, -1603.0156, 76.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 1447, -1031.0000, -1603.0234, 76.7188, 0.25);
	RemoveBuildingForPlayer(playerid, 1447, -994.7422, -1601.5625, 76.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, -989.4766, -1601.5547, 76.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, -984.4297, -1601.3203, 76.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, -999.8047, -1601.7891, 76.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1447, -979.2109, -1601.1875, 76.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 1447, -963.8906, -1601.1875, 76.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, -969.1094, -1601.3203, 76.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, -974.1563, -1601.5547, 76.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 1447, -958.4375, -1601.1875, 77.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1447, -953.1563, -1601.1875, 77.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1023.1328, -1632.4609, 75.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1023.1328, -1629.2813, 75.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1023.1328, -1626.1016, 75.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1023.1328, -1622.9766, 75.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 3409, -1023.1328, -1622.2031, 75.3359, 0.25);

	//      INTERIORES (CASAS)      //
	// Int 8 Ex
	RemoveBuildingForPlayer(playerid, 2288, 2373.3828, -1130.4531, 1051.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 2259, 2368.6094, -1122.5078, 1052.0469, 0.25);
	// Int 9 Ex
	RemoveBuildingForPlayer(playerid, 2108, 2192.0547, -1219.5234, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2108, 2194.3359, -1219.5234, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2328, 2189.4531, -1210.1719, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2249, 2190.2188, -1209.3828, 1049.4453, 0.25);
	// Int 14 Ex
	RemoveBuildingForPlayer(playerid, 1703, 2322.2266, -1142.4766, 1049.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 1822, 2323.9297, -1142.2578, 1049.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 1703, 2326.5234, -1140.5703, 1049.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 1703, 2323.4375, -1139.5469, 1049.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 2257, 2320.4141, -1134.6328, 1053.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 2254, 2328.1484, -1134.6172, 1054.0625, 0.25);


	RemoveBuildingForPlayer(playerid, 2865, 2499.5000, -1712.2188, 1014.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 2821, 2500.9297, -1710.3516, 1014.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 1509, 2501.1953, -1710.6953, 1015.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 2277, 2494.7578, -1705.3281, 1018.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 1512, 2500.8906, -1706.5703, 1015.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 1512, 2501.1172, -1705.4766, 1015.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 1509, 2501.1953, -1706.8594, 1015.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 1520, 2501.2969, -1707.2344, 1014.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 1520, 2501.2969, -1707.3594, 1014.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 2830, 2491.8359, -1702.9375, 1014.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 2306, 2491.8359, -1701.2813, 1017.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 2306, 2494.0156, -1701.3125, 1017.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 2247, 2494.1172, -1700.3359, 1018.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 14478, 2494.4297, -1698.3359, 1014.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 1740, 2495.2891, -1704.4922, 1017.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 2816, 2494.8047, -1702.5156, 1018.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 2272, 2496.2188, -1702.5234, 1018.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 14477, 2501.0703, -1697.6172, 1016.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 14490, 2501.0703, -1697.6172, 1016.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 14491, 2501.0703, -1697.6172, 1016.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 2252, 2493.0469, -1697.1875, 1014.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 2827, 2497.6563, -1697.0703, 1014.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 14489, 2490.4453, -1694.8672, 1015.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 2028, 2491.3438, -1694.7656, 1013.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 2528, 232.6328, 1110.5938, 1079.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 2523, 232.6563, 1108.8281, 1079.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 2520, 234.6016, 1109.3828, 1079.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 2522, 235.6016, 1112.2422, 1079.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 2523, 234.7188, 1117.4609, 1083.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 2528, 234.6172, 1119.2266, 1083.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 2520, 237.3438, 1119.1641, 1083.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 2522, 234.6953, 1120.1563, 1083.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 14721, 240.4609, 1114.3906, 1083.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 2240, 26.1563, 1343.2969, 1083.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 2251, 266.4531, 303.3672, 998.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 14867, 270.2813, 302.5547, 999.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1720, 272.9063, 304.7891, 998.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 14870, 273.1641, 303.1719, 1000.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 2251, 273.9922, 303.3672, 998.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 14868, 274.1328, 304.5078, 1001.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 948, 266.5703, 306.4453, 998.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 14866, 270.1172, 307.6094, 998.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 14869, 273.8125, 305.0156, 998.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 2241, 2194.5469, -1226.4844, 1048.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 2526, 2191.8750, -1225.3594, 1048.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 2523, 2191.8750, -1223.5938, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2241, 2194.5469, -1221.7969, 1048.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 2528, 2194.6953, -1223.1172, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2278, 2194.6406, -1221.5859, 1050.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 2095, 2186.2109, -1219.1563, 1048.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2186.2500, -1220.3203, 1048.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2189.5000, -1220.3203, 1048.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2095, 2189.6250, -1219.1563, 1048.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 2280, 2196.8828, -1219.9688, 1050.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 2088, 2199.1875, -1219.0078, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1717, 2187.2422, -1215.6719, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2090, 2188.4453, -1217.1797, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2088, 2188.4688, -1213.0234, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2281, 2196.1484, -1214.6797, 1050.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 2298, 2197.2734, -1216.6250, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2197.2500, -1212.8516, 1048.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 2259, 2198.5859, -1213.1484, 1050.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 2828, 2198.5391, -1212.8359, 1048.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2199.9375, -1212.8516, 1048.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 2832, 2181.5000, -1206.5234, 1049.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 2134, 2181.6250, -1207.4219, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2132, 2181.6328, -1205.4219, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2339, 2181.6250, -1206.4219, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2131, 2184.6250, -1207.8594, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2121, 2183.5625, -1204.2344, 1048.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 2115, 2184.6641, -1204.1719, 1048.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 2299, 2187.6250, -1212.1563, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2826, 2186.4531, -1210.5625, 1048.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2185.7109, -1209.4063, 1048.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 2259, 2185.3984, -1209.9609, 1050.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 2328, 2186.4375, -1210.1719, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2255, 2188.1563, -1209.1406, 1050.2422, 0.25);
	RemoveBuildingForPlayer(playerid, 2121, 2185.8047, -1205.2656, 1048.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 2281, 2187.8516, -1207.1250, 1050.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 2069, 2188.2109, -1207.5703, 1048.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 2280, 2189.8984, -1207.8438, 1050.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 2108, 2192.0547, -1209.7109, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2108, 2194.3359, -1209.7109, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2826, 2190.5781, -1204.4297, 1048.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 1702, 2191.5781, -1206.9375, 1048.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 2857, 2193.0938, -1204.2813, 1048.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 1818, 2193.1250, -1205.1328, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1702, 2196.1484, -1205.3828, 1048.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 2260, 2196.7188, -1206.4922, 1050.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 2831, 2181.5625, -1203.5000, 1049.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 2134, 2181.6250, -1203.4219, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2141, 2181.6250, -1201.4219, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2339, 2181.6250, -1202.4219, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2831, 2184.6016, -1203.8906, 1048.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 2121, 2185.8047, -1202.6094, 1048.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 2121, 2183.3281, -1202.3750, 1048.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 2131, 2183.3750, -1200.8672, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 15043, 2189.1641, -1203.6484, 1048.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 1717, 2190.5469, -1201.5625, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2244, 2188.0000, -1200.8516, 1048.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 2255, 2188.2656, -1200.8438, 1050.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 2126, 2192.4063, -1200.5234, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2811, 2192.8359, -1200.0391, 1048.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 15040, 2193.2031, -1199.1094, 1050.1328, 0.25);
	RemoveBuildingForPlayer(playerid, 2100, 2195.2500, -1200.4844, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2023, 2305.5547, -1212.6406, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1768, 2305.8281, -1210.3750, 1048.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2076, 2308.7578, -1209.7188, 1051.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 1818, 2308.8438, -1208.9141, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1717, 2305.7813, -1207.8125, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1764, 2310.9844, -1209.1797, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2100, 2311.5547, -1206.6719, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 15052, 2313.8438, -1212.7344, 1049.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 15056, 2313.8438, -1212.7344, 1049.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 2123, 2312.9609, -1145.0703, 1050.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 2123, 2314.2969, -1146.3125, 1050.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 2123, 2315.4219, -1145.0703, 1050.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 2086, 2314.2734, -1144.8984, 1050.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 2123, 2314.2969, -1143.6250, 1050.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1144.0859, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2335.3594, -1144.0703, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2135, 2336.3516, -1144.0781, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2305, 2337.3203, -1144.0781, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1143.1016, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2337.3203, -1143.0938, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 1741, 2312.6484, -1140.7891, 1053.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1142.1094, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1141.1172, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2334.4219, -1140.9688, 1050.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2337.3203, -1142.1094, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2139, 2337.3125, -1141.1094, 1049.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 2088, 2338.4531, -1141.3672, 1053.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 2270, 2340.2734, -1141.7109, 1054.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 15050, 2330.3281, -1140.3047, 1051.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1140.1328, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2333.3281, -1139.8672, 1050.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2115, 2334.4297, -1139.6250, 1049.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 15049, 2334.3281, -1139.5859, 1051.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2335.3672, -1139.8750, 1050.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2303, 2337.3281, -1140.1172, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2090, 2309.5156, -1139.3438, 1053.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1139.1406, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2333.3281, -1138.8281, 1050.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2335.3672, -1138.8359, 1050.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2298, 2336.5391, -1138.7891, 1053.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1138.1563, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2136, 2337.3281, -1138.1328, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2240, 2319.2500, -1137.8750, 1050.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2240, 2329.5000, -1137.8750, 1050.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1137.1641, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2334.4219, -1137.5859, 1050.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2139, 2337.3125, -1137.1484, 1049.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 2088, 2310.6641, -1136.3047, 1053.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1136.1719, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1135.1875, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2281, 2335.2656, -1136.4063, 1054.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2336.5156, -1135.0156, 1053.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 2271, 2337.8047, -1135.3516, 1054.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2337.3203, -1136.1641, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2337.3203, -1135.1797, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2339.2031, -1135.0156, 1053.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 1731, 2363.5703, -1134.3359, 1052.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 2077, 2357.5469, -1134.1875, 1050.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 2298, 2361.2969, -1134.1484, 1049.8594, 0.25);
	RemoveBuildingForPlayer(playerid, 2141, 2367.5625, -1135.3906, 1049.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2339, 2367.5625, -1134.3906, 1049.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2134, 2367.5625, -1133.3906, 1049.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2077, 2357.5469, -1131.5234, 1050.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 2271, 2357.8594, -1132.8828, 1051.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 2087, 2360.2969, -1129.9766, 1049.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2103, 2360.8281, -1130.1406, 1051.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2279, 2369.8125, -1135.4375, 1052.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 2370.5781, -1134.0313, 1050.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 2371.7500, -1133.5938, 1050.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 2278, 2372.1875, -1135.4297, 1052.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 2075, 2370.8281, -1132.8750, 1053.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 2030, 2371.2266, -1132.9219, 1050.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 2812, 2371.2969, -1133.0156, 1050.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 2371.7500, -1131.8594, 1050.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 2370.5781, -1131.8594, 1050.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 2141, 2374.5000, -1135.3906, 1049.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 2132, 2374.5000, -1131.3906, 1049.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 2339, 2374.5078, -1134.3828, 1049.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 2134, 2374.5078, -1133.3828, 1049.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 2339, 2374.5078, -1130.3828, 1049.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 2225, 2369.1797, -1125.8047, 1049.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 2260, 2369.7188, -1123.8594, 1052.0781, 0.25);
	RemoveBuildingForPlayer(playerid, 2331, 2367.3672, -1123.1563, 1050.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 2302, 2364.5547, -1122.9688, 1049.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 2333, 2367.5703, -1122.1484, 1049.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 2255, 2361.5703, -1122.1484, 1052.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 1734, 2364.8828, -1122.0469, 1053.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 2811, 2372.7031, -1128.9141, 1049.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 15061, 2371.6094, -1128.1875, 1051.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 15062, 2371.6094, -1128.1875, 1051.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2868, 2370.1250, -1125.2344, 1049.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 1703, 2370.3906, -1124.4375, 1049.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 1822, 2372.0938, -1124.2188, 1049.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 2828, 2374.2578, -1129.2578, 1050.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 2084, 2374.4688, -1129.2109, 1049.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 1703, 2374.6797, -1122.5313, 1049.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 2281, 2375.6641, -1128.1016, 1051.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2868, 2374.9766, -1125.2344, 1049.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 2280, 2375.6484, -1122.3828, 1051.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 15035, 2205.9375, -1073.9922, 1049.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 2259, 2316.3125, -1024.5156, 1051.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 2242, 2321.4609, -1019.7500, 1049.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 2078, 2318.2578, -1017.6016, 1049.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 2203, 2312.1641, -1014.5547, 1050.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 2139, 2312.3750, -1014.5547, 1049.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 2830, 2312.1406, -1013.6719, 1050.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 2139, 2312.3750, -1013.5625, 1049.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 2241, 2322.4453, -1026.4453, 1050.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 2244, 2322.3594, -1019.8906, 1049.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 2112, 2322.6563, -1026.4219, 1049.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 2105, 2323.0156, -1026.8594, 1050.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 2224, 2322.6953, -1019.0859, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2261, 2322.4609, -1015.4297, 1051.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2165, 2323.3750, -1015.8984, 1053.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 1714, 2323.7500, -1014.8594, 1053.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 1755, 2325.2734, -1025.0625, 1049.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 2229, 2325.6406, -1017.2813, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2107, 2326.0703, -1016.6719, 1050.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 2088, 2325.5313, -1015.0938, 1053.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 15060, 2326.6641, -1022.1953, 1049.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 2104, 2327.1719, -1017.2109, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2088, 2327.4766, -1015.0938, 1053.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2139, 2312.3750, -1012.5703, 1049.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 2303, 2312.3594, -1011.5859, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2313.8906, -1011.5781, 1049.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2314.9844, -1012.6797, 1049.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 2115, 2314.9922, -1011.4063, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2832, 2315.0547, -1011.2813, 1050.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2315.9297, -1011.5859, 1049.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 2831, 2312.1875, -1010.6563, 1050.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 2136, 2312.3594, -1010.6094, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2313.8906, -1010.5391, 1049.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2315.9297, -1010.5469, 1049.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 2139, 2317.3438, -1009.5938, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2314.9844, -1009.2969, 1049.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 1822, 2324.3359, -1012.2188, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2333, 2323.4922, -1009.7266, 1053.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 2323.7891, -1009.5938, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 2324.7813, -1009.5938, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2331, 2323.4453, -1009.2813, 1053.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 2298, 2325.0625, -1010.7188, 1053.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 2325.7813, -1009.5938, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 1822, 2326.6250, -1012.2188, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 2326.7734, -1009.5938, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2312.3672, -1008.6094, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2314.3281, -1007.6328, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2305, 2312.3672, -1007.6250, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2135, 2313.3359, -1007.6250, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2139, 2317.3438, -1008.6016, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 1735, 2318.8047, -1007.9688, 1049.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 2139, 2317.3438, -1007.6094, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2194, 2322.3594, -1008.4453, 1054.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2325.0391, -1006.9453, 1054.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 2528, 2321.2656, -1006.0313, 1053.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 2249, 2323.0156, -1005.8828, 1054.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 2526, 2318.3750, -1003.0703, 1053.7422, 0.25);
	RemoveBuildingForPlayer(playerid, 2523, 2322.2500, -1003.0703, 1053.7188, 0.25);
	RemoveBuildingForPlayer(playerid, 2227, 2370.2344, -1120.5859, 1049.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 1742, 2366.6953, -1119.2500, 1049.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 1703, 2371.6016, -1121.5078, 1049.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 2227, 2375.5859, -1120.9922, 1049.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 1760, 2327.8047, -1021.0313, 1049.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 2295, 2328.7891, -1015.8281, 1049.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 1739, 2328.8359, -1023.6016, 1050.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1739, 2329.0469, -1022.6953, 1050.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 2229, 2329.0703, -1017.2813, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2295, 2329.2578, -1015.8281, 1053.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 2327.7578, -1009.5938, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2327.7266, -1006.9453, 1054.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 2329.1875, -1011.0078, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 2329.1875, -1011.9922, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 2329.1875, -1010.0234, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2285, 2328.9766, -1007.6406, 1051.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 2869, 2329.2891, -1025.8672, 1049.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 2829, 2329.4688, -1023.6250, 1050.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2868, 2329.7656, -1023.0156, 1050.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2117, 2329.6953, -1022.5859, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 1739, 2330.3672, -1023.5156, 1050.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1739, 2330.3672, -1022.6875, 1050.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 2243, 2329.2969, -1018.0313, 1049.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 2096, 2330.2266, -1012.9688, 1053.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 2240, 2330.7422, -1010.7813, 1054.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 2096, 2330.2266, -1009.1875, 1053.7109, 0.25);

	//		PAYNSPRAY       //
	RemoveBuildingForPlayer(playerid, 5422, 2071.4766, -1831.4219, 14.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 5856, 1024.9844, -1029.3516, 33.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 5779, 1041.3516, -1025.9297, 32.6719, 0.25);

	//      MOTOCROSS       //
	RemoveBuildingForPlayer(playerid, 13592, -1405.2031, 1645.5234, 1061.2422, 0.25);

	//      ENTREGAS        //
	RemoveBuildingForPlayer(playerid, 762, 980.8047, -2186.8984, 16.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 762, 1000.1328, -2132.2656, 16.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 762, 1015.9531, -2078.9766, 16.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 762, 1023.5938, -2050.6875, 16.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 762, 1011.8594, -2043.5000, 16.0859, 0.25);

	//		CARTEL LSPD       //
	RemoveBuildingForPlayer(playerid, 1266, 1538.5234, -1609.8047, 19.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 4229, 1597.9063, -1699.7500, 30.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 4230, 1597.9063, -1699.7500, 30.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 1260, 1538.5234, -1609.8047, 19.8438, 0.25);

	//		CAMIONEROS       //
	RemoveBuildingForPlayer(playerid, 3244, 2632.3906, -2136.3281, 12.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 3244, 2632.3906, -2136.3281, 12.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 3779, 2631.9141, -2098.5781, 20.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 3779, 2653.9375, -2092.3359, 20.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 3637, 2631.9141, -2098.5781, 20.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 3637, 2653.9375, -2092.3359, 20.0078, 0.25);
	return 1;
}

public OnPlayerRequestClass (playerid, classid)
{
	if (GetPVarInt(playerid, "Logueado"))
	{
	    //SetTimerEx ("RequestSpawn2", 1000, "i", playerid);
	    RequestSpawn2 (playerid);
	    return 1;
	}
	
	InfoJugador[playerid][jNameCode] = udb_hash(pName(playerid));

	if (IsPlayerNPC(playerid)) return SpawnPlayer(playerid);

	static
		querystr [110];

	querystr [0] = '\0';

	opmysql_format(querystr, sizeof (querystr), "SELECT `Clave` FROM `Usuarios` WHERE `Nombre` = '%e'", pName (playerid));
	opmysql_tquery(querystr, "OnQueryFinish", "ii", playerid, query_type_loadpassword);
	return 1;
}

CALLBACK: RequestSpawn2 (playerid)
{
	SpawnPlayer (playerid);
}

CALLBACK: OnAccountDataReceived (playerid, registered)
{
	SetSpawnInfo(playerid, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    LimpiarPantalla(playerid,10);

	ResetCustomTime (playerid);
	ResetCustomWeather (playerid);

	CamaraAleatoria(playerid);

	new
	    str[40];

	A_Format (str, "MalNombre/%s.mn", pName (playerid));

	if (fexist (str))
	{
	    MensajeF (playerid, -1, "Lo sentimos, su nombre "#CAMARILLO"(%s) "#CBLANCO"se encuentra bloqueado por ser inválido para éste modo de juego.", pName (playerid));
	    DelayKick (playerid);
	    return 1;
	}

	if (registered)
	{
		LoginSecs[playerid] = 25;
	}
	else
	{
	    if (strfind (pName(playerid), "Ciudad") != -1)
	    {
	        Mensaje (playerid, -1, "Su nombre no puede contener la palabra "#CAMARILLO"Ciudad.");
	        DelayKick (playerid);
			return 1;
		}

		SetSpawnInfo(playerid, 0, 60, -1902.3170, 16.8255, 1061.1436, 180.0, 0, 0, 0, 0, 0, 0);
	}
	DialogLR (playerid, 1-registered);
	return 1;
}

stock DialogLR (playerid, type)
{
	static
		dialogstr [512];

	if (type == 0)
	{
		A_Format (dialogstr, DIALOG_INGRESO, pName (playerid));
		ShowPlayerDialog(playerid, dIngreso, DIALOG_STYLE_PASSWORD, HEADER_INGRESO, dialogstr, "Ingresar", "Cancelar");
	}
	else if (type == 1)
	{
		A_Format (dialogstr, DIALOG_REGISTRO, pName (playerid));
		ShowPlayerDialog(playerid, dRegistro, DIALOG_STYLE_PASSWORD, HEADER_REGISTRO, dialogstr, "Registrarse", "Cancelar");
	}
}

#if ACTIVAR_SEGURIDAD == true

	public OnPlayerCleoDetected(playerid, cleoid)
	{
		switch(cleoid)
		{
			case CLEO_CARWARP:
			{
				antic_Kick(playerid, "Cleo mod (CW)");
			}
			case CLEO_CARSWING:
			{
				antic_Ban(playerid,"Cleo mod (CS)");
			}
			case CLEO_CAR_PARTICLE_SPAM:
			{
				antic_Ban(playerid,"Cleo mod (CPS)");
			}
			case CLEO_FAKEKILL:
			{
				antic_Kick(playerid,"Fakekill");
			}
			case CLEO_CAR_TELEPORT:
			{
				antic_Kick(playerid,"Cleo Mod (CarTP)");
			}
		}
		return 1;
	}

#endif

public OnPlayerStreamIn(playerid, forplayerid)
{
	if(GetPVarInt(playerid,"USANDO_MASCARA") || IsPlayerNPC(playerid))
	{
	    if(!InfoJugador[forplayerid][jAdmin])
			ShowPlayerNameTagForPlayer(forplayerid, playerid, false);
	}
	if (PlayerBools [playerid] & e_REFUERZOS)
	{
	    if (EsLSPD(playerid) && EsLSPD(forplayerid))
	    {
	        SetPlayerMarkerForPlayer (forplayerid, playerid, C_REFUERZOSLSPD);
		}
	}
	ActualizarServicio(playerid, forplayerid);
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	if (PlayerBools [playerid] & e_REFUERZOS)
	{
	    if (EsLSPD(playerid) && EsLSPD(forplayerid))
	    {
	        SetPlayerMarkerForPlayer (forplayerid, playerid, C_REFUERZOSLSPD);
		}
	}
	ActualizarServicio(playerid, forplayerid);
	return 1;
}

stock ActualizarServicio(playerid, forplayerid)
{
	for (new i; i < MAX_SERVICIOS; i++)
	{
	    if (RequestedService[playerid][i] > 0)
	    {
	        switch (i)
	        {
	            case SERVICIO_POLICIA:
	            {
		            if (ID_Faccion(forplayerid) == IDLSPD && InfoJugador[forplayerid][jFacDuty])
		            	SetPlayerMarkerForPlayer(forplayerid, playerid, COLOR_SERVICIO_POLICIA);
				}
	            case SERVICIO_TAXI:
	            {
	                new
	                    VehID = GetPlayerVehicleID(forplayerid);

					if (VehID)
					{
			            if (InfoJugador[forplayerid][jTrabajo] == ID_Taxista && veh_getJob(VehID) == ID_Taxista)
			            	SetPlayerMarkerForPlayer(forplayerid, playerid, COLOR_SERVICIO_TAXI);
					}
				}
	            case SERVICIO_HOSPITAL:
	            {
		            if (ID_Faccion(forplayerid) == IDLSMD && InfoJugador[forplayerid][jFacDuty])
		            	SetPlayerMarkerForPlayer(forplayerid, playerid, COLOR_SERVICIO_HOSPITAL);
				}
	            case SERVICIO_TALLER:
	            {
		            if (ID_Faccion(forplayerid) == IDMECANICOS && InfoJugador[forplayerid][jFacDuty])
	            		SetPlayerMarkerForPlayer(forplayerid, playerid, COLOR_SERVICIO_TALLER);
				}
			}
		}
	}
	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
	if(playerid == INVALID_PLAYER_ID)
	    return 0;
	    
	if (IsPlayerNPC (playerid))
	{
	    if (playerid == NPC_CLAUDIA)
	    {
			Delete3DTextLabel (NPC_LABEL_CLAUDIA);
			NPC_LABEL_CLAUDIA = Text3D: INVALID_3DTEXT_ID;
		}
	    if (playerid == NPC_TRUTH)
	    {
			Delete3DTextLabel (NPC_LABEL_TRUTH);
			NPC_LABEL_TRUTH = Text3D: INVALID_3DTEXT_ID;
		}
	}

	ownVeh_displayVehicles(playerid, car) {
		ownVeh_setWaitTime(ownVeh:car, 1);
	}
	
	SetPVarInt (playerid, "Disconnecting", true);

	new
		string[110];

	switch(reason)
	{
 		case 0:
		{
		 	format(string, sizeof string, "El jugador "#CVERDE"%s(%d) "#CBLANCO"se desconectó por crash o Timed-out.",NombreJugador_(playerid), playerid);
			if(InfoJugador[playerid][jAdmin])
			{
				LogAdmin(playerid, "se desconectó (Crash/timed out)");
			}
		}
 		case 1:
		{
		 	format(string, sizeof string, "El jugador "#CVERDE"%s(%d) "#CBLANCO"se desconectó voluntariamente",NombreJugador_(playerid), playerid);
			if(InfoJugador[playerid][jAdmin])
			{
				LogAdmin(playerid, "se desconectó (Voluntariamente)");
			}
		}
 		case 2:
 		{
		 	format(string, sizeof string, "El jugador "#CVERDE"%s(%d) "#CBLANCO"se desconectó (Fue kickeado o baneado)",NombreJugador_(playerid), playerid);
			if(InfoJugador[playerid][jAdmin])
			{
				LogAdmin(playerid, "se desconectó (Kickeado/Baneado)");
			}
		}
	}

	if (GetPVarInt (playerid, "OFERTA_ME"))
	{
	    foreach (Player, i)
	    {
	        if (GetPVarInt (i, "OFERTA_POR") == playerid)
	        {
	            if (GetPVarInt (i, "OFERTA_PRECIO"))
	            {
					MensajeF (i, -1, "El jugador que te ofreció el vehículo o propiedad se desconectó.");
	                DeletePVar (i, "OFERTA_POR");
	                DeletePVar (i, "OFERTA_PRECIO");
	                DeletePVar (i, "OFERTA_HOUSEID");
	                DeletePVar (i, "OFERTA_NEGID");
				}
			}
		}
	}
	
	ProxDetector(20.0,playerid,string,-1,-1,-1,-1,-1);

	if (PlayerTempData [playerid][e_VEH_LICENCIA] != 0)
	{
       veh_destroy (PlayerTempData [playerid][e_VEH_LICENCIA]);
	}

	if (TaxiTime[playerid] && IsPlayerConnected (Taxi_DriverID[playerid]))
	{
	    CancelTaxiEx (playerid, Taxi_DriverID[playerid], 2);
	}

	for (new i; i < MAX_PEDIDOS_CAMIONEROS; i++)
	{
	    if (PedidoCamioneros[i][p_PlayerID] == playerid)
	    {
	    	PedidoCamioneros[i][p_PlayerID] = INVALID_PLAYER_ID;
		}
	}

	if(InfoJugador[playerid][jChalecoObj])
	{
	    new
			Float:armour;

	    GetPlayerArmour(playerid, armour);
	    InfoJugador[playerid][jChalecoData] = floatround(armour);
	}

	if(GetPVarInt(playerid, "GRAFFITI_OBJID"))
	{
	    DestroyDynamicObject(GetPVarInt(playerid, "GRAFFITI_OBJID"));
	}

	foreach (Player, i)
	{
	    if (Specteando_ID[i] == playerid)
	    {
			Mensaje(i, -1, "El jugador specteado, se desconectó.");
			cmd_dejarspec(i ,"");
		}
	}

	if(GetPVarInt(playerid,"ROBANDO"))
	{
		MandarCarcelOOC (playerid, 30, "el servidor", "Desconectarse en robo");

	    new
	        MoneyStoled = GetPVarInt(playerid,"DINERO_ROBADO");

	    QuitarDinero(playerid, MoneyStoled);

	    new
	        neg = ID_Negocio(playerid);

		if(0 <= neg < MAX_NEGOCIOS)
	    	InfoNegocio[neg][nDinero] += MoneyStoled;
	}

	Loop(i, sizeof Camillas, 0) if(InfoCamilla[i][camiUsadaPor] == playerid)
	{
        InfoCamilla[i][camiUsadaPor] = INVALID_PLAYER_ID;
        KillTimer2(playerid, TIMER_CAMILLA);
	}
	
	new
		my_obj = GetObject(playerid);

	if(my_obj > 0)
	{
	    if(ObjectData[my_obj][invType] == INV_CEL)
	    {
	        cmd_colgar(playerid, "celular");
		}
		if(ObjectData[my_obj][invSize] >= 5) // Caja (Objeto pesado) lo tira..
	    {
			new
			    Float:x, Float:y, Float:z,
				Float:angle;

			GetPlayerPos(playerid, x, y, z);
			GetPlayerFacingAngle(playerid, angle);
			z -= GetObjectTypeDif(ObjectData[my_obj][invType]);
			CrearObjetoTirado(my_obj, GetObjectData(playerid), x, y, z, 0.0, 0.0, angle-180.0, GetPlayerVirtualWorld(playerid));
			RemoveObject(playerid);
	    }
	}

	new
	    Veh_CAMION = GetPVarInt(playerid, "Chofer_Camion");

	if(IsValidVehicle(Veh_CAMION))
	{
		strclr(InfoCamion[Veh_CAMION][camChofer]);
		InfoCamion[Veh_CAMION][camCarga] = 0;
		veh_respawn(Veh_CAMION);
	}

	ActualizarCuenta(playerid);

	if(BarraGris[playerid] != PlayerText:INVALID_TEXT_DRAW)
	{
	    BarraGris[playerid] = PlayerText:INVALID_TEXT_DRAW;
	}
	return 1;
}

stock CongelarEx(playerid,segundos=0)
{
	if(segundos < 1)
	{
	    Freezed [playerid] = 0xFFFF;
		TogglePlayerControllable(playerid,false);
	}
	else
	{
		Freezed [playerid] = segundos+1;
		TogglePlayerControllable(playerid,false);
	}
	return 1;
}

stock Descongelar(playerid)
{
	Freezed [playerid] = 0;
	TogglePlayerControllable(playerid,true);
	return 1;
}

stock TieneNumeros(str[])
{
	Loop(i,strlen(str),0)
	{
		if('0' <= str[i] <= '9') return 1;
	}
	return 0;
}

stock IlegalCharacterName(str[])
{
	static const IlegalC[] =
	{
		'0','1','2','3','4',
		'5','6','7','8','9',
		'[',']','$','(',')',
		'.', '-'
	};

	Loop(i, strlen(str),0)
	{
		Loop(c, sizeof IlegalC, 0)
		{
		    if(str[i] == IlegalC[c]) return true;
		}
	}
	return false;
}



stock IsNumeric(const string[])
{
    new
		length = strlen(string);

    if (length == 0)
		return false;

    for (new i = 0; i < length; i++)
	{
        if ( (string[i] > '9' || string[i] < '0' && string[i]!='-' && string[i]!='+')
        || (string[i]=='-' && i!=0)                                             //
        || (string[i]=='+' && i!=0)                                             //
        ) return false;
    }
    if (length==1 && (string[0]=='-' || string[0]=='+')) return false;
	return true;
}

//
//  -- KICK
//

CALLBACK: KickPlayer(playerid, admin[], reason[], instant)
{
	new
	    str_admins[120],
		log_str[90],
		Float: x, Float: y, Float: z;

	GetPlayerPos (playerid, x, y, z);

	if (!isnull(reason))
	{
		format(str_admins, 120, "[ADMINISTRACIÓN] "#CBLANCO"%s fue expulsado por %s. "#CROJO"(%s)", NombreJugador_(playerid), admin, reason);
		format(log_str, 90, "%s kickeó %s (%s)", admin, NombreJugador_(playerid), reason);
	}
	else
	{
		format(str_admins, 120, "[ADMINISTRACIÓN] "#CBLANCO"%s fue expulsado por %s.", NombreJugador_(playerid), admin);
		format(log_str, 90, "%s kickeó %s", admin, NombreJugador_(playerid));
	}

	foreach(Player, i)
	{
	    if (GetPlayerAdminLevelOP(i) || IsPlayerInRangeOfPoint (i, 30.0, x, y, z))
	    {
	        Mensaje(i, C_ROJO, str_admins);
		}
	}

	CongelarEx(playerid);

	if (instant)
	{
	    Kick(playerid);
	}
	else
	{
		DelayKick(playerid);
	}

	Log("bloqueos", log_str);
	print(log_str);
	return 1;
}

CALLBACK: DelayedKick (playerid)
{
	Kick (playerid);
}

stock DelayKick(playerid)
{
    SetTimerEx("DelayedKick", 750, false, "i", playerid);
	return 1;
}

//
//  -- BAN
//

CALLBACK: BanPlayer (playerid, admin[], reason[], bantype)
{
	new
	    str_admins[120],
	    str_users[120],
		log_str[78],
		Float: x, Float: y, Float: z;

	GetPlayerPos (playerid, x, y, z);

	if (!isnull(reason))
	{
		format(str_admins, 120, "[ADMINISTRACIÓN] "#CBLANCO"%s fue baneado por %s. "#CROJO"(%s)", NombreJugador_(playerid), admin, reason);
		format(str_users, 120, "[ADMINISTRACIÓN] "#CBLANCO"%s fue baneado por un administrador "#CROJO"(%s).", NombreJugador_(playerid), reason);
		format(log_str, 78, "%s baneó %s (%s)", admin, NombreJugador_(playerid), reason);
	}
	else
	{
		format(str_admins, 120, "[ADMINISTRACIÓN] "#CBLANCO"%s fue baneado por %s. ", NombreJugador_(playerid), admin);
		format(str_users, 120, "[ADMINISTRACIÓN] "#CBLANCO"%s fue baneado por un administrador.", NombreJugador_(playerid));
		format(log_str, 78, "%s baneó %s", admin, NombreJugador_(playerid));
	}

	foreach(Player, i)
	{
	    if (GetPlayerAdminLevelOP(i) || IsPlayerInRangeOfPoint (i, 30.0, x, y, z))
	    {
	        Mensaje(i, C_ROJO, str_admins);
		}
		else
		{
	        Mensaje(i, C_ROJO, str_users);
		}
	}

	CongelarEx(playerid);

	switch (bantype)
	{
	    case 0: // Anticheat ban
	    {
	        BanAccount (pName(playerid), "Permanente", 0, "Anticheat", reason);
	        Ban (playerid);
		}
	    case 1: // Admin ban
		{
	        BanAccount (pName(playerid), "Permanente", 0, admin, reason);
		    DelayBan (playerid);
		}
	    case 2: // Anticheat ban delay
	    {
	        BanAccount (pName(playerid), "Permanente", 0, "Anticheat", reason);
	        DelayBan (playerid);
		}
	}

	Log("bloqueos", log_str);
	print(log_str);
	return 1;
}

stock BanAccount (Name[], BanType[] = "Permanente", Cantidad, admin[], Reason[])
{
	new
		stringfile[200];

	//DATE BAN
	if(!strcmp(BanType, "Permanente", true))
	{
		format(stringfile, MAX_PLAYER_NAME+10, "Ban/%s.dat", Name);

		new
		    File:Arch = fopen(stringfile, io_write);

		A_Format(stringfile, "P|%s|%s|%s", admin, GetDateStr(), Reason);
		fwrite(Arch, stringfile);
		fclose(Arch);
	}
	else if(!strcmp(BanType, "dias", true) || !strcmp(BanType, "meses", true))
	{
		new
		    Age,
		    Month,
		    Day;

		getdate(Age, Month, Day);

		if(!strcmp(BanType, "dias", true))
		{
		    if(Cantidad > 30) return 1;
		    if(Day + Cantidad >= 30)
		    {
		        Month += (Day + Cantidad) / 30;
		    	Day = (Day + Cantidad) % 30;
			}
			else
			{
			    Day += Cantidad;
			}
		}
		else if(!strcmp(BanType, "meses", true))
		{
		    if(Cantidad > 11) return 1;
		    if(Month + Cantidad >= 12)
		    {
		        Age += (Month + Cantidad) / 12;
		    	Month = (Month + Cantidad) % 12;
			}
			else
			{
			    Month += Cantidad;
			}
		}
		new
		    datestr[15];
		A_Format(datestr, "%02d/%02d/%d", Day, Month, Age);

		format(stringfile, MAX_PLAYER_NAME+10, "Ban/%s.dat", Name);

		new
		    File:Arch = fopen(stringfile, io_write);

		A_Format(stringfile, "D|%s|%s|%s|%s", datestr, admin, GetDateStr(), Reason);
		fwrite(Arch, stringfile);
		fclose(Arch);
	}
	//TIME BAN
	else
	{
		new
		    time = gettime();
		if(!strcmp(BanType, "minutos", true))
		{
		    if(Cantidad > 59) return 1;
		    time += (Cantidad * 60);
		}
		else if(!strcmp(BanType, "horas", true))
		{
		    if(Cantidad > 23) return 1;
		    time += (Cantidad * 3600);
		}

		format(stringfile, MAX_PLAYER_NAME+10, "Ban/%s.dat", Name);
		new
		    File:Arch = fopen(stringfile, io_write);

		A_Format(stringfile, "T|%d|%s|%s|%s", time, admin, GetDateStr(), Reason);
		fwrite(Arch, stringfile);
		fclose(Arch);
	}
	return 1;
}

CALLBACK: DelayedBan (playerid)
{
	Ban (playerid);
}

stock DelayBan(playerid)
{
    SetTimerEx("DelayedBan", 800, false, "i", playerid);
	return 1;
}

//
// - END
//

stock TogglePlayerCrack(playerid, bool: toggle, type = 0)
{
	if (toggle == true)
	{
	    if (type == 1) // Crack de muerto
	    {
	        Cracked[playerid] = 1;
			ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0);
	    }
	    else if (type == 2) // Crack de tazeado
	    {
	        Cracked[playerid] = 2;
			ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 1, 1, 1, 0);
	    }
	    else
	    {
	        printf("[OP: Warning] debug::TogglePlayerCrack - Invalid type (%d)", type);
	    }
	}
	else if (toggle == false)
	{
	    Cracked[playerid] = 0;
	    cmd_detener(playerid, "");
	}
	return 1;
}

stock PreventOPU(playerid, segs)
{
	PreventedOPU[playerid] = segs;
}


stock FamiliaExiste(famid)
{
	return (InfoFamilia[famid][fPos_x] != 0.0) ? (true) : (false);
}

INI:Datos_generales[](name[], value[])
{
	INI_Int("Gente_online",Record_UsersOn);
	INI_Int("Data_0",UsersD_0);
	INI_Int("Data_1",UsersD_1);
	INI_Int("Data_2",UsersD_2);
	INI_Int("Tiempo_0",UsersT_0);
	INI_Int("Tiempo_1",UsersT_1);
	INI_Int("Tiempo_2",UsersT_2);
	INI_Int("Cuentas_Registradas",Cuentas_Registradas);
	INI_Int("Dinero_Banco",Dinero_Banco);
	return 0;
}

stock GetGunObjectID(WeaponID)
{
    if (WeaponID < 0 || WeaponID > 64)
    {
        return 1575;
    }
    return GunObjectIDs[WeaponID];
}

stock ElegirRopa(playerid,skin)
{
	new Str[18 * MAX_ROPA],Ropa[MAX_ROPA][20],strI[20];
	Loop(i,MAX_ROPA,0)
	{
	    if(!InfoJugador[playerid][jRopa][i])
	    {
         	Ropa[i] = "Nada";
		}
		else
		{
			format(Ropa[i],20,"%d",InfoJugador[playerid][jRopa][i]);
		}
 		format(strI,sizeof(strI),"Slot %d ( %s )\n",i,Ropa[i]);
  		strins(Str,strI,strlen(Str));
	}
	Dialog(playerid,dElegirSRopa,DIALOG_STYLE_LIST,""#CBLANCO"Elige el slot para guardar esta ropa",Str,"Aceptar","");
	SetPVarInt(playerid,"ROPA_SELECCIONADA",skin);
	return 1;
}

stock MandarCarcel(playerid, bool:adm = false, mins = -1)
{
	if (!adm)
	{
		SetPlayerPos(playerid, 1588.3312, -1530.0991, 1066.3448);
		SetPlayerInterior(playerid, 2);
		
		if (mins != -1)
		{
			InfoJugador[playerid][jTiempoCarcel] = mins*60;
			InfoJugador[playerid][jEncarcelado] = 1;
		}
		KillTimer2(playerid, TIMER_CARCEL);
	 	Timer_Jugador[playerid][TIMER_CARCEL] = SetTimerEx ("ActualizarTiempoCarcel", 1000, true, "i", playerid);
	}
	else
	{
		SetPlayerPos(playerid, 424.1288, -2481.9368, -27.9431);
		SetPlayerVirtualWorld(playerid, 5000+playerid);
		
		if (mins != 1)
		{
			InfoJugador[playerid][jTiempoCarcel] = mins*60;
			InfoJugador[playerid][jEncarcelado] = 2;
		}
		
		SetPlayerInterior(playerid, 2);
		KillTimer2(playerid,TIMER_CARCEL);
	 	Timer_Jugador[playerid][TIMER_CARCEL] = SetTimerEx("ActualizarTiempoCarcel",1000,true,"i",playerid);
		CongelarEx(playerid, 5);

		if(TextoCarcel[playerid] == PlayerText3D:INVALID_3DTEXT_ID)
		{
		    new
		        Txt[sizeof(TextoDeCarcel)];

			strcat(Txt, TextoDeCarcel);
		    TextoCarcel[playerid] = CreatePlayer3DTextLabel(playerid, Txt, C_ROJO, 424.1288,-2481.9368,-27.9431, 4.0);
		}
	}
}

stock MandarCarcelOOC (playerid, time, admin[], reason[])
{
	if (!IsPlayerConnected (playerid) || IsPlayerNPC (playerid))
	    return 0;

	MandarCarcel(playerid, true, time);

	new
		Float: Pos[3], string [144];

	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

	SetPVarFloat(playerid, "ADM_Posx", Pos[0]);
	SetPVarFloat(playerid, "ADM_Posy", Pos[1]);
	SetPVarFloat(playerid, "ADM_Posz", Pos[2]);
	SetPVarInt(playerid, "ADM_VW", GetPlayerVirtualWorld(playerid));
	SetPVarInt(playerid, "ADM_Int", GetPlayerInterior(playerid));

	SetPlayerVarString (playerid, "AdminJail", admin);

	alm(InfoJugador[playerid][jAdminJail], admin);

	LimpiarPantalla(playerid, 9);

	A_Format (string, "[ADMINISTRACIÓN] "#CBLANCO"%s fue encarcelado %d minutos por %s "#CBORDO"(%s)", NombreJugador_(playerid), time, admin, reason);

	foreach (Player, i)
	{
	    if (IsPlayerInRangeOfPoint (i, 30.0, Pos[0], Pos[1], Pos[2]) || GetPlayerAdminLevelOP(i) >= Moderador)
	    {
			Mensaje (i, C_ROJO, string);
		}
	}

	new
		my_obj = GetObject (playerid);

	if(my_obj > 0)
	{
		if (ObjectData[my_obj][invType] == INV_ARMA)
		{
		    SetPVarInt (playerid, "ADM_obj", my_obj);
		    SetPVarInt (playerid, "ADM_data", GetObjectData (playerid));
			RemoveObject (playerid);
		}
	}

	if (InfoJugador[playerid][jObjetoColgado] > 0)
	{
		if (ObjectData[InfoJugador[playerid][jObjetoColgado]][invType] == INV_ARMA)
		{
		    SetPVarInt (playerid, "ADM_objc", InfoJugador[playerid][jObjetoColgado]);
		    SetPVarInt (playerid, "ADM_objcd", InfoJugador[playerid][jObjetoColgadoData]);

		    InfoJugador[playerid][jObjetoColgado] = 0;
		    InfoJugador[playerid][jObjetoColgadoData] = 0;

		    RemovePlayerAttachedObject (playerid, SLOT_ESPALDA);
		}
	}

	new
	    str[20];

	InvLoop(i,playerid)
	{
	    new
	        obj_there = ItemInventario[playerid][i][invObject];

		if (ObjectData[obj_there][invType] == INV_ARMA || ObjectData[obj_there][invType] == INV_CARGADOR || ObjectData[obj_there][invType] == INV_BOLSACOCA || ObjectData[obj_there][invType] == INV_BOLSAMARI)
		{
	    	A_Format (str, "ADM_cobjs%d", i);
	    	SetPVarInt (playerid, str, obj_there);

	    	A_Format (str, "ADM_cobjsd%d", i);
	    	SetPVarInt (playerid, str, ItemInventario[playerid][i][invData]);

	    	ItemInventario[playerid][i][invObject] = 0;
	    	ItemInventario[playerid][i][invData] = 0;
		}
	}

	TextoJugador(playerid, "~r~encarcelado", 5000, 3);

	A_Format (string, "%s fue encarcelado %d minutos por %s (%s)", pName(playerid), time, admin, reason);
	Log ("jail", string);
	return 1;
}

stock DarRegalo (playerid, nivel)
{
	if (GetObject(playerid))
		RemoveObject (playerid);

	switch (nivel)
	{
	    case 0, 1:
	    {
	        switch (random(6))
			{
			    case 0:
			    {
					GivePlayerMoney (playerid, 4500);
					return Regalo (playerid, "$4500");
				}
				case 1:
				{
					GivePlayerMoney (playerid, 4900);
					return Regalo (playerid, "$4900");
				}
				case 2:
				{
					GivePlayerMoney (playerid, 8200);
					return Regalo (playerid, "$8200");
				}
				case 3, 4:
				{
					InfoJugador [playerid][jIbu400] += 50;
					return Regalo (playerid, "50 Ibupirac x400");
				}
				case 5:
				{
					GiveObject (playerid, GOAT(INV_PORROON), 25);
					Mensaje (playerid, -1, "Usa "#CINFO"/objeto "#CBLANCO"para más información.");
					return Regalo (playerid, "un Porro (25 secas)");
				}
			}
			return 1;
		}
		case 2..7:
		{
			new
			    rand = random (5);

			if (rand == 0) // Item
			{
				switch (random(4))
				{
					case 0:
					{
						GiveObject (playerid, GOAT(INV_BOLSAMARI), 40);
						return Regalo (playerid, "una Bolsa de marihuana (40g)");
					}
					case 1:
					{
						GiveObject (playerid, GOAT(INV_BOLSAMARI), 30);
						return Regalo (playerid, "una Bolsa de marihuana (30g)");
					}
					case 2:
					{
						GiveObject (playerid, GOAT(INV_BOLSACOCA), 28);
						return Regalo (playerid, "una Bolsa de cocaína (28g)");
					}
					case 3:
					{
						GiveObject (playerid, GOAT(INV_BOLSACOCA), 30);
						return Regalo (playerid, "una Bolsa de cocaína (30g)");
					}
				}
			}
			else if (rand == 1) // Plata
			{
			    switch (random(5))
			    {
			        case 0:
			        {
			            GivePlayerMoney (playerid, 55000);
			            return Regalo (playerid, "$55000");
					}
			        case 1:
			        {
			            GivePlayerMoney (playerid, 75000);
			            return Regalo (playerid, "$75000");
					}
			        case 2:
			        {
			            GivePlayerMoney (playerid, 80000);
			            return Regalo (playerid, "$80000");
					}
			        case 3:
			        {
			            GivePlayerMoney (playerid, 100000);
			            return Regalo (playerid, "$100000");
					}
			        case 4: // Medicamentos
			        {
						InfoJugador [playerid][jIbu600] += 300;
						return Regalo (playerid, "300 Ibupirac x600");
					}
				}
			}
			else if (rand == 2 || rand == 3) // Armas
			{
			    switch (random (8))
			    {
					case 0:
					{
					    GiveObject (playerid, CajaDeArmas(24), 4);
					    return Regalo (playerid, "Caja de Desert Eagle (4)");
					}
					case 1:
					{
					    GiveObject (playerid, CajaDeArmas(24), 6);
					    return Regalo (playerid, "Caja de Desert Eagle (6)");
					}
					case 2:
					{
					    GiveObject (playerid, CajaDeArmas(22), 5);
					    return Regalo (playerid, "Caja de 9MM (5)");
					}
					case 3:
					{
					    GiveObject (playerid, CajaDeArmas(32), 6);
					    return Regalo (playerid, "Caja de Tec-9 (6)");
					}
					case 4:
					{
					    GiveObject (playerid, CajaDeCargador(32), 10);
					    return Regalo (playerid, "Munición de Tec-9 (10)");
					}
					case 5:
					{
					    GiveObject (playerid, CajaDeCargador(22), 12);
					    return Regalo (playerid, "Munición de 9MM (12)");
					}
					case 6:
					{
					    GiveObject (playerid, CajaDeCargador(30), 10);
					    return Regalo (playerid, "Munición de AK-47 (10)");
					}
					case 7:
					{
					    GiveObject (playerid, CajaDeCargador(24), 8);
					    return Regalo (playerid, "Munición de Desert Eagle (8)");
					}
				}
			}
			else if (rand == 4) // Nivel
			{
   				new
					Level_to_give = 2+random(3);

				InfoJugador [playerid][jNivel] += Level_to_give;
				InfoJugador [playerid][jExperiencia] = 0;

				SetPlayerScore (playerid, InfoJugador [playerid][jNivel]);
				new
	        		str_Regalo [30];

				A_Format (str_Regalo, "%d niveles extra", Level_to_give);
				return Regalo (playerid, str_Regalo);
			}
		}
		case 8..9999:
		{
			new
			    rand = random (3);

			if (rand == 0) // Item
			{
				switch (random(4))
				{
					case 0:
					{
						GiveObject (playerid, GOAT(INV_PAQUETEMARI), 150);
						return Regalo (playerid, "un Paquete de marihuana (150g)");
					}
					case 1:
					{
						GiveObject (playerid, GOAT(INV_PAQUETEMARI), 200);
						return Regalo (playerid, "un Paquete de marihuana (200g)");
					}
					case 2:
					{
						GiveObject (playerid, GOAT(INV_PAQUETECOCA), 90);
						return Regalo (playerid, "un Paquete de cocaína (90g)");
					}
					case 3:
					{
						GiveObject (playerid, GOAT(INV_PAQUETECOCA), 160);
						return Regalo (playerid, "un Paquete de cocaína (160g)");
					}
				}
			}
			else if (rand == 1 || rand == 2) // Armas especiales
			{
			    switch (random (6))
			    {
					case 0, 1:
					{
					    GiveObject (playerid, GetObjectAtWeapon(22, "Oro"), 1);
					    return Regalo (playerid, "una 9MM de Oro");
					}
					case 2:
					{
					    GiveObject (playerid, GetObjectAtWeapon(22, "Diamante"), 1);
					    return Regalo (playerid, "una 9MM de Diamante");
					}
					case 3, 4:
					{
					    GiveObject (playerid, GetObjectAtWeapon(23, "Oro"), 1);
					    return Regalo (playerid, "una Silenciadora de Oro");
					}
					case 5:
					{
					    GiveObject (playerid, GetObjectAtWeapon(23, "Diamante"), 1);
					    return Regalo (playerid, "una Silenciadora de Diamante");
					}
				}
			}
		}
	}
	return 1;
}

stock Regalo (playerid, nombre[])
{
	new
	    str[140];

	A_Format (str, "¡El regalo de "#CAMARILLO"%s "#CBLANCO"es "#CROJO"%s"#CBLANCO"!", NombreJugador_ (playerid), nombre);
	foreach (Player, i)
	{
	    if (IsPlayerInRangeOfPoint (i, 120.0, CORDS_NAVIDAD))
	    {
			Mensaje (i, -1, str);
		}
	}

	//format (str, 60, "%s: %s", NombreJugador_(playerid), nombre);
	//Log ("LOG/Navidad.txt", str);
	return 1;
}

CALLBACK: ActivarArmasEnI() return AllowInteriorWeapons(true);

CALLBACK: T_VisitaCasa(playerid,idcasa)
{
	if(!IsPlayerConnected(playerid)) return 1;
	SetPlayerPos(playerid,InfoCasa[idcasa][cEntrada_x],InfoCasa[idcasa][cEntrada_y],InfoCasa[idcasa][cEntrada_z]);
	SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	DeletePVar(playerid,"CASA_VISITA");
	Error(playerid,"Se te acabó el tiempo de visita.");
 	return 1;
}

CALLBACK: PlantandoBomba(playerid)
{
	if(!IsPlayerConnected(playerid)) return 1;
	cmd_do(playerid,"bomba plantada");
	Mensaje(playerid,-1,"La bomba fue plantada. Para detonarla, utiliza "#CINFO"(/detonar bomba)");
	return 1;
}


CALLBACK: DetonarDinamita(object, Float:x, Float:y, Float:z, bool: PuertaBanco)
{
	CreateExplosion(x, y, z, 0, 10.0);
	DestroyDynamicObject(object);
	if(PuertaBanco)
	{
		#if SISTEMA_BANCO == true
	    DestroyDynamicObject(OBJ_PuertaBanco);
	    #endif
	}

	return 1;
}


//Puertas
stock MoverObjeto(nombre,Float:X,Float:Y,Float:Z)
	MoveDynamicObject(nombre,X,Y,Z,3,-1000.0,-1000.0,-1000.0);


CALLBACK: PuedePrecionar(playerid)
	DeletePVar(playerid,"TECLA_BLOQUEADA");

//CALLBACK: CerrarCelda(i)
//{
//	MoveDynamicObject(OBJ_Carcel[i],PosCarcelesLSPD[i][0],PosCarcelesLSPD[i][1],PosCarcelesLSPD[i][2],1.0,-1000.0,-1000.0,-1000.0);
//}

CALLBACK: BarreraGrotti()
	RotarObjetoGlobal(BGROTTI,90,0,300);

CALLBACK: PortonLSTV1()
	MoverObjeto(PLSTV[0],778.00000000,-1384.90002441,13.1);

CALLBACK: PortonLSTV2()
	MoverObjeto(PLSTV[1],777.90002441,-1330.30004883,13);

CALLBACK: FuerzaAerea()
	MoverObjeto(PFUERZAAEREA,482.00000000,-2312.00000000,4.40000010);

CALLBACK: PortonGOB_0()
	MoverObjeto(PGOB[0],1264.59997559,-2048.30004883,60.90000153);

CALLBACK: PortonGOB_1()
	MoverObjeto(PGOB[1],1211.09997559,-2037.40002441,70.80000305);

CALLBACK: BarreraGOB()
	RotarObjetoGlobal(BGOB,0,270,0);

CALLBACK: BarreraDEPTOS()
	RotarObjetoGlobal(BDEPTOSG,0,270,0);

/*CALLBACK: PuertasCarcel()
{
	MoverObjeto(PCELDAS[0], 2565.63, -1300.40, 1030.42);
	MoverObjeto(PCELDAS[1], 2565.64, -1303.40, 1030.42);
}*/

CALLBACK: PortonHIT_0()
	MoverObjeto(PHITMAN[0], 282.7000122,-1542.4000244,25.3999996);

CALLBACK: PortonHIT_1()
	MoverObjeto(PHITMAN[1],321.2000122,-1488.3000488,25.3999996);

CALLBACK: PortonCamio ()
	MoverObjeto(PCAMIONEROS, 2232.923828, -2215.902587, 15.296889);

CALLBACK: BarreraLSPD ()
	RotarObjetoGlobal(B_LSPD, 0.00000, -270.00000, 90.00000);

CALLBACK: BarreraLSMD ()
	RotarObjetoGlobal(B_LSMD, 0.000000, -91.099998, 0.000000);

CALLBACK: PortonLSPD ()
	MoverObjeto(PO_LSPD, 1589.77539, -1637.93896, 14.58210);

CALLBACK: PuertaLSPD ()
	RotarObjetoGlobal(PU_LSPD, 0.0, 0.0, 0.0);

stock RotarObjetoGlobal(objid,Float:rx,Float:ry,Float:rz)
{
	new Float:PosOBJ[3];
	GetDynamicObjectPos(objid,PosOBJ[0],PosOBJ[1],PosOBJ[2]);

	MoveDynamicObject(objid,PosOBJ[0],PosOBJ[1],PosOBJ[2]+0.0001,0.0001,rx,ry,rz);
	return 1;
}

CALLBACK: PortonesAutomaticos(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(IsPlayerInRangeOfPoint(playerid,15,558.90002441,-1255.69995117,17.00000000))
	    {
			if(GetPVarInt(playerid,"TECLA_BLOQUEADA") ) return 0;
			SetTimer("BarreraGrotti",6000,0);
			SetTimerEx("PuedePrecionar",6500,0,"d",playerid);
            AutoRol(playerid,"abre la barrera de grotti.");
			SetPVarInt(playerid,"TECLA_BLOQUEADA",1);
 			RotarObjetoGlobal(BGROTTI,18,0,296);
			return 1;
		}

		//LSPD (BARRERA)
	    else if(IsPlayerInRangeOfPoint(playerid, 15, 1544.70361, -1630.91638, 13.10080))
	    {
	        if(!EsLSPD(playerid)) return 0;
			if(GetPVarInt(playerid,"TECLA_BLOQUEADA") ) return 0;
			SetTimer("BarreraLSPD",6000,0);
			SetTimerEx("PuedePrecionar",3000,0,"d",playerid);
            AutoRol(playerid,"abrió una barrera con su control remoto.");
			SetPVarInt(playerid,"TECLA_BLOQUEADA",1);
			RotarObjetoGlobal(B_LSPD, 0.00000, -345.00000, 90.0000);
			return 1;
		}

		//LSPD (PUERTA)
	    else if(IsPlayerInRangeOfPoint(playerid, 5, 1582.61487, -1637.93005, 12.35418))
	    {
	        if(!EsLSPD(playerid)) return 0;
			if(GetPVarInt(playerid,"TECLA_BLOQUEADA")) return 0;
			SetTimer("PuertaLSPD",6000,0);
			SetTimerEx("PuedePrecionar",6500,0,"d",playerid);
 			SetPVarInt(playerid,"TECLA_BLOQUEADA",1);
			RotarObjetoGlobal(PU_LSPD, 0.0, 0.0, -77.0);
			return 1;
		}

		//LSPD (PORTON)
	    else if(IsPlayerInRangeOfPoint(playerid, 15, 1589.75623, -1637.94482, 10.38530))
	    {
	        if(!EsLSPD(playerid)) return 0;
			if(GetPVarInt(playerid,"TECLA_BLOQUEADA")) return 0;
			SetTimer("PortonLSPD",6000,0);
			SetTimerEx("PuedePrecionar",3000,0,"d",playerid);
            AutoRol(playerid,"abrió un portón con su control remoto.");
			SetPVarInt(playerid,"TECLA_BLOQUEADA",1);
			MoverObjeto(PO_LSPD, 1589.75623, -1637.94482, 10.38530);
			return 1;
		}

		//LSMD (BARRERA)
	    else if(IsPlayerInRangeOfPoint(playerid, 15, 1145.329589, -1291.419677, 13.434122))
	    {
	        if(!EsMedico(playerid)) return 0;
			if(GetPVarInt(playerid,"TECLA_BLOQUEADA")) return 0;
			SetTimer("BarreraLSMD",6000,0);
			SetTimerEx("PuedePrecionar",5000,0,"d",playerid);
            AutoRol(playerid,"abrió una barrera con su control remoto.");
			SetPVarInt(playerid,"TECLA_BLOQUEADA",1);
			RotarObjetoGlobal(B_LSMD, 0.00000, -10.0, 0.0000);
			return 1;
		}

		//LSTV
	    else if(IsPlayerInRangeOfPoint(playerid,15,778.00000000,-1384.90002441,13))
	    {
	        if(!EsReportero(playerid)) return 0;
			if(GetPVarInt(playerid,"TECLA_BLOQUEADA") ) return 0;
			SetTimer("PortonLSTV1",6000,0);
			SetTimerEx("PuedePrecionar",6500,0,"d",playerid);
            AutoRol(playerid,"abre el porton de LSTV.");
			SetPVarInt(playerid,"TECLA_BLOQUEADA",1);
			MoverObjeto(PLSTV[0],778.00000000,-1384.90002441,7);
			return 1;

		}

	    else if(IsPlayerInRangeOfPoint(playerid,15,777.90002441,-1330.30004883,13))
	    {
	        if(!EsReportero(playerid)) return 0;
			if(GetPVarInt(playerid,"TECLA_BLOQUEADA") ) return 0;
			SetTimer("PortonLSTV2",6000,0);
			SetTimerEx("PuedePrecionar",6500,0,"d",playerid);
            AutoRol(playerid,"abre el porton de LSTV.");
			SetPVarInt(playerid,"TECLA_BLOQUEADA",1);
			MoverObjeto(PLSTV[1],777.90002441,-1330.30004883,7);
			return 1;

		}

		// GOBIERNO
	    else if(IsPlayerInRangeOfPoint(playerid,15,1264.59997559,-2048.30004883,60.90000153))
	    {
	        if(!EsDelGobierno(playerid)) return 0;
			if(GetPVarInt(playerid,"TECLA_BLOQUEADA") ) return 0;
			SetTimer("PortonGOB_0",6000,0);
			SetTimerEx("PuedePrecionar",6500,0,"d",playerid);
            AutoRol(playerid,"abre el portón del gobierno.");
			SetPVarInt(playerid,"TECLA_BLOQUEADA",1);
			MoverObjeto(PGOB[0],1264.59997559,-2048.30004883,50.90000153);
			return 1;

		}

		// BARRERA DEPTOS GROOVE
	    else if(IsPlayerInRangeOfPoint(playerid,15,2188.96411133,-1776.94152832,13.17317390))
	    {
			if(GetPVarInt(playerid,"TECLA_BLOQUEADA") ) return 0;
			SetTimer("BarreraDEPTOS",6000,0);
			SetTimerEx("PuedePrecionar",6500,0,"d",playerid);
            AutoRol(playerid,"abre la barrera del complejo.");
			SetPVarInt(playerid,"TECLA_BLOQUEADA",1);
			RotarObjetoGlobal(BDEPTOSG,0,0,0);
			return 1;

		}


	    else if(IsPlayerInRangeOfPoint(playerid,15,1211.09997559,-2037.40002441,70.80000305))
	    {
	        if(!EsDelGobierno(playerid)) return 0;
			if(GetPVarInt(playerid,"TECLA_BLOQUEADA") ) return 0;
			SetTimer("PortonGOB_1",6000,0);
			SetTimerEx("PuedePrecionar",6500,0,"d",playerid);
            AutoRol(playerid,"abre el portón del gobierno.");
			SetPVarInt(playerid,"TECLA_BLOQUEADA",1);
			MoverObjeto(PGOB[1],1211.09997559,-2037.40002441,65.30000305);
			return 1;

		}

		// HITMAN
	    else if(IsPlayerInRangeOfPoint(playerid,15,282.7000122,-1542.4000244,25.3999996))
	    {
	        if(!EsHitman(playerid)) return 0;
			if(GetPVarInt(playerid,"TECLA_BLOQUEADA") ) return 0;
			SetTimer("PortonHIT_0",6000,0);
			SetTimerEx("PuedePrecionar",6500,0,"d",playerid);
            AutoRol(playerid,"abre el portón de hitman.");
			SetPVarInt(playerid,"TECLA_BLOQUEADA",1);
			MoverObjeto(PHITMAN[0],282.7000122,-1542.4000244,17.6000004);
			return 1;

		}

	    else if(IsPlayerInRangeOfPoint(playerid,15,321.2000122,-1488.3000488,25.3999996))
	    {
	        if(!EsHitman(playerid)) return 0;
			if(GetPVarInt(playerid,"TECLA_BLOQUEADA") ) return 0;
			SetTimer("PortonHIT_1",6000,0);
			SetTimerEx("PuedePrecionar",6500,0,"d",playerid);
            AutoRol(playerid,"abre el portón de hitman.");
			SetPVarInt(playerid,"TECLA_BLOQUEADA",1);
			MoverObjeto(PHITMAN[1],321.2000122,-1488.3000488,17.7000008);
			return 1;

		}

		//BARRERA GOBIERNO
	    else if(IsPlayerInRangeOfPoint(playerid,15,1430.900,-1883.19995,13.300))
	    {
			if(GetPVarInt(playerid,"TECLA_BLOQUEADA")) return 0;
			SetTimer("BarreraGOB",6000,0);
			SetTimerEx("PuedePrecionar",6500,0,"d",playerid);
            AutoRol(playerid,"abre la barrera del gobierno.");
			SetPVarInt(playerid,"TECLA_BLOQUEADA",1);
			RotarObjetoGlobal(BGOB,0,352,358);
			return 1;

		}

	    else if(IsPlayerInRangeOfPoint(playerid,15.0,2232.923828, -2215.902587, 15.296889))//camioneros
	    {
	        if(ID_Faccion(playerid) != IDCAMIONEROS) return 0;
			if(GetPVarInt(playerid,"TECLA_BLOQUEADA")) return 0;
			SetTimer("PortonCamio",8000,0);
			SetTimerEx("PuedePrecionar",8500,0,"d",playerid);
            AutoRol(playerid,"abre el porton mediante un control remoto");
			SetPVarInt(playerid,"TECLA_BLOQUEADA",1);
			MoverObjeto(PCAMIONEROS,2232.923828, -2215.902587, 9.866886);
			return 1;
		}
	}
	return 0;
}

CALLBACK: Interiores(playerid)
{
 	if(IsPlayerInRangeOfPoint(playerid,3,1268.1829,-835.9390,1044.965))//estudio de tv lstv
  	{
		SetPlayerPos(playerid,-152.3724, -287.5970, 1048.9722);
		CongelarEx(playerid, 3);
		return 1;
	}
 	else if(IsPlayerInRangeOfPoint(playerid,3,-152.3724, -287.5970, 1048.9722))//estudio de tv lstv
  	{//La vuelta
		SetPlayerPos(playerid,1268.1829,-835.9390,1044.965);
		CongelarEx(playerid, 3);
		return 1;
	}
 	else if(IsPlayerInRangeOfPoint(playerid,3,1524.4832,-1677.9523,6.2188))
  	{
	    SetPlayerCustomInterior (playerid, INT_LSPD, 286.9597, 1224.3794, 1566.0165, 90.0);
		return 1;
	}
	else if(IsPlayerInRangeOfPoint(playerid,3,1565.0422,-1685.4037,28.3956))
	{
	    SetPlayerCustomInterior (playerid, INT_LSPD, 286.9597, 1224.3794, 1566.0165, 90.0);
		return 1;
	}
	else if(IsPlayerInRangeOfPoint(playerid,3,1420.2460,1.7224,1002.3906))
	{//Salir de la licencia
		SetPlayerPos(playerid,-2029.6633,-119.0019,1035);
		SetPlayerInterior(playerid,3);
		return 1;
	}

	//Hospital interior ascensor
	if (IsPlayerInRangeOfPoint (playerid, 1.5, 2033.7632, 2871.6824, 1104.7494)) // desde adentro
	{
		SetPlayerVirtualWorld (playerid, 0);
		SetPlayerInterior (playerid, 0);
		SetPlayerPos (playerid, 1161.1919, -1329.6578, 31.4965);
		SetPlayerFacingAngle (playerid, 0.0);
		CongelarEx (playerid, 3);
		return 1;
	}

	else if (IsPlayerInRangeOfPoint (playerid, 1.5, 1161.1919,-1329.6578,31.4965)) // desde adentro
	{
		SetPlayerCustomInterior (playerid, INT_LSMD, 2033.7632, 2871.6824, 1104.7494, 270.0);
		return 1;
	}

	else if (IsPlayerInRangeOfPoint (playerid, 2, 2558.7690, -1280.7249, 1031.4219 )) return SetPlayerPos(playerid,2561.0989,-1280.4092,1037.726);
	else if (IsPlayerInRangeOfPoint (playerid, 2, 2558.4033, -1306.8978, 1031.4219 )) return SetPlayerPos(playerid,2560.6416,-1306.9424,1037.6920);
	else if (IsPlayerInRangeOfPoint (playerid, 2, 2561.0989, -1280.4092, 1037.726 )) return SetPlayerPos(playerid,2558.7690,-1280.7249,1031.4219);
	else if (IsPlayerInRangeOfPoint (playerid, 2, 2560.6416, -1306.9424, 1037.6920 )) return SetPlayerPos(playerid,2558.4033,-1306.8978,1031.4219);

	//Laboratorio bigfoot
	else if (IsPlayerInRangeOfPoint(playerid, 2.0, CORDS_LAB_BIGFOOT_EXT))
	{
	    new
	        fam_player = ID_Familia(playerid),
	        fam_domina = LaboratorioBigFoot[labFamDominante];

		if(fam_domina)
		{
		    if(!LaboratorioBigFoot[labTiempoGuerra])
		    {
			    if(fam_player != fam_domina)
			    {
			        return Error(playerid, "~r~No perteneces a la familia que domina este laboratorio.");
				}

				if(LaboratorioBigFoot[labCerrado])
				    return Error(playerid, "~r~La puerta está cerrada.");

			}
			else
			{
			    if(fam_player != fam_domina && fam_player != LaboratorioBigFoot[labAtacante])
			        return Error(playerid, "~r~No puedes ingresar aquí.");
			}

			CongelarEx(playerid, 2);
			SetPlayerInterior(playerid, 2);
			SetPlayerVirtualWorld(playerid, VW_BIGFOOT);
			SetPlayerPos(playerid, CORDS_LAB_BIGFOOT_INT);
			SetPlayerFacingAngle(playerid, -270.0);
			return 1;
		}
		else
		{
		    if(!LaboratorioBigFoot[labTiempoGuerra])
		    {
			    if(fam_player)
			    	return Error(playerid, "~r~Este laboratorio no está conquistado por ninguna familia~n~~w~Usa ~b~/conquistar");

				else
				    return Error(playerid, "~r~No puedes ingresar aquí.");
			}
			else
			{
			    if(fam_player)
			    {
					CongelarEx(playerid, 2);
					SetPlayerInterior(playerid, 2);
					SetPlayerVirtualWorld(playerid, VW_BIGFOOT);
					SetPlayerPos(playerid, CORDS_LAB_BIGFOOT_INT);
					SetPlayerFacingAngle(playerid, -270.0);
					return 1;
				}
				else
				    return Error(playerid, "~r~No puedes ingresar en este momento.");
			}
		}

	}
	else if(IsPlayerInRangeOfPoint(playerid, 2.0, CORDS_LAB_BIGFOOT_INT) && GetPlayerVirtualWorld(playerid) == VW_BIGFOOT)
	{
	    if(!LaboratorioBigFoot[labTiempoGuerra])
	    {
			if(LaboratorioBigFoot[labCerrado])
			    return Error(playerid, "~r~La puerta está cerrada.");
		}
		CongelarEx(playerid, 2);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerPos(playerid, CORDS_LAB_BIGFOOT_EXT);
		SetPlayerFacingAngle(playerid, 135.0 - 180.0);
		return 1;
	}
	//Fabrica Black Asociation
	else if(IsPlayerInRangeOfPoint(playerid, 2.0, CORDS_FAB_BLACKASO_EXT))
	{
	    new
	        fam_player = ID_Familia(playerid),
	        fam_domina = FabricaBlackAso[fabFamDominante];

		if(fam_domina)
		{
		    if(!FabricaBlackAso[fabTiempoGuerra])
		    {
			    if(fam_player != fam_domina)
			    {
			        return Error(playerid, "~r~No perteneces a la familia que domina este laboratorio.");
				}

				if(FabricaBlackAso[fabCerrado])
				    return Error(playerid, "~r~La puerta está cerrada.");

			}
			else
			{
			    if(fam_player != fam_domina && fam_player != FabricaBlackAso[fabAtacante])
			        return Error(playerid, "~r~No puedes ingresar aquí.");
			}

			CongelarEx(playerid, 4);
			SetPlayerInterior(playerid, 2);
			SetPlayerVirtualWorld(playerid, VW_BLACKASO);
			SetPlayerPos(playerid, CORDS_FAB_BLACKASO_INT);
			SetPlayerFacingAngle(playerid, 270.0);
			SetCameraBehindPlayer(playerid);
			return 1;
		}
		else
		{
		    if(!FabricaBlackAso[fabTiempoGuerra])
		    {
			    if(fam_player)
			    	return Error(playerid, "~r~Esta fábrica no está conquistado por ninguna familia~n~~w~Usa ~b~/conquistar");

				else
				    return Error(playerid, "~r~No puedes ingresar aquí.");
			}
			else
			{
			    if(fam_player)
			    {
					CongelarEx(playerid, 2);
					SetPlayerInterior(playerid, 2);
					SetPlayerVirtualWorld(playerid, VW_BLACKASO);
					SetPlayerPos(playerid, CORDS_FAB_BLACKASO_INT);
					SetPlayerFacingAngle(playerid, -90.0);
					return 1;
				}
				else
				    return Error(playerid, "~r~No puedes ingresar en este momento.");
			}
		}
	}
	else if(IsPlayerInRangeOfPoint(playerid, 2.0, CORDS_FAB_BLACKASO_INT) && GetPlayerVirtualWorld (playerid) == VW_BLACKASO)
	{
	    if(!FabricaBlackAso[fabTiempoGuerra])
	    {
			if(FabricaBlackAso[fabCerrado])
			    return Error(playerid, "~r~La puerta está cerrada.");

			CongelarEx(playerid, 2);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid, CORDS_FAB_BLACKASO_EXT);
			SetPlayerFacingAngle(playerid, 0.0);
			return 1;
		}

		return Error(playerid, "~r~No puedes salir en guerra.");
	}
	return 0;
}

CALLBACK:CargarFecha_data(name[], value[])
{
	if(!strcmp(name, "UltimaConexion"))
	{
	    alm(MiembroUltimaConex, value);
	    return;
	}
}

CALLBACK:CargarFac_Miembros(i, name[], value[])
{
	new
	    string[MAX_PLAYER_NAME+MAX_RANGO_LEN+8], val = strval(value);

	A_Format(string, "%s - "#CAMARILLO"%s(%d)\n", name, InfoRango[i][val], val);
	strcat(StringFacMiembros, string);
	return 1;
}

CALLBACK: Float: Angle2D(Float:PointA[], Float:PointB[])
{
/*	new
	    Float: Angle;

	Angle = floatabs(atan2(PointA[0]-PointB[0], PointA[1]-PointB[1]));
*/
	new bool:A_LS_B[2], Float:Dist[2], Float:Angle;

	for (new i = 0; i < 2; i++)
	{
		A_LS_B[i] = PointA[i] < PointB[i];
		Dist[i] = A_LS_B[i] ? PointB[i] - PointA[i] : PointA[i] - PointB[i];
	}

	Angle = atan2(Dist[1],Dist[0]);
	Angle = A_LS_B[0] ? 270.0 + Angle : 90.0 - Angle;
	Angle = A_LS_B[1] ? Angle : 180.0 - Angle;

	return Angle;
}

stock IsVehicleInRangeOfPoint(vehicleid, Float:radi, Float:x, Float:y, Float:z)
{
	return (GetVehicleDistanceFromPoint(vehicleid, x, y, z) < radi);
}

stock DurezaMineral(index)
{
	return (DataMineral[InfoMineral[index][minType]][mindataDureza]);
}

stock DarMineral (playerid, id)
{
	new
	    MinType = InfoMineral[id][minType];

	MensajeF(playerid, -1, "+Roca de {%06x}%s.", ARGBToRGBA(DataMineral[MinType][mindataCol]) >>> 8, DataMineral[MinType][mindataName]);
	GiveObject(playerid, GetRockAtType(MinType), 0);

	//Destruir mineral
	Bit_Set(ValidMineral, id, false);
	DestroyDynamicObject(InfoMineral[id][minObjID]);
}

stock TerminarFumar (playerid)
{
	if(GetObject(playerid) == GOAT(INV_CIGARRILLOON) || GetObject(playerid) == GOAT(INV_PORROON))
	{
		RemoveObject(playerid);
		return 1;
	}
	return 0;
}

stock TerminarMinear(playerid, bool:anim = false)
{
	if(IsPlayerWhitSpecialBar(playerid) && PicandoMineral[playerid])
	{
	    if(anim)
	    {
			ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
		}
		PicandoMineral[playerid] = 0;
		DeletePVar(playerid, "MINERO_MIN_ID");
		DestroyPlayerSpecialBar(playerid);
		return 1;
	}
	return 0;
}

CALLBACK: SacarHumo(playerid, id)
{
	if (id == 3)
	{
	    if(InfoJugador[playerid][jAttachOcultado][id] == false)
	    {
			SetPlayerAttachedObject(playerid,id,AttachmentObjects[InfoJugador[playerid][jAccesorio][id]][attachmodel],InfoJugador[playerid][jAttachBone][id],InfoJugador[playerid][jAttachPosx][id],InfoJugador[playerid][jAttachPosy][id],InfoJugador[playerid][jAttachPosz][id],InfoJugador[playerid][jAttachAngx][id],InfoJugador[playerid][jAttachAngy][id],InfoJugador[playerid][jAttachAngz][id],InfoJugador[playerid][jAttachEscx][id],InfoJugador[playerid][jAttachEscy][id],InfoJugador[playerid][jAttachEscz][id]);
		}
	}
	else
	{
	    RemovePlayerAttachedObject(playerid, 3);
	}

	if (GetPVarInt(playerid, "SinCigarrillo"))
	{
		TerminarFumar(playerid);
	}
	return 1;
}

CALLBACK: HumoFumar (playerid, faso)
{
	SetPlayerAttachedObject(playerid, 3, 18673, 2, 0.025000, 0.166000, -3.412999, 0.000000, 0.000000, 0.000000, 0.548000, 0.861000, 2.117000, 0, 0);
	if (InfoJugador[playerid][jAttachModel][3] && !InfoJugador[playerid][jAttachOcultado][3])
	{
	    SetTimerEx("SacarHumo", 2500, false, "ii", playerid, 3);
	}
	else
	{
	    SetTimerEx("SacarHumo", 2500, false, "ii", playerid, 0);
	}

	if (faso)
	{
	    PegarEfectoFaso(playerid, 35);
	}

	new
	    VidaCigarrillo = GetPVarInt(playerid, "Vida_Cigarrillo");

	VidaCigarrillo--;

	SetPVarInt(playerid, "Vida_Cigarrillo", VidaCigarrillo);

	if(!VidaCigarrillo)
	{
	    SetPVarInt(playerid, "SinCigarrillo", true);
	}
	return 1;
}

stock PegarEfectoFaso(playerid, potencia)
{
    TextDrawShowForPlayer(playerid, TDEfectoFaso);
    InfoJugador[playerid][jFalopeado] += potencia * 2;
    SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) + (potencia * 70));
	return 1;
}

public OnPlayerKeyStateChange(playerid,newkeys,oldkeys)
{
	if ((newkeys & KEY_CROUCH) && !(oldkeys & KEY_CROUCH) && GetPlayerState(playerid) == PLAYER_STATE_PASSENGER && GetPlayerCameraMode(playerid) == 55)
	{
	    static
	        old_returned [MAX_PLAYERS];
	        
		if (GetTickCount() > old_returned [playerid])
		{
		    old_returned [playerid] = GetTickCount () + 2000;
		    ReturnPlayerToPassengerSeat (playerid, true);
		}
	}
	if(GetPVarInt(playerid, "TAZEADO") && newkeys & KEY_SECONDARY_ATTACK)
	{
	    new
	        Float:x, Float:y, Float:z;

	    GetPlayerPos(playerid, x, y, z);
	    SetPlayerPos(playerid, x, y, z);
	    return 1;
	}
	if(GetPVarInt(playerid, "ParteConceptos"))
	{
	    static
			Time_OLD[MAX_PLAYERS];

	    if((GetTickCount() - Time_OLD[playerid]) < 3000)
	    {
	        return TextoJugador(playerid, "~g~~h~~h~espera tres segundos minimo", 3000, 3);
		}

	 	Time_OLD[playerid] = GetTickCount( );
	 	ConceptosDeRol(playerid);
		return 1;
	}

	if(UsandoHackPad[playerid])
	{
		if((newkeys & KEY_SECONDARY_ATTACK) && !(oldkeys & KEY_SECONDARY_ATTACK))
		{
			new
				key_player[MAX_KEY_NUMBERS+1],
				key_player_2[2],
				i = 0;

			for(i = 0; i < MAX_KEY_NUMBERS; i++)
			{
				format(key_player_2, 2, "%d", NumberKey[playerid][i]);

				strcat(key_player, key_player_2);
			}
			PlayerPlaySound(playerid, 1139, 0, 0, 0);
			OnPlayerConfirmKeyPad(playerid, key_player);
		}
		return 1;
	}

	if(PicandoMineral[playerid])
	{
		if(newkeys & KEY_FIRE) //Empezar a picar
		{
			if(GetPlayerWeapon(playerid) != 6) return Error(playerid, "Necesita tener una ~b~pala.");

			static
				UltimoGolpe[MAX_PLAYERS];

			new
			    tickcount_ = GetTickCount();
			if(tickcount_ > UltimoGolpe[playerid])
			{
			    UltimoGolpe[playerid] = tickcount_ + 100;
   				PicandoMineral[playerid] ++;
				SetPlayerSpecialBarValue(playerid, PicandoMineral[playerid]);

				new
    				MinID = GetPVarInt(playerid, "MINERO_MIN_ID");

				if(GetPlayerWeapon(playerid) != 6)
				{
				    TerminarMinear(playerid, true);
					return Error(playerid, "~r~No tienes una pala.");
				}

				if(GetPlayerAnimationIndex(playerid) != 20) // WTF (Bugueado o se escapó..)
				{
				    new
				        Float:x, Float:y, Float:z,
						ObjID = InfoMineral[MinID][minObjID];

					if(IsValidDynamicObject(ObjID))
					{
						GetDynamicObjectPos(ObjID, x, y, z);
						if(GetPlayerDistanceFromPoint(playerid, x, y, z) > 5.0) //Si se alejó por alguna razón..
						{
						    TerminarMinear(playerid, true);
						    MensajeF(playerid, -1, "Se cancelo la extracción de mineral automáticamente debido a un error detectado.");
							return 1;
						}
					}
					else
					{
					    TerminarMinear(playerid);
					    MensajeF(playerid, -1, "Se cancelo la extracción de mineral automáticamente debido a un error detectado.");
						return 1;
					}
					//Se bugueo solo la anim
					empezarPicar(playerid);
				}
				if(PicandoMineral[playerid] >= DurezaMineral(GetPVarInt(playerid, "MINERO_MIN_ID")))
				{
					TerminarMinear(playerid, true);
					Descongelar(playerid);
					RemoveObject(playerid);
    				DarMineral(playerid, MinID);
					Error(playerid, "Si necesitas picar otra vez, ve a buscar otra pala.");
				}
			}
		}
		return 1;
	}
	if(GetPVarInt(playerid, "Parte_RepartirP") == 1)
	{
	    if(newkeys & KEY_SECONDARY_ATTACK)
	    {
			new
			    VehID = GetPlayerVehicleID(playerid);

			if(VehID == 0) //
			{
			    if(GetPVarInt(playerid, "Veh_RepartirP")) return 1;

			    new
			        VehID2 = VehMasCercano(playerid, false, 6.0);

				if(VehID2 == INVALID_VEHICLE_ID)
				    return 1;

				if(veh_getJob(VehID2) != ID_RepartidorP) return 1;

				foreach(Player, i)
				{
				    if(InfoJugador[i][jTrabajo] == ID_RepartidorP)
				    {
						if(GetPVarInt(i, "Veh_RepartirP") == VehID2) return Error(playerid, "¡Ya hay una pizza en esta moto!");
					}
				}

				SetPVarInt(playerid, "Veh_RepartirP", VehID2);

				RemovePlayerAttachedObject(playerid, SLOT_MANODERECHA);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

				AutoRol(playerid, "mete la pizza en la caja de la moto");
				Mensaje(playerid, -1, "Debes utilizar esa moto para luego retirar la pizza.");

			}
			else
			{
			    if(VehID == GetPVarInt(playerid, "Veh_RepartirP"))
			    {
			        RemovePlayerFromVehicle(playerid);
       				SetPlayerAttachedObject(playerid, SLOT_MANODERECHA, 1582, 5, 0.1889, 0.1099, 0.0880, 98.1999, 7.4999, -107.0999, 1.0000, 1.0000, 1.0000);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

					DeletePVar(playerid, "Veh_RepartirP");
				}
			}
		}
	}

	if(InfoJugador[playerid][jCansancio] < 5 && !IsPlayerInAnyVehicle(playerid))
	{
  		if(newkeys & KEY_SPRINT)
		{
		    ApplyAnimation(playerid, "PED","IDLE_tired",4.0,0,1,1,0,0);
		}
	}

	if(newkeys & KEY_NO && !IsPlayerInAnyVehicle(playerid))
	{
		cmd_inventario(playerid, "");
		return 1;
	}

	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
		switch(newkeys)
		{
		    case KEY_YES:
		    {
				static
					old_pressed[MAX_PLAYERS];

				if(GetTickCount() - old_pressed[playerid] < 1000)
					return 0;

				old_pressed[playerid] = GetTickCount();

				new
				    kp = GetNearKP(playerid);

				if(kp != -1)
				{
					new
					    i = kp,
						Float: PlayerPos[3],
						Float: KeyPadPos[3];

					KeyPadPos[0] = KeyPadInfo[i][kpPosx];
					KeyPadPos[1] = KeyPadInfo[i][kpPosy];
					KeyPadPos[2] = KeyPadInfo[i][kpPosz];

					GetPlayerPos(playerid, PlayerPos[0], PlayerPos[1], PlayerPos[2]);

					new
						Float: Angle = Angle2D(PlayerPos, KeyPadPos);

					SetPlayerFacingAngle(playerid, Angle);

					SetPlayerPos(playerid, KeyPadInfo[i][kpPosx] - (0.65 * floatsin(-Angle,degrees)),
					KeyPadInfo[i][kpPosy] - (0.65 * floatcos(-Angle,degrees)),
					KeyPadInfo[i][kpPosz] - 0.63);

					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 10.0, 0, 0, 0, 0, 0);
					SetTimerEx("OnPlayerPressKeyPad", 600, false, "ii", playerid, i);
					return 1;
				}
				if(Portones(playerid)) return 1;
		        if(PortonesAutomaticos(playerid)) return 1;
		        if(Interiores(playerid)) return 1;
		        if(GetPlayerInterior(playerid) == 0)
		        {
        			foreach(Casas,c)
			   	 	{
			      		if(IsPlayerInRangeOfPoint(playerid,2,InfoCasa[c][cEntrada_x],InfoCasa[c][cEntrada_y],InfoCasa[c][cEntrada_z]))
			        	{
					    	if(InfoCasa[c][cCerrada] && !GetPVarInt(playerid, "ADMIN_ONDUTY"))
						    {
								TextoJugador(playerid,"~w~Esta casa esta ~r~cerrada",3000,3);
								Mensaje(playerid, -1, "Use "#CINFO"/puerta "#CBLANCO"para escribir la contraseña.");
								return 1;
							}
			    			if(InfoCasa[c][cComprada])
				    		{
					            SetPlayerInterior(playerid,InfoCasa[c][cInt]);
					            SetPlayerVirtualWorld(playerid,InfoCasa[c][cVW]);
								GameTextForPlayer(playerid,_TD(InfoCasa[c][cNombre]),4000,1);
					            SetPlayerPos(playerid,InfoCasa[c][cSalida_x],InfoCasa[c][cSalida_y],InfoCasa[c][cSalida_z]);
				            	return 1;
							}
							else
							{
								Dialog(playerid,dError,DIALOG_STYLE_MSGBOX,""#CAZUL2"- Visita -",""#CBLANCO"Esta casa, está a la venta.\n\tNo obstante, puedes hacer una visíta para ver el interior "#CINFO"(20 segs.)\n\n"#CBLANCO"Si no encuentras muebles, no te asustes. Recuerda que \ndeberás comprar los muebles por separado.","Cerrar","");
	             				Timer_Jugador[playerid][TIMER_VISITAC] = SetTimerEx("T_VisitaCasa",20000,false,"ii",playerid,c);
								SetPVarInt(playerid,"CASA_VISITA",c);
		            			SetPlayerPos(playerid,InfoCasa[c][cSalida_x],InfoCasa[c][cSalida_y],InfoCasa[c][cSalida_z]);
					            SetPlayerVirtualWorld(playerid,InfoCasa[c][cVW]);
					            SetPlayerInterior(playerid,InfoCasa[c][cInt]);
								GameTextForPlayer(playerid,_TD(InfoCasa[c][cNombre]),4000,1);
								CongelarEx(playerid, 3);
				            	return 1;
							}
						}
					}
     				foreach(Negocios,n)
					{
	  		      		if(IsPlayerInRangeOfPoint(playerid,3,InfoNegocio[n][nEntrada_x],InfoNegocio[n][nEntrada_y],InfoNegocio[n][nEntrada_z]))
			        	{
					    	if(InfoNegocio[n][nCerrado])
						    {
								TextoJugador(playerid,"~w~Este negocio esta ~r~cerrado",3000,3);
								return 1;
							}
							if(InfoNegocio[n][nTipo] == N_TECNOLOGIA || InfoNegocio[n][nTipo] == N_FARMACIA)
							{
								GameTextForPlayer(playerid,"~w~cargando~n~~b~~h~~h~~h~espera un momento..",3000,3);
								CongelarEx(playerid,3);
							}
			    			if(InfoNegocio[n][nComprado] == true)
				    		{
								if(InfoNegocio[n][nPrecioEntrada])
								{
								    if(GetPlayerMoney(playerid) < InfoNegocio[n][nPrecioEntrada]) return Error(playerid,"Dinero insuficiente, no puedes entrar.");
				    				QuitarDinero(playerid,InfoNegocio[n][nPrecioEntrada]);
									InfoNegocio[n][nDinero] += InfoNegocio[n][nPrecioEntrada];
								}
					            SetPlayerVirtualWorld(playerid,InfoNegocio[n][nVW]);
					            SetPlayerInterior(playerid,InfoNegocio[n][nInt]);
								GameTextForPlayer(playerid,_TD(InfoNegocio[n][nNombre]),4000,1);
								SetPlayerPos(playerid,InfoNegocio[n][nSalida_x],InfoNegocio[n][nSalida_y],InfoNegocio[n][nSalida_z]);
								return 1;
							}
							else
							{
					            SetPlayerVirtualWorld(playerid,InfoNegocio[n][nVW]);
					            SetPlayerInterior(playerid,InfoNegocio[n][nInt]);
								GameTextForPlayer(playerid,_TD(InfoNegocio[n][nNombre]),4000,1);
								SetPlayerPos(playerid,InfoNegocio[n][nSalida_x],InfoNegocio[n][nSalida_y],InfoNegocio[n][nSalida_z]);
								return 1;
							}
						}
					}
				}
    			foreach(Garages,i)
				{
					if(IsPlayerInRangeOfPoint(playerid,2,InfoGarage[i][gExt_x],InfoGarage[i][gExt_y],InfoGarage[i][gExt_z]))
					{
						if(InfoGarage[i][gCerrado] == true)
						{
						    TextoJugador(playerid,"~w~este garage esta ~r~cerrado",3000,3);
						    return 1;
						}
					    SetPlayerPos(playerid,InfoGarage[i][gInt_x],InfoGarage[i][gInt_y],InfoGarage[i][gInt_z]);
						SetPlayerInterior(playerid,InfoGarage[i][gInt]);
						SetPlayerVirtualWorld(playerid,InfoGarage[i][gVW]);
						return 1;
					}
					else if(IsPlayerInRangeOfPoint(playerid,2,InfoGarage[i][gInt_x],InfoGarage[i][gInt_y],InfoGarage[i][gInt_z]) && (GetPlayerVirtualWorld(playerid) == InfoGarage[i][gVW]))
					{
	    				SetPlayerPos(playerid,InfoGarage[i][gExt_x],InfoGarage[i][gExt_y],InfoGarage[i][gExt_z]);
						SetPlayerInterior(playerid,0);
						SetPlayerVirtualWorld(playerid,0);
						return 1;
					}
				}
				Loop(i, sizeof InfoInterior, 0)
				{
					if(IsPlayerInRangeOfPoint(playerid,2,InfoInterior[i][intEntrada_x],InfoInterior[i][intEntrada_y],InfoInterior[i][intEntrada_z]))
					{
					    if(CallLocalFunction("OnPlayerRequestEnterInterior", "ii", playerid, i))
					    {
					        SetPlayerCustomInterior (playerid, i);
						}
						return 1;
					}
				    else if(IsPlayerInRangeOfPoint(playerid, 2, InfoInterior[i][intSalida_x], InfoInterior[i][intSalida_y], InfoInterior[i][intSalida_z]))
				    {
				    	if(CallLocalFunction("OnPlayerRequestExitInterior", "ii", playerid, i))
					    {
							CongelarEx (playerid);

							SetPlayerPos (playerid, InfoInterior[i][intEntrada_x], InfoInterior[i][intEntrada_y], InfoInterior[i][intEntrada_z]);
							SetPlayerFacingAngle (playerid, InfoInterior[i][intEntrada_a]);

							if (InfoInterior[i][intInt2])
							{
								TextDrawShowForPlayer (playerid, Vendado);
								TextDrawShowForPlayer (playerid, Cargando);
							    SetPlayerVirtualWorld (playerid, InfoInterior[i][intInt2] + INT_CUSTOM_VW);
							    SetPlayerInterior (playerid, InfoInterior[InfoInterior[i][intInt2]][intInt]);
								SetTimerEx("CargoObjetos", InfoInterior[InfoInterior[i][intInt2]][intTiempo]*1000, false, "i", playerid);
							}
							else
							{
							    SetPlayerVirtualWorld (playerid, 0);
							    SetPlayerInterior (playerid, 0);
								SetTimerEx("CargoObjetos", 1500, false, "i", playerid);
							}
							return 1;
						}
					}
				}

				if(EstaEnCasa(playerid))
				{
				    new i = ID_Casa(playerid);
				    if(IsPlayerInRangeOfPoint(playerid,2,InfoCasa[i][cSalida_x],InfoCasa[i][cSalida_y],InfoCasa[i][cSalida_z]))
				    {
				        if(GetPVarInt(playerid,"CASA_VISITA") == i)
						{
						    KillTimer2(playerid,TIMER_VISITAC);
						    DeletePVar(playerid,"CASA_VISITA");
						}
				        SetPlayerPos(playerid,InfoCasa[i][cEntrada_x],InfoCasa[i][cEntrada_y],InfoCasa[i][cEntrada_z]);
						SetPlayerInterior(playerid,0);
						SetPlayerVirtualWorld(playerid,0);
						return 1;
					}
					return 1;
				}
				else if(EstaEnNegocio(playerid))
				{
				    new i = ID_Negocio(playerid);
				    if(IsPlayerInRangeOfPoint(playerid,2,InfoNegocio[i][nSalida_x],InfoNegocio[i][nSalida_y],InfoNegocio[i][nSalida_z]))
				    {
				        if(GetPVarInt(playerid,"ROBANDO"))
						{
					 		Error(playerid,"¡No puedes salir del negocio, estás robando!");
				            Mensaje(playerid,-1,"Debes estar un minuto en el negocio");
				            return 1;
						}
						if(GetPVarInt(playerid,"BUSCADO"))
						{
						    foreach(Player,p) if(EsLSPD(p))
						    {
						        SetPlayerMarkerForPlayer(p,playerid, 0xB06B90FF);
						        Mensaje(p, -1,"El {B06B90}SOSPECHOSO "#CBLANCO"salió de un negocio.");
							}
						}
				        SetPlayerPos(playerid,InfoNegocio[i][nEntrada_x],InfoNegocio[i][nEntrada_y],InfoNegocio[i][nEntrada_z]);
						SetPlayerInterior(playerid,0);
						SetPlayerVirtualWorld(playerid,0);
						return 1;
					}
					return 1;
				}
				return 1;
			}
		}
	}
	else {
		new VehID = GetPlayerVehicleID(playerid);
	    switch(newkeys)
	    {
			case KEY_YES:
			{
				static
				    Time_OldPress[MAX_PLAYERS];

				if((GetTickCount() - Time_OldPress[playerid]) < 2000)
				{
				    return 1;
				}

				Time_OldPress[playerid] = GetTickCount();

				if(Portones(playerid)) return 1;
				if(PortonesAutomaticos(playerid)) return 1;

				foreach(Garages,i)
				{
					if(IsPlayerInRangeOfPoint(playerid,3,InfoGarage[i][gExtV_x],InfoGarage[i][gExtV_y],InfoGarage[i][gExt_z]))
					{
						if(InfoGarage[i][gCerrado] == true)
						{
						    TextoJugador(playerid,"~w~este garage esta ~r~cerrado",3000,3);
						    return 1;
						}
						if(!InfoCasa[InfoGarage[i][gIDCasa]][cComprada])
						{
						    TextoJugador(playerid,_TD("~w~no puedes entrar con ~r~vehículos.~w~~n~^Solo el dueño puede!"),4000,3);
						    return 1;
						}

						veh_setInterior(VehID, InfoGarage[i][gInt]);
						veh_setVirtualWorld(VehID, InfoGarage[i][gVW]);
						SetVehicleZAngle(VehID, 0);
					    SetVehiclePos(VehID, InfoGarage[i][gIntV_x], InfoGarage[i][gIntV_y], InfoGarage[i][gInt_z]);
						return 1;
					}
					else if(IsPlayerInRangeOfPoint(playerid,3,InfoGarage[i][gIntV_x],InfoGarage[i][gIntV_y],InfoGarage[i][gInt_z]) && GetPlayerVirtualWorld(playerid) == InfoGarage[i][gVW])
					{
						veh_setInterior(VehID, 0);
						veh_setVirtualWorld(VehID, 0);
			    		SetVehiclePos(VehID, InfoGarage[i][gExtV_x], InfoGarage[i][gExtV_y], InfoGarage[i][gExt_z]);
						SetVehicleZAngle(VehID, InfoGarage[i][gAng]);
						return 1;
					}
				}
			}
	        case KEY_FIRE:
	        {
		    	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		    	{
		    	    if(GetVehType(VehID) == VEHICLE_TYPE_BICYCLE) return 1;

					if(!TieneLlaveVeh(playerid,VehID)) {
						return Error(playerid,"¡No tienes la llave de este vehículo!");
					}
	  					
					if(!veh_getEngine(VehID)) {
			 			if(GetPVarInt(playerid, "ID_TD_ENCENDIENDO")) return 1;

						new
							PlayerText: Starting;

						Starting = CreatePlayerTextDraw(playerid, 153.600006, 290.453247, "Encendiendo...");
						PlayerTextDrawLetterSize(playerid, Starting, 0.437999, 2.271999);
						PlayerTextDrawAlignment(playerid, Starting, 1);
						PlayerTextDrawColor(playerid, Starting, -1378294017);
						PlayerTextDrawSetShadow(playerid, Starting, 0);
						PlayerTextDrawSetOutline(playerid, Starting, 1);
						PlayerTextDrawBackgroundColor(playerid, Starting, 255);
						PlayerTextDrawFont(playerid, Starting, 2);
						PlayerTextDrawSetProportional(playerid, Starting, 1);
						PlayerTextDrawShow(playerid, Starting);

						SetPVarInt(playerid, "ID_TD_ENCENDIENDO", _:Starting);

						KillTimer2(playerid,TIMER_BMOTOR);
			 			Timer_Jugador[playerid][TIMER_BMOTOR] = SetTimerEx("SubeBarraMotor",500,true,"i",playerid);
					}
					else {
						AutoRol(playerid,"apaga el motor del vehículo");
						veh_setEngine(VehID, false);
					}

				}
				return 1;
			}
			case KEY_NO:
			{
		 		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
					new vehID = GetPlayerVehicleID(playerid);
					
					veh_setLights(vehID, !veh_getLights(vehID));
				}
				return 1;
			}
		}
	}
	return 1;
}

stock DarLlavesFaccion(playerid)
{
	if (InfoJugador[playerid][jLider] == 0)
	    return 1;

	foreach(veh, i)
	{
	    if(veh_getFaction(i) == InfoJugador[playerid][jLider])
	    {
			Bit_Set(Llave_veh[playerid], i, true);
		}
	}
	Mensaje(playerid, -1, "• Se te entregaron todas las llaves de los vehículos de tu facción.");
	GuardarLlaves(playerid);
	return 1;
}

stock SacarLlavesFaccion(playerid)
{
	foreach(veh, i)
	{
	    if(veh_getFaction(i) == ID_Faccion(playerid))
	    {
			Bit_Set(Llave_veh[playerid], i, false);
		}
	}
	Mensaje(playerid, -1, "• Se te retiraron todas las llaves de los vehículos de tu facción.");
	GuardarLlaves(playerid);
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if(Cracked[playerid])
	{
		new
 			Float:Pos[3];

		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
		SetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
		Mensaje(playerid, -1, "No puedes ingresar a un vehículo herido.");
		CongelarEx(playerid, 5);

		if (Cracked[playerid] == 1)
			ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0);

		else if (Cracked[playerid] == 2)
			ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 1, 1, 1, 0);

		return 1;
	}

	if(ispassenger == 0)
	{
		new
 			Float:Pos[3];

		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

	    if(veh_getJob(vehicleid))
	    {
	        if(veh_getJob(vehicleid) != InfoJugador[playerid][jTrabajo])
	        {
				SetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
				Error(playerid, "¡Este vehículo no pertenece a tu trabajo!");
				return 1;
			}
			switch(veh_getJob(vehicleid))
			{
				case ID_Basurero:
				{
				    if(GetPVarInt(playerid,"CAMION_BASURA") != vehicleid)
					{
						foreach(Player,i)
						{
							if(GetPVarInt(i,"CAMION_BASURA") == vehicleid)
							{
								Error(playerid,"¡Ya alguien está utilizando este camión!");
								SetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
								return 1;
							}
						}
					}
				}
				case ID_Cosechador:
				{
					if(GetPVarInt(playerid,"EstaCultivando") > 0)
					{
						if(GetPVarInt(playerid,"EstaCultivando") == vehicleid)
						{
							Mensaje(playerid,-1,"Continua la cosecha.");
							return 1;
						}
						else
						{
							Error(playerid,"¡Esta cosechadora no es la tuya!");
							SetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
							return 1;
						}
					}
					Mensaje(playerid,-1,"Usa /cosechar para comenzar a trabajar");
				}
			}
		}
		else if(veh_getFaction(vehicleid))
		{
	        if(veh_getFaction(vehicleid) != ID_Faccion(playerid))
	        {
				SetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
				Error(playerid, "¡Este vehículo no pertenece a tu facción!");
				return 1;
			}
		}

	    new
			VictimID = INVALID_PLAYER_ID;

	    foreach(Player, i) if(IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) == PLAYER_STATE_DRIVER)
	    {
	        VictimID = i;
	        break;
		}
		if(VictimID != INVALID_PLAYER_ID)
		{
			new
			    Rol_Str[80];

			static
			    Old_CarJack[MAX_PLAYERS];

			if((GetTickCount() - Old_CarJack[playerid]) < 5000)
			{
				SetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
				return 1;
			}

			Old_CarJack[playerid] = GetTickCount();

			switch(random(3))
			{
			    case 0:
			    {
					A_Format(Rol_Str, "intenta sacar del vehículo a la fuerza a %s, y lo logra", NombreJugador(VictimID));
					AutoRol(playerid, Rol_Str);
				}
				default:
				{
					A_Format(Rol_Str, "intenta sacar del vehículo a la fuerza a %s, pero falla", NombreJugador(VictimID));
					AutoRol(playerid, Rol_Str);
					SetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
					CongelarEx(playerid, 5);
					PreventOPU(playerid, 3);
				}
			}
		}
	}
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	if(GetPVarInt(playerid,"FORZADO_COCHE")) return PutPlayerInVehicle(playerid,vehicleid,1),1;
	if(GetPVarInt(playerid,"TIENE_CINTURON"))
	{
 		Error(playerid,"Tienes el cinturón de seguridad puesto, usa ~r~/cinturon");
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		{
			PutPlayerInVehicle(playerid,vehicleid,GetPlayerVehicleSeat(playerid));
		}
		else
		{
		    SetTimerEx("_2PutPlayerInVehicle", 1000, false, "iii", playerid, vehicleid, 0);
		}
	    return 1;
	}
	return 1;
}

CALLBACK:_2PutPlayerInVehicle(params_1, params_2, params_3)
	return PutPlayerInVehicle(params_1, params_2, params_3);

public OnPlayerUpdate(playerid)
{
	if (PreventedOPU[playerid])
	    return 0;

	static
		LastKeyPressed[MAX_PLAYERS];

	new
		VehID = GetPlayerVehicleID(playerid);

	if(VehID != 0 && veh_getEngine(VehID))
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			if(TrailerAttached[playerid] == 0)
			{
			    new
			        TrailerID = GetVehicleTrailer(VehID);

			    if(TrailerID)
			    {
			        OnPlayerAttachTrailer(playerid, VehID, TrailerID);
			        TrailerAttached[playerid] = TrailerID;
				}
			}
			else
			{
			    if(!IsTrailerAttachedToVehicle(VehID))
			    {
			        OnPlayerDettachTrailer(playerid, VehID, TrailerAttached[playerid]);
			        TrailerAttached[playerid] = 0;
				}
			}
		}
	}

	else
	{
		new SurfVeh = GetPlayerSurfingVehicleID(playerid);

		if( SurfVeh != INVALID_VEHICLE_ID )
		{
			if(GetVehicleSpeed(SurfVeh) > 50.0)
			{
				switch(GetVehicleModel(SurfVeh))
				{
					case 595,446,452,453,454,472,473,484,493,430,422,543,554,600,605,478,556,557,433,444,455,470:
					{
						return 1;
					}
				}

				new
					Float:slx, Float:sly, Float:slz;

				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+2.5);

				ApplyAnimation(playerid, "ped", "BIKE_fallR", 4.0, 0, 1, 0, 0, 0,0);

				new
					Float:VD;

				GetPlayerHealth(playerid, VD);
				SetPlayerHealth(playerid, VD-20);

				SetTimerEx("AnimUp_", 1100, 0, "d", playerid);
			}
		}

		if(UsandoHackPad[playerid])
		{
			new Key[3];
			GetPlayerKeys(playerid, Key[0], Key[1], Key[2]);
			if(Key[1] != 0 || Key[2] != 0)
			{
				if(GetTickCount() - LastKeyPressed[playerid] > 100)
				{
					LastKeyPressed[playerid] = GetTickCount();
					OnPlayerPressDirectionKeys(playerid, Key[2], Key[1]);
				}
			}
		}

		if(1538 <= GetPlayerAnimationIndex(playerid) <= 1542) // Nadando
		{
			if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
			{
			    new
			        Float:x, Float:y, Float:z;

				GetPlayerVelocity(playerid, x, y, z);
				SetPlayerVelocity(playerid, x, y, z-0.05);
				GameTextForPlayer(playerid, "~r~^suelta el objeto!", 1000, 3);
			}
		}
	}
	return 1;
}

CALLBACK: AnimUp_(playerid)
{
    ApplyAnimation(playerid, "ped", "getup", 4.0, 0, 1, 0, 0, 0,0);
	return 1;
}


stock ShowKeyPad(playerid)
{
	if(UsandoHackPad[playerid])
	{
	    HideKeyPad(playerid);
	}
    for(new a; a < MAX_KEY_NUMBERS; a++)
	{
		NumberPanel[playerid][a] = CreatePlayerTextDraw(playerid, 230.000000+(70.0*a), 80.000000+60.00000, "0");
		PlayerTextDrawBackgroundColor(playerid, NumberPanel[playerid][a], 255);
		PlayerTextDrawFont(playerid, NumberPanel[playerid][a], 2);
		PlayerTextDrawLetterSize(playerid, NumberPanel[playerid][a], 1.299999, 6.000000);
		PlayerTextDrawColor(playerid, NumberPanel[playerid][a], -1);
		PlayerTextDrawSetOutline(playerid, NumberPanel[playerid][a], 1);
		PlayerTextDrawSetProportional(playerid, NumberPanel[playerid][a], 1);
		PlayerTextDrawUseBox(playerid, NumberPanel[playerid][a], 1);
		PlayerTextDrawBoxColor(playerid, NumberPanel[playerid][a], 0x20B2AAFF);
		PlayerTextDrawTextSize(playerid, NumberPanel[playerid][a], 260.000000+(70.0*a), 0.000000);
		PlayerTextDrawShow(playerid, NumberPanel[playerid][a]);
	}
	TextDrawShowForPlayer(playerid, KeyPad_Fondo);
	UsandoHackPad[playerid] = true;
	CongelarEx(playerid);
	return 1;
}

stock HideKeyPad(playerid)
{
	if(NumberPanel[playerid][0] != PlayerText:0)
	{
	    for(new a; a < MAX_KEY_NUMBERS; a++)
		{
		    PlayerTextDrawDestroy(playerid, NumberPanel[playerid][a]);
		    NumberPanel[playerid][a] = PlayerText:0;
			NumberKey[playerid][a] = 0;
			DeletePVar(playerid, "H_PartePanel");
		}
	}
	TextDrawHideForPlayer(playerid, KeyPad_Fondo);
	UsandoHackPad[playerid] = false;
	Descongelar(playerid);
	return 1;
}

CALLBACK: OnPlayerConfirmKeyPad(playerid, key[])
{
	switch(GetPVarInt(playerid, "H_TYPE_HACK"))
	{
		case H_TYPE_DOOR:
		{
		    new
				House_ID = GetPVarInt(playerid, "H_HOUSE_ID"),
				str[MAX_KEY_NUMBERS+1];

			A_Format(str, "%d", InfoCasa[House_ID][cContra_puerta]);

			if(strval(key) != strval(str))
			{
				TextoJugador(playerid, _TD("~w~contraseña ~r~incorrecta"), 4000, 3);
			}
			else
			{
				TextoJugador(playerid, _TD("~w~contraseña ~g~correcta"), 4000, 3);
				InfoCasa[House_ID][cCerrada] = false;
				ActualizarCasaLabel(House_ID);
				ActualizarCasa(House_ID);
			}
			HideKeyPad(playerid);
			DeletePVar(playerid, "H_TYPE_HACK");
			DeletePVar(playerid, "H_HOUSE_ID");
			return 1;
		}
		case H_TYPE_DOOR_CONFIG:
		{
		    new
				House_ID = GetPVarInt(playerid, "H_HOUSE_ID"),
				bool: NumerosRepetidos = false,
				str[MAX_KEY_NUMBERS+1];

			strcat(str, key);

			for(new a; a < MAX_KEY_NUMBERS; a++)
			{
			    for(new b; b < MAX_KEY_NUMBERS; b++)
			    {
			        if(a != b && key[a] == str[b])
			        {
			            NumerosRepetidos = true;
			            goto Check_repeated_numbers;
					}
				}
			}
			Check_repeated_numbers:
			if(NumerosRepetidos) return Error(playerid, "¡No puede tener número repetidos!");

			InfoCasa[House_ID][cContra_puerta] = strval(key);
			ActualizarCasa(House_ID);
			HideKeyPad(playerid);

			Mensaje(playerid, -1, "Contraseña modificada correctamente.");
			DeletePVar(playerid, "H_TYPE_HACK");
			DeletePVar(playerid, "H_HOUSE_ID");
			return 1;
		}
	}
	return 1;
}

CALLBACK: OnPlayerPressDirectionKeys(playerid, leftright, updown)
{
	new PartePanel = GetPVarInt(playerid, "H_PartePanel");

	if(leftright == KEY_RIGHT)
	{
		if(PartePanel < MAX_KEY_NUMBERS-1)
		{
		    PlayerPlaySound(playerid, 1190, 0, 0, 0);
			PlayerTextDrawBoxColor(playerid,NumberPanel[playerid][PartePanel], 0x20B2AAFF);
			PlayerTextDrawShow(playerid, NumberPanel[playerid][PartePanel]);
			PartePanel++;
			PlayerTextDrawBoxColor(playerid,NumberPanel[playerid][PartePanel], 0xFF6347FF);
			PlayerTextDrawShow(playerid, NumberPanel[playerid][PartePanel]);
		}
		else PlayerPlaySound(playerid, 1131, 0, 0, 0);
	}
	else if(leftright == KEY_LEFT)
	{
		if(PartePanel)
		{
		    PlayerPlaySound(playerid, 1190, 0, 0, 0);
			PlayerTextDrawBoxColor(playerid,NumberPanel[playerid][PartePanel], 0x20B2AAFF);
			PlayerTextDrawShow(playerid, NumberPanel[playerid][PartePanel]);
			PartePanel--;
			PlayerTextDrawBoxColor(playerid,NumberPanel[playerid][PartePanel], 0xFF6347FF);
			PlayerTextDrawShow(playerid, NumberPanel[playerid][PartePanel]);
		}
		else PlayerPlaySound(playerid, 1131, 0, 0, 0);
	}
	if(updown == KEY_UP)
	{
		if(NumberKey[playerid][PartePanel])
		{
		    PlayerPlaySound(playerid, 1085, 0, 0, 0);
			NumberKey[playerid][PartePanel]--;
			new str[4];
			format(str, 4, "%d", NumberKey[playerid][PartePanel]);
			PlayerTextDrawSetString(playerid, NumberPanel[playerid][PartePanel], str);
		}
		else PlayerPlaySound(playerid, 1131, 0, 0, 0);
	}
	else if(updown == KEY_DOWN)
	{
		if(NumberKey[playerid][PartePanel] < 9)
		{
		    PlayerPlaySound(playerid, 1085, 0, 0, 0);
			NumberKey[playerid][PartePanel]++;
			new str[4];
			format(str, 4, "%d", NumberKey[playerid][PartePanel]);
			PlayerTextDrawSetString(playerid, NumberPanel[playerid][PartePanel], str);
		}
		else PlayerPlaySound(playerid, 1131, 0, 0, 0);
	}
	SetPVarInt(playerid, "H_PartePanel", PartePanel);
	return 1;
}

// ----===[ Vehiculos, Casas y negocios ]======------ //

stock TieneLlaveVeh(playerid,vehid)
{
	if(veh_getType(vehid) == VEH_TYPE_OWNVEH)
	{
		if (veh_getOwnerCode(vehid) == InfoJugador[playerid][jNameCode]) {
			return 2;
		}

		if (veh_getFamily(vehid) && veh_getFamily(vehid) == ID_Familia(playerid)) {
			return 1;
		}
	}
	else
	{
		if(veh_getFaction(vehid))
		{
		    if(Bit_Get(Llave_veh[playerid], vehid)) return 1;
		}
		else if(veh_getJob(vehid))
		{
		    if(veh_getJob(vehid) == InfoJugador[playerid][jTrabajo]) return 1;
		}
		else if(EsVehRenta(vehid))
		{
		    if(GetPVarInt(playerid,"RentoVehID") == vehid) return 1;
		}
	}
 	return 0;
}

stock GetInvItemPlayer(playerid)
{
	if(0 <= playerid < MAX_PLAYERS)
	{
		switch(InfoJugador[playerid][jNivel])
		{
		    case 0, 1, 2, 3:
		        return 6;

		    case 4, 5, 6:
		        return 7;

		    case 7, 8, 9:
		        return 8;

		    case 10, 11, 12:
		        return 9;

		    default:
		        return 10;
		}
	    return 1;
	}
	return 0;
}

stock EsDuenoVeh(playerid, vehid)
{
	return TieneLlaveVeh(playerid, vehid) == 2;
}

stock PandillerosEnGangZone( pandilla, GangZone )
{
	new
	    GZ,
		Cantidad;

	foreach(Player,i)
	{
	    if( ID_Familia(i) == pandilla && InfoFamilia[ID_Familia(i)][fPandilla] )
	    {
	        GZ = GetPlayerGangZone(i);

			if(GZ == GangZone) Cantidad++;

			GZ = 0;
		}
	}
	return Cantidad;
}

stock CheckDistanciaConVehiculo(playerid,Float:Distancia,VehID)
{
	new Float:PosV[3];
	GetVehiclePos(VehID,PosV[0],PosV[1],PosV[2]);
	if(IsPlayerInRangeOfPoint(playerid,Distancia,PosV[0],PosV[1],PosV[2]))
	{
		return 1;
	}
	return 0;
}

stock ID_Familia(playerid)
{
	if(!InfoJugador[playerid][jMiembroFam] && !InfoJugador[playerid][jLiderFam])
	    return 0;

	return (InfoJugador[playerid][jMiembroFam]) ? InfoJugador[playerid][jMiembroFam] : InfoJugador[playerid][jLiderFam];
}

stock ID_Faccion(playerid)
{
	if(!InfoJugador[playerid][jMiembro] && !InfoJugador[playerid][jLider])
	    return 0;

	return (InfoJugador[playerid][jMiembro]) ? InfoJugador[playerid][jMiembro] : InfoJugador[playerid][jLider];
}

stock EsDueno(playerid)
{
	return(!strcmp(NombreJugador(playerid),"Ryan Spell",		false)
		|| !strcmp(NombreJugador(playerid),"Miky Boyx",		 	false)
		|| InfoJugador[playerid][jAdmin] == Dueno);
}

stock Float:GetPosInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance)//by: whoever
{
	new Float:a;
	GetPlayerPos(playerid, x, y, a);
	switch(IsPlayerInAnyVehicle(playerid))
	{
	    case 0: GetPlayerFacingAngle(playerid, a);
	    case 1: GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
	}
	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
	return a;
}

//      CASAS
stock SlotCasaLibre()
{
	Loop(i,MAX_CASAS,0)
	{
		if(!InfoCasa[i][cInt] && !InfoCasa[i][cVW]) return i;
	}
	return -1;
}

stock SlotGarageLibre()
{
	Loop(i,MAX_GARAGES,0)
	{
		if(!InfoGarage[i][gVW]) return i;
	}
	return -1;
}

stock EstaEnCasa(playerid)
{
	if(GetPlayerVirtualWorld(playerid) >= 100 && GetPlayerVirtualWorld(playerid) < 1000 )
	{
	    return 1;
	}
	return 0;
}

stock EstaEnSuCasa(playerid)
{
	if(ID_Casa(playerid) == INVALID_HOUSE_ID) return 0;
	if(strmatch(InfoCasa[ID_Casa(playerid)][cComprador],pName(playerid) ))
	{
	    return 1;
	}
	return 0;
}

stock TieneLlaveCasa(playerid,i)
{
	if(EsDuenoCasa(playerid,i))
	{
	    return 1;
	}
	if(InfoCasa[i][cFamilia])
	{
		if(InfoCasa[i][cFamilia] == InfoJugador[playerid][jLiderFam] || InfoCasa[i][cFamilia] == InfoJugador[playerid][jMiembroFam])
		{
		    return 1;
		}
	}
	return 0;
}

stock ID_Casa(playerid)
{
	return CasaActual [playerid];
}

stock EsDuenoCasa(playerid,cid)
{
	if(strmatch(InfoCasa[cid][cComprador],pName(playerid)))
	{
	    return 1;
	}
	return 0;
}

stock CopyFile(File_original[], File_copia[], bool:BorrarReal = false)
{
    if(!fexist(File_original)) return 0;

    new
		File:Original = fopen(File_original, io_read),
		File:Copia = fopen(File_copia, io_write),
		ReadStr[255];

    while(fread(Original, ReadStr, sizeof(ReadStr)))
	{
		fwrite(Copia, ReadStr);
	}

    fclose(Original);
	fclose(Copia);
    if(BorrarReal) fremove(File_original);
   	return 1;
}

//      INTERIORES
stock ID_Interior(playerid)
{
	new
	    VW = GetPlayerVirtualWorld (playerid);

	if (INT_CUSTOM_VW <= VW < (INT_CUSTOM_VW + MAX_INTERIORES))
	{
		return (VW - INT_CUSTOM_VW);
	}
	return -1;
}

stock EstaEnInterior(playerid)
{
	return bool:(ID_Interior(playerid) != INVALID_INTERIOR_ID) ? (true) : (false);
}

//		NEGOCIOS
stock SlotNegocioLibre()
{
	Loop(i,MAX_NEGOCIOS,0)
	{
	    if(!InfoNegocio[i][nInt] && !InfoNegocio[i][nVW]) return i;
	}
	return -1;
}

stock EstaEnNegocio(playerid)
{
	return bool:(ID_Negocio(playerid) != INVALID_BUSINESS_ID) ? (true) : (false);
}

stock EstaEnSuNegocio(playerid)
{
	if(ID_Negocio(playerid) == INVALID_BUSINESS_ID) return 0;

	if(strmatch(InfoNegocio[ID_Negocio(playerid)][nComprador],pName(playerid) ))
	{
	    return 1;
	}
	return 0;
}

stock ID_Negocio(playerid)
{
	if(GetPlayerVirtualWorld(playerid) >= 1000 && GetPlayerVirtualWorld(playerid) <= (1000 + MAX_NEGOCIOS))
	{
	    return (GetPlayerVirtualWorld(playerid) -1000);
	}
	return INVALID_BUSINESS_ID;
}

stock EsDuenoNegocio(playerid,nid)
{
	if(strmatch(InfoNegocio[nid][nComprador],pName(playerid)))
	{
	    return 1;
	}
	return 0;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	if(!InfoJugador[playerid][jRegistrado]) return 1;
	foreach(Player, i)
	{
	    if (Specteando_ID[i] == playerid)
	    {
		    SetPlayerInterior(i, newinteriorid);
		}
	}
	return 1;
}

CALLBACK: CargoObjetos(playerid)
{
	TextDrawHideForPlayer (playerid, Vendado);
	TextDrawHideForPlayer (playerid, Cargando);

	Descongelar (playerid);
	return 1;
}

public OnPlayerText(playerid, text[])
{
	if(!LoginTime[playerid]) return 0;

	new
	    time = gettime();

	if(BloquedText[playerid] > time)
	    return 0;

	static
	    OldText[MAX_PLAYERS],
		CountText[MAX_PLAYERS];

	if(OldText[playerid] > time)
	{
	    CountText[playerid] ++;
	    if(CountText[playerid] > 5)
	    {
	        Mensaje(playerid, -1, "Se te bloqueó el acceso al chat automáticamente por 10 segundos (Chat Spam).");
            BloquedText[playerid] = time + 10;
			return 0;
		}
	}
	else
	{
		OldText[playerid] = time + 4;
		CountText[playerid] = 0;
	 	BloquedText[playerid] = 0;
	}

	//Anti SPAM
	if(EsIP(text))
	{
		MensajeAdminF(C_ROJO, "[Anti-SPAM] "#CBLANCO"%s(%d): "#CINFO"%s", Destacado, NombreJugador_(playerid), playerid, text);
		antic_Kick(playerid, "SPAM");
		return 0;
	}

	new
		string[180],
		len = strlen(text);

	if(!InfoJugador[playerid][jAcento])
		format(string,sizeof(string),"%s dice: %s",NombreJugador(playerid),text);
	else
		format(string,sizeof(string),"%s (Acento %s): %s",NombreJugador(playerid), Acentos[InfoJugador[playerid][jAcento]-1], text);

	ProxDetector(20,playerid,string,-1,Hablar,Hablar2,Hablar3,Hablar4);
	SetPlayerChatBubble(playerid,text,C_INFO,20,len * 200);

	if (len > 2)
	{
		new
		    animi = GetPlayerAnimationIndex(playerid);

		switch(animi)
		{
		    case 1189, 1231:
		    {
		        KillTimer2(playerid, TIMER_HABLAR);
		        Timer_Jugador[playerid][TIMER_HABLAR] = SetTimerEx("StopChatAnim", len * 70, false, "i", playerid);
				ApplyAnimation(playerid, "PED", "IDLE_chat", 4.0, 1, 0, 0, 1, 1, true); // SAY
		    }
		}
	}
	return 0;
}

CALLBACK: StopChatAnim (playerid)
{
	switch(GetPlayerAnimationIndex(playerid))
	{
	    case 1189, 1231, 1266:
	    {
	        ApplyAnimation(playerid, "CARRY", "crry_prtial", 1.0, 0, 1, 1, 0, 0);
		}
	}
	Timer_Jugador[playerid][TIMER_HABLAR] = INVALID_TIMER_ID;
}

stock basicString(string[])
{
	new
	    len = strlen(string);

	if (len == 0)
	    return 0;

	for (new i; i < len; i++)
	{
		switch (string[i])
		{
		    case ' ', '_', '(', ')', '0' .. '9', 'A' .. 'Z', 'a' .. 'z', ',', '?', '¿', '.':
				continue;

			default:
			    return 0;
		}
	}
	return 1;
}


public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	for(new i, len = strlen(inputtext); i < len; i++)
	{
	    if(inputtext[i] == '%')
	    {
	        inputtext[i] = '#';
		}
	}
	
	if (GetPVarInt (playerid, "antic_DialogID") != dialogid)
	{
	    //dialogid = GetPVarInt (playerid, "antic_DialogID");
	}

	DeletePVar (playerid, "antic_DialogID");
	
	switch(dialogid)
	{
		case dRegistro:
		{
		    switch (GetPVarInt (playerid, "pRegistro"))
		    {
		        case 0:
		        {
					if (!response) return Kick(playerid);

					if (!(4 <= strlen(inputtext) < MAX_CARACTERES_CLAVE))
					{
						DialogLR (playerid, 1);
					    return Mensaje (playerid, -1, "La contraseña debe tener desde 4 a 32 caracteres.");
					}
					
					InfoJugador [playerid][jClave] = udb_hash (inputtext);
					SetPVarInt (playerid, "pRegistro", 1);
					Dialog(playerid, dRegistro, DIALOG_STYLE_INPUT, HEADER_REGISTRO, DIALOG_REGISTRO2, "Continuar", "Salir");
					LoginSecs [playerid] = 0;
				}
				case 1:
				{
					if (!response) return Kick(playerid);

				    if (InfoJugador [playerid][jClave] != udb_hash (inputtext))
				    {
				        InfoJugador [playerid][jClave] = 0;
				        DeletePVar (playerid, "pRegistro");
				        LimpiarPantalla (playerid, 9);
						Mensaje (playerid, -1, "La contraseña escrita no coincide con la contraseña registrada anteriormente. Registrese nuevamente");
						DialogLR (playerid, 1);
					}
					else
					{
					
					#if defined V3
						CrearCuenta (playerid, pName (playerid), InfoJugador [playerid][jClave], "nomail");
						SetPVarInt(playerid,"Logueado",1);
						LoadAccountData(playerid);
					#else
					    Dialog (playerid, dRegistro, DIALOG_STYLE_INPUT, HEADER_REGISTRO, DIALOG_EMAIL, "Continuar", "Salir");
					    SetPVarInt (playerid, "pRegistro", 2);
					#endif
					}
				}
				case 2:
				{
					if (!response) return Kick(playerid);

					if (IsValidEmail (inputtext))
					{
					    new
					        querystr [100];
					        
						A_Format (querystr, "SELECT Nombre FROM Usuarios WHERE email = '%s'", inputtext);
					    opmysql_pquery( querystr, "OnQueryFinish", "ii", playerid, query_type_email);
					    SetPVarString (playerid, "pEmail", inputtext);
					}
					else
					{
				        LimpiarPantalla (playerid, 9);
						Mensaje (playerid, -1, "Escriba su correo electrónico real, de lo contrario no podrá registrar su cuenta");
					    Dialog (playerid, dRegistro, DIALOG_STYLE_INPUT, HEADER_REGISTRO, DIALOG_EMAIL, "Continuar", "Salir");
					}
				}
				case 3:
				{
					if (!response)
					{
					    DeletePVar (playerid, "pEmail");
					    SetPVarInt (playerid, "pRegistro", 2);
	        			LimpiarPantalla (playerid, 9);
						Mensaje (playerid, -1, "Vuelva a escribir su correo electrónico.");
					    Dialog (playerid, dRegistro, DIALOG_STYLE_INPUT, HEADER_REGISTRO, DIALOG_EMAIL, "Continuar", "Salir");
						return 1;
					}

					new
					    email [34],
						str [500];
					    
					GetPVarString (playerid, "pEmail", email, sizeof (email));
					SendMailToActivateAccount (playerid, email);
					A_Format (str, DIALOG_EMAIL3, email);
					Dialog (playerid, dRegistro, DIALOG_STYLE_INPUT, HEADER_REGISTRO, str, "Aceptar", "Salir");
					SetPVarInt (playerid, "pRegistro", 4);
				}
				case 4:
				{
				    if (!response) return Kick (playerid);

				    new
				        code [10],
						email [34];

					GetPVarString (playerid, "pCode", code, sizeof (code));
					GetPVarString (playerid, "pEmail", email, sizeof (email));
					printf ("code: (%s) | inputtext: (%s)", code, inputtext);
					if (!isnull (code) && !isnull (inputtext) && !strcmp (code, inputtext, true) && strlen (inputtext) == 7)
     				{
					    CrearCuenta (playerid, pName (playerid), InfoJugador [playerid][jClave], email);
						SetPVarInt(playerid,"Logueado",1);
						LoadAccountData(playerid);
					}
					else
					{
	        			LimpiarPantalla (playerid, 9);
						Mensaje (playerid, -1, "El código escrito no coincide con el código enviado a su correo.");

						new
							str [500];

						GetPVarString (playerid, "pEmail", email, sizeof (email));
						A_Format (str, DIALOG_EMAIL3, email);
						Dialog (playerid, dRegistro, DIALOG_STYLE_INPUT, HEADER_REGISTRO, str, "Aceptar", "Salir");
					}
				}
				case 5:
				{
    				TextDrawShowForPlayer (playerid, Vendado);
					TogglePlayerSpectating(playerid, false);
				}
			}
		}
		case dIngreso:
		{
			if(response)
			{
				if(udb_hash(inputtext) == InfoJugador[playerid][jClave])
				{
					SetPVarInt(playerid,"Logueado",1);
					LoadAccountData(playerid);
				}
				else
				{
				    if(GetPVarInt(playerid,"ErraContraseña") >= 2)
					{
						return Kick(playerid);
					}
					SetPVarInt(playerid,"ErraContraseña", GetPVarInt(playerid,"ErraContraseña")+1 );
					new
					    string[210];

					A_Format(string, ""#CBLANCO"La contraseña introducida, no coincide con la contraseña de "#CINFO"%s"#CBLANCO".\nSi erras tres veces la contraseña, serás expulsado automáticamente.\n\n\t\t\tIntento: "#CAMARILLO"[%d/3]", pName(playerid), GetPVarInt(playerid,"ErraContraseña"));
        			Dialog(playerid, dIngreso, DIALOG_STYLE_INPUT, ""#CROJO"¡Contraseña incorrecta!", string, "Aceptar", "Salir");
				}
				return 1;
			}
			else
				return Kick(playerid);
		}
		case dDatos:
		{
		    if(!response)
			{
				Registrar(playerid);
			}
		    else if(response)
		    {
				LimpiarPantalla(playerid,10);
				//GameTextForPlayer(playerid, "~w~Ahora pasamos al ~g~~h~tutorial", 3000, 3);
				//SetTimerEx("MostrarTutorial", 3000, false, "i", playerid);
				OnPlayerFinishTut(playerid);
			}
		}
		case dSabeReglas:
		{
		    if(!response)
		    {
		    	SetPVarInt(playerid,"ParteTest",1);
				Dialog(playerid,dTest,DIALOG_STYLE_LIST,""#CAMARILLO"¿Qué es ROLEAR? "#CINFO"(1/5)",""#CINFO"1) "#CBLANCO"Rolear, es utilizar la información OOC en el juego\n"#CINFO"2) "#CBLANCO"Rolear, es actuar lo máximo posible como en la vida real\n"#CINFO"3) "#CBLANCO"Rolear, es hacerte responsable al prestar la cuenta.\n","Aceptar","Tutorial");
			}
			else
			{
				SetPVarInt(playerid,"ParteConceptos",1);
				ConceptosDeRol(playerid);
			}
		}
		case dTest:
		{
			switch(GetPVarInt(playerid,"ParteTest"))
			{
				case 1:
				{
	        		if(listitem != 1)
        			{
						Mensaje(playerid, -1, "Erraste la pregunta, vuelves a ver el tutorial.");
						DeletePVar(playerid,"ParteTest");
       					SetPVarInt(playerid,"ParteConceptos",1);
						ConceptosDeRol(playerid);
					}
	        		else
	        		{
	    	    		Dialog(playerid,dTest,DIALOG_STYLE_LIST,""#CAMARILLO"¿Qué es MG? "#CINFO"(2/5)",""#CINFO"1) {ffffff}MG es MetaGaming, es utilizar información OOC para beneficiarte IC\n"#CINFO"2) {FFFFFF}MG es MetaGaming, utilizar información IC en OOC.\n"#CINFO"3) {FFFFFF}MG es MetaGaming, utilizar un programa externo para beneficio IC","Aceptar","Tutorial");
						SetPVarInt(playerid,"ParteTest",2);
					}
					return 1;
				}
				case 2:
				{
	        		if(listitem != 0)
        			{
						Mensaje(playerid, -1, "Erraste la pregunta, vuelves a ver el tutorial.");
						DeletePVar(playerid,"ParteTest");
      					SetPVarInt(playerid,"ParteConceptos",1);
						ConceptosDeRol(playerid);
					}
	        		else
	        		{
	    	    		Dialog(playerid,dTest,DIALOG_STYLE_LIST,""#CAMARILLO"¿Qué es IC? "#CINFO"(3/5)",""#CINFO"1) {FFFFFF}IC es aquella información del rol de tu personaje\n"#CINFO"2) {FFFFFF}IC es aquella información obtenida por un medio externo al juego\n"#CINFO"3) {FFFFFF}IC es InCar, información de tu vehículo","Aceptar","Tutorial");
						SetPVarInt(playerid,"ParteTest",3);
					}
					return 1;
				}
				case 3:
				{
	        		if(listitem != 0)
        			{
						Mensaje(playerid, -1, "Erraste la pregunta, vuelves a ver el tutorial.");
						DeletePVar(playerid,"ParteTest");
      					SetPVarInt(playerid,"ParteConceptos",1);
						ConceptosDeRol(playerid);
					}
	        		else
	        		{
	    	    		Dialog(playerid,dTest,DIALOG_STYLE_LIST,""#CAMARILLO"¿Cuál es el PG? "#CINFO"(4/5)",""#CINFO"1) {FFFFFF}Matar con tu pandilla a un policia desarmado en un guetto\n"#CINFO"2) {FFFFFF}Saltar desde un avión porque te secuestro la mafia\n"#CINFO"3) {FFFFFF}Somos 4 pandilleros, y un policia nos apunta con su arma. -Nos resignamos-","Aceptar","Tutorial");
						SetPVarInt(playerid,"ParteTest",4);
					}
					return 1;
				}
				case 4:
				{
	        		if(listitem != 1)
        			{
						Mensaje(playerid, -1, "Erraste la pregunta, vuelves a ver el tutorial.");
						DeletePVar(playerid,"ParteTest");
      					SetPVarInt(playerid,"ParteConceptos",1);
						ConceptosDeRol(playerid);
					}
	        		else
	        		{
	    	    		Dialog(playerid,dTest,DIALOG_STYLE_LIST,""#CAMARILLO"Un tipo te mata con su mafia. Lo encuentras solo en la comisaria. "#CINFO"(5/5)",""#CINFO"1) {FFFFFF}Lo ignoro, perdí la memoria y no recuerdo\n"#CINFO"2) {FFFFFF}Algo así no se olvida, voy y le doy su merecido\n"#CINFO"3) {FFFFFF}Estoy en la comisaria, lo denuncio por matarme","Aceptar","Tutorial");
						SetPVarInt(playerid,"ParteTest",5);
					}
					return 1;
				}
				case 5:
				{
	        		if(listitem != 0)
        			{
						Mensaje(playerid, -1, "Erraste la pregunta, vuelves a ver el tutorial.");
						SetPVarInt(playerid,"ParteTest",0);
      					SetPVarInt(playerid,"ParteTutorial",0);
      					SetPVarInt(playerid,"ParteConceptos",1);
						ConceptosDeRol(playerid);
					}
	        		else
	        		{
						new
						    skin = (InfoJugador[playerid][jSexo] == 1) ? 60 : 12;

	        		    SetSpawnInfo(playerid, 0, skin, -1902.3170, 16.8255, 1061.1436, 180.0, 0, 0, 0, 0, 0, 0);

						ToggleSkillLevel(playerid);

						//Ropa
						InfoJugador[playerid][jRopa][0] = skin;
						InfoJugador[playerid][jCurrentSkin] = 0;

	        		    TogglePlayerSpectating(playerid, false);

						SetPVarInt(playerid,"CargoCuenta",1);

						//Datos generales
						SetPlayerCustomInterior (playerid, INT_Aeropuerto, -1902.3170, 16.8255, 1061.1436, 180.0);
						InfoJugador[playerid][jRegistrado] = true;

						//Datos
						SetPlayerHealth(playerid,50);
						SetPlayerArmour(playerid,0);
						GivePlayerMoney(playerid,5600);

						//Bienvenida
						Mensaje(playerid,1,"================================================================");
						Mensaje(playerid,-1,"• "#CAZULRARO"¡Comienza a rolear! "#CBLANCO"Puedes rentar un "CINFO"vehículo "#CBLANCO"en frente.");
						Mensaje(playerid,-1,"• Ademas, hay un mapa que te será de mucha utilidad para saber donde ir.");
						Mensaje(playerid,-1,"• Puedes usar /recibirstats para recibir tus stats correspondientes.");
						Mensaje(playerid,-1,"• Para entrar o salir de los lugares, dirigete a la puerta del mismo y presiona la letra "#CINFO"[Y]");
						Mensaje(playerid,1,"================================================================");
						Mensaje(playerid,-1,"• El comando "#CINFO"/informacion "#CBLANCO"te mostrará todo lo que es el servidor: Sistemas, Necesidades, y mucho más. ¡Utilizalo ahora mismo!");

						//Otros
						SetTimerEx("CheckHackCamera", 6000, false, "ii", playerid, 1);
						SetCameraBehindPlayer(playerid);
						SetPlayerColor(playerid, 0xFFFFFF00);
						SetPlayerVirtualWorld(playerid, 0);
						CaminarPelear(playerid);

						//Tutorial
						DeletePVar(playerid,"ParteConceptos");
						DeletePVar(playerid,"ParteTest");

						//Nivel
						InfoJugador[playerid][jNivel] = 1;
						SetPlayerScore(playerid,1);

						LoginTime[playerid] = gettime() + 5;

						//Necesidades
						InfoJugador[playerid][jOrina] = 34.0;
						InfoJugador[playerid][jCansancio] = 90.0;
						InfoJugador[playerid][jHambre] = 75.0;

						InfoJugador[playerid][jNecesidades] = 1;

						MostrarNecesidadesEx(playerid);

						ActualizarCuenta(playerid);
						printf("- %s pasó el test, su registro se completó", NombreJugador(playerid) );
					}
					return 1;
				}
			}
		}
    	case dVehRenta:
    	{
			if(!response) return RemovePlayerFromVehicle(playerid);
			if(response)
			{
		    	if(GetPVarInt(playerid,"RentoVehID"))
		    	{
		        	Error(playerid,"¡Ya has rentado un vehículo!");
		        	RemovePlayerFromVehicle(playerid);
				}
				else
				{
					if(GetPlayerMoney(playerid) < PRECIO_VEHRENTA)
					{
				    	MensajeF(playerid,C_NEGATIVO,"¡No tienes suficiente dinero! Te faltan $%d",PRECIO_VEHRENTA-GetPlayerMoney(playerid));
						RemovePlayerFromVehicle(playerid);
				    	return 1;
					}
					Mensaje(playerid,-1,"Rentaste un "#CAZULCLARO"vehículo "#CBLANCO"por "#CVERDE"$"#PRECIO_VEHRENTA". "#CBLANCO"Al cabo de 15 minutos sin uso, el vehículo se desrentará automáticamente");
					SetPVarInt(playerid, "RentoVehID", GetPlayerVehicleID(playerid));
					VehRentado[GetPlayerVehicleID(playerid)] = 1;
					QuitarDinero(playerid,PRECIO_VEHRENTA);
				}
			}
			return 1;
		}
		case dAscensorLSPD:
		{
	    	if(!response) return 0;
			if(listitem == 0)
			{
			    AutoRol (playerid, "utiliza el ascensor para descender al estacionamiento.");
		    	SetPlayerPos(playerid,1524.4832,-1677.9523,6.2188);
		    	SetPlayerInterior(playerid,0);
		    	SetPlayerVirtualWorld(playerid,0);
			}
			else if(listitem == 1)
			{
			    AutoRol (playerid, "utiliza el ascensor para subir a la terraza.");
		    	SetPlayerPos(playerid,1565.0422,-1685.4037,28.3956);
		    	SetPlayerInterior(playerid,0);
		    	SetPlayerVirtualWorld(playerid,0);
			}
		}
		case dRoperoLSPD:
		{
	    	if(!response) return 0;
	  		switch(listitem)
  			{
				case 0:   ElegirRopa(playerid, 71);
				case 1:   ElegirRopa(playerid,280);
				case 2:   ElegirRopa(playerid,265);
				case 3:   ElegirRopa(playerid,266);
				case 4:   ElegirRopa(playerid,267);
				case 5:   ElegirRopa(playerid,281);
				case 6:   ElegirRopa(playerid,282);
				case 7:   ElegirRopa(playerid,288);
				case 8:   ElegirRopa(playerid,283);
				case 9:   ElegirRopa(playerid,191);
				case 10:  ElegirRopa(playerid,284);
				case 11:  ElegirRopa(playerid,285);
				case 12:  ElegirRopa(playerid,208);
				case 13:  ElegirRopa(playerid,165);
				case 14:  ElegirRopa(playerid,166);
			}
		}
		#define liststr<%0> if(strfind(inputtext, %0) != -1)
	 	#define AddToBuffer(%1) strcat(dialog, %1); strcat(dialog, "\n")

		case dAyuda:
		{
			if(!response) return 1;

			static
		 		dialog[2000];

			dialog = "";

			switch(listitem)
			{
			    case 0:
			    {
			        if (isnull (dialog))
			        {
					    AddToBuffer("\t"#CROJO"General: "#CBLANCO"");
					    AddToBuffer("/acciones /id /b /g /s /ame /me /do /intentar /duda /dni /mostrarlicencia /estado /record /acento /dar");
					    AddToBuffer(" /consumir /dejar [trabajo/familia/faccion] /llaves /pagar /qfa (Ver ultimo que te mato)");
					    AddToBuffer(" ");
					    AddToBuffer("\t"#CROJO"Cuenta: "#CBLANCO"");
					    AddToBuffer("/cuenta /cambiarpass /cambiarpregunta");
					    AddToBuffer(" ");
					    AddToBuffer("\t"#CROJO"Armas: "#CBLANCO"");
					    AddToBuffer("/recargar /tirar /recoger /colgar");
					    AddToBuffer(" ");
					    AddToBuffer("\t"#CROJO"Objetos: "#CBLANCO"");
					    AddToBuffer("/ropa /accesorios /anuncio /usar medicamentos");
					    AddToBuffer(" ");
					    AddToBuffer("\t"#CROJO"Administración: "#CBLANCO"");
					    AddToBuffer("/admins /duda /re(portar) /mp /solicitar");
					    AddToBuffer(" ");
					    AddToBuffer("\t"#CROJO"Necesidades: "#CBLANCO"");
					    AddToBuffer("/orinar /dormir /despertarse /comer /necesidades");
					    AddToBuffer(" ");
					}
				}
				// -===============-
			    case 1:
			        return Dialog(playerid, dAyuda2, DIALOG_STYLE_LIST, ""#CBLANCO"Información del servidor - "#CINFO"TRABAJOS", ""#CINFO"• "#CBLANCO"Basurero\n"#CINFO"• "#CBLANCO"Repartidor de diarios\n"#CINFO"• "#CBLANCO"Camionero\n"#CINFO"• "#CBLANCO"Cosechador\n"#CINFO"• "#CBLANCO"Ladrón\n"#CINFO"• "#CBLANCO"Repartidor de pizza\n"#CINFO"• "#CBLANCO"Minero\n"#CINFO"• "#CBLANCO"Taxista","Aceptar", "Volver");

			    case 2:
			        return Dialog(playerid, dAyuda2, DIALOG_STYLE_LIST, ""#CBLANCO"Información del servidor - "#CINFO"FACCIONES", ""#CINFO"• "#CBLANCO"Facciones en general\n"#CINFO"• "#CBLANCO"Policía\n"#CINFO"• "#CBLANCO"Ejército\n"#CINFO"• "#CBLANCO"Hospital\n"#CINFO"• "#CBLANCO"Televisión\n"#CINFO"• "#CBLANCO"Mecánicos\n"#CINFO"• "#CBLANCO"Gobierno\n"#CINFO"• "#CBLANCO"Sicarios\n"#CINFO"• "#CBLANCO"Camioneros", "Aceptar", "Cancelar");
				// -===============-

				case 3:
				{
				    dialog = "{ffffff}";
				    AddToBuffer("• Existen propiedades para comprar, como negocios, vehículos y casas. A continuación te explicaremos como");
				    AddToBuffer("funciona nuestro exclusivo sistema de "#CROJO"VEHÍCULOS."#CBLANCO"");
				    AddToBuffer(" ");
				    AddToBuffer("General:");
				    AddToBuffer(" ");
				    AddToBuffer("\t• Para encenderle o apagarle el motor, presione Click.");
				    AddToBuffer("\t• Para encenderle o apagarle las luces, presione la tecla N.");
				    AddToBuffer("\t• Para abrir el inventario dentro del vehículo, use /inv");
				    AddToBuffer("\t• Para colocarse el cinturón de seguridad, use "#CINFO"/cinturon."#CBLANCO"");
				    AddToBuffer(" ");
				    AddToBuffer("Si tienes vehículo propio:");
				    AddToBuffer(" ");
				    AddToBuffer("\t• Podrás tener hasta "#E_VEH_MAX" vehículos.");
				    AddToBuffer("\t• Puedes dar tu auto a tu pandilla/mafia, y retirarlo cuando lo desees. "#CINFO"/veh a familia y /veh sacar familia"#CBLANCO"");
				    AddToBuffer("\t• Para abrir el vehículo, o cerrarlo debes usar "#CINFO"/abrir vehículo - /cerrar vehiculo"#CBLANCO"");
				    AddToBuffer("\t• Para usar el maletero, utiliza "#CINFO"/abrir maletero"#CBLANCO", y luego "#CINFO"/maletero"#CBLANCO"");
				    AddToBuffer("\t• Podrás abrir el capó: "#CINFO"/abrir capo."#CBLANCO"");
				    AddToBuffer("\t• Podrás vender tu vehículo al gobierno cuando lo desees. "#CINFO"/vender vehiculo"#CBLANCO"");
				    AddToBuffer("\t• Para localizar un vehículo, necesitarás un Buscador de vehículos o llamar a la policía. Compra uno en la tienda de tecnologia.");
				    AddToBuffer("\t• Para setearle un punto de respawn al coche (Aunque rara vez respawneen), utiliza /estacionar.");
				    AddToBuffer("\t• Para ver los datos de tus vehículos, utiliza "#CINFO"/cuenta -> Vehículos.");
				}
				case 4:
				{
				    dialog = "{ffffff}";
				    AddToBuffer("• Existen propiedades para comprar, como negocios, vehículos y casas. A continuación te explicaremos como");
				    AddToBuffer("funciona nuestro exclusivo sistema de "#CROJO"CASAS."#CBLANCO"");
				    AddToBuffer(" ");
				    AddToBuffer("\t• Para comprar una casa, deberás dirigirte a la entrada y colocar "#CINFO"/comprar casa."#CBLANCO"");
				    AddToBuffer("\t• Podrás vender tu casa al gobierno cuando lo desees, solo debes utilizar "#CINFO"/vender casa."#CBLANCO"");
				    AddToBuffer("\t• Podrás guardar objetos en tu casa, utilizando "#CINFO"/armario"#CBLANCO" dentro de la misma.");
				    AddToBuffer("\t  Podrás tener hasta "#MAX_LUGARES_CASA" objetos guardados en tu casa.");
				    AddToBuffer("\t• Cuando compras tu casa, esta NO tiene MUEBLES. Todos los muebles, deberás comprarselos por tu cuenta (Puedes comprarlos en un hipermercado)");
				    AddToBuffer("\t• Podrás acomodar los muebles a tu gusto, solo debes "#CINFO"/casa - Muebles - Acomodar muebles."#CBLANCO"");
				    AddToBuffer("\t• Cuando compres un mueble, deberás agregarlo a tu casa, utilizando"#CINFO" /casa - Muebles - Agregar un nuevo mueble."#CBLANCO"");
				    AddToBuffer("\t• Podrás tener hasta "#MAX_MUEBLES_CASA" muebles.");
				    AddToBuffer("\t• Para abrir o cerrar la puerta de tu casa, utiliza "#CINFO"/abrir casa, o /cerrar casa."#CBLANCO"");
				    AddToBuffer("\t• Podrás guardar dinero en tu casa, tienes una caja fuerte en la que podrás almacenar todo el dinero que se te ocurra. ");
				    AddToBuffer("\t  También podrás ponerle contraseña a la caja fuerte. "#CINFO"/casa - Caja fuerte."#CBLANCO"");
				    AddToBuffer("\t• Podrás cambiarle el nombre a tu casa, "#CINFO"/casa - Cambiar nombre."#CBLANCO"");
				    AddToBuffer("\t• Podras tener hasta "#MAX_CASAS_JUGADOR" casas.");
				    AddToBuffer(" ");
				    AddToBuffer("Si tu casa tiene garage:");
				    AddToBuffer(" ");
				    AddToBuffer("\t• Podrás almacenar la cantidad de vehículos que quieras, depende de saber acomodarlos para hacer lugar.");
				    AddToBuffer("\t• Para cerrar o abrir el garage al público, usa "#CINFO"/abrir garage, o /cerrar garage."#CBLANCO"");
				    AddToBuffer("\t• El garage aumentará el precio de la casa.");
				    AddToBuffer("\t• Podrás entrar cuando quieras al garage, no importa que estes con vehículo, o sin el.");
				    AddToBuffer("\t• Podrás amueblar el garage a tu gusto, con el comando "#CINFO"/casa - Muebles");
				}
				case 5:
				{
				    dialog = "{ffffff}";
				    AddToBuffer("• Los "#CROJO"NEGOCIOS"#CBLANCO" son las propiedades más caras del servidor, ya que te aportan grandes ganancias diarias.");
				    AddToBuffer(" ");
				    AddToBuffer("\t  • Para comprar el negocio, solo debes acercarte a la puerta y usar "#CINFO"/comprar negocio."#CBLANCO"");
				    AddToBuffer("\t  • Podrás cambiarle el nombre a tu negocio, "#CINFO"/negocio - Nombre."#CBLANCO"");
				    AddToBuffer("\t  • Cada vez que alguien compre en tu negocio, el dinero del cliente será almacenado en la caja fuerte. ");
				    AddToBuffer("\t  • En caso de poseer precio de entrada, el dinero también va a la caja fuerte ");
				    AddToBuffer("\t  • Tienes un control total de la caja fuerte: depositar, retirar, cambiar contraseña.");
				    AddToBuffer("\t  • Podrás cambiarle el precio de entrada en caso de ser un bar, boliche, o lugar pago.");
				    AddToBuffer("\t  • Podrás tener hasta "#MAX_NEGOCIOS_JUGADOR" negocios.");
				    AddToBuffer("");
 				    AddToBuffer("\t  "#CROJO"• Productos: "#CBLANCO"Cada negocio tiene un determinado stock de cada producto, y este se va agotando");
				    AddToBuffer("\t  a medida que los usuarios van comprando. Desde los negocios se envían pedidos a los camioneros");
				    AddToBuffer("\t  para reponer los productos vendidos, y así recaudar ganancia. Este sistema, permite realizar competencia");
				    AddToBuffer("\t  comercial entre los negocios, en caso de ser propietario se debe tener un control del negocio y de los");
				    AddToBuffer("\t  movimientos comerciales del mismo para así poder llevar adelante el negocio.");
				    AddToBuffer("");
				    AddToBuffer("\t• Los negocios vendedores de productos tienen una PC, la cual se usa con el comando "#CINFO"/pc"#CBLANCO"");
				    AddToBuffer("\t  Desde la PC, podrán checkear las ganancias del día, y comprar productos a las fábricas");
				    AddToBuffer("\t  para reponerlos. Cabe destacar que la cantidad de productos es independiente del producto, es");
				    AddToBuffer("\t  decir que se pueden realizar pedidos personalizados en cantidad (Pedir 50 celulares, 42 GPS, y");
				    AddToBuffer("\t  10 buscadores de vehículos, por ejemplo).");
				}
				case 6:
				{
				    dialog = "{ffffff}";
				    AddToBuffer("• Las familias o bandas, son creadas dentro del juego, y son totalmente dinámicas.");
				    AddToBuffer("Las familias y pandillas que vienen por defecto son: Grove, Ballas, Sureños, Yakuza, Italiana.");
				    AddToBuffer(" ");
				    AddToBuffer("Un jugador podrá crear su propia familia, si cumple una serie de requisitos y quiere hacer una, puede hacerlo pidiendole");
				    AddToBuffer("a un administrador que lo haga. Es totalmente instantaneo, ya que el lider de la familia debe hacer todo:");
				    AddToBuffer(" ");
				    AddToBuffer("\t• Puede comprar los autos para la familia: "#CINFO"/veh a familia "#CBLANCO"(Ver información sobre vehículos).");
				    AddToBuffer("\t• Debe comprar una casa, y decirle al administrador que la coloque para la familia.");
				    AddToBuffer("\t• Puede ajustar los nombres de los rangos: "#CINFO"/nombrerango."#CBLANCO"");
				    AddToBuffer("\t• Puede invitar personas a su familia.");
				    AddToBuffer("\t• Puede expulsar o cambiarles el rango a los miembros de su familia.");
				    AddToBuffer("\t• Puede optar entre familia pasiva, mafia, o pandilla.");
				    AddToBuffer("\t• Puede salir de una familia, usando "#CINFO"/dejar familia"#CBLANCO".");
				    AddToBuffer(" ");
				    AddToBuffer("Requisitos para crear una familia:");
				    AddToBuffer(" ");
				    AddToBuffer("\t• Ser al menos cinco integrantes con mínimo nivel tres cada uno.");
				    AddToBuffer("\t• El creador debe tener al menos nivel 6, para asegurar su actividad.");
				    AddToBuffer("\t• Deben disponer de una casa obligatoriamente.");
				    AddToBuffer("\t• Necesita tener 10 estrellas de rol.");
				    AddToBuffer("\t• Necesita tener al menos un vehículo");
				    AddToBuffer("\t• Deberá presentar la Historia de la familia, como surgio, y el rol que esta seguirá en el foro: "#CINFO""#FORO_SERVER".");
				    AddToBuffer(" ");
				    AddToBuffer("{FF0000}NOTA: {FFFFFF}Puedes ver todas las "#CINFO"/familias"#CBLANCO" cuando quieras.");
				}
				case 7:
				{
				    dialog = "{ffffff}";
				    AddToBuffer("- Este sistema, fué implementado para dar más realismo al servidor, se trata de un sistema de NECESIDADES.");
				    AddToBuffer(" ");
				    AddToBuffer("Las necesidades son tres:");
				    AddToBuffer("\t• "#CROJO"Hambre: "#CBLANCO"Cuando esté llena tu jugador no tiene hambre. Esta barra baja constantemente, y para satisfacer");
				    AddToBuffer("\t  esta necesidad deberás ir a un restaurant, y utilizar el comando "#CINFO"/comprar comida."#CBLANCO"");
				    AddToBuffer("\t  Cuando tu jugador pasa mucho tiempo sin comer, comienza a perder el conocimiento, y el estado comienza");
				    AddToBuffer("\t  a bajar más rápido de lo común. Además, se presentan frecuentes mareos y pierdes salud.");
				    AddToBuffer(" ");
				    AddToBuffer("\t• "#CROJO"Cansancio: "#CBLANCO"Cuando esta barra esté completa tu jugador estará sin sueño. Esta barra baja cada bastante tiempo, y para satisfacer");
				    AddToBuffer("\t  esta necesidad deberas descansar, con el comando "#CINFO"/dormir."#CBLANCO"");
				    AddToBuffer("\t• Si tu jugador está mucho tiempo sin dormir, y la barra está muy baja, tu jugador no podrá correr, no podrá saltar,");
				    AddToBuffer("\t  no podrá golpear ni disparar, y verás la pantalla oscura. Caerá desmayado al suelo, y posiblemente perderás salúd.");
				    AddToBuffer(" ");
				    AddToBuffer("\t• "#CROJO"Orina: "#CBLANCO"Cuando esta barra esté vacia tu jugador no tiene ganas de orinar.");
				    AddToBuffer("\t  Esta barra sube constantemente, y para vaciarla deberás usar "#CINFO"/orinar."#CBLANCO"");
				    AddToBuffer("\t  Las ganas de orinar de tu jugador se manifiestan con molestos e incómodos pantallazos amarillos.");
				    AddToBuffer(" ");
				    AddToBuffer("{FF0000}NOTA: {FFFFFF}Para configurar cómo mostrar tus necesidades, usa "#CINFO"/necesidades.");
				}
				case 8:
				{
				    dialog = "{ff0000}";
				    AddToBuffer("\tPandillas:"#CBLANCO"");
				    AddToBuffer("No se necesita mucha experiencia para saber que es una pandilla, y en nuestro servidor las pandillas son");
				    AddToBuffer("muy realistas. El rol principal de las pandillas es luchar para imponer respeto, esto lo hacen mediante las");
				    AddToBuffer(""#CVERDE"zonas de bandas."#CBLANCO" Las pandillas luchan para conseguir más zonas con su gente. ");
				    AddToBuffer(" ");
				    AddToBuffer("\t"#CROJO"Zonas de bandas:"#CBLANCO"");
				    AddToBuffer("• Las zonas de color "#CGRIS"GRIS"#CBLANCO", son las zonas que es posible conquistar, y no tienen una pandilla dominante.");
				    AddToBuffer("  Estas, pueden ser conquistadas usando el comando "#CINFO"/conquistar"#CBLANCO", deben haber al menos "#MIN_ATACANTES_GZ" miembros");
				    AddToBuffer("  de la pandilla que ejecutaría la conquista.");
				    AddToBuffer("• Las zonas de otros colores, son zonas que pertenecen ya a una pandilla. Aun así, se le puede robar a una pandilla su zona,");
				    AddToBuffer("  esto se hace asesinando a un pandillero de esa zona, para provocar una "#CROJO"Guerra de bandas.");
				    AddToBuffer("");
				    AddToBuffer("\tNOTA: "#CBLANCO"Este sistema es similar al del "#CVERDE"GTA:SA "#CBLANCO"en su modo SinglePlayer.");
				}
				case 9: // Inventario
				{
					AddToBuffer("El "#CNARANJA"inventario "#CBLANCO" es un espacio diseñado para almacenar diversos objetos del jugador");
					AddToBuffer("en un sólo lugar, facilitando la interacción entre los objetos y el usuario.");
					AddToBuffer("");
					AddToBuffer("\t"#CROJO"• "#CBLANCO"Mejor interacción: Podrás darle cualquier objeto a otro jugador, usando "#CINFO"/dar [ID/Nombre] "#CBLANCO"(Se requiere tener el objeto");
					AddToBuffer("\ten la mano).");
					AddToBuffer("");
					AddToBuffer("\t"#CROJO"• "#CBLANCO"Para abrir el inventario, existen diversos métodos. Un método abreviado del teclado es presionar");
					AddToBuffer("\tla letra "#CVERDE"N"#CBLANCO", otro es con el comando "#CINFO"/inv - /inventario.");
					AddToBuffer("");
					AddToBuffer("\t"#CROJO"• "#CBLANCO"Para guardar un objeto en el inventario, usa "#CINFO"/guardar [Opcional: Lugar del inventario]."#CBLANCO" Si el lugar no es");
					AddToBuffer("\tespecificado, el sistema encontrará automáticamente un lugar disponible.");
					AddToBuffer("");
					AddToBuffer("\t"#CROJO"• "#CBLANCO"Objetos grandes como armas pesadas, cajas, etcétera, no podrán ser almacenados en el inventario. Éstos objetos,");
					AddToBuffer("\tpuedes dejarlos en el piso con /tirar (Para recogerlos, /recoger).");
					AddToBuffer("");
					AddToBuffer("\t"#CROJO"• "#CBLANCO"Para sacar un objeto del inventario, puedes abrirlo y seleccionar el objeto deseado, o usar "#CINFO"/sacar [Número de lugar]");
					AddToBuffer("");
					AddToBuffer("\t"#CROJO"• "#CBLANCO"Puedes borrar un objeto, debes usar "#CINFO"/borrar "#CBLANCO"con el objeto en la mano.");
					AddToBuffer("");
					AddToBuffer("\t"#CROJO"• "#CBLANCO"Los lugares disponibles del inventario, van aumentando a medida que subes de nivel.");
					AddToBuffer("");
					AddToBuffer("\t"#CROJO"• "#CBLANCO"Podrás colgarte algunos objetos como armas pesadas, o walkie-talkie usando "#CINFO"/colgar");
					AddToBuffer("");
					AddToBuffer("\t"#CROJO"• "#CBLANCO"Para utilizar los objetos, deberás tenerlos en la mano. Para ver cómo usarlos, "#CINFO"/objeto");
				}
				case 10: // Armas
				{
					AddToBuffer(""#CINFO"• Armas: "#CBLANCO"Este sistema, consiste en que cuando el arma se queda sin balas, no desaparecerá de tu mano.");
					AddToBuffer("Puedes tener un arma sin balas siempre, guardarla en el maletero, casa, inventario, etc. Esto varia");
					AddToBuffer("según el tamaño (Ej: No puedes guardar un ak-47 en tu inventario, pero puedes colgarla en tu espalda con "#CINFO"/colgar");
					AddToBuffer("o guardarla en un maletero).\n");
					AddToBuffer(""#CINFO"• Cargadores: "#CBLANCO"Son necesarios para recargar con balas un arma. La cantidad de cargadores en el inventario, está");
					AddToBuffer("señalizado con un número sobre el dibujo del arma (Arriba del indicador de balas).");
					AddToBuffer("Para recargar un arma, deberás tener los cargadores en el inventario, y con el arma en la mano, usar "#CINFO"/rec - /recargar.");
				}
			}
			new
			    tittle[90];

			format(tittle, 90, ""#CBLANCO"Información del servidor "#CINFO"%s", inputtext);
			return Dialog(playerid, dAyuda3, DIALOG_STYLE_MSGBOX, tittle, dialog, "Volver", "Cerrar");
		}
		case dAyuda2:
		{
		    if(!response) return cmd_informacion(playerid, "");

			new
		 		dialog[2000];

			liststr<"Basurero">
			{
			    dialog = "{ffffff}";
			    AddToBuffer("• Los basureros, se encargan de juntar los desechos, y la basura que los ciudadanos tiran a la calle.");
			    AddToBuffer("Su trabajo, consiste en subirse a un camión, y al llegar a un pote de basura, bajarse del vehículo y utilizar "#CINFO"/limpiar."#CBLANCO"");
			    AddToBuffer("Luego, volver al camión, y conducir hasta el siguiente destino.");
			    AddToBuffer("- Cuando llenen el camión (Cuando la barra de progreso esté llena) deberán ir al basural, y descargar la basura "#CINFO"(/descargar basura)"#CBLANCO".");
			    AddToBuffer("Luego de realizar dicha acción, deberán devolver el camión al basurero.");
			    AddToBuffer(" ");
			    AddToBuffer("• Este trabajo, dispone de dos niveles, la diferencia es que en el segundo nivel tu paga es mayor.");
			    AddToBuffer(" ");
			    AddToBuffer("{FF0000}NOTA: {FFFFFF}La paga varía según el estado del vehículo al devolverlo. ");
			}
			liststr<"diarios">
			{
			    dialog = "{ffffff}";
				AddToBuffer("• Consiste en subirse a una bicicleta, y comenzar a repartir los diarios por las diferentes zonas de Los Santos "#CINFO"(/repartir diarios)"#CBLANCO".");
				AddToBuffer("Al llenar la barra de progreso, deberás devolver la bicicleta, y recibir la paga.");
				AddToBuffer(" ");
				AddToBuffer("\t• Este trabajo, dispone de dos niveles, la diferencia es que en el segundo nivel tu paga es mayor.");
			}
			liststr<"Mine">
			{
			    dialog = "{ffffff}";
				AddToBuffer("• Consiste en picar minerales mediante una pala, con el comando "#CINFO"(/picar mineral)"#CBLANCO".");
				AddToBuffer("Luego deberás presionar Click reiteradas veces para lograr obtener el mineral deseado.");
				AddToBuffer(" ");
				AddToBuffer("\t• Este trabajo, se encuentra en la mina de Huntle Charry (Las Venturas).");
			}
			liststr<"Taxi">
			{
			    dialog = "{ffffff}";
				AddToBuffer("• Consiste en transportar pasajeros por medio de un taxi. El trabajo es muy simple,");
				AddToBuffer("beberás subirte al taxi, y esperar llamados, los cuales se señalizan con puntos amarillos.");
				AddToBuffer("en el mapa. Luego, cuando un pasajero se suba al taxi, el taximetro comenzará a contar solo.");
			}
			liststr<"Camionero">
			{
			    dialog = "{ffffff}";
			    AddToBuffer("• Este trabajo se basa en transportar cargas a diferentes lugares. Te subes al camión de carga, luego debes seleccionar QUE quieres transportar.");
			    AddToBuffer("Una vez hecha la entrega deberás regresar para devolver el camión, y recibir la paga.");
			    AddToBuffer(" ");
			    AddToBuffer("• Este trabajo, dispone de dos niveles:");
			    AddToBuffer("\t- {FF0000}Nivel 1: {FFFFFF}Su sede está en Los Santos, los camiones son relativamente pequeños. Deberás buscar la carga, y transportarla a los locales.");
			    AddToBuffer("\t- {FF0000}Nivel 2: {FFFFFF}Su sede está en la ruta Los Santos-San Fierro. Los camiones son grandes. Deberás subirte a uno, luego se te marcan tres fábricas en ");
			    AddToBuffer("\t  el mapa: Comida, Construcción y Granos. Deberas dirigirte a alguna de esas tres, luego enganchar el acoplado en el camión, y transportarlo ");
				AddToBuffer("\t  para Los Santos, al sindicato de camioneros. Luego de transportar la carga, deberás devolver el camión.");
			    AddToBuffer(" ");
			    AddToBuffer("{FF0000}NOTA: {FFFFFF}La paga varía según el estado del vehículo al devolverlo.");
			}
			liststr<"Cosechador">
			{
			    dialog = "{ffffff}";
			    AddToBuffer("• Se trata de tomar una máquina, y comenzar a cosechar sobre el terreno indicado. Luego de llenar la barra de progreso, se deberá");
			    AddToBuffer("entregar la cosechadora.");
			    AddToBuffer(" ");
			    AddToBuffer("• Este trabajo, dispone de dos niveles:");
			    AddToBuffer("\t- {FF0000}Nivel 1: {FFFFFF}Podrás cosechar "#CINFO"SOJA"#CBLANCO", en el terreno primario.");
			    AddToBuffer("\t- {FF0000}Nivel 2: {FFFFFF}Podrás cosechar "#CINFO"TRIGO"#CBLANCO", en otro terreno. Paga más que SOJA.");
			}
			liststr<"Ladrón">
			{
			    dialog = "{ffffff}";
			    AddToBuffer("• Este trabajo, es el único trabajo ilegal momentaneamente. Consiste simplemente, en el rol de un ladrón.");
			    AddToBuffer(" ");
			    AddToBuffer("• Este trabajo, dispone de dos niveles:");
			    AddToBuffer("\t- {FF0000}Nivel 1: {FFFFFF}Podrás robar únicamente NEGOCIOS. En el momento que el vendedor/a te da el dinero, tendrás que entregar las pruebas del robo");
			    AddToBuffer("\t a un lugar aleatorio. Cada vez que un negocio es asaltado, los policias son comunicados de la situación, e inmediatamente se dirigen hacia la zona. Este");
			    AddToBuffer("\t  trabajo requiere ser miembro de una pandilla, o poseer dos estrellas de Rol. Comando: "#CINFO"/robar "#CBLANCO"dentro del negocio, y cerca del vendedor.");
			    AddToBuffer("\t- {FF0000}Nivel 2: {FFFFFF}Ahora podrás robar casas, utilizando diversas herramientas. Deberás decifrar la contraseña de la puerta por medio de");
			    AddToBuffer("\t herramientas. Una vez dentro, podrás robar los muebles de la casa, y luego entregar lo robado para cambiarlo por dinero");
			    AddToBuffer(" ");
			    AddToBuffer("{FF0000}NOTA: {FFFFFF}No se permite que miembros de organizaciones legales se dediquen a robar, es una falta grave de rol.");
			}
			liststr<"pizza">
			{
			    dialog = "{ffffff}";
				AddToBuffer("• En este trabajo deberás llevar la pizza a diferentes casas antes de un determinado tiempo.");
				AddToBuffer("La paga varía según la distancia que tengas que viajar. ");
				AddToBuffer(" ");
				AddToBuffer("Para comenzar a trabajar, debes utilizar "#CINFO"/repartir pizza"#CBLANCO", buscar la pizza, y luego subirte");
				AddToBuffer("a las motos para entregarla. Luego de eso, deberás devolver la moto para recibir el dinero.");
			}
			liststr<"Facciones">
			{
			    dialog = "{ffffff}";
			    AddToBuffer("• Una facción, es una organización que cumple determinado rol, siempre tienen un rol fundamental en el servidor.");
			    AddToBuffer("En las facciones existen Lideres, y miembros. Dentro de los miembros, existe otra sub-categoría: Los "#CINFO"RANGOS"#CBLANCO".");
			    AddToBuffer(" ");
			    AddToBuffer("• Toda facción tiene:");
			    AddToBuffer("\t• Un CHAT para hablar con los integrantes de la misma: "#CINFO"/fac o /f."#CBLANCO"");
			    AddToBuffer("\t• Un comando para bloquear este chat: "#CINFO"/canal faccion."#CBLANCO"");
			    AddToBuffer("\t• Comandos especiales, para cada una diferentes. Los comandos brindan la posibilidad de realizar correctamente el rol, por ejemplo");
			    AddToBuffer("\t  los Policías tienen comandos para encarcelar a una persona, pero los Reporteros no.");
			    AddToBuffer("\t• Un comando para retirarte voluntariamente de la misma: "#CINFO"/dejar faccion."#CBLANCO"");
			    AddToBuffer("\t• Un comando que permite ver todos los miembros conectados, con su respectivo rango: "#CINFO"/miembros faccion."#CBLANCO"");
				AddToBuffer(" ");
				AddToBuffer(""#CROJO"Lideres: "#CBLANCO"Son los encargados de llevar la facción adelante, son los integrantes más importantes de la facción.");
				AddToBuffer("\t• Pueden invitar un usuario a la facción "#CINFO"(/invitar)"#CBLANCO"");
				AddToBuffer("\t• Pueden Expulsar un usuario de su facción "#CINFO"(/expulsar)"#CBLANCO"");
				AddToBuffer("\t• Pueden cambiarle el rango a un integrante de su facción "#CINFO"(/rango)"#CBLANCO"");
				AddToBuffer("\t• Pueden darle la llave de un vehículo de facción a algún miembro "#CINFO"(/asignarllave)"#CBLANCO"");
				AddToBuffer("\t• Pueden retirarle la llave de un vehículo a un miembro "#CINFO"(/quitarllave)");
			}
			liststr<"Poli">
			{
			    dialog = "{ffffff}";
			    AddToBuffer("• Su rol consiste en mantener el orden jurídico en la ciudad, asi como brindar protección a los ciudadanos.");
			    AddToBuffer("A pesar de que no tengan privilegios, tienen la posibilidad de manipular otros usuarios, ya que tienen acceso ");
			    AddToBuffer("a comandos que permiten realizar acciones por parte de otros, y no de su mismo ID.");
			    AddToBuffer(" ");
			    if(!EsLSPD(playerid))
			    {
			        AddToBuffer(""#CROJO"Solo los miembros o lideres pueden ver los comandos.");
				}
				else
				{
				    AddToBuffer("\t"#CROJO"COMANDOS:"#CBLANCO"");
				    AddToBuffer("/r (Radio) - /dep (Hablar con el departamento de justicia) - /crearcono - /borrarcono (Borra cono más cercano) - /borrarconos");
				    AddToBuffer("/acoche (Subir un jugador a un coche) - /scoche (Sacar del coche) - /esposar - /desesposar - /revisar");
				    AddToBuffer("/verbolsillo (Ver inv de un jugador) - /cerrarayuntamiento - /abrirayuntamiento - /crearpincharuedas - /borrarpincharuedas");
					AddToBuffer("/m (Hablar con un megáfono) - /arrestar (Encarcelar)");
					AddToBuffer("/(des)autorizararmas (Solo líderes, dar licencia de armas) - /refuerzos - /noref - /activartazer (Activa el tazer de tu 9mm) - /desactivartazer ");
					AddToBuffer("/sacarcables (Quitar cables de electricidad) - /revisarcinturon - /placa (Mostrar a alguien tu placa) - /forzarpuerta -/remolcar (Con grúa).");
				}
			}
			liststr<"Ejército">
			{
			    dialog = "{ffffff}";
			    AddToBuffer("• Su rol: Mantener la ciudad protegida de atentados terroristas, o ataques de ciudades externas. Su actividad");
			    AddToBuffer("diaria es entrenar con su lider.");
			    AddToBuffer(" ");
			    if(!EsMilitar(playerid))
			    {
			        AddToBuffer(""#CROJO"Solo los miembros o lideres pueden ver los comandos.");
				}
				else
				{
				    AddToBuffer("\t"#CROJO"COMANDOS:"#CBLANCO"");
				    AddToBuffer("/r (Radio) - /dep (Hablar con el departamento de justicia) - /crearcono - /borrarconos - /borrarcono - /cerrarayuntamiento - /abrirayuntamiento");
				    AddToBuffer("/acoche (Subir un jugador a un coche) - /scoche (Sacar del coche) /verbolsillo - /crearpincharuedas - /borrarpincharuedas - /cerrar peaje - /abrir peaje");
				    AddToBuffer("/m (Hablar con un megáfono) /(des)autorizararmas (Solo líderes, dar licencia de armas) - /tumbarpuerta - /revisar");
				}
			}
			liststr<"Hospital">
			{
			    dialog = "{ffffff}";
			    AddToBuffer("• Su rol: Acudir a los accidentes, mantener el nivel de salúd estable en la ciudad. Ellos pueden curar personas, curar enfermedades.");
			    AddToBuffer(" ");
			    if(!EsMedico(playerid))
			    {
			        AddToBuffer(""#CROJO"Solo los miembros o lideres pueden ver los comandos.");
				}
				else
				{
				    AddToBuffer("\t"#CROJO"COMANDOS:"#CBLANCO"");
				    AddToBuffer("/r (Radio) - /dep (Hablar con el departamento de justicia) /acamilla (Subir alguien a la camilla)");
				    AddToBuffer("/aambulancia (Subir alguien a ambulancia) - /sambulancia - /curar - /usar camilla (Tomar una camilla) - /dejar camilla");
				    AddToBuffer("/salvar (Cubre la herida, el paciente deja de perder vida) /placa (Mostrar a alguien tu placa) - /m (Hablar con un megáfono) ");
				}
			}
			liststr<"Televisión">
			{
			    dialog = "{ffffff}";
			    AddToBuffer("• Un rol que consiste en mantener al día con las noticias de todo tipo a la gente. Poseen un estudio, que les brinda");
			    AddToBuffer("la posibilidad de iniciar un programa de televisión REAL (Cada uno puede verlo tal cual), así como una radio. ");
			    AddToBuffer("• Pueden poner música real, para aumentar el entretenimiento del programa.");
			    AddToBuffer(" ");
			    if(!EsReportero(playerid))
			    {
			        AddToBuffer(""#CROJO"Solo los miembros o lideres pueden ver los comandos.");
				}
				else
				{
				    AddToBuffer("\t"#CROJO"COMANDOS:"#CBLANCO"");
				    AddToBuffer("/iniciar transmision (iniciar programa de radio) - /iniciar programa (Iniciar programa de TV) - /mic (Hablar por micrófono)");
				    AddToBuffer("/finalizar transmision - /finalizar programa - /entrevistar - /ponermusica ");
				}
			}
			liststr<"Mecánicos">
			{
			    dialog = "{ffffff}";
			    AddToBuffer("• Brindan a la ciudad el simple servicio de mecánicos, ellos podrán reparar tu coche, podran tunearlo.");
			    AddToBuffer("Tienen autorización para remolcar un vehículo mal estacionado, por ejemplo.");
			    AddToBuffer(" ");
			    if(!EsMecanico(playerid))
			    {
			        AddToBuffer(""#CROJO"Solo los miembros o lideres pueden ver los comandos.");
				}
				else
				{
			    	AddToBuffer("\t"#CROJO"COMANDOS:"#CBLANCO"");
			    	AddToBuffer("/tunear (Tunear un auto o reparar carroceria en el taller) - /cambiar precios - /remolcar - /repararmotor - /quitar piezas (Remover tunning por partes)");
				}
			}
			
			liststr<"Gobierno">
			{
			    dialog = "{ffffff}";
			    AddToBuffer("• Rol totalmente necesario, el gobierno es quien maneja cantidades enormes de dinero. Cuando compras una propiedad, el dinero va");
			    AddToBuffer("destinado a la caja fuerte de la presidencia. Asi como ganan mucho, diariamente se va una cantidad enorme de dinero: Deben pagarle a ");
			    AddToBuffer("las demás facciones todos los sábados, mantener el orden judicial, pagar los subsidios a la gente, y muchas otras cosas.");
			    AddToBuffer(" ");
			    if(!EsDelGobierno(playerid))
			    {
			        AddToBuffer(""#CROJO"Solo los miembros o lideres pueden ver los comandos.");
				}
				else
				{
				    AddToBuffer("\t"#CROJO"COMANDOS:"#CBLANCO"");
				    AddToBuffer("/r (Radio) - /dep - /pagarfaccion - /gob - /iniciar transmision - /finalizar transmision (Iniciar o finalizar la cadena nacional)");
				}
			}
			liststr<"Sicarios">
			{
			    dialog = "{ffffff}";
			    AddToBuffer("• Su rol no es realmente necesario. Ellos son sicarios, cobran por matar. Son utilizados por las mafias para realizar extorsiones.");
			    AddToBuffer("Disponen de una computadora, que les permite rastrear cualquier persona requiriendo mínimos datos de la misma. Son una de las pocas facciones");
			    AddToBuffer("que puede matar por matar (DM), ya que su rol en la mayoria de las ocasiones lo justifica.");
			    AddToBuffer("Cualquier persona puede solicitar su servicio, solo debes encontrar su sede (Buscarla roleando) y utilizar "#CINFO"/contrato [Víctima] [Dinero].");
			    AddToBuffer(" ");
			    if(ID_Faccion(playerid) != IDHITMAN)
			    {
			        AddToBuffer(""#CROJO"Solo los miembros o lideres pueden ver los comandos.");
				}
				else
				{
				    AddToBuffer("\t"#CROJO"COMANDOS:"#CBLANCO"");
				    AddToBuffer("/contratos (Ver las víctimas y el dinero) - /encontrar (Encontrar una persona, deberás estar en frente de la computadora) - /borrarcontrato");
				}
			}
			liststr<"Camioneros">
			{
			    dialog = "{ffffff}";
			    AddToBuffer("• Los camioneros son los encargados de reponerle a los negocios los productos, para que así los negocios puedan");
			    AddToBuffer("vender al público y funcionar correctamente.");
			    AddToBuffer(" ");
			    if(ID_Faccion(playerid) != IDCAMIONEROS)
			    {
			        AddToBuffer(""#CROJO"Solo los miembros o lideres pueden ver los comandos.");
				}
				else
				{
				    AddToBuffer("\t"#CROJO"COMANDOS:"#CBLANCO"");
				    AddToBuffer("/pedidos (Ver o aceptar pedidos) - /terminar entrega (Cancelar una entrega en caso de haberla aceptado).");
				    AddToBuffer("Los pedidos que salen en la lista con color rojo, son los que algún camionero ya los aceptó y los está procesando.");
				}
			}

			new
			    tittle[70];

			format(tittle, 70, ""#CBLANCO"Información del servidor "#CINFO"%s", inputtext);
			return Dialog(playerid, dAyuda3, DIALOG_STYLE_MSGBOX, tittle, dialog, "Volver", "Cerrar");
		}

		case dAyuda3:
		{
	    	return (response) ? cmd_informacion(playerid,"") : _:false;
		}

		case dAdmTeleport:
		{
		    if(!response) return 0;
		    switch(listitem)
		    {
		        case 0: SetPlayerPos(playerid,POS_AYUNTA);
		        case 1: SetPlayerPos(playerid,POS_LSPD);
		        case 2: SetPlayerPos(playerid,POS_GROVE);
		        case 3: SetPlayerPos(playerid,POS_FUERZAAEREA);
		        case 4: SetPlayerPos(playerid,POS_ALCALDE);
		        case 5: SetPlayerPos(playerid,POS_GROTTI);
		        case 6: SetPlayerPos(playerid,POS_YAKUZA);
		        case 7: SetPlayerPos(playerid,POS_LSTV);
		        case 8: SetPlayerPos(playerid,POS_MADDDOG);
		        case 9: SetPlayerPos(playerid,POS_AEROPUERTO);
		        case 10: SetPlayerPos(playerid,POS_SURENOS);
		        case 11: SetPlayerPos(playerid,POS_CLINICA);
		        case 12: SetPlayerPos(playerid,POS_AUTOSUSADOS);
		        case 13: SetPlayerPos(playerid,POS_HOSPITAL);
		        case 14: SetPlayerPos(playerid,POS_AMMUNATION);
		        case 15: SetPlayerPos(playerid,POS_LICENCIAS);
		        case 16: SetPlayerPos(playerid,POS_ALHAMBRA);
		        case 17: return Error(playerid, "Error: Ubicación eliminada.");
		        case 18: SetPlayerPos(playerid,POS_CAMIONEROS);
		        case 19: SetPlayerPos(playerid,POS_REPARTIDORPIZZA);
		        case 20: SetPlayerPos(playerid,POS_REPARTIDORDIARIO);
		        case 21: SetPlayerPos(playerid,POS_BASUREROS);
		        case 22: SetPlayerPos(playerid,POS_COSECHADORES);
			}
			SetPlayerInterior(playerid,0);
			SetPlayerVirtualWorld(playerid,0);
			ShowPlayerDialog(playerid,dAdmTeleport,DIALOG_STYLE_LIST,""#CINFO"Menu de teleport's",MENU_ADMTELEPORT,"Ir","Cancelar");
		}
		case dRoperoLSEM:
		{
			if(!response) return 0;
			AutoRol(playerid,"se cambia de traje");
			switch(listitem)
			{
			    case 0: ElegirRopa(playerid,287);//militar normal
			    case 1: ElegirRopa(playerid,179);//entrenamiento
			    case 2: ElegirRopa(playerid,191);//Chica
			    case 3: ElegirRopa(playerid,283);//De ceremonia (LVPD)
			    case 4: ElegirRopa(playerid,286);//FBI
			    case 5: ElegirRopa(playerid,208);//Agente 1
			    case 6: ElegirRopa(playerid,165);//Agente 2
			    case 7: ElegirRopa(playerid,166);//Agente 3
			    case 8: ElegirRopa(playerid,285);//Agente SWAT
			    case 9: ElegirRopa(playerid,163);//Seguridad 1
			    case 10: ElegirRopa(playerid,164);//Seguridad
			    case 11: ElegirRopa(playerid,61);//piloto
			}
		}
		case dCajaFuerte:
		{
			if(!response) return 1;
		    switch(listitem)
		    {
		        case 0:
		        {
		            if(GetPVarInt(playerid,"CajaFuerte") == CF_FACCION)
		            {
						Loop(i,MAX_FACCIONES+1,1)
		                {
		                    if(InfoJugador[playerid][jMiembro] == i || InfoJugador[playerid][jLider] == i)
		                    {
					            new str[55];
					            format(str,sizeof(str),""#CBLANCO"En la caja fuerte hay $%i",InfoFaccion[i][fDinero]);
					            ShowPlayerDialog(playerid,dError,DIALOG_STYLE_MSGBOX,""#CINFO"Caja fuerte",str,"Cerrar","");
					            AutoRol(playerid,"mira el balance de la caja fuerte");
							}
						}
					}
		            else if(GetPVarInt(playerid,"CajaFuerte") == CF_NEGOCIO)
		            {
    					new str[55];
		            	format(str,sizeof(str),""#CBLANCO"En la caja fuerte hay $%i",InfoNegocio[ID_Negocio(playerid)][nDinero]);
		            	ShowPlayerDialog(playerid,dError,DIALOG_STYLE_MSGBOX,""#CINFO"Caja fuerte",str,"Cerrar","");
			            AutoRol(playerid,"mira el balance de la caja fuerte");
						return 1;
					}
		            else if(GetPVarInt(playerid,"CajaFuerte") == CF_CASA)
		            {
		            	new str[55];
     					format(str,sizeof(str),""#CBLANCO"En la caja fuerte hay $%i",InfoCasa[ID_Casa(playerid)][cDinero]);
		            	ShowPlayerDialog(playerid,dError,DIALOG_STYLE_MSGBOX,""#CINFO"Caja fuerte",str,"Cerrar","");
			            AutoRol(playerid,"mira el balance de la caja fuerte");
						return 1;
					}
				}
				case 1:ShowPlayerDialog(playerid,dDepositar,DIALOG_STYLE_INPUT,""#CINFO"Caja fuerte - "#CINFO"Depositar",""#CBLANCO"Escribe cuanto dinero quieres depositar","Aceptar","Cancelar");
				case 2:ShowPlayerDialog(playerid,dSacar,DIALOG_STYLE_INPUT,""#CINFO"Caja fuerte - "#CINFO"Retirar",""#CBLANCO"Debes introducir la contraseña para retirar dinero:","Aceptar","Cancelar");
				case 3:ShowPlayerDialog(playerid,dCambiarPassCF,DIALOG_STYLE_INPUT,""#CINFO"Caja fuerte - "#CINFO"Cambiar contraseña",""#CBLANCO"Escribe la nueva contraseña de la caja fuerte:","Aceptar","Cancelar");
			}
		}
		case dDepositar:
		{
		    if(!response) return 1;
		    if(!IsNumeric(inputtext)) return ShowPlayerDialog(playerid,dDepositar,DIALOG_STYLE_INPUT,""#CINFO"Caja fuerte",""#CBLANCO"Escribe un valor numérico","Aceptar","Cancelar");
			if(strval(inputtext) < 1) return ShowPlayerDialog(playerid,dDepositar,DIALOG_STYLE_INPUT,""#CINFO"Caja fuerte",""#CBLANCO"Escribe un número positivo","Aceptar","Cancelar");
			if(strval(inputtext) > GetPlayerMoney(playerid)) return Error(playerid,"¡No tienes esa cantidad de dinero!");
			QuitarDinero(playerid,strval(inputtext));
			AutoRol(playerid,"deposita dinero en la caja fuerte");
		    if(GetPVarInt(playerid,"CajaFuerte") == CF_FACCION)
		    {
				Loop(i,MAX_FACCIONES+1,1)
    			{
    				if(InfoJugador[playerid][jMiembro] == i || InfoJugador[playerid][jLider] == i)
    				{
			   			new str[100];
						InfoFaccion[i][fDinero] += strval(inputtext);
			      		format(str,sizeof(str),""#CBLANCO"Depositaste $"#CINFO"%d\n"#CBLANCO"Ahora, en la caja fuerte hay $%i",strval(inputtext),InfoFaccion[i][fDinero]);
				        ShowPlayerDialog(playerid,dError,DIALOG_STYLE_MSGBOX,""#CINFO"Caja fuerte",str,"Cerrar","");
						ActualizarFacciones();
						A_Format(str, "[%s] %s depositó $%d. Hay: [$%d]", GetFactionName (i), pName(playerid), strval(inputtext), InfoFaccion[i][fDinero]);
						Log("cf", str);
					}
				}
			}
   			else if(GetPVarInt(playerid,"CajaFuerte") == CF_NEGOCIO)
   			{
   			    new i = ID_Negocio(playerid);
   				new str[100];
				InfoNegocio[i][nDinero] += strval(inputtext);
    			format(str,sizeof(str),""#CBLANCO"Depositaste $"#CINFO"%d\n"#CBLANCO"Ahora, en la caja fuerte hay $%i",strval(inputtext),InfoNegocio[i][nDinero]);
       			ShowPlayerDialog(playerid,dError,DIALOG_STYLE_MSGBOX,""#CINFO"Caja fuerte",str,"Cerrar","");
				ActualizarNegocio(i);
				return 1;
			}
   			else if(GetPVarInt(playerid,"CajaFuerte") == CF_CASA)
   			{
   			    new i = ID_Casa(playerid);
   				new str[100];
				InfoCasa[i][cDinero] += strval(inputtext);
    			format(str,sizeof(str),""#CBLANCO"Depositaste $"#CINFO"%d\n"#CBLANCO"Ahora, en la caja fuerte hay $%i",strval(inputtext),InfoCasa[i][cDinero]);
       			ShowPlayerDialog(playerid,dError,DIALOG_STYLE_MSGBOX,""#CINFO"Caja fuerte",str,"Cerrar","");
   				ActualizarCasa(i);
			  	return 1;
			}
		}
		case dSacar:
		{
  			if(!response) return 1;
		    if(GetPVarInt(playerid,"PuedeSacar") == 1)
			{
			    if(!strval(inputtext)) return ShowPlayerDialog(playerid,dSacar,DIALOG_STYLE_INPUT,""#CINFO"Caja fuerte",""#CBLANCO"Escribe un valor numérico","Aceptar","Cancelar");
				if(strval(inputtext) < 1) return ShowPlayerDialog(playerid,dSacar,DIALOG_STYLE_INPUT,""#CINFO"Caja fuerte",""#CBLANCO"Escribe un número positivo","Aceptar","Cancelar");
			    if(GetPVarInt(playerid,"CajaFuerte") == CF_FACCION)
			    {
					Loop(i,MAX_FACCIONES+1,1)
	    			{
	    				if(InfoJugador[playerid][jMiembro] == i || InfoJugador[playerid][jLider] == i)
	    				{
							if(strval(inputtext) > InfoFaccion[i][fDinero]) return ShowPlayerDialog(playerid,dSacar,DIALOG_STYLE_INPUT,""#CINFO"Caja fuerte",""#CBLANCO"¡En la caja fuerte no hay esa cantidad!","Aceptar","Cancelar");
							InfoFaccion[i][fDinero] -= strval(inputtext);
							GivePlayerMoney(playerid,strval(inputtext));
				   			new str[80];
				      		format(str,sizeof(str),""#CBLANCO"Retiraste $"#CINFO"%d\n"#CBLANCO"Ahora, en la caja fuerte hay $%i",strval(inputtext),InfoFaccion[i][fDinero]);
					        ShowPlayerDialog(playerid,dError,DIALOG_STYLE_MSGBOX,""#CINFO"Caja fuerte",str,"Cerrar","");
							ActualizarFacciones();
							AutoRol(playerid,"retira dinero en la caja fuerte");
							SetPVarInt(playerid,"PuedeSacar",0);
							A_Format(str, "[%s] %s retiró $%d. Hay: [$%d]", GetFactionName(i), pName(playerid), strval(inputtext), InfoFaccion[i][fDinero]);
							Log("cf", str);
						}
					}
				}
			    else if(GetPVarInt(playerid,"CajaFuerte") == CF_NEGOCIO)
			    {
   			    	new i = ID_Negocio(playerid);
					if(strval(inputtext) > InfoNegocio[i][nDinero]) return ShowPlayerDialog(playerid,dSacar,DIALOG_STYLE_INPUT,""#CINFO"Caja fuerte",""#CBLANCO"¡En la caja fuerte no hay esa cantidad!","Aceptar","Cancelar");
					InfoNegocio[i][nDinero] -= strval(inputtext);
					GivePlayerMoney(playerid,strval(inputtext));
	 				new str[80];
	  				format(str,sizeof(str),""#CBLANCO"Retiraste $"#CINFO"%d\n"#CBLANCO"Ahora, en la caja fuerte hay $%i",strval(inputtext),InfoNegocio[i][nDinero]);
	    			ShowPlayerDialog(playerid,dError,DIALOG_STYLE_MSGBOX,""#CINFO"Caja fuerte",str,"Cerrar","");
					ActualizarNegocio(i);
					AutoRol(playerid,"retira dinero en la caja fuerte");
					SetPVarInt(playerid,"PuedeSacar",0);
				}
			    else if(GetPVarInt(playerid,"CajaFuerte") == CF_CASA)
			    {
   			    	new i = ID_Casa(playerid);
					if(strval(inputtext) > InfoCasa[i][cDinero]) return ShowPlayerDialog(playerid,dSacar,DIALOG_STYLE_INPUT,""#CINFO"Caja fuerte",""#CBLANCO"¡En la caja fuerte no hay esa cantidad!","Aceptar","Cancelar");
					InfoCasa[i][cDinero] -= strval(inputtext);
					GivePlayerMoney(playerid,strval(inputtext));
	 				new str[80];
	  				format(str,sizeof(str),""#CBLANCO"Retiraste $"#CINFO"%d\n"#CBLANCO"Ahora, en la caja fuerte hay $%i",strval(inputtext),InfoCasa[i][cDinero]);
	    			ShowPlayerDialog(playerid,dError,DIALOG_STYLE_MSGBOX,""#CINFO"Caja fuerte",str,"Cerrar","");
					AutoRol(playerid,"retira dinero en la caja fuerte");
					ActualizarCasa(i);
					SetPVarInt(playerid,"PuedeSacar",0);
				}
			}
		    else if(GetPVarInt(playerid,"PuedeSacar") == 0)
			{
			    if(!strlen(inputtext)) return ShowPlayerDialog(playerid,dSacar,DIALOG_STYLE_INPUT,""#CINFO"Caja fuerte",""#CBLANCO"Introduce alguna contraseña","Aceptar","Cancelar");
			    if(GetPVarInt(playerid,"CajaFuerte") == CF_FACCION)
			    {
					Loop(i,MAX_FACCIONES+1,1)
	    			{
	    				if(InfoJugador[playerid][jMiembro] == i || InfoJugador[playerid][jLider] == i)
	    				{
							if(!strcmp(inputtext,InfoFaccion[i][fContra],false) && strlen(inputtext))
							{
							    SetPVarInt(playerid,"PuedeSacar",1);
							    ShowPlayerDialog(playerid,dSacar,DIALOG_STYLE_INPUT,""#CINFO"Caja fuerte",""#CBLANCO"Escribe la cantidad de dinero a retirar","Retirar","Cancelar");
							}
							else return Error(playerid,"La contraseña es INCORRECTA");
						}
					}
				}
			    else if(GetPVarInt(playerid,"CajaFuerte") == CF_NEGOCIO)
			    {
   			    	new i = ID_Negocio(playerid);
					if(udb_hash(inputtext) == InfoNegocio[i][nContra])
					{
	    				SetPVarInt(playerid,"PuedeSacar",1);
					    ShowPlayerDialog(playerid,dSacar,DIALOG_STYLE_INPUT,""#CINFO"Caja fuerte",""#CBLANCO"Escribe la cantidad de dinero a retirar","Retirar","Cancelar");
					}
					else return Error(playerid,"La contraseña es INCORRECTA");
				}
			    else if(GetPVarInt(playerid,"CajaFuerte") == CF_CASA)
			    {
   			    	new i = ID_Casa(playerid);
					if(udb_hash(inputtext) == InfoCasa[i][cContra])
					{
	    				SetPVarInt(playerid,"PuedeSacar",1);
	    				ShowPlayerDialog(playerid,dSacar,DIALOG_STYLE_INPUT,""#CINFO"Caja fuerte",""#CBLANCO"Escribe la cantidad de dinero a retirar","Retirar","Cancelar");
					}
					else return Error(playerid,"La contraseña es INCORRECTA");
				}
			}
		}
		case dCambiarPassCF:
		{
		    if(!response) return 1;
		    if(!strlen(inputtext) || strlen(inputtext) > 20) return ShowPlayerDialog(playerid,dCambiarPassCF,DIALOG_STYLE_INPUT,""#CINFO"Caja fuerte - "#CINFO"Cambiar contraseña",""#CBLANCO"Escribe alguna contraseña (Menor de 21 caracteres)","Aceptar","Cancelar");
		    if(GetPVarInt(playerid,"CajaFuerte") == CF_FACCION)
		    {
				Loop(i,MAX_FACCIONES+1,1)
				{
					if(InfoJugador[playerid][jLider] == i)
					{
						alm(InfoFaccion[i][fContra],inputtext);
						new str[80 + 30];
						AutoRol(playerid,"cambia la contraseña de la caja fuerte");
						format(str,sizeof(str),""#CBLANCO"Cambiaste la contraseña correctamente.\n\tLa nueva contraseña es: "#CINFO"%s",inputtext);
						ShowPlayerDialog(playerid,dError,DIALOG_STYLE_MSGBOX,""#CINFO"Caja fuerte",str,"Cerrar","");
						ActualizarFacciones();
						A_Format(str, "[%s] %s cambió contraseña a: %s.", GetFactionName (i), pName(playerid), inputtext);
						Log("cf", str);
					}
				}
			}
		    else if(GetPVarInt(playerid,"CajaFuerte") == CF_NEGOCIO)
		    {
		    	new i = ID_Negocio(playerid);
				InfoNegocio[i][nContra] = udb_hash(inputtext);
				AutoRol(playerid,"cambia la contraseña de la caja fuerte");
				ShowPlayerDialog(playerid,dError,DIALOG_STYLE_MSGBOX,""#CINFO"Caja fuerte",""#CBLANCO"Contraseña fue cambiada","Cerrar","");
				ActualizarNegocio(i);
			}
		    else if(GetPVarInt(playerid,"CajaFuerte") == CF_CASA)
		    {
		    	new i = ID_Casa(playerid);
				InfoCasa[i][cContra] = udb_hash(inputtext);
				AutoRol(playerid,"cambia la contraseña de la caja fuerte");
				ShowPlayerDialog(playerid,dError,DIALOG_STYLE_MSGBOX,""#CINFO"Caja fuerte",""#CBLANCO"Contraseña fue cambiada","Cerrar","");
				ActualizarCasa(i);
			}
			return 1;
		}
		case dRoperoLSMD:
		{
  			if(!response) return 1;
		    switch(listitem)
		    {
			    case 0: ElegirRopa(playerid,274);
			    case 1: ElegirRopa(playerid,275);
			    case 2: ElegirRopa(playerid,276);
			    case 3: ElegirRopa(playerid,70);
			}
		}
		case dMenuNegocio:
		{
		    if(!response) return 1;
			switch(listitem)
			{
			    case 0:
				{
					Dialog(playerid,dCajaFuerte,DIALOG_STYLE_LIST,""#CINFO"Caja fuerte","Ver dinero\nDepositar\nSacar\nCambiar contraseña","Aceptar","Cancelar");
					SetPVarInt(playerid,"CajaFuerte",CF_NEGOCIO);
				}
			    case 1: Dialog(playerid,dNegNombre,DIALOG_STYLE_INPUT,""#CINFO"Negocio",""#CBLANCO"Escribe el nuevo nombre de tu negocio:","Aceptar","Salir");
			    case 2: Dialog(playerid,dNegEntrada,DIALOG_STYLE_INPUT,""#CINFO"Negocio",""#CBLANCO"Escribe el nuevo precio de entrada de tu negocio:","Aceptar","Salir");
			}
		}
		case dNegNombre:
		{
		    if(!response) return 1;
	    	new
				n = ID_Negocio(playerid);

		    if(!strlen(inputtext) || strlen(inputtext) >= MAX_CARACTERES_NAME ) return Dialog(playerid,dNegNombre,DIALOG_STYLE_INPUT,""#CINFO"Negocio",""#CBLANCO"Mo escribiste nada, o el nombre es demasiado largo.","Aceptar","Cancelar");
      		alm(InfoNegocio[n][nNombre],inputtext);
			MensajeF(playerid,-1,"El nombre fue cambiado a "#CPOSITIVO"%s",InfoNegocio[n][nNombre]);
			ActualizarNegocio(n);
			ActualizarNegLabel(n);
			printf("- %s cambió el nombre de su negocio (ID: %d) a: $%d", NombreJugador_(playerid), n, strval(inputtext));
		}
		case dNegEntrada:
		{
		    if(!response) return 1;
	    	new n = ID_Negocio(playerid);
	    	if(strval(inputtext) < 0 || strval(inputtext) > 2000) return Error(playerid,"No puedes ponerle ese precio. (max 2000)");
      		InfoNegocio[n][nPrecioEntrada] = strval(inputtext);
			MensajeF(playerid,-1,"El precio de entrada fue cambiado a "#CPOSITIVO"$%d",InfoNegocio[n][nPrecioEntrada]);
			ActualizarNegocio(n);
			ActualizarNegLabel(n);
			printf("- %s cambió el precio de entrada de su negocio (ID: %d) a: $%d", NombreJugador_(playerid), n, strval(inputtext));
		}
		case dMenuCasa:
		{
		    if(!response) return 1;
			switch(listitem)
			{
			    case 0:
				{
				    if(!EstaEnSuCasa(playerid) && !InfoJugador[playerid][jLiderFam])
				    {
						Dialog(playerid,dCajaFuerte,DIALOG_STYLE_LIST,""#CINFO"Caja fuerte","Ver dinero\nDepositar\nSacar","Aceptar","Cancelar");
						SetPVarInt(playerid,"CajaFuerte",CF_CASA);
					}
					else
					{
						Dialog(playerid,dCajaFuerte,DIALOG_STYLE_LIST,""#CINFO"Caja fuerte","Ver dinero\nDepositar\nSacar\nCambiar contraseña","Aceptar","Cancelar");
						SetPVarInt(playerid,"CajaFuerte",CF_CASA);
					}
				}
			    case 1: Dialog(playerid,dCasaNombre,DIALOG_STYLE_INPUT,""#CINFO"Casa",""#CBLANCO"Escribe el nuevo nombre de tu casa:","Aceptar","Salir");
			    case 2:
				{
				    new n = ID_Casa(playerid);
				    if(n == INVALID_HOUSE_ID) return Error(playerid, "¡Necesitas estar en tu casa!");
					cmd_armario(playerid, "");
				}
				case 3:
				{
				    Dialog(playerid,dCasaMuebles, DIALOG_STYLE_LIST, "- Editar muebles", "- Acomodar muebles\n- Agregar un nuevo mueble\n- Borrar mueble\n- Editar mueble en especifico\n- Ocultar un mueble", "Aceptar", "Cancelar");
				}
				case 4:
				{
				    new n = ID_Casa(playerid);
				    if(n == INVALID_HOUSE_ID) return Error(playerid, "¡Necesitas estar en tu casa!");
					SetPVarInt(playerid,"H_TYPE_HACK", H_TYPE_DOOR_CONFIG);
					SetPVarInt(playerid,"H_HOUSE_ID", n);
					ShowKeyPad(playerid);
					Mensaje(playerid, -1, "Escribe la contraseña para la puerta de tu casa, utiliza las flechas de dirección o W-A-S-D");
				}
			}
		}
		case dCasaPrecio:
		{
		    if(!response) return 1;
  			if(!strval(inputtext)) return ShowPlayerDialog(playerid,dCasaPrecio,DIALOG_STYLE_INPUT,""#CINFO"Casa",""#CBLANCO"Escribe un valor numérico","Aceptar","Cancelar");
			if(strval(inputtext) < 1) return ShowPlayerDialog(playerid,dCasaPrecio,DIALOG_STYLE_INPUT,""#CINFO"Casa",""#CBLANCO"Escribe un número positivo","Aceptar","Cancelar");
  			new n = ID_Casa(playerid);
     		InfoCasa[n][cPrecio] = strval(inputtext);
			MensajeF(playerid,-1,"El precio fue ajustado a "#CPOSITIVO"$%d",InfoCasa[n][cPrecio]);
			ActualizarCasa(n);
		}
		case dCasaNombre:
		{
		    if(!response) return 1;
		    if(!EstaEnSuCasa(playerid)) return Error(playerid,"¡No le puedes cambiar el nombre, solo su dueño puede!");
		    if(!strlen(inputtext) || strlen(inputtext) >= MAX_CARACTERES_NAME ) return Dialog(playerid,dCasaNombre,DIALOG_STYLE_INPUT,""#CINFO"Casa",""#CBLANCO"¡Nombre muy corto, o muy largo!","Aceptar","Cancelar");
   	    	new n = ID_Casa(playerid);
	        alm(InfoCasa[n][cNombre],inputtext);
			MensajeF(playerid,-1,"El nombre fue cambiado a "#CPOSITIVO"%s",InfoCasa[n][cNombre]);
			ActualizarCasa(n);
			ActualizarCasaLabel(n);
		}
		case dCasaMuebles:
		{
		    if(!response) return 1;
			new
				Str[35],
				Str2[sizeof(Str) * MAX_MUEBLES_CASA],
				i = ID_Casa(playerid),
				OBJ_INDEX;

			if(i == INVALID_HOUSE_ID)
			    return 1;

		    if(listitem == 0)
		    {
		        SetPVarInt(playerid,"EditandoMuebles", 1);
				SelectObject(playerid);
			}
			else if(listitem == 1)
			{
				Loop(m, MAX_MUEBLES_CASA, 0)
				{
				    if(InfoCasa[i][cObjModel][m])
				    {
						BuscarModeIndexInt(InfoCasa[i][cObjModel][m], OBJ_INDEX);
				    	A_Format(Str, "%s %s\n", (!InfoCasa[i][cObjPosX][m]) ? (""#CROJO"") : (""#CVERDE""), ObjetosInterior[OBJ_INDEX][2]);
					}
					else Str = ""#CBLANCO"-- VACIO --\n";
					strcat(Str2, Str);
				}
				Dialog(playerid, dColocarMueble, DIALOG_STYLE_LIST, "Agregar mueble", Str2, "Aceptar", "Cancelar");
			}
			else if(listitem == 2)
			{
				Loop(m, MAX_MUEBLES_CASA, 0)
				{
				    if(InfoCasa[i][cObjModel][m])
				    {
						BuscarModeIndexInt(InfoCasa[i][cObjModel][m], OBJ_INDEX);
				    	A_Format(Str, "%s %s\n", (!InfoCasa[i][cObjPosX][m]) ? (""#CROJO"") : (""#CVERDE""), ObjetosInterior[OBJ_INDEX][2]);
					}
					else Str = ""#CBLANCO"-- VACIO --\n";
					strcat(Str2, Str);
				}
				Dialog(playerid, dBorrarMueble, DIALOG_STYLE_LIST, "Borrar un mueble", Str2, "Aceptar", "Cancelar");
			}
			else if(listitem == 3)
			{
				Loop(m, MAX_MUEBLES_CASA, 0)
				{
				    if(InfoCasa[i][cObjModel][m])
				    {
						BuscarModeIndexInt(InfoCasa[i][cObjModel][m], OBJ_INDEX);
				    	A_Format(Str, "%s %s\n", (!InfoCasa[i][cObjPosX][m]) ? (""#CROJO"") : (""#CVERDE""), ObjetosInterior[OBJ_INDEX][2]);
					}
					else Str = ""#CBLANCO"-- VACIO --\n";
					strcat(Str2, Str);
				}
				Dialog(playerid, dEditarMuebleE, DIALOG_STYLE_LIST, "- Editar mueble en espefico", Str2, "Aceptar", "Cancelar");
			}
			else if(listitem == 4)
			{
				Loop(m, MAX_MUEBLES_CASA, 0)
				{
				    if(InfoCasa[i][cObjModel][m])
				    {
						BuscarModeIndexInt(InfoCasa[i][cObjModel][m], OBJ_INDEX);
				    	A_Format(Str, "%s %s\n", (!InfoCasa[i][cObjPosX][m]) ? (""#CROJO"") : (""#CVERDE""), ObjetosInterior[OBJ_INDEX][2]);
					}
					else Str = ""#CBLANCO"-- VACIO --\n";
					strcat(Str2, Str);
				}
				Dialog(playerid, dOcultarMueble, DIALOG_STYLE_LIST, "- Ocultar un mueble", Str2, "Aceptar", "Cancelar");
			}
			return 1;
		}
		case dBorrarMueble:
		{
			if(response)
			{
			    SetPVarInt(playerid,"MUEBLE_BORRAR", listitem);
		    	Dialog(playerid, dBorrarMueble_0, DIALOG_STYLE_MSGBOX, "Confirmar eliminación", ""#CBLANCO"¿Estas seguro de que deseas "#CROJO"eliminar "#CBLANCO"este mueble?","Si", "No");
			}
			else DeletePVar(playerid,"MUEBLE_BORRAR");
		}
		case dBorrarMueble_0:
		{
		    if(!response) return DeletePVar(playerid,"MUEBLE_BORRAR");
		    new
				i = GetPVarInt(playerid,"MUEBLE_BORRAR"),
				h = ID_Casa(playerid);

			if(h == INVALID_HOUSE_ID)
			    return 1;

			DestruirMuebleCasa(h, i);

			InfoCasa[h][cObjModel][i] = 0;
			InfoCasa[h][cObjPosX][i] = 0.0;
			InfoCasa[h][cObjPosY][i] = 0.0;
			InfoCasa[h][cObjPosZ][i] = 0.0;
			InfoCasa[h][cObjRotX][i] = 0.0;
			InfoCasa[h][cObjRotY][i] = 0.0;
			InfoCasa[h][cObjRotZ][i] = 0.0;
			GameTextForPlayer(playerid, "~r~mueble eliminado", 3000, 3);
			DeletePVar(playerid,"MUEBLE_BORRAR");
			ActualizarCasa(ID_Casa(playerid), false, i, false);
			return 1;
		}

		case dEditarMuebleE:
		{
		    if(!response) return 1;
			if(!InfoCasa[ID_Casa(playerid)][cObjPosX][listitem]) return Error(playerid,"No puedes editar ese objeto");
			EditPlayerObject(playerid, OBJ_Mueble[playerid][listitem]);
			return 1;
		}

		case dColocarMueble:
		{
		    if(!response) return 1;
		    new
				i = ID_Casa(playerid);

			if(i == INVALID_HOUSE_ID)
			    return 1;

            if(!InfoCasa[i][cObjModel][listitem]) return Error(playerid, "¡No seleccionaste nada!");
            if(InfoCasa[i][cObjPosX][listitem] != 0.0) return Error(playerid, "¡Ese mueble ya está agregado!");

			GetPlayerPos(playerid,InfoCasa[i][cObjPosX][listitem], InfoCasa[i][cObjPosY][listitem], InfoCasa[i][cObjPosZ][listitem]);
			GetPosInFrontOfPlayer(playerid, InfoCasa[i][cObjPosX][listitem], InfoCasa[i][cObjPosY][listitem], 1.0);

			foreach(Player, p)
			{
			    if(CasaActual[p] == i)
			    {
			    	OBJ_Mueble[p][listitem] = CreatePlayerObject(p, InfoCasa[i][cObjModel][listitem],
																	InfoCasa[i][cObjPosX][listitem],
																	InfoCasa[i][cObjPosY][listitem],
																	InfoCasa[i][cObjPosZ][listitem],
																	0.0, 0.0, 0.0);
				}
			}
			SetPVarInt(playerid,"EditandoMuebles", 1);
			OnPlayerSelectObject(playerid, SELECT_OBJECT_PLAYER_OBJECT, OBJ_Mueble[playerid][listitem], InfoCasa[i][cObjModel][listitem], 0, 0, 0);
			ActualizarCasa(ID_Casa(playerid), false, i, false);
		}
		case dOcultarMueble:
		{
		    if(!response) return 1;
		    new
				i = ID_Casa(playerid);

			if(i == INVALID_HOUSE_ID)
			    return 1;

            if(!InfoCasa[i][cObjModel][listitem]) return Error(playerid, "¡No seleccionaste nada!");
            if(InfoCasa[i][cObjPosX][listitem] == 0.0) return Error(playerid, "¡Ese objeto ya está oculto!");

		    InfoCasa[i][cObjPosX][listitem] = 0.0;
		    InfoCasa[i][cObjPosY][listitem] = 0.0;
		    InfoCasa[i][cObjPosZ][listitem] = 0.0;

			foreach(Player, p)
			{
			    if(CasaActual[p] == i)
			    {
			    	DestroyPlayerObject(p, OBJ_Mueble[p][listitem]);
				}
			}

			ActualizarCasa(i, false, listitem, false);
			GameTextForPlayer(playerid,"~w~objeto ~g~ocultado", 4000, 3);
			return 1;
		}
		case dAdmClick:
		{
			if(!response)
			{
				SetPVarInt(playerid,"ADM_Click",0);
			 	return 1;
			}
		    new
				ID = GetPVarInt(playerid,"ClickedID"),Info[40],InfoEx[70],sucess = 1,
				ADM_HEAD[MAX_PLAYER_NAME+30];

			A_Format(ADM_HEAD, ""#CBLANCO"ADMINISTRACIÓN >> "#CHAMBRE"%s", pName(ID));
		    switch(GetPVarInt(playerid,"ADM_Click"))
		    {
				case ADM_EligeSkin:
			    {
			    	if(strval(inputtext) < 0 || strval(inputtext) > 300) return Dialog(playerid,dAdmClick,DIALOG_STYLE_INPUT,ADM_HEAD,""#CBLANCO"Introduce un número: ( = o > 0 & < 300 )","Aceptar","Cancelar");
					SetPlayerSkin(ID,strval(inputtext));
	   				Info = "cambio el skin de";
					sucess++;
				}
				case ADM_EligeInt:
			    {
					SetPlayerInterior(ID,strval(inputtext));
	  				Info = "le cambio el interior a";
					sucess++;
				}
				case ADM_EligeVW:
			    {
					SetPlayerVirtualWorld(ID,strval(inputtext));
	  				Info = "le cambio el virtual world a";
					sucess++;
				}
				case ADM_Vida:
				{
				    switch(listitem)
				    {
						case 0:
						{
						    SetPlayerHealth(ID,100);
						    Info = "curo a";
						}
						case 1:
						{
							SetPlayerHealth(ID,0);
							Info = "asesino a";
						}
					}
				}
				case ADM_Carcel:
				{
					if(0 <= strval(inputtext) <= 2400)
					{
					    SetPVarInt(playerid, "ADM_Click", ADM_CarcelR);
					    SetPVarInt(playerid, "ADM_CarcelTime", strval(inputtext) );
	        			Dialog(playerid,dAdmClick,DIALOG_STYLE_INPUT,ADM_HEAD,""#CBLANCO"Introduce la "#CROJO"RAZÓN "#CBLANCO"del encarcelamiento","Aceptar","Cancelar");
					}
					else
					{
						return Error(playerid, "Entre 0-2400 minutos (60 horas)");
					}
					return 1;
				}
				case ADM_CarcelR:
				{
				    new
						time = GetPVarInt(playerid, "ADM_CarcelTime"),
						Float: Horas =   (time / 60),
						Float: Minutos = (time % 60);

					DeletePVar(playerid, "ADM_CarcelTime");
					MandarCarcel(ID,true,time);
					Mensaje(ID, 1,   "=========================================================================");
					MensajeF(ID, -1, "- Fuiste encarcelado por %s "#CROJO"(%.0f:%.0f horas - Razón: %s)",NombreJugador(playerid), Horas, Minutos, inputtext);
					Mensaje(ID, 1,   "=========================================================================");
					Info = "Encarcelo a";
					format(InfoEx,sizeof(InfoEx),"(%02.0f:%02.0f HS - %s)",Horas, Minutos, inputtext);
					SetPlayerVarString (ID, "AdminJail", pName (playerid));
					alm(InfoJugador[ID][jAdminJail], pName(playerid) );
					sucess++;
				}
				case ADM_Kick:
				{
					KickPlayer(ID,pName(playerid),inputtext, 0);
			    	SetPVarInt(playerid,"ADM_Click",0);
			    	return 1;
				}
				case ADM_Ban:
				{
				    Error(playerid,"Sistema deshabilitado. Use "#CINFO"/ban");
			    	SetPVarInt(playerid,"ADM_Click",0);
			    	return 1;
/*				    new Str[128];
					new T[3],H[3];
					gettime(H[0],H[1],H[2]);
					getdate(T[0],T[1],T[2]);
					Info = "baneo a";
					format(InfoEx,sizeof(InfoEx),"(Razón: %s)",inputtext);
					Mensaje(ID,C_NEGRO,"=============================================================================");
					format(Str,sizeof(Str),""#CADMINISTRADOR"BANEADO ( %02d/%02d/%02d  - %02d:%02d:%02d ) "#CBLANCO"Razón: %s",T[2],T[1],T[0],H[0],H[1],H[2],inputtext);
					Mensaje(ID,-1,Str);
					Mensaje(ID,-1,"El administrador que te baneo:");
					Mensaje(ID,C_ROJO,NombreJugador_(playerid));
					Mensaje(ID,-1,"> Si esto fue un error, preciona F8 (Para sacar foto) y subela al foro");
					Mensaje(ID,-1,"Un administrador te desbloqueará tu cuenta y no perderás nada.");
					Mensaje(ID,C_NEGRO,"=============================================================================");
					BanEx(ID,inputtext);
					sucess++;*/
				}
				case ADM_Familia:
				{
					switch(listitem)
					{
					    case 0:
					    {
					        SetPVarInt(playerid,"ADM_Click",ADM_FamRango);
					        Dialog(playerid,dAdmClick,DIALOG_STYLE_INPUT,ADM_HEAD,""#CBLANCO"Introduce el rango deseado para este jugador","Aceptar","Cancelar");
							return 1;
					    }
						case 1:
						{
						    if(!InfoJugador[ID][jMiembroFam] && !InfoJugador[ID][jLiderFam])
						        return Error(playerid, "Ese jugador no tiene familia.");

						    Info = "expulso de su familia a";

						    if(!strcmp(InfoFamilia[ID_Familia(ID)][fLider], pName(ID) ))
						    {
								alm(InfoFamilia[ID_Familia(ID)][fLider], "");
								ActualizarFamilia(ID_Familia(ID));
							}
						    InfoJugador[ID][jRangoFam] = 1;
						    InfoJugador[ID][jMiembroFam] = 0;
						    InfoJugador[ID][jLiderFam] = 0;
							sucess++;
						}
					    case 2:
					    {
					        SetPVarInt(playerid,"ADM_Click",ADM_FamMiembro);
					        new Str[150],Str_[40];
					        Loop(i,sizeof(InfoFamilia),1)
					        {
					            A_Format(Str_,"%s\n",InfoFamilia[i][fNombre]);
					            strcat(Str,Str_);
							}
					        Dialog(playerid,dAdmClick,DIALOG_STYLE_LIST,""#CBLANCO"Selecciona la familia para este jugador",Str,"Aceptar","Cancelar");
							return 1;
					    }
					    case 3:
					    {
					        SetPVarInt(playerid,"ADM_Click",ADM_FamLider);
					        new Str[150],Str_[40];
					        Loop(i,sizeof(InfoFamilia),1)
					        {
					            A_Format(Str_,"%s\n",InfoFamilia[i][fNombre]);
					            strcat(Str,Str_);
							}
					        Dialog(playerid,dAdmClick,DIALOG_STYLE_LIST,""#CBLANCO"Selecciona la familia para este jugador",Str,"Aceptar","Cancelar");
							return 1;
					    }
					}
				}
				case ADM_FamRango:
				{
    				InfoJugador[ID][jRangoFam] = strval(inputtext);
    				Info = "le modifico el rango a";
					format(InfoEx,sizeof(InfoEx),"(Rango %d)",strval(inputtext));
					sucess++;
				}
				case ADM_FamMiembro:
				{
				    if(ID_Faccion(ID)) return Error(playerid, "No está permitido tener Familia y Facción.");
				    new Fam = listitem+1;
				    Info = "le dio miembro de familia a";
				    InfoJugador[ID][jMiembroFam] = Fam;
				    InfoJugador[ID][jLiderFam] = 0;
					format(InfoEx,sizeof(InfoEx),"(Familia %s)",InfoFamilia[Fam][fNombre]);
					sucess++;
				}
				case ADM_FamLider:
				{
				    if(ID_Faccion(ID)) return Error(playerid, "No está permitido tener Familia y Facción.");
				    new Fam = listitem+1;
				    Info = "le dio lider de familia a";
				    InfoJugador[ID][jMiembroFam] = 0;
				    InfoJugador[ID][jLiderFam] = Fam;
				    SetFamLeader(ID, Fam);
					format(InfoEx,sizeof(InfoEx),"(Familia %s)",InfoFamilia[Fam][fNombre]);
					sucess++;
				}
				case ADM_Faccion:
				{
					switch(listitem)
					{
					    case 0:
					    {
					        SetPVarInt(playerid,"ADM_Click",ADM_FacRango);
					        Dialog(playerid,dAdmClick,DIALOG_STYLE_INPUT,ADM_HEAD,""#CBLANCO"Introduce el rango deseado para este jugador","Aceptar","Cancelar");
							return 1;
					    }
						case 1:
						{
						    if(!InfoJugador[ID][jMiembro] && !InfoJugador[ID][jLider])
						        return Error(playerid, "Ese jugador no tiene facción.");

						    Info = "expulso de su facción a";

						    if(!strcmp(InfoFaccion[ID_Faccion(ID)][fLider], pName(ID) ))
						    {
								alm(InfoFaccion[ID_Faccion(ID)][fLider], "");
								ActualizarFacciones();
							}

							new
							    FilePath[30];

							A_Format(FilePath, "Facciones/Miembros%d.ini", ID_Faccion(ID) );
							new
							    INI:Arch = INI_Open(FilePath);

							INI_SetTag(Arch, "Miembros");
							INI_RemoveEntry(Arch, pName(ID));
							INI_Close(Arch);

						    SacarLlavesFaccion(ID);
						    InfoJugador[ID][jRango] = 0;
						    InfoJugador[ID][jMiembro] = 0;
						    InfoJugador[ID][jLider] = 0;
						    sucess++;
						}
					    case 2:
					    {
					        SetPVarInt(playerid,"ADM_Click",ADM_FacMiembro);
					        new Str[150],Str_[40];
					        Loop(i,MAX_FACCIONES,1)
					        {
					            A_Format(Str_,"%s\n",NombreFaccion(i));
					            strcat(Str,Str_);
							}
					        Dialog(playerid,dAdmClick,DIALOG_STYLE_LIST,""#CBLANCO"Selecciona para este jugador",Str,"Aceptar","Cancelar");
							return 1;
					    }
					    case 3:
					    {
							if(ID_Faccion(ID))
							    return Error(playerid, "El jugador ya tiene facción, primero debes expulsarlo.");

					        SetPVarInt(playerid,"ADM_Click",ADM_FacLider);
					        new Str[150],Str_[40];
					        Loop(i,MAX_FACCIONES,1)
					        {
					            A_Format(Str_,"%s\n",NombreFaccion(i));
					            strcat(Str,Str_);
							}
					        Dialog(playerid,dAdmClick,DIALOG_STYLE_LIST,""#CBLANCO"Selecciona la facción para este jugador",Str,"Aceptar","Cancelar");
							return 1;
					    }
					}
				}
				case ADM_FacRango:
				{
    				InfoJugador[ID][jRango] = strval(inputtext);
    				Info = "le modifico el rango a";
					format(InfoEx,sizeof(InfoEx),"(Rango %d)",strval(inputtext));
					sucess++;
				}
				case ADM_FacMiembro:
				{
					if(ID_Faccion(ID))
					    return Error(playerid, "El jugador ya tiene facción, primero debes expulsarlo.");

				    if(ID_Familia(ID)) return Error(playerid, "No está permitido tener Familia y Facción.");

				    new Fac = listitem+1;
				    Info = "le dio miembro de facción a";
				    InfoJugador[ID][jMiembro] = Fac;
					InfoJugador[ID][jLider] = 0;
					InfoJugador[ID][jRango] = 0;
					format(InfoEx,sizeof(InfoEx),"(Facción %s)",NombreFaccion(Fac));

					new
					    FilePath[30];

					A_Format(FilePath, "Facciones/Miembros%d.ini", Fac);
					new
				    	INI:Arch = INI_Open(FilePath);

					INI_SetTag(Arch, "Miembros");
					INI_WriteInt(Arch, pName(ID), 0);
					INI_Close(Arch);
					sucess++;
				}
				case ADM_FacLider:
				{
					if(ID_Faccion(ID))
					    return Error(playerid, "El jugador ya tiene facción, primero debes expulsarlo.");

				    if(ID_Familia(ID)) return Error(playerid, "No está permitido tener Familia y Facción.");

				    Info = "le dio lider de facción a";
				    InfoJugador[ID][jLider] = listitem+1;
					InfoJugador[ID][jMiembro] = 0;
					SetFacLeader(ID, listitem+1);
					DarLlavesFaccion(ID);
					format(InfoEx,sizeof(InfoEx),"(Facción %s)",NombreFaccion(listitem+1));
					sucess++;
				}
				case ADM_Dinero:
				{
				    switch(listitem)
				    {
				        case 0:
				        {
					        SetPVarInt(playerid,"ADM_Click",ADM_FijDin);
					        Dialog(playerid,dAdmClick,DIALOG_STYLE_INPUT,ADM_HEAD,""#CBLANCO"Introduce el dinero para este jugador","Aceptar","Cancelar");
						}
				        case 1:
				        {
					        SetPVarInt(playerid,"ADM_Click",ADM_QuitDin);
					        Dialog(playerid,dAdmClick,DIALOG_STYLE_INPUT,ADM_HEAD,""#CBLANCO"Introduce el dinero que le quitaras a este jugador","Aceptar","Cancelar");
						}
				        case 2:
				        {
					        SetPVarInt(playerid,"ADM_Click",ADM_DarDin);
					        Dialog(playerid,dAdmClick,DIALOG_STYLE_INPUT,ADM_HEAD,""#CBLANCO"Introduce el dinero que le darás a este jugador","Aceptar","Cancelar");
						}
					}
					return 1;
				}
				case ADM_FijDin:
				{
					new Val = strval(inputtext);
				    if(Val < 1) return Error(playerid,"¡El número debe ser positivo!");
    				ResetPlayerMoney(ID);
					GivePlayerMoney(ID,strval(inputtext));
					Info = "le fijó el dinero a";
					format(InfoEx,sizeof(InfoEx),"($%d)",strval(inputtext));
					sucess++;
				}
				case ADM_QuitDin:
				{
					new Val = strval(inputtext);
				    if(Val < 1) return Error(playerid,"¡El número debe ser positivo!");
					GivePlayerMoney(ID,-Val);
					Info = "le quitó dinero a";
					format(InfoEx,sizeof(InfoEx),"($%d)",Val);
					sucess++;
				}
				case ADM_DarDin:
				{
				    return Error(playerid, "¡No estás en el Horno!");

/*					GivePlayerMoney(ID,strval(inputtext));
					Info = "le agregó dinero a";
					format(InfoEx,sizeof(InfoEx),"($%d)",strval(inputtext));
					sucess++;
*/
				}
				default:
				{
				    sucess = 0;
				}
			}
			if(sucess)
			{
				SetPVarInt(playerid,"ADM_Click",0);
				new strADM[128];
				A_Format(strADM,"[ADMINISTRACIÓN] "#CBLANCO"> %s %s %s "#CADMINISTRADOR"%s",NombreJugador_(playerid),Info,NombreJugador_(ID),InfoEx);
				MensajeAdmin(C_ROJO,strADM,Ayudante);
				A_Format(strADM,"%s %s %s %s",NombreJugador_(playerid),Info,NombreJugador_(ID),InfoEx);
				Log("admins", strADM);
				return 1;
			}
		    switch(listitem)
		    {
		        case 0:
		        {
		            new
		                Float: Pos[3];

		            GetPlayerPos(ID,Pos[0],Pos[1],Pos[2]);
					if(IsPlayerInAnyVehicle(playerid)) SetVehiclePos(GetPlayerVehicleID(playerid),Pos[0],Pos[1],Pos[2]+1);
					else SetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]+1);
					Info = "fue a";
					SetPlayerInterior(playerid,GetPlayerInterior(ID));
					SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(ID));
				}
				case 1:
				{
					if(Freezed [ID] == 0)
					{
					    CongelarEx(ID);
						Info = "congelo a";
					}
					else
					{
					    Descongelar(ID);
						Info = "descongelo a";
					}
				}
				case 2:
				{
				    GetPlayerPos(ID,InfoJugador[ID][jPosX],InfoJugador[ID][jPosY],InfoJugador[ID][jPosZ]);
				    SetPlayerPos(ID,InfoJugador[ID][jPosX],InfoJugador[ID][jPosY],InfoJugador[ID][jPosZ]+2);
					Info = "bofeteo a";
				}
				case 3:
				{
				    if(GetPVarInt(ID,"Muteado") == 0)
				    {
				    	PlayerBools [ID] |= e_MUTEADO;
				    	Info = "muteo a";
					}
					else
					{
				    	PlayerBools [ID] &= ~e_MUTEADO;
				    	Info = "desmuteo a";
					}
				}
				case 4:
				{
					SetPVarInt(playerid,"ADM_Click",ADM_EligeSkin);
					Dialog(playerid,dAdmClick,DIALOG_STYLE_INPUT,ADM_HEAD,""#CBLANCO"Introduce el skin para este jugador","Aceptar","Cancelar");
					return 1;
				}
				case 5:
				{
					SetPVarInt(playerid,"ADM_Click",ADM_EligeInt);
					Dialog(playerid,dAdmClick,DIALOG_STYLE_INPUT,ADM_HEAD,""#CBLANCO"Introduce el interior para este jugador","Aceptar","Cancelar");
					return 1;
				}
				case 6:
				{
					SetPVarInt(playerid,"ADM_Click",ADM_EligeVW);
					Dialog(playerid,dAdmClick,DIALOG_STYLE_INPUT,ADM_HEAD,""#CBLANCO"Introduce el virtual world para este jugador","Aceptar","Cancelar");
					return 1;
				}
				case 7:
				{
		            new
		                Float: Pos[3];

		            GetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]);
					if(IsPlayerInAnyVehicle(ID)) SetVehiclePos(GetPlayerVehicleID(ID),Pos[0],Pos[1],Pos[2]+1);
					else SetPlayerPos(ID,Pos[0],Pos[1],Pos[2]+1);
					Info = "trajo a";
					SetPlayerInterior(ID,GetPlayerInterior(playerid));
					SetPlayerVirtualWorld(ID,GetPlayerVirtualWorld(playerid));
					return 1;
				}
				case 8:
				{
				    SetPVarInt(playerid,"ADM_Click",ADM_Vida);
					Dialog(playerid,dAdmClick,DIALOG_STYLE_LIST,ADM_HEAD,"- Curar\n- Asesinar","Aceptar","Cancelar");
					return 1;
				}
				case 9:
				{
				    SetPVarInt(playerid,"ADM_Click",ADM_Carcel);
					Dialog(playerid,dAdmClick,DIALOG_STYLE_INPUT,ADM_HEAD,""#CBLANCO"Introduce el tiempo de carcel (minutos) para este jugador","Aceptar","Cancelar");
					return 1;
				}
				case 10:
				{
				    SetPVarInt(playerid,"ADM_Click",ADM_Kick);
					Dialog(playerid,dAdmClick,DIALOG_STYLE_INPUT,ADM_HEAD,""#CBLANCO"Introduce la razón de la expulsión (Opcional)","Aceptar","Cancelar");
					return 1;
				}
				case 11:
				{
				    SetPVarInt(playerid,"ADM_Click",ADM_Ban);
					Dialog(playerid,dAdmClick,DIALOG_STYLE_INPUT,ADM_HEAD,""#CBLANCO"Introduce la razón de la expulsión (Opcional)","Aceptar","Cancelar");
					return 1;
				}
				case 12:
				{
				    SetPVarInt(playerid,"ADM_Click",ADM_Familia);
				    if(InfoJugador[playerid][jAdmin] > Mod.Superior)
				    {
						Dialog(playerid,dAdmClick,DIALOG_STYLE_LIST,ADM_HEAD,"- Cambiar rango\n- Expulsar\n- Dar miembro\n- Dar lider","Aceptar","Cancelar");
					}
					else
					{
						Dialog(playerid,dAdmClick,DIALOG_STYLE_LIST,ADM_HEAD,"- Cambiar rango\n- Expulsar\n- Dar miembro","Aceptar","Cancelar");
					}
					return 1;
				}
				case 13:
				{
				    SetPVarInt(playerid,"ADM_Click",ADM_Faccion);
				    if(InfoJugador[playerid][jAdmin] > Mod.Superior)
				    {
						Dialog(playerid,dAdmClick,DIALOG_STYLE_LIST,ADM_HEAD,"- Cambiar rango\n- Expulsar\n- Dar miembro\n- Dar lider","Aceptar","Cancelar");
					}
					else
					{
						Dialog(playerid,dAdmClick,DIALOG_STYLE_LIST,ADM_HEAD,"- Cambiar rango\n- Expulsar\n- Dar miembro","Aceptar","Cancelar");
					}
					return 1;
				}
				case 14:
				{
				    SetPVarInt(playerid,"ADM_Click",ADM_Dinero);
					Dialog(playerid,dAdmClick,DIALOG_STYLE_LIST,ADM_HEAD,"- Fijar dinero\n- Quitar dinero\n- Dar dinero","Aceptar","Cancelar");
					return 1;
				}
			}
			new strADM[128];
			format(strADM,sizeof(strADM),""#CADMINISTRADOR"[ADMINISTRACIÓN] "#CBLANCO"> %s %s %s "#CADMINISTRADOR"%s",NombreJugador_(playerid),Info,NombreJugador_(ID),InfoEx);
			MensajeAdmin(-1,strADM,Ayudante);
			return 1;
		}
		case dCargarCamion:
		{
			SetPVarInt(playerid,"Tipo_Entrega",listitem+1);
			InfoCamion[GetPlayerVehicleID(playerid)][camCarga] = listitem+1;
		    switch(listitem)
		    {
		        case 0: SetPVarInt(playerid,"Lugar_Entrega",random(4));
		        case 1: SetPVarInt(playerid,"Lugar_Entrega",random(2));
		        case 2: SetPVarInt(playerid,"Lugar_Entrega",random(3));
			}
   			SetTimerEx("CheckpointEntrega",10000,false,"i",playerid);
			TextoJugador(playerid,"~w~cargando ~p~camion...",8000,3);
			SetPVarInt(playerid,"PasoEntrega",1);
			alm(InfoCamion[GetPlayerVehicleID(playerid)][camChofer],pName(playerid));
			SetPVarInt(playerid,"Chofer_Camion",GetPlayerVehicleID(playerid));
		}
		case dCDepositar:
		{
		    if (!response) return 0;
		    new
				val = strval (inputtext);

			if (!IsNumeric (inputtext))
				return Error (playerid, "~r~Escribe la cantidad.");
				
		    if (val < 1) return Dialog (playerid, dCDepositar, DIALOG_STYLE_INPUT, ""#CBLANCO"\tOperaciones bancarias - "#CINFO"DEPOSITAR:",""#CBLANCO"Introduce la cantidad de dinero que quieres "#CVERDE"depositar\n\n\t-"#CBLANCO"Debe ser un valor "#CADMINISTRADOR"numérico","Depositar","Cancelar");
			if (val > GetPlayerMoney (playerid)) return Dialog (playerid, dCDepositar, DIALOG_STYLE_INPUT, ""#CBLANCO"\tOperaciones bancarias - "#CINFO"DEPOSITAR:",""#CBLANCO"No tienes esa cantidad de dinero.","Depositar","Cancelar");

			InfoJugador [playerid][jBanco] += val;
			QuitarDinero (playerid, val);

			new
				Str[120];
				
			format (Str, 50, "Balance: ~g~$%d", InfoJugador [playerid][jBanco]);
			PlayerTextDrawSetString (playerid, Cuenta_Balance[1][playerid], Str);
			A_Format (Str, "%s depositó $%d, tiene $%d", NombreJugador_(playerid), val, InfoJugador [playerid][jBanco]);
			Log("banco", Str);
		}
		case dCRetirar:
		{
		    if(!response) return 0;
		    
		    new
				val = strval(inputtext);

			if (!IsNumeric (inputtext))
				return Error (playerid, "~r~Escribe la cantidad.");

		    if (val < 1) return Dialog (playerid, dCRetirar, DIALOG_STYLE_INPUT, ""#CBLANCO"\tOperaciones bancarias - "#CINFO"RETIRAR:",""#CBLANCO"Introduce la cantidad de dinero que quieres "#CVERDE"retirar\n\n\t-"#CBLANCO"Debe ser un valor "#CADMINISTRADOR"numérico","Retirar","Cancelar");
			if (val > InfoJugador [playerid][jBanco]) return Dialog (playerid, dCRetirar, DIALOG_STYLE_INPUT,""#CBLANCO"\tOperaciones bancarias - "#CINFO"RETIRAR:",""#CBLANCO"No tienes esa cantidad de dinero.","Retirar","Cancelar");

			InfoJugador [playerid][jBanco] -= val;
			GivePlayerMoney (playerid, val);

			new
				Str[120];

			format (Str, 50, "Balance: ~g~$%d", InfoJugador [playerid][jBanco]);
			PlayerTextDrawSetString (playerid, Cuenta_Balance[1][playerid], Str);
			A_Format (Str, "%s retiró $%d, tiene $%d", NombreJugador_(playerid), val, InfoJugador [playerid][jBanco]);
			Log("banco", Str);
		}
		case dCTransferir:
		{
		    if (!response)
		    {
				DeletePVar (playerid, "Parte_Transferir");
				DeletePVar (playerid, "Cuenta_Transferir");
 				return 1;
			}
			
	        if (!IsNumeric (inputtext))
	        {
				DeletePVar (playerid, "Parte_Transferir");
				DeletePVar (playerid, "Cuenta_Transferir");
	            return Error (playerid, "Debe escribir únicamente valores numéricos");
			}

			new
			    part = GetPVarInt (playerid, "Parte_Transferir"),
				val = strval (inputtext);
			    
		    if (part == 1)
		    {
  				SetPVarInt(playerid,"Cuenta_Transferir",val);
				SetPVarInt(playerid,"Parte_Transferir",2);
				Dialog(playerid,dCTransferir,DIALOG_STYLE_INPUT,""#CBLANCO"\tOperaciones bancarias - "#CINFO"Transferir",""#CBLANCO"Escribe la cantidad de dinero que desea transferir:\n\n","Transferir","Cancelar");
			}
			else if (part == 2)
			{
		    	if(val < 1) return Dialog(playerid,dCTransferir,DIALOG_STYLE_INPUT,""#CBLANCO"\tOperaciones bancarias - "#CINFO"Transferir",""#CBLANCO"¡Debes ingresar un número positívo!","Transferir","Cancelar");
				if(val > InfoJugador [playerid][jBanco]) return Dialog(playerid,dCTransferir,DIALOG_STYLE_INPUT,""#CBLANCO"\tOperaciones bancarias - "#CINFO"Transferir",""#CBLANCO"El número introducido excede el dinero total de esta cuenta\n\nIntente nuevamente:","Transferir","Cancelar");

				new
				    account = GetPVarInt (playerid, "Cuenta_Transferir"),
					playerID = INVALID_PLAYER_ID;
				    
				if (account)
				{
				    foreach (Player, i)
				    {
				        if (InfoJugador [i][jIDCuentaB] == account)
				        {
				            playerID = i;
				            break;
						}
					}
				}
				else
				{
				    Error (playerid, "Número de cuenta erroneo - Intente nuevamente.");
					DeletePVar (playerid, "Parte_Transferir");
					DeletePVar (playerid, "Cuenta_Transferir");
					return 1;
				}
				
				if (playerID != INVALID_PLAYER_ID)
				{
				    InfoJugador [playerID][jBanco] += val;
				    InfoJugador [playerid][jBanco] -= val;
					DeletePVar(playerid,"Parte_Transferir");
					DeletePVar(playerid,"Cuenta_Transferir");

					new
						Str[120];

					A_Format(Str,"Balance: ~g~$%d",InfoJugador [playerid][jBanco]);
					PlayerTextDrawSetString(playerid,Cuenta_Balance[1][playerid],Str);
					MensajeF (playerid, -1, "Depositaste un total de "#CVERDE"$%d "#CBLANCO"en la cuenta número "#CROJO"%d "#CBLANCO"(Propietario: "#CINFO"%s"#CBLANCO")", val, account, pName (playerID));
					A_Format(Str, "%s transfirió $%d a %s (CID: %d)", pName(playerid), val, pName (playerID), account);
					Log("banco", Str);
				}
				else
				{
				    SetPVarInt (playerid, "Dinero_Transferir", val);
				    SetPVarInt (playerid, "ID_Transferir", account);

				    new
				        querystr [130];

					format (querystr, sizeof (querystr), "SELECT `Nombre`, `Banco` FROM `Usuarios` WHERE `IDCuentaB` = %d", account);
					opmysql_tquery(querystr, "OnQueryFinish", "ii", playerid, query_type_bank);
				}
			}
		}
		case dEditarObj:
		{
		    if(!response) return 0;
		    switch(listitem)
		    {
		        case 0:
		        {
		            EditDynamicObject(playerid,Objeto[GetPVarInt(playerid,"EDITAR_IDObj")][oID]);
				}
				case 1:
				{
				    Dialog(playerid,dCambiarTexto,DIALOG_STYLE_INPUT,""#CBLANCO"Editar texto",""#CBLANCO"Escribe el texto deseado:","Aceptar","Cancelar");
				}
				case 2:
				{
				    Dialog(playerid,dCambiarTamano,DIALOG_STYLE_INPUT,""#CBLANCO"Editar tamaño",""#CBLANCO"Escribe el tamaño (0 - 255):","Aceptar","Cancelar");
				}
				case 3:
				{
				    Dialog(playerid,dCambiarColor,DIALOG_STYLE_LIST,""#CBLANCO"Editar color","Escribe el color (Hexadesimal) - ejemplo: "#CROJO"0xFFFFFF00","Aceptar","Cancelar");
				}
				case 4:
				{
				    Dialog(playerid,dCambiarTamanoO,DIALOG_STYLE_INPUT,""#CBLANCO"Editar tamaño",""#CBLANCO"Escribe el tamaño del objeto - textura (10 - 110)","Aceptar","Cancelar");
				}
				case 5:
				{
				    Dialog(playerid,dCambiarIndexO,DIALOG_STYLE_INPUT,""#CBLANCO"Editar index",""#CBLANCO"Escribe el index del objeto","Aceptar","Cancelar");
				}
				case 6:
				{
		    		new
						IDO = GetPVarInt(playerid,"EDITAR_IDObj");

		    		DestroyDynamicObject(Objeto[IDO][oID]);

					Objeto[IDO][oID] = 0;
					Objeto[IDO][oIDModel] = 0;
					Objeto[IDO][oPosx] = 0.0;
					Objeto[IDO][oPosy] = 0.0;
					Objeto[IDO][oPosz] = 0.0;
					Objeto[IDO][oAngx] = 0.0;
					Objeto[IDO][oAngy] = 0.0;
					Objeto[IDO][oAngz] = 0.0;
					strclr(Objeto[IDO][oNombre]);
					Objeto[IDO][oTamano] = 0;
					Objeto[IDO][oColor] = 0;
					Objeto[IDO][oTamanoO] = 0;
					Objeto[IDO][oIndexO] = 0;

					new
						Str[30];

					A_Format(Str,"Objetos/%d.ini",IDO);
					fremove(Str);
				}
				case 7:
				{
					new IDO = GetPVarInt(playerid,"EDITAR_IDObj");
				    ActualizarObjeto(IDO);
		    		DestroyDynamicObject(Objeto[IDO][oID]);
		    		Objeto[IDO][oID] = CreateDynamicObject(Objeto[IDO][oIDModel],Objeto[IDO][oPosx],Objeto[IDO][oPosy],Objeto[IDO][oPosz],Objeto[IDO][oAngx],Objeto[IDO][oAngy],Objeto[IDO][oAngz]);
					if(Objeto[IDO][oColor])
					{
			 			SetDynamicObjectMaterialText(Objeto[IDO][oID],Objeto[IDO][oIndexO],Objeto[IDO][oNombre],Objeto[IDO][oTamanoO],"Arial",Objeto[IDO][oTamano],1,Objeto[IDO][oColor]);
					}
				}
			}
		}
		case dCambiarTexto:
		{
		    if(!response) return 0;
		    new IDO = GetPVarInt(playerid,"EDITAR_IDObj");
		    SetDynamicObjectMaterialText(Objeto[IDO][oID],Objeto[IDO][oIndexO],inputtext,Objeto[IDO][oTamanoO],"Arial",Objeto[IDO][oTamano],1,Objeto[IDO][oColor]);
			alm(Objeto[IDO][oNombre],inputtext);
		}
		case dCambiarTamano:
		{
		    if(!response) return 0;
		    if(strval(inputtext) > 255) return Error(playerid,"¡Debe ser menor a 255!");
		    new IDO = GetPVarInt(playerid,"EDITAR_IDObj");
		    SetDynamicObjectMaterialText(Objeto[IDO][oID],Objeto[IDO][oIndexO],Objeto[IDO][oNombre],Objeto[IDO][oTamanoO],"Arial",strval(inputtext),1,Objeto[IDO][oColor]);
			Objeto[IDO][oTamano] = strval(inputtext);
		}
		case dCambiarColor:
		{
		    if(!response) return 0;
		    new IDO = GetPVarInt(playerid,"EDITAR_IDObj");
			sscanf(inputtext, "h", Objeto[IDO][oColor]);
		    SetDynamicObjectMaterialText(Objeto[IDO][oID],Objeto[IDO][oIndexO],Objeto[IDO][oNombre],Objeto[IDO][oTamanoO],"Arial",Objeto[IDO][oTamano],1,Objeto[IDO][oColor]);
		}
		case dCambiarTamanoO:
		{
		    if(!response) return 0;
		    if(strval(inputtext) > 140) return Error(playerid,"¡Debe ser menor o igual a 140!");
		    new IDO = GetPVarInt(playerid,"EDITAR_IDObj");
			Objeto[IDO][oTamanoO] = strval(inputtext);
		    SetDynamicObjectMaterialText(Objeto[IDO][oID],Objeto[IDO][oIndexO],Objeto[IDO][oNombre],Objeto[IDO][oTamanoO],"Arial",Objeto[IDO][oTamano],1,Objeto[IDO][oColor]);
		}
		case dCambiarIndexO:
		{
		    if(!response) return 0;
		    if(strval(inputtext) > 140) return Error(playerid,"¡Debe ser menor o igual a 140!");
		    new IDO = GetPVarInt(playerid,"EDITAR_IDObj");
			Objeto[IDO][oIndexO] = strval(inputtext);
		    SetDynamicObjectMaterialText(Objeto[IDO][oID],Objeto[IDO][oIndexO],Objeto[IDO][oNombre],Objeto[IDO][oTamanoO],"Arial",Objeto[IDO][oTamano],1,Objeto[IDO][oColor]);
		}
		case dElegirSRopa:
		{
		    if(!response) return 0;
			CambiarRopa(playerid,GetPVarInt(playerid,"ROPA_SELECCIONADA"),listitem);
		}
		case dEditarRopa:
		{
		    if(!response) return 0;
		    if(InfoJugador[playerid][jRopa][listitem] == 0) return Error(playerid,"¡No tienes nada en ese slot!");
		    SetPVarInt(playerid,"ROPA_EDITAR",listitem);
			Dialog(playerid,dEditarRopa_2,DIALOG_STYLE_LIST,"EDITAR ROPA","- "#CINFO"Ponerse esta ropa\n- "#CINFO"Eliminar","Aceptar","Cancelar");
 		}
		case dEditarRopa_2:
		{
		    if(!response) return 0;
		    new R = GetPVarInt(playerid,"ROPA_EDITAR");
			if(listitem == 0)
			{
      			CambiarRopa(playerid,InfoJugador[playerid][jRopa][R],R);
			}
			else if(listitem == 1)
			{
				Mensaje(playerid,-1,"> Ropa "#CADMINISTRADOR"eliminada");
				if(GetPlayerSkin(playerid) == InfoJugador[playerid][jRopa][R])
				{
					switch(InfoJugador[playerid][jSexo])
					{
					    case 1: SetPlayerSkin(playerid,252);
					    case 2: SetPlayerSkin(playerid,140);
					}
				}
				InfoJugador[playerid][jRopa][R] = 0;
			}
		}
		case dLicencia:
		{
		    if(!response) return 1;
		    if(GetPlayerMoney(playerid) < 600) return Error(playerid,"¡No tienes suficiente dinero, necesitas $600!");
		    if(listitem == 0) // Autos
			{
			    if (PlayerBools [playerid] & e_LICENCIA)
			    {
			        return Error (playerid, "~r~Ya se encuentra realizando la licencia.");
				}
			    if (PlayerTempData [playerid][e_VEH_LICENCIA] != 0)
			    {
			        veh_destroy (PlayerTempData [playerid][e_VEH_LICENCIA]);
				}

				PlayerTempData [playerid][e_VEH_LICENCIA] = veh_create(426, 1414.80, -44.59, 1000.70, 90.0, 80, 80, 15, 1, playerid);

				if (1 <= PlayerTempData [playerid][e_VEH_LICENCIA] < MAX_VEHICLES)
				{
				    QuitarDinero (playerid, 600);

					veh_putPlayerIn(PlayerTempData [playerid][e_VEH_LICENCIA], playerid, 0);
					veh_setEngine(PlayerTempData [playerid][e_VEH_LICENCIA], true);
					
					SetPVarInt (playerid, "licSEGS", 120);
					SetPVarInt (playerid, "licPOINTS", 1);
					SetPVarInt (playerid, "licTIPO", 1);
					
					SetPlayerCP (playerid, CP_LICENCIAVEH, LIC_Check1);
					PlayerBools [playerid] |= e_LICENCIA;
					Streamer_UpdateEx (playerid, 1414.80, -44.59, 1000.70);
					return 1;
				}
			}
		    else if(listitem == 1) // Motos
			{
			    if (PlayerBools [playerid] & e_LICENCIA)
			    {
			        return Error (playerid, "~r~Ya se encuentra realizando la licencia.");
				}
			    if (PlayerTempData [playerid][e_VEH_LICENCIA] != 0)
			    {
			        veh_destroy (PlayerTempData [playerid][e_VEH_LICENCIA]);
				}

				PlayerTempData [playerid][e_VEH_LICENCIA] = veh_create(521, 1414.80, -44.59, 1000.70, 90.0, 80, 80, 15, 1, playerid);

				if (1 <= PlayerTempData [playerid][e_VEH_LICENCIA] < MAX_VEHICLES)
				{
				    QuitarDinero (playerid, 600);

					veh_putPlayerIn(PlayerTempData [playerid][e_VEH_LICENCIA], playerid, 0);
					veh_setEngine(PlayerTempData [playerid][e_VEH_LICENCIA], true);
					
					SetPVarInt (playerid, "licSEGS", 150);
					SetPVarInt (playerid, "licPOINTS", 1);
					SetPVarInt (playerid, "licTIPO", 2);
					
					SetPlayerCP (playerid, CP_LICENCIAVEH, LIC_Check1);
					PlayerBools [playerid] |= e_LICENCIA;
					Streamer_UpdateEx (playerid, 1414.80, -44.59, 1000.70);
					return 1;
				}
			}
		}
	 	case dCrearPorton:
	 	{
			new
				i = GetPVarInt(playerid, "PORTON_EDITAR");

	     	if(!response)
			{
			    DeletePVar(playerid, "PORTON_EDITAR");
			    InfoPorton_Ex[i][portFamilia] = 0;
				return 1;
			}

	     	GetPlayerPos(playerid,InfoPorton_Ex[i][pX],InfoPorton_Ex[i][pY],InfoPorton_Ex[i][pZ]);
	     	InfoPorton_Ex[i][portModel] = strval(inputtext);
			InfoPorton_Ex[i][portID] = CreateDynamicObject(InfoPorton_Ex[i][portModel],InfoPorton_Ex[i][pX]+2,InfoPorton_Ex[i][pY]+1,InfoPorton_Ex[i][pZ]+2,0,0,0);
			MensajeF(playerid,-1,"Porton nº "#CROJO"%d "#CBLANCO"creado. Use "#CINFO"/editarporton "#CBLANCO"para continuar", i);
			return 1;
		}
	  	case dEditPorton:
	  	{
			new
				i = GetPVarInt(playerid, "PORTON_EDITAR");

	     	if(!response)
			{
			    DeletePVar(playerid, "PORTON_EDITAR");
				return 1;
			}

	    	switch(listitem)
	     	{
	         	case 0:
	         	{
	         		SetPVarInt(playerid,PVar_PORTON,EDIT_POS);
	             	EditDynamicObject(playerid,InfoPorton_Ex[i][portID]);
				}
	    		case 1:
	    		{
	             	SetPVarInt(playerid,PVar_PORTON,EDIT_ABIERTO);
	             	EditDynamicObject(playerid,InfoPorton_Ex[i][portID]);
				}
	    		case 2:
	    		{
					Dialog(playerid, dIDModeloPorton, DIALOG_STYLE_INPUT, ">> Cambiar Modelo de portón", ""#CBLANCO"Escribe el número de Modelo para el porton:", "Aceptar", "Cancelar");
				}
	    		case 3:
	    		{
					Dialog(playerid, dEditVelocidadP, DIALOG_STYLE_INPUT, ">> Cambiar velocidad del portón", ""#CBLANCO"Escribe la velocidad (Ej: 1.0 - 15.0)", "Aceptar", "Cancelar");
				}
	    		case 4:
	    		{
	    		    DestroyDynamicObject(InfoPorton_Ex[i][portID]);
					InfoPorton_Ex[i][portID] = CreateDynamicObject( InfoPorton_Ex[i][portModel],
																	InfoPorton_Ex[i][pX],
																	InfoPorton_Ex[i][pY],
																	InfoPorton_Ex[i][pZ],
																	InfoPorton_Ex[i][pRX],
																	InfoPorton_Ex[i][pRY],
																	InfoPorton_Ex[i][pRZ]);
					ActualizarPorton(i);
					MensajeF(playerid, -1, "El porton nº "#CROJO"%d "#CBLANCO"fue actualizado.", i);
				}
	    		case 5:
	    		{
	    		    DestroyDynamicObject(InfoPorton_Ex[i][portID]);

					InfoPorton_Ex[i][portID] = 0;
					InfoPorton_Ex[i][portModel] = 0;
					InfoPorton_Ex[i][pX] = 0.0;
					InfoPorton_Ex[i][pY] = 0.0;
					InfoPorton_Ex[i][pZ] = 0.0;
					InfoPorton_Ex[i][pRX] = 0.0;
					InfoPorton_Ex[i][pRY] = 0.0;
					InfoPorton_Ex[i][pRZ] = 0.0;
					InfoPorton_Ex[i][pAX] = 0.0;
					InfoPorton_Ex[i][pAY] = 0.0;
					InfoPorton_Ex[i][pAZ] = 0.0;
					InfoPorton_Ex[i][portFamilia] = 0;
					InfoPorton_Ex[i][portCasa] = 0;

					new str[18];
					A_Format(str, "Portones/%d.ini", i);
					fremove(str);

					MensajeF(playerid, -1, "El porton nº "#CROJO"%d "#CBLANCO"fue eliminado.", i);
			    	DeletePVar(playerid, "PORTON_EDITAR");
				}
			}
		}
		case dIDModeloPorton:
		{
			new
				i = GetPVarInt(playerid, "PORTON_EDITAR");

	     	if(!response)
			{
			    DeletePVar(playerid, "PORTON_EDITAR");
				return 1;
			}
   			DestroyDynamicObject(InfoPorton_Ex[i][portID]);

   			InfoPorton_Ex[i][portModel] = strval(inputtext);

			InfoPorton_Ex[i][portID] = CreateDynamicObject( InfoPorton_Ex[i][portModel],
															InfoPorton_Ex[i][pX],
															InfoPorton_Ex[i][pY],
															InfoPorton_Ex[i][pZ],
															InfoPorton_Ex[i][pRX],
															InfoPorton_Ex[i][pRY],
															InfoPorton_Ex[i][pRZ]);

			MensajeF(playerid, -1, "El modelo del porton nº "#CROJO"%d "#CBLANCO"fue cambiado.", i);
			return 1;
		}
		case dEditVelocidadP:
		{
			new
				i = GetPVarInt(playerid, "PORTON_EDITAR"),
				Float: speed = floatstr(inputtext);

	     	if(!response)
			{
			    DeletePVar(playerid, "PORTON_EDITAR");
				return 1;
			}
			if(!speed)
			{
			    DeletePVar(playerid, "PORTON_EDITAR");
			    Mensaje(playerid, -1, "No puedes utilizar valores negativos ni nulos para la velocidad.");
				return 1;
			}
			InfoPorton_Ex[i][portVelocidad] = speed;
 			MensajeF(playerid, -1, "La velocidad del porton nº "#CROJO"%d "#CBLANCO"fue cambiada a "#CVERDE"%.03f.", i, speed);
		}
		case dAEntrevista:
		{
		    if(!response)
		    {
		        DeletePVar(playerid,"Entrevistado_Por");
		        OnPlayerText(playerid,"No gacias, no acepto la entrevista.");
		        return 1;
			}
			else if(response)
			{
		        OnPlayerText(playerid,"Sí, acepto la entrevista.");
		        Mensaje(playerid,-1,"Para hablar por el microfono, usa el comando "#CINFO"/mic");
				return 1;
			}
		}
		case dElegirBebida:
		{
		    if(!response) return 1;

			Manos_Desocupadas

		    new
		        NegID = ID_Negocio(playerid);

			if(NegID == INVALID_BUSINESS_ID) return 1;

			if(InfoNegocio[NegID][nStock][listitem] < 1)
			    return Mensaje(playerid, -1, "El negocio no tiene más stock de este producto.");

			if(GetPlayerMoney(playerid) < ProductInfo[InfoNegocio[NegID][nTipo]][listitem][productPrice])
			    return MensajeF(playerid, -1, "¡No tienes suficiente dinero! Necesitas "#CROJO"$%d "#CBLANCO"más para comprarlo.", ProductInfo[InfoNegocio[NegID][nTipo]][listitem][productPrice] - GetPlayerMoney(playerid));

			QuitarDinero(playerid, ProductInfo[InfoNegocio[NegID][nTipo]][listitem][productPrice]);
			InfoNegocio[NegID][nDinero] += ProductInfo[InfoNegocio[NegID][nTipo]][listitem][productPrice];
			SacarStockNegocio(NegID, listitem);
			InfoNegocio[NegID][nVentaStock][listitem] ++;

		    switch(listitem)
			{
			    case 0:
			    {
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
					Mensaje(playerid, -1, "Compraste una lata de Gaseosa. Para tomar, presione "#CVERDE"Click. "#CBLANCO"Para dejar la lata, presione "#CINFO"F");
					AutoRol(playerid,"compra una lata de gaseosa");
				}
			    case 1:
			    {
					SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_WINE);
					Mensaje(playerid, -1, "Compraste una botella de Cerveza. Para tomar, presione "#CVERDE"Click. "#CBLANCO"Para dejar la botella, presione "#CINFO"F");
					AutoRol(playerid,"compra una botella de cerveza");
				}
			    case 2:
			    {
					SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_WINE);
					Mensaje(playerid, -1, "Compraste una botella de Vodka. Para tomar, presione "#CVERDE"Click. "#CBLANCO"Para dejar la botella, presione "#CINFO"F");
					AutoRol(playerid,"compra una botella de vodka");
				}
			    case 3:
			    {
					GiveObject(playerid, GOAT(INV_CAJACIGARRILLO), 10);
					Mensaje(playerid,-1,"Compraste una caja de 10 cigarrillos, puede usar "#CINFO"/sacar cigarrillo "#CBLANCO"y luego "#CINFO"/encender cigarrillo");
					AutoRol(playerid,"compra una caja de cigarrillos.");
				}
			    case 4:
			    {
					GiveObject(playerid, GOAT(INV_ENCENDEDOR), 100);
					Mensaje(playerid, -1, "Con el encendedor, podrá hacer cosas como prender fuego en diferentes ocaciones, o "#CINFO"/encender.");
					AutoRol(playerid,"compra un encendedor");
				}
			    case 5:
			    {
					GiveObject(playerid,GetObjectAtWeapon(41),2000);
					Mensaje(playerid, -1, "Si usted ataca una persona con el spray sin razón, será sancionado y encarcelado.");
					AutoRol(playerid,"compra un spray");
				}
				case 6:
				{
					InfoJugador[playerid][jSaldo] += 20;
					MensajeF(playerid, -1, "Compraste una tarjeta de "#CVERDE"20 "#CBLANCO"de Saldo para tu celular.");
					AutoRol(playerid,"compra una tarjeta de saldo para celular.");
				}
				case 7:
				{
				    AutoRol(playerid,"compra un paquete de seda.");
					GiveObject(playerid, GOAT(INV_PAQUETESEDA), 5);
				}
				case 8:
				{
					GiveObject(playerid, GOAT(INV_BIDONCOMBUSTIBLE), 15);
				    AutoRol(playerid, "compra un bidón con 10 litros de combustible");
				    Mensaje(playerid, -1,"Para utilizar el bidón, use "#CINFO"/usar bidon "#CBLANCO"situado en el tánque del vehículo.");
				}
			}
		}
		case dElejirSlotA:
		{
		    if(!response) return DeletePVar(playerid,"ATTACH_MOD");
			new
			    NegID = ID_Negocio(playerid);

		    if(NegID == INVALID_BUSINESS_ID)
		    {
		        DeletePVar(playerid,"ATTACH_MOD");
		        return 1;
			}
			if(!InfoNegocio[NegID][nStock][1])
			{
		        DeletePVar(playerid,"ATTACH_MOD");
		        return Error(playerid, "Este negocio no tiene más accesorios para vender, ¡Visita otro!");
			}
			new i = listitem;
			if(InfoJugador[playerid][jAttachModel][i]) return Error(playerid,"¡Ya tienes ese slot ocupado! "#CAZUL2"(/accesorios)");
			new pvar = GetPVarInt(playerid,"ATTACH_MOD");
			QuitarDinero(playerid,AttachmentObjects[pvar][attachprecio]);
			InfoJugador[playerid][jAttachModel][i] = AttachmentObjects[pvar][attachmodel];
			InfoJugador[playerid][jAccesorio][i] = pvar;
			InfoJugador[playerid][jAttachBone][i] = 2;
			InfoJugador[playerid][jAttachEscx][i] = 1.0;
			InfoJugador[playerid][jAttachEscy][i] = 1.0;
			InfoJugador[playerid][jAttachEscz][i] = 1.0;
			InfoJugador[playerid][jAttachOcultado][i] = false;
			Mensaje(playerid,C_INFO,"> "#CBLANCO"Puedes editar el accesorio "#CAZUL2"(/accesorios)");
			ActualizarAttach(playerid,i);

   			InfoNegocio[NegID][nDinero] += AttachmentObjects[pvar][attachprecio];
   			SacarStockNegocio(NegID, 1);

			InfoNegocio[NegID][nVentaStock][1] ++;
			DeletePVar(playerid,"ATTACH_MOD");
			ActualizarAccesorios(playerid,i);
			return 1;
		}
		case dEAccesorios_0:
		{
		    if(!response) return 0;
		    if(!InfoJugador[playerid][jAttachModel][listitem]) return Error(playerid,"¡No tienes nada en ese slot!");
			EditarAccesorio(playerid,listitem);
			SetPVarInt(playerid,"OBJ_EDITAR",listitem);
			return 1;
		}
		case dEAccesorios_1:
		{
		    if(!response) return 0;
			switch(listitem)
			{
			    case 0:
				{
					ActualizarAttach(playerid,GetPVarInt(playerid,"OBJ_EDITAR"));
					EditAttachedObject(playerid,GetPVarInt(playerid,"OBJ_EDITAR"));
					Mensaje(playerid,-1,"Para poder mover la cámara, presione "#CAZUL2"~k~~PED_SPRINT~"#CBLANCO". Use "#CAZUL2"/headmove "#CBLANCO"para desactivar el movimiento de la cabeza.");
				}
				case 1:
				{
					new Str[350],Str2[28];
					Loop(i,sizeof AttachmentBones,0)
					{
						A_Format(Str2,"%s\n",AttachmentBones[i]);
						strcat(Str,Str2);
					}
					Dialog(playerid,dElejirParte,DIALOG_STYLE_LIST,""#CAZUL2"Elije la parte del cuerpo",Str,"Aceptar","Cancelar");
				}
				case 2: Dialog(playerid,dElejirPos_A,DIALOG_STYLE_LIST,""#CAZUL2"Editar accesorios - seleccione la posición","Casco\nReloj\nGorra\nBoina\nLentes\nPelo\nBandana","Aceptar","Cancelar");
				case 3:
				{
				    if(!InfoJugador[playerid][jAttachOcultado][GetPVarInt(playerid,"OBJ_EDITAR")])
				    {
					    InfoJugador[playerid][jAttachOcultado][GetPVarInt(playerid,"OBJ_EDITAR")] = true;
					    Mensaje(playerid,-1,"El objeto fue ocultado.");
					    RemovePlayerAttachedObject(playerid,GetPVarInt(playerid,"OBJ_EDITAR"));
					    ActualizarAccesorios(playerid,GetPVarInt(playerid,"OBJ_EDITAR"));
					}
					else
					{
					    InfoJugador[playerid][jAttachOcultado][GetPVarInt(playerid,"OBJ_EDITAR")] = false;
					    Mensaje(playerid,-1,"El objeto fue mostrado.");
					    ActualizarAttach(playerid,GetPVarInt(playerid,"OBJ_EDITAR"));
					    ActualizarAccesorios(playerid,GetPVarInt(playerid,"OBJ_EDITAR"));
					}
				}
				case 4:
				{
					Dialog(playerid,dConfirmarEA,DIALOG_STYLE_MSGBOX,""#CAZUL2"Eliminar accesorio",""#CBLANCO"¿Está segúro que desea "#CROJO"eliminar "#CBLANCO"su accesorio?","Sí","No");
				}
			}
		}
		case dElejirParte:
		{
		    if(!response) return 0;
		    InfoJugador[playerid][jAttachBone][GetPVarInt(playerid,"OBJ_EDITAR")] = listitem+1;
  			ActualizarAttach(playerid,GetPVarInt(playerid,"OBJ_EDITAR"));
  			ActualizarAccesorios(playerid,GetPVarInt(playerid,"OBJ_EDITAR"));
		}
		case dElejirPos_A:
		{
		    if(!response) return 1;
      		new S = GetPlayerSkin(playerid);
       		new i = GetPVarInt(playerid,"OBJ_EDITAR");
		    switch(listitem)
		    {
		        case 0://casco
		        {
		            AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i],2,POS_Accesorio_Casco[S][0],POS_Accesorio_Casco[S][1],POS_Accesorio_Casco[S][2],POS_Accesorio_Casco[S][3],POS_Accesorio_Casco[S][4],POS_Accesorio_Casco[S][5],POS_Accesorio_Casco[S][6],POS_Accesorio_Casco[S][7],POS_Accesorio_Casco[S][8]);
				}
				case 1://reloj
				{
		            AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i],5,POS_Accesorio_Reloj[S][0],POS_Accesorio_Reloj[S][1],POS_Accesorio_Reloj[S][2],POS_Accesorio_Reloj[S][3],POS_Accesorio_Reloj[S][4],POS_Accesorio_Reloj[S][5],POS_Accesorio_Reloj[S][6],POS_Accesorio_Reloj[S][7],POS_Accesorio_Reloj[S][8]);
				}
				case 2://Gorra
				{
		            AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i],2,POS_Accesorio_Gorra[S][0],POS_Accesorio_Gorra[S][1],POS_Accesorio_Gorra[S][2],POS_Accesorio_Gorra[S][3],POS_Accesorio_Gorra[S][4],POS_Accesorio_Gorra[S][5],POS_Accesorio_Gorra[S][6],POS_Accesorio_Gorra[S][7],POS_Accesorio_Gorra[S][8]);
				}
				case 3://Boina
				{
		            AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i],2,POS_Accesorio_Boina[S][0],POS_Accesorio_Boina[S][1],POS_Accesorio_Boina[S][2],POS_Accesorio_Boina[S][3],POS_Accesorio_Boina[S][4],POS_Accesorio_Boina[S][5],POS_Accesorio_Boina[S][6],POS_Accesorio_Boina[S][7],POS_Accesorio_Boina[S][8]);
				}
				case 4://Lentes
				{
		            AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i],2,POS_Accesorio_Lentes[S][0],POS_Accesorio_Lentes[S][1],POS_Accesorio_Lentes[S][2],POS_Accesorio_Lentes[S][3],POS_Accesorio_Lentes[S][4],POS_Accesorio_Lentes[S][5],POS_Accesorio_Lentes[S][6],1,1);
				}
				case 5://Pelo
				{
		            AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i],2,POS_Accesorio_Pelo[S][0],POS_Accesorio_Pelo[S][1],POS_Accesorio_Pelo[S][2],POS_Accesorio_Pelo[S][3],POS_Accesorio_Pelo[S][4],POS_Accesorio_Pelo[S][5],POS_Accesorio_Pelo[S][6],POS_Accesorio_Pelo[S][7],POS_Accesorio_Pelo[S][8]);
				}
				case 6://bandana
				{
				    switch(GetPlayerSkin(playerid))
				    {
				        case 115: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.075032, 0.039259, -0.009051, 272.667022, 0.000000, 268.155487); // Mask7 - skinsur115
						case 114: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.075032, 0.039259, -0.009051, 272.667022, 0.000000, 268.155487); // Mask7 - skinsur114
						case 116: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.075032, 0.039259, -0.009051, 272.667022, 0.000000, 268.155487); // Mask7 - skinsur116
						case 173: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.073774, 0.042118, -0.003368, 273.422515, 0.243100, 267.547058); // Mask7 - skinsur116
						case 174: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.073774, 0.042118, -0.003368, 273.422515, 0.243100, 267.547058); // Mask7 - skinsur116
						case 175: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.073774, 0.042118, -0.003368, 273.422515, 0.243100, 267.547058); // Mask7 - skinsur116
					    //groves
				        case 271: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.073522, 0.015061, -0.005912, 277.060668, 9.697027, 264.330200); // Mask3 - saveskinryder
						case 270: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.083064, 0.015061, 0.003734, 270.357788, 2.187248, 264.330200); // Mask3 - 270sweet
						case 269: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.083064, 0.017489, 0.002312, 270.357788, 2.187248, 266.944274); // Mask3 - smoke269
						case 105: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.078534, 0.041857, -0.001727, 268.970458, 1.533374, 269.223754); // Mask3 - tapadoskin 105 grove
						case 106: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.084321, 0.032509, -0.006748, 268.970458, 1.533374, 269.223754); // Mask3 - skin 106grove
						case 107: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.084321, 0.035590, -0.004405, 268.970458, 1.533374, 269.223754); // Mask3 - skin 107grove
						//Latinos
				        case 108: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.084809, 0.026987, 0.000924, 273.545745, 0.572601, 264.837554 ); // Mask6 - skinvago108
						case 109: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.081629, 0.035036, -0.006385, 273.545745, 0.572601, 264.837554 ); // Mask6 - skinvago 109
						case 110: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.073774, 0.042118, -0.003368, 273.422515, 0.243100, 267.547058 ); // Mask6 - skinvago110
						//Ballas
						case 102: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.076758, 0.034728, -0.001697, 267.582092, 359.936279, 265.333801 ); // Mask5 - skin102balla
						case 103: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.076758, 0.042026, 0.000579, 267.582092, 359.936279, 265.333801 ); // Mask5 - 103balla
						case 104: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.076758, 0.042026, 0.000579, 267.582092, 359.936279, 265.333801 ); // Mask5 - skin 104 balla
						case 293: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.079601, 0.019614, -0.006095, 272.025512, 0.136046, 268.165863 ); // Mask5 - oglock
						//Blood
						case 7:   AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.086248, 0.036498, -0.004328, 270.304412, 359.126678, 266.091674 ); // Mask2 - blood - 7
						case 67:  AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.086248, 0.020672, 0.001285, 270.304412, 359.126678, 266.091674 ); // Mask2 - blood - 67
						case 180: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.084799, 0.039217, -0.007458, 270.304412, 359.126678, 271.452209 ); // Mask2 - blood- 180
						case 19:  AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.081000, 0.026039, -0.004144, 270.304412, 359.126678, 271.452209 ); // Mask2 - blood - 19
						case 144: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.110470, 0.043788, -0.002435, 266.909606, 358.832275, 267.704956 ); // Bandana2 - 144 - blood
					    //Moteros
						case 23:  AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.082504, 0.038338, -0.005320, 271.407196, 356.295104, 267.907989 ); // Mask2 - skin 100 motero
						case 247: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.088066, 0.038264, 0.000398, 271.407196, 356.295104, 267.907989 ); // Mask2 - skin 247 - motoquero
						case 248: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.088066, 0.038264, 0.000398, 271.407196, 356.295104, 267.907989 ); // Mask2 - skin 248 - motoquero
						case 100: AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.088066, 0.038264, 0.000398, 271.407196, 356.295104, 267.907989 ); // Mask2 - skin 248 - motoquero
						case 33:  AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.041866, 0.015547, -0.001428, 271.371276, 356.919921, 269.937591 ); // Mask2 - skin BIEN 33
						default:  AttachObject(playerid,i,InfoJugador[playerid][jAttachModel][i], 2, 0.041866, 0.015547, -0.001428, 271.371276, 356.919921, 269.937591 ); // Mask2 - skin BIEN 33
					}
				}
			}
			if(InfoJugador[playerid][jAttachPosx][i] != 0.0)
				Mensaje(playerid,-1,"> Objeto ajustado "#CVERDE"correctamente "#CBLANCO"a la posición indicada.");

			else
			    Mensaje(playerid,-1,"> El servidor no encontró una posición para ese accesorio.");

		}
		case dConfirmarEA:
		{
		    if(!response) return 0;
		    else
		    {
		        new i = GetPVarInt(playerid,"OBJ_EDITAR");
		        InfoJugador[playerid][jAccesorio][i] = 0;
		    	InfoJugador[playerid][jAttachModel][i] = 0;
				InfoJugador[playerid][jAttachBone][i] = 2;
				InfoJugador[playerid][jAttachPosx][i] = 0;
				InfoJugador[playerid][jAttachPosy][i] = 0;
				InfoJugador[playerid][jAttachPosz][i] = 0;
				InfoJugador[playerid][jAttachAngx][i] = 0;
				InfoJugador[playerid][jAttachAngy][i] = 0;
				InfoJugador[playerid][jAttachAngz][i] = 0;
				InfoJugador[playerid][jAttachEscx][i] = 1;
				InfoJugador[playerid][jAttachEscy][i] = 1;
				InfoJugador[playerid][jAttachEscz][i] = 1;
				InfoJugador[playerid][jAttachOcultado][i] = false;
    			RemovePlayerAttachedObject(playerid,i);
    			ActualizarAccesorios(playerid,i);
			}
		}
		case dCamarasLSPD:
		{
		    if(!response) return 1;
		    SetPVarInt(playerid,"UsandoCamaras_SEG",1);
		    Loop(i,4,0) TextDrawShowForPlayer(playerid,CAMARA_Seg[i]);
			TogglePlayerSpectating(playerid, true);
		    SetPlayerInterior(playerid,InfoCamara[listitem][CamInt]);
		    AttachCameraToObject(playerid,OBJ_Camara[listitem]);
		    Mensaje(playerid,C_INFO,"> "#CBLANCO"Para dejar de utilizar la cámara, utiliza "#CINFO"/dejar camara");
		    return 1;
		}
		case dGPS_0:
		{
		    if(!response) return 1;
		    switch(listitem)
		    {
				case 0: Dialog(playerid,dGPS_Negocios,DIALOG_STYLE_LIST,""#CINFO"NEGOCIOS","> 24-7 (shops)\n> Ropa y accesorios\n> Bares y boliches\n> Comida y Restaurant's\n> Tienda de armas\n> HiperMercados\n> Casinos\n> Farmacias\n> Gasolineras","Aceptar","Volver");
				case 1: Dialog(playerid,dGPS_Trabajos,DIALOG_STYLE_LIST,""#CINFO"TRABAJOS","> Camionero \n> Cosechador\n> Repartidor de diarios\n> Basurero\n> Repartidor de pizza\n> Taxista \n> Minero","Aceptar","Volver");
				case 2: Dialog(playerid,dGPS_LPublicos,DIALOG_STYLE_LIST,""#CINFO"LUGARES PUBLICOS","> Comisaria\n> Hospital\n> Centro de licencias\n> Televisión\n> Banco\n> Depósito municipal\n> Comisaria nº2","Aceptar","Volver");
				case 3: Dialog(playerid,dGPS_Conce,DIALOG_STYLE_LIST,""#CINFO"CONCESIONARIOS","> Vehículos usados\n> Grotti\n> Beach motors","Aceptar","Volver");
/*				case 999:
				{
				    new Str[200];
				    Loop(i,sizeof(POS_ZRurales),0)
				    {
				        strcat(Str,POS_ZRurales[i][zonaNombre]);
					}
					Dialog(playerid,dGPS_ZRurales,DIALOG_STYLE_LIST,""#CAZUL2"GPS - "#CVERDE"ZONAS RURALES",Str,"Aceptar","Volver");
				}*/
				case 4: Dialog(playerid,dBuscadorVeh,DIALOG_STYLE_INPUT,"GPS - "#CVERDE"Buscar un vehículo",""#CBLANCO"Introduce la Pantente del vehículo que deseas buscar (FORMATO: "#CVERDE"LLL-NNN)","Buscar","Cancelar");
			}
		}
		case dGPS_Negocios:
		{
		    if(!response) return MostrarGPS(playerid);
			new Str[80],Str_[300],i_;
			SetPVarInt(playerid,"GPS_TipoNEG",listitem);
			new TIPO = GetPVarInt(playerid,"GPS_TipoNEG");
		    foreach(Negocios,i)
		    {
		        if(InfoNegocio[i][nTipo] == TIPO)
		        {
		            new Float:Distancia = GetPlayerDistanceFromPoint(playerid,InfoNegocio[i][nEntrada_x],InfoNegocio[i][nEntrada_y],InfoNegocio[i][nEntrada_z]);
					A_Format(Str,"> %s "#CVERDE"(Distancia: %0.2f M)\n",InfoNegocio[i][nNombre],Distancia);
					strcat(Str_,Str);
					A_Format(Str,"GPS_Neg_%d",i_);
					SetPVarInt(playerid,Str,i);
					i_++;
				}
			}
			Dialog(playerid,dGPS_Negocios_0,DIALOG_STYLE_LIST,""#CAZUL2"GPS",Str_,"Aceptar","Volver");
			return 1;
		}
		case dGPS_Negocios_0:
		{
		    if(!response) return MostrarGPS(playerid);
		    new ID = listitem,StrPVar[40];
		    A_Format(StrPVar,"GPS_Neg_%d",ID);
		    new i = GetPVarInt(playerid,StrPVar);
			CheckpointGPS(playerid,InfoNegocio[i][nEntrada_x],InfoNegocio[i][nEntrada_y],InfoNegocio[i][nEntrada_z],3);
   			return 1;
		}
		case dGPS_Trabajos:
		{
		    if(!response) return MostrarGPS(playerid);
		    switch(listitem)
		    {
		        case 0: CheckpointGPS(playerid,2430.00000000,-2115.69995117,13.80000019,5);//camionero
		        case 1: CheckpointGPS(playerid,-382.9777,-1426.2620,26.3193,5);//agricultor
		        case 2: CheckpointGPS(playerid,2028.3854,-1274.0673,20.9812,5);//repartidor de diarios
		        case 3: CheckpointGPS(playerid,1279.0297,-1248.3020,14.010,5);//basurero
		        case 4: CheckpointGPS(playerid,2104.5315,-1810.7769,13.5547,3);//repartidor (pizza)
		        case 5: CheckpointGPS(playerid,2164.3105,-1732.3943,13.543,3);//Taxista.
		        case 6: CheckpointGPS(playerid,816.7039,856.6274,12.7891,3);//Minero
			}
		}
		case dGPS_LPublicos:
		{
		    if(!response) return MostrarGPS(playerid);
		    switch(listitem)
		    {
		        case 0: CheckpointGPS(playerid,1536.8943,-1657.3226,13.5469,5);//Comisaria
		        case 1: CheckpointGPS(playerid,1205.7839,-1336.5894,13.019,5);//hospital
		        case 2: CheckpointGPS(playerid,1165.9354,-1741.1923,13.3984,5);//licencias
		        case 3: CheckpointGPS(playerid,640.2530,-1356.0043,13.3991,5);//television
		        case 4: CheckpointGPS(playerid,1481.3887,-1774.3002,15.3466,5);//banco
		        case 5: CheckpointGPS(playerid,1678.1840,-1700.0654,13.1708,5);//depósito municipal
		        case 6: CheckpointGPS(playerid,2082.9968,-2097.3772,13.5469,5);//comisaria nº 2
			}
		}
		case dGPS_Conce:
		{
		    if(!response) return MostrarGPS(playerid);
		    switch(listitem)
		    {
		        case 0: CheckpointGPS(playerid,1526.4135,-1024.5988,23.9359,5);//autos usados
		        case 1: CheckpointGPS(playerid,554.1650,-1249.0645,16.9042,5);//grotti
		        case 2: CheckpointGPS(playerid,478.8169,-1777.2671,5.4558,5);//wang playa
			}
		}
/*		case dGPS_ZRurales:
		{
		    if(!response) return MostrarGPS(playerid);
			CheckpointGPS(playerid,POS_ZRurales[listitem][zPosx],POS_ZRurales[listitem][zPosy],POS_ZRurales[listitem][zPosz],5);
			return 1;
		}
*/
		case dMercadoNegro:
		{
		    if(!response) return 1;
		    switch(listitem)
		    {
		        case 0:
		        {
					if(GetPlayerMoney(playerid) < 20) return Error(playerid,"¡Dinero insuficiente!");
					Manos_Desocupadas
					GiveObject(playerid, GOAT(INV_VENDA));
		            QuitarDinero(playerid,20);
		            Mensaje(playerid,-1,"Compraste una venda. Para vendar a alguien, usa "#CINFO"/vendar");
		            return 1;
				}
		        case 1:
		        {
					if(GetPlayerMoney(playerid) < 30) return Error(playerid,"¡Dinero insuficiente!");
					Manos_Desocupadas
					GiveObject(playerid, GOAT(INV_SOGA));
		            QuitarDinero(playerid,30);
		            Mensaje(playerid,-1,"Compraste una soga. Para atar a alguien, usa "#CINFO"/atar");
		            return 1;
				}
				case 2:
				{
				    if(InfoJugador[playerid][jBomba]) return Error(playerid,"¡Solo puedes tener una bomba!");
				    if(GetPlayerMoney(playerid) < 35000) return Error(playerid,"¡Dinero insuficiente!");
				    InfoJugador[playerid][jBomba] = true;
				    QuitarDinero(playerid,35000);
				    Mensaje(playerid,-1,"Compraste una "#CROJO"BOMBA. "#CBLANCO"Para plantarla, utiliza "#CINFO"(/plantar bomba)");
				    return 1;
				}
				case 3:
				{
					if(GetPlayerMoney(playerid) < 30) return Error(playerid,"¡Dinero insuficiente!");
					Manos_Desocupadas
					GiveObject(playerid, GOAT(INV_MASCARA));
		            QuitarDinero(playerid,30);
		            Mensaje(playerid,-1,"Compraste una máscara. Para ponertela o sacartela, usa "#CINFO"/mascara");
		            return 1;
				}
		        case 4:
		        {
					if(GetPlayerMoney(playerid) < 18000) return Error(playerid,"¡Dinero insuficiente!");
					Manos_Desocupadas
					GiveObject(playerid, GOAT(INV_DINAMITA));
		            QuitarDinero(playerid,18000);
		            Mensaje(playerid,-1,"Compraste una dinamita. Usa "#CINFO"/dinamita "#CBLANCO"para plantarla. "#CVERDE"(Al colocarla, explotará automáticamente en 5 segundos)");
		            return 1;
				}
				case 5:
				{
					if(GetPlayerMoney(playerid) < 160) return Error(playerid,"¡Dinero insuficiente!");
					if( GetPVarInt(playerid,"TIENE_PINZA") ) return Error(playerid,"¡Ya tienes una pinza!");
					SetPVarInt(playerid,"TIENE_PINZA", 1);
		            QuitarDinero(playerid,160);
		            Mensaje(playerid,-1,"Compraste una pinza por "#CINFO"$160.");
					AutoRol(playerid,"compra una pinza");
		            return 1;
				}
			}
		}
		case dCTecnologia:
		{
		    if(!response) return 1;

			Manos_Desocupadas

		    new
		        NegID = ID_Negocio(playerid);

			if(NegID == INVALID_BUSINESS_ID) return 1;

			if(InfoNegocio[NegID][nStock][listitem] < 1)
			    return Mensaje(playerid, -1, "El negocio no tiene más stock de este producto.");

			if(GetPlayerMoney(playerid) < ProductInfo[InfoNegocio[NegID][nTipo]][listitem][productPrice])
			    return MensajeF(playerid, -1, "¡No tienes suficiente dinero! Necesitas "#CROJO"$%d "#CBLANCO"más para comprarlo.", ProductInfo[InfoNegocio[NegID][nTipo]][listitem][productPrice] - GetPlayerMoney(playerid));

			QuitarDinero(playerid, ProductInfo[InfoNegocio[NegID][nTipo]][listitem][productPrice]);
			InfoNegocio[NegID][nDinero] += ProductInfo[InfoNegocio[NegID][nTipo]][listitem][productPrice];
			SacarStockNegocio(NegID, listitem);
			InfoNegocio[NegID][nVentaStock][listitem] ++;

		    switch(listitem)
		    {
		        case 0:
		        {
					new
						NumeroCel_ = Rand(100000,999999);

					GiveObject(playerid, GOAT(INV_CEL), NumeroCel_);

					MensajeF(playerid,-1,"Compraste un celular "#CVERDE"(Número: %d). "#CBLANCO"Usa "#CINFO"/celular",NumeroCel_);
					AutoRol(playerid,"compra un celular.");
				}
				case 1:
				{
					GiveObject(playerid, GOAT(INV_GPS));
		            Mensaje(playerid,-1,"Compraste un GPS. Utiliza "#CINFO"/gps");
					AutoRol(playerid,"compra un GPS.");
				}
				case 2:
				{
					GiveObject(playerid, GetObjectAtWeapon(43), 100);
					Mensaje(playerid, -1, "Compraste una cámara fotográfica. Para apuntar, presione "#CVERDE"Click derecho. "#CBLANCO"Presione "#CVERDE"Click izquierdo "#CBLANCO"para sacar la foto.");
				    AutoRol(playerid,"compra una cámara de fotos.");
				}
				case 3:
				{
				    AutoRol(playerid,"compra un buscador satelital.");
				    Mensaje(playerid, -1, "Compraste un buscador satelital de vehículos. Usa "#CINFO"/gps "#CBLANCO"y selecciona la última opción para utilizarlo.");
				    InfoJugador[playerid][jBuscadorVeh] = true;
				}
				case 4:
				{
				    GiveObject(playerid, GOAT(INV_WALKIETALKIE));
				    AutoRol(playerid,"compra un buscador satelital.");
				    Mensaje(playerid, -1, "Compraste un Walkie-Talkie. Usa "#CINFO"/objeto "#CBLANCO"para más información.");
				}
			}
		}
		case dEditarFam:
		{
		    if(!response) return 0;
		    if(!listitem) return Dialog(playerid,dFamNombre,DIALOG_STYLE_INPUT,"Editar familia",""#CBLANCO"Escriba el nuevo nombre de la familia:","Aceptar","Cancelar");
			new i = GetPVarInt(playerid,"EDITAR_FAM");
			if(listitem == 1)
			{
			    GetPlayerPos(playerid,InfoFamilia[i][fPos_x],InfoFamilia[i][fPos_y],InfoFamilia[i][fPos_z]);
				Mensaje(playerid,-1,"Posición de familia, fue ajustada a la tuya");
				ActualizarFamilia(i);
			}
			else if(listitem == 2)
			{
			    new
					i_ = -1;

				while( famInfo:i_++ < famInfo )
				{
					InfoFamilia[i][famInfo:i_] = 0;
				}

				new Str[18];
				A_Format(Str,"Familias/%d.ini",i);
				fremove(Str);

			    Mensaje(playerid,-1,"> Familia borrada");

				return 1;
			}
		}
		case dFamNombre:
		{
		    if(!response || !strlen(inputtext)) return 0;
			new i = GetPVarInt(playerid,"EDITAR_FAM");
		    alm(InfoFamilia[i][fNombre],inputtext);
		    ActualizarFamilia(i);
			Mensaje(playerid,-1,"> Nombre ajustado correctamente");
			return 1;
		}
		case dCMedicamentos:
		{
		    if(!response) return 1;

		    new
		        NegID = ID_Negocio(playerid);

			if(NegID == INVALID_BUSINESS_ID) return 1;

			if(InfoNegocio[NegID][nStock][listitem] < 1)
			    return Mensaje(playerid, -1, "El negocio no tiene más stock de este producto.");

			if(GetPlayerMoney(playerid) < ProductInfo[InfoNegocio[NegID][nTipo]][listitem][productPrice])
			    return MensajeF(playerid, -1, "¡No tienes suficiente dinero! Necesitas "#CROJO"$%d "#CBLANCO"más para comprarlo.", ProductInfo[InfoNegocio[NegID][nTipo]][listitem][productPrice] - GetPlayerMoney(playerid));

			QuitarDinero(playerid, ProductInfo[InfoNegocio[NegID][nTipo]][listitem][productPrice]);
			InfoNegocio[NegID][nDinero] += ProductInfo[InfoNegocio[NegID][nTipo]][listitem][productPrice];
			SacarStockNegocio(NegID, listitem);
			InfoNegocio[NegID][nVentaStock][listitem] ++;

		    if(listitem == 0)
		    {
				InfoJugador[playerid][jIbu400] += 5;
				AutoRol(playerid,"compra una tableta de 5 ibupirac x 400");
				return 1;
			}
			else if(listitem == 1)
			{
				InfoJugador[playerid][jIbu600] += 5;
				AutoRol(playerid,"compra una tableta de 5 ibupirac x 600");
				return 1;
			}
		}
		case dTomarMed:
		{
			if(!response) return 1;
			if(listitem == 0)
			{
			    if(!InfoJugador[playerid][jIbu400]) return Error(playerid,"¡No tienes Ibupirac x 400!");
				InfoJugador[playerid][jIbu400]--;
				if((GetTickCount() - GetPVarInt(playerid,"UltimaTomaI")) < 60000*1)
				{
				    if(IsPlayerInAnyVehicle(playerid)) RemovePlayerFromVehicle(playerid);
					cmd_vomitar(playerid,"");
					AutoRol(playerid,"toma su ibupirac, y vomita por una sobredosis de medicamentos");
					return 1;
				}

				AutoRol(playerid,"toma su ibupirac x 400");
				new Float:HP;
				GetPlayerHealth(playerid,HP);
				SetPlayerHealth(playerid,HP + 10);

				if(!IsPlayerInAnyVehicle(playerid))
				{
					ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
				}

				SetPVarInt(playerid,"UltimaTomaI",GetTickCount());
				SetPVarInt(playerid, "Efecto_ibupirac", (60 * 10) / 8);
				SetPlayerDrunkLevel(playerid,0);
				return 1;
			}
			else if(listitem == 1)
			{
			    if(!InfoJugador[playerid][jIbu600]) return Error(playerid,"¡No tienes Ibupirac x 600!");
				InfoJugador[playerid][jIbu600]--;
				if((GetTickCount() - GetPVarInt(playerid,"UltimaTomaI")) < 60000*3)
				{
					if(IsPlayerInAnyVehicle(playerid)) RemovePlayerFromVehicle(playerid);
					cmd_vomitar(playerid,"");
					AutoRol(playerid,"toma su ibupirac, y vomita por una sobredosis de medicamentos");
					return 1;
				}

				AutoRol(playerid,"toma su ibupirac x 600");
				new Float:HP;
				GetPlayerHealth(playerid,HP);
				SetPlayerHealth(playerid,HP + 22);
				if(!IsPlayerInAnyVehicle(playerid))
				{
					ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
				}
				SetPVarInt(playerid,"UltimaTomaI",GetTickCount());
				SetPVarInt(playerid, "Efecto_ibupirac", (60 * 20) / 8);
				SetPlayerDrunkLevel(playerid,0);
				return 1;
			}
		}
		case dDarMed:
		{
		    if(!response) return DeletePVar(playerid,"DAR_MED_ID");
		    new ID = GetPVarInt(playerid,"DAR_MED_ID");
		    if(listitem == 0)
		    {
			    if(!InfoJugador[playerid][jIbu400]) return Error(playerid,"¡No tienes Ibupirac x 400!");
				InfoJugador[playerid][jIbu400]--;
				InfoJugador[ID][jIbu400]++;
				new Str[60];
				A_Format(Str,"le da a %s una pastilla de Ibupirac x 400",NombreJugador(ID));

				if(!IsPlayerInAnyVehicle(playerid))
				{
					ApplyAnimation(playerid,"DEALER","shop_pay",3,0,0,1,0,3000,true);
				}

				if(!IsPlayerInAnyVehicle(ID))
				{
					ApplyAnimation(ID,"INT_SHOP","shop_shelf",3,0,0,1,0,3000,true);
				}

				AutoRol(playerid,Str);
			}
			else if(listitem == 1)
			{
			    if(!InfoJugador[playerid][jIbu600]) return Error(playerid,"¡No tienes Ibupirac x 600!");
				InfoJugador[playerid][jIbu600] --;
				InfoJugador[ID][jIbu600]++;
				new Str[60];
				A_Format(Str,"le da a %s una pastilla de Ibupirac x 600",NombreJugador(ID));

				if(!IsPlayerInAnyVehicle(playerid))
				{
					ApplyAnimation(playerid,"DEALER","shop_pay",3,0,0,1,0,3000,true);
				}

				if(!IsPlayerInAnyVehicle(ID))
				{
					ApplyAnimation(ID,"INT_SHOP","shop_shelf",3,0,0,1,0,3000,true);
				}

				AutoRol(playerid,Str);
			}
			DeletePVar(playerid,"DAR_MED_ID");
		}
		case dBuscadorVeh:
		{
		    if(!response) return 1;

			new plate = veh_strToPlate(inputtext);
			
		    if(plate == -1) return Mensaje(playerid, -1, "Formato inválido. Una patente tiene el formato "#CAMARILLO"XX XXX-XXX"#CBLANCO", como por ejemplo "#CAMARILLO"2B F5C-A22");

		    foreach(veh, i) {
			
		        if(veh_getPlate(i) == plate) {
				
					TextoJugador(playerid, _TD("~b~~h~BUSCANDO VEHÍCULO..."), 4000, 3);
					SetTimerEx("EncontrarVeh", 5000, false, "ii", playerid, i);
					return 1;
				}
			}
			return Mensaje(playerid, -1, "El GPS no encontró vehículos con esa patente.");
		}
		case dCambiarPass:
		{
		    if(!response) return 1;
		    if(strlen(inputtext) < 1 || strlen(inputtext) > MAX_CARACTERES_CLAVE -1) return Error(playerid,"Debe tener de 1 a "#MAX_CARACTERES_CLAVES".");
			InfoJugador[playerid][jClave] = udb_hash(inputtext);

			new
				Str[60];

			SetPlayerVarInt (playerid, "Clave", InfoJugador[playerid][jClave]);
			A_Format(Str,"%s cambió su contraseña a: %s",NombreJugador_(playerid), inputtext);
			Log("cp",Str);
			Mensaje (playerid, -1, "Su contraseña fue cambiada exitosamente");
			return 1;
		}
		case dCComida_pi:
		{
		    if(!response) return 1;

			Manos_Desocupadas

		    new
		        NegID = ID_Negocio(playerid);

			if(NegID == INVALID_BUSINESS_ID) return 1;

			if(InfoNegocio[NegID][nStock][listitem] < 1)
			    return Mensaje(playerid, -1, "El negocio no tiene más stock de este producto.");

			if(GetPlayerMoney(playerid) < ProductInfo[InfoNegocio[NegID][nTipo]][listitem][productPrice])
			    return MensajeF(playerid, -1, "¡No tienes suficiente dinero! Necesitas "#CROJO"$%d "#CBLANCO"más para comprarlo.", ProductInfo[InfoNegocio[NegID][nTipo]][listitem][productPrice] - GetPlayerMoney(playerid));

			QuitarDinero(playerid, ProductInfo[InfoNegocio[NegID][nTipo]][listitem][productPrice]);
			InfoNegocio[NegID][nDinero] += ProductInfo[InfoNegocio[NegID][nTipo]][listitem][productPrice];

			SacarStockNegocio(NegID, listitem);
			InfoNegocio[NegID][nVentaStock][listitem] ++;
			switch(listitem)
			{
			    case 0:
			    {
					SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_SPRUNK);
					AutoRol(playerid,"compra una lata de gaseosa");
				}
				case 1:
				{
					GiveObject(playerid, GOAT(INV_PIZZACHICA), 4);
					Mensaje(playerid, -1, "Compraste una "#CAMARILLO"Pizza chica (4 consumiciones). "#CBLANCO"Usa "#CINFO"/comer");
					AutoRol(playerid,"compra una pizza chica");
				}
				case 2:
				{
					GiveObject(playerid, GOAT(INV_PIZZAGRANDE), 8);
					Mensaje(playerid, -1, "Compraste una "#CAMARILLO"Pizza grande (8 consumiciones). "#CBLANCO"Usa "#CINFO"/comer");
					AutoRol(playerid,"compra una pizza grande");
				}
			}
		}
		case dCComida_h:
		{
		    if(!response) return 1;

			Manos_Desocupadas

		    new
		        NegID = ID_Negocio(playerid);

			if(NegID == INVALID_BUSINESS_ID) return 1;

			if(InfoNegocio[NegID][nStock][listitem] < 1)
			    return Mensaje(playerid, -1, "El negocio no tiene más stock de este producto.");

			if(GetPlayerMoney(playerid) < ProductInfo[InfoNegocio[NegID][nTipo]][listitem][productPrice])
			    return MensajeF(playerid, -1, "¡No tienes suficiente dinero! Necesitas "#CROJO"$%d "#CBLANCO"más para comprarlo.", ProductInfo[InfoNegocio[NegID][nTipo]][listitem][productPrice] - GetPlayerMoney(playerid));

			QuitarDinero(playerid, ProductInfo[InfoNegocio[NegID][nTipo]][listitem][productPrice]);
			InfoNegocio[NegID][nDinero] += ProductInfo[InfoNegocio[NegID][nTipo]][listitem][productPrice];
			SacarStockNegocio(NegID, listitem);
			InfoNegocio[NegID][nVentaStock][listitem] ++;

			switch(listitem)
			{
			    case 0:
			    {
 					SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_SPRUNK);
		 			AutoRol(playerid,"compra una lata de gaseosa");
				}
				case 1:
				{
					GiveObject(playerid, GOAT(INV_HAMBCHICA), 4);
					Mensaje(playerid, -1, "Compraste una "#CAMARILLO"Hamburguesa chica (4 consumiciones). "#CBLANCO"Usa "#CINFO"/comer");
					AutoRol(playerid,"compra una Hamburguesa chica");
				}
				case 2:
				{
					GiveObject(playerid, GOAT(INV_HAMBGRANDE), 8);
					Mensaje(playerid, -1, "Compraste una "#CAMARILLO"Hamburguesa grande (8 consumiciones). "#CBLANCO"Usa "#CINFO"/comer");
					AutoRol(playerid,"compra una Hamburguesa grande");
				}
			}
		}
		case dCComida_po:
		{
		    if(!response) return 1;

			Manos_Desocupadas

		    new
		        NegID = ID_Negocio(playerid);

			if(NegID == INVALID_BUSINESS_ID) return 1;

			if(InfoNegocio[NegID][nStock][listitem] < 1)
			    return Mensaje(playerid, -1, "El negocio no tiene más stock de este producto.");

			if(GetPlayerMoney(playerid) < ProductInfo[InfoNegocio[NegID][nTipo]][listitem][productPrice])
			    return MensajeF(playerid, -1, "¡No tienes suficiente dinero! Necesitas "#CROJO"$%d "#CBLANCO"más para comprarlo.", ProductInfo[InfoNegocio[NegID][nTipo]][listitem][productPrice] - GetPlayerMoney(playerid));

			QuitarDinero(playerid, ProductInfo[InfoNegocio[NegID][nTipo]][listitem][productPrice]);
			InfoNegocio[NegID][nDinero] += ProductInfo[InfoNegocio[NegID][nTipo]][listitem][productPrice];
			SacarStockNegocio(NegID, listitem);
			InfoNegocio[NegID][nVentaStock][listitem] ++;

			switch(listitem)
			{
			    case 0:
			    {
					SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_SPRUNK);
					AutoRol(playerid,"compra una lata de gaseosa");
				}
				case 1:
				{
					GiveObject(playerid, GOAT(INV_POLLOCHICO), 4);
					Mensaje(playerid, -1, "Compraste un "#CAMARILLO"Pollo chico (4 consumiciones). "#CBLANCO"Usa "#CINFO"/comer");
					AutoRol(playerid,"compra un pollo chico");
				}
				case 2:
				{
					GiveObject(playerid, GOAT(INV_POLLOGRANDE), 8);
					Mensaje(playerid, -1, "Compraste un "#CAMARILLO"Pollo grande (8 consumiciones). "#CBLANCO"Usa "#CINFO"/comer");
					AutoRol(playerid,"compra un pollo grande");
				}
			}
		}
		case dEstadio:
		{
			if(!response) return 1;
			switch(listitem)
			{
			    case 0:
			    {
			        PosEx(playerid,-1372.0627, 1649.1442, 1052.6855, 14);//MOTOCROSS
				}
			    case 1:
			    {
			        PosEx(playerid,-1424.4020, -664.6694, 1065.5156, 4);//RALLY
			        CongelarEx(playerid, 3);
				}
			    case 2:
			    {
			        PosEx(playerid,-1363.1294, 933.6328, 1036.4626, 15);//CRASHARENA
				}
				case 3:
				{
				    PosEx(playerid,-1404.4028, -256.3459, 1043.6334, 7);//TC-2000
				}
			}
			SetPVarInt(playerid,"EN_ESTADIO", 1);
			Mensaje(playerid, -1, "Para retirarte del estadio, utiliza "#CINFO"(/salir)");
		}
		case dCBoleto:
		{
		    if(!response) return 1;
		    if(IsPlayerInRangeOfPoint(playerid,50,-1372.0627, 1649.1442, 1052.6855))
	        {
				if(GetPlayerMoney(playerid) < 400) return Error(playerid,"¡Dinero insuficiente!");
				QuitarDinero(playerid, 400);
				new Sanchez, bool:FoundCar;
				if(random(2))
				{
			 		Sanchez = veh_create(468, -1482.4185,1647.1914,1052.531, 0, random(120), random(120), 120);
				}
				else
				{
			 		Sanchez = veh_create(468, -1485.6448,1648.6145,1052.531, 0, random(120), random(120), 120);
				}
				Loop(i, 20, 0)
				{
				    if(VehPrueba[i] == INVALID_VEHICLE_ID)
				    {
						VehPrueba[i] = Sanchez;
					 	FoundCar = true;
						break;
					}
				}
				if(!FoundCar)
				{
				    Error(playerid, "¡No quedan más vehículos de renta!");
					veh_destroy(Sanchez);
				}
				if(GetPVarInt(playerid, "ESTADIO_VEHID")) veh_destroy(GetPVarInt(playerid, "ESTADIO_VEHID"));
				veh_setInterior(Sanchez, 14);
				PutPlayerInVehicle(playerid, Sanchez, 0);
				Mensaje(playerid,-1,"Rentaste una Sanchez, en el estadio "#CVERDE"(MotoCross)");
				SetPVarInt(playerid,"ESTADIO_VEHID", GetPlayerVehicleID(playerid) );
			}
			else if(IsPlayerInRangeOfPoint(playerid,10,-1363.1294, 933.6328, 1036.4626))
	        {
				if(GetPlayerMoney(playerid) < 500) return Error(playerid,"¡Dinero insuficiente!");
				QuitarDinero(playerid, 500);
				new Monster, bool:FoundCar;
				if(random(2))
				{
			 		Monster = veh_create(444, -1369.9388, 1015.5376, 1024.957, 0, random(120), random(120), 120);
				}
				else
				{
			 		Monster = veh_create(444, -1439.6271, 969.2847, 1025.217, 0, random(120), random(120), 120);
				}
				Loop(i, 20, 0)
				{
				    if(VehPrueba[i] == INVALID_VEHICLE_ID)
				    {
						VehPrueba[i] = Monster;
					 	FoundCar = true;
						break;
					}
				}
				if(!FoundCar)
				{
				    Error(playerid, "¡No quedan más vehículos de renta!");
					veh_destroy(Monster);
				}
				if(GetPVarInt(playerid, "ESTADIO_VEHID")) veh_destroy(GetPVarInt(playerid, "ESTADIO_VEHID"));
				veh_setInterior(Monster, GetPlayerInterior(playerid));
				PutPlayerInVehicle(playerid, Monster, 0);
				Mensaje(playerid,-1,"> Rentaste una Monster, en el estadio "#CVERDE"(CrashArena)");
				SetPVarInt(playerid,"ESTADIO_VEHID", GetPlayerVehicleID(playerid) );
			}
			else if(IsPlayerInRangeOfPoint(playerid,10,-1424.4020, -664.6694, 1065.5156))
	        {
				if(GetPlayerMoney(playerid) < 500) return Error(playerid,"¡Dinero insuficiente!");
				QuitarDinero(playerid, 500);
				new VehID, VehModel, bool:FoundCar;
				VehModel = listitem+558;
				if(random(2))
				{
			 		VehID = veh_create(VehModel, -1409.3821,-653.7744,1051.965, 0, random(120), random(120), 120);
				}
				else
				{
			 		VehID = veh_create(VehModel, -1402.6816,-653.2593,1051.3114, 0, random(120), random(120), 120);
				}
				Loop(i, 20, 0)
				{
				    if(VehPrueba[i] == INVALID_VEHICLE_ID)
				    {
						VehPrueba[i] = VehID;
					 	FoundCar = true;
						break;
					}
				}
				if(!FoundCar)
				{
				    Error(playerid, "¡No quedan más vehículos de renta!");
					veh_destroy(VehID);
				}
				if(GetPVarInt(playerid, "ESTADIO_VEHID")) veh_destroy(GetPVarInt(playerid, "ESTADIO_VEHID"));
				veh_setInterior(VehID, 4);
				PutPlayerInVehicle(playerid, VehID, 0);
				Mensaje(playerid,-1,"> Rentaste un auto de rally, en el estadio "#CVERDE"(Rally)");
				SetPVarInt(playerid,"ESTADIO_VEHID", GetPlayerVehicleID(playerid) );
	        }
		    else if(IsPlayerInRangeOfPoint(playerid,20,-1404.4823, -256.3750, 1043.6334))
	        {
				if(GetPlayerMoney(playerid) < 600) return Error(playerid,"¡Dinero insuficiente!");
				QuitarDinero(playerid, 600);
				new Hotring, bool:FoundCar;
				if(random(2))
				{
			 		Hotring = veh_create(502, -1391.7560,-236.7261,1043.047, 0, random(120), random(120), 120);
				}
				else
				{
			 		Hotring = veh_create(502, -1397.2988,-237.6023,1043.0203, 0, random(120), random(120), 120);
				}
				Loop(i, 20, 0)
				{
				    if(VehPrueba[i] == INVALID_VEHICLE_ID)
				    {
						VehPrueba[i] = Hotring;
					 	FoundCar = true;
						break;
					}
				}
				if(!FoundCar)
				{
				    Error(playerid, "¡No quedan más vehículos de renta!");
					veh_destroy(Hotring);
				}
				if(GetPVarInt(playerid, "ESTADIO_VEHID")) veh_destroy(GetPVarInt(playerid, "ESTADIO_VEHID"));
				veh_setInterior(Hotring, 7);
				PutPlayerInVehicle(playerid, Hotring, 0);
				Mensaje(playerid,-1,"Rentaste un Hotring, en el estadio "#CVERDE"(TC-2000)");
				SetPVarInt(playerid,"ESTADIO_VEHID", GetPlayerVehicleID(playerid) );
			}
		}
		case dElegirCasaM:
		{
		    if(!response) return 1;
		    new
				CasaC,
				OBJ_ID = GetPVarInt(playerid, "MuebleID"),
				OBJ_INDEX;

			foreach(Casas, i)
			{
			    if(EsDuenoCasa(playerid, i) || TieneLlaveCasa(playerid,i) )
			    {
			        CasaC++;
			        if(CasaC == (listitem+1))
			        {
						Loop(m, MAX_MUEBLES_CASA, 0)
						{
						    if(!InfoCasa[i][cObjModel][m])
							{
							    BuscarModeIndexInt(OBJ_ID, OBJ_INDEX);
							    if(GetPlayerMoney(playerid) < ObjetosInterior[OBJ_INDEX][1]) return Error(playerid,"¡Dinero insuficiente!");
			               		InfoCasa[i][cObjModel][m] = ObjetosInterior[OBJ_INDEX][0];
			               		MensajeF(playerid, -1, "Agregaste un(a) "#CINFO"%s "#CBLANCO"a tu casa "#CVERDE"(%s) "#CBLANCO"por $%d", ObjetosInterior[OBJ_INDEX][2], InfoCasa[i][cNombre], ObjetosInterior[OBJ_INDEX][1]);
								QuitarDinero(playerid,ObjetosInterior[OBJ_INDEX][1]);
								ActualizarCasa(i, false, m, false);
								return 1;
							}
						}
					}
				}
			}
			return Error(playerid,"Hubo un error en la compra.");
		}


		case dCCasa:
		{
			new i = GetPVarInt(playerid, "ID_CREARCASA");

			InfoCasa[i][cSalida_x] = InfoInteriorCasa[listitem+1][iPos_x];
			InfoCasa[i][cSalida_y] = InfoInteriorCasa[listitem+1][iPos_y];
			InfoCasa[i][cSalida_z] = InfoInteriorCasa[listitem+1][iPos_z];
			InfoCasa[i][cInt]      = InfoInteriorCasa[listitem+1][iInt];
			ActualizarCasa(i);
			DeletePVar(playerid,"ID_CREARCASA");

		}
		case dPrecioyNombreM:
		{
		    if( response )
		    {
				SetPVarInt(playerid,"CONFIRMA_COMPRAM", 1);
				OnPlayerModelSelection(playerid, 1, m_Muebles, GetPVarInt(playerid,"MuebleID"));
			}
		}
		case dElegirAcento:
		{
		    if( response )
		    {
				if(listitem < sizeof(Acentos))
				{
			        InfoJugador[playerid][jAcento] = listitem+1;
			        MensajeF(playerid, -1, "Tu acento fue cambiado a "#CVERDE"%s", Acentos[listitem]);
				}
				else
				{
			        InfoJugador[playerid][jAcento] = 0;
			        Mensaje(playerid, -1, "Tu acento fue "#CROJO"Borrado");
				}
		    }
		}
		case dInfoLSPD:
		{
		    if(!response)
		    {
				return 1;
			}
			switch(listitem)
			{
				case 0:
				{
					SetTimerEx("Claudia_LSPD", NPCTalk(NPC_CLAUDIA, "Bien digame el DNI del individio que desee buscar."), false, "ii", playerid, 0);
				}
				case 1:
				{
					SetTimerEx("Claudia_LSPD", NPCTalk(NPC_CLAUDIA, "Bien digame el DNI del individio."), false, "ii", playerid, 3);
				}
			}
			OnPlayerText(playerid, inputtext);
		}
		case dBuscarPersona:
		{
		    if(!IsNumeric(inputtext) || strlen(inputtext) != 6 )
		    {
		        NPCTalk(NPC_CLAUDIA, "Ese DNI no existe!");
		        return 1;
			}
			new
			    DNI = strval(inputtext),
				TalkTime = NPCTalk(NPC_CLAUDIA, "Aguarde un momento..       "),
				string[100], string2[60];

  			new str[7];
			valstr(str, DNI);
			OnPlayerText(playerid, str);

			foreach(Player, i)
			{
			    if(InfoJugador[i][jDNI] == DNI)
			    {

					strcat(string, "Encontrado.\n");
					A_Format(string2, "Nombre: %s, Edad: %d años.", NombreJugador_(i), InfoJugador[i][jEdad]);
					strcat(string, string2);
					strcat(string, "\nAhora le digo los antecedentes.");

					SetPVarString(playerid, "Claudia_Antecedentes", string);
					SetPVarInt(playerid, "Claudia_ID", i);
					SetTimerEx("Claudia_LSPD", TalkTime, false, "ii", playerid, 1);
					return 1;
			    }
			}
			NPCTalk(NPC_CLAUDIA, "Lo siento, el sistema no encontro ese DNI.");
		}
		case dAgregarAnt:
		{
		    if(!response)
			{
			    DeletePVar(playerid, "DNI_AgregarAnt");
				DeletePVar(playerid, "Parte_AgregarAnt");
				return 1;
			}
		    if(!GetPVarInt(playerid, "Parte_AgregarAnt"))
			{
			    if(!IsNumeric(inputtext) || strlen(inputtext) != 6 )
			    {
			        NPCTalk(NPC_CLAUDIA, "Ese DNI no existe!");
			        return 1;
				}
				foreach(Player, i)
				{
				    if(InfoJugador[i][jDNI] == strval(inputtext))
				    {
						SetPVarInt(playerid, "DNI_AgregarAnt", i);
						SetPVarInt(playerid, "Parte_AgregarAnt", true);
						Dialog(playerid, dAgregarAnt, DIALOG_STYLE_INPUT, ""#CVERDE"Claudia: "#CBLANCO"Una breve descripción del antecedente?", ""#CBLANCO"Escribe una breve descripción del delito.\n\nMínimo: "#CROJO"10 caracteres\n"#CBLANCO"Máximo: "#CROJO""#MAX_CARACTERES_ANTECEDENTE" caracteres", "Hablar", "Cancelar");
						return 1;
					}
				}
				return NPCTalk(NPC_CLAUDIA, "Ese DNI no existe!");
			}
			else
			{
			    new
			        DNI = GetPVarInt(playerid, "DNI_AgregarAnt"),
					len = strlen(inputtext);

				if(!(6 <= len <= MAX_CARACTERES_ANTECEDENTE)) return Dialog(playerid, dAgregarAnt, DIALOG_STYLE_INPUT, ""#CVERDE"Claudia: "#CBLANCO"Una breve descripción del antecedente?", ""#CBLANCO"Escribe una breve descripción del delito.\n\nMínimo: "#CROJO"10 caracteres\n"#CBLANCO"Máximo: "#CROJO""#MAX_CARACTERES_ANTECEDENTE" caracteres", "Hablar", "Cancelar");
				if(!IsPlayerConnected(DNI))
				{
				    Error(playerid, "El jugador se desconectó. ~n~Si cometio una falta de rol, reportalo en "#FORO_SERVER"");
				    DeletePVar(playerid, "DNI_AgregarAnt");
					DeletePVar(playerid, "Parte_AgregarAnt");
					return 1;
				}
				OnPlayerText(playerid, inputtext);
				AgregarAntecedente(DNI, inputtext);
			 	NPCTalk(NPC_CLAUDIA, "Muy bien, ya lo agregué al sistema.");
			    DeletePVar(playerid, "DNI_AgregarAnt");
				DeletePVar(playerid, "Parte_AgregarAnt");
			}
		}
/*		case dFundirMineral:
		{
		    if(!response)
		    {
				DeletePVar(playerid, "Tipo_Mineral");
				return 1;
			}
			if(!IsNumeric(inputtext)) return Error(playerid, "¡Escribe el número de gramos para fundir!");

			new
				val = strval(inputtext),
				index = GetPVarInt(playerid, "Tipo_Mineral");

			if(!val)
			{
				DeletePVar(playerid, "Tipo_Mineral");
				return Error(playerid, "Escribe un número válido.");
			}

			if(val > InfoJugador[playerid][jMineral][index])
			{
				DeletePVar(playerid, "Tipo_Mineral");
				return Error(playerid, "¡No tienes esa cantidad!");
			}

			if(GetPlayerMoney(playerid) < 150)
			{
				DeletePVar(playerid, "Tipo_Mineral");
				return Error(playerid, "¡Necesitas ~g~$150 ~w~para usar el horno!");
			}
			new
				CarbonNecesitado = floatround(floatmul(float(val), 0.4)),
				MineralFundido   = floatround(floatmul(float(val), 0.75));

			if(InfoJugador[playerid][jMineral][M_TYPE_CARBON] < CarbonNecesitado)
			{
			    new str[50];
			    A_Format(str, "Necesitas %dgr de carbón para fundir %dgr.", CarbonNecesitado, val);
			    return Error(playerid, str);
			}

			if(Timer_FundiendoMinerales != INVALID_TIMER_ID)
			    return Error(playerid, "¡El Horno está ocupado!");

			FundiendoMinerales = CreateDynamic3DTextLabel("Fundido: 0% (0 gr)", C_ROJO, 253.3179,-95.3065,1001.5178, 3.5);

			SetPVarInt(playerid, "FundiendoMetal", true);
			SetPVarInt(playerid, "GramosFundidos", 0);
			SetPVarInt(playerid, "TotalGramos", MineralFundido);

			Timer_FundiendoMinerales = SetTimerEx("FundiendoMetales", 3000, true, "ii", playerid, index);

			InfoJugador[playerid][jMineral][M_TYPE_CARBON] -= CarbonNecesitado;
			InfoJugador[playerid][jMineral][index] -= val;

			MensajeF(playerid, -1, "Fundiste %dgr de %s, utilizaste %dgr de Carbón y obtubiste %dgr de %s fundido.", val, GetMinName(index), CarbonNecesitado, MineralFundido, GetMinName(index) );
			QuitarDinero(playerid, 150);

			OBJ_FuegoHorno[0] = CreateDynamicObject(3461, 253.60, -97.07, 999.13,   0.00, 0.00, 0.00);
			OBJ_FuegoHorno[1] = CreateDynamicObject(3461, 253.00, -95.35, 999.13,   0.00, 0.00, 0.00);
			OBJ_FuegoHorno[2] = CreateDynamicObject(3461, 253.12, -97.66, 999.13,   0.00, 0.00, 0.00);
			OBJ_FuegoHorno[3] = CreateDynamicObject(3461, 252.96, -96.27, 999.13,   0.00, 0.00, 0.00);
			OBJ_FuegoHorno[4] = CreateDynamicObject(3461, 253.32, -93.96, 999.13,   0.00, 0.00, 0.00);
			OBJ_FuegoHorno[5] = CreateDynamicObject(3461, 253.66, -94.57, 999.13,   0.00, 0.00, 0.00);

			AutoRol(playerid, "enciende fuego con su encendedor para fundir minerales");
		}*/
		case dRadio:
		{
		    if(!IsPlayerInAnyVehicle(playerid) || !response)
		        return 1;

			new
			    VehID = GetPlayerVehicleID(playerid);

			switch(listitem)
			{
			    case RADIO_LSTV:
			    {
			    	StopAudioStreamForVehicle(VehID);
			        PlayAudioStreamForVehicle(VehID, RadioLSTV);
				}
				case RADIO_REGGAE:
			    {
			    	StopAudioStreamForVehicle(VehID);
			        PlayAudioStreamForVehicle(VehID, URL_REGGAE);
				}
				case RADIO_RAP:
			    {
			    	StopAudioStreamForVehicle(VehID);
			        PlayAudioStreamForVehicle(VehID, URL_RAP);
				}
				case RADIO_APAGAR:
				{
			    	StopAudioStreamForVehicle(VehID);
		  			PlayerPlaySound(playerid,1056,0.0,0.0,0.0);
		  			Veh[VehID][vRadio] = RADIO_APAGAR;
		  			return 1;
				}
			}
			Veh[VehID][vRadio] = listitem;
			PlayerPlaySound(playerid,1056,0.0,0.0,0.0);
		}
		case dSpecReport:
		{
		    if(!response)
		    {
		        DeletePVar(playerid, "REPORT_IDSPEC");
		        return 1;
			}
			new str[5];
			valstr(str, GetPVarInt(playerid, "REPORT_IDSPEC"));
			DeletePVar(playerid, "REPORT_IDSPEC");
			cmd_spec(playerid, str);
			return 1;
		}
		case dElegirFamFac:
		{
		    if(response)//Familia
		    {
		        MensajeF(playerid, -1, "Elegiste mantener tu "#CAMARILLO"Familia, "#CBLANCO"fuiste automáticamente expulsado de "#CINFO"%s", NombreFaccion(ID_Faccion(playerid)) );
				InfoJugador[playerid][jLiderFam] = 0;
				InfoJugador[playerid][jMiembroFam] = 0;
				InfoJugador[playerid][jRango] = 1;
		    }
		    else // Facción
		    {
		        MensajeF(playerid, -1, "Elegiste mantener tu "#CAMARILLO"Facción, "#CBLANCO"fuiste automáticamente expulsado de "#CINFO"%s", InfoFamilia[ID_Familia(playerid)][fNombre] );
				InfoJugador[playerid][jLiderFam] = 0;
				InfoJugador[playerid][jMiembroFam] = 0;
				InfoJugador[playerid][jRangoFam] = 1;
			}
			ActualizarCuenta(playerid);
			return 1;
		}
		case dJustificarOffD:
		{
		    new str[135];
		    A_Format(str, "salió de servicio por: \"%s\" ", inputtext);
		    LogAdmin(playerid, str);
		    Mensaje(playerid, -1, "Datos guardados. ");
		}
		case dSolicitarADM:
		{
			if(!response) return 1;

			static
			    OldRequest[MAX_PLAYERS];

			new
				timec = gettime();

			if(timec < OldRequest[playerid])
			    return MensajeF(playerid, -1, "Debes esperar "#CVERDE"%dm %ds "#CBLANCO"para enviar otra solicitud.", (OldRequest[playerid]-timec) / 60, (OldRequest[playerid]-timec) % 60 );

			OldRequest[playerid] = timec+(60*3);

			switch(listitem)
			{
			    case 0:
				{
				    new
						str[100];

				    A_Format(str, "El jugador "#CINFO"%s "#CBLANCO"solicita un "#CAYUDANTE"Ayudante "#CVERDE"(/as %d)", NombreJugador_(playerid), playerid);

					Mensaje(playerid, 0x12D68FFF, "Has enviado una solicitud, espera a que un ayudante la acepte. Intenta nuevamente si no es aceptada.");

			        foreach(Player, i)
			            if(InfoJugador[i][jAdmin] == Ayudante || InfoJugador[i][jAdmin] == Dueno)
			                Mensaje(i, -1, str);

				}
			    case 1:
				{
					Mensaje(playerid, 0x12D68FFF, "Has enviado una solicitud, espera a que un administrador la acepte. Si esta no es aceptada, puede solicitar nuevamente.");
			        MensajeAdminF(-1, "El jugador "#CINFO"%s "#CBLANCO"solicita un "#CVERDE"Mod/Admin "#CVERDE"(/as %d)", Moderador, NombreJugador_(playerid), playerid);
				}
			}
			SetPVarInt(playerid, "SolicitaADM", true);
		}
		case dFaccion:
		{
		    if(!response) return 1;

			if(listitem == 0)
			{
				new
				    str2[MAX_RANGO_LEN+22],
				    str[(MAX_RANGOS_FAC*sizeof(str2))+25],
					fac = InfoJugador[playerid][jLider];

				Loop(i, InfoFaccion[fac][fRangos], 0)
				{
				    A_Format(str2, "Rango %d "#CVERDE"(%s)\n", i, InfoRango[fac][i]);
				    strcat(str, str2);
				}
				new
				    str3[50];
			    A_Format(str3, "Rango Lider "#CINFO"(%s)\n", InfoFaccion[fac][fRLider]);
			    strcat(str, str3);
			    A_Format(str2, "- Cambiar cantidad "#CROJO"(%d)", InfoFaccion[fac][fRangos]);
			    strcat(str, str2);
			    Dialog(playerid, dFac_Rangos, DIALOG_STYLE_LIST, ""#CNARANJA"Editar Rangos", str, "Aceptar", "<");
			}
			else if(listitem == 1)
			{
				StringFacMiembros = "";

			    new
			        str[35];

				A_Format(str, "Facciones/Miembros%d.ini", InfoJugador[playerid][jLider]);
			    INI_ParseFile(str, "CargarFac_Miembros", .bExtra = true, .extra = InfoJugador[playerid][jLider]);
			    Dialog(playerid, dFac_Miembros, DIALOG_STYLE_LIST, ""#CNARANJA"Miembros", StringFacMiembros, "Aceptar", "<");
				StringFacMiembros = "";
			}
		}
		case dFac_Miembros:
		{
		    if(!response)
		        return cmd_faccion(playerid, "");

			new
				Name[MAX_PLAYER_NAME], Str_[2], strRank[30];

			sscanf(inputtext, "p< >s[24]s[2]s[30]", Name, Str_, strRank);

			new
			    Str[60];
			A_Format(Str, ""#CNARANJA"%s", Name);
			SetPVarString(playerid, "FAC_MIEMBRO_EDITAR", Name);
			Dialog(playerid, dFac_Miembros_2, DIALOG_STYLE_LIST, Str, "Cambiar Rango\nExpulsar de la Facción\nVer última conexión", "Aceptar", "<");
		}
		case dFac_Miembros_2:
		{
			if(!response)
			{
			    DeletePVar(playerid, "FAC_MIEMBRO_EDITAR");

				StringFacMiembros = "";
			    new
			        str[35];

				A_Format(str, "Facciones/Miembros%d.ini", InfoJugador[playerid][jLider]);
			    INI_ParseFile(str, "CargarFac_Miembros", .bExtra = true, .extra = InfoJugador[playerid][jLider]);
			    Dialog(playerid, dFac_Miembros, DIALOG_STYLE_LIST, ""#CNARANJA"Miembros", StringFacMiembros, "Aceptar", "<");
				StringFacMiembros = "";
				return 1;
			}
			switch(listitem)
			{
			    case 0:	//Cambiar Rango
			    {
			        Dialog(playerid, dFac_MiembrosRank, DIALOG_STYLE_INPUT, ""#CNARANJA"Rango", ""#CBLANCO"Escribe el nº de rango deseado para este jugador", "Aceptar", "<");
				}
			    case 1: //Expulsar
				{
    				new
			    		Name[MAX_PLAYER_NAME], Str[120];

					GetPVarString(playerid, "FAC_MIEMBRO_EDITAR", Name, MAX_PLAYER_NAME);
					A_Format(Str, ""#CBLANCO"¿Estás seguro que quieres expulsar a "#CINFO"%s "#CBLANCO"de la facción?", Name);
					Dialog(playerid, dFac_MiembrosKick, DIALOG_STYLE_MSGBOX, ""#CNARANJA"Confirmar expulsión", Str, "Expulsar", "Atrás");
				}
			    case 2: //Ver última conexión
			    {
    				new
			    		Name[MAX_PLAYER_NAME], str[120];

					GetPVarString(playerid, "FAC_MIEMBRO_EDITAR", Name, MAX_PLAYER_NAME);
					//Jugador conectado.
					foreach(Player, i)
					{
					    if(!strcmp(Name, pName(i)))
					    {
							A_Format(str, ""#CBLANCO"El jugador "#CINFO"%s "#CBLANCO"está conectado actualmente", Name);
							Dialog(playerid, dFac_MiembrosConex, DIALOG_STYLE_MSGBOX, "Facción > Miembros > Conexión", str, "<", "");
							return 1;
						}
					}
					//Jugador desconectado
					new
					    querystr [80];

					opmysql_format(querystr, sizeof (querystr), "SELECT `UltimaConexion` FROM `Usuarios` WHERE `Nombre` = '%e'", Name);
					opmysql_tquery(querystr, "OnMemberDataReceived", "isi", playerid, Name, 0);
			    }
			}
		}
		case dFac_MiembrosKick:
		{
			if(!response)
			{
				new
			    	Str[MAX_PLAYER_NAME];

				GetPVarString(playerid, "FAC_MIEMBRO_EDITAR", Str, MAX_PLAYER_NAME);
				Dialog(playerid, dFac_Miembros_2, DIALOG_STYLE_LIST, Str, "Cambiar Rango\nExpulsar de la Facción\nVer última conexión", "Aceptar", "<");
				return 1;
			}
			new
			    Str[40],
				INI:Arch,
 				Name[MAX_PLAYER_NAME];

			GetPVarString(playerid, "FAC_MIEMBRO_EDITAR", Name, MAX_PLAYER_NAME);

			A_Format(Str, "Facciones/Miembros%d.ini", ID_Faccion(playerid) );

			Arch = INI_Open(Str);

			INI_SetTag(Arch, "Miembros");
			INI_RemoveEntry(Arch, Name);
			INI_Close(Arch);

			//Jugador conectado.
			foreach(Player, i)
			{
				if(!strcmp(Name, pName(i)))
				{
					MensajeFaccionF(InfoJugador[playerid][jLider], ""#CNARANJA"[Facción] "#CBLANCO"%s(%d) expulsó a "#CINFO"%s(%d) "#CBLANCO"de la facción", pName(playerid), playerid, pName(i), i);
					InfoJugador[i][jMiembro] = 0;

					// Volver al menú
					cmd_faccion(playerid, "");
					return 1;
				}
			}

			//Jugador desconectado
			MensajeFaccionF(InfoJugador[playerid][jLider], ""#CNARANJA"[Facción] "#CBLANCO"%s(%d) expulsó a "#CINFO"%s "#CBLANCO"de la facción", pName(playerid), playerid, Name);

			SetUserVarInt (Name, "Miembro", 0);

			// Volver al menú
			cmd_faccion(playerid, "");
		}
		case dFac_MiembrosRank:
		{
			if(!response)
			{
				new
			    	Str[MAX_PLAYER_NAME];

				GetPVarString(playerid, "FAC_MIEMBRO_EDITAR", Str, MAX_PLAYER_NAME);
				Dialog(playerid, dFac_Miembros_2, DIALOG_STYLE_LIST, Str, "Cambiar Rango\nExpulsar de la Facción\nVer última conexión", "Aceptar", "<");
				return 1;
			}
			if(!IsNumeric(inputtext))
   				return Dialog(playerid, dFac_MiembrosRank, DIALOG_STYLE_INPUT, ""#CNARANJA"Rango", ""#CBLANCO"Escribe el nº de rango deseado para este jugador", "Aceptar", "<");

			if(!IsValidRank(ID_Faccion(playerid), strval(inputtext)))
   				return Dialog(playerid, dFac_MiembrosRank, DIALOG_STYLE_INPUT, ""#CNARANJA"Rango", ""#CBLANCO"El rango escrito no existe para esta facción.", "Aceptar", "<");

			new
 				Name[MAX_PLAYER_NAME],
		 		Rank = strval(inputtext);

			new
			    Str[40];

			GetPVarString(playerid, "FAC_MIEMBRO_EDITAR", Name, MAX_PLAYER_NAME);
			//Jugador conectado.
			foreach(Player, i)
			{
				if(!strcmp(Name, pName(i)))
				{
					MensajeFaccionF(InfoJugador[playerid][jLider], ""#CNARANJA"[Facción] "#CBLANCO"%s(%d) cambió el rango de "#CINFO"%s(%d) "#CBLANCO"a "#CAMARILLO"%s(%d)", pName(playerid), playerid, pName(i), i, InfoRango[InfoJugador[playerid][jLider]][Rank], Rank);
					InfoJugador[i][jRango] = Rank;
					A_Format(Str, "Facciones/Miembros%d.ini", ID_Faccion(playerid) );
					new
					    INI:Arch = INI_Open(Str);

					INI_SetTag(Arch, "Miembros");
					INI_WriteInt(Arch, Name, Rank);
					INI_Close(Arch);

					// Volver al menú
					Dialog(playerid, dFac_Miembros_2, DIALOG_STYLE_LIST, Name, "Cambiar Rango\nExpulsar de la Facción\nVer última conexión", "Aceptar", "<");
					return 1;
				}
			}
			//Jugador desconectado
			MensajeFaccionF(InfoJugador[playerid][jLider], ""#CNARANJA"[Facción] "#CBLANCO"%s(%d) cambió el rango de "#CINFO"%s "#CBLANCO"a "#CAMARILLO"%s(%d)", pName(playerid), playerid, Name, InfoRango[InfoJugador[playerid][jLider]][Rank], Rank);

			SetUserVarInt (Name, "Rango", 0);

			A_Format(Str, "Facciones/Miembros%d.ini", ID_Faccion(playerid) );

			new
				INI: Arch = INI_Open(Str);

			INI_SetTag(Arch, "Miembros");
			INI_WriteInt(Arch, Name, Rank);
			INI_Close(Arch);

			// Volver al menú
			Dialog(playerid, dFac_Miembros_2, DIALOG_STYLE_LIST, Name, "Cambiar Rango\nExpulsar de la Facción\nVer última conexión", "Aceptar", "<");
		}

		case dFac_MiembrosConex:
		{
			new
			    Str[MAX_PLAYER_NAME];

			GetPVarString(playerid, "FAC_MIEMBRO_EDITAR", Str, MAX_PLAYER_NAME);
			Dialog(playerid, dFac_Miembros_2, DIALOG_STYLE_LIST, Str, "Cambiar Rango\nExpulsar de la Facción\nVer última conexión", "Aceptar", "<");
		}
		case dFac_Rangos:
		{
		    if(!response)
		        return cmd_faccion(playerid, "");

			new
				fac = InfoJugador[playerid][jLider];

			if(listitem < InfoFaccion[fac][fRangos])
			{
				SetPVarInt(playerid, "FAC_EDIT_RANK", listitem);
			    Dialog(playerid, dFac_Rango_2, DIALOG_STYLE_INPUT, "Facción > Editar Rangos > Nombre", ""#CBLANCO"Escribe el nuevo nombre del rango "#CVERDE"(3-"#MAX_RANGO_LEN" caracteres)", "Aceptar", "<");
			}
			else if(listitem == InfoFaccion[fac][fRangos])
			{
			    SetPVarInt(playerid, "EDIT_LEADERRANK", true);
			    Dialog(playerid, dFac_Rango_2, DIALOG_STYLE_INPUT, "Facción > Editar Rangos > Lider", ""#CBLANCO"Escribe el nuevo nombre del rango lider "#CVERDE"(3-"#MAX_RANGO_LEN" caracteres)", "Aceptar", "<");
			}
			else if(listitem == InfoFaccion[fac][fRangos]+1)
			{
			    SetPVarInt(playerid, "EDIT_COUNTRANKS", true);
			    Dialog(playerid, dFac_Rango_2, DIALOG_STYLE_INPUT, "Facción > Editar Rangos > Cantidad", ""#CBLANCO"Escribe la cantidad de rangos deseada "#CVERDE"(1-"#MAX_RANGOS_FAC")", "Aceptar", "<");
			}
			return 1;
		}
		case dFac_Rango_2:
		{
			new
			    str2[MAX_RANGO_LEN+22],
			    str[(MAX_RANGOS_FAC*sizeof(str2))+25],
				fac = InfoJugador[playerid][jLider];

		    if(!response)
		    {
				Loop(i, InfoFaccion[fac][fRangos], 0)
				{
				    A_Format(str2, "Rango %d "#CVERDE"(%s)\n", i, InfoRango[fac][i]);
				    strcat(str, str2);
				}
				new
				    str3[40];
			    A_Format(str3, "Rango Lider "#CINFO"(%s)\n", InfoFaccion[fac][fRLider]);
			    strcat(str, str3);
			    A_Format(str2, "- Cambiar cantidad "#CROJO"(%d)", InfoFaccion[fac][fRangos]);
			    strcat(str, str2);
			    Dialog(playerid, dFac_Rangos, DIALOG_STYLE_LIST, "Facción > Editar Rangos", str, "Aceptar", "<");
		        return 1;
			}
		    if(GetPVarInt(playerid, "EDIT_COUNTRANKS"))
		    {
		        new
		            val = strval(inputtext);

		        if(!IsNumeric(inputtext) || val > MAX_RANGOS_FAC || val < 1)
			    	return Dialog(playerid, dFac_Rango_2, DIALOG_STYLE_INPUT, "Facción > Editar Rangos > Cantidad", ""#CBLANCO"Escribe la cantidad de rangos deseada "#CVERDE"(1-"#MAX_RANGOS_FAC")", "Aceptar", "<");

				DeletePVar(playerid, "EDIT_COUNTRANKS");
				InfoFaccion[fac][fRangos] = val;
				MensajeF(playerid, -1, "La cantidad de rangos fue cambiada a "#CVERDE"%d.", val);

				A_Format(str2, "Facciones/%d.ini", fac);

				new
				    INI:Arch = INI_Open(str2);

				INI_SetTag(Arch, "data");
				INI_WriteInt(Arch, "Rangos", val);
				INI_Close(Arch);

				Loop(i, InfoFaccion[fac][fRangos], 0)
				{
				    if(isnull(InfoRango[fac][i]))
				    {
						alm(InfoRango[fac][i], "Nuevo rango");
					}
				    A_Format(str2, "Rango %d "#CVERDE"(%s)\n", i, InfoRango[fac][i]);
				    strcat(str, str2);
				}
				new
				    str3[40];
			    A_Format(str3, "Rango Lider "#CINFO"(%s)\n", InfoFaccion[fac][fRLider]);
			    strcat(str, str3);
			    A_Format(str2, "- Cambiar cantidad "#CROJO"(%d)", InfoFaccion[fac][fRangos]);
			    strcat(str, str2);
			    Dialog(playerid, dFac_Rangos, DIALOG_STYLE_LIST, "Facción > Editar Rangos", str, "Aceptar", "<");
			}
			else if(GetPVarInt(playerid, "EDIT_LEADERRANK"))
			{
		        new
		            len = strlen(inputtext);

		        if(len >= MAX_RANGO_LEN || len < 3)
				{
				    return Dialog(playerid, dFac_Rango_2, DIALOG_STYLE_INPUT, "Facción > Editar Rangos > Lider", ""#CBLANCO"Escribe el nombre del rango "#CVERDE"(3-"#MAX_RANGO_LEN" caracteres)", "Aceptar", "<");
				}
				DeletePVar(playerid, "EDIT_LEADERRANK");
				MensajeF(playerid, -1, "El rango lider fue cambiado a "#CINFO"%s", inputtext);
				alm(InfoFaccion[fac][fRLider], inputtext);

				A_Format(str2, "Facciones/%d.ini", fac);

				new
				    INI:Arch = INI_Open(str2);

				INI_SetTag(Arch, "data");
				INI_WriteString(Arch, "RangoL", inputtext);
				INI_Close(Arch);

				Loop(i, InfoFaccion[fac][fRangos], 0)
				{
				    A_Format(str2, "Rango %d "#CVERDE"(%s)\n", i, InfoRango[fac][i]);
				    strcat(str, str2);
				}
				new
				    str3[40];
			    A_Format(str3, "Rango Lider "#CINFO"(%s)\n", InfoFaccion[fac][fRLider]);
			    strcat(str, str3);
			    A_Format(str2, "- Cambiar cantidad "#CROJO"(%d)", InfoFaccion[fac][fRangos]);
			    strcat(str, str2);
			    Dialog(playerid, dFac_Rangos, DIALOG_STYLE_LIST, "Facción > Editar Rangos", str, "Aceptar", "<");
			}
			else
			{
		        new
		            len = strlen(inputtext),
					index = GetPVarInt(playerid, "FAC_EDIT_RANK");

		        if(len >= MAX_RANGO_LEN || len < 3)
				{
				    return Dialog(playerid, dFac_Rango_2, DIALOG_STYLE_INPUT, "Facción > Editar Rangos > Nombre", ""#CBLANCO"Escribe el nombre del rango "#CVERDE"(3-"#MAX_RANGO_LEN" caracteres)", "Aceptar", "<");
				}
				MensajeF(playerid, -1, "El rango nº "#CVERDE"%d "#CBLANCO"fue cambiado a "#CINFO"%s", index, inputtext);
				alm(InfoRango[fac][index], inputtext);

				A_Format(str2, "Facciones/%d.ini", fac);

				new
				    INI:Arch = INI_Open(str2);

				INI_SetTag(Arch, "data");
				A_Format(str2, "Rango%d", index);
				INI_WriteString(Arch, str2, inputtext);
				INI_Close(Arch);

				Loop(i, InfoFaccion[fac][fRangos], 0)
				{
				    A_Format(str2, "Rango %d "#CVERDE"(%s)\n", i, InfoRango[fac][i]);
				    strcat(str, str2);
				}
				new
				    str3[40];
			    A_Format(str3, "Rango Lider "#CINFO"(%s)\n", InfoFaccion[fac][fRLider]);
			    strcat(str, str3);
			    A_Format(str2, "- Cambiar cantidad "#CROJO"(%d)", InfoFaccion[fac][fRangos]);
			    strcat(str, str2);
			    Dialog(playerid, dFac_Rangos, DIALOG_STYLE_LIST, "Facción > Editar Rangos", str, "Aceptar", "<");
			}
			return 1;
		}
		case dReglas:
		{
		    if(response)
		        Dialog(playerid, dReglas_2, DIALOG_STYLE_MSGBOX, Reglas[listitem][eTitulo], Reglas[listitem][eCuerpo], "Cerrar", "<<");
		}
		case dReglas_2:
		{
		    if(!response)
				cmd_reglas(playerid, "");
		}
		case dTicket:
		{
		    if(!response)
		    {
		        return 1;
			}
			switch(listitem)
			{
			    case 0://Preguntas generales
			    {
 					Dialog(playerid, dPNuevoSoporte, DIALOG_STYLE_LIST, "Soporte > Preguntas Generales", "Preguntas de comandos, sistemas, y otros.\nQuiero aprender a rolear\n¿Cuál es el foro?\n¿Cuál es el TS3?\n¿Cuales son la reglas?", "Enviar", "Volver");
				}
			    case 1://Problemas
			    {
			        Dialog(playerid, dTicket_Problemas, DIALOG_STYLE_LIST, "Soporte > Problemas", "Problemas con mi vehículo (Perdida)\nProblemas con mi casa\nProblemas con mi personaje\nProblemas con mi dinero\nProblemas con mi facción/familia\nProblemas con el servidor [BUG]", "Siguiente", "Volver");
			    }
			    case 2://Estoy callendo
			    {
					if(GetPlayerAnimationIndex(playerid) == 1130)
					{
				        CongelarEx(playerid);
				        MensajeAdminF(C_VERDE, "[Ticket] "#CBLANCO"%s(%d) está callendo y necesita ser teletransportado.", Moderador, NombreJugador_(playerid), playerid);
						Mensaje(playerid, -1, "Se le informó a la administración su problema, en unos momentos será atendido.");
					}
					else
					{
						return Error(playerid, "No estás callendo.");
					}
			    }
				case 3://No veo a nadie
				{
			        new
			            Float:x, Float:y, Float:z;

					GetPlayerPos(playerid, x, y, z);
					if(z > 800.0)
					{
					    if(GetPlayerInterior(playerid) == 0 || GetPlayerVirtualWorld(playerid) == 0)
					    {
				        	MensajeAdminF(C_VERDE, "[Ticket] "#CBLANCO"%s(%d) está bugueado.", Moderador, NombreJugador_(playerid), playerid);
						}
						else
						{
				        	MensajeAdminF(C_VERDE, "[Ticket] "#CBLANCO"%s(%d) POSIBLEMENTE está bugueado.", Moderador, NombreJugador_(playerid), playerid);
						}
						Mensaje(playerid, -1, "Se le informó a la administración su problema, en unos momentos será atendido.");
					}
					else
					{
					    Mensaje(playerid, -1, "Para solucionar su problema, use "#CINFO"/desbug.");
					}
				}
				case 4://Apelación de sanción
				{
				    if(InfoJugador[playerid][jEncarcelado] == 0)
				        return Mensaje(playerid, -1, "Usted no está en la cárcel. Si fue kickeado/baneado/advertido injustamente deberá apelar en "#CAMARILLO""#FORO_SERVER"");

			        Dialog(playerid, dTicket_ASancion, DIALOG_STYLE_MSGBOX, "Soporte > Apelar Sanción", "Esta opción es para apelar en el caso de que fueras enviado a Jail por un administrador injustamente.\nSi usted es conciente que la sanción fue correcta, presiona "#CAMARILLO"Volver", "Enviar", "Volver");
				}
				case 5://Soy nuevo.. ¿Qué hago??
				{
					// Mucha información
					Mensaje(playerid,  1, "=====================================================================================");
					Mensaje(playerid, -1, "Primero deberás aprender las reglas, puedes visualizarlas en "#CINFO"/reglas");
					Mensaje(playerid, -1, "Te recomendamos usar el comando "#CINFO"/informacion "#CBLANCO"para conocer más el servidor.");
					Mensaje(playerid, -1, ""#CAMARILLO" Recomendaciones para jugadores nuevos:");
					Mensaje(playerid, -1, "• Consigue trabajo: Compra un GPS en un hipermercado para encontrar un trabajo.");
					Mensaje(playerid, -1, "• Registrate en "#CAMARILLO"ciudadrealrp.x10.bz "#CBLANCO"para familiarizarte con la comunidad, y estar al tanto de todo.");
					Mensaje(playerid, -1, "• Consigue celular, conoce gente en la calle y hacete amigos.");
					Mensaje(playerid, -1, "• Abrete una cuenta en el banco, y comienza a ahorrar para en un futuro comprar casas, negocios, o vehículos.");
					Mensaje(playerid, -1, "• Coloca anuncios en la central de televisión para buscar un trabajo de mayor calidad.");
					Mensaje(playerid,  1, "=====================================================================================");
				}
				case 6://Reportar (Trampa)
				{
					Mensaje(playerid, -1, "Si quiere reportar otro jugador por una infracción cometida, use "#CINFO"/re(portar) [ID/Nombre] [Razón]");
				}
				case 7://Otros
				{
				    Dialog(playerid, dTicket_Otros, DIALOG_STYLE_INPUT, "Soporte > Otros", ""#CBLANCO"Asegurate que este ticket no aparece en ninguna de las opciones anteriormente mencionadas, de esa forma el soporte podria llegar mas rapido\n\nEscribe detalladamente la información de tu ticket a continuación.", "Enviar", "Volver");
				}
			}
		}
/*		case dTicket_PGenerales:
		{
		    if(!response)
		        return cmd_soporte(playerid, "");

			switch(listitem)
			{
			    case 0://Preguntas de comandos
			    {
			        Dialog(playerid, dPComandos, DIALOG_STYLE_INPUT, "Soporte > Preguntas > Comandos", ""#CBLANCO"¡Atención! Posiblemente, lo que usted necesita esté en el comando "#CINFO"/informacion.\n"#CBLANCO"Deberá consultas este antes de enviar un ticket a la administración.\n\nSi usted no encontró la respuesta, puede escribir la duda y enviarla, de\nlo contrario presione el botón "#CAMARILLO"Volver "#CBLANCO"y consulte el comando nombrado anteriormente.", "Enviar", "Volver");
			    }
			    case 1://Preguntas de trabajos
				{
    				Dialog(playerid, dPTrabajos, DIALOG_STYLE_INPUT, "Soporte > Preguntas > Trabajos", ""#CBLANCO"¡Atención! Posiblemente, lo que usted necesita esté en el comando "#CINFO"/informacion.\n"#CBLANCO"Deberá consultas este antes de enviar un ticket a la administración.\n\nSi usted no encontró la respuesta, puede escribir la duda y enviarla, de\nlo contrario presione el botón "#CAMARILLO"Volver "#CBLANCO"y consulte el comando nombrado anteriormente.", "Enviar", "Volver");
				}
			    case 2://Preguntas acerca de sistemas
				{
    				Dialog(playerid, dPSistemas, DIALOG_STYLE_INPUT, "Soporte > Preguntas > Sistemas", ""#CBLANCO"¡Atención! Posiblemente, lo que usted necesita esté en el comando "#CINFO"/informacion.\n"#CBLANCO"Deberá consultas este antes de enviar un ticket a la administración.\n\nSi usted no encontró la respuesta, puede escribir la duda y enviarla, de\nlo contrario presione el botón "#CAMARILLO"Volver "#CBLANCO"y consulte el comando nombrado anteriormente.", "Enviar", "Volver");
				}
			    case 3://Preguntas de RolePlay
				{
    				Dialog(playerid, dPRolePlay, DIALOG_STYLE_LIST, "Soporte > Preguntas > RolePlay", "Deseo ver el tutorial nuevamente\nSolicito un ayudante", "Enviar", "Volver");
				}
			    case 4://Soy nuevo y necesito soporte
			    {
   			    }
			}
		}*/
		case dTicket_Problemas:
		{
		    if(!response)
		        return cmd_soporte(playerid, "");

			switch(listitem)
			{
			    case 0://Problemas con mi vehículo (Perdida)
				{
				    if(GetPlayerScore(playerid) < 3)
				        return Error(playerid, "Necesitas ser mayor a nivel 3 para mandar un ticket de problemas.");

				    Dialog(playerid, dPVehiculo, DIALOG_STYLE_INPUT, "Soporte > Problemas > Problemas con vehículo", ""#CBLANCO"¡Atención! Si su vehículo figura en /cuenta, la administración no se hace cargo. \nEn ese caso presione "#CAMARILLO"Volver "#CBLANCO"y llame a la policía o use un GPS.\nSi su vehículo tiene un problema real, describa lo ocurrido y presione Enviar.\n\nRecuerde que este ticket es enviado a Administradores Directores unicamente.", "Enviar", "Volver");
				}
			    case 1://Problemas con mi casa
				{
				    if(GetPlayerScore(playerid) < 3)
				        return Error(playerid, "Necesitas ser mayor a nivel 3 para mandar un ticket de problemas.");

    				Dialog(playerid, dPCasa, DIALOG_STYLE_INPUT, "Soporte > Problemas > Problemas con casa", ""#CBLANCO"¡Atención! Esta opción es unicamente para problemas graves con su casa, ya que es enviado a los\n "#CDUENO"Administradores Directores "#CBLANCO"unicamente, y se supone que no puede ser resuelto\npor un Moderador o Administrador.\n\nDescriba el problema ocurrido:", "Enviar", "Volver");
				}
			    case 2://Problemas con mi personaje
				{
 				    if(GetPlayerScore(playerid) < 3)
				        return Error(playerid, "Necesitas ser mayor a nivel 3 para mandar un ticket de problemas.");

   					Dialog(playerid, dPPersonaje, DIALOG_STYLE_INPUT, "Soporte > Problemas > Problemas con personaje", ""#CBLANCO"¡Atención! Esta opción es únicamente para problemas con su personaje, como por ejemplo quedarse\nencerrado y no poder salir, o no poder moverse, etc.\n\nDescriba el problema ocurrido a continuación:", "Aceptar", "Volver");
				}
				case 3://Problemas con mi dinero
				{
				    if(GetPlayerScore(playerid) < 3)
				        return Error(playerid, "Necesitas ser mayor a nivel 3 para mandar un ticket de problemas.");

					Dialog(playerid, dPDinero, DIALOG_STYLE_INPUT, "Soporte > Problemas > Problemas con dinero", ""#CBLANCO"¡Atención! Si usted realmente tubo una pérdida de dinero por un bug del servidor, use esta opción.\nLa administración investigará todas sus movidas de dinero, si usted miente a la administración se verá\nbaneado. Analize cuidadosamente\ncómo fue la pérdida, que la pérdida halla sido real.\n\nLuego de eso, escribe cómo fue el problema:", "Enviar", "Volver");
				}
			    case 4://Problemas con mi facción/familia
			    {
					if(!InfoJugador[playerid][jLider] && !InfoJugador[playerid][jLiderFam])
					    return Mensaje(playerid, -1, "Solo los líderes de facción/familia tienen acceso a esta opción.");

					Dialog(playerid, dPFamFac, DIALOG_STYLE_INPUT, "Soporte > Problemas > Facción/Familia", ""#CBLANCO"Esta opción está disponible para los líderes de facción/familia, y es utilizada para reportar problemas del GameMode con tu facción.\n\nEscriba cuál es el problema:", "Enviar", "Volver");
				}
			    case 5://Problemas con el servidor [BUG]
			    {
				    if(GetPlayerScore(playerid) < 3)
				        return Error(playerid, "Necesitas ser mayor a nivel 3 para mandar un ticket de problemas.");

			        Dialog(playerid, dPBug, DIALOG_STYLE_INPUT, "Soporte > Problemas > Reportar BUG", ""#CBLANCO"¡Atención! Esta opción es UNICAMENTE para problemas reales del servidor, que halla un error en el GameMode que afecte al juego. \nUna vez enviado este ticket, el "#CDUENO"Director de Script "#CBLANCO"lo analizará  estará arreglando esto lo antes posible.\n\nEscriba el Bug a continuación:", "Enviar", "Volver");
			    }
			}
		}

		case dPNuevoSoporte:
		{
		    if(!response)
		        return cmd_soporte(playerid, "");

			switch(listitem)
			{
				case 0://Preguntas de comandos, sistemas, etc.
				{
				    Mensaje(playerid, -1, "Primero, busque su respuesta en "#CINFO"/informacion. "#CBLANCO"¿No aparece en /informacion? Usa "#CINFO"/duda "#CBLANCO"para recibir ayuda de otros jugadores.");
				}
				case 1://Quiero aprender a rolear
				{
				    Mensaje(playerid, -1, "Para aprender a rolear correctamente, visite nuestro foro: "#CAMARILLO"ciudadrealrp.x10.bz. "#CBLANCO"¡Ahí encontrará muchas guias que lo ayudarán!");
				}
			    case 2://Cuál es el foro
			    {
			        Mensaje(playerid, -1, "La dirección de nuestra "#CAMARILLO"página web y foro "#CBLANCO"es: "#CROJO"ciudadrealrp.x10.bz");
				}
			    case 3://Cual es el TS3
				{
			        Mensaje(playerid, -1, "El link del "#CAMARILLO"Discord  "#CBLANCO"es: "#CROJO"https://discord.gg/9WJsYS");
				}
			    case 4://Cuales son las reglas
			    {
					Mensaje(playerid, -1, "Para una visión general de las reglas usa "#CINFO"/reglas "#CBLANCO"| Para una visión detallada visita "#CROJO"ciudadrealrp.x10.bz");
				}
			}
		}

		case dTicket_ASancion:
		{
		    if(!response)
		        return cmd_soporte(playerid, "");

     		MensajeAdminF(C_VERDE, "[Ticket] "#CBLANCO"%s(%d) está apelando su sanción.", Moderador, NombreJugador_(playerid), playerid);
			Mensaje(playerid, -1, "Se le informó a la administración tu apelación.");
		}
		case dTunning:
		{
		    if(!response)
		        return 0;

			SelectTunning(playerid, listitem);
		}
		case dTunning_2:
		{
		    if(!response)
		        return cmd_tunear(playerid, "@SECRETCODE=TUNNING");

			new
			    str2[20],
				VehID = GetPlayerVehicleID(playerid);

			A_Format(str2, "MECANICO_COMP_%d", listitem);
			RequestModVehicle(playerid, VehID, GetPVarInt(playerid, str2));
			Loop(i, 18, 0)
			{
				A_Format(str2, "MECANICO_COMP_%d", i);
				DeletePVar(playerid, str2);
			}
		}
		case dTunning_3:
		{
		    if(!response)
		    {
		        return cmd_tunear(playerid, "@SECRETCODE=TUNNING");
			}
			new
			    ClientID = Mecanico_ClientID[playerid],
				ComponentID = GetPVarInt(playerid, "MECANICO_COMPONENTID"),
				ComponentPrice = GetPVarInt(playerid, "MECANICO_COMPONENTPRICE");

			new
			    ClientName[MAX_PLAYER_NAME];

			GetPVarString(playerid, "MECANICO_CLIENTNAME", ClientName, MAX_PLAYER_NAME);
			if(strcmp(pName(ClientID), ClientName))
			{
			    DeletePVar(playerid, "MECANICO_COMPONENTID");
			    DeletePVar(playerid, "MECANICO_COMPONENTPRICE");
			    DeletePVar(playerid, "MECANICO_CLIENTNAME");
				return 1;
			}

			new
			    Str[150],
				componentSlot = GetVehicleComponentType(ComponentID);

			if(InfoJugador[playerid][jSexo] == 1) // Hombre
				A_Format(Str, ""#CBLANCO"El mecánico "#CINFO"%s "#CBLANCO"ofrece agregarle un/a "#CAMARILLO"%s %s "#CBLANCO" por "#CVERDE"$%d "#CBLANCO"al vehículo.",
				    NombreJugador_(playerid),
				    GetComponentTypeName(componentSlot),
				    GetComponentName(ComponentID),
				    ComponentPrice);

			else if(InfoJugador[playerid][jSexo] == 2) // Mujer
				A_Format(Str, ""#CBLANCO"La mecánica "#CINFO"%s "#CBLANCO"ofrece agregarle un/a "#CAMARILLO"%s %s "#CBLANCO" por "#CVERDE"$%d "#CBLANCO"al vehículo.",
				    NombreJugador_(playerid),
				    GetComponentTypeName(componentSlot),
				    GetComponentName(ComponentID),
				    ComponentPrice);

			GameTextForPlayer(playerid, "~g~esperando respuesta...", 999*999, 3);
			Dialog(ClientID, dTunning_4, DIALOG_STYLE_MSGBOX, ""#CNARANJA"Oferta", Str, "Aceptar", "Cancelar");
		}
		case dTunning_4:
		{
			new
			    PlayerID = INVALID_PLAYER_ID;

			foreach(Player, i)
			{
		        if(Mecanico_ClientID[i] == playerid)
				{
				    PlayerID = i;
		        	break;
				}
			}
			if(PlayerID == INVALID_PLAYER_ID)
			{
			    return Error(playerid, "El mecánico que te ofreció, se desconectó.");
		    }
		    new
				ComponentID = GetPVarInt(PlayerID, "MECANICO_COMPONENTID"),
				ComponentPrice = GetPVarInt(PlayerID, "MECANICO_COMPONENTPRICE"),
				VehID = GetPVarInt(PlayerID, "MECANICO_VEHID");

			if(ComponentPrice > GetPlayerMoney(playerid))
			{
			    DeletePVar(PlayerID, "MECANICO_COMPONENTID");
			    DeletePVar(PlayerID, "MECANICO_COMPONENTPRICE");
				GameTextForPlayer(PlayerID, "~r~rechazado (no tiene suficiente dinero)", 3000, 3);
				SetTimerEx("cmd_tunear", 3000, false, "is", PlayerID, "@SECRETCODE=TUNNING");
				return 1;
			}
			if(!response) //Rechazar
			{
			    DeletePVar(PlayerID, "MECANICO_COMPONENTID");
			    DeletePVar(PlayerID, "MECANICO_COMPONENTPRICE");
				GameTextForPlayer(PlayerID, "~r~rechazado", 3000, 3);
				SetTimerEx("cmd_tunear", 3000, false, "is", PlayerID, "@SECRETCODE=TUNNING");
				return 1;
			}
			veh_addComponent(VehID, ComponentID);
			ownVeh_addComponent(veh_ownVehID(VehID), ComponentID);

			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x, y, z);
			PlayerPlaySound(playerid, 1133, x, y, z);

		    DeletePVar(PlayerID, "MECANICO_COMPONENTID");
		    DeletePVar(PlayerID, "MECANICO_COMPONENTPRICE");

			GameTextForPlayer(PlayerID, "~g~vendido", 3000, 3);

			new
				Price_Player = ComponentPrice/5,
				Price_Taller = ComponentPrice-Price_Player;

			InfoFaccion[IDMECANICOS][fDinero] += Price_Taller;
			ActualizarFacciones();
			QuitarDinero(playerid, ComponentPrice);
			GivePlayerMoney(PlayerID, Price_Player);

			MensajeF(PlayerID, -1, "El componente fue vendido por "#CVERDE"$%d, "#CBLANCO"de los cuales "#CVERDE"$%d "#CBLANCO"van para vos y "#CVERDE"$%d "#CBLANCO"van al taller.", ComponentPrice, Price_Player, Price_Taller);
			SetTimerEx("cmd_tunear", 3000, false, "is", PlayerID, "@SECRETCODE=TUNNING");
		}
		case dTunning_Col1:
		{
		    if(!response)
		    {
		    	return cmd_tunear(playerid, "@SECRETCODE=TUNNING");
			}
			if(!IsNumeric(inputtext))
			    return Dialog(playerid, dTunning_Col1, DIALOG_STYLE_INPUT, ""#CNARANJA"Color primario", ""#CBLANCO"Escriba el número (ID) del color.", "Aceptar", "Cancelar");

			new
			    Val = strval(inputtext), VehID = GetPVarInt(playerid, "MECANICO_VEHID");

			if(!(0 <= Val <= 255))
			    return Dialog(playerid, dTunning_Col1, DIALOG_STYLE_INPUT, ""#CNARANJA"Color primario", ""#CBLANCO"Solo se admiten colores entre "#CAMARILLO"(0-255)", "Aceptar", "Cancelar");

			new
			    col1, col2;
			veh_getColor(VehID, col1, col2);
			veh_setColor(VehID, Val, col2);
			ownVeh_MySQL_updateInt(veh_ownVehID(VehID), "color2", col2);
			GameTextForPlayer(playerid, "~g~pintando...", 6000, 3);
			SetTimerEx("cmd_tunear", 6000, false, "is", playerid, "@SECRETCODE=TUNNING");
			//Sonido
			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x, y, z);
			PlayerPlaySound(playerid, 1134, x, y, z);

		}
		case dTunning_Col2:
		{
		    if(!response)
		    {
		    	return cmd_tunear(playerid, "@SECRETCODE=TUNNING");
			}
			if(!IsNumeric(inputtext))
			    return Dialog(playerid, dTunning_Col2, DIALOG_STYLE_INPUT, ""#CNARANJA"Color secundario", ""#CBLANCO"Escriba el número (ID) del color.", "Aceptar", "Cancelar");

			new
			    Val = strval(inputtext), VehID = GetPVarInt(playerid, "MECANICO_VEHID");

			if(!(0 <= Val <= 255))
			    return Dialog(playerid, dTunning_Col2, DIALOG_STYLE_INPUT, ""#CNARANJA"Color primario", ""#CBLANCO"Solo se admiten colores entre "#CAMARILLO"(0-255)", "Aceptar", "Cancelar");

			new
			    col1, col2;
			veh_getColor(VehID, col1, col2);
			veh_setColor(VehID, col1, Val);
			ownVeh_MySQL_updateInt(veh_ownVehID(VehID), "color1", col1);
			GameTextForPlayer(playerid, "~g~pintando...", 6000, 3);
			SetTimerEx("cmd_tunear", 6000, false, "is", playerid, "@SECRETCODE=TUNNING");
			//Sonido
			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x, y, z);
			PlayerPlaySound(playerid, 1134, x, y, z);
		}
		case dTunning_Paintjob:
		{
		    if(!response)
		    {
		    	return cmd_tunear(playerid, "@SECRETCODE=TUNNING");
			}
			new
	    		VehID = GetPVarInt(playerid, "MECANICO_VEHID"),
				paintjobid = listitem == 3 ? 0 : listitem+1;

   			veh_setPaintjob(VehID, paintjobid);
			ownVeh_MySQL_updateInt(veh_ownVehID(VehID), "paintjob", paintjobid);
			
			GameTextForPlayer(playerid, "~g~pintando...", 6000, 3);
			SetTimerEx("cmd_tunear", 6000, false, "is", playerid, "@SECRETCODE=TUNNING");
			//Sonido
			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x, y, z);
			PlayerPlaySound(playerid, 1134, x, y, z);
		}
		case dRepairVeh:
		{
		    if(!response)
		        return cmd_tunear(playerid, "@SECRETCODE=TUNNING");

			GameTextForPlayer(playerid, "~g~esperando respuesta...", 999*999, 3);

			new
			    Str[150],
				RepairText[30],
				Price;

			switch(listitem)
			{
			    case 0://Neumáticos
			    {
			        RepairText = "los neumáticos";
			        Price = 850;
				}
				case 1://Estructura
				{
			        RepairText = "la estructura";
			        Price = 1200;
				}
				case 2://Luces
				{
				    RepairText = "los faros";
				    Price = 420;
				}
			}
			SetPVarInt(Mecanico_ClientID[playerid], "MECANICO_REPAIR_", listitem);
			SetPVarInt(Mecanico_ClientID[playerid], "MECANICO_PRECIOREPAIR", Price);

			if(InfoJugador[playerid][jSexo] == 1) // Hombre
				A_Format(Str, ""#CBLANCO"El mecánico "#CINFO"%s "#CBLANCO"ofrece reparar "#CAMARILLO"%s "#CBLANCO"por "#CVERDE"$%d "#CBLANCO"al vehículo.",
				    NombreJugador_(playerid),
					RepairText, Price);

			else if(InfoJugador[playerid][jSexo] == 2) // Mujer
				A_Format(Str, ""#CBLANCO"La mecánica "#CINFO"%s "#CBLANCO"ofrece reparar un/a "#CAMARILLO"%s %s "#CBLANCO" por "#CVERDE"$%d "#CBLANCO"al vehículo.",
				    NombreJugador_(playerid),
					RepairText, Price);

			GameTextForPlayer(playerid, "~g~esperando respuesta...", 999*999, 3);
			Dialog(Mecanico_ClientID[playerid], dRepairVeh_2, DIALOG_STYLE_MSGBOX, ""#CNARANJA"Oferta", Str, "Aceptar", "Cancelar");
		}
		case dRepairVeh_2:
		{
			new
			    Price = GetPVarInt(playerid, "MECANICO_PRECIOREPAIR"),
				PlayerID = INVALID_PLAYER_ID;

		    foreach(Player, i)
		    {
				if(Mecanico_ClientID[i] == playerid)
				{
				    PlayerID = i;
				    break;
				}
			}
			if(PlayerID == INVALID_PLAYER_ID)
			{
				Error(playerid, "El mecánico se desconectó.");
			    return cmd_terminar(playerid, "tunning");
			}
			if(Price > GetPlayerMoney(playerid))
			{
				DeletePVar(playerid, "MECANICO_REPAIR_");
				DeletePVar(playerid, "MECANICO_PRECIOREPAIR");
				GameTextForPlayer(PlayerID, "~r~rechazado (dinero insuficiente)", 4000, 3);
				SetTimerEx("cmd_tunning", 4000, false, "is", PlayerID, "@SECRETCODE=TUNNING");
				return 1;
			}
			if(!response)
			{
				DeletePVar(playerid, "MECANICO_REPAIR_");
				DeletePVar(playerid, "MECANICO_PRECIOREPAIR");
				GameTextForPlayer(PlayerID, "~r~rechazado", 4000, 3);
				SetTimerEx("cmd_tunning", 4000, false, "is", PlayerID, "@SECRETCODE=TUNNING");
				return 1;
			}

			new
			    VehID = GetPVarInt(PlayerID, "MECANICO_VEHID"), RepairPrice = GetPVarInt(playerid, "MECANICO_PRECIOREPAIR");

		    new panels, doors, lights, tires;
		    GetVehicleDamageStatus(VehID, panels, doors, lights, tires);
			switch(GetPVarInt(playerid, "MECANICO_REPAIR_"))
			{
			    case 0://Neumáticos
			    {
		    		tires = encode_tires(0, 0, 0, 0);
			    }
			    case 1://Paneles
			    {
		    		panels = encode_panels(0, 0, 0, 0, 0, 0, 0);
		    		doors = encode_doors(0, 0, 0, 0, 0, 0);
			    }
				case 2://Luces
				{
			    	lights = encode_lights(0, 0, 0, 0);
			    }
			}
			new
				Price_Player = RepairPrice/5,
				Price_Taller = RepairPrice-Price_Player;

			InfoFaccion[IDMECANICOS][fDinero] += Price_Taller;
			ActualizarFacciones();
			QuitarDinero(playerid, RepairPrice);
			GivePlayerMoney(PlayerID, Price_Player);
			MensajeF(PlayerID, -1, "La reparación fue vendida. Las ganancias son "#CVERDE"$%d, "#CBLANCO"de los cuales "#CVERDE"$%d "#CBLANCO"van para vos y "#CVERDE"$%d "#CBLANCO"al taller.", RepairPrice, Price_Player, Price_Taller);
			DeletePVar(playerid, "MECANICO_REPAIR_");
			DeletePVar(playerid, "MECANICO_PRECIOREPAIR");
			GameTextForPlayer(PlayerID, "~g~vendido", 4000, 3);
			SetTimerEx("cmd_tunning", 4000, false, "is", PlayerID, "@SECRETCODE=TUNNING");
		    UpdateVehicleDamageStatus(VehID, panels, doors, lights, tires);
		}
		case dEditarCamara:
		{
		    if(!response)
		    {
		        DeletePVar(playerid, "EDITANDO_CAMARA");
		        DeletePVar(playerid, "EDITANDO_CAMARAID");
		        return 0;
			}
			switch(listitem)
			{
			    case 0://Pos de obj
			    {
					SetPVarInt(playerid, "EDITANDO_CAMARA", true);
					EditDynamicObject(playerid, CamaraVelocidad[GetPVarInt(playerid, "EDITANDO_CAMARAID")][camObjID]);
				}
				case 1://Max speed
				{
				    Dialog(playerid, dEditarCamara_2, DIALOG_STYLE_INPUT, "Editar max velocidad", ""#CBLANCO"Escribe la velocidad máxima de esta cámara.", "Aceptar", "Cancelar");
				}
				case 2://Minxy
				{
				    Mensaje(playerid, -1, "Anda al lugar, y pone /mincamera");
				}
				case 3://Maxxy
				{
				    Mensaje(playerid, -1, "Anda al lugar, y pone /maxcamera");
				}
				case 4://Multa
				{
				    Dialog(playerid, dEditarCamara_3, DIALOG_STYLE_INPUT, "Editar multa", ""#CBLANCO"Escribe el precio de multa.", "Aceptar", "Cancelar");
				}
				case 5://Actualizar/Guardar cámara.
				{
				    new
				        INI:Arch = INI_Open("Camaras_Velocidad.ini"),
						str[15];

				    new
				        slot = GetPVarInt(playerid, "EDITANDO_CAMARA");

					A_Format(str, "X%d", slot);
					INI_WriteFloat(Arch, str, CamaraVelocidad[slot][camX]);
					A_Format(str, "Y%d", slot);
					INI_WriteFloat(Arch, str, CamaraVelocidad[slot][camY]);
					A_Format(str, "Z%d", slot);
					INI_WriteFloat(Arch, str, CamaraVelocidad[slot][camZ]);
					A_Format(str, "Angle%d", slot);
					INI_WriteFloat(Arch, str, CamaraVelocidad[slot][camAngle]);
					A_Format(str, "MinX%d", slot);
					INI_WriteFloat(Arch, str, CamaraVelocidad[slot][camMinX]);
					A_Format(str, "MinY%d", slot);
					INI_WriteFloat(Arch, str, CamaraVelocidad[slot][camMinY]);
					A_Format(str, "MaxX%d", slot);
					INI_WriteFloat(Arch, str, CamaraVelocidad[slot][camMaxX]);
					A_Format(str, "MaxY%d", slot);
					INI_WriteFloat(Arch, str, CamaraVelocidad[slot][camMaxY]);
					A_Format(str, "Speed%d", slot);
					INI_WriteInt(Arch, str, CamaraVelocidad[slot][camSpeed]);
					A_Format(str, "Multa%d", slot);
					INI_WriteInt(Arch, str, CamaraVelocidad[slot][camMulta]);
					INI_Close(Arch);
					Mensaje(playerid, -1, "Cámara actualizada.");
				}
				case 6://Eliminar
				{
				    new
				        slot = GetPVarInt(playerid, "EDITANDO_CAMARA");

				    Iter_Remove(Camaras, slot);
				    DestroyDynamicObject(CamaraVelocidad[slot][camObjID]);
					CamaraVelocidad[slot][camObjID] = 0;
				    DestroyDynamic3DTextLabel(CamaraVelocidad[slot][camLabelID]);
					CamaraVelocidad[slot][camLabelID] = Text3D:0;
				    DestroyDynamicArea(CamaraVelocidad[slot][camZoneID]);
					CamaraVelocidad[slot][camZoneID] = 0;

					for(new i; E_SPEEDCAM_INFO: i < E_SPEEDCAM_INFO; i++)
					{
						CamaraVelocidad[slot][E_SPEEDCAM_INFO: i] = 0;
					}
				    new
				        INI:Arch = INI_Open("Camaras_Velocidad.ini"),
						str[15];

					A_Format(str, "X%d", slot);
					INI_RemoveEntry(Arch, str);
					A_Format(str, "Y%d", slot);
					INI_RemoveEntry(Arch, str);
					A_Format(str, "Z%d", slot);
					INI_RemoveEntry(Arch, str);
					A_Format(str, "Angle%d", slot);
					INI_RemoveEntry(Arch, str);
					A_Format(str, "MinX%d", slot);
					INI_RemoveEntry(Arch, str);
					A_Format(str, "MinY%d", slot);
					INI_RemoveEntry(Arch, str);
					A_Format(str, "MaxX%d", slot);
					INI_RemoveEntry(Arch, str);
					A_Format(str, "MaxY%d", slot);
					INI_RemoveEntry(Arch, str);
					A_Format(str, "Speed%d", slot);
					INI_RemoveEntry(Arch, str);
					A_Format(str, "Multa%d", slot);
					INI_RemoveEntry(Arch, str);
					INI_Close(Arch);
					Mensaje(playerid, -1, "Cámara eliminada.");
				}
			}
		}
		case dEditarCamara_2:
		{
		    if(!response)
				return 1;

			new
			    val = strval(inputtext),
			    slot = GetPVarInt(playerid, "EDITANDO_CAMARAID");

			CamaraVelocidad[slot][camSpeed] = val;
			MensajeF(playerid, -1, "Velocidad de la cámara ID "#CINFO"%d "#CBLANCO"fue ajustada a "#CROJO"%d KM/H", slot, val);
			UpdateCameraLabel(slot, false, false);
			return 1;
		}
		case dEditarCamara_3:
		{
		    if(!response)
				return 1;

			new
			    val = strval(inputtext),
			    slot = GetPVarInt(playerid, "EDITANDO_CAMARAID");

			CamaraVelocidad[slot][camMulta] = val;
			MensajeF(playerid, -1, "Multa de la cámara ID "#CINFO"%d "#CBLANCO"fue ajustado a "#CROJO"$%d", slot, val);
			return 1;
		}
		case dMultarVeh:
		{
		    if(!response)
		    {
				DeletePVar(playerid, "MULTA_VEHID");
				DeletePVar(playerid, "MULTA_PRECIO");
				DeletePVar(playerid, "MULTA_RAZON");
				return 1;
			}
			new
			    Reason[50],
			    Price = GetPVarInt(playerid, "MULTA_PRECIO"),
			    VehID = GetPVarInt(playerid, "MULTA_VEHID"),
				Multa = -1,
				Path[80];

			GetPVarString(playerid, "MULTA_RAZON", Reason, 50);

			DeletePVar(playerid, "MULTA_VEHID");
			DeletePVar(playerid, "MULTA_PRECIO");
			DeletePVar(playerid, "MULTA_RAZON");
			Loop(i, MAX_MULTAS_VEH, 0)
			{
			    A_Format(Path, "Facciones/LSPD/Multas/%s_%d.ini", veh_getPlateAsString(VehID), i);
			    if(!fexist(Path))
			    {
			        Multa = i;
			        break;
				}
			}
			if(Multa == -1)
			{
			    return MensajeF(playerid, -1, "Este vehículo, ya tiene "#CROJO"%d "#CBLANCO"multas. Debes "#CINFO"/embargar "#CBLANCO"este vehículo.", MAX_MULTAS_VEH);
			}
			new
			    File:Arch = fopen(Path, io_write);

			A_Format(Path, "%d|%s", Price, Reason);
			fwrite(Arch, Path);
			fclose(Arch);
			A_Format(Path, "%s multó %s ($%d - %s)", pName(playerid), veh_getPlateAsString(VehID), Price, Reason);
			Log("multas", Path);
			MensajeFaccionF(IDLSPD, ""#CNARANJA"[Facción] "#CBLANCO"El policía "#CLSPD"%s "#CBLANCO"multó un %s(%s) por "#CVERDE"$%d "#CBLANCO"(%s)", NombreJugador_(playerid), veh_getNameAsString (VehID), veh_getPlateAsString(VehID), Price, Reason);
		}
		case dPagarMultas:
		{
		    if(!response)
		        return 1;

			new
			    Patente[11], OtherStr[110], DialogStr[sizeof(OtherStr)*MAX_MULTAS_VEH], Path[40];

			sscanf(inputtext, "p<:>s[40]s[11]", OtherStr, Patente);

   			SetPVarString(playerid, "PATENTE_MULTA", Patente);

			Loop(i, MAX_MULTAS_VEH, 0)
			{
			    A_Format(Path, "Facciones/LSPD/Multas/%s_%d.ini", Patente, i);
			    if(fexist(Path))
			    {
			        new
			            ReadData[60],
						Price;

					new
					    File:Arch = fopen(Path, io_read);

					fread(Arch, ReadData);
					fclose(Arch);

					sscanf(ReadData, "p<|>ds[50]", Price, OtherStr);
			        A_Format(OtherStr, "Costo: "#CVERDE"$%d "#CBLANCO"| Razón: "#CROJO"%s\n", Price, OtherStr);
			        strcat(DialogStr, OtherStr);
			        A_Format(OtherStr, "MULTA_PRECIO_%d", i);
			        SetPVarInt(playerid, OtherStr, Price);
				}
				else
				{
			        strcat(DialogStr, "-- Vacio.\n");
				}
			}
			A_Format(OtherStr, ""#CBLANCO"Multas de "#CAMARILLO"%s", Patente);
			Dialog(playerid, dPagarMultas_2, DIALOG_STYLE_LIST, OtherStr, DialogStr, "Pagar", "Volver");
		}
		case dPagarMultas_2:
		{
		    if(!response)
		        return cmd_pagar(playerid, "multas");

			if(inputtext[0] == '-')
			    return 1;

			new
			    Str[40], Patente[11];

			GetPVarString(playerid, "PATENTE_MULTA", Patente, 11);
			DeletePVar(playerid, "PATENTE_MULTA");
	        A_Format(Str, "MULTA_PRECIO_%d", listitem);
	        new
				Price = GetPVarInt(playerid, Str);

			DeletePVar(playerid, Str);

			if(GetPlayerMoney(playerid) < Price)
			    return Error(playerid, "No tiene dinero suficiente para pagar esa multa.");

   			A_Format(Str, "Facciones/LSPD/Multas/%s_%d.ini", Patente, listitem);
   			fremove(Str);
			QuitarDinero(playerid, Price);
			AgregarDineroFaccion (IDLSPD, Price);
			MensajeF(playerid, -1, "Pagaste correctamente la multa nº "#CROJO"%d "#CBLANCO"de la patente "#CAMARILLO"%s "#CBLANCO"por "#CVERDE"$%d.", listitem, Patente, Price);
			cmd_pagar(playerid, "multas");
		}
		case dQuitarPieza:
		{
		    if(!response) return 1;
		    new
		        VehID = GetPlayerVehicleID(playerid);
			if(VehID == 0) return Error(playerid, "No estás en un vehículo.");
			new
			    slot = listitem,
				componentid = GetVehicleComponentInSlot(VehID, slot);

			if(componentid < 1000)
			{
			    Error(playerid, "Ese vehículo no tiene la pieza seleccionada.");
			    return cmd_quitar(playerid, "piezas");
			}

			veh_addComponent(VehID, componentid, .remove=true);
			ownVeh_addComponent(veh_ownVehID(VehID), componentid, .remove=true);
			
			Mensaje(playerid, -1, "El componente fue quitado del vehículo.");
		}
	    case dInventario:
		{
			if(!response)
		        return 1;

		    new
		        item = ItemInventario[playerid][listitem][invObject];

			if(item == 0)
			    return 1;

		    OnPlayerSelectInvObject(playerid, item, listitem);
		}
		case dBorrarObjeto:
		{
		    if (response)
			{
		    	MensajeF(playerid, -1, "Tu "#CVERDE"%s "#CBLANCO"fue eliminado/a correctamente.", ObjectData[GetObject(playerid)][invName]);
		    	RemoveObject(playerid);
			}
		}
		case dCasilleroLSPD:
		{
		    if (response)
		    {
		        new
					id_casillero = GetPVarInt(playerid, "LSPD_CASILLERO"),
					item = CasilleroLSPD[id_casillero][casItem][listitem],
					data = CasilleroLSPD[id_casillero][casData][listitem];

				DeletePVar(playerid, "LSPD_CASILLERO");

				if(item == 0)
				    return Error(playerid, "En el lugar seleccionado, no hay nada.");

				if(GetObject(playerid) != -1)
				    return Error(playerid, "Debes desocuparte las manos.");

                CasilleroLSPD[id_casillero][casItem][listitem] = 0;
				CasilleroLSPD[id_casillero][casData][listitem] = 0;

				GiveObject(playerid, item, data);
			}
		}
		case dEmbargarVeh:
		{
		    if(!response)
		        return 1;

			new
			    Part1[30], Patente[10];

			sscanf(inputtext, "p<:>s[30]s[12]", Part1, Patente);

			printf("patente: '%s'", Patente);
   			new
				Path[45];

			Loop(i, MAX_MULTAS_VEH, 0)
			{
			    A_Format(Path, "Facciones/LSPD/Multas/%s_%d.ini", Patente, i);
			    if(fexist(Path))
			    {
					cmd_pagar(playerid, "embargacion");
					return Error(playerid, "~r~¡Debes pagar todas las multas del vehículo para pagar la embargación!");
				}
			}
			new
			    BigStr[150],
				Precio_desembargar = PRECIO_DESEMBARGAR;

			if(GetPlayerMoney(playerid) < Precio_desembargar)
			{
				A_Format(BigStr, ""#CBLANCO"Desembargar: "#CAMARILLO"%s\n\n"#CBLANCO"-Costo: "#CVERDE"$%d\n"#CBLANCO"-Tu dinero: "#CVERDE"%d\n\n		"#CROJO"DINERO INSUFICIENTE.", Patente, Precio_desembargar, GetPlayerMoney(playerid) );
				Dialog(playerid, dPagarEmbargacion, DIALOG_STYLE_MSGBOX, ""#CBLANCO"Pagar embargación", BigStr, "Volver", "");
				DeletePVar(playerid, "PUEDE_PAGAR_DESEM");
			}
			else
			{
			    SetPVarInt(playerid, "PAGAR_DESEM_PATENTE", veh_strToPlate(Patente));
				A_Format(BigStr, ""#CBLANCO"Desembargar: "#CAMARILLO"%s\n\n"#CBLANCO"-Costo: "#CVERDE"$%d\n"#CBLANCO"-Tu dinero: "#CVERDE"%d", Patente, Precio_desembargar, GetPlayerMoney(playerid) );
				Dialog(playerid, dPagarEmbargacion, DIALOG_STYLE_MSGBOX, ""#CBLANCO"Pagar embargación", BigStr, "Pagar", "Volver");
				SetPVarInt(playerid, "PUEDE_PAGAR_DESEM", true);
			}
		}
		case dPagarEmbargacion:
		{
		    if(!response)
		    {
				return cmd_pagar(playerid, "embargacion");
			}
			if(GetPVarInt(playerid, "PUEDE_PAGAR_DESEM"))
			{
			    if(GetPlayerMoney(playerid) < PRECIO_DESEMBARGAR)
			    {
					cmd_pagar(playerid, "embargacion");
					return Error(playerid, "~r~Dinero insuficiente.");
				}

				new plate = GetPVarInt(playerid, "PAGAR_DESEM_PATENTE");
				new VehID = INVALID_VEHICLE_ID;
				printf ("plate: %x - %d", plate, plate);
				foreach(ownVeh, i) {
					if (ownVeh_getUID(ownVeh:i) == plate) {
						VehID = ownVeh_ID(ownVeh:i);
						break;
					}
				}
				if (VehID == INVALID_VEHICLE_ID) {
					return Mensaje(playerid, -1, "Ocurrió un error mientras se desembargaba el vehiculo.");
				}
				
				PagarEmbargacion(playerid, veh_getPlateAsString(VehID), VehID);
				Error(playerid, "~g~VEHICULO DESEMBARGADO");
				return 1;
			}
			else
			{
			    return cmd_pagar(playerid, "embargacion");
			}
		}
		case dMaleteroVer:
		{
		    if (response)
		    {
		        new
					vehicleid = GetPVarInt(playerid, "MALETERO_VEH"),
					item = ItemMaletero[vehicleid][listitem][invObject],
					data = ItemMaletero[vehicleid][listitem][invData];

				DeletePVar(playerid, "MALETERO_VEH");

				if(item == 0)
				    return Error(playerid, "En el lugar seleccionado, no hay nada.");

				if(GetObject(playerid) != -1)
				    return Error(playerid, "Debes desocuparte las manos.");

                ItemMaletero[vehicleid][listitem][invObject] = 0;
				ItemMaletero[vehicleid][listitem][invData] = 0;

				GiveObject(playerid, item, data);

				ActualizarMaletero(vehicleid);

				new
				    str[50];

				A_Format(str, "saca un/a %s del maletero.", ObjectData[item][invName]);
				AutoRol(playerid, str);
				return 1;
			}
			else
				DeletePVar(playerid, "MALETERO_VEH");
		}
		case dCasilleroLSEM:
		{
		    if (response)
		    {
		        new
					id_casillero = GetPVarInt(playerid, "LSEM_CASILLERO"),
					item = CasilleroLSEM[id_casillero][casItem][listitem],
					data = CasilleroLSEM[id_casillero][casData][listitem];

				DeletePVar(playerid, "LSEM_CASILLERO");

				if(item == 0)
				    return Error(playerid, "En el lugar seleccionado, no hay nada.");

				if(GetObject(playerid) != -1)
				    return Error(playerid, "Debes desocuparte las manos.");

                CasilleroLSEM[id_casillero][casItem][listitem] = 0;
				CasilleroLSEM[id_casillero][casData][listitem] = 0;

				GiveObject(playerid, item, data);
			}
			else
				DeletePVar(playerid, "LSEM_CASILLERO");
		}
		case dArmarioCasa:
		{
		    if (response)
		    {
		        new
					casaid = GetPVarInt(playerid, "CASA_VER"),
					item = InfoCasa[casaid][cArmarioObjeto][listitem],
					data = InfoCasa[casaid][cArmarioData][listitem];

				DeletePVar(playerid, "CASA_VER");

				if(item == 0)
				    return Error(playerid, "En el lugar seleccionado, no hay nada.");

				if(GetObject(playerid) != -1)
				    return Error(playerid, "Debes desocuparte las manos.");

                InfoCasa[casaid][cArmarioObjeto][listitem] = 0;
				InfoCasa[casaid][cArmarioData][listitem] = 0;

				GiveObject(playerid, item, data);

				ActualizarCasa(casaid, false, -1, listitem);

				new
				    str[80];

				A_Format(str, "saca un/a %s del armario de su casa.", ObjectData[item][invName]);
				AutoRol(playerid, str);
				return 1;
			}
			else
				DeletePVar(playerid, "CASA_VER");
		}
		case dNecesidades:
		{
			if (response)
			    return SetNecType(playerid, listitem);

		}
		case dCelMas:
		{
		    if (!response)
		    {
		        DeletePVar(playerid, "CEL.MARCADO");
		        return 1;
			}
			if (listitem == 0) // agregar contacto
			{
				new
				    num = GetCelNumber(playerid),
					num2 = GetPVarInt(playerid, "CEL.MARCADO");

				if(CEL.CountContacts(num) >= CEL_MAX_CONTACT)
				{
				    return ShowPlayerDialog(playerid, dError, DIALOG_STYLE_MSGBOX, "{FF0000}ERROR", "{FFFFFF}No puedes guardar más contactos en la agenda, debes eliminar alguno.", "Cerrar", "");
				}

				new
				    string[100];

				format(string, sizeof(string), "{ffffff}Número: {ff0000}%d\n\n{ffffff}Escribe el nombre del contacto (3-"#CEL_MAX_LEN" caracteres)", num2);
				ShowPlayerDialog(playerid, dCelAgregarC, DIALOG_STYLE_INPUT, "{ff0000}Agregar contacto", string, "Guardar", "Cancelar");
				return 1;
			}
			else if (listitem == 1) //Enviar SMS
			{
				CEL.EnviarSMS(playerid, GetPVarInt(playerid, "CEL.MARCADO"));
			}
			else if (listitem == 2) //Llamar
			{
			    CEL.Llamar(playerid, GetPVarInt(playerid, "CEL.MARCADO"));
			}
			return 1;
		}
		case dCelAgregarC:
		{
		    if (!response)
		    {
		        DeletePVar(playerid, "CEL.MARCADO");
		        return 1;
		    }

			if (!basicString(inputtext))
			{
				Dialog(playerid, dCelAgregarC, DIALOG_STYLE_INPUT, ""#CROJO"Agregar un contacto", "\n\n"#CBLANCO"Escribe el nombre del contacto:\nCaracteres disponibles: (a - z), (0 - 9), (_), (-)", "Enviar", "Cancelar");
				return 1;
			}

		    new
		        len = strlen(inputtext),
				num = GetPVarInt(playerid, "CEL.MARCADO"),
				my_num = GetCelNumber(playerid);

			if (!my_num)
			    return 1;

			new
			    string[100];

			if (!(3 <= len <= CEL_MAX_LEN))
			{
				format(string, sizeof(string), "{ffffff}Número: {ff0000}%d\n\n{ffffff}Escribe el nombre del contacto (3-"#CEL_MAX_LEN" caracteres)", num);
				return ShowPlayerDialog(playerid, dCelAgregarC, DIALOG_STYLE_INPUT, "{ff0000}Agregar contacto", string, "Guardar", "Cancelar");
			}
			new
			    ctc_num[CEL_MAX_CONTACT],
			    ctc_name[CEL_MAX_CONTACT][CEL_MAX_LEN],
				ctc_count = CEL.GetContactList(my_num, ctc_num, ctc_name);

			if (ctc_count >= CEL_MAX_CONTACT)
			    return 1;

			for (new i; i < ctc_count; i++)
			{
			    if(!strcmp(inputtext, ctc_name[i], true))
			    {
			        return ShowPlayerDialog(playerid, dError, DIALOG_STYLE_MSGBOX, "{ff0000}ERROR", "{ffffff}Ya tiene un número agendado con ese nombre.", "Cerrar", "");
				}
			}
			CEL.AddContact(my_num, num, inputtext);
			DeletePVar(playerid, "CEL.MARCADO");
			format(string, 60, "\n\n{00ff00}Contacto guardado: {ffffff}%s\n\n", inputtext);
			ShowPlayerDialog(playerid, dError, DIALOG_STYLE_MSGBOX, "NUEVO CONTACTO", string, "Cerrar", "");
			return 1;
		}
		case dCelContacto:
		{
	        new
				ctc_index = GetPVarInt(playerid, "CEL.SCTC");

			DeletePVar(playerid, "CEL.SCTC");

			if (!response)
			    return 1;

			if (listitem == 0)
			{
			    new
			        ctc_name_[CEL_MAX_LEN],
					pvar_str[20],
					cel_num = GetCelNumber(playerid);

				if(!cel_num)
				    return 1;

				format(pvar_str, sizeof(pvar_str), "%dCTXT", ctc_index);
				GetPVarString(playerid, pvar_str, ctc_name_, CEL_MAX_LEN);
				CEL.DeleteContact(cel_num, ctc_name_);
				CEL.ToggleContactos(playerid, false);
				CEL.ToggleMenu(playerid, true);
				CEL.State[playerid] = CEL_STATE_MENU;
				ShowPlayerDialog(playerid, dError, DIALOG_STYLE_MSGBOX, "{00ff00}Celular", "{ffffff}El contacto fue {ff0000}eliminado.", "Cerrar", "");
				return 1;
			}
			if (listitem == 1)
			{
			    new
					pvar_str[20],
					num_to_give;

				format(pvar_str, sizeof(pvar_str), "%dCNUM", ctc_index);

				num_to_give = GetPVarInt(playerid, pvar_str);

				CEL.EnviarSMS(playerid, num_to_give);
				return 1;
			}
			if (listitem == 2)
			{
   				new
					pvar_str[20],
					num_to_give;

				format(pvar_str, sizeof(pvar_str), "%dCNUM", ctc_index);

				num_to_give = GetPVarInt(playerid, pvar_str);

				CEL.Llamar(playerid, num_to_give);
			    return 1;
			}
			return 1;
		}
		case dCelSMS:
		{
	        new
				index = GetPVarInt(playerid, "CEL.SSMS");

			DeletePVar(playerid, "CEL.SSMS");

			if (response)
			    return 1;

			new
			    sms_num[CEL_MAX_SMS][CEL_MAX_LEN],
			    sms_sms[CEL_MAX_SMS][128],
				my_numb = GetCelNumber(playerid);

			if (!my_numb)
			    return 1;

			CEL.GetSMS(my_numb, sms_num, sms_sms);

			format(sms_num[index], CEL_MAX_LEN, "-");
			format(sms_sms[index], 128, "Vacio");

			PlayerTextDrawSetString(playerid, CEL.SMSContacto[playerid][index], "~>~ -");
			PlayerTextDrawSetString(playerid, CEL.SMSTexto[playerid][index], "Vacio");

			CEL.UpdateSMS(my_numb, sms_num, sms_sms);
			return 1;
		}
		case dMandarSMS:
		{
		    if (!response || !strlen(inputtext))
		    {
		        DeletePVar(playerid, "CEL.MANDARSMS");
		        return 1;
			}
			if (!basicString(inputtext))
			{
				Dialog(playerid, dMandarSMS, DIALOG_STYLE_INPUT, ""#CROJO"Enviar un SMS", "\n\n"#CBLANCO"Escribe el mensaje de texto para enviar:\nCaracteres disponibles: (a - z), (0 - 9), (_), (-)", "Enviar", "Cancelar");
				return 1;
			}

			new
			    num_mandar = GetPVarInt(playerid, "CEL.MANDARSMS"),
			    num_my = GetCelNumber(playerid),
				item_cel = GOAT(INV_CEL);

			DeletePVar(playerid, "CEL.MANDARSMS");

			foreach(Player, i)
			{
			    if(GetObject(i) == item_cel)
			    {
			        if(GetObjectData(i) == num_mandar)
			        {
			            CEL.ConfirmarSMS(playerid, num_my, num_mandar, i, inputtext);
			            return 1;
					}
				}
				InvLoop(a, i)
				{
				    if(ItemInventario[i][a][invObject] == item_cel && ItemInventario[i][a][invData] == num_mandar)
				    {
			            CEL.ConfirmarSMS(playerid, num_my, num_mandar, i, inputtext);
						return 1;
					}
				}
			}
			Dialog(playerid, dError, DIALOG_STYLE_MSGBOX, ""#CROJO"ERROR", ""#CBLANCO"Falló el envio de mensaje: "#CROJO"Número incorrecto.", "Cerrar", "");
			return 1;
		}

		case dComedorCarcel:
		{
		    if (!response)
		        return 1;

			Manos_Desocupadas

			static
			    OldRequest[MAX_PLAYERS];

			if(OldRequest[playerid] > gettime())
			    return Error(playerid,"Espera ~r~un minuto ~w~para volver a pedir comida.");

			OldRequest[playerid] = gettime() + 60;

			if (listitem == 0)
			{
			    GiveObject(playerid, GOAT(INV_HAMBGRANDE), 7);
			    AutoRol(playerid, "pide una hamburguesa de la cafeteria.");
			}
			else
			{
			    GiveObject(playerid, GOAT(INV_PIZZAGRANDE), 7);
			    AutoRol(playerid, "pide una porción de pizza de la cafeteria.");
			}
		}
		case dComprarAFab:
		{
		    if (!response)
		    {
				new
				    str[10],
					i;

				for(i = 0; i < MAX_STOCK_NEGOCIO; i++)
				{
				    A_Format(str, "bS%d", i);
				    DeletePVar(playerid, str);
				}
				DeletePVar(playerid, "bTotalC");
				PC.ToggleMenuProductosComprar(playerid, false);
				return 1;
			}
			new
				StockComprado[MAX_STOCK_NEGOCIO],
				str[10],
				i,
				price = GetPVarInt(playerid, "bTotalC");

			DeletePVar(playerid, "bTotalC");

			for(i = 0; i < MAX_STOCK_NEGOCIO; i++)
			{
			    A_Format(str, "bS%d", i);
			    StockComprado[i] = GetPVarInt(playerid, str);
			    DeletePVar(playerid, str);
			}
			if(!EstaEnSuNegocio(playerid))
			    return 1;

			for(i = 0; i < MAX_PEDIDOS_CAMIONEROS; i++)
			{
				if(PedidoCamioneros[i][p_NegID] == ID_Negocio(playerid) && PedidoCamioneros[i][p_Time])
				{
					PC.ToggleMenuProductosComprar(playerid, false);
			    	return Dialog(playerid, dError, DIALOG_STYLE_MSGBOX, ""#CROJO"PC - Error", "\n\n"#CBLANCO"Ya hay un pedido pendiente de su negocio. Debe esperar que el pedido anterior debe ser aceptado antes de enviar uno nuevo\n\n", "Cerrar", "");
				}
			}

			new
			    slot_compra = -1;
			for(i = 0; i < MAX_PEDIDOS_CAMIONEROS; i++)
			{
			    if(PedidoCamioneros[i][p_Time] == 0)
			    {
			        slot_compra = i;
			        break;
				}
			}
			if(slot_compra == -1)
			{
				PC.ToggleMenuProductosComprar(playerid, false);
			    return Dialog(playerid, dError, DIALOG_STYLE_MSGBOX, ""#CROJO"PC - Error", "\n\n"#CBLANCO"Hubo un error en la compra, se excedió el limite de pedidos. Intente más tarde.\n\n", "Cerrar", "");
			}

			PedidoCamioneros[slot_compra][p_NegID] = ID_Negocio(playerid);
			PedidoCamioneros[slot_compra][p_Time] = gettime();

			for(i = 0; i < MAX_STOCK_NEGOCIO; i++)
			{
			    PedidoCamioneros[slot_compra][p_Stock][i] = StockComprado[i];
			}

			ActualizarPedidoCamioneros(slot_compra);
			InfoNegocio[ID_Negocio(playerid)][nDinero] -= price;
			AgregarDineroFaccion (IDCAMIONEROS, PRECIO_ENTREGACAMIONEROS);
			Dialog(playerid, dError, DIALOG_STYLE_MSGBOX, ""#CROJO"PC - Operación finalizada", ""#CBLANCO"\n\n\t\t"#CVERDE"Compra confirmada y enviada.\n\n"#CBLANCO"Ahora, deberá esperar que el pedido sea aceptado por los "#CINFO"Camioneros.", "Cerrar", "");
			PC.ToggleMenuProductosComprar(playerid, false);
		}
		case dElegirPedido:
		{
		    if (!response)
				return 1;

			new
			    i = listitem;

			if (PedidoCamioneros[i][p_Time] == 0)
   				return 1;

			if (PedidoCamioneros[i][p_PlayerID] != INVALID_PLAYER_ID)
			{
			    return MensajeF(playerid, -1, "Este pedido ya fue aceptado por "#CAMARILLO"%s. "#CBLANCO"Los pedidos de color "#CVERDE"VERDE "#CBLANCO"son los disponibles.", NombreJugador_(PedidoCamioneros[i][p_PlayerID]));
			}

			// 435 - 591 (Acoplados)
			// 403 (Lineruner)

			new
			    NegID = PedidoCamioneros[i][p_NegID],
			    Type = InfoNegocio[NegID][nTipo],
				VehID = GetPlayerVehicleID(playerid),
				ModelID = GetVehicleModel(VehID),
				TrailerID = GetVehicleTrailer(VehID);

    		if (EntregaInfo[Type][entType] == ENTREGA_C_CHICA)
   			{
   			    if (VehID == 0 || GetVehicleModel(VehID) != 456 || veh_getFaction(VehID) != IDCAMIONEROS)
   			    {
      				return Mensaje(playerid, -1, "Para aceptar este pedido, debes estar conduciendo un "#CINFO"Yankee.");
				}
				else
				{
				    SetPVarInt(playerid, "CAMFAC.VEH", VehID);
				    SetPVarInt(playerid, "CAMFAC.TRAILER", 0);
				    AceptarPedido (playerid, i, Type);
					return 1;
				}
			}
    		else if (EntregaInfo[Type][entType] == ENTREGA_C_GRANDE)
   			{
   			    if (VehID == 0 || veh_getFaction(VehID) != IDCAMIONEROS || ModelID != 403 || GetVehicleModel(TrailerID) != EntregaInfo[Type][entModel])
				{
				    switch (EntregaInfo[Type][entModel])
				    {
						case 435:
							return Mensaje(playerid, -1, "Para aceptar este pedido, debes estar conduciendo un "#CINFO"Camión de Carga "#CBLANCO"cargando "#CNARANJA"acoplado de productos");

						case 591:
							return Mensaje(playerid, -1, "Para aceptar este pedido, debes estar conduciendo un "#CINFO"Camión de Carga "#CBLANCO"cargando "#CNARANJA"acoplado de tecnología.");

						default:
						    return 1;
					}
				}
				else
				{
				    SetPVarInt(playerid, "CAMFAC.VEH", VehID);
				    SetPVarInt(playerid, "CAMFAC.TRAILER", TrailerID);
				    AceptarPedido (playerid, i, Type);
					return 1;
				}
			}
			else
			{
				return Error(playerid, "~r~Error al aceptar el pedido.");
			}
		}
		case dArmamento:
		{
		    if (!response)
		        return 1;

			Manos_Desocupadas

			if (listitem == 0)
			{
			    if (HIT_AWP < 1)
			        return Error (playerid, "No hay más ~r~Sniper.");

				GiveObject (playerid, GetObjectAtWeapon(34));
				AutoRol (playerid, "toma una Sniper de la armeria.");
				HIT_AWP --;
			}
			else if (listitem == 1)
			{
			    if (HIT_C_AWP < 1)
			        return Error (playerid, "No hay más ~r~Cargador (Sniper).");

				AutoRol (playerid, "toma un Cargador de Sniper de la armeria.");
				GiveObject (playerid, GetReloaderAtWeapon(34));
				HIT_C_AWP --;
			}
			else if (listitem == 2)
			{
			    if (HIT_SILENCED < 1)
			        return Error (playerid, "No hay más ~r~Silenciadora.");

				AutoRol (playerid, "toma una Silenciadora de la armeria.");
				GiveObject (playerid, GetObjectAtWeapon(23));
				HIT_SILENCED --;
			}
			else if (listitem == 3)
			{
			    if (HIT_C_SILENCED < 1)
			        return Error (playerid, "No hay más ~r~Cargador (Silenciadora).");

				AutoRol (playerid, "toma un Cargador de Silenciadora de la armeria.");
				GiveObject (playerid, GetReloaderAtWeapon(23));
				HIT_C_SILENCED --;
			}
			ActualizarArmeriaHitman ();
		}
		case dMuebles:
		{
		    new
		        page = GetPVarInt (playerid, "mueble_page"),
				houseID = ID_Casa (playerid);

		    if (!response || houseID == INVALID_HOUSE_ID)
  			{
  			    DeletePVar (playerid, "mueble_page");
  			    DeletePVar (playerid, "EditandoMuebles");
  			    return 1;
			}
			if (listitem == MUEBLES_PER_PAGE) // siguiente página
			{
			    page ++;
			    SetPVarInt (playerid, "mueble_page", page);
			    ShowMuebleList (playerid, houseID, page);
			}
			new
			    mueble_index = (page * MUEBLES_PER_PAGE) + listitem;

			if (inputtext [0] != '-') // != "- VACIO -"
			{
				SetPVarInt (playerid, "mINDEX2", mueble_index);
				OnPlayerSelectObject(playerid, SELECT_OBJECT_PLAYER_OBJECT, OBJ_Mueble[playerid][mueble_index], GetMuebleModelIDAtIndex (MuebleCasa [houseID][mueble_index][mIndex]), MuebleCasa [houseID][mueble_index][mPos_x], MuebleCasa [houseID][mueble_index][mPos_y], MuebleCasa [houseID][mueble_index][mPos_z]);
			}
			else
			{
			    Mensaje (playerid, -1, "En el lugar seleccionado no tienes un mueble. Puedes comprar en un hipermercado.");
			}
		}
		case dMueble_Ocultar:
		{
		    if (!response)
		    {
		        DeletePVar (playerid, "ID_MUEBLE");
		        return 1;
			}
			new
			    m = GetPVarInt (playerid, "ID_MUEBLE"),
			    houseID = ID_Casa (playerid),
				Float: x,
				Float: y,
				Float: z;
			    
			if (houseID == INVALID_HOUSE_ID)
			    return 1;

			if (listitem == 0) // Mostrar
			{
				GetPlayerPos (playerid, x, y, z);
				GetPosInFrontOfPlayer(playerid, x, y, 3.0);

				MuebleCasa [houseID][m][mPos_x] = x;
				MuebleCasa [houseID][m][mPos_y] = y;
				MuebleCasa [houseID][m][mPos_z] = z;
				MuebleCasa [houseID][m][mRot_x] = 0.0;
				MuebleCasa [houseID][m][mRot_y] = 0.0;
				MuebleCasa [houseID][m][mRot_z] = 0.0;

				CreateHouseObject (houseID, m, GetMuebleModelIDAtIndex (MuebleCasa [houseID][m][mIndex]), x, y, z, 0.0, 0.0, 0.0);
				EditPlayerObject (playerid, OBJ_Mueble [playerid][m]);
				Error (playerid, "El mueble fue mostrado, puedes acomodarlo usando el ~g~ratón.");
			}
			else if (listitem == 1) // Eliminar
			{
				DestroyMueble (houseID, m);
			}
		}
		case dMueble_Editar:
		{
		    if (!response)
		    {
		        DeletePVar (playerid, "ID_MUEBLE");
		        return 1;
			}
			
			new
			    m = GetPVarInt (playerid, "ID_MUEBLE"),
			    houseID = ID_Casa (playerid);

			if (listitem == 0) // Editar mueble
			{
			    EditPlayerObject (playerid, OBJ_Mueble [playerid][m]);
			    Error (playerid, "Para cancelar la edición, presione ~g~ESC.~n~~w~Para guardar la posición, clickee el ~b~Disquete.");
			}
			else if (listitem == 1) // Ocultar mueble
			{
				OcultarMueble (houseID, m);
			    Error (playerid, "El mueble fue ~r~ocultado~w~. Puede volverlo a mostrar en cuanto desee.");
			}
			else if (listitem == 2) // Texturizar
			{
				new
				    str [128];
				    
				format (str, sizeof (str), "Lugar 1 (%s)\nLugar 2 (%s)\nLugar 3 (%s)\nLugar 4 (%s)", GetMuebleTextureName(MuebleCasa[houseID][m][mTexture][0]), GetMuebleTextureName(MuebleCasa[houseID][m][mTexture][1]), GetMuebleTextureName(MuebleCasa[houseID][m][mTexture][2]), GetMuebleTextureName(MuebleCasa[houseID][m][mTexture][3]));
				Dialog (playerid, dMueble_Texturizar, DIALOG_STYLE_LIST, ""#CBLANCO"Seleccione la parte del "#CINFO"objeto "#CBLANCO"que texturizar", str, "Aceptar", "Cancelar");
			}
			else if (listitem == 3) // Eliminar mueble
			{
				DestroyMueble (houseID, m);
			    Error (playerid, "El mueble fue ~r~eliminado~w~.");
   				SelectObject (playerid);
			}
		}
		case dMueble_Texturizar:
		{
		    if (!response)
		    {
		        DeletePVar (playerid, "ID_MUEBLE");
		        return 1;
			}
			SetPVarInt (playerid, "editm_index", listitem);
			new
			    str2 [40],
			    str [sizeof (TextureData) * sizeof (str2)];
			    
			for (new i; i < sizeof (TextureData); i++)
			{
			    format (str2, sizeof (str2), "%d)\t%s\n", i+1, GetMuebleTextureName(i));
			    strcat (str, str2);
			}
			format (str2, sizeof (str2), ""#CINFO" Texturizar (Lugar %d)", listitem);
			Dialog (playerid, dMueble_Texturizar2, DIALOG_STYLE_LIST, str2, str, "Cambiar", "Cerrar");
		}
		case dMueble_Texturizar2:
		{
		    if (!response)
		    {
		        DeletePVar (playerid, "ID_MUEBLE");
				DeletePVar (playerid, "editm_index");
		        return 1;
			}
			new
			    m = GetPVarInt (playerid, "ID_MUEBLE"),
			    houseID = ID_Casa (playerid);

			SetMuebleTexture (houseID, m, GetPVarInt (playerid, "editm_index"), listitem);
			DeletePVar (playerid, "editm_index");
   			SelectObject (playerid);
		}
		case dMuebles_CMD:
		{
		    if (response) // Listar
		    {
				DeletePVar (playerid, "mueble_page");
				new
				    houseID = ID_Casa (playerid);
				    
				if (houseID == INVALID_HOUSE_ID)
				    return 1;

				ShowMuebleList (playerid, houseID);
			}
			else // Editar
			{
			    SelectObject (playerid);
			    Error (playerid, "Haga click en un mueble para editarlo~n~Presione ~g~ESC ~w~para salir del modo cursor.");
			}
			SetPVarInt (playerid, "EditandoMuebles", true);
		}
		case dSoporte:
		{
		    if (!response)
		    {
		        DeletePVar (playerid, "soporte");
		        return 1;
			}

			new
			    Float: ticket_num, other [84],
				Float: soporte = GetPVarFloat (playerid, "soporte");
			    
			if (soporte > 0.0)
			{
			    return 1;
			}
			unformat (inputtext, "p<:>fs[84]", ticket_num, other);
			
			switch (ticket_num)
			{
			    //1.0
			    case 1.1:
			    {
					Dialog (playerid, dSoporte2, DIALOG_STYLE_MSGBOX, ""#CBLANCO"Respuesta automática", ""#CBLANCO"\n• Para recibir ayuda de otros jugadores, utilize el comando "#CINFO"/duda [Consulta]"#CBLANCO".\n  Ejemplo de uso sería "#CINFO"/duda ¿Cómo consigo trabajo?"#CBLANCO".\n\n¡Siempre hay ayudantes o jugadores dispuestos a darte una mano!", "Cerrar", "Volver");
				}
			    case 1.2:
			    {
    				Dialog (playerid, dSoporte2, DIALOG_STYLE_MSGBOX, ""#CBLANCO"Respuesta automática", ""#CBLANCO"\n• El comando "#CINFO"/informacion"#CBLANCO" te mostrará una lista donde podrás ver\ncuáles son los comandos y cómo manejarte en el servidor.", "Cerrar", "Volver");
				}
			    case 1.3:
			    {
    				Dialog (playerid, dSoporte2, DIALOG_STYLE_MSGBOX, ""#CBLANCO"Respuesta automática", "\n"#CVERDE"IP DEL SERVIDOR SA:MP:\n\t167.114.56.2:7947", "Cerrar", "Volver");
				}
			    case 1.4:
			    {
    				Dialog (playerid, dSoporte2, DIALOG_STYLE_MSGBOX, ""#CBLANCO"Respuesta automática", "\n"#CVERDE"LINK DEL DISCORD:"#CBLANCO"\n\thttps://discord.gg/9WJsYS", "Cerrar", "Volver");
				}
			    case 1.5:
			    {
    				Dialog (playerid, dSoporte2, DIALOG_STYLE_MSGBOX, ""#CBLANCO"Respuesta automática", "\n"#CVERDE"WEB, FORO, Y FACEBOOK:"#CBLANCO"\n\t167.114.56.2:7947 - ciudadrealrp.x10.bz", "Cerrar", "Volver");
				}

				//2.0
				case 2.1:
				{
				    SetPVarFloat (playerid, "soporte", ticket_num);
					SetPVarString (playerid, "t_soporte", "Problema de personaje");
					SetPVarInt (playerid, "n_soporte", Moderador);

				    new
				        str_ticket_tittle [87];

					A_Format (str_ticket_tittle, ""#CBLANCO"Enviar un "#CROJO"Ticket"#CBLANCO" -> %s", inputtext);
					Dialog (playerid, dSoporte, DIALOG_STYLE_INPUT, str_ticket_tittle, "\n"#CBLANCO"Usted va a reportar: "#CROJO"Problemas con mi personaje\n\n"#CBLANCO"Escriba detalladamente cual es su problema, para así hacer entender a los administradores que sucedió:", "Enviar", "Cancelar");
				}
				case 2.2:
				{
				    SetPVarFloat (playerid, "soporte", ticket_num);
					SetPVarString (playerid, "t_soporte", "Problema de vehículo");
					SetPVarInt (playerid, "n_soporte", Administrador);

				    new
				        str_ticket_tittle [87];

					A_Format (str_ticket_tittle, ""#CBLANCO"Enviar un "#CROJO"Ticket"#CBLANCO" -> %s", inputtext);
					Dialog (playerid, dSoporte, DIALOG_STYLE_INPUT, str_ticket_tittle, "\n"#CBLANCO"Usted va a reportar: "#CROJO"Problemas con mi vehículo\n\n"#CBLANCO"Escriba detalladamente cual es su problema, para así hacer entender a los administradores que sucedió:", "Enviar", "Cancelar");
				}
				case 2.3:
				{
				    SetPVarFloat (playerid, "soporte", ticket_num);
					SetPVarString (playerid, "t_soporte", "Problema de casa");
					SetPVarInt (playerid, "n_soporte", SubDueno);

				    new
				        str_ticket_tittle [87];

					A_Format (str_ticket_tittle, ""#CBLANCO"Enviar un "#CROJO"Ticket"#CBLANCO" -> %s", inputtext);
					Dialog (playerid, dSoporte, DIALOG_STYLE_INPUT, str_ticket_tittle, "\n"#CBLANCO"Usted va a reportar: "#CROJO"Problemas con mi casa\n\n"#CBLANCO"Escriba detalladamente cual es su problema, para así hacer entender a los administradores que sucedió:", "Enviar", "Cancelar");
				}
				case 2.4:
				{
				    SetPVarFloat (playerid, "soporte", ticket_num);
					SetPVarString (playerid, "t_soporte", "Problema de negocio");
					SetPVarInt (playerid, "n_soporte", SubDueno);

				    new
				        str_ticket_tittle [87];

					A_Format (str_ticket_tittle, ""#CBLANCO"Enviar un "#CROJO"Ticket"#CBLANCO" -> %s", inputtext);
					Dialog (playerid, dSoporte, DIALOG_STYLE_INPUT, str_ticket_tittle, "\n"#CBLANCO"Usted va a reportar: "#CROJO"Problemas con mi negocio\n\n"#CBLANCO"Escriba detalladamente cual es su problema, para así hacer entender a los administradores que sucedió:", "Enviar", "Cancelar");
				}
				case 2.5:
				{
				    SetPVarFloat (playerid, "soporte", ticket_num);
					SetPVarString (playerid, "t_soporte", "Problema de facción");
					SetPVarInt (playerid, "n_soporte", Administrador);

				    new
				        str_ticket_tittle [87];

					A_Format (str_ticket_tittle, ""#CBLANCO"Enviar un "#CROJO"Ticket"#CBLANCO" -> %s", inputtext);
					Dialog (playerid, dSoporte, DIALOG_STYLE_INPUT, str_ticket_tittle, "\n"#CBLANCO"Usted va a reportar: "#CROJO"Problemas con mi facción\n\n"#CBLANCO"Escriba detalladamente cual es su problema, para así hacer entender a los administradores que sucedió:", "Enviar", "Cancelar");
				}
			    case 2.6:
			    {
    				Dialog (playerid, dSoporte2, DIALOG_STYLE_MSGBOX, ""#CBLANCO"Respuesta automática", "\n"#CVERDE"¿ENCONTRÓ UN ERROR?"#CBLANCO" Ingrese en "#CINFO"ciudadrealrp.x10.bz "#CBLANCO"y hagalo saber, ¡porfavor!\n\nEl cuestionario de la página web es enviado al director de programación.", "Cerrar", "Volver");
				}

				// 3.0
			    case 3.1:
			    {
    				Dialog (playerid, dSoporte2, DIALOG_STYLE_MSGBOX, ""#CBLANCO"Respuesta automática", "\n"#CVERDE"¿LE BANEARON OTRA CUENTA INJUSTAMENTE?"#CBLANCO" Ingrese en "#CINFO"nuestro discord "#CBLANCO"para apelar su desbaneo.", "Cerrar", "Volver");
				}
				case 3.2:
				{
				    SetPVarFloat (playerid, "soporte", ticket_num);
					SetPVarString (playerid, "t_soporte", "Apelar encarcelamiento");
					SetPVarInt (playerid, "n_soporte", Moderador);

				    new
				        str_ticket_tittle [87];

					A_Format (str_ticket_tittle, ""#CBLANCO"Enviar un "#CROJO"Ticket"#CBLANCO" -> %s", inputtext);
					Dialog (playerid, dSoporte, DIALOG_STYLE_INPUT, str_ticket_tittle, "\n"#CBLANCO"Usted va a apelar: "#CROJO"Fuí encarcelado injustamente\n\n"#CBLANCO"Escriba detalladamente qué sucedió, para así ser atendido por un director o el mismo administrador que lo sancionó:", "Enviar", "Cancelar");
				}

				// 4.0
				case 4.0:
				    return cmd_soporte (playerid, "");

				case 4.1:
				{
    				Dialog (playerid, dSoporte2, DIALOG_STYLE_MSGBOX, ""#CBLANCO"Respuesta automática", "\n"#CVERDE"REPORTAR A UN JUGADOR: "#CBLANCO"\n\t• El comando para reportar es: "#CINFO"/reportar [ID/Nombre] [Razón]"#CBLANCO"\n\t• Recuerde que no debe avisarle al jugador que lo reportó (Para evitar que deje de hacer lo que está haciendo)", "Cerrar", "Volver");
				}
				case 4.2:
				{
    				Dialog (playerid, dSoporte2, DIALOG_STYLE_MSGBOX, ""#CBLANCO"Respuesta automática", "\n"#CVERDE"REPORTAR A UN ADMINISTRADOR: "#CBLANCO"\n\t¿Piensas que un administrador no hace bien su trabajo? Ingrese en "#CINFO"ciudadrealrp.x10.bz "#CBLANCO"y explique claramente qué sucedió.", "Cerrar", "Volver");
				}
				
				// 5.0
				case 5.1:
				{
				    SetPVarFloat (playerid, "soporte", ticket_num);
					SetPVarString (playerid, "t_soporte", "Solicitar director");
					SetPVarInt (playerid, "n_soporte", Dueno);

				    new
				        str_ticket_tittle [87];

					A_Format (str_ticket_tittle, ""#CBLANCO"Enviar un "#CROJO"Ticket"#CBLANCO" -> %s", inputtext);
					Dialog (playerid, dSoporte, DIALOG_STYLE_INPUT, str_ticket_tittle, "\n"#CBLANCO"Usted va a enviar: "#CROJO"Ticket a un director\n\n"#CBLANCO"Escriba detalladamente qué sucedió, y asegúrese que su problema no puede ser solucionado por un moderador o administrador.", "Enviar", "Cancelar");
				}
				case 5.2:
				{
				    SetPVarFloat (playerid, "soporte", ticket_num);
					SetPVarString (playerid, "t_soporte", "Otros");
					SetPVarInt (playerid, "n_soporte", Moderador);

				    new
				        str_ticket_tittle [87];

					A_Format (str_ticket_tittle, ""#CBLANCO"Enviar un "#CROJO"Ticket"#CBLANCO" -> %s", inputtext);
					Dialog (playerid, dSoporte, DIALOG_STYLE_INPUT, str_ticket_tittle, "\n"#CBLANCO"Usted va a enviar: "#CROJO"Ticket a un director\n\n"#CBLANCO"Escriba detalladamente qué sucedió, y asegúrese que su problema no aparece en ninguna de las opciones anteriores.", "Enviar", "Cancelar");
				}
				default:
				    cmd_soporte (playerid, "");
			}
		}
		case dSoporte2:
		{
		    if (response)
		        cmd_soporte (playerid, "");
		}
		
		case dLogs:
		{
		    if (!response)
		        return 1;
		        
			new
				format_string [230],
				log_type[20];

			GetPVarString (playerid, "logtype", log_type, sizeof (log_type));
			format (format_string, sizeof (format_string), "SELECT * FROM log_%s WHERE `Log` LIKE '%s%s%s' ORDER BY `log_id` DESC LIMIT 20", log_type, "%", inputtext, "%");
			printf (format_string);
			MostrarLogs (playerid, format_string);
		}
	}
	return 0;
}

stock MandarTicket (playerid, const tittle[], const textinfo[], const adminLevel)
{
	//f_mysql_pquery ("INSERT INTO Tickets (`Nombre`, `Time`, `Titulo`, `Texto`, `Admin`) VALUES ('%s', UNIX_TIMESTAMP(), '%e', '%e', %d)", playerid, query_type_ticket, (size)328, (args)->pName(playerid), tittle, textinfo, adminLevel<-);
}

stock ShowMuebleList (playerid, houseid, page = 0)
{
	new
	    mueble_str [(MUEBLES_PER_PAGE * 50) + 1],
		str [46];

	for (new i = (page * MUEBLES_PER_PAGE), max_ = ((page+1) * MUEBLES_PER_PAGE); i < max_; i++)
	{
	    if (MuebleCasa [houseid][i][mIndex])
	    {
	    	format (str, sizeof (str), "%d) %s%s\n", i, (MuebleCasa [houseid][i][mPos_x] != 0.0) ? (CVERDE) : (CBLANCO), ObjetosInterior [MuebleCasa [houseid][i][mIndex]][2]);
	    	strcat (mueble_str, str);
		}
		else
		{
		    strcat (mueble_str, "- VACIO -\n");
		}
	}

	format (str, sizeof (str), ""#CBLANCO"LISTA DE MUEBLES "#CINFO"(%d/%d)", page+1, MAX_MUEBLES_CASA/MUEBLES_PER_PAGE);

	if ((page+1) == (MAX_MUEBLES_CASA/MUEBLES_PER_PAGE))
	{
		Dialog (playerid, dMuebles, DIALOG_STYLE_LIST, str, mueble_str, "Seleccionar", "Cerrar");
		return;
	}

    strcat (mueble_str, ""#CROJO">> Pasar a siguiente página");
	Dialog (playerid, dMuebles, DIALOG_STYLE_LIST, str, mueble_str, "Seleccionar", "Cerrar");
}

stock SetMuebleTexture (houseid, index, textureindex, textureid)
{
	MuebleCasa [houseid][index][mTexture][textureindex] = textureid;

	new
		querystr [164];

	format (querystr, sizeof (querystr), "UPDATE `Muebles` SET `Texture_%d` = %d WHERE `HouseID` = %d AND `i` = %d", textureindex, textureid, houseid, index);
	opmysql_tquery(querystr, "OnQueryFinish", "ii", 0, query_type_unknown);

	foreach (Player, i)
	{
	    if (ID_Casa (i) == houseid)
	    {
	        SetPlayerObjectMaterial (i, OBJ_Mueble [i][index], textureindex, GetMuebleTextureModelID(textureid), GetMuebleTextureTXD(textureid), GetMuebleTextureTexture(textureid), GetMuebleTextureColor(textureid));
		}
	}
}

stock SetMueblePos (houseid, index, Float: x, Float: y, Float: z, Float: rx, Float: ry, Float: rz, bool: update = true)
{
	MuebleCasa [houseid][index][mPos_x] = x;
	MuebleCasa [houseid][index][mPos_y] = y;
	MuebleCasa [houseid][index][mPos_z] = z;
	MuebleCasa [houseid][index][mRot_x] = rx;
	MuebleCasa [houseid][index][mRot_y] = ry;
	MuebleCasa [houseid][index][mRot_z] = rz;

	if (update)
	{
		new
		    querystr [212];

		format (querystr, sizeof (querystr), "UPDATE `Muebles` SET `Pos_x` = %f, `Pos_y` = %f, `Pos_z` = %f, `Rot_x` = %f, `Rot_y` = %f, `Rot_z` = %f WHERE `HouseID` = %d AND `i` = %d", x, y, z, rx, ry, rz, houseid, index);
		opmysql_tquery( querystr, "OnQueryFinish", "ii", 0, query_type_unknown);
	}

	foreach (Player, i)
	{
	    if (ID_Casa (i) == houseid)
	    {
     		SetPlayerObjectPos (i, OBJ_Mueble [i][index], x, y, z);
     		SetPlayerObjectRot (i, OBJ_Mueble [i][index], rx, ry, rz);
		}
	}
}

stock OcultarMueble (houseid, index)
{
	MuebleCasa [houseid][index][mPos_x] = 0.0;
	MuebleCasa [houseid][index][mPos_y] = 0.0;
	MuebleCasa [houseid][index][mPos_z] = 0.0;
	MuebleCasa [houseid][index][mRot_x] = 0.0;
	MuebleCasa [houseid][index][mRot_y] = 0.0;
	MuebleCasa [houseid][index][mRot_z] = 0.0;

	new
	    querystr [182];

	format (querystr, sizeof (querystr), "UPDATE `Muebles` SET `Pos_x` = 0.0, `Pos_y` = 0.0, `Pos_z` = 0.0, `Rot_x` = 0.0, `Rot_y` = 0.0, `Rot_z` = 0.0 WHERE `HouseID` = %d AND `i` = %d", houseid, index);
	opmysql_tquery( querystr, "OnQueryFinish", "ii", 0, query_type_unknown);

	foreach (Player, i)
	{
	    if (ID_Casa (i) == houseid)
	    {
			if (OBJ_Mueble [i][index] != INVALID_OBJECT_ID)
			{
		        DestroyPlayerObject (i, OBJ_Mueble [i][index]);
	        	OBJ_Mueble [i][index] = INVALID_OBJECT_ID;
			}
		}
	}
}

stock DestroyMueble (houseid, index)
{
	MuebleCasa [houseid][index][mIndex] = 0;
	MuebleCasa [houseid][index][mPos_x] = 0.0;
	MuebleCasa [houseid][index][mPos_y] = 0.0;
	MuebleCasa [houseid][index][mPos_z] = 0.0;
	MuebleCasa [houseid][index][mRot_x] = 0.0;
	MuebleCasa [houseid][index][mRot_y] = 0.0;
	MuebleCasa [houseid][index][mRot_z] = 0.0;
	MuebleCasa [houseid][index][mTexture][0] = 0;
	MuebleCasa [houseid][index][mTexture][1] = 0;
	MuebleCasa [houseid][index][mTexture][2] = 0;
	MuebleCasa [houseid][index][mTexture][3] = 0;

	new
	    querystr [164];

	format (querystr, sizeof (querystr), "DELETE FROM `Muebles` WHERE `HouseID` = %d AND `i` = %d", houseid, index);
	opmysql_tquery( querystr, "OnQueryFinish", "ii", 0, query_type_unknown);

	foreach (Player, i)
	{
	    if (ID_Casa (i) == houseid)
	    {
			if (OBJ_Mueble [i][index] != INVALID_OBJECT_ID)
			{
		        DestroyPlayerObject (i, OBJ_Mueble [i][index]);
	        	OBJ_Mueble [i][index] = INVALID_OBJECT_ID;
			}
		}
	}
}

stock CreateHouseObject (houseid, index, modelid, Float: x, Float: y, Float: z, Float: rx, Float: ry, Float: rz)
{
	foreach (Player, i)
	{
	    if (ID_Casa (i) == houseid)
	    {
	        if (OBJ_Mueble [i][index] == INVALID_OBJECT_ID)
	        {
	        	OBJ_Mueble [i][index] = CreatePlayerObject (i, modelid, x, y, z, rx, ry, rz);
			}
			else
			{
			    DestroyPlayerObject (i, OBJ_Mueble [i][index]);
	        	OBJ_Mueble [i][index] = CreatePlayerObject (i, modelid, x, y, z, rx, ry, rz);
			}
		}
	}
}

stock GetMuebleModelIDAtIndex (index)
	return (ObjetosInterior[index][0]);

stock AceptarPedido(playerid, i, Type)
{
	MensajeFaccionF(IDCAMIONEROS, ""#CNARANJA"[Facción] "#CINFO"%s "#CBLANCO"aceptó el pedido nº %d "#CVERDE"(%s)", NombreJugador_(playerid), i, InfoNegocio[PedidoCamioneros[i][p_NegID]][nNombre]);
	Error(playerid, "Dirigete a la ~r~Fábrica ~w~para cargar el camión.");
	SetPlayerCP(playerid, CP_CAMIONEROFAC, EntregaInfo[Type][entX], EntregaInfo[Type][entY], EntregaInfo[Type][entZ], 8.0);
	SetPVarInt(playerid, "CAMFAC.PASO", 1);
	PedidoCamioneros[i][p_PlayerID] = playerid;
	Mensaje(playerid, -1, "Usa "#CINFO"/terminar entrega "#CBLANCO"para cancelar el pedido.");
	return 1;
}

stock ActualizarPedidoCamioneros(index)
{
	if(0 <= index < MAX_PEDIDOS_CAMIONEROS)
	{
	    new
	        str[36];

		A_Format(str, "Facciones/Camioneros/Ped%d.dat", index);

		new
		    File: Arch = fopen(str, io_write);

		A_Format(str, "%d&%d\n", PedidoCamioneros[index][p_NegID], PedidoCamioneros[index][p_Time]);
		fwrite(Arch, str);

		for(new i; i < MAX_STOCK_NEGOCIO; i++)
		{
			format(str, 8, "%d\n", PedidoCamioneros[index][p_Stock][i]);
			fwrite(Arch, str);
		}
		fclose(Arch);
		return 1;
	}
	return 0;
}

stock BorrarPedidoCamioneros(index)
{
	if(0 <= index < MAX_PEDIDOS_CAMIONEROS)
	{
	    PedidoCamioneros[index][p_NegID] = 0;
	    PedidoCamioneros[index][p_Time] = 0;
	    PedidoCamioneros[index][p_PlayerID] = INVALID_PLAYER_ID;

		for(new i; i < MAX_STOCK_NEGOCIO; i++)
		{
			PedidoCamioneros[index][p_Stock][i] = 0;
		}

		new
		    str[36];

		A_Format(str, "Facciones/Camioneros/Ped%d.dat", index);
		fremove(str);
		return 1;
	}
	return 0;
}

stock CargarPedidosCamioneros()
{
	for (new i; i < MAX_PEDIDOS_CAMIONEROS; i++)
	{
	    PedidoCamioneros[i][p_PlayerID] = INVALID_PLAYER_ID;

	    new
	        str[36];

		A_Format(str, "Facciones/Camioneros/Ped%d.dat", i);
		if (fexist(str))
		{
		    new
		        File: Arch = fopen(str, io_read),
				read_str[15],
				loop;

			while(fread(Arch, read_str) && loop-1 < MAX_STOCK_NEGOCIO)
			{
			    if (loop == 0)
			    {
					sscanf(read_str, "p<&>dd", PedidoCamioneros[i][p_NegID], PedidoCamioneros[i][p_Time]);
					loop = 1;
					continue;
				}
				PedidoCamioneros[i][p_Stock][loop-1] = strval(read_str);
				loop++;
			}
			fclose(Arch);
		}
	}
	return 1;
}

stock SetNecType(playerid, type)
{
	InfoJugador[playerid][jNecesidades] = type;
	if (type == 0)
	{
		MostrarNecesidades(playerid, -1);
	}
	else if (type == 1)
	{
	    MostrarNecesidades(playerid);
	}
	else if (type == 2)
	{
		SacarNecesidades(playerid);
	}
	return 1;
}


stock PagarEmbargacion(playerid, patente[], vehicleid)
{
	MensajeF(playerid, -1, "Pagaste la embargación del "#CAMARILLO"%s (%s) "#CBLANCO"por "#CVERDE"$%d.", veh_getNameAsString(vehicleid), patente, PRECIO_DESEMBARGAR);
	Mensaje (playerid, -1, "El vehículo está siendo trasladado con una grúa al estacionamiento del centro de licencias.");

	QuitarDinero(playerid, PRECIO_DESEMBARGAR);

	AgregarDineroFaccion (IDLSPD, PRECIO_DESEMBARGAR);

	static
		const Float: PosLiberado[][4] =
		{
			{1062.4135,-1737.2881,13.0609,268.8167},
			{1062.9963,-1740.2483,13.0595,269.2335},
			{1062.2863,-1743.0959,13.0474,268.5128},
			{1062.2333,-1746.2067,13.0437,268.7407},
			{1062.2864,-1748.9995,13.0354,269.5854},
			{1062.3740,-1752.1222,13.0288,270.3390},
			{1061.8939,-1755.0231,13.0452,271.3326},
			{1062.4635,-1760.9941,12.9895,269.8627},
			{1062.7404,-1763.7233,12.9780,271.8742},
			{1062.4788,-1766.6787,12.9669,270.7776},
			{1061.9313,-1769.7714,12.9550,271.0464},
			{1062.3962,-1772.7786,12.9685,271.3751},
			{1062.6458,-1775.7515,12.9302,270.0612}
		};

	new
	    Randomizer = random(sizeof(PosLiberado));
	
	// Data Update
	veh_setSpawnInfo(vehicleid, PosLiberado[Randomizer][0], PosLiberado[Randomizer][1], PosLiberado[Randomizer][2], PosLiberado[Randomizer][3], 0, 0);
	veh_respawn(vehicleid);
	ownVeh_MySQL_update(ownVeh:veh_ownVehID(vehicleid));
	return 1;
}

stock OnPlayerSelectInvObject(playerid, item, playeritem)
{
	if (GetObject(playerid) != -1)
	{
	    new
	        response = GuardarObjetoInventario(playerid, GetObject(playerid), -1, GetObjectData(playerid));

	    if (response == INV_ERR_BIG)
	        return Error(playerid, "Se intentó guardar tu objeto actual, pero este es demaciado grande para entrar en el inventario.");

	    if (response == INV_ERR_NO_SIZE)
	        return Error(playerid, "Se intentó guardar tu objeto actual, pero no tienes un lugar vacío en el inventario.");

		if (response != 0)
			return 1;
	}

	GiveObject(playerid, item, ItemInventario[playerid][playeritem][invData]);
	ItemInventario[playerid][playeritem][invObject] = 0;
	ItemInventario[playerid][playeritem][invData] = 0;

	new
	    str[30];

	A_Format(str, "~w~%s", ObjectData[item][invName]);
	GameTextForPlayer(playerid, _TD(str), 2000, 4);
	return 1;
}

#define NeedObject(%0)<%1>  if(NeedObject2(%0, %1)) return 1

stock INV_GetWeapon(playerid)
{
	return ArmaActual[playerid];
}

stock GetLoginTime(playerid)
{
	return LoginTime[playerid];
}

stock NeedObject2(playerid, object)
{
	new
		pobj = CurrentObject[playerid];

	if (pobj < 1)
	    return 1;

	if (ObjectData[pobj][invType] == object)
	{
		return 0;
	}
	else
	{
		Loop(i, sizeof(ObjectData), 0)
		{
		    if(ObjectData[i][invType] == object)
		    {
			    new
			        string[60];

				A_Format(string, "Necesitas un ~b~%s.", ObjectData[i][invName]);
				Error(playerid, string);
				return 1;
		    }
		}
	}
	return 1;
}

stock GetObject(playerid)
{
	return CurrentObject[playerid];
}

stock GetObjectData(playerid)
{
	new
	    obj = GetObject(playerid);

	if(obj == -1)
	    return 0;

	if(ObjectData[obj][invType] == INV_ARMA)
	{
	    CurrentObjectData[playerid] = INV_GetPlayerAmmo(playerid);
	}
	return CurrentObjectData[playerid];
}

CALLBACK: Float: GetObjectTypeDif(type)
{
	new
		Float: dif;
	switch(type)
	{
	    case INV_ARMA:
	    {
	        dif = 0.950727;
	    }
	    case INV_CAJAARMA, INV_CAJACHALECO, INV_CAJAESPOSA:
		{
			dif = 0.6647;
		}
		case INV_CAJACARGADOR:
		{
			dif = 0.8978;
		}
		case INV_PAQUETECOCA, INV_PAQUETEMARI:
		{
			dif = 1.0076;
		}
		case INV_CHALECOPOLICIA, INV_CHALECO:
		{
			dif = 0.7608;
		}
		default:
		{
			dif = 1.0;
		}
	}
	return dif;
}

stock GetObjectCorrectZ(Float:x, Float:y, &Float:z)
{
    new
		Float: radius_ammo = 0.4226,
		Float: radius_weap = 0.6341,
		Float: radius_packet = 0.3347,
		Float: diference_ammo = 0.2331,
		Float: diference_weap = 0.6800,
		Float: diference_packet = 0.1629,
		Float: start_z = z;

	foreach(ObjetosTirados, i)
	{
		switch(ObjectData[ObjetoTirado[i][obj_t_Type]][invType])
		{
			case INV_CAJACARGADOR:
			{
   				new
       				Float: distance = PointToPoint3D(ObjetoTirado[i][obj_t_x], ObjetoTirado[i][obj_t_y], ObjetoTirado[i][obj_t_z], x, y, z);

				if(distance < radius_ammo)
			    	z += diference_ammo;
			}
			case INV_CAJAARMA, INV_CAJAESPOSA, INV_CAJACHALECO:
			{
			    new
			        Float: distance = PointToPoint3D(ObjetoTirado[i][obj_t_x], ObjetoTirado[i][obj_t_y], ObjetoTirado[i][obj_t_z], x, y, z);

				if(distance < radius_weap)
				    z += diference_weap;
			}
			case INV_PAQUETECOCA, INV_PAQUETEMARI:
			{
			    new
			        Float: distance = PointToPoint3D(ObjetoTirado[i][obj_t_x], ObjetoTirado[i][obj_t_y], ObjetoTirado[i][obj_t_z], x, y, z);

				if(distance < radius_packet)
				    z += diference_packet;
			}
		}
	}

	if((z - start_z) > 2.0)
	    return 0;

	return 1;
}

stock RemoveObject(playerid)
{
	new
	    object = CurrentObject[playerid];

	if(object == -1)
	    return 1;

	if(CEL.State[playerid] != CEL_STATE_NONE)
	{
	    CEL.Toggle(playerid, false);
	}

    if(ObjectData[object][invType] == INV_CEL)
    {
        cmd_colgar(playerid, "celular");
	}
	KillTimer2(playerid, TIMER_LLAMADA);

	TextDrawHideForPlayer(playerid, TDManoHUD);
	if(TDMano[playerid] != PlayerText:INVALID_TEXT_DRAW)
	{
		PlayerTextDrawDestroy(playerid, TDMano[playerid]);
        TDMano[playerid] = PlayerText:INVALID_TEXT_DRAW;
	}

/*	if(TDMano[playerid] != PlayerText:INVALID_TEXT_DRAW)
	{
		PlayerTextDrawDestroy(playerid, TDMano[playerid]);
        TDMano[playerid] = PlayerText:INVALID_TEXT_DRAW;
	}

	HideObjectInfo(playerid);*/
	if(ObjectData[object][invType] == INV_ARMA)
	{
	    ResetPlayerWeapons(playerid);
		Cargadores[playerid] = 0;
		INV_Ammo[playerid] = 0;
		ArmaActual[playerid] = 0;
	    if(TDCargador[playerid] != PlayerText:INVALID_TEXT_DRAW)
	    {
			PlayerTextDrawDestroy(playerid, TDCargador[playerid]);
			TDCargador[playerid] = PlayerText:INVALID_TEXT_DRAW;
		}
		if (GetPlayerState (playerid) == PLAYER_STATE_PASSENGER && GetPlayerCameraMode (playerid) == 55)
		{
		    ReturnPlayerToPassengerSeat (playerid);
		}
	}
	CurrentObject[playerid] = -1;
	RemovePlayerAttachedObject(playerid, SLOT_MANODERECHA);

	if(ObjectData[object][invSize] >= MAX_SIZE_TO_CARRY)
	{
	    if(GetPlayerSpecialAction(playerid) & SPECIAL_ACTION_CARRY)
	    {
	        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		}
	}
	return 1;
}

stock GuardarObjetoInventario(playerid, object, slot = -1, data = 0)
{
	if(slot == -1)
	{
	    slot = FreeSLOT_MANODERECHA(playerid);
	}
	if(slot == -1)
	    return INV_ERR_NO_SIZE;

	if(ItemInventario[playerid][slot][invObject] != 0)
		return INV_ERR_USED;

	if(ObjectData[object][invSize] > MAX_INV_SIZE)
	    return INV_ERR_BIG;

	ItemInventario[playerid][slot][invObject] = object;
	ItemInventario[playerid][slot][invData] = data;
	RemoveObject(playerid);
	return 0;
}

stock FreeSLOT_MANODERECHA(playerid)
{
	InvLoop(i,playerid)
	{
	    if(ItemInventario[playerid][i][invObject] == 0)
	        return i;
	}
	return -1;
}

stock INV_GetPlayerAmmo(playerid)
{
	if(!ArmaActual[playerid])
		return 0;

	return INV_Ammo [playerid];
}

//Armas
stock IsValidWeapon(weaponid)
{
	if (0 <= weaponid < MAX_WEAPONS)
	{
	    if (WeaponData[weaponid][weapAmmo] != 0)
	    {
	        return 1;
		}
	}
	return 0;
}

stock ArmaConCargador(weaponid)
{
	if (IsValidWeapon(weaponid))
	{
	    return (WeaponData[weaponid][weapAmmo] != 4999 && weaponid != 41);
	}
	return 0;
}

stock OP_GetWeaponName(weaponid, name[], size = sizeof(name))
{
	if (IsValidWeapon(weaponid))
	{
	    strunpack(name, WeaponData[weaponid][weapName], size);
	    return 1;
	}
	return 0;
}

stock GetWeaponAmmo(weaponid)
{
	if (IsValidWeapon(weaponid))
	{
	    return WeaponData[weaponid][weapAmmo];
	}
	return 0;
}
//INV
stock MostrarInventario(playerid, targetid = INVALID_PLAYER_ID, bool: selectable = true)
{
	if(targetid == INVALID_PLAYER_ID)
	    targetid = playerid;

	if(targetid == playerid && selectable)
	{
		if(Esposado(playerid))
		{
		    return Error(playerid, "~r~No puedes hacer esto, estás esposado.");
		}
	}

	new
     	Str2[65],
      	Str [MAX_ITEMS_INVENTARIO * sizeof(Str2)];

	InvLoop(i,playerid)
	{
	    if(ItemInventario[playerid][i][invObject])
	    {
			format(Str2, sizeof(Str2), ""#CINVUSADO"(%d)	{FFFFFF}%s\n", i+1, GetObjectName(ItemInventario[playerid][i][invObject], ItemInventario[playerid][i][invData]));
		}
		else
		{
			format(Str2, sizeof(Str2), ""#CINVVACIO"(%d)	{FFFFFF}Vacio\n", i+1);
		}
		strcat(Str, Str2);
	}

	if(selectable)
		Dialog(targetid, dInventario, DIALOG_STYLE_LIST, ""#CNARANJA"                                 INVENTARIO", Str, "Seleccionar", "Cerrar");

	else
		Dialog(targetid, dError, DIALOG_STYLE_MSGBOX, ""#CNARANJA"          INVENTARIO", Str, "Cerrar", "");

	return 1;
}

stock GetObjectName(objectid, extradata)
{
	new
	    str[40];

	if(1 <= objectid < sizeof(ObjectData))
	{
	    switch(ObjectData[objectid][invType])
	    {
	        case INV_ARMA:
			{
				if(ArmaConCargador(ObjectData[objectid][invData]))
				{
				    if(extradata == 0)
				    	A_Format(str, "%s (Sin balas)", ObjectData[objectid][invName]);

				    else if(extradata == 1)
				    	A_Format(str, "%s (1 bala)", ObjectData[objectid][invName]);

					else
				    	A_Format(str, "%s (%d balas)", ObjectData[objectid][invName], extradata);
				}
				else
				{
					A_Format(str, "%s", ObjectData[objectid][invName]);
				}
			}
	        case INV_CEL:
			{
	    		A_Format(str, "%s (Num: %d)", ObjectData[objectid][invName], extradata);
			}
	        case INV_PAQUETECOCA, INV_PAQUETEMARI:
			{
	  			if(extradata == 0)
		    		A_Format(str, "%s (Vacio)", ObjectData[objectid][invName]);

				else
	 				A_Format(str, "%s (%d gramos)", ObjectData[objectid][invName], extradata);
			}
	        case INV_BOLSACOCA, INV_BOLSAMARI:
			{
	  			if(extradata == 0)
		    		A_Format(str, "%s (Vacia)", ObjectData[objectid][invName]);

				else
	 				A_Format(str, "%s (%d gramos)", ObjectData[objectid][invName], extradata);
			}
	        case INV_BIDONCOMBUSTIBLE, INV_BIDONQUEROSEN:
			{
				A_Format(str, "%s (%d lts)", ObjectData[objectid][invName], extradata);
			}
	        case INV_HOJACOCA:
			{
				A_Format(str, "%d %s", extradata, ObjectData[objectid][invName]);
			}
	        case INV_PORRO:
			{
				A_Format(str, "%s (%d gramos)", ObjectData[objectid][invName], extradata/3);
			}
	        case INV_CAJACIGARRILLO:
			{
				A_Format(str, "%s (%d unidades)", ObjectData[objectid][invName], extradata);
			}
	        case INV_PORROON, INV_CIGARRILLOON:
			{
				A_Format(str, "%s (%d)", ObjectData[objectid][invName], extradata);
			}
	        case INV_ENCENDEDOR:
			{
				A_Format(str, "%s (%d de gas)", ObjectData[objectid][invName], extradata);
			}
	        case INV_PAQUETESEDA:
			{
				A_Format(str, "%s (%d hilos)", ObjectData[objectid][invName], extradata);
			}
		    case INV_POLLOCHICO, INV_POLLOGRANDE, INV_HAMBCHICA, INV_HAMBGRANDE, INV_PIZZACHICA, INV_PIZZAGRANDE:
		    {
				A_Format(str, "%s (%d)", ObjectData[objectid][invName], extradata);
			}
			default:
			{
				A_Format(str, ObjectData[objectid][invName]);
			}
		}
	}
	return str;
}

stock GetObjectAtType(type)
{
	Loop(i, sizeof(ObjectData), 1)
	{
	    if(ObjectData[i][invType] == type)
	        return i;
	}
	return -1;
}

stock GetObjectAtWeapon(weaponid, material[] = "")
{
	if (isnull (material))
	{
		Loop(i, sizeof(ObjectData), 1)
		{
		    if(ObjectData[i][invType] == INV_ARMA)
		    {
			    if(ObjectData[i][invData] == weaponid)
			    {
					return i;
				}
			}
		}
	}
	else
	{
		Loop(i, sizeof(ObjectData), 1)
		{
		    if(ObjectData[i][invType] == INV_ARMA)
		    {
			    if(ObjectData[i][invData] == weaponid && strfind (ObjectData[i][invName], material, true) != -1)
			    {
					return i;
				}
			}
		}
	}
	return -1;
}

stock GetObjectAtName (name[])
{
	Loop (i, sizeof(ObjectData), 0)
	{
	    if (strfind (ObjectData[i][invName], name, true) != -1)
	    {
	        return i;
		}
	}
	return -1;
}

stock GetReloaderAtWeapon(weaponid)
{
	Loop(i, sizeof(ObjectData), 1)
	{
	    if(ObjectData[i][invType] == INV_CARGADOR)
	    {
		    if(ObjectData[i][invData] == weaponid)
		    {
				return i;
			}
		}
	}
	return -1;
}

stock GetRockAtType(type)
{
	Loop(i, sizeof(ObjectData), 1)
	{
	    if(ObjectData[i][invType] == INV_MINERAL)
	    {
		    if(ObjectData[i][invData] == type)
		    {
				return i;
			}
		}
	}
	return -1;
}

stock GetObjectAtMaterialWeapon(weaponid, material[])
{
	Loop(i, sizeof(ObjectData), 1)
	{
	    if(ObjectData[i][invType] == INV_ARMA)
	    {
		    if(ObjectData[i][invData] == weaponid)
		    {
		        if(strfind(ObjectData[i][invName], material) != -1)
					return i;
			}
		}
	}
	return -1;
}

stock GetDescriptionAtType(type)
{
	new
	    str[150];

	switch(type)
	{
		case INV_ARMA:
		{
		    str = "Puede "#CINFO"/colgar "#CBLANCO"un arma pesada en la espalda, las armas livianas sólo pueden ser guardadas en el inventario.";
		}
		case INV_CARGADOR:
		{
			str = "Con los cargadores, puede colocarle balas al arma. Para recargar, coloquese el arma en la mano y use "#CINFO"/recargar";
		}
		case INV_CEL:
		{
			str = "Para usar tu celular, utiliza el comando "#CINFO"/celular";
		}
		case INV_MASCARA:
		{
			str = "Para colocarte o sacarte la mascara debes utiliza el comando "#CINFO"/mascara";
		}
		case INV_GPS:
		{
			str = "Para usar el gps, utiliza "#CINFO"/gps";
		}
		case INV_DINAMITA:
		{
			str = "Para plantar la Dinamita utiliza el comando "#CINFO"dinamita"#CBLANCO", recuerda que explotará en 5 segundos.";
		}
		case INV_SOGA:
		{
			str = "Para usar la soga, utiliza el comando "#CINFO"/atar";
		}
		case INV_VENDA:
		{
			str = "Para vendar a alguien, utiliza el comando "#CINFO"/vendar";
		}
		case INV_CAJACARGADOR:
		{
			str = "Para retirar munición de esta caja primero "#CINFO"/tirar "#CBLANCO"la caja al suelo, luego escribe "#CINFO"/caja";
		}
		case INV_CAJAARMA:
		{
			str = "Para retirar un arma de esta caja primero "#CINFO"/tirar "#CBLANCO"la caja al suelo, luego escribe "#CINFO"/caja";
		}
		case INV_WALKIETALKIE:
		{
			str = ""#CINFO"/wt "#CBLANCO"para hablar, para conectarte a una frecuencia "#CINFO"/frecuencia. "#CBLANCO"Para colgartelo, usa "#CINFO"/colgar";
		}
		case INV_PAQUETECOCA:
		{
			str = "Para utilizar este objeto, debes "#CINFO"/tirar "#CBLANCO"el objeto al piso y usar "#CINFO"/paquete.";
		}
		case INV_PAQUETEMARI:
		{
			str = "Para utilizar este objeto, debes "#CINFO"/tirar "#CBLANCO"el objeto al piso y usar "#CINFO"/paquete.";
		}
		case INV_BOLSACOCA:
		{
			str = "Para consumir la cocaina utiliza "#CINFO"/consumir cocaina.";
		}
	    case INV_MINERAL:
	    {
	        str = "Los minerales son muy demandados, y necesarios para hacer armas y drogas. Se recomienda venderlos a las familias.";
		}
	    case INV_BOLSAMARI:
	    {
	        str = "Con marihuana, puedes armar porros. Para armarlos, utiliza "#CINFO"/armar porro";
		}
	    case INV_CAJACIGARRILLO:
	    {
	        str = "Utiliza "#CINFO"/sacar cigarrillo "#CBLANCO"para extraer un cigarrillo de la caja, luego "#CINFO"/encender";
		}
	    case INV_BIDONQUEROSEN:
	    {
	        str = "El querosén, se utiliza para realizar cocaina. Busca más información en un laboratorio.";
		}
	    case INV_BIDONCOMBUSTIBLE:
	    {
	        str = "Usa "#CINFO"/usar bidon "#CBLANCO"cerca del tánque de su vehículo para agregarle combustible.";
		}
	    case INV_HOJACOCA:
	    {
	        str = "Las hojas de coca, se utilizan para realizar cocaina. Busca más información en un laboratorio.";
		}
	    case INV_ESPOSAS:
	    {
	        str = "Use "#CINFO"/esposar "#CBLANCO"para esposar a un jugador.";
	    }
	    case INV_SEMILLAMARI:
	    {
	        str = "Use "#CINFO"/plantar marihuana "#CBLANCO"en de patio de su casa para obtener tu propia planta.";
	    }
	    case INV_CIGARRILLO:
	    {
	        str = "Para encender el cigarrillo, usa "#CINFO"/encender. "#CBLANCO"Luego, podrás usar "#CINFO"/fumar";
	    }
	    case INV_PORRO:
	    {
	        str = "Para encender el porro, usa "#CINFO"/encender. "#CBLANCO"Luego, podrás usar "#CINFO"/fumar";
	    }
	    case INV_CIGARRILLOON:
	    {
	        str = "Usa "#CINFO"/fumar "#CBLANCO"para fumar de tu cigarrillo.";
	    }
	    case INV_PORROON:
	    {
	        str = "Usa "#CINFO"/fumar "#CBLANCO"para fumar de tu porro.";
	    }
	    case INV_PAQUETESEDA:
	    {
	        str = "La Seda es necesaria para armar porros, por el momento no tiene otro uso diferente.";
	    }
	    case INV_MOLDEARMA:
	    {
	        str = "Los moldes se utilizan para fabricar armas, busca más información en una fábrica de armas.";
	    }
	    case INV_HAMBCHICA, INV_HAMBGRANDE, INV_PIZZACHICA, INV_PIZZAGRANDE, INV_POLLOGRANDE, INV_POLLOCHICO:
	    {
	        str = "Utiliza "#CINFO"/comer "#CBLANCO"para consumir tu comida, y así rellenar tu barra de hambre.";
	    }
	    case INV_CAJACHALECO:
	    {
	        str = "Para retirar un chaleco de la caja, primero deberás "#CINFO"/tirar "#CBLANCO"la caja al suelo y luego "#CINFO"/caja.";
		}
		case INV_CAJAESPOSA:
		{
	        str = "Para retirar esposas de la caja, primero deberás "#CINFO"/tirar "#CBLANCO"la caja al suelo y luego "#CINFO"/caja.";
		}
		case INV_CHALECO, INV_CHALECOPOLICIA:
		{
	        str = "Use "#CINFO"/chaleco "#CBLANCO"para colocarte el chaleco en el cuerpo.";
		}
 		default:
		{
		    str = "Sin descripción";
		}
	}
	return str;
}

/*stock ShowObjectInfo(playerid, object)
{
   	TextDrawShowForPlayer(playerid, TDBoxInfo);
	if(TDManoInfo[playerid] == PlayerText:INVALID_TEXT_DRAW)
	{
		TDManoInfo[playerid] = CreatePlayerTextDraw(playerid, 160.159637, 350.693084, _TD(GetDescriptionAtType(ObjectData[object][invType])));
		PlayerTextDrawLetterSize(playerid, TDManoInfo[playerid], 0.305354, 1.047461);
		PlayerTextDrawTextSize(playerid, TDManoInfo[playerid], 275.199951, -10.453333);
		PlayerTextDrawAlignment(playerid, TDManoInfo[playerid], 1);
		PlayerTextDrawColor(playerid, TDManoInfo[playerid], -1);
		PlayerTextDrawUseBox(playerid, TDManoInfo[playerid], true);
		PlayerTextDrawBoxColor(playerid, TDManoInfo[playerid], 16843008);
		PlayerTextDrawSetShadow(playerid, TDManoInfo[playerid], 0);
		PlayerTextDrawSetOutline(playerid, TDManoInfo[playerid], -1);
		PlayerTextDrawBackgroundColor(playerid, TDManoInfo[playerid], 255);
		PlayerTextDrawFont(playerid, TDManoInfo[playerid], 1);
		PlayerTextDrawSetProportional(playerid, TDManoInfo[playerid], 1);
	}
	else
	{
 		PlayerTextDrawSetString(playerid, TDManoInfo[playerid], _TD(GetDescriptionAtType(ObjectData[object][invType])));
		PlayerTextDrawShow(playerid, TDManoInfo[playerid]);
	}
	PlayerTextDrawShow(playerid, TDManoInfo[playerid]);
	return 1;
}

stock HideObjectInfo(playerid)
{
   	TextDrawHideForPlayer(playerid, TDBoxInfo);
	if(TDManoInfo[playerid] != PlayerText:INVALID_TEXT_DRAW)
	{
		PlayerTextDrawDestroy(playerid, TDManoInfo[playerid]);
		TDManoInfo[playerid] = PlayerText:INVALID_TEXT_DRAW;
	}
	return 1;
}
*/

stock GiveObject(playerid, object, extradata = 0)
{
	if(object == -1)
	    return 0;

	if(CurrentObject[playerid] != -1)
	    return 0;

	if(1 <= object < sizeof(ObjectData))
	{
	    //TextDraw
	    TextDrawShowForPlayer(playerid, TDManoHUD);

		if(TDMano[playerid] == PlayerText:INVALID_TEXT_DRAW)
		{
			TDMano[playerid] = CreatePlayerTextDraw(playerid, 517.920593, 428.736206, _TD(ObjectData[object][invName]));
			PlayerTextDrawLetterSize(playerid, TDMano[playerid], 0.273997, 1.443203);
			PlayerTextDrawTextSize(playerid, TDMano[playerid], 835.199707, 141.866500);
			PlayerTextDrawAlignment(playerid, TDMano[playerid], 1);
			PlayerTextDrawColor(playerid, TDMano[playerid], -1378294017);
			PlayerTextDrawSetShadow(playerid, TDMano[playerid], 0);
			PlayerTextDrawSetOutline(playerid, TDMano[playerid], 1);
			PlayerTextDrawBackgroundColor(playerid, TDMano[playerid], 255);
			PlayerTextDrawFont(playerid, TDMano[playerid], 1);
			PlayerTextDrawSetProportional(playerid, TDMano[playerid], 1);
		}
		else
		{
		    PlayerTextDrawSetString(playerid,
			TDMano[playerid], _TD(ObjectData[object][invName]));
		}
		PlayerTextDrawShow(playerid, TDMano[playerid]);

	    //General
	    CurrentObject[playerid] = object;
	    CurrentObjectData[playerid] = extradata;
		SetPlayerAttachedObject(playerid, SLOT_MANODERECHA, ObjectData[object][invObjID], 6, ObjectData[object][invX], ObjectData[object][invY], ObjectData[object][invZ], ObjectData[object][invRX], ObjectData[object][invRY], ObjectData[object][invRZ], ObjectData[object][invEX], ObjectData[object][invEY], ObjectData[object][invEZ], ObjectData[object][invColor1], ObjectData[object][invColor2]);

		if(ObjectData[object][invSize] >= MAX_SIZE_TO_CARRY)
		{
		    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
		}

		//Armas
		if(ObjectData[object][invType] == INV_ARMA)
		{
			new
				weaponid = ObjectData[object][invData],
				ammo = extradata;

			if(ammo > GetWeaponAmmo(weaponid))
				ammo = GetWeaponAmmo(weaponid);

			if(ammo < 0)
			    ammo = 0;

			if(ammo)
				GivePlayerWeapon(playerid, weaponid, ammo);

			if (GetPlayerState (playerid) == PLAYER_STATE_DRIVER)
			    SetPlayerArmedWeapon (playerid, 0);

			ArmaActual[playerid] = weaponid;
			INV_Ammo[playerid] = ammo;

			if (ArmaConCargador(weaponid))
			{
				new
				    cargadores = 0;

				InvLoop(i,playerid)
				{
				    new
				        item2 = ItemInventario[playerid][i][invObject];

					if(ObjectData[item2][invType] == INV_CARGADOR)
					{
						if(ObjectData[item2][invData] == ObjectData[object][invData])
						{
						    cargadores++;
						}
					}
				}
				Cargadores[playerid] = cargadores;
				ActualizarTDCargador(playerid);
			}
		}
	    return 1;
	}
	return 0;
}

stock UpdateCameraLabel(slot, bool:pos, bool:destroy)
{
	if(pos)
	{
	    if(destroy)
	    	DestroyDynamic3DTextLabel(CamaraVelocidad[slot][camLabelID]);

	    CamaraVelocidad[slot][camLabelID] = CreateDynamic3DTextLabel(".", 0xFFFFFFFF, CamaraVelocidad[slot][camX], CamaraVelocidad[slot][camY], CamaraVelocidad[slot][camZ]+5.0, 20.0);
	}
	new
	    string[40];

	A_Format(string, "Máxima Velocidad: "#CROJO"%d KM/H", CamaraVelocidad[slot][camSpeed]);
	UpdateDynamic3DTextLabelText(CamaraVelocidad[slot][camLabelID], 0xFFFFFFFF, string);
	return 1;
}

stock PlayAudioStreamForVehicle(vehicleid, url[])
{
	foreach(Player, i)
	{
	    if(IsPlayerInVehicle(i, vehicleid))
	    {
	        PlayAudioStreamForPlayer(i, url);
		}
	}
	return 1;
}

stock StopAudioStreamForVehicle(vehicleid)
{
	foreach(Player, i)
	{
	    if(IsPlayerInVehicle(i, vehicleid))
	    {
	        StopAudioStreamForPlayer(i);
		}
	}
	return 1;
}

stock PlantaMasCercana(playerid)
{
	foreach(Planta, i)
   	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, InfoPlanta[i][plantaX], InfoPlanta[i][plantaY], InfoPlanta[i][plantaZ]))
       	{
			return i;
		}
	}
	return -1;
}

stock MensajeRadio(color, Str[], radio)
{
	foreach(Player, i)
	{
	    if(IsPlayerInAnyVehicle(i))
	    {
	        if(Veh[GetPlayerVehicleID(i)][vRadio] == radio)
	        {
	            Mensaje(i, color, Str);
			}
		}
	}
	return 1;
}


stock GetMinName(index)
{
	return DataMineral[index][mindataName];
}

CALLBACK: Claudia_LSPD(playerid, type)
{
	switch(type)
	{
	    case 0:
	    {
	        Dialog(playerid, dBuscarPersona, DIALOG_STYLE_INPUT, ""#CVERDE"Claudia: "#CBLANCO"Bien, digame el DNI del individuo que desee buscar", ""#CBLANCO"Escribe el "#CROJO"DNI "#CBLANCO"de la persona que desees obtener información:", "Hablar", "");
		}
		case 1:
		{
		    new
		        Date[100];

			GetPVarString(playerid, "Claudia_Antecedentes", Date, 100);
			DeletePVar(playerid, "Claudia_Antecedentes");
          	NPCTalk(NPC_CLAUDIA, Date);
          	SetTimerEx("Claudia_LSPD", 4000, false, "ii", playerid, 2);
		}
		case 2:
		{
		    new
		        ID = GetPVarInt(playerid, "Claudia_ID"), bool: Found,
				Str[MAX_CARACTERES_ANTECEDENTE+20];

			DeletePVar(playerid, "Claudia_ID");

			Loop(i, MAX_ANTECEDENTES, 0)
			{
			    new
			        Date[MAX_CARACTERES_ANTECEDENTE], Fecha[15];

			    if(BuscarAntecedente(ID, Date, Fecha, i) == 2)
			    {
			    	ProxDetector(15.0, NPC_CLAUDIA, "Claudia dice: El individuo no tiene antecedentes.", -1, Hablar,Hablar2,Hablar3,Hablar4);
			    	return 1;
				}

			    if(!isnull(Date) && !isnull(Fecha))
			    {
					if(!Found) Found = true;
			    	A_Format(Str, "Claudia dice: [%s] %s", Fecha, Date);
			    	ProxDetector(15.0, NPC_CLAUDIA, Str, -1,Hablar,Hablar2,Hablar3,Hablar4);
				}
			}
			if(!Found) ProxDetector(15.0, NPC_CLAUDIA, "Claudia dice: El individuo no tiene antecedentes.", -1, Hablar,Hablar2,Hablar3,Hablar4);
		}
		case 3:
		{
			Dialog(playerid, dAgregarAnt, DIALOG_STYLE_INPUT, ""#CVERDE"Claudia: "#CBLANCO"Bien, digame el DNI del individuo", ""#CBLANCO"Escribe el "#CROJO"DNI "#CBLANCO"de la persona a la que le agregarás antecedentes.", "Hablar", "");
		}
	}
	return 1;
}

CALLBACK: EncontrarVeh(playerid,i)
{
	MensajeF(playerid,C_VERDE,"[GPS] Información del satélite: "#CBLANCO"| Modelo: "#CINFO"%s "#CBLANCO"| Patente: "#CAMARILLO"%s",veh_getNameAsString(i), veh_getPlateAsString(i));

	new
		Float:x, Float:y, Float:z;

	GetVehiclePos(i, x, y, z);
	
	if (VehEmbargado(i))
	{
	    Mensaje(playerid, -1, "El vehículo se encuentra embargado por la policía.");
	    Mensaje(playerid, -1, "Para poder usarlo, deberás pagar la embargación en la Comisaría nº 2.");
	    Mensaje(playerid, -1, "Se marcó en el mapa la ubicación la comisaría para desembargar el vehículo.");
		CheckpointGPS(playerid, 2082.9968, -2097.3772, 13.5469, 3);//comisaria nº 2
		return 1;
	}
	
	if (veh_isDestroyed(i)) {
		MensajeF(playerid, -1, "El vehículo que intenta buscar se encuentra destruido por "#CVERDE"%d "#CBLANCO"minutos más.", ((E_VEH_DESTROYED_TIME-ownVeh_getSpawnTime(veh_ownVehID(i))) / 60) + 1);
		return 1;
	}

	new
	    vw = veh_getVirtualWorld(i);

	if (100 <= vw < MAX_CASAS+100)
	{
		foreach (Garages, g)
		{
		    if (InfoGarage[g][gVW] == vw)
		    {
				CheckpointGPS(playerid, InfoGarage[g][gExt_x], InfoGarage[g][gExt_y], InfoGarage[g][gExt_z], 4.0);
				Mensaje(playerid, -1, "El vehículo se encuentra en un garage, se marcó la ubicación.");
				return 1;
			}
		}
		return Mensaje(playerid, -1, "El vehículo se encuentra en una posición desconocida.");
	}

	if (vw)
	{
		Mensaje(playerid, -1, "El vehículo se encuentra en una posición que el GPS no puede ubicar.");
		return 1;
	}

	CheckpointGPS(playerid, x, y, z, 4);
	return 1;
}

CALLBACK: ActualizarAttach(playerid,id)
{
	SetPlayerAttachedObject(playerid,id,AttachmentObjects[InfoJugador[playerid][jAccesorio][id]][attachmodel],InfoJugador[playerid][jAttachBone][id],InfoJugador[playerid][jAttachPosx][id],InfoJugador[playerid][jAttachPosy][id],InfoJugador[playerid][jAttachPosz][id],InfoJugador[playerid][jAttachAngx][id],InfoJugador[playerid][jAttachAngy][id],InfoJugador[playerid][jAttachAngz][id],InfoJugador[playerid][jAttachEscx][id],InfoJugador[playerid][jAttachEscy][id],InfoJugador[playerid][jAttachEscz][id]);
	return 1;
}

stock BuscarModeIndexInt(model, &dest)
{
	Loop(i, sizeof ObjetosInterior, 0)
	{
		if(model == ObjetosInterior[i][0]) dest = i;
	}
	return 0;
}

stock PrecioBalaArma(i)
{
	switch(i)
	{
	    case 22,23: return 8;//balas 9mm
	    case 24,25,26,27,33: return 12;//dk, escopetas (balas grandes)
	    case 28,29,32: return 7;//subfusiles
	    case 30,31: return 10;//colt, ak
	    case 34: return 40;//ap
	    default: return 100;
	}
	return 10;
}


public OnPlayerEditAttachedObject( playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ )
{
	if(response)
	{
		InfoJugador[playerid][jAttachPosx][index] = fOffsetX;
		InfoJugador[playerid][jAttachPosy][index] = fOffsetY;
		InfoJugador[playerid][jAttachPosz][index] = fOffsetZ;
		InfoJugador[playerid][jAttachAngx][index] = fRotX;
		InfoJugador[playerid][jAttachAngy][index] = fRotY;
		InfoJugador[playerid][jAttachAngz][index] = fRotZ;
		InfoJugador[playerid][jAttachEscx][index] = fScaleX;
		InfoJugador[playerid][jAttachEscy][index] = fScaleY;
		InfoJugador[playerid][jAttachEscz][index] = fScaleZ;
		ActualizarAccesorios(playerid,index);
	}
	return 1;
}

public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ)
{
	if(playerobject)
	{
		if(GetPVarInt(playerid,"EditandoMuebles"))
		{
	 		new
			 	ID = GetPVarInt(playerid, "ID_MUEBLE"),
	 			i = ID_Casa(playerid);

			Iter_Remove(Player, playerid);

			foreach(Player, p)
			{
			    if(CasaActual[p] == i)
			    {
			        MovePlayerObject(p, OBJ_Mueble[playerid][ID], fX, fY, fZ, 10.0, fRotX, fRotY, fRotZ);
				}
			}

			Iter_Add(Player, playerid);

		    if(response == EDIT_RESPONSE_FINAL)
		    {
				if(objectid == OBJ_Mueble[playerid][ID])
				{
				    InfoCasa[i][cObjPosX][ID] = fX;
				    InfoCasa[i][cObjPosY][ID] = fY;
				    InfoCasa[i][cObjPosZ][ID] = fZ;
				    InfoCasa[i][cObjRotX][ID] = fRotX;
				    InfoCasa[i][cObjRotY][ID] = fRotY;
				    InfoCasa[i][cObjRotZ][ID] = fRotZ;
			    	AjustarMueble_P(i,ID,InfoCasa[i][cObjPosX][ID],InfoCasa[i][cObjPosY][ID],InfoCasa[i][cObjPosZ][ID]);
					AjustarMueble_R(i,ID,InfoCasa[i][cObjRotX][ID],InfoCasa[i][cObjRotY][ID],InfoCasa[i][cObjRotZ][ID]);
				    ActualizarCasa(i, false, ID, false);
					SelectObject(playerid);
				}
			}
			else if(response == EDIT_RESPONSE_CANCEL)
			{
				if(objectid == OBJ_Mueble[playerid][ID])
				{
			    	AjustarMueble_P(i,ID,InfoCasa[i][cObjPosX][ID],InfoCasa[i][cObjPosY][ID],InfoCasa[i][cObjPosZ][ID]);
					AjustarMueble_R(i,ID,InfoCasa[i][cObjRotX][ID],InfoCasa[i][cObjRotY][ID],InfoCasa[i][cObjRotZ][ID]);
				}
			}
		}
	}
	return 1;
}

stock Esposado(playerid)
{
	return InfoJugador[playerid][jEsposado];
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if(GetPVarInt(playerid, "EditandoKP"))
	{
	    if(response == EDIT_RESPONSE_FINAL)
		{
			MensajeF(playerid, -1, "%.04f, %.04f, %.04f, %.04f", x, y, z, rz);
			DeletePVar(playerid, "EditandoKP");
			return 1;
		}
	}
	if(GetPVarInt(playerid,"EDITAR_IDObj") != 0)
	{
 		new IDO = GetPVarInt(playerid,"EDITAR_IDObj");
   		if(objectid == Objeto[IDO][oID])
	    {
			Objeto[IDO][oPosx] = x;
			Objeto[IDO][oPosy] = y;
			Objeto[IDO][oPosz] = z;
			Objeto[IDO][oAngx] = rx;
			Objeto[IDO][oAngy] = ry;
			Objeto[IDO][oAngz] = rz;
		}
	}
 	if(response == EDIT_RESPONSE_FINAL)
  	{
		new i = GetPVarInt(playerid, "PORTON_EDITAR");

  	    if(objectid == InfoPorton_Ex[i][portID])
  	    {
			switch(GetPVarInt(playerid,PVar_PORTON))
			{
			    case EDIT_POS:
			    {
					InfoPorton_Ex[i][pX] = x;
					InfoPorton_Ex[i][pY] = y;
					InfoPorton_Ex[i][pZ] = z;
					InfoPorton_Ex[i][pRX] = rx;
					InfoPorton_Ex[i][pRY] = ry;
					InfoPorton_Ex[i][pRZ] = rz;
				}
			    case EDIT_ABIERTO:
			    {
					InfoPorton_Ex[i][pAX] = x;
					InfoPorton_Ex[i][pAY] = y;
					InfoPorton_Ex[i][pAZ] = z;
	    		}
			}
			Mensaje(playerid, -1, "La posición del portón fue "#CVERDE"actualizada.");
			return 1;
		}
	}
	if(GetPVarInt(playerid, "AcomodandoMinerales"))
	{
	    if(response == EDIT_RESPONSE_FINAL)
	    {
			DeletePVar(playerid, "AcomodandoMinerales");
			new
			    File: Minerales = fopen("minerales.txt", io_append),
			    str[200];

			A_Format(str, "{%f, %f, %f, %f, %f, %f},\r\n", x, y, z, rx, ry, rz);
			fwrite(Minerales, str);
			fclose(Minerales);
			MensajeF(playerid, -1, "Exportado a "#CINFO"'minerales.txt'.");
			DestroyDynamicObject(objectid);
			CreateDynamicObject(3931, x, y, z, rx, ry, rz);
		}
		else if(response == EDIT_RESPONSE_CANCEL)
		{
			DeletePVar(playerid, "AcomodandoMinerales");
			DestroyDynamicObject(objectid);
		}
	}
	if(response == EDIT_RESPONSE_FINAL)
	{
		if(GetPVarInt(playerid, "EDITANDO_CAMARA"))
		{
		    new
		        slot = GetPVarInt(playerid, "EDITANDO_CAMARAID");

			CamaraVelocidad[slot][camX] = x;
			CamaraVelocidad[slot][camY] = y;
			CamaraVelocidad[slot][camZ] = z;
			CamaraVelocidad[slot][camAngle] = rz;
			SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, 0.0, 0.0, rz);
			UpdateCameraLabel(slot, true, true);

			new
				str2[5];

			valstr(str2, slot);
			cmd_editarcamara(playerid, str2);
			DeletePVar(playerid, "EDITANDO_CAMARA");
			return 1;
		}
	}
	if(GetPVarInt(playerid, "GRAFFITI_EDITPOS"))
	{
	    new
			obj_supuesto = GetPVarInt(playerid, "GRAFFITI_OBJID");

	    if(obj_supuesto == objectid)
	    {
		    if(response == EDIT_RESPONSE_FINAL) //Guardar..
		    {
				new
					Float: x_ = GetPVarFloat(playerid, "GRAFFITI_x"),
					Float: y_ = GetPVarFloat(playerid, "GRAFFITI_y"),
					Float: z_ = GetPVarFloat(playerid, "GRAFFITI_z");

				if(PointToPoint3D(x_, y_, z_, x, y, z) > 10.0)
				{
					MensajeF(playerid, -1, "No puedes salir de la zona en la que pusiste "#CINFO"/graffiti.");
					SetDynamicObjectPos(objectid, x, y, z);
					EditDynamicObject(playerid, objectid);
					return 1;
				}
				//Success.
				new
					i;

				for( ; i < MAX_GRAFFITIS; i++)
				{
				    if(InfoGraffiti[i][grafObjID] == 0)
				        break;
				}
				if(i >= MAX_GRAFFITIS-1)
				{
				    Mensaje(playerid, -1, "Hubo un error al intentar crear el Graffiti, intenta más tarde.");
	    			DeletePVar(playerid, "GRAFFITI_x");
				    DeletePVar(playerid, "GRAFFITI_y");
				    DeletePVar(playerid, "GRAFFITI_z");
				    DeletePVar(playerid, "GRAFFITI_OBJID");
				    DeletePVar(playerid, "GRAFFITI_EDITPOS");
				    DeletePVar(playerid, "GRAFFITI_TEXTO");
				    DestroyDynamicObject(obj_supuesto);
				    return 1;
				}
				InfoGraffiti[i][grafObjID] = obj_supuesto;
				GetPVarString(playerid, "GRAFFITI_TEXTO", InfoGraffiti[i][grafTexto], 10);
				InfoGraffiti[i][grafColor] = (ID_Familia(playerid) < sizeof(ColorGraffiti)) ? ColorGraffiti[ID_Familia(playerid)][0] : 0;
				InfoGraffiti[i][grafX] = x;
				InfoGraffiti[i][grafY] = y;
				InfoGraffiti[i][grafZ] = z;
				InfoGraffiti[i][grafRotX] = rx;
				InfoGraffiti[i][grafRotY] = ry;
				InfoGraffiti[i][grafRotZ] = rz;
				InfoGraffiti[i][grafTime] = gettime();
				alm(InfoGraffiti[i][grafOwner],pName(playerid));
				SetDynamicObjectPos(objectid, x, y, z);
				SetDynamicObjectRot(objectid, rx, ry, rz);
				ActualizarGraffiti(i);
				Iter_Add(Graffiti, i);
				Mensaje(playerid, -1, "El graffiti fue pintado correctamente.");
    			DeletePVar(playerid, "GRAFFITI_x");
			    DeletePVar(playerid, "GRAFFITI_y");
			    DeletePVar(playerid, "GRAFFITI_z");
			    DeletePVar(playerid, "GRAFFITI_OBJID");
			    DeletePVar(playerid, "GRAFFITI_EDITPOS");
			    DeletePVar(playerid, "GRAFFITI_TEXTO");
			}
			else if(response == EDIT_RESPONSE_CANCEL) //Borrar
			{
    			DeletePVar(playerid, "GRAFFITI_x");
			    DeletePVar(playerid, "GRAFFITI_y");
			    DeletePVar(playerid, "GRAFFITI_z");
			    DeletePVar(playerid, "GRAFFITI_OBJID");
			    DeletePVar(playerid, "GRAFFITI_EDITPOS");
			    DeletePVar(playerid, "GRAFFITI_TEXTO");
			    DestroyDynamicObject(obj_supuesto);
			    Mensaje(playerid, -1, "El graffiti fue eliminado.");
			}
		}
		else
		{
   			DeletePVar(playerid, "GRAFFITI_x");
		    DeletePVar(playerid, "GRAFFITI_y");
		    DeletePVar(playerid, "GRAFFITI_z");
		    DeletePVar(playerid, "GRAFFITI_OBJID");
		    DeletePVar(playerid, "GRAFFITI_EDITPOS");
		    DeletePVar(playerid, "GRAFFITI_TEXTO");
  			DestroyDynamicObject(obj_supuesto);
		}
	}
	if(GetPVarInt(playerid, "ESTACION_OBJID"))
	{
	    new
	        obj = GetPVarInt(playerid, "ESTACION_OBJID");

		if(response == EDIT_RESPONSE_FINAL)
		{
		    new
		        neg = GetPVarInt(playerid, "ESTACION_NEGID");

			DeletePVar(playerid, "ESTACION_OBJID");
			DeletePVar(playerid, "ESTACION_NEGID");

			DestroyDynamicObject(obj);
			new
			    id = CrearEstacion(neg, x, y, z, rz);
			if(id == -1)
			    return Error(playerid, "No se pueden crear más estaciones, avisale al spell xD");
			MensajeF(playerid, -1, "Estación creada correctamente (ID: %d)", id);
		}
		else if(response == EDIT_RESPONSE_CANCEL)
		{
			DeletePVar(playerid, "ESTACION_OBJID");
			DeletePVar(playerid, "ESTACION_NEGID");

			DestroyDynamicObject(obj);
		}
	}
	if(GetPVarInt(playerid, "ESTACION_OBJIDEX"))
	{
	    new
	        obj = GetPVarInt(playerid, "ESTACION_OBJIDEX");

		if(response == EDIT_RESPONSE_FINAL)
		{
			new
			    index = GetPVarInt (playerid, "ESTACION_INDEX");

			DeletePVar(playerid, "ESTACION_OBJIDEX");
			DeletePVar(playerid, "ESTACION_INDEX");

			SetDynamicObjectPos(obj, x, y, z);
			SetDynamicObjectRot(obj, rx, ry, rz);

			InfoEstacion [index][estX] = x;
			InfoEstacion [index][estY] = y;
			InfoEstacion [index][estZ] = z;
			InfoEstacion [index][estAngle] = rz;

			DestroyDynamic3DTextLabel (InfoEstacion[index][estLabelID]);
			InfoEstacion[index][estLabelID] = CreateDynamic3DTextLabel(" ", C_AZUL,  x, y, z+1.5, 6.0);
			ActualizarLabelEstacion (index);
			ActualizarEstacion (index);
			MensajeF(playerid, -1, "Estación editada correctamente (ID: %d)", index);
		}
		else if(response == EDIT_RESPONSE_CANCEL)
		{
			DeletePVar(playerid, "ESTACION_OBJIDEX");
			DeletePVar(playerid, "ESTACION_INDEX");

			DestroyDynamicObject(obj);
		}
	}
	if(GetPVarInt(playerid, "ADMIN_EDIT_GRAFFITI"))
	{
	    if(response == EDIT_RESPONSE_FINAL)
	    {
			new
			    graf_id = GetPVarInt(playerid, "ADMIN_GRAFF_ID");

			SetDynamicObjectPos(InfoGraffiti[graf_id][grafObjID], x, y, z);
			SetDynamicObjectRot(InfoGraffiti[graf_id][grafObjID], rx, ry, rz);

			InfoGraffiti[graf_id][grafX] = x;
			InfoGraffiti[graf_id][grafY] = y;
			InfoGraffiti[graf_id][grafZ] = z;
			InfoGraffiti[graf_id][grafRotX] = rx;
			InfoGraffiti[graf_id][grafRotY] = ry;
			InfoGraffiti[graf_id][grafRotZ] = rz;

			DeletePVar(playerid, "ADMIN_EDIT_GRAFFITI");
			DeletePVar(playerid, "ADMIN_GRAFF_ID");
			ActualizarGraffiti(graf_id);
			MensajeF(playerid, -1, "El graffiti ID %d fue movido.", graf_id);
		}
		else if(response == EDIT_RESPONSE_CANCEL)
		{
			DeletePVar(playerid, "ADMIN_EDIT_GRAFFITI");
			DeletePVar(playerid, "ADMIN_GRAFF_ID");
		}
	}
	return 1;
}

public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z, Float:vel_x, Float:vel_y, Float:vel_z)
{
	return 1;
}

CALLBACK: Float: PointToPoint2D(Float:x1, Float:y1, Float:x2, Float:y2)
{
    return VectorSize (x1-x2, y1-y2, 0.0);
}

CALLBACK: Float: PointToPoint3D(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2)
{
    return VectorSize (x1-x2, y1-y2, z1-z2);
}

stock SecondsToDHMS (value, &days, &hours, &minutes, &seconds)
{
	days = value / (24 * 60 * 60);
	hours = (value - (days * 24 * 60 * 60)) / (60 * 60);
	minutes = (value - (days * 24 * 60 * 60) - (hours * 60 * 60)) / 60;
	seconds = value - (days * 24 * 60 * 60) - (hours * 60 * 60) - (minutes * 60);
}

stock ActualizarGraffitis()
{
	new
		unix_time = gettime();

	Loop(i, MAX_GRAFFITIS, 0)
	{
	    if(InfoGraffiti[i][grafTime] == 0)
	        continue;

 		new
			Dif = (unix_time - InfoGraffiti[i][grafTime]),
			dias,
			horas,
			minutos,
			segundos;

		SecondsToDHMS(Dif, dias, horas, minutos, segundos);
		if(1 <= dias < sizeof(ColorGraffiti[]))
		{
		    Loop(a, sizeof(ColorGraffiti), 0)
		    {
				if(InfoGraffiti[i][grafColor] == ColorGraffiti[a][dias-1])
				{
    				InfoGraffiti[i][grafColor] = ColorGraffiti[a][dias];
					UpdateGraffColor(i);
				}
			}
		}
		else if(dias >= sizeof(ColorGraffiti[])) // A los 4 días el graffiti se borra.
		{
		    DestroyGraffiti(i);
		    continue;
		}
	}
	return 1;
}

stock DestroyGraffiti (i)
{
	if(0 <= i < MAX_GRAFFITIS)
	{
		new
		    Path[18];

		A_Format(Path, "Graffitis/%d.ini", i);
		fremove(Path);

		DestroyDynamicObject(InfoGraffiti[i][grafObjID]);

        InfoGraffiti[i][grafObjID] = 0;
        alm(InfoGraffiti[i][grafTexto], "");
        alm(InfoGraffiti[i][grafOwner], "");
        InfoGraffiti[i][grafX] = 0.0;
        InfoGraffiti[i][grafY] = 0.0;
        InfoGraffiti[i][grafZ] = 0.0;
        InfoGraffiti[i][grafRotX] = 0.0;
        InfoGraffiti[i][grafRotY] = 0.0;
        InfoGraffiti[i][grafRotZ] = 0.0;
        InfoGraffiti[i][grafTime] = 0;
        Iter_Remove(Graffiti, i);
		return 1;
	}
	return 0;
}

stock UpdateGraffColor (i)
{
	if(0 <= i < MAX_GRAFFITIS)
	{
		new
		    Path[18];

		A_Format(Path, "Graffitis/%d.ini", i);

		new
		    INI:Arch = INI_Open(Path);

		INI_SetTag(Arch, "data");
		INI_WriteInt(Arch, "Color", InfoGraffiti[i][grafColor]);
		INI_Close(Arch);

		SetDynamicObjectMaterialText(InfoGraffiti[i][grafObjID], 0, InfoGraffiti[i][grafTexto], OBJECT_MATERIAL_SIZE_256x64, GRAFFITI_FONT, 50, 1, InfoGraffiti[i][grafColor], 0, 0); //Capa uno (Texto)
		return 1;
	}
	return 0;
}

stock ActualizarGraffiti(i)
{
	new
	    Path[20];

	A_Format(Path, "Graffitis/%d.ini", i);
	new
	    INI:Arch = INI_Open(Path);

	INI_SetTag(Arch, "data");
	INI_WriteInt(Arch, "Color", InfoGraffiti[i][grafColor]);
	INI_WriteInt(Arch, "Time", InfoGraffiti[i][grafTime]);
	INI_WriteFloat(Arch, "x", InfoGraffiti[i][grafX]);
	INI_WriteFloat(Arch, "y", InfoGraffiti[i][grafY]);
	INI_WriteFloat(Arch, "z", InfoGraffiti[i][grafZ]);
	INI_WriteFloat(Arch, "rx", InfoGraffiti[i][grafRotX]);
	INI_WriteFloat(Arch, "ry", InfoGraffiti[i][grafRotY]);
	INI_WriteFloat(Arch, "rz", InfoGraffiti[i][grafRotZ]);
	INI_WriteString(Arch, "Texto", InfoGraffiti[i][grafTexto]);
	INI_WriteString(Arch, "Owner", InfoGraffiti[i][grafOwner]);
	INI_Close(Arch);
	return 1;
}

CALLBACK: CargarGraffiti_data(i, name[], value[])
{
	INI_Int("Color", InfoGraffiti[i][grafColor]);
	INI_Int("Time", InfoGraffiti[i][grafTime]);
	INI_Float("x", InfoGraffiti[i][grafX]);
	INI_Float("y", InfoGraffiti[i][grafY]);
	INI_Float("z", InfoGraffiti[i][grafZ]);
	INI_Float("rx", InfoGraffiti[i][grafRotX]);
	INI_Float("ry", InfoGraffiti[i][grafRotY]);
	INI_Float("rz", InfoGraffiti[i][grafRotZ]);
	INI_String("Texto", InfoGraffiti[i][grafTexto], 10);
	INI_String("Owner", InfoGraffiti[i][grafOwner], MAX_PLAYER_NAME);
	return 1;
}

stock SetVehicleSpeed(vehicleid, Float:speed)//Milanosie
{
    if(speed != -1)
    {
		new
			Float:px,
			Float:py,
			Float:pz,
			Float:pvx,
			Float:pvy,
			Float:pvz,
			Float:fl;

		GetVehiclePos(vehicleid, px,py, pz);
		GetVehicleVelocity(vehicleid, pvx, pvy, pvz);
		if(pvx == 0) pvx += 0.0001;
		if(pvy == 0) pvy += 0.0001;
		if(pvz == 0) pvz += 0.0001;
		fl = floatsqroot((pvx * pvx) + (pvy * pvy) + (pvz * pvz));
		pvx = (pvx / fl) * (speed * 0.00475);
		pvy = (pvy / fl) * (speed * 0.00475);
		pvz = (pvz / fl) * (speed * 0.00475);
		SetVehicleVelocity(vehicleid, pvx, pvy, pvz);
	}
 	return 1;
}

stock GetPlayerSpeed(playerid)
{
    new Float:ST[4];
	GetPlayerVelocity(playerid,ST[0],ST[1],ST[2]);
    ST[3] = VectorSize(floatabs(ST[0]), floatabs(ST[1]), floatabs(ST[2])) * 179.28625;
    return floatround(ST[3]);
}

stock EsMoto(vehid)
{
	switch(vehid)
	{
	    case 448,461,462,463,468,521..523,581,586: return 1;
	}
	return 0;
}

stock EsBarco(vehid)
{
	switch(vehid)
	{
		case 430,446,452,453,454,472,473,493,595: return 1;
	}
	return 0;
}

CALLBACK: CheckpointEntrega(playerid)
{
	if(GetPVarInt(playerid,"PasoEntrega") == 1)
	{
		new
		TEntrega = GetPVarInt(playerid,"Tipo_Entrega"),
		LEntrega = GetPVarInt(playerid,"Lugar_Entrega"),
		Info[18],Info2[26];
		switch(TEntrega)
		{
		    case 1:
		    {
		    	SetPlayerCP(playerid,CP_CAMIONERO, ProductosVariosRandom[LEntrega][ePosx],ProductosVariosRandom[LEntrega][ePosy],ProductosVariosRandom[LEntrega][ePosz],5);
		    	Info = "estos productos";
				alm(Info2,ProductosVariosRandom[LEntrega][NombreEntrega]);
			}
		    case 2:
		    {
		    	SetPlayerCP(playerid,CP_CAMIONERO, RopaRandom[LEntrega][ePosx],RopaRandom[LEntrega][ePosy],RopaRandom[LEntrega][ePosz],5);
		    	Info = "esta ropa";
				alm(Info2,RopaRandom[LEntrega][NombreEntrega]);
			}
		    case 3:
		    {
		    	SetPlayerCP(playerid,CP_CAMIONERO, ComidaRandom[LEntrega][ePosx],ComidaRandom[LEntrega][ePosy],ComidaRandom[LEntrega][ePosz],5);
		    	Info = "estos alimentos";
				alm(Info2,ComidaRandom[LEntrega][NombreEntrega]);
			}
		}
		Descongelar(playerid);
		MensajeF(playerid,C_INFO,"> "#CBLANCO"Debes entregar %s en "#CINFO"%s",Info,Info2);
		Mensaje(playerid,C_INFO,"> "#CBLANCO"Se te marcó en el mapa el punto de entrega de estos productos.");
	}
	else if(GetPVarInt(playerid,"PasoEntrega") == 2)
	{
	    Mensaje(playerid,C_INFO,"> "#CBLANCO"Ya entregaste los productos, ahora regresa para confirmar la entrega y recibir tu paga");
		SetPlayerCP(playerid,CP_CAMIONERO, 2640.8167,-2139.0896,13.54,5);
	}
	return 1;
}

stock Truth_TerminoCosecha(playerid)
{
	Error(playerid, "Terminaste de cosechar. Busca nuevamente a ~b~Truth ~w~para obtener tu semilla.");
	PasoTruth[playerid] = 4;
	return 1;
}

stock ActualizarMaletero(vehicleid)
{
	if (IsValidVehicle(vehicleid))
	{
	    if (veh_isOwnVeh(vehicleid))
	    {
	        new
				path[25];

			A_Format(path, "Maleteros/%s.dat", veh_getPlateAsString(vehicleid));

			new
			    File: Arch = fopen(path, io_write);

			new
			    MaxSlots = veh_getMalSlots(vehicleid);

			for(new i; i < MaxSlots; i++)
			{
			    A_Format(path, "%d %d\n", ItemMaletero[vehicleid][i][invObject], ItemMaletero[vehicleid][i][invData]);
			    fwrite(Arch, path);
			}

			fclose(Arch);
			return 1;
		}
	}
	return 0;
}

stock CargarMaletero(vehicleid)
{
	if (IsValidVehicle(vehicleid))
	{
	    if (veh_isOwnVeh(vehicleid))
	    {
	        new
				path[30];

			A_Format(path, "Maleteros/%s.dat", veh_getPlateAsString(vehicleid));

			if(!fexist(path))
			    return 0;

			new
			    File: Arch = fopen(path, io_read);

			new
			    MaxSlots = veh_getMalSlots(vehicleid),
				i;

			while(fread(Arch, path) && i < MaxSlots)
			{
			    sscanf(path, "ii", ItemMaletero[vehicleid][i][invObject], ItemMaletero[vehicleid][i][invData]);
				i++;
			}

			fclose(Arch);
			return 1;
		}
	}
	return 0;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	new VehID = GetPlayerVehicleID(playerid);
	if(PasoTruth[playerid] == 3)
	{
	    if(VehID != Truth_VehID)
	        return Error(playerid, "No estás en la cosechadora de Truth.");

		new
			part = GetPVarInt(playerid, "Truth_Cosechar");

		if(part == sizeof(PosCosechadorMari)) //Terminó.
		{
			Truth_TerminoCosecha(playerid);
			DeletePVar(playerid, "Truth_Cosechar");
			DisablePlayerRaceCheckpoint(playerid);
			veh_respawn(VehID);
			Bit_Set(Llave_veh[playerid], Truth_VehID, false);
			return 1;
		}
		if(part == sizeof(PosCosechadorMari)-1) // Último CP.
		{
			SetPlayerRaceCheckpoint(playerid, 1, PosCosechadorMari[part][0], PosCosechadorMari[part][1], PosCosechadorMari[part][2],  PosCosechadorMari[part][0], PosCosechadorMari[part][1], PosCosechadorMari[part][2], 4.0);
		}
		else
		{
			SetPlayerRaceCheckpoint(playerid, 0, PosCosechadorMari[part][0], PosCosechadorMari[part][1], PosCosechadorMari[part][2],  PosCosechadorMari[part+1][0], PosCosechadorMari[part+1][1], PosCosechadorMari[part+1][2], 4.0);
		}
		part++;
		SetPVarInt(playerid, "Truth_Cosechar", part);
		return 1;
	}
	if(GetPVarInt(playerid,"EstaCultivando"))
	{
		if(EsCosechadora(VehID))
		{
		    if(GetPVarInt(playerid,"COSECHANDO_ID") == 0)
		    {
		        new i = GetPVarInt(playerid,"ParteCosecha");
			    new Par = (sizeof PosCosechador)-1;
				if(i == Par)
				{
		        	SetPlayerRaceCheckpoint(playerid,1,PosCosechador[Par][0],PosCosechador[Par][1],PosCosechador[Par][2], PosCosechador[Par][0],PosCosechador[Par][1],PosCosechador[Par][2],7);
	       		 	SetPVarInt(playerid,"ParteCosecha",1000);
					return 1;
				}
				if(i == 1000)
				{
					new
						seconds = gettime() - GetPVarInt (playerid, "StartC");
						
					DeletePVar (playerid, "StartC");
					
					if (seconds < 150)
					{
					    new
					        string [32];

						format (string, sizeof (string), "Cheat de CP-TP/SH (C, T: %d)", seconds);
						BanPlayer(playerid, "el servidor", string, 2);
						return 1;
					}
					else if (seconds < 180)
					{
						KickPlayer (playerid, "el servidor", "De-sincronizado (C)", 1);
						return 1;
					}
					
					new
						RVal = Rand(200,280);

					GivePlayerMoney(playerid,RVal);
					Mensaje (playerid, -1, "");
					MensajeF(playerid, -1, "Ganas "#CVERDE"$%d "#CBLANCO"por terminar de cosechar soja correctamente.", RVal);
					DeletePVar(playerid,"ParteCosecha");
					DeletePVar(playerid,"EstaCultivando");
					InfoJugador[playerid][jCosechas] ++;
					if(InfoJugador[playerid][jCosechas] >= 50 && InfoJugador[playerid][jNivelTrabajo] < 2)
					{
						Mensaje(playerid, -1,"Felicitaciones, subiste a nivel "#CVERDE"2 "#CBLANCO"en tu trabajo: "#CAZUL2"Cosechador");
						Mensaje(playerid, -1,"Ahora, podrás cosechar "#CVIOLETA"trigo "#CBLANCO"y recibirás más dinero.");
						InfoJugador[playerid][jNivelTrabajo] = 2;
					}
					DestroyPlayerSpecialBar (playerid);
					DisablePlayerRaceCheckpoint(playerid);
					RemovePlayerFromVehicle(playerid);
					veh_respawn(VehID);
		        	DeletePVar(playerid, "COSECHANDO_ID");
					TrabajosPorHora[playerid][ID_Cosechador] ++;
		        	return 1;
				}
				if(i < Par)
				{
					SetPlayerRaceCheckpoint(playerid,0,PosCosechador[i][0],PosCosechador[i][1],PosCosechador[i][2],PosCosechador[i+1][0],PosCosechador[i+1][1],PosCosechador[i+1][2],7);
			        SetPVarInt(playerid,"ParteCosecha",i+1);
			        SetPlayerSpecialBarValue (playerid, i+1);
				}
				return 1;
			}
			else if(GetPVarInt(playerid,"COSECHANDO_ID") == 1)
			{
				#define PosCosechador PosCosechadorLVL2
		        new i = GetPVarInt(playerid,"ParteCosecha");
			    new Par = (sizeof PosCosechador)-1;
				if(i == Par)
				{
		        	SetPlayerRaceCheckpoint(playerid,1,PosCosechador[Par][0],PosCosechador[Par][1],PosCosechador[Par][2], PosCosechador[Par][0],PosCosechador[Par][1],PosCosechador[Par][2],7);
	       		 	SetPVarInt(playerid,"ParteCosecha",1000);
					return 1;
				}
				if(i == 1000)
				{
					new
						seconds = gettime() - GetPVarInt (playerid, "StartC");

					DeletePVar (playerid, "StartC");

					if (seconds < 200)
					{
					    new
					        string [32];

						format (string, sizeof (string), "Cheat de CP-TP/SH (C, T: %d)", seconds);
						BanPlayer(playerid, "el servidor", string, 2);
						return 1;
					}
					else if (seconds < 230)
					{
						KickPlayer (playerid, "el servidor", "De-sincronizado (C)", 1);
						return 1;
					}

					new
						RVal = Rand(450,550);

					GivePlayerMoney(playerid,RVal);
					Mensaje (playerid, -1, "");
					MensajeF(playerid, -1, "Ganas "#CVERDE"$%d "#CBLANCO"por terminar de cosechar trigo correctamente.", RVal);
					DeletePVar(playerid,"ParteCosecha");
					DeletePVar(playerid,"EstaCultivando");
					InfoJugador[playerid][jCosechas] ++;
					DestroyPlayerSpecialBar (playerid);
					DisablePlayerRaceCheckpoint(playerid);
					RemovePlayerFromVehicle(playerid);
					veh_respawn(VehID);
		        	DeletePVar(playerid, "COSECHANDO_ID");
		        	return 1;
				}
				if(i < Par)
				{
					SetPlayerRaceCheckpoint(playerid,0,PosCosechador[i][0],PosCosechador[i][1],PosCosechador[i][2],PosCosechador[i+1][0],PosCosechador[i+1][1],PosCosechador[i+1][2],7);
			        SetPVarInt(playerid,"ParteCosecha",i+1);
			        SetPlayerSpecialBarValue (playerid, i+1);
				}
		        #undef PosCosechador
				return 1;
			}
		}
	}
	return 1;
}

CALLBACK: VolverCamion(playerid)
{
	Descongelar(playerid);
	SetPVarInt(playerid,"PasoEntrega",2);
	CheckpointEntrega(playerid);
	InfoCamion[GetPlayerVehicleID(playerid)][camCarga] = 0;
	return 1;
}

stock DarPlataGobierno(plata)
{
	InfoFaccion[IDGOBIERNO][fDinero] += plata;
	ActualizarFacciones();
	return 1;
}

stock GetClothesPosition(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid,2,181.5338,-86.7284,1002.0234)) //Zip
		return 1;

	if(IsPlayerInRangeOfPoint(playerid,2,208.8329,-3.5260,1001.2178)) //Victim
		return 2;

	if(IsPlayerInRangeOfPoint(playerid,2,214.6280,-40.2542,1002.0234)) //SubUrban
		return 3;

	if(IsPlayerInRangeOfPoint(playerid,2,202.0402,-131.0054,1003.5078)) //ProLaps
		return 4;

	if(IsPlayerInRangeOfPoint(playerid,2,215.9159,-154.7793,1000.5234)) //Didier
		return 5;

	if(IsPlayerInRangeOfPoint(playerid,2,217.5361,-97.7467,1005.2578)) //Binco
		return 6;

	return 0;
}


public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	if(!InfoJugador[playerid][jAdmin]) return 0;
	Para_Admin_Servicio
	SetPVarInt(playerid,"ClickedID",clickedplayerid);
	SetPVarInt(playerid,"ADM_Click",0);

 	new
		ADM_HEAD[MAX_PLAYER_NAME+30];

	A_Format(ADM_HEAD, ""#CBLANCO"ADMINISTRACIÓN >> "#CHAMBRE"%s", pName(clickedplayerid));

	switch(InfoJugador[playerid][jAdmin])
	{
	    case Colaborador:
			Dialog(playerid,dAdmClick,DIALOG_STYLE_LIST,ADM_HEAD,"- Ir a el\n- Congelar/descongelar\n- Bofetear","Aceptar","Cancelar");

	    case Moderador:
			Dialog(playerid,dAdmClick,DIALOG_STYLE_LIST,ADM_HEAD,"- Ir a el\n- Congelar/descongelar\n- Bofetear\n- Mutear/Desmutear\n- Skin\n- Interior\n- Virtual world\n- Traer\n- Vida\n- Encarcelar","Aceptar","Cancelar");

	    case Mod.Superior:
			Dialog(playerid,dAdmClick,DIALOG_STYLE_LIST,ADM_HEAD,"- Ir a el\n- Congelar/descongelar\n- Bofetear\n- Mutear/Desmutear\n- Skin\n- Interior\n- Virtual world\n- Traer\n- Vida\n- Encarcelar\n- Kick\n- Ban","Aceptar","Cancelar");

	    case Administrador, AdministradorSup:
			Dialog(playerid,dAdmClick,DIALOG_STYLE_LIST,ADM_HEAD,"- Ir a el\n- Congelar/descongelar\n- Bofetear\n- Mutear/Desmutear\n- Skin\n- Interior\n- Virtual world\n- Traer\n- Vida\n- Encarcelar\n- Kick\n- Ban\n- Familia\n- Facción","Aceptar","Cancelar");

	    case SubDueno,Dueno:
			Dialog(playerid,dAdmClick,DIALOG_STYLE_LIST,ADM_HEAD,"- Ir a el\n- Congelar/descongelar\n- Bofetear\n- Mutear/Desmutear\n- Skin\n- Interior\n- Virtual world\n- Traer\n- Vida\n- Encarcelar\n- Kick\n- Ban\n- Familia\n- Facción\n- Dinero","Aceptar","Cancelar");

		default: return 0;
	}

	return 1;
}

public OnPlayerRequestSpawn(playerid) return 0;

public OnPlayerSelectObject(playerid, type, objectid, modelid, Float:fX, Float:fY, Float:fZ)
{
	if(type == SELECT_OBJECT_PLAYER_OBJECT)
	{
		if(GetPVarInt(playerid,"EditandoMuebles"))
		{
			Loop(m, MAX_MUEBLES_CASA, 0)
			{
			    if(objectid == OBJ_Mueble[playerid][m])
			    {
			        SetPVarInt(playerid,"ID_MUEBLE",m);
					EditPlayerObject(playerid, OBJ_Mueble[playerid][m]);
					return 1;
				}
			}
			return Error(playerid,"¡Ese objeto no te pertenece!");
		}
	}
	return 1;
}
stock AjustarMueble_P(h, index, Float:x, Float:y, Float:z, playerid = INVALID_PLAYER_ID)
{
	new
		bool: playerused = (0 <= playerid < MAX_PLAYERS);

	if(playerused)
	    Iter_Remove(Player, playerid);

	foreach(Player, i)
	{
	    if(CasaActual[i] == h)
	    {
		    SetPlayerObjectPos(i, OBJ_Mueble[i][index], x, y, z);
		}
	}

	if(playerused)
	    Iter_Add(Player, playerid);

	return 1;
}

stock AjustarMueble_R(h, index, Float:x, Float:y, Float:z, playerid = INVALID_PLAYER_ID)
{
	new
		bool: playerused = (0 <= playerid < MAX_PLAYERS);

	if(playerused)
	    Iter_Remove(Player, playerid);

	foreach(Player, i)
	{
	    if(CasaActual[i] == h)
	    {
		    SetPlayerObjectRot(i, OBJ_Mueble[i][index], x, y, z);
		}
	}

	if(playerused)
	    Iter_Add(Player, playerid);

	return 1;
}

stock DestruirMuebleCasa(h, index)
{
	foreach(Player, i)
	{
	    if(CasaActual[i] == h)
	    {
		    DestroyPlayerObject(i, OBJ_Mueble[i][index]);
		}
	}
	return 1;
}

public OnPlayerSelectDynamicObject(playerid, objectid, modelid, Float:x, Float:y, Float:z)
{
    if(EsDueno(playerid))
    {
        MensajeF(playerid, -1, "ID: %d", objectid);
        EditDynamicObject(playerid, objectid);
	}
    return 1;
}

stock ObjetoTiradoMasCercano(playerid, Float:radi = 1.5)
{
	new
	    Float: old_dist = radi,
		item_winner = -1,
		player_vw = GetPlayerVirtualWorld(playerid);

	foreach(ObjetosTirados, i)
	{
	    if(ObjetoTirado[i][obj_t_vw] == player_vw)
	    {
		    new
		        Float: new_dist = GetPlayerDistanceFromPoint(playerid, ObjetoTirado[i][obj_t_x], ObjetoTirado[i][obj_t_y], ObjetoTirado[i][obj_t_z]);

			if(new_dist < old_dist)
			{
			    item_winner = i;
			    old_dist = new_dist;
			}
		}
	}
	return item_winner;
}

stock CrearObjetoTirado(objectid, extradata, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, virtualworld, passid = -1)
{
	new
	    slot;

	if(passid == -1)
		slot = Iter_Free(ObjetosTirados);

	else
	    slot = passid;

	if(slot == -1)
	    return -2;

	ObjetoTirado[slot][obj_t_Type] = objectid;
	ObjetoTirado[slot][obj_t_Data] = extradata;
	ObjetoTirado[slot][obj_t_x] = x;
	ObjetoTirado[slot][obj_t_y] = y;
	ObjetoTirado[slot][obj_t_z] = z;
	ObjetoTirado[slot][obj_t_rx] = rx;
	ObjetoTirado[slot][obj_t_ry] = ry;
	ObjetoTirado[slot][obj_t_rz] = rz;
	ObjetoTirado[slot][obj_t_vw] = virtualworld;
	ObjetoTirado[slot][obj_t_ObjectID] = CreateDynamicObject(ObjectData[objectid][invObjID], x, y, z, rx, ry, rz, virtualworld);

	if(ObjectData[objectid][invType] == INV_CAJACARGADOR)
	{
		ObjetoTirado[slot][obj_t_LabelID] = CreateDynamic3DTextLabel("Cargando...", C_BLANCO, x, y, z, 1.3, .testlos = 0, .worldid = virtualworld);
	}
	else if(ObjectData[objectid][invType] == INV_CAJAARMA || ObjectData[objectid][invType] == INV_CAJACHALECO || ObjectData[objectid][invType] == INV_CAJAESPOSA)
	{
		ObjetoTirado[slot][obj_t_LabelID] = CreateDynamic3DTextLabel("Cargando...", C_BLANCO, x, y, z, 2.5, .testlos = 0, .worldid = virtualworld);
	}
	else if(ObjectData[objectid][invType] == INV_PAQUETECOCA || ObjectData[objectid][invType] == INV_PAQUETEMARI)
	{
		ObjetoTirado[slot][obj_t_LabelID] = CreateDynamic3DTextLabel("Cargando...", C_BLANCO, x, y, z + 0.1, 2.5, .testlos = 0, .worldid = virtualworld);
	}
	else
	{
		ObjetoTirado[slot][obj_t_LabelID] = CreateDynamic3DTextLabel("Cargando...", C_BLANCO, x, y, z + 0.2, 3.0, .testlos = 0, .worldid = virtualworld);
	}

	ActualizarLabelObjetoTirado(slot);
	Iter_Add(ObjetosTirados, slot);
	if(ObjectData[objectid][invColor1])
	{
	    SetDynamicObjectMaterial(ObjetoTirado[slot][obj_t_ObjectID], 0, -1, "none", "none", ObjectData[objectid][invColor1]);
	}
	if(ObjectData[objectid][invColor2])
	{
	    SetDynamicObjectMaterial(ObjetoTirado[slot][obj_t_ObjectID], 1, -1, "none", "none", ObjectData[objectid][invColor2]);
	}
	ObjetoTirado[slot][obj_t_time] = gettime();
    GuardarObjetoTirado(slot);
	return slot;
}

stock ActualizarLabelObjetoTirado(slot)
{
	new
	    objectid = ObjetoTirado[slot][obj_t_Type];

	if(objectid)
	{
		new
		    string[60],
			extradata = ObjetoTirado[slot][obj_t_Data];

		if(ObjectData[objectid][invType] == INV_CAJACARGADOR)
		{
			A_Format(string, "%s "#CAMARILLO"(%d unidades)", ObjectData[objectid][invName], extradata);
		}
		else if(ObjectData[objectid][invType] == INV_CAJAARMA || ObjectData[objectid][invType] == INV_CAJACHALECO || ObjectData[objectid][invType] == INV_CAJAESPOSA)
		{
			A_Format(string, "%s "#CAMARILLO"(%d unidades)", ObjectData[objectid][invName], extradata);
		}
		else if(ObjectData[objectid][invType] == INV_PAQUETECOCA || ObjectData[objectid][invType] == INV_PAQUETEMARI)
		{
			A_Format(string, "%s "#CAMARILLO"(%d gramos)", ObjectData[objectid][invName], extradata);
		}
		else
		{
			format(string, 30, ObjectData[objectid][invName]);
		}
		UpdateDynamic3DTextLabelText(ObjetoTirado[slot][obj_t_LabelID], C_BLANCO, string);
	}
	return 1;
}

stock GuardarObjetoTirado(slot)
{
	new
	    path[100];

	format(path, 30, "ObjetosTirados/%d.dat", slot);

	new
	    File: handle = fopen(path, io_write);

	A_Format(path, "%d|%d|%f|%f|%f|%f|%f|%f|%d",
		ObjetoTirado[slot][obj_t_Type],
		ObjetoTirado[slot][obj_t_Data],
		ObjetoTirado[slot][obj_t_x],
		ObjetoTirado[slot][obj_t_y],
		ObjetoTirado[slot][obj_t_z],
		ObjetoTirado[slot][obj_t_rx],
		ObjetoTirado[slot][obj_t_ry],
		ObjetoTirado[slot][obj_t_rz],
		ObjetoTirado[slot][obj_t_vw]);

	fwrite(handle, path);
	fclose(handle);
	return 1;
}

stock BorrarObjetoTirado(slot)
{
	if(0 <= slot < MAX_OBJETOS_T)
	{
		if(ObjetoTirado[slot][obj_t_time] == 0)
		    return 0;

		DestroyDynamicObject(ObjetoTirado[slot][obj_t_ObjectID]);
		ObjetoTirado[slot][obj_t_ObjectID] = 0;

		DestroyDynamic3DTextLabel(ObjetoTirado[slot][obj_t_LabelID]);
		ObjetoTirado[slot][obj_t_LabelID] = Text3D:0;

		ObjetoTirado[slot][obj_t_Type] = 0;
		ObjetoTirado[slot][obj_t_Data] = 0;
		ObjetoTirado[slot][obj_t_x] = 0.0;
		ObjetoTirado[slot][obj_t_y] = 0.0;
		ObjetoTirado[slot][obj_t_z] = 0.0;
		ObjetoTirado[slot][obj_t_rx] = 0.0;
		ObjetoTirado[slot][obj_t_ry] = 0.0;
		ObjetoTirado[slot][obj_t_rz] = 0.0;
		ObjetoTirado[slot][obj_t_vw] = 0;
		ObjetoTirado[slot][obj_t_time] = 0;

		Iter_Remove(ObjetosTirados, slot);

		new
		    path[30];

		format(path, 30, "ObjetosTirados/%d.dat", slot);
		fremove(path);
		return 1;
	}
	return 0;
}

public OnPlayerSpawn(playerid)
{
	if(IsPlayerNPC(playerid))
	{
		new
			name[24];
		GetPlayerName(playerid, name, 24);

		if(!strcmp(name, "Claudia", true))
		{
		    if (NPC_LABEL_CLAUDIA == Text3D: INVALID_3DTEXT_ID)
		    {
				NPC_LABEL_CLAUDIA = Create3DTextLabel("Claudia", C_BLANCO, 0, 0, 0, 7.0, INT_LSPD + INT_CUSTOM_VW, 1);
			}

			Attach3DTextLabelToPlayer(NPC_LABEL_CLAUDIA, playerid, 0, 0, 0.2);
			SetPlayerSkin(playerid, 150);
			SetPlayerAttachedObject(playerid, 0, 2356, 7, -0.0600, -0.6340, 0.0459, -88.8999, -7.2999, -104.5000, 1.0000, 1.0000, 1.0000);
			SetPlayerVirtualWorld (playerid, INT_LSPD + INT_CUSTOM_VW);
		}
		else if(!strcmp(name, "Truth", true))
		{
		    if (NPC_LABEL_TRUTH == Text3D: INVALID_3DTEXT_ID)
		    {
				NPC_LABEL_TRUTH = Create3DTextLabel("Truth", C_BLANCO, 0, 0, 0, 6.0, 0, 1);
			}

			Attach3DTextLabelToPlayer(NPC_LABEL_TRUTH, playerid, 0, 0, 0.2);
		    SetPlayerSkin(playerid, 1);
	    	SetPlayerPos(playerid, -1112.2495,-1638.4321,76.3672);
			SetPlayerFacingAngle(playerid, 270.0);
		}
		return 1;
	}

	NATIVE_ResetPlayerMoney(playerid);
	NATIVE_GivePlayerMoney(playerid, GetPlayerMoney(playerid));
	
	SetPlayerTeam(playerid, 5);
	
	if(InfoJugador[playerid][jRegistrado] == false)
	{
		Registrar(playerid);
		SendClientMessage(playerid,-1,"Configure su personaje, presione "#CVERDE"click "#CBLANCO"en las flechas para cambiar.");
		return 1;
	}
	if(!LoginTime[playerid] && InfoJugador[playerid][jRegistrado])
	{
		Error(playerid,"~p~SPAWN FORZADO DESHABILITADO, ~w~KICKEANDO...");
		DelayKick(playerid);
		return 1;
	}

	if(!GetPVarInt(playerid, "BUILDS.REMOVED"))
	{
		SetPlayerHealth(playerid,InfoJugador[playerid][jVida]);
		SetPlayerArmour(playerid,InfoJugador[playerid][jChaleco]);

	    RemoveBuilds(playerid);
	    SetPVarInt(playerid, "BUILDS.REMOVED", true);
	}
	else
	{
		CargarAccesorios(playerid);
	}

	_OnPlayerSpawn(playerid);
	return 1;
}

stock CargarAccesorios(playerid, time = 3000)
{
 	SetTimerEx("CargarAttachedO",time,false,"i",playerid);
	return 1;
}

CALLBACK: Truth_BuscarSemilla(part)
{
	if(NPC_TRUTH == INVALID_PLAYER_ID)
	    return 1;

	if(part == 0) //Inicio
	{
		CongelarEx(Truth_ClientID);

		//Cámara
		SetPlayerCameraPos(Truth_ClientID, -1108.8225, -1638.4565, 77.2881);
		SetPlayerCameraLookAt(Truth_ClientID, -1109.8201, -1638.4789, 77.0481);

		new
			time = NPCTalk(NPC_TRUTH, "Ta, hermano. Ahi te busco la semilla..");

		ApplyAnimation(NPC_TRUTH, "PED", "IDLE_CHAT", 4.0, 0, 0, 0, 0, time);

		SetTimerEx("Truth_BuscarSemilla", (time), 0, "i", 1);
	}
	else if(part == 1) //Buscar
	{
		ApplyAnimation(NPC_TRUTH, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
		SetTimerEx("Truth_BuscarSemilla", (3000), 0, "i", 2);
	}
	else if(part == 2) //Dar
	{
	    if(GetObject(Truth_ClientID) != -1)
	    {
   			Descongelar(Truth_ClientID);
			SetCameraBehindPlayer(Truth_ClientID);
	        return Error(Truth_ClientID, "~r~Debes desocuparte las manos.");
		}

		new
			time = NPCTalk(NPC_TRUTH, "Ahi tiene, hermano. ¡Cuide bien mi pimpollito!..");

		ApplyAnimation(NPC_TRUTH, "PED", "IDLE_CHAT", 4.0, 0, 0, 0, 0, time);

		Descongelar(Truth_ClientID);
		SetCameraBehindPlayer(Truth_ClientID);

		Truth_DaSemillas(Truth_ClientID);
	}
	else if(part == 3) //Explicar
	{
	    if(!IsPlayerConnected(Truth_ClientID))
	    {
	        Truth_ClientID = INVALID_PLAYER_ID;
	        return 1;
		}

		CongelarEx(Truth_ClientID);

		//Cámara
		SetPlayerCameraPos(Truth_ClientID, -1108.8225, -1638.4565, 77.2881);
		SetPlayerCameraLookAt(Truth_ClientID, -1109.8201, -1638.4789, 77.0481);

		new
			time = NPCTalk(NPC_TRUTH, "Muy bien. Si quieres una semilla primero deberás cosecharme mi cultivo.");

		ApplyAnimation(NPC_TRUTH, "PED", "IDLE_CHAT", 4.0, 0, 0, 0, 0, time);
		SetTimerEx("Truth_BuscarSemilla", time, 0, "i", 4);
	}
	else if(part == 4) //Explicar
	{
	    if(!IsPlayerConnected(Truth_ClientID))
	    {
	        Truth_ClientID = INVALID_PLAYER_ID;
	        return 1;
		}

		new
			time = NPCTalk(NPC_TRUTH, "En el garage que está a mi izquierda hay una cosechadora.");

		ApplyAnimation(NPC_TRUTH, "PED", "IDLE_CHAT", 4.0, 0, 0, 0, 0, time);
		SetTimerEx("Truth_BuscarSemilla", time, 0, "i", 5);
	}
	else if(part == 5) //Explicar
	{
	    if(!IsPlayerConnected(Truth_ClientID))
	    {
	        Truth_ClientID = INVALID_PLAYER_ID;
	        return 1;
		}
		new
			time = NPCTalk(NPC_TRUTH, "Súbe y cosecha. Luego tráeme la cosechadora y dame $8.000 para obtener tu semilla.");

		ApplyAnimation(NPC_TRUTH, "PED", "IDLE_CHAT", 4.0, 0, 0, 0, 0, time);
		SetTimerEx("Truth_BuscarSemilla", time, 0, "i", 6);
	}
	else if(part == 6) //Explicar
	{
	    if(!IsPlayerConnected(Truth_ClientID))
	    {
	        Truth_ClientID = INVALID_PLAYER_ID;
	        return 1;
		}

		Descongelar(Truth_ClientID);
		SetCameraBehindPlayer(Truth_ClientID);

		Error(Truth_ClientID, "Sube a la ~b~cosechadora ~w~del garage.");
		veh_respawn(Truth_VehID);
		PasoTruth[Truth_ClientID] = 2;
		Bit_Set(Llave_veh[Truth_ClientID], Truth_VehID, true);
	}
	else if(part == 7) //Dinero insuficiente
	{
	    if(!IsPlayerConnected(Truth_ClientID))
	    {
	        Truth_ClientID = INVALID_PLAYER_ID;
	        return 1;
		}

		CongelarEx(Truth_ClientID);

		//Cámara
		SetPlayerCameraPos(Truth_ClientID, -1108.8225, -1638.4565, 77.2881);
		SetPlayerCameraLookAt(Truth_ClientID, -1109.8201, -1638.4789, 77.0481);

		new
			time = NPCTalk(NPC_TRUTH, "¡Mis jodidos $8.000 por la semilla!");

		ApplyAnimation(NPC_TRUTH, "PED", "IDLE_CHAT", 4.0, 0, 0, 0, 0, time);
		SetTimerEx("Truth_BuscarSemilla", time, 0, "i", 8);
	}
	else if(part == 8)
	{
	    if(!IsPlayerConnected(Truth_ClientID))
	    {
	        Truth_ClientID = INVALID_PLAYER_ID;
	        return 1;
		}

		Descongelar(Truth_ClientID);
		SetCameraBehindPlayer(Truth_ClientID);

		Error(Truth_ClientID, "Necesitas ~g~$8.000 ~w~para comprarle a ~b~Truth ~w~la semilla.");
	}
	return 1;
}

stock Truth_DaSemillas(playerid)
{
	Truth_ClientID = INVALID_PLAYER_ID;
	QuitarDinero(playerid, 8000);
	GiveObject(playerid, GOAT(INV_SEMILLAMARI));
	Mensaje(playerid, -1, "Para usar la semilla, usa "#CINFO"/plantar marihuana.");
	return 1;
}

CALLBACK: AvisarMedicos(playerid)
{
	Mensaje(playerid, -1, "");
	Mensaje(playerid, -1, "Estás en grave estado de salud. Si no recibes ayuda en 5 minutos, morirás desangrado. Usa un celular para llamar al hospital");
	Mensaje(playerid, -1, "Puedes ir directamente al hospital usando "#CINFO"/suicidio"#CBLANCO", pero los gastos médicos son de "#CVERDE"$6000"#CBLANCO".");
	return 1;
}

stock GetFreeFrequence()
{
	new
	    str_freq[30],
		i;

	A_Format(str_freq, "Frecuencias/%s.dat", GenerateFrequence());

	while(fexist(str_freq))
	{
	    if(i++ > 1000)
	        return -1;

		A_Format(str_freq, "Frecuencias/%s.dat", GenerateFrequence());
	}

	new
	    str_val[5];

	strmid(str_val, str_freq, 12, 16);
	return strval(str_val);
}

stock GenerateFrequence()
{
	new
	    str_rand[5];

	A_Format(str_rand, "%d%d%d%d", random(9)+1, random(10), random(10), random(10));
	return str_rand;
}

stock CreateFrequence(owner[], frequence, password)
{
	new
	    path[65];

	format(path, 25, "Frecuencias/%d.dat", frequence);

	new
	    File: handle = fopen(path, io_write);

	A_Format(path, "%s|%d|%d", owner, password, (gettime() + TIME_OWNFREQUENCE));
	fwrite(handle, path);
	fclose(handle);

	format(path, 15, "%d_OWN", frequence);
	SetGVarString(path, owner);

	format(path, 15, "%d_TIME", frequence);
	SetGVarInt(path, (gettime() + TIME_OWNFREQUENCE));

	format(path, 15, "%d_PW", frequence);
	SetGVarInt(path, password);
	return 1;
}

stock RemoveFrequence(frequence)
{
	new
	    path[60];

	format(path, 25, "Frecuencias/%d.dat", frequence);

	fremove(path);

	format(path, 10, "%d_OWN", frequence);
	DeleteGVar(path);

	format(path, 10, "%d_TIME", frequence);
	DeleteGVar(path);

	format(path, 10, "%d_PASS", frequence);
	DeleteGVar(path);
	return 1;
}

CALLBACK: RespawnVehicle(i)
{
	return veh_respawn(i);
}

_OnPlayerSpawn(playerid)
{
	SetTimerEx("RealSpawn",500,false,"i",playerid);

	if(GetPVarInt(playerid,"Spawn_Spec"))
	{
		SetPlayerPos(playerid, GetPVarFloat(playerid, "SPEC_x"), GetPVarFloat(playerid, "SPEC_y"), GetPVarFloat(playerid, "SPEC_z"));
		SetPlayerInterior(playerid, GetPVarInt(playerid, "SPEC_int"));
		SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "SPEC_vw"));
		SetPlayerSkin(playerid, GetPVarInt(playerid, "SPEC_skin"));
		SetPlayerHealth(playerid, GetPVarFloat(playerid, "SPEC_h"));
		SetPlayerArmour(playerid, GetPVarFloat(playerid, "SPEC_a"));

		DeletePVar(playerid, "SPEC_x");
		DeletePVar(playerid, "SPEC_y");
		DeletePVar(playerid, "SPEC_z");
		DeletePVar(playerid, "SPEC_h");
		DeletePVar(playerid, "SPEC_a");
		DeletePVar(playerid, "SPEC_int");
		DeletePVar(playerid, "SPEC_vw");
		DeletePVar(playerid, "SPEC_skin");
		DeletePVar(playerid, "Spawn_Spec");
	 	return 1;
	}

	if(InfoJugador[playerid][jRegistrado] == true)
	{
		if(InfoJugador[playerid][jEncarcelado]) // Jail
		{
			if(InfoJugador[playerid][jMuerto] == true)
			{
				SetPlayerHealth(playerid,99.0);
				SetPlayerInterior(playerid, GetPVarInt(playerid, "ULTIMO_INT") );
				SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "ULTIMO_VW") );
				DeletePVar(playerid, "ULTIMO_INT");
				DeletePVar(playerid, "ULTIMO_VW");
				Descongelar(playerid);
				SetTimerEx("ApplyDeathAnim", 100, false, "i", playerid);
			}
			else
			{
				TogglePlayerCrack (playerid, false);
				SetPlayerHealth (playerid, 40.0);
				SpawnOnJail (playerid, InfoJugador [playerid][jEncarcelado]);
			}
		}
		else
		{
			if(GetPVarInt(playerid, "Spawneo") == 1)
			{
			    if(HospitalData[playerid] != -1)
			    {
					RecuperarSalud (playerid);
			        return 1;
				}

				if(InfoJugador[playerid][jMuerto] == true)
				{
				    AvisarMedicos(playerid);
					SetPlayerHealth(playerid,99.0);
					SetPlayerInterior(playerid, GetPVarInt(playerid, "ULTIMO_INT") );
					SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "ULTIMO_VW") );
					DeletePVar(playerid, "ULTIMO_INT");
					DeletePVar(playerid, "ULTIMO_VW");
					Descongelar(playerid);
					SetTimerEx("ApplyDeathAnim", 100, false, "i", playerid);
				    return true;
				}
			}
			else
			{
  				GameTextForPlayer(playerid, ""#TEXT_WELCOME_LOADING"...", 4000,3);
			}
		}
	}
	return 1;
}

stock SpawnOnJail (playerid, type)
{
	LimpiarPantalla (playerid, 9);

	if (InfoJugador [playerid][jTiempoCarcel] > 60)
		MensajeF (playerid, -1, "Usted está condenado por "#CROJO"%d "#CBLANCO"minutos más.", InfoJugador [playerid][jTiempoCarcel] / 60);

	else
		MensajeF (playerid, -1, "Usted está condenado por sólo "#CROJO"%d "#CBLANCO"segundos más.", InfoJugador [playerid][jTiempoCarcel]);

	if (type == 1)// POLICE JAIL
	{
		SetPlayerCustomInterior (playerid, INT_CarcelCeldas, 1678.6013, -1595.6302, 1045.5117);
		SetPlayerPos(playerid, 1678.6013, -1595.6302, 1045.5117);
		SetPlayerInterior(playerid, 2);
	}
	else if (type == 2) // ADM JAIL
	{
		SetPlayerPos (playerid,424.1288, -2481.9368, -27.9431);
		SetPlayerVirtualWorld(playerid, 5000+playerid);
		SetPlayerInterior(playerid, 0);
		CongelarEx(playerid, 4);

		if(TextoCarcel[playerid] == PlayerText3D:INVALID_3DTEXT_ID)
		{
			new
				Txt[sizeof(TextoDeCarcel)];

			strcat(Txt, TextoDeCarcel);
			TextoCarcel[playerid] = CreatePlayer3DTextLabel(playerid, Txt, C_ROJO, 424.1288, -2481.9368, -27.9431, 4.0);
		}
	}

	KillTimer2 (playerid, TIMER_CARCEL);
	Timer_Jugador[playerid][TIMER_CARCEL] = SetTimerEx ("ActualizarTiempoCarcel", 1000, true, "i", playerid);
	return 1;
}

CALLBACK: ApplyDeathAnim (playerid)
{
	ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0);
	return 1;
}

PreloadAnimLib(playerid, animlib[])
{
	ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0);
}

stock LimpiarPantalla(playerid, lines)
{
	if (lines > 0)
	{
	    while (lines --)
	    {
	        Mensaje (playerid, -1, "");
		}
	}
}

stock CamaraAleatoria(playerid)
{
	TogglePlayerSpectating(playerid, true);
 	switch(random(6))
  	{
   		case 0://Aero
     	{
			SetPlayerCameraPos(playerid, 875.1099, -2478.0266, 170.8461);
			SetPlayerCameraLookAt(playerid, 875.8554, -2477.3535, 170.3460);
			InterpolateCameraPos_(playerid, 1725.4456, -2746.1519, 143.1738, 30000);
			InterpolateCameraLookAt_(playerid, 1725.3727, -2745.1514, 143.0738, 30000);
		}
   		case 1://edis
     	{
			SetPlayerCameraPos(playerid, 2073.4031, -916.5372, 237.1098);
			SetPlayerCameraLookAt(playerid, 2072.8638, -917.3810, 236.5997);
			InterpolateCameraPos_(playerid, 1280.6525, -994.5565, 245.8085, 50000);
			InterpolateCameraLookAt_(playerid, 1281.1652, -995.4166, 245.3084, 50000);
		}
   		case 2://agua
     	{
			SetPlayerCameraPos(playerid, 113.9611, -932.0323, -8.2316);
			SetPlayerCameraLookAt(playerid, 112.9763, -931.8423, -8.4315);
			InterpolateCameraPos_(playerid, -86.6504, -903.5834, -17.3837, 20000);
			InterpolateCameraLookAt_(playerid, -87.3837, -902.8994, -17.4686, 20000);
		}
   		case 3://vinewood
	    {
			SetPlayerCameraPos(playerid, 1452.3827, -966.6744, 193.0309);
			SetPlayerCameraLookAt(playerid, 1452.3545, -965.6725, 192.5706);
			InterpolateCameraPos_(playerid, 815.5703, -1200.6211, 191.8350, 40000);
			InterpolateCameraLookAt_(playerid, 814.7813, -1200.0038, 191.2699, 40000);
		}
   		case 4://agua 2
	    {
			SetPlayerCameraPos(playerid, 730.5671, -1502.1527, -2.7737);
			SetPlayerCameraLookAt(playerid, 730.5535, -1503.1549, -2.8539);
			InterpolateCameraPos_(playerid, 726.7334, -1936.3263, -2.0168, 30000);
			InterpolateCameraLookAt_(playerid, 726.8254, -1937.3247, -2.0670, 30000);
		}
   		case 5://aero 2
	    {
			SetPlayerCameraPos(playerid, 1271.4712, -2505.0864, 183.1024);
			SetPlayerCameraLookAt(playerid, 1272.1658, -2504.3613, 182.4422);
			InterpolateCameraPos_(playerid, 1294.3502, -2054.3755, 178.2112, 30000);
			InterpolateCameraLookAt_(playerid, 1295.0128, -2055.1294, 177.5410, 30000);
		}
	}
	return 1;
}

stock CreateDynamicObject_e(ID,Float:x,Float:y,Float:z,Float:rx,Float:ry,Float:rz,x2 = -1,x3 = -1,x4 = -1,Stream = 200)
{
	return CreateDynamicObject(SAMP_MTAID(ID),x,y,z,rx,ry,rz,x2,x3,x4,Stream);
}

stock SAMP_MTAID(id)
{
	new objid = id;
	switch(objid)
	{
	    case 	18466: objid = 19347;
		case	18467: objid = 19353;
		case	18468: objid = 19354;
		case	18469: objid = 19355;
		case	9569: objid = 19356;
		case	9570: objid = 19357;
		case	9571: objid = 19358;
		case	9572: objid = 19359;
		case	9573: objid = 19360;
		case	9574: objid = 19361;
		case	9575: objid = 19362;
		case	9576: objid = 19363;
		case	9577: objid = 19364;
		case	9578: objid = 19365;
		case	9579: objid = 19366;
		case	9580: objid = 19367;
		case	9581: objid = 19368;
		case	9582: objid = 19369;
		case	9583: objid = 19370;
		case	9584: objid = 19371;
		case	9585: objid = 19372;
		case	9586: objid = 19373;
		case	9587: objid = 19374;
		case	9588: objid = 19375;
		case	9589: objid = 19376;
		case	9590: objid = 19377;
		case	9591: objid = 19378;
		case	9592: objid = 19379;
		case	9593: objid = 19380;
		case	9594: objid = 19381;
		case	9595: objid = 19382;
		case	9596: objid = 19383;
		case	9597: objid = 19384;
		case	9598: objid = 19385;
		case	9599: objid = 19386;
		case	9600: objid = 19387;
		case	9601: objid = 19388;
		case	9602: objid = 19389;
		case	9603: objid = 19390;
		case	9604: objid = 19391;
		case	9605: objid = 19392;
		case	9606: objid = 19393;
		case	9607: objid = 19394;
		case	9608: objid = 19395;
		case	9609: objid = 19396;
		case	9610: objid = 19397;
		case	9611: objid = 19398;
		case	9612: objid = 19399;
		case	9613: objid = 19400;
		case	9614: objid = 19401;
		case	9615: objid = 19402;
		case	9616: objid = 19403;
		case	9617: objid = 19404;
		case	9618: objid = 19405;
		case	9619: objid = 19406;
		case	9700: objid = 19407;
		case	9621: objid = 19408;
		case	9622: objid = 19409;
		case	9623: objid = 19410;
		case	9624: objid = 19411;
		case	9625: objid = 19412;
		case	9626: objid = 19413;
		case	9627: objid = 19414;
		case	9628: objid = 19415;
		case	9629: objid = 19416;
		case	9630: objid = 19417;
		case	18630: objid = 19426;
		case	18629: objid = 19427;
		case	18628: objid = 19428;
		case	18627: objid = 19429;
		case	18626: objid = 19430;
		case	18625: objid = 19431;
		case	18624: objid = 19432;
		case	18623: objid = 19433;
		case	18622: objid = 19434;
		case	18621: objid = 19435;
		case	18620: objid = 19436;
		case	18619: objid = 19437;
		case	18618: objid = 19438;
		case	18617: objid = 19439;
		case	18616: objid = 19440;
		case	18615: objid = 19441;
		case	18614: objid = 19442;
		case	18613: objid = 19443;
		case	18612: objid = 19444;
		case	18611: objid = 19445;
		case	18610: objid = 19446;
		case	18465: objid = 19447;
		case	18464: objid = 19448;
		case	18463: objid = 19449;
		case	18462: objid = 19450;
		case	18461: objid = 19451;
		case	18460: objid = 19452;
		case	18459: objid = 19453;
		case	18458: objid = 19454;
		case	18457: objid = 19455;
		case	18456: objid = 19456;
		case	18455: objid = 19457;
		case	18454: objid = 19458;
		case	18453: objid = 19459;
		case	18447: objid = 19460;
		case	3916: objid = 19461;
		case	3915: objid = 19462;
		case	3914: objid = 19463;
		case	3913: objid = 19464;
		case	3912: objid = 19465;
		case 	3908: objid = 19330;
		case 	3907: objid = 19331;
		case 	3909: objid = 19466;
		case 	8081: objid = 19302;
		case 	8082: objid = 19303;
		case 	8083: objid = 19304;
		case 	8084: objid = 19467;
 		case    1850: objid = 19425;
   		case 	14383..14483: objid += 4248;
     	case 	14770..14856: objid += 4063;
      	case 	14858..14871: objid += 4062;
      	case 	18000..18036: objid += 934;
      	case 	18038..18101: objid += 933;
      	case 	14872..14883: objid += 4163;
      	case 	14885..14891: objid += 4162;
      	case 	13590..13667: objid += 5142;
      	case 	14500..14522: objid += 4310;
      	case 	12835..12944: objid += 6219;
      	case 	16000..16143: objid += 3164;
      	case 	14892: objid += 5009;
		default: objid = id;
	}
	return objid;
}


stock MostrarTDTutorial(playerid)
{
	if(TituloTuto[playerid] == PlayerText:INVALID_TEXT_DRAW)
	{
		TituloTuto[playerid] = CreatePlayerTextDraw(playerid,300.000000, 330.000000, "Titulo del tutoh");
		PlayerTextDrawAlignment(playerid,TituloTuto[playerid], 2);
		PlayerTextDrawBackgroundColor(playerid,TituloTuto[playerid], 255);
		PlayerTextDrawFont(playerid,TituloTuto[playerid], 3);
		PlayerTextDrawLetterSize(playerid,TituloTuto[playerid], 0.700000, 2.000000);
		PlayerTextDrawColor(playerid,TituloTuto[playerid], -2068119297);
		PlayerTextDrawSetOutline(playerid,TituloTuto[playerid], 1);
		PlayerTextDrawSetProportional(playerid,TituloTuto[playerid], 1);

		InfoTuto[playerid][0] = CreatePlayerTextDraw(playerid,315.000000, 360.000000, "Es un lugar muy transitado por los turistas y visitantes, ya que es un icono importante de la ciudad.");
		PlayerTextDrawAlignment(playerid,InfoTuto[playerid][0], 2);
		PlayerTextDrawBackgroundColor(playerid,InfoTuto[playerid][0], -1);
		PlayerTextDrawFont(playerid,InfoTuto[playerid][0], 1);
		PlayerTextDrawLetterSize(playerid,InfoTuto[playerid][0], 0.339999, 1.500000);
		PlayerTextDrawColor(playerid,InfoTuto[playerid][0], 255);
		PlayerTextDrawSetOutline(playerid,InfoTuto[playerid][0], 1);
		PlayerTextDrawSetProportional(playerid,InfoTuto[playerid][0], 1);

		InfoTuto[playerid][1] = CreatePlayerTextDraw(playerid,315.000000, 380.000000, "Es un lugar muy transitado por los turistas y visitantes, ya que es un icono importante de la ciudad.");
		PlayerTextDrawAlignment(playerid,InfoTuto[playerid][1], 2);
		PlayerTextDrawBackgroundColor(playerid,InfoTuto[playerid][1], -1);
		PlayerTextDrawFont(playerid,InfoTuto[playerid][1], 1);
		PlayerTextDrawLetterSize(playerid,InfoTuto[playerid][1], 0.339999, 1.500000);
		PlayerTextDrawColor(playerid,InfoTuto[playerid][1], 255);
		PlayerTextDrawSetOutline(playerid,InfoTuto[playerid][1], 1);
		PlayerTextDrawSetProportional(playerid,InfoTuto[playerid][1], 1);

		InfoTuto[playerid][2] = CreatePlayerTextDraw(playerid,315.000000, 400.000000, "Es un lugar muy transitado por los turistas y visitantes, ya que es un icono importante de la ciudad.");
		PlayerTextDrawAlignment(playerid,InfoTuto[playerid][2], 2);
		PlayerTextDrawBackgroundColor(playerid,InfoTuto[playerid][2], -1);
		PlayerTextDrawFont(playerid,InfoTuto[playerid][2], 1);
		PlayerTextDrawLetterSize(playerid,InfoTuto[playerid][2], 0.339999, 1.500000);
		PlayerTextDrawColor(playerid,InfoTuto[playerid][2], 255);
		PlayerTextDrawSetOutline(playerid,InfoTuto[playerid][2], 1);
		PlayerTextDrawSetProportional(playerid,InfoTuto[playerid][2], 1);
	}
	return 1;
}

stock CrashPlayer(playerid)
{
   for(new i=0;i<=1000;i++) CreatePlayerObject(playerid,4108,0,0,0,0,0,0);
   return 1;
}

//Nombres
stock NombreJugador(playerid)
{
	if(GetPVarInt(playerid,"USANDO_MASCARA"))
	{
		new _Enmascarado[24] = "Enmascarado";
		return _Enmascarado;
	}
	return Nombre_[playerid];
}

stock NombreJugador_(playerid)
{
	return Nombre_[playerid];
}

stock GetVehicleSpeed(vehicleid)
{
    new
		Float:x,
		Float:y,
		Float:z;

    GetVehicleVelocity(vehicleid, x, y, z);
    return floatround( VectorSize (x, y, z) * 160.2);
}

stock U_Usuario(playerid)
{
    new string[60];
    format(string,sizeof(string),U_Archivo,pName(playerid));
    return string;
}

// User vars
stock SetPlayerVarInt (playerid, const varname[], value)
{
	SetUserVarInt (pName (playerid), varname, value);
	return 1;
}

stock SetPlayerVarBool (playerid, const varname[], bool: value)
{
	if (value)
	{
		SetUserVarInt (pName (playerid), varname, 1);
	}
	else
	{
		SetUserVarInt (pName (playerid), varname, 0);
	}
	return 1;
}

stock SetPlayerVarFloat (playerid, const varname[], Float: value)
{
	SetUserVarFloat (pName (playerid), varname, value);
	return 1;
}

stock SetPlayerVarString (playerid, const varname[], const value[])
{
	SetUserVarString (pName (playerid), varname, value);
	return 1;
}

// Account var
stock SetUserVarInt (const username[], const varname[], value)
{
	new
		querystr [120];

	A_Format (querystr, "UPDATE `Usuarios` SET `%s` = %d WHERE `Nombre` = '%s'", varname, value, username);
	opmysql_tquery( querystr, "OnQueryFinish", "ii", INVALID_PLAYER_ID, query_type_unknown);
	return 1;
}

stock SetUserVarFloat (const username[], const varname[], Float:value)
{
	new
		querystr [120];

	A_Format (querystr, "UPDATE `Usuarios` SET `%s` = %f WHERE `Nombre` = '%s'", varname, value, username);
	opmysql_tquery( querystr, "OnQueryFinish", "ii", INVALID_PLAYER_ID, query_type_unknown);
	return 1;
}

stock SetUserVarString (const username[], const varname[], const value[])
{
	new
		querystr [140];

	A_Format (querystr, "UPDATE `Usuarios` SET `%s` = '%s' WHERE `Nombre` = '%s'", varname, value, username);
	opmysql_tquery( querystr, "OnQueryFinish", "ii", INVALID_PLAYER_ID, query_type_unknown);
	return 1;
}

stock SacarTDRegistro(playerid)//
{
	Loop(i,6,0) TextDrawHideForPlayer(playerid,Registro[i]);

	TextDrawHideForPlayer(playerid,FlechaSexo[0]);
	TextDrawHideForPlayer(playerid,FlechaSexo[1]);

	TextDrawHideForPlayer(playerid,FlechaEdad[0]);
	TextDrawHideForPlayer(playerid,FlechaEdad[1]);

	TextDrawHideForPlayer(playerid,FlechaPelea[0]);
	TextDrawHideForPlayer(playerid,FlechaPelea[1]);

	TextDrawHideForPlayer(playerid,FlechaEstilo[0]);
	TextDrawHideForPlayer(playerid,FlechaEstilo[1]);

	PlayerTextDrawHide(playerid,Sexo[playerid]);
	PlayerTextDrawHide(playerid,Edad[playerid]);
	PlayerTextDrawHide(playerid,Pelea[playerid]);
	PlayerTextDrawHide(playerid,Estilo[playerid]);

	return 1;
}

stock MostrarCajero(playerid)
{
	TextDrawShowForPlayer(playerid,Cajero[0]);
	TextDrawShowForPlayer(playerid,Cajero[1]);
	TextDrawShowForPlayer(playerid,Cajero[2]);

	TextDrawShowForPlayer(playerid,Operaciones[0]);
	TextDrawShowForPlayer(playerid,Operaciones[1]);
	TextDrawShowForPlayer(playerid,Operaciones[2]);
	TextDrawShowForPlayer(playerid,SCajero);
	PlayerTextDrawShow(playerid,Cuenta_Balance[0][playerid]);
	PlayerTextDrawShow(playerid,Cuenta_Balance[1][playerid]);

	new Str[MAX_PLAYER_NAME + 20],Str2[40];
	A_Format(Str,"Cuenta: ~g~%s",pName(playerid));
	A_Format(Str2,"Balance: ~g~$%d",InfoJugador[playerid][jBanco]);
	PlayerTextDrawSetString(playerid,Cuenta_Balance[0][playerid],Str);
	PlayerTextDrawSetString(playerid,Cuenta_Balance[1][playerid],Str2);
	SelectTextDraw(playerid,C_ROJO);
	SetPVarInt(playerid,"EnCajero",1);
	return 1;
}

stock SacarCajero(playerid)
{
	TextDrawHideForPlayer(playerid,Cajero[0]);
	TextDrawHideForPlayer(playerid,Cajero[1]);
	TextDrawHideForPlayer(playerid,Cajero[2]);

	TextDrawHideForPlayer(playerid,Operaciones[0]);
	TextDrawHideForPlayer(playerid,Operaciones[1]);
	TextDrawHideForPlayer(playerid,Operaciones[2]);
	TextDrawHideForPlayer(playerid,SCajero);
	PlayerTextDrawHide(playerid,Cuenta_Balance[0][playerid]);
	PlayerTextDrawHide(playerid,Cuenta_Balance[1][playerid]);
	CancelSelectTextDraw(playerid);
	SetPVarInt(playerid,"EnCajero",0);
	Descongelar(playerid);
	return 1;
}

stock PrecioVeh(modelo)
{
	switch(modelo)
	{
	    case 445: return 11000;//admiral
	    case 507: return 15000;//elegant
	    case 585: return 12000;//emperor
	    case 492: return 9000;//greenwood
	    case 546: return 10000;//intruder
	    case 551: return 11000;//merit
	    case 516: return 11500;//nebula
	    case 467: return 7000;//oceanic
	    case 404: return 6500;//perennial
	    case 426: return 9000;//premier
	    case 547: return 12000;//primo
	    case 479: return 15000;//regina
	    case 405: return 22000;//sentinel
	    case 458: return 11000;//solair
	    case 580: return 9000;//stafford
	    case 550: return 17000;//sunrise
	    case 540: return 17000;//vincent
	    case 421: return 20000;//washington
	    case 529: return 14000;//willard
	    case 496: return 15000;//blista compact
	    case 401: return 19000;//bravura
	    case 518: return 12000;//Buccaneer
	    case 527: return 16000;//cadrona
	    case 542: return 3000;//clover
	    case 589: return 30000;//club
	    case 419: return 6000;//Esperanto
	    case 533: return 29000;//Feltzer
	    case 526: return 18000;//Fortune
	    case 474: return 12000;//Hermes
	    case 545: return 93000;//Hustler
	    case 517: return 17000;//Majestic
	    case 410: return 15000;//Manana
	    case 436: return 18000;//Previon
	    case 475: return 9000;//Sabre
	    case 439: return 17000;//Stallion
	    case 549: return 5000;//Tampa
	    case 491: return 22000;//Virgo
	    case 602: return 60000;//Alpha
	    case 429: return 130000;//Banshee
	    case 402: return 50000;//Buffalo
	    case 541: return 210000;//Bullet
	    case 415: return 115000;//Cheetah
	    case 480: return 55000;//Comet
	    case 587: return 55000;//Euros
	    case 434: return 250000;//Hotknife
	    case 411: return 260000;//Infernus
	    case 603: return 120000;//Phoenix
	    case 506: return 130000;//Super GT
	    case 451: return 300000;//Turismo
	    case 555: return 55000;//Windsor
	    case 477: return 95000;//ZR-350
	    case 562: return 61000;//Elegy
	    case 565: return 50000;//Flash
	    case 559: return 70000;//Jester
	    case 561: return 68000;//Stratum
	    case 560: return 65000;//Sultan
	    case 558: return 60000;//Uranus
	    case 422: return 30000;//Bobcat
	    case 579: return 64000;//Huntley
	    case 400: return 60000;//Landstalker
	    case 600: return 1500;//Picador
	    case 489: return 40000;//Rancher
	    case 543: return 8600;//Sadler
	    case 478: return 8000;//Walton
    	case 495: return 62000;//Sandking
		case 466: return 10000;//Glendale
	    case 554: return 65000;//Yosemite
	    case 482: return 30000;//Burrito
	    case 418: return 28000;//Moonbeam
	    case 413: return 18000;//Pony
	    case 536: return 15000;//Blade
	    case 575: return 30000;//Broadway
	    case 534: return 12000;//Remington
	    case 567: return 13500;//Savanna
	    case 535: return 15000;//Slamvan
	    case 566: return 9000;//Tahoma
	    case 576: return 7000;//Tornado
	    case 412: return 8000;//Voodoo
	    case 581: return 21000;//BF-400
	    case 509: return 400;//Bici
	    case 481: return 1500;//BMX
	    case 462: return 1500;//Faggio
	    case 521: return 33000;//FCR-900
	    case 463: return 30000;//Freeway
	    case 510: return 2000;//Mountain Bike
	    case 522: return 180000;//NRG-500
	    case 461: return 90000;//PCJ-600
	    case 468: return 22000;//Sanchez
	    case 586: return 40000;//Wayfarer
	    case 424: return 30000;//BF-INJECTION
	    case 446: return 460000;//Squallo (BOTE)
	    case 452: return 190000;//Speeder
	    case 453,454: return 260000;//Reefer, Tropic
	    case 472: return 190000;//Coastguard
	    case 473: return 90000;//Dinghy
	    case 487: return 400000; //Maverick
	    case 493: return 200000; //JetMax
	    case 500: return 50000; //Mesa
	    case 595: return 24000;//Launch
	    default: return 100505;
	}
	return 0;
}

stock CheckEpoca()
{
	new Epoca;
	getdate(Epoca);
	return Epoca;
}

//Prox detector
CALLBACK: ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5)
{
	if (!IsPlayerConnected (playerid))
	    return 1;

	if (PlayerBools [playerid] & e_MUTEADO)
	    return Error (playerid, "En este momento, no puedes hablar por este canal.");

	new
		Float: x,
		Float: y,
		Float: z,
		my_vw = GetPlayerVirtualWorld (playerid);

	GetPlayerPos (playerid, x, y, z);

	foreach(Player, i)
	{
	    if (PlayerBools [i] & e_BIGEARS)
	    {
     		MensajeLargo (i, col1, string);
			continue;
		}
	    if (my_vw == GetPlayerVirtualWorld (i))
	    {
	        new
	            Float: distance_p = GetPlayerDistanceFromPoint (i, x, y, z);

			if (distance_p < radi)
			{
				if (distance_p < (radi/5))
				{
	   				MensajeLargo (i, col1, string);
				}
				else if (distance_p < (radi/4))
				{
	   				MensajeLargo (i, col2, string);
				}
				else if (distance_p < (radi/3))
				{
	   				MensajeLargo (i, col3, string);
				}
				else if (distance_p < (radi/2))
				{
	   				MensajeLargo (i, col4, string);
				}
				else
				{
	   				MensajeLargo (i, col5, string);
				}
			}
		}
	}
	return 1;
}

stock iswheelmodel(modelid) {

    new wheelmodels[17] = {1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1096,1097,1098};

    Loop(I,sizeof wheelmodels, 0) {

        if (modelid == wheelmodels[I])
            return true;

    }

    return false;
}

IllegalCarNitroIde(carmodel) {

    new illegalvehs[29] = { 581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 509, 481, 510, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454, 590, 569, 537, 538, 570, 449 };

    Loop(I,sizeof illegalvehs, 0) {

        if (carmodel == illegalvehs[I])
            return true;

    }

    return false;
}

stock PosEx(playerid, Float:x, Float:y, Float:z, int = -1, vw = -1)
{
	SetPlayerPos(playerid, x, y, z);
	if(int != -1) SetPlayerInterior(playerid, int);
	if(vw != -1) SetPlayerVirtualWorld(playerid, vw);
	return true;
}

ApagarTV(playerid, id)
{
	InfoTV[id][tvPrendida] = false;
	TextDrawHideForPlayer(playerid, TV_Azul);
	TextDrawShowForPlayer(playerid, TV_Apagado);
	return 1;
}

PrenderTV(playerid, id)
{
	InfoTV[id][tvPrendida] = true;
	TextDrawHideForPlayer(playerid, TV_Apagado);
	return 1;
}

MostrarTDTV(playerid)
{
	Loop(i, 9, 0) TextDrawShowForPlayer(playerid, TDTV[i]);
	return 1;
}

SacarTDTV(playerid)
{
	Loop(i, 9, 0) TextDrawHideForPlayer(playerid, TDTV[i]);
	return 1;
}


MostrarTV(playerid, canal)
{
	switch(canal)
	{
	    case CANAL_AV1:
	    {
	        Error(playerid, "~g~~h~AV1");
			TextDrawShowForPlayer(playerid, TV_Apagado);
			SacarTDTV(playerid);
			MostrarTDTV(playerid);
		}
	    case CANAL_AV2:
	    {
	        Error(playerid, "~g~~h~AV2");
			TextDrawShowForPlayer(playerid, TV_Apagado);
			SacarTDTV(playerid);
			MostrarTDTV(playerid);
		}
		case CANAL_LSTV:
		{
			if(!EnTransmision_AV)
			{
				TextDrawShowForPlayer(playerid, TV_Azul);
			}
			else TextDrawHideForPlayer(playerid, TV_Azul);
			SetPlayerCameraPos(playerid, -153.7117, -290.7969, 1050.8774);
			SetPlayerCameraLookAt(playerid, -153.7225, -291.7954, 1050.6328);
		}
	}
	SetPVarInt(playerid, "TV_CANAL", canal);

	return 1;
}

stock illegal_nos_vehicle(PlayerID)
{
    new carid = GetPlayerVehicleID(PlayerID);
    new playercarmodel = GetVehicleModel(carid);

    return IllegalCarNitroIde(playercarmodel);

}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	new
	    VehID = GetPlayerVehicleID(playerid);

	if(VehID && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    if(areaid == zCamionerosLVL1 && veh_getJob(VehID) == ID_Camionero)
	    {
	    	if(isnull(InfoCamion[VehID][camChofer]))
	    	{
	    	    return veh_respawn(VehID);
			}
		}
		if(areaid == zCosechadorLVL1 && GetVehicleModel(VehID) == 532)
		{
		    return veh_respawn(VehID);
		}
	}
	if (areaid == zPatioCarcel)
	{
	    if (InfoJugador[playerid][jEncarcelado] && IsPlayerInRangeOfPoint(playerid, 300.0, 2073.3049,-2005.5292,13.5469))
	    {
	        SetPlayerPos(playerid, 2073.3049,-2005.5292,13.5469);
		}
	}
	return 1;
}

stock CheckBan(playerid)
{
	new
	    stringfile[350],
		Name[MAX_PLAYER_NAME];

	GetPlayerName(playerid, Name, 24);

	format(stringfile, MAX_PLAYER_NAME+10, "Ban/%s.dat", Name);

	if(!fexist(stringfile))
	    return 0;//Not banned

	new
 		File:Arch = fopen(stringfile, io_read);

	fread(Arch, stringfile, 180);
	fclose(Arch);

 	new
  		char_,
  		Admin[MAX_PLAYER_NAME],
  		Reason[100],
  		Date2[15];

	if(stringfile[0] == 'D')//Date Ban
	{
		new
		    Date[15];
	    if(!sscanf(stringfile, "p<|>cs[15]s[24]s[15]s[100]", char_, Date, Admin, Date2, Reason))
	    {
			if(EsFechaMayor(Date, GetDateStr()))
			{
				A_Format(stringfile, ""#CBLANCO"Esta cuenta está baneada de Ciudad Real RP.\n\n\
																"#CAZULRARO"Nombre:\t"#CBLANCO"%s\n\
																"#CAZULRARO"Admin:\t\t"#CBLANCO"%s\n\
																"#CAZULRARO"Razón:\t\t"#CBLANCO"%s\n\
																"#CAZULRARO"Fecha:\t\t"#CBLANCO"%s\n\
																"#CAZULRARO"Vencimiento:\t"#CBLANCO"%s\n\n\
																¿Esto es injusto? Puede apelar su desban en "#CAMARILLO"nuestro discord",
						Name,
						Admin,
						Reason,
						Date2,
						Date);
				Dialog(playerid, dError, DIALOG_STYLE_MSGBOX, ""#CROJO"BANEADO - INFORMACIÓN", stringfile, "Cerrar", "");
				return 1;
			}
			else
			{
			    DesbanCuenta(Name);
			    return 0;
			}
		}
		return 0;
	}
	if(stringfile[0] == 'T')//Time Ban
	{
		new
		    time = gettime(),
			time_ban;
	    if(!sscanf(stringfile, "p<|>cds[24]s[15]s[100]", char_, time_ban, Admin, Date2, Reason))
	    {
			if(time_ban > time)
			{
			    new
			        Dif = time_ban-time,
					Mins_Total = Dif / 60,
					Hours = Mins_Total / 60,
					Mins = Mins_Total % 60;
				A_Format(stringfile, ""#CBLANCO"Esta cuenta está baneada de Ciudad Real RP.\n\n\
																	"#CAZULRARO"Nombre:\t"#CBLANCO"%s\n\
																	"#CAZULRARO"Admin:\t\t"#CBLANCO"%s\n\
																	"#CAZULRARO"Razón:\t\t"#CBLANCO"%s\n\
																	"#CAZULRARO"Fecha:\t\t"#CBLANCO"%s\n\
																	"#CAZULRARO"Vencimiento:\t"#CBLANCO"En %dh %dmin\n\n\
																¿Esto es injusto? Puede apelar su desban en "#CAMARILLO"nuestro discord",
							Name,
							Admin,
							Reason,
							Hours,
							Mins);
				Dialog(playerid, dError, DIALOG_STYLE_MSGBOX, ""#CROJO"BANEADO - INFORMACIÓN", stringfile, "Cerrar", "");
				return 1;
			}
			else
			{
			    DesbanCuenta(Name);
			    return 0;
			}
		}
	}
	if(stringfile[0] == 'P')//Permanent
	{
	    if(!sscanf(stringfile, "p<|>cs[24]s[15]s[100]", char_, Admin, Date2, Reason))
	    {
			A_Format(stringfile, ""#CBLANCO"Esta cuenta está baneada de Ciudad Real RP.\n\n\
															"#CAZULRARO"Nombre:\t"#CBLANCO"%s\n\
															"#CAZULRARO"Admin:\t\t"#CBLANCO"%s\n\
															"#CAZULRARO"Razón:\t\t"#CBLANCO"%s\n\
															"#CAZULRARO"Fecha:\t\t"#CBLANCO"%s\n\
															"#CAZULRARO"Vencimiento:\t"#CBLANCO"Nunca\n\n\
																¿Esto es injusto? Puede apelar su desban en "#CAMARILLO"nuestro discord",
					Name,
					Admin,
					Reason,
					Date2);
			Dialog(playerid, dError, DIALOG_STYLE_MSGBOX, ""#CROJO"BANEADO - INFORMACIÓN", stringfile, "Cerrar", "");
			return 1;
		}
	}
	return 0;
}

stock DesbanCuenta(Name[])
{
	new
	    str[20];

	A_Format(str, "Ban/%s.dat", Name);

	if(fexist(str))
	    fremove(str);

	return 1;
}

stock CrearCuenta(playerid, const name[], const encrypted, email[])
{
	new
		querystr [211];

	InfoJugador[playerid][jClave] = encrypted;

	opmysql_format(querystr, sizeof (querystr), "INSERT INTO `Usuarios` (`Nombre`, `Clave`, `email`) VALUES ('%e', %d, '%e')", name, encrypted, email);
	opmysql_tquery( querystr, "OnQueryFinish", "ii", playerid, query_type_createaccount);
	//Dialog (playerid, dRegistro, DIALOG_STYLE_MSGBOX, ""#CINFO"¡Cuenta registrada!", ""#CBLANCO"\n\nSu cuenta fue creada exitosamente, ¡ahora puede comenzar a jugar!\n\n", "Jugar", "");
	SetPVarInt (playerid, "pRegistro", 5);
	printf("Consulta ejecutada | CUENTA: %s | QUERY : %s", querystr); 
	return 1;
}

stock LoadAccountData (playerid)
{
	static
		querystr [100];

	querystr [0] = '\0';

	format (querystr, sizeof (querystr), "SELECT * FROM `Usuarios` WHERE `Nombre` = '%s'", pName (playerid));
	opmysql_tquery( querystr, "OnQueryFinish", "ii", playerid, query_type_loadaccount);
	return 1;
}

CALLBACK: CargarCuenta(playerid)
{
	// Check BAN
	if(CheckBan(playerid)) return DelayKick(playerid);

	GameTextForPlayer(playerid, TEXT_WELCOME_LOADING, 4000,3);

	// Copiar variables
	for(new i; InfoJ:i < InfoJ; i++)
	{
	    InfoJugadorTemp[playerid][InfoJ:i] = InfoJugador[playerid][InfoJ:i];
	    if(InfoJugadorTemp[playerid][InfoJ:i] != InfoJugador[playerid][InfoJ:i])
	    {
	        printf("ERROR: InfoJugadorTemp=%d | InfoJugador=%d", InfoJugadorTemp[playerid][InfoJ:i], InfoJugador[playerid][InfoJ:i]);
		}
	}

	InvLoop(i,playerid)
	{
	    ItemInventarioTemp[playerid][i][invObject] = ItemInventario[playerid][i][invObject];
	    ItemInventarioTemp[playerid][i][invData] = ItemInventario[playerid][i][invData];
	}

	if(InfoJugador[playerid][jAdmin])
	{
		LogAdmin(playerid, "Ingresó");
		SetPVarInt(playerid,"NIVEL_ADMIN",InfoJugador[playerid][jAdmin]);
	}

	if (GetPlayerVirtualWorld (playerid) == 0 && GetPlayerInterior (playerid))
	{
		SetPlayerPos(playerid, 1482.6365, -1742.8387, 13.5469);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		Mensaje (playerid, -1, "Ocurrió un error al cargar tu interior, usted fue teletransportado automáticamente a Los Santos.");
	}

	// Guardar IP
	new
		ip[16];

	GetPlayerIp(playerid, ip, 16);
	SetPlayerVarString (playerid, "ip", ip);

	// Block dudas
	if(InfoJugador[playerid][jNivel] >= 2 && !InfoJugador[playerid][jAdmin])
	{
		InfoJugador[playerid][jBlockDudas] = true;
	}

	// Datos del jugador
	SetPlayerScore(playerid,InfoJugador[playerid][jNivel]);

	// Necesidades
	MostrarNecesidadesEx(playerid);


	if (InfoJugador[playerid][jOrina] > 90.0)
	{
	    ToggleOrina(playerid, true);
	}

	if (InfoJugador[playerid][jCansancio] < 10.0)
	{
	    ToggleSueno(playerid, true);
	}

	//General
	SetPlayerInterior(playerid,InfoJugador[playerid][jInterior]);
	SetPlayerVirtualWorld(playerid,InfoJugador[playerid][jVirtualWorld]);


	//Fumado
	if (InfoJugador[playerid][jFalopeado])
	{
	    TextDrawShowForPlayer (playerid, TDEfectoFaso);
		SetTimerEx("_2SetPlayerDrunkLevel", 500, false, "ii", playerid, (InfoJugador[playerid][jFalopeado]/2) * 70);
	}


	//Cargar Attach objects
	CargarAccesorios(playerid);

	// Vehiculos
	ownVeh_MySQL_load_owner(pName(playerid), "veh_onLoaded", playerid);

	// Anti Sobeit
	SetTimerEx("CheckHackCamera", 6000, false, "ii", playerid, 0);

	// Otros
	PreloadAnimLib(playerid, "BOMBER");
	PreloadAnimLib(playerid, "CRACK");
	PreloadAnimLib(playerid, "DEALER");
	PreloadAnimLib(playerid, "INT_SHOP");
	PreloadAnimLib(playerid, "GANGS");
	PreloadAnimLib(playerid, "GYMNASIUM");
	PreloadAnimLib(playerid, "BSKTBALL");
	PreloadAnimLib(playerid, "PED");
	PreloadAnimLib(playerid, "KNIFE");
	PreloadAnimLib(playerid, "MEDIC");
	PreloadAnimLib(playerid, "GHANDS");
	PreloadAnimLib(playerid, "FOOD");
	PreloadAnimLib(playerid, "SHOP");
	PreloadAnimLib(playerid, "WUZI");
	PreloadAnimLib(playerid, "CARRY");
	PreloadAnimLib(playerid, "GRAFFITI");
	PreloadAnimLib(playerid, "HEIST9");
	PreloadAnimLib(playerid, "SMOKING");
	PreloadAnimLib(playerid, "INT_OFFICE");
	PreloadAnimLib(playerid, "BUDDY");
	PreloadAnimLib(playerid, "SUNBATHE");

 	SetPlayerColor(playerid, 0xFFFFFF00);

	CaminarPelear(playerid);

	SetPVarInt(playerid,"CargoCuenta",1);

	ToggleSkillLevel(playerid);

	CargarLlaves(playerid);

	if(InfoJugador[playerid][jMiembro]) //v3 (Si tiene Fac, pero no está en la lista)
	{
	    new
	        string[25];

		A_Format(string, "Facciones/Miembros%d.ini", InfoJugador[playerid][jMiembro]);
		INI_ParseFile(string, "CheckMemberExist_Miembros", .bExtra = true, .extra = playerid);
		if(!GetPVarInt(playerid, "EN_LISTA_MIEMBROS"))
		{
			MensajeF(playerid, -1, "Fuiste expulsado automáticamente de la facción "#CAMARILLO"%s"#CBLANCO", ya que", NombreFaccion(InfoJugador[playerid][jMiembro]));
			Mensaje (playerid, -1, "no estás presente en la lista de miembros de dicha facción en el foro.");
			InfoJugador[playerid][jMiembro] = 0;
		}
		else
		    DeletePVar(playerid, "EN_LISTA_MIEMBROS");
	}
	if(ID_Familia(playerid) && ID_Faccion(playerid))
	{
		new
		    str[350];

		A_Format(str, ""#CROJO"ATENCIÓN: "#CBLANCO"Ahora en el servidor, no se permite tener "#CAMARILLO"FAMILIA "#CBLANCO"y "#CAMARILLO"FACCIÓN "#CBLANCO"simultáneamente.\n\nAhora, te ves obligado a elegir entre mantener tu Familia, o Facción.\n\n"#CINFO"Familia: "#CVERDE"%s\n"#CINFO"Facción: "#CVERDE"%s\n\n"#CBLANCO"¿Qué eliges?", InfoFamilia[ID_Familia(playerid)][fNombre], NombreFaccion(ID_Faccion(playerid)) );
		Dialog(playerid, dElegirFamFac, DIALOG_STYLE_MSGBOX, ""#CVERDE"¿Familia o Facción?", str, "Familia", "Facción");
	}

	new
		spawnskin = -1,
		curr_skin = InfoJugador[playerid][jCurrentSkin];

	if(0 <= curr_skin < MAX_ROPA)
	{
		if(InfoJugador[playerid][jRopa][curr_skin])
		{
			spawnskin = InfoJugador[playerid][jRopa][curr_skin];
		}
		else
		{
			switch(InfoJugador[playerid][jSexo])
			{
	  			case 1: spawnskin = 252;
		    	case 2: spawnskin = 140;
			}
		}
	}
	else
	{
	    spawnskin = 1;
	}

	if (InfoJugador[playerid][jFacDuty])
	{
	    switch (ID_Faccion(playerid))
	    {
	        case IDLSPD:
	        {
	            SetPlayerColor(playerid, C_DUTYLSPD);
			}
	        case IDLSEM:
	        {
	            SetPlayerColor(playerid, C_DUTYLSEM);
			}
	        case IDMECANICOS:
	        {
	            SetPlayerColor(playerid, C_DUTYMECANICOS);
			}
	        case IDLSMD:
	        {
	            SetPlayerColor(playerid, C_DUTYLSMD);
			}
			default:
			{
			    InfoJugador[playerid][jFacDuty] = 0;
			}
		}
	}

	SetSpawnInfo(playerid, 0, spawnskin, InfoJugador[playerid][jPosX], InfoJugador[playerid][jPosY], InfoJugador[playerid][jPosZ] - 0.5, 0.0, 0, 0, 0, 0, 0, 0);
	TogglePlayerSpectating(playerid, false);
	CongelarEx(playerid,6);

	SetPlayerHealth(playerid,InfoJugador[playerid][jVida]);
	SetPlayerArmour(playerid,InfoJugador[playerid][jChaleco]);

	SetPlayerSkin(playerid, spawnskin);

	LoginTime[playerid] = gettime()+5;

	// Bienvenida
	Mensaje (playerid,-1," ");
	Mensaje (playerid,-1," ");
	Mensaje (playerid,-1," ");
	Mensaje (playerid,-1," ");
	Mensaje (playerid,-1," ");
	Mensaje (playerid,-1," ");
	Mensaje (playerid,-1," ");
	MensajeF(playerid,-1,"¡Bienvenido a {88C17F}Ciudad Real RP"#CBLANCO", %s!", NombreJugador_(playerid));
	Mensaje (playerid,-1,"Comandos de ayuda: "#CINFO"/informacion "#CBLANCO"| "#CINFO"/duda "#CBLANCO"| "#CINFO"/canal ayuda "#CBLANCO"| "#CROJO"/cambios");
	Mensaje (playerid,-1," ");

	GameTextForPlayer(playerid, ""#TEXT_WELCOME_LOADING"..", 4000,3);
	
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid,InfoJugador[playerid][jDinero]);
	return 1;
}

CALLBACK: CheckMemberExist_Miembros(playerid, name[], value[])
{
	if(!strcmp(pName(playerid), name))
	{
        SetPVarInt(playerid, "EN_LISTA_MIEMBROS", true);
	}
	return 1;
}

CALLBACK: CheckHackCamera(playerid, start)
{
	new
		Float:x,
		Float:y,
		Float:z;

    GetPlayerCameraFrontVector(playerid, x, y, z);
    #pragma unused x
    #pragma unused y
    if(z < -0.7)
    {
        LimpiarPantalla(playerid, 10);

        if(start == 0)
			Dialog(playerid, dError, DIALOG_STYLE_MSGBOX, ""#CROJO"Cheat detectado", ""#CBLANCO"Está prohibido ingresar a este servidor con algún tipo de "#CROJO"Cheat o Hack.\n\nSi deseas jugar en el servidor, deberás quitartelo obligatoriamente. De lo contrario, no serás bienvenido aquí.\n\nSe sumó una advertencia a tu cuenta. Cuando llegues a las tres advertencias, te verás baneado.", "Cerrar", "");

		else
			Dialog(playerid, dError, DIALOG_STYLE_MSGBOX, ""#CROJO"Cheat detectado", ""#CBLANCO"¡Empezamos Mal!\n\nEstá prohibido ingresar a este servidor con algún tipo de "#CROJO"Cheat o Hack.\n\nSi deseas jugar en el servidor, deberás quitartelo obligatoriamente. De lo contrario, no serás bienvenido aquí.\n\nSe sumó una advertencia a tu cuenta. Cuando llegues a las tres advertencias, te verás baneado.", "Cerrar", "");

		antic_Kick(playerid, "Ingresar con hack");
	}
	return 1;
}

float_AddToBuffer (buffer[], const varname[], Float: value, size = sizeof (buffer))
{
	format (buffer, size, "%s`%s`=%.02f,", buffer, varname, value);
}

int_AddToBuffer (buffer[], const varname[], value, size = sizeof (buffer))
{
	format (buffer, size, "%s`%s`=%d,", buffer, varname, value);
}

CALLBACK: ActualizarCuenta(playerid)
{
	if(!IsPlayerConnected(playerid) || !GetPVarInt(playerid,"CargoCuenta") || GetPVarInt(playerid, "VIENDO_TV")) return false;

	new
	    querystr [512],
		varchanges;

	varchanges = 0;
	querystr = "UPDATE `Usuarios` SET ";

	//Integrer
	#define SaveVInt(%1);			if(InfoJugadorTemp[playerid][j%1] != InfoJugador[playerid][j%1])\
	                        		{\
	                        		    varchanges++;\
										int_AddToBuffer (querystr,#%1,InfoJugador[playerid][j%1]);\
										InfoJugadorTemp[playerid][j%1] = InfoJugador[playerid][j%1];\
									}
	//Floats
	#define SaveVFloat(%1);			if(InfoJugadorTemp[playerid][j%1] != InfoJugador[playerid][j%1])\
	                        		{\
	                        		    varchanges++;\
										float_AddToBuffer (querystr,#%1,InfoJugador[playerid][j%1]);\
										InfoJugadorTemp[playerid][j%1] = InfoJugador[playerid][j%1];\
									}
	//Bool
	#define SaveVBool(%1);			if(InfoJugadorTemp[playerid][j%1] != InfoJugador[playerid][j%1])\
	                        		{\
	                        		    varchanges++;\
										int_AddToBuffer (querystr,#%1,_:InfoJugador[playerid][j%1]);\
										InfoJugadorTemp[playerid][j%1] = InfoJugador[playerid][j%1];\
									}

	//IntegrerEx
	#define SaveVIntEx(%1,%2);		if(InfoJugadorTemp[playerid][j%1] != %2)\
	                        		{\
	                        		    varchanges++;\
										int_AddToBuffer (querystr,#%1,%2);\
										InfoJugadorTemp[playerid][j%1] = %2;\
									}

	//FloatsEx
	#define SaveVFloatEx(%1,%2);	if(InfoJugadorTemp[playerid][j%1] != %2)\
	                        		{\
	                        		    varchanges++;\
										float_AddToBuffer (querystr,#%1,%2);\
										InfoJugadorTemp[playerid][j%1] = %2;\
									}

	SaveVBool(Registrado);
 	SaveVInt(Sexo);
 	SaveVInt(Edad);
 	SaveVInt(Pelea);
 	SaveVInt(Estilo);
 	SaveVInt(DNI);

	new
	    Str [20];

	Loop(i, MAX_ROPA, 0)
 	{
 	    if(InfoJugadorTemp[playerid][jRopa][i] != InfoJugador[playerid][jRopa][i])
 	    {
			varchanges ++;
 	        A_Format(Str, "Ropa_%d", i);
			int_AddToBuffer (querystr, Str, InfoJugador[playerid][jRopa][i]);
 	        InfoJugadorTemp[playerid][jRopa][i] = InfoJugador[playerid][jRopa][i];
		}
	}

 	SaveVInt(Dinero);
 	SaveVInt(Nivel);
 	SaveVFloat(Experiencia);
 	SaveVInt(Admin);
 	SaveVInt(Lider);
 	SaveVInt(Miembro);
 	SaveVInt(FacDuty);
 	SaveVInt(Rango);
 	SaveVInt(Encarcelado);
 	SaveVInt(TiempoCarcel);
 	SaveVInt(Minutos);
 	SaveVInt(Banco);
 	SaveVInt(Horas);
 	SaveVInt(LiderFam);
 	SaveVInt(MiembroFam);
 	SaveVInt(RangoFam);
 	SaveVInt(Trabajo);
 	SaveVInt(NivelTrabajo);
 	SaveVInt(Entregas);
 	SaveVInt(Saldo);
 	SaveVInt(IDCuentaB);
 	SaveVBool(BuscadorVeh);
 	SaveVBool(LicenciaAuto);
 	SaveVBool(LicenciaMoto);
 	SaveVBool(LicenciaArmas);
 	SaveVInt(Cosechas);
 	SaveVInt(Estrellas);
 	SaveVBool(Bomba);
 	SaveVInt(Repartidas);
 	SaveVInt(Barridas);
 	SaveVInt(Acento);
 	SaveVBool(Muerto);
 	SaveVInt(Necesidades);
 	SaveVBool(BlockDudas);
 	SaveVBool(BlockFam);
 	SaveVBool(BlockFac);
 	SaveVBool(Esposado);
 	SaveVInt(TiempoDudas);
 	SaveVInt(Falopeado);
 	SaveVInt(Papeado);
 	SaveVInt(Ibu400);
 	SaveVInt(Ibu600);
 	SaveVInt(Adv);
 	SaveVInt(CurrentSkin);
 	SaveVInt(AdmAdv);
 	SaveVInt(ObjetoColgado);
 	SaveVInt(ObjetoColgadoData);
 	SaveVInt(ChalecoObj);
 	SaveVInt(ChalecoData);
	SaveVFloat(Hambre);
	SaveVFloat(Cansancio);
	SaveVFloat(Orina);

	InvLoop(i,playerid)
	{
 	    if(ItemInventarioTemp[playerid][i][invObject] != ItemInventario[playerid][i][invObject])
 	    {
			varchanges ++;
 	        A_Format(Str, "inv_%d", i);
			int_AddToBuffer (querystr, Str, ItemInventario[playerid][i][invObject]);
 	        ItemInventarioTemp[playerid][i][invObject] = ItemInventario[playerid][i][invObject];
		}
 	    if(ItemInventarioTemp[playerid][i][invData] != ItemInventario[playerid][i][invData])
 	    {
			varchanges ++;
 	        A_Format(Str, "invd_%d", i);
			int_AddToBuffer (querystr, Str, ItemInventario[playerid][i][invData]);
 	        ItemInventarioTemp[playerid][i][invData] = ItemInventario[playerid][i][invData];
		}
	}

	new
	    Float: x,
		Float: y,
		Float: z,
		Float: hp,
		Float: armour,
	    int_ = GetPlayerInterior(playerid),
	    vw_ = GetPlayerVirtualWorld(playerid),
	    money_ = GetPlayerMoney(playerid),
	    object_ = GetObject(playerid),
	    objectD_ = GetObjectData(playerid);

	GetPlayerPos(playerid, x, y, z);
	GetPlayerHealth(playerid, hp);
	GetPlayerArmour(playerid, armour);

	if (PlayerBools [playerid] & e_LICENCIA)
	{
	    x = -2029.9017;
		y = -119.1597;
		z = 1035.1719;
		int_ = 3;
		vw_ = 0;
	}

	SaveVFloatEx(PosX, x);
	SaveVFloatEx(PosY, y);
	SaveVFloatEx(PosZ, z);
	SaveVFloatEx(Vida, hp);
	SaveVFloatEx(Chaleco, armour);
	SaveVIntEx(Interior, int_);
	SaveVIntEx(VirtualWorld, vw_);
	SaveVIntEx(Dinero, money_);
	SaveVIntEx(CurrentObj, object_);
	SaveVIntEx(CurrentObjD, objectD_);

	if (GetPVarInt (playerid, "Disconnecting"))
	{
		new
		    string[24],
		    Year, Month, Day,
		    Hour, Min;

		getdate(Year, Month, Day);
		gettime(Hour, Min);

		A_Format(string, "%02d/%02d/%d - %02d:%02d", Day, Month, Year, Hour, Min);
		SetPlayerVarString (playerid, "UltimaConexion", string);
	}

	if (varchanges)
	{
	    static
	        len;

		len = strlen (querystr);

		if (len < 6) {
			return 1;
		}
		
		querystr [len-1] = ' ';

		format (querystr, sizeof(querystr), "%sWHERE `Nombre` = '%s'", querystr, pName (playerid));
		opmysql_tquery( querystr, "OnQueryFinish", "ii", playerid, query_type_unknown);
	}
	return 1;
}

/*/tunear
Reparaciones
	Reparar Puertas (4 piezas)
	Reparar Paneles (6 piezas)
	Reparar Luces (2 piezas)
	Reparar Neumáticos (4 piezas)
	Reparar toda la carroceria (20 piezas)

Ruedas
	Switch (6 piezas) - $200 ...

Nitro
	Nitro x2 (1 piezas)
	Nitro x5 (5 piezas)
	Nitro x10 (10 piezas)

Suspensión
	Suspensión hidráulica

Estereo
	Altavoz.

Tunning
    0 - SPOILER
	1 - CAMPANA
	2 - TECHO
	3 - SIDESKIRT
	4 - LÁMPARAS
	5 - NITRO
	6 - ESCAPE
	7 - RUEDAS
	8 - STEREO
	9 - SISTEMA HIDRÁULICO
	10 - PARAGOLPES DELANTERO
	11 - PARAGOLPES TRASERO
	12 - VENTILACIÓN DERECHA
	13 - VENTILACIÓN IZQUIERDA
*/

stock GetComponentTypeName(slot)
{
	new
	    RetText[30] = "Unknown";

	switch(slot)
	{
	    case 0: RetText = "Alerón";
	    case 1: RetText = "Campana";
	    case 2: RetText = "Techo";
	    case 3: RetText = "Embellecedores";
	    case 4: RetText = "Lámparas";
	    case 5: RetText = "Nitro";
	    case 6: RetText = "Escape";
	    case 7: RetText = "Ruedas";
	    case 8: RetText = "Stereo";
	    case 9: RetText = "Suspensión";
	    case 10: RetText = "Paragolpes(delantero)";
	    case 11: RetText = "Paragolpes(trasero)";
	    case 12: RetText = "Ventilación(der)";
	    case 13: RetText = "Ventilación(izq)";
	}
	return RetText;
}

stock GetComponentType_Price(slot)
{
	if(0 <= slot < 14)
	    return PrecioPiezaM[slot];

	return 0;
}

stock GetComponentType_Piezas(slot)
{
	switch(slot)
	{
	    case 0: return 5;//Spoiler
	    case 1: return 3;//Campana
	    case 2: return 2;//Techo
	    case 3: return 1;//Embellecedor
	    case 4: return 4;//Lámparas
	    case 5: return 10;//Nitro
	    case 6: return 4;//Escape
	    case 7: return 12;//Ruedas
	    case 8: return 10;//Stereo
	    case 9: return 16;//Suspensión
	    case 10: return 6;//Paragolpes delantero
	    case 11: return 6;//Paragolpes trasero
	    case 12: return 2;//Ventilación derecha
	    case 13: return 2;//Ventilación izquierda
	}
	return 0;
}

stock TunningMenu(playerid)
{
	Dialog(playerid, dTunning, DIALOG_STYLE_LIST, ""#CNARANJA"Menú Tunning", ">Alerónes\n>Campanas\n>Techo\n>Embellecedores\n>Lámparas\n>Nitro\n>Escape\n>Ruedas\n>Stereo\n>Suspensión\n>Paragolpes Delantero\n>Paragolpes Trasero\n>Ventilación Derecha\n>Ventilación Izquierda\n>Color primario\n>Color secundario\n>Capa de pintura\n>Reparaciones...", "Agregar", "Cancelar");
	return 1;
}

stock SelectTunning(playerid, listitem)
{
	new
	    VehID = GetPVarInt(playerid, "MECANICO_VEHID"),
		ModelID = GetVehicleModel(VehID);

	new
		str2[40], DialogStr[sizeof(str2)*13], Count;

	if(listitem == CARMODTYPE_WHEELS)
	{
    	new wheelmodels[17] = {1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1096,1097,1098};
		Loop(I, sizeof wheelmodels, 0)
		{
			A_Format(str2, "%s %s\n", GetComponentTypeName(CARMODTYPE_WHEELS), GetComponentName(wheelmodels[I]));
			strcat(DialogStr, str2);
			A_Format(str2, "MECANICO_COMP_%d", Count);
			SetPVarInt(playerid, str2, wheelmodels[I]);
			Count++;
		}
	}
	else if(listitem == CARMODTYPE_NITRO)
	{
		if(IllegalCarNitroIde(ModelID))
		{
		    cmd_tunear(playerid, "@SECRETCODE=TUNNING");
			return Error(playerid, "~r~Este vehículo no acepta esas modificaciones.");
		}
		RequestModVehicle(playerid, VehID, 1010);
		return 1;
	}
	else if(listitem == CARMODTYPE_HYDRAULICS)
	{
		if(IllegalCarNitroIde(ModelID))
		{
		    cmd_tunear(playerid, "@SECRETCODE=TUNNING");
			return Error(playerid, "~r~Este vehículo no acepta esas modificaciones.");
		}
		RequestModVehicle(playerid, VehID, 1087);
		return 1;
	}
	else if(listitem == CARMODTYPE_STEREO)
	{
		if(IllegalCarNitroIde(ModelID))
		{
		    cmd_tunear(playerid, "@SECRETCODE=TUNNING");
			return Error(playerid, "~r~Este vehículo no acepta esas modificaciones.");
		}
		RequestModVehicle(playerid, VehID, 1086);
		return 1;
	}
	else if(listitem == 14)//Color 1
	{
	    new
	        col1, col2;

		veh_getColor(VehID, col1, col2);

	    A_Format(DialogStr, ""#CBLANCO"Color Actual: {%06x}(%d)\n\n"#CBLANCO"Escribe el ID del nuevo color primario (0.255)\n\n\t\t¿No sabe las IDS? "#CVERDE"Busque por internet", VehicleColoursTableRGBA[col1] >>> 8, col1);
	    Dialog(playerid, dTunning_Col1, DIALOG_STYLE_INPUT, ""#CNARANJA"Color Primario", DialogStr, "Aceptar", "Volver");
		return 1;
	}
	else if(listitem == 15)//Color 2
	{
	    new
	        col1, col2;

		veh_getColor(VehID, col1, col2);

	    A_Format(DialogStr, ""#CBLANCO"Color Actual: {%06x}(%d)\n\n"#CBLANCO"Escribe el ID del nuevo color secundario (0.255)\n\n\t\t¿No sabe las IDS? "#CVERDE"Busque por internet", VehicleColoursTableRGBA[col2] >>> 8, col2);
	    Dialog(playerid, dTunning_Col2, DIALOG_STYLE_INPUT, ""#CNARANJA"Color Secundario", DialogStr, "Aceptar", "Volver");
		return 1;
	}
	else if(listitem == 16)//Paintjob
	{
	    if(!VehicleModelHavePaintjob(ModelID))
	    {
   	 		cmd_tunear(playerid, "@SECRETCODE=TUNNING");
	        return Error(playerid, "~r~Este vehículo no acepta capas de pintura.");
		}
	    Dialog(playerid, dTunning_Paintjob, DIALOG_STYLE_LIST, ""#CNARANJA"Capa de Pintura", "Capa de pintura 1\nCapa de pintura 2\nCapa de pintura 3\n"#CROJO">> Quitar capa de pintura.", "Aceptar", "Volver");
		return 1;
	}
	else if(listitem == 17)//Reparación
	{
	    return Dialog(playerid, dRepairVeh, DIALOG_STYLE_LIST, ""#CNARANJA"Reparaciones", "Reparar neumáticos\t\t"#CVERDE"$850 "#CGRIS"- Piezas: 8\
																					\nReparar estructura\t\t"#CVERDE"$1200 "#CGRIS"- Piezas: 15\
																					\nReparar luces\t\t"#CVERDE"$420 "#CGRIS"- Piezas: 4", "Aceptar", "Cancelar");
	}
	else
	{
		Loop(i, 48, 0)
		{
		    if(ModelID == legalmods[i][0])
		    {
				Loop(mod, 22, 1)
				{
				    if(legalmods[i][mod])
				    {
				        new
				            ModSlot = GetVehicleComponentType(legalmods[i][mod]);

					    if(ModSlot == listitem)
					    {
							A_Format(str2, "%s %s\n", GetComponentTypeName(ModSlot), GetComponentName(legalmods[i][mod]));
							strcat(DialogStr, str2);
							A_Format(str2, "MECANICO_COMP_%d", Count);
							SetPVarInt(playerid, str2, legalmods[i][mod]);
							Count++;
					    }
					}
				}
		    }
		}
	}
	if(isnull(DialogStr))
	{
	    cmd_tunear(playerid, "@SECRETCODE=TUNNING");
	    return Error(playerid, "~r~Este vehículo no acepta esas modificaciones.");
	}
	Dialog(playerid, dTunning_2, DIALOG_STYLE_LIST, "Tunning", DialogStr, "Agregar", "Volver");
	return 1;
}

stock VehicleModelHavePaintjob(modelid)
{
	switch(modelid)
	{
	    case 558..565: return 1; // Wheel arch angels
	    case 412, 534, 535, 536, 566, 567, 576: return 2; //Loco Low Co
	}
	return 0;
}

stock RequestModVehicle(playerid, vehicleid, componentid)
{
	#pragma unused vehicleid
	new
	    str[135],
		slot = GetVehicleComponentType(componentid);

	A_Format(str, ""#CBLANCO"Componente: "#CAMARILLO"%s %s\n"#CBLANCO"Piezas: "#CGRIS"%d\n"#CBLANCO"Precio: "#CVERDE"$%d", GetComponentTypeName(slot), GetComponentName(componentid), GetComponentType_Piezas(slot), GetComponentType_Price(slot) );

	SetPVarInt(playerid, "MECANICO_COMPONENTPRICE", GetComponentType_Price(slot));
	SetPVarInt(playerid, "MECANICO_COMPONENTID", componentid);

	Dialog(playerid, dTunning_3, DIALOG_STYLE_MSGBOX, ""#CVERDE"Detalles del producto", str, "Ofrecer", "Volver");
	return 1;
}

stock ActualizarAccesorios(playerid, slot=-1)
{
	if(slot == -1)
	{
		Loop(i, MAX_ACCESORIOS, 0)
		{
			ActualizarAccesorios(playerid, i);
		}
	}
	else if(slot > -1 && slot < MAX_ACCESORIOS)
	{
		new
			querystr [200] = "UPDATE `Usuarios` SET ",
			str [50];

		A_Format (str, "`AttachModel_%d` = %d,", slot, InfoJugador[playerid][jAttachModel][slot]);
		strcat (querystr, str);

		A_Format (str, "`AttachBone_%d` = %d,", slot, InfoJugador[playerid][jAttachModel][slot]);
		strcat (querystr, str);

		A_Format (str, "`AttachPosx_%d` = %f,", slot, InfoJugador[playerid][jAttachPosx][slot]);
		strcat (querystr, str);

		A_Format (str, "`AttachPosy_%d` = %f,", slot, InfoJugador[playerid][jAttachPosy][slot]);
		strcat (querystr, str);

		A_Format (str, "`AttachPosz_%d` = %f,", slot, InfoJugador[playerid][jAttachPosz][slot]);
		strcat (querystr, str);

		A_Format (str, "`AttachAngx_%d` = %f,", slot, InfoJugador[playerid][jAttachAngx][slot]);
		strcat (querystr, str);

		A_Format (str, "`AttachAngy_%d` = %f,", slot, InfoJugador[playerid][jAttachAngy][slot]);
		strcat (querystr, str);

		A_Format (str, "`AttachAngz_%d` = %f,", slot, InfoJugador[playerid][jAttachAngz][slot]);
		strcat (querystr, str);

		A_Format (str, "`AttachEscx_%d` = %f,", slot, InfoJugador[playerid][jAttachEscx][slot]);
		strcat (querystr, str);

		A_Format (str, "`AttachEscy_%d` = %f,", slot, InfoJugador[playerid][jAttachEscy][slot]);
		strcat (querystr, str);

		A_Format (str, "`AttachEscz_%d` = %f,", slot, InfoJugador[playerid][jAttachEscz][slot]);
		strcat (querystr, str);

		A_Format (str, "`AttachOcultado_%d` = %d ", slot, InfoJugador[playerid][jAttachOcultado][slot]);
		strcat (querystr, str);

		A_Format (str, "WHERE `Nombre` = '%s'", pName (playerid));
		strcat (querystr, str);

		opmysql_tquery( str, "OnQueryFinish", "ii", playerid, query_type_unknown);
	}
	return 1;
}

stock GetAttachedObjectOffSet(skin, objectid, &Float:x, &Float:y, &Float:z, &Float:rx, &Float:ry, &Float:rz, &Float:ex, &Float:ey, &Float:ez)
{
	if(0 <= skin < 300)
	{
		if(0 <= objectid < sizeof(ObjectData))
		{
		    switch(ObjectData[objectid][invType])
		    {
		        case INV_ARMA:
		        {
					switch(ObjectData[objectid][invData])
					{
					    case 25, 27, 30, 31, 33, 34: // Pesada
					    {
					        x = ArmaEspaldaPesada[skin][0];
					        y = ArmaEspaldaPesada[skin][1];
					        z = ArmaEspaldaPesada[skin][2];
					        rx = ArmaEspaldaPesada[skin][3];
					        ry = ArmaEspaldaPesada[skin][4];
					        rz = ArmaEspaldaPesada[skin][5];
					        ex = 1.0;
					        ey = 1.0;
					        ez = 1.0;
					        return true;
						}
					    case 29: // Liviana
					    {
					        x = ArmaEspaldaLiviana[skin][0];
					        y = ArmaEspaldaLiviana[skin][1];
					        z = ArmaEspaldaLiviana[skin][2];
					        rx = ArmaEspaldaLiviana[skin][3];
					        ry = ArmaEspaldaLiviana[skin][4];
					        rz = ArmaEspaldaLiviana[skin][5];
					        ex = 1.0;
					        ey = 1.0;
					        ez = 1.0;
					        return true;
					    }
					}
					return false;
				}
		        case INV_WALKIETALKIE:
		        {
		            if(WalkieTalkiePos[skin][0] == 0.0 && WalkieTalkiePos[skin][1] == 0.0 && WalkieTalkiePos[skin][2] == 0.0)
		            {
		                return false;
					}
			        x = WalkieTalkiePos[skin][0];
			        y = WalkieTalkiePos[skin][1];
			        z = WalkieTalkiePos[skin][2];
			        rx = WalkieTalkiePos[skin][3];
			        ry = WalkieTalkiePos[skin][4];
			        rz = WalkieTalkiePos[skin][5];
			        ex = 1.0;
			        ey = 1.0;
			        ez = 1.0;
			        return true;
		        }
		        case INV_CHALECO, INV_CHALECOPOLICIA:
		        {
			        x = ChalecoColgado[skin][0];
			        y = ChalecoColgado[skin][1];
			        z = ChalecoColgado[skin][2];
			        rx = ChalecoColgado[skin][3];
			        ry = ChalecoColgado[skin][4];
			        rz = ChalecoColgado[skin][5];
			        ex = ChalecoColgado[skin][6];
			        ey = ChalecoColgado[skin][7];
			        ez = ChalecoColgado[skin][8];
			        return true;
				}
				case INV_MOCHILA:
				{
				    x = MochilaColgada[skin][0];
				    y = MochilaColgada[skin][1];
				    z = MochilaColgada[skin][2];
				    rx = 0.0;
				    ry = 0.0;
				    rz = 0.0;
				    ex = 1.0;
				    ey = 1.0;
				    ez = 1.0;
				    return true;
				}
			}
		}
	}
	return false;
}

CALLBACK: CargarAttachedO(playerid)
{
	if(!GetPVarInt(playerid, "ObjectsLoaded"))
	{
		GiveObject(playerid, InfoJugador[playerid][jCurrentObj], InfoJugador[playerid][jCurrentObjD]);
		SetPVarInt(playerid, "ObjectsLoaded", true);

		if(InfoJugador[playerid][jObjetoColgado] > 0)
		{
	  		new
	            S = GetPlayerSkin(playerid),
	            objectid = InfoJugador[playerid][jObjetoColgado],
				Float:x, Float:y, Float:z,
				Float:rx, Float:ry, Float:rz,
				Float:ex, Float:ey, Float:ez;

			new
				suc = GetAttachedObjectOffSet(S, InfoJugador[playerid][jObjetoColgado], x, y, z, rx, ry, rz, ex, ey, ez);

			if (suc)
			{
				SetPlayerAttachedObject(playerid, SLOT_ESPALDA, ObjectData[objectid][invObjID], 1, x, y, z, rx, ry, rz, ex, ey, ez, ObjectData[objectid][invColor1], ObjectData[objectid][invColor2]);
			}
		}

		if(InfoJugador[playerid][jChalecoObj] > 0)
		{
			new
				S = GetPlayerSkin(playerid),
				Float:x, Float:y, Float:z,
				Float:rx, Float:ry, Float:rz,
				Float:ex, Float:ey, Float:ez;

			GetAttachedObjectOffSet(S, InfoJugador[playerid][jChalecoObj], x, y, z, rx, ry, rz, ex, ey, ez);
			SetPlayerAttachedObject(playerid, SLOT_CHALECO, ObjectData[InfoJugador[playerid][jChalecoObj]][invObjID], 1, x, y, z, rx, ry, rz, ex, ey, ez, ObjectData[InfoJugador[playerid][jChalecoObj]][invColor1], ObjectData[InfoJugador[playerid][jChalecoObj]][invColor2]);
		}


		if(InfoJugador[playerid][jEsposado])
		{
		    EsposarJugador(playerid);
		}
	}

	Loop(i, MAX_ACCESORIOS, 0)
	{
	    if(InfoJugador[playerid][jAttachModel][i])
		{
	        //Almacenar en jAccesorio
	        Loop(a, sizeof AttachmentObjects, 0)
	            if(AttachmentObjects[a][attachmodel] == InfoJugador[playerid][jAttachModel][i])
	                InfoJugador[playerid][jAccesorio][i] = a;

	    	if(InfoJugador[playerid][jAttachOcultado][i] == false)
	    	{
				SetPlayerAttachedObject(playerid,i,InfoJugador[playerid][jAttachModel][i],InfoJugador[playerid][jAttachBone][i],InfoJugador[playerid][jAttachPosx][i],InfoJugador[playerid][jAttachPosy][i],InfoJugador[playerid][jAttachPosz][i],InfoJugador[playerid][jAttachAngx][i],InfoJugador[playerid][jAttachAngy][i],InfoJugador[playerid][jAttachAngz][i],InfoJugador[playerid][jAttachEscx][i],InfoJugador[playerid][jAttachEscy][i],InfoJugador[playerid][jAttachEscz][i]);
			}
			else
			{
			    continue;
			}
		}
		else
		{
			SetPlayerAttachedObject(playerid,i,InfoJugador[playerid][jAttachModel][i],InfoJugador[playerid][jAttachBone][i],InfoJugador[playerid][jAttachPosx][i],InfoJugador[playerid][jAttachPosy][i],InfoJugador[playerid][jAttachPosz][i],InfoJugador[playerid][jAttachAngx][i],InfoJugador[playerid][jAttachAngy][i],InfoJugador[playerid][jAttachAngz][i],InfoJugador[playerid][jAttachEscx][i],InfoJugador[playerid][jAttachEscy][i],InfoJugador[playerid][jAttachEscz][i]);
		}
	}
	return 1;
}

// ALL MLCL CODE
stock CreateMLCL (playerid)
{
	// calls "OnMLCLCreated" and save mlcl data into dynamic memory
	opmysql_pquery( "INSERT INTO MLCL (item_0) VALUES (0)", "OnQueryFinish", "ii", playerid, query_type_crearmlcl);
}


stock LoadMLCLFromDatabase (MLCL_id, playerid)
{
	static
		querystr [48];

	format (querystr, sizeof (querystr), "SELECT * FROM MLCL WHERE MLCL_id = %d", MLCL_id);
	opmysql_pquery( querystr, "OnQueryFinish", "ii", playerid, query_type_cargarmlcl);
}

stock RegisterMLCLIntoMemory (MLCL_id, const item[], const data[])
{
	static
	    string [64],
		string2 [10];

	FormatMLCL (item, data, string);
	format (string2, sizeof (string2), "M%d", MLCL_id);

	SetGVarString (string2, string);
}

stock IsMLCLRegisteredInMemory (MLCL_id)
{
	static
	    string [64],
		string2 [10];

	format (string2, sizeof (string2), "M%d", MLCL_id);
	GetGVarString (string2, string);

	if (isnull (string))
	    return 0;

	return 1;
}

stock LoadMLCLFromMemory (MLCL_id, item[], data[])
{
	// Store on item and data values (by memory)
	static
		string2 [10];

	new
	    string [64];

	format (string2, sizeof (string2), "M%d", MLCL_id);
	GetGVarString (string2, string);

	if (isnull (string))
	    return 0;

	UnformatMLCL (item, data, string);
	return 1;
}

stock FormatMLCL (const item[], const data[], dest[], size = sizeof (dest))
{
	// store into "dest" mlcl format (i0|d0|i1|d1|..i3|d3)
	format (dest, size, "%d|%d|%d|%d|%d|%d|%d|%d", item[0], data[0], item[1], data[1], item[2], data[2], item[3], data[3]);
}

stock UnformatMLCL (item[], data[], const string[])
{
	// store into "item" and "data" mlcl values by string
	unformat (string, "p<|>dddddddd", item[0], data[0], item[1], data[1], item[2], data[2], item[3], data[3]);
}

stock UpdateMLCL (MLCL_id, const item[], const data[])
{
	// Update mlcl data to database.
	static
	    querystr [155];

	format (querystr, sizeof (querystr), "UPDATE MLCL SET item_0 = %d, data_0 = %d, item_1 = %d, data_1 = %d, item_2 = %d, data_2 = %d, item_3 = %d, data_3 = %d WHERE MLCL_id = %d", item[0], data[0], item[1], data[1], item[2], data[2], item[3], data[3], MLCL_id);
	opmysql_pquery( querystr, "OnQueryFinish", "ii", 0, query_type_unknown);
	
	// Update on memory
	RegisterMLCLIntoMemory (MLCL_id, item, data);
}

stock ShowMLCLForPlayer (playerid, MLCL_id, dialogid)
{
	new
	    item [MLCL_MAX_ITEMS],
	    data [MLCL_MAX_ITEMS];

	if (LoadMLCLFromMemory (MLCL_id, item, data)) // registered on memory
	{
		ShowMLCLDialog (playerid, item, data, dialogid);
	}
	else
	{
	    LoadMLCLFromDatabase (MLCL_id, playerid);
	}
}

stock InsertObjectIntoMLCL (playerid, MLCL_id, objectid, objectdata, slot = -1, const callback[])
{
	new
	    item [MLCL_MAX_ITEMS],
	    data [MLCL_MAX_ITEMS],
		r_type = MLCL_R_SUCCESS;

	if (LoadMLCLFromMemory (MLCL_id, item, data)) // registered on memory
	{
		if (slot == -1)
		{
		    for (new i; i < MLCL_MAX_ITEMS; i++)
		    {
		        if (!item[i])
		        {
		            slot = i+1;
		            break;
				}
			}
		}
	    slot --;
		if (0 <= slot < MLCL_MAX_ITEMS)
		{
		    if (item[slot])
		    {
		        r_type = MLCL_R_OCCUPIED;
			}
			else
			{
			    item [slot] = objectid;
			    data [slot] = objectdata;
			}
		    UpdateMLCL (MLCL_id, item, data);
		}
		else
		{
		    r_type = MLCL_R_NOLUGAR;
		}
		CallLocalFunction (callback, "iiii", playerid, objectid, objectdata, r_type);
	}
	else
	{
	    LoadMLCLFromDatabase (MLCL_id, playerid);
		SetPVarInt (playerid, "MLCL_objectid", objectid);
		SetPVarInt (playerid, "MLCL_objectdata", objectdata);
		SetPVarInt (playerid, "MLCL_slot", slot);
	}
	return 1;
}

stock ShowMLCLDialog (playerid, item[], data[], dialogid)
{
	new
		string [212],
		string2 [55];

	for (new i; i < MLCL_MAX_ITEMS; i++)
	{
	    if (item [i])
	    {
			format (string2, sizeof (string2), ""#CINVUSADO"(%d)	{FFFFFF}%s\n", i+1, GetObjectName(item[i], data[i]));
		}
		else
		{
			format (string2, sizeof (string2), ""#CINVVACIO"(%d)	{FFFFFF}Vacio\n", i+1);
		}
		strcat (string, string2);
	}

	Dialog(playerid, dialogid, DIALOG_STYLE_LIST, ""#CNARANJA"          OBJETOS", string, "Aceptar", "Cerrar");
}

CALLBACK: Registrar(playerid)
{
	SetPlayerColor(playerid, C_BLANCO);

	TextDrawHideForPlayer (playerid, Vendado);

	SetPVarInt(playerid,"Registrandose",1);

	LimpiarPantalla(playerid,10);
	SetPlayerInterior(playerid,5);

	InfoJugador[playerid][jSexo] = 1;
	InfoJugador[playerid][jEdad] = 18;
	InfoJugador[playerid][jPelea] = 1;
	InfoJugador[playerid][jEstilo] = 1;
	InfoJugador[playerid][jDinero] = 2000;
	InfoJugador[playerid][jDNI] = Rand(100000,900000);

	SetPlayerHealth(playerid,100);
	SetPlayerArmour(playerid,0);
	SetPlayerDrunkLevel(playerid, 0);

	SetPlayerPos(playerid, -1902.3170, 16.8255, 1061.1436);
	SetPlayerFacingAngle(playerid, 180.0);
	SetPlayerSkin(playerid, 60);

	SetPlayerCameraPos(playerid,-1901.000,14.000,1062.000);
	SetPlayerCameraLookAt(playerid,-1903.000,18.000,1061.000);

	CongelarEx(playerid);

	Sexo[playerid] = CreatePlayerTextDraw(playerid,470.000000, 150.000000, "~r~MASCULINO");

	PlayerTextDrawBackgroundColor(playerid,Sexo[playerid], 255);
	PlayerTextDrawFont(playerid,Sexo[playerid], 2);
	PlayerTextDrawLetterSize(playerid,Sexo[playerid], 0.400000, 2.799999);
	PlayerTextDrawColor(playerid,Sexo[playerid], -1);
	PlayerTextDrawSetOutline(playerid,Sexo[playerid], 1);
	PlayerTextDrawSetProportional(playerid,Sexo[playerid], 1);

	Edad[playerid] = CreatePlayerTextDraw(playerid,503.000000, 202.000000, "~r~18");

	PlayerTextDrawBackgroundColor(playerid,Edad[playerid], 255);
	PlayerTextDrawFont(playerid,Edad[playerid], 2);
	PlayerTextDrawLetterSize(playerid,Edad[playerid],0.400000, 2.799999);
	PlayerTextDrawColor(playerid,Edad[playerid], -1);
	PlayerTextDrawSetOutline(playerid,Edad[playerid], 1);
	PlayerTextDrawSetProportional(playerid,Edad[playerid], 1);

	Pelea[playerid] = CreatePlayerTextDraw(playerid,517.000000, 255.000000, "~r~boxeo");

	PlayerTextDrawBackgroundColor(playerid,Pelea[playerid], 255);
	PlayerTextDrawAlignment(playerid,Pelea[playerid], 2);
	PlayerTextDrawFont(playerid,Pelea[playerid], 2);
	PlayerTextDrawLetterSize(playerid,Pelea[playerid],  0.400000, 2.799999);
	PlayerTextDrawColor(playerid,Pelea[playerid], -1);
	PlayerTextDrawSetOutline(playerid,Pelea[playerid], 1);
	PlayerTextDrawSetProportional(playerid,Pelea[playerid], 1);

	Estilo[playerid] = CreatePlayerTextDraw(playerid,516.000000, 310.000000, "~r~normal");

	PlayerTextDrawBackgroundColor(playerid,Estilo[playerid], 255);
	PlayerTextDrawFont(playerid,Estilo[playerid], 2);
	PlayerTextDrawAlignment(playerid,Estilo[playerid], 2);
	PlayerTextDrawLetterSize(playerid,Estilo[playerid],  0.300000, 2.799998);
	PlayerTextDrawColor(playerid,Estilo[playerid], -1);
	PlayerTextDrawSetOutline(playerid,Estilo[playerid], 1);
	PlayerTextDrawSetProportional(playerid,Estilo[playerid], 1);

	//Mostrar Textos
	PlayerTextDrawShow(playerid,Sexo[playerid]);
	PlayerTextDrawShow(playerid,Edad[playerid]);
	PlayerTextDrawShow(playerid,Pelea[playerid]);
	PlayerTextDrawShow(playerid,Estilo[playerid]);

	TextDrawShowForPlayer(playerid,Registro[0]);
	TextDrawShowForPlayer(playerid,Registro[1]);
	TextDrawShowForPlayer(playerid,Registro[2]);
	TextDrawShowForPlayer(playerid,Registro[3]);
	TextDrawShowForPlayer(playerid,Registro[4]);
	TextDrawShowForPlayer(playerid,Registro[5]);

	TextDrawShowForPlayer(playerid,FlechaSexo[0]);
	TextDrawShowForPlayer(playerid,FlechaSexo[1]);

	TextDrawShowForPlayer(playerid,FlechaEdad[0]);
	TextDrawShowForPlayer(playerid,FlechaEdad[1]);

	TextDrawShowForPlayer(playerid,FlechaPelea[0]);
	TextDrawShowForPlayer(playerid,FlechaPelea[1]);

	TextDrawShowForPlayer(playerid,FlechaEstilo[0]);
	TextDrawShowForPlayer(playerid,FlechaEstilo[1]);

	SelectTextDraw(playerid, C_ROJO);

	return 1;
}

CALLBACK: MostrarDatos(playerid)
{
	new Datos[3][16];
	switch(InfoJugador[playerid][jSexo])
	{
	    case 1:  Datos[0] = "Masculino";
	    case 2:  Datos[0] = "Femenino";
		default: Datos[0] = "Otro";
	}
	switch(InfoJugador[playerid][jPelea])
	{
	    case 1:  Datos[1] = "Boxeo";
	    case 2:  Datos[1] = "KungFu";
	    case 3:  Datos[1] = "Kick Boxing";
		default: Datos[1] = "Otro";
	}
	switch(InfoJugador[playerid][jEstilo])
	{
	    case 1:  Datos[2] = "Normal";
	    case 2:  Datos[2] = "Pandillero";
	    case 3:  Datos[2] = "Pandillero 2";
	    case 4:  Datos[2] = "Anciano";
	    case 5:  Datos[2] = "Anciano gordo";
	    case 6:  Datos[2] = "Gordo";
	    case 7:  Datos[2] = "Mujer";
	    case 8:  Datos[2] = "Mujer 2";
	    case 9:  Datos[2] = "Sexi";
	    case 10: Datos[2] = "Sexi 2";
	    case 11: Datos[2] = "Hebrio";
	    case 12: Datos[2] = "Ciego";
		default: Datos[2] = "Otro";
	}

    new SDialog[256];

    format(SDialog,sizeof(SDialog),""#CBLANCO"Sexo: "#CINFO"%s\n"#CBLANCO"Edad: "#CINFO"%d\n"#CBLANCO"Fecha de nacimiento: "#CINFO"%d\n"#CBLANCO"Estilo de pelea: "#CINFO"%s\n"#CBLANCO"Estilo: "#CINFO"%s.\n\n¿Confirmar estos datos, e ingresar al tutorial?",Datos[0],InfoJugador[playerid][jEdad],(CheckEpoca()-InfoJugador[playerid][jEdad]),Datos[1],Datos[2] );
	Dialog(playerid,dDatos,DIALOG_STYLE_MSGBOX,""#CPOSITIVO"Datos de su personaje",SDialog,"Proceder","Volver");
	return 1;
}

CALLBACK: Float:GetDistanceFromPointToPoint (Float:x, Float:y, Float:z, Float:x1, Float:y1, Float:z1)
{
	return VectorSize (x-x1, y-y1, z-z1);
}

stock Auto_InterpolateCameraPos(playerid, Float:x, Float:y, Float:z, Float:tx, Float:ty, Float:tz)
{
	new
		Unused;

	Unused = int(GetDistanceFromPointToPoint(x, y, z, tx, ty, tz) * 10);

    return InterpolateCameraPos(playerid, x, y, z, tx, ty, tz, Unused, CAMERA_MOVE);
}

stock Auto_InterpolateCameraLookAtTut(playerid, Float:x, Float:y, Float:z, Float:tx, Float:ty, Float:tz)
{
	new
		Unused;

	Unused = int(GetDistanceFromPointToPoint(x, y, z, tx, ty, tz) * 10);

    return InterpolateCameraLookAt(playerid, x, y, z, tx, ty, tz, Unused, CAMERA_MOVE);
}


CALLBACK: ConceptosDeRol(playerid)
{
	MostrarTDTutorial(playerid);
  	switch(GetPVarInt(playerid,"ParteConceptos"))
  	{
		case 1:
		{
			PlayerTextDrawShow(playerid, TituloTuto[playerid]);
			PlayerTextDrawShow(playerid, InfoTuto[playerid][0]);
			PlayerTextDrawShow(playerid, InfoTuto[playerid][1]);
			PlayerTextDrawShow(playerid, InfoTuto[playerid][2]);
		    SetPlayerInterior(playerid,0);

			SetPlayerCameraPos(playerid,CamaraAeropuerto);
			SetPlayerCameraLookAt(playerid,CamaraAeropuertoAt);
			PlayerTextDrawSetString(playerid,TituloTuto[playerid],"Server RolePlay");
			PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"Este es un servidor RolePlay, pero.. ¿Qué es RolePlay?");
			PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"Se trata de que tu jugador represente un rol, y actue como en la realidad");
			PlayerTextDrawSetString(playerid,InfoTuto[playerid][2],"es decir, que debes actuar como lo haria esa persona que tu representas");
			Mensaje(playerid,-1,"Para pasar a la siguiente parte en el tutorial, solo presione "#CINFO"' Click izquierdo '");
		}
		case 2:
		{
			LimpiarPantalla(playerid,10);
	  		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"Server RolePlay");
	    	PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"Si eres un policía, mafioso, pandillero, o lo que quieras. Claro que no es nada fácil.");
	    	PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"Existen muchas reglas en este modo de juego, reglas que son utilizadas para que se pueda");
	    	PlayerTextDrawSetString(playerid,InfoTuto[playerid][2],"jugar sin problemas, y reglas que detienen el abuso de las habilidades del personaje.");
		}
		case 3:
		{
			LimpiarPantalla(playerid,10);
	 		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"Conceptos de rol");
	 		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"A estas reglas, las llamaremos ''conceptos de rol''. Si tu te niegas a cumplir aquellas reglas");
	 		PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"impuestas para este modo de juego, el Staff (Administradores y moderadores) o hasta el servidor mismo");
	 		PlayerTextDrawSetString(playerid,InfoTuto[playerid][2],"te castigará, ya sea enviandote a la carcel, o expulsandote del servidor.");
		}
		case 4:
		{
			LimpiarPantalla(playerid,10);
	 		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"Conceptos de rol");
	 		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"Te explicaremos en profundidad cada uno de estos conceptos del RolePlay");
	 		PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"Existan comandos, utilizados para preguntarle a nuestro equipo sobre cualquier duda que tengas.");
	 		PlayerTextDrawSetString(playerid,InfoTuto[playerid][2],"El principal, es (/duda [Tu duda y/o problema])");
		}
		case 5:
		{
			LimpiarPantalla(playerid,10);
	  		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"DeathMatch (DM)");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"El concepto denominado \"DeathMatch\" es todo aquel que haga una \"muerte por diversion\" o tambien");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"\"sin rol\". Mas especificamente hablando.El DeathMatch (DM) es una regla basica del genero RolePlay");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][2],"la cual consiste en ya seas tu u otro jugador, herir o matara alguien sin rolear la razón del hecho.");
		}
		case 6:
		{
			LimpiarPantalla(playerid,10);
	  		PlayerTextDrawSetString(playerid,TituloTuto[playerid]," ");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"Cada vez que hagas una accion en el juego, de cualquier tipo, piensa:");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"- ¿Esto, es lo que haria en la vida real si yo fuera este, y estaria en esta situación?");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][2],"¿En este caso, cómo actuaria en la realidad? ~g~Esta es la forma mas eficiente de aprender a ~p~ROLEAR!");
		}
		case 7:
		{
			LimpiarPantalla(playerid,10);
	  		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"A continuacion un ejemplo de ~r~DM");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"Hay un hombre hablando por telefono. Tu, tienes ganas de golpear cualquiera que veas, vas y");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"le pegas. en la realidad, no harias eso, golpear una persona cuesta mas que tocar click muchas veces");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][2],"Ademas no tienes razon alguna para golpea este pobre hombre. ¡Eso no lo haces en la vida real!");
		}
		case 8:
		{
			LimpiarPantalla(playerid,10);
	  		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"~r~Incorrecto");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"Si hace esto, el Staff tomara medidas dependiendo de la gravedad");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"del caso.");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][2]," ");
		}
		case 9:
		{
			LimpiarPantalla(playerid,10);
	  		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"Eres un pandillero, vas con cuatro amigos tuyos, cuando vez un policía sin armas");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"que anteriormente te detubo.");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][2]," ");
		}
		case 10:
		{
			LimpiarPantalla(playerid,10);
	  		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"~g~Correcto");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"El rol lo justifica, en la realidad eso sucederia");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][1]," ");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][2]," ");
		}
		case 11:
		{
			LimpiarPantalla(playerid,10);
	  		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"PowerGaming (PG)");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"El concepto denominado PowerGaming hace referencia a \"Jugador Superpoderoso\"");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"Este, es cuando haces algo, que en la realidad no harias, o cosas que son imposibles");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][2],"de hacer, más allá que el GTA:SA te lo permita.");
		}
		case 12:
		{
			LimpiarPantalla(playerid,10);
	  		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"Ejemplo de pg");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"Vas a la comisaria, donde hay muchos agentes caminando por la oficina.");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"Hay un tipo con un celular. vas, sacas un arma y le gritas: ~r~¡DAME EL CELULAR!");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][2],"Todos los policias te rodean con arma y tu, sales corriendo como si nada.");
		}
		case 13:
		{
			LimpiarPantalla(playerid,10);
	  		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"~r~Incorrecto");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"¡En la realidad, no haces eso! Si robas, te aseguras que no haya policias.");
		 	PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"y, en caso que un policia te apunte con un arma, lo primero que haces es");
		 	PlayerTextDrawSetString(playerid,InfoTuto[playerid][2],"¡rendirse y con las manos en alto! (Usar /rendirse)");
		}
		case 14:
		{
			LimpiarPantalla(playerid,10);
	  		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"~g~correcto:");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"Primero que nada, nunca robarias en ese caso, pero si tu personaje");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"teiene problemas psicologicos, el rol justifica dicha acción.");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][2]," ");
		}
		case 15:
		{
			LimpiarPantalla(playerid,10);
	  		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"~g~Correcto");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"En caso que te apunten, levantas las manos y pides disculpas");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][1]," ");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][2]," ");
		}
		case 16:
		{
			LimpiarPantalla(playerid,10);
	  		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"In character (IC)");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"IC, es todo lo que tu personaje aprende dentro del juego, es decir roleando");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"Por ejemplo, algo IC seria, aunque sepas el nombre de la persona porque lo ves arriba");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][2],"de su cabeza, le preguntas al sujeto: ~g~Disculpa, ¿Cómo te llamas?");
		}
		case 17:
		{
			LimpiarPantalla(playerid,10);
	  		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"Out of character (OOC)");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"OOC, es todo lo que tu sabes, y tu personaje aún no lo conoce, por ejemplo");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"Un amigo te dice por Skype que el está en la comisaria, pero tu personaje no sabe");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][2],"que el está en la comisaria. Eso, es información OOC");
		}
		case 18:
		{
			LimpiarPantalla(playerid,10);
	  		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"MetaGaming (MG)");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"MeteGaming, es utilizar información OOC en IC, para propio beneficio");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"Por ejemplo, pasas a buscar a aquel amigo que te dijo por Skype que estaba");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][2],"en la comisaria, sin enterarte IC de la situación.");
		}
		case 19:
		{
			LimpiarPantalla(playerid,10);
	  		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"~r~Incorrecto");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"Te has informado de su posición por un medio OOC, ¡tu personaje no sabe eso!");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"");
	    	PlayerTextDrawSetString(playerid,InfoTuto[playerid][2],"");
		}
		case 20:
		{
			LimpiarPantalla(playerid,10);
	  		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"BunnyHop (BH)");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"Es cuando tu jugador se cansa de correr, y vas presionando ~p~CTRL");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"y saltas, saltas, porque llegas mas rapido. En la realidad, te cansarias el doble");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][2],"Si vas saltando, asique no se debe hacer.");
		}
		case 21:
		{
			LimpiarPantalla(playerid,10);
	  		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"RevengeKill (RK)");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"Es cuando te matan roleando, sin DM por supuesto, y tu por venganza vas y te vengas.");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"Esto esta mal, ya que cuando mueres supuestamente pierdes la memoria");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][2]," ");
		}
		case 22:
		{
			LimpiarPantalla(playerid,10);
	  		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"TeamKill (TK)");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"Es cuando matas a un miembro de tu trabajo o faccion, esto");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"es AntiRol, ya que en la realidad no matas miembros de tu equipo.");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][2]," ");
		}
		case 23:
		{
			LimpiarPantalla(playerid,10);
	  		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"ZigZag (ZZ)");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"Es cuando alguien te dispara para matarte y/o herirte, y tu");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"te mueves para todos lados para que no te pege.Esto, tambien es muy AntiRol");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][2],"ya que es imposible esquivar las balas.");
		}
		case 24:
		{
			LimpiarPantalla(playerid,10);
	  		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"CarJacked (CJ)");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"Se denomina CJ a cuando alguien roba un auto sin rol,simplemente tocando ~p~INTRO");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"A menos que estes escapando de la policia, o alguna emergencia esto esta mal!");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][2],"");
		}
		case 25:
		{
			LimpiarPantalla(playerid,10);
	  		PlayerTextDrawSetString(playerid,TituloTuto[playerid],"Fin del tutorial");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][0],"Ojala que haya prestado mucha atencion, ahora es momento");
			PlayerTextDrawSetString(playerid,InfoTuto[playerid][1],"de demostrar lo aprendido, a continuacion el ~b~test de rol.");
	  		PlayerTextDrawSetString(playerid,InfoTuto[playerid][2]," ");
		}
		case 26:
		{
		    CamaraAleatoria(playerid);

			LimpiarPantalla(playerid,10);
			TextDrawHideForPlayer(playerid, BOXTuto[0]);
			TextDrawHideForPlayer(playerid, BOXTuto[1]);
			PlayerTextDrawHide(playerid, TituloTuto[playerid]);
			PlayerTextDrawHide(playerid, InfoTuto[playerid][0]);
			PlayerTextDrawHide(playerid, InfoTuto[playerid][1]);
			PlayerTextDrawHide(playerid, InfoTuto[playerid][2]);
			CongelarEx(playerid);
			SetPVarInt(playerid,"ParteConceptos",0);
			SetPVarInt(playerid,"ParteTest",1);
			Dialog(playerid,dTest,DIALOG_STYLE_LIST,""#CAMARILLO"¿Qué es ROLEAR? "#CINFO"(1/5)",""#CINFO"1) "#CBLANCO"Rolear, es utilizar la información OOC en el juego\n"#CINFO"2) "#CBLANCO"Rolear, es actuar lo máximo posible como en la vida real\n"#CINFO"3) "#CBLANCO"Rolear, es hacerte responsable al prestar la cuenta.\n","Aceptar","Tutorial");
			return 1;
		}
  	}
	SetPVarInt(playerid,"ParteConceptos", GetPVarInt(playerid,"ParteConceptos")+1 );
  	return 1;
}

stock GetCelNumber(playerid)
{
	if(GetObject(playerid) == GOAT(INV_CEL))
	{
		return GetObjectData(playerid);
	}
	return 0;
}

// ---====] Resetear variables [====---- //

stock ResetearVariables(playerid)
{
	Loop(i, MAX_VEHICLES, 0)
	{
	    Bit_Set(Llave_veh[playerid], i, false);
	}

    Loop(i, sizeof(TrabajosPorHora[]), 0)
    {
		TrabajosPorHora[playerid][i] = 0;
	}

	Loop(i, MAX_TIMERS, 0)
	{
		KillTimer2(playerid,i);
	}

	Loop(i, MAX_PCP, 0)
	{
 		DestroyPCP(playerid, i);
	}

	for (new e_PLAYER_TEMP_VARS: i; i < e_PLAYER_TEMP_VARS; i++)
	{
	    PlayerTempData [playerid][i] = 0;
	}
	
	Loop(i, MAX_OBJETOS_INTERIOR, 0)
	{
	    IntObject[playerid][i] = INVALID_OBJECT_ID;
	}
	if(RangoADM[playerid] != Text3D:INVALID_3DTEXT_ID)
	{
		Delete3DTextLabel(RangoADM[playerid]);
		RangoADM[playerid] = Text3D:INVALID_3DTEXT_ID;
	}

	if(Enmascarado[playerid] != Text3D:INVALID_3DTEXT_ID)
	{
		Delete3DTextLabel(Enmascarado[playerid]);
		Enmascarado[playerid] = Text3D:INVALID_3DTEXT_ID;
	}

	if(_:TituloTuto[playerid] != INVALID_TEXT_DRAW)
	    TituloTuto[playerid] = PlayerText:INVALID_TEXT_DRAW;

	if(NumberPanel[playerid][0] != PlayerText:0)
	{
	    for(new a; a < MAX_KEY_NUMBERS; a++)
		{
		    NumberPanel[playerid][a] = PlayerText:0;
		}
	}

	for(new i; i < MAX_SMS_TEXT; i++)
	{
	    TDSMS [playerid][i] = PlayerText:INVALID_TEXT_DRAW;
	    TDSMS2[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
		SMSTime[playerid][i] = 0;
	}

    TrailerAttached[playerid] = 0;
	UsandoHackPad[playerid] = 0;
	OBJ_Bomba[playerid] = INVALID_OBJECT_ID;
	Specteando_ID[playerid] = INVALID_PLAYER_ID;
	PicandoMineral[playerid] = 0;
	KillerID[playerid] = INVALID_PLAYER_ID;
	Freezed[playerid] = 0;
	HospitalData[playerid] = -1;
	PlayerBools [playerid] = 0;
	
	Loop(i, MAX_MUEBLES_CASA, 0)
	{
		OBJ_Mueble[playerid][i] = INVALID_OBJECT_ID;
	}
	CasaActual[playerid] = INVALID_HOUSE_ID;
	TextoCarcel[playerid] = PlayerText3D:INVALID_3DTEXT_ID;
	JugadorArrastrado[playerid] = INVALID_PLAYER_ID;
	Mecanico_ClientID[playerid] = INVALID_PLAYER_ID;
	PintandoGraffiti[playerid] = 0;
	LoginTime[playerid] = 0;
	TiempoNecesidades[playerid] = 0;

	BHambre[playerid] = INVALID_PLAYER_BAR_ID;
	BOrina[playerid] = INVALID_PLAYER_BAR_ID;
	BCansancio[playerid] = INVALID_PLAYER_BAR_ID;
	BVelocimetro[playerid] = INVALID_PLAYER_BAR_ID;
	BGasolimetro[playerid] = INVALID_PLAYER_BAR_ID;

	TDHambre[playerid][0] = PlayerText:INVALID_TEXT_DRAW;
	TDHambre[playerid][1] = PlayerText:INVALID_TEXT_DRAW;
	TDVejiga[playerid][0] = PlayerText:INVALID_TEXT_DRAW;
	TDVejiga[playerid][1] = PlayerText:INVALID_TEXT_DRAW;
	TDEstado[playerid][0] = PlayerText:INVALID_TEXT_DRAW;
	TDEstado[playerid][1] = PlayerText:INVALID_TEXT_DRAW;

	TDSpecialBarText[playerid] = PlayerText:INVALID_TEXT_DRAW;
	TDSpecialBarTittle[playerid] = PlayerText:INVALID_TEXT_DRAW;

	MsgText[playerid] = PlayerText:INVALID_TEXT_DRAW;
	TDMano[playerid] = PlayerText:INVALID_TEXT_DRAW;

	TDOrina[playerid] = PlayerText:INVALID_TEXT_DRAW;
	TDSueno[playerid] = PlayerText:INVALID_TEXT_DRAW;

	//OP:PC
	PC.State[playerid] = PC_STATE_NONE;

	PCNEG_P_Nombre[playerid] = PlayerText:INVALID_TEXT_DRAW;
	PCNEG_P_Stock[playerid] = PlayerText:INVALID_TEXT_DRAW;

	PCNEG_G_Total[playerid] = PlayerText:INVALID_TEXT_DRAW;

	PCNEG_PS_Costo[playerid] = PlayerText:INVALID_TEXT_DRAW;
	PCNEG_PS_Nombre[playerid] = PlayerText:INVALID_TEXT_DRAW;
	PCNEG_PS_Precio[playerid] = PlayerText:INVALID_TEXT_DRAW;
	PCNEG_PS_Cantidad[playerid] = PlayerText:INVALID_TEXT_DRAW;

	//Taximetro
	TaxiTime[playerid] = 0;
	Taxi_DriverID[playerid] = INVALID_PLAYER_ID;
	TDTaximetro[playerid] = PlayerText: INVALID_TEXT_DRAW;

	//OP:CEL
	CEL.State[playerid] = CEL_STATE_NONE;
	strclr(CEL.Text[playerid]);

	CEL.MarcarTexto[playerid] = PlayerText:INVALID_TEXT_DRAW;

	for (new i; i < CEL_MAX_SMS; i++)
	{
	    CEL.SMSContacto[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
	    CEL.SMSTexto[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
	}

	for (new i; i < CEL_MAX_CONTACT; i++)
	{
	    CEL.ContactoNombre[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
	}

	for (new i; i < MAX_SERVICIOS; i++)
	{
	    RequestedService[playerid][i] = 0;
	}

	BloquedCommand[playerid] = 0;
	BloquedText[playerid] = 0;

	Papeado[playerid] = 0;

	PasoTruth[playerid] = 0;

	Cargadores[playerid] = 0;
	ArmaActual[playerid] = 0;
	INV_Ammo[playerid] = 0;
	TDCargador[playerid] = PlayerText:INVALID_TEXT_DRAW;
	CurrentObject[playerid] = -1;

	Cracked[playerid] = 0;

	Loop(i, MAX_ITEMS_INVENTARIO, 0)
	{
		ItemInventario[playerid][i][invObject] = 0;
		ItemInventario[playerid][i][invData] = 0;
	}
	return 1;
}

stock ReturnPlayerToPassengerSeat (playerid, bool: samp_fix = false)
{
	SetPlayerArmedWeapon (playerid, 0);
	ApplyAnimation (playerid, "PED", "CAR_GETIN_RHS", 4.1, 0, 0, 0, 0, 1, 1);
	if (samp_fix)
	{
		SetTimerEx ("ReturnWeaponDB", 500, 0, "i", playerid);
	}
}

CALLBACK: ReturnWeaponDB (playerid)
{
	SetPlayerArmedWeapon (playerid, ArmaActual [playerid]);
	return 1;
}

stock ResetCustomWeather(playerid)
{
	SetPlayerWeather(playerid, ServerWeather);
	PlayerWeather[playerid] = -1;
	return 1;
}

stock SetCustomWeather(playerid, weatherid)
{
	SetPlayerWeather(playerid, weatherid);
	PlayerWeather[playerid] = weatherid;
	return 1;
}

stock SetCustomTime(playerid, time)
{
	SetPlayerTime(playerid, time, 0);
	PlayerTime[playerid] = time;
	return 1;
}

stock ResetCustomTime(playerid)
{
	new
	    hourss,
		minss;

	gettime(hourss, minss);

	SetPlayerTime(playerid, hourss, minss);
	PlayerTime[playerid] = -1;
	return 1;
}

stock ResetearVariablesEx(playerid)
{
	Loop(i, sizeof(InfoJugador[]), 0)
	{
	    InfoJugador[playerid][InfoJ:i] = 0;
	}

	Loop(i, sizeof(InfoJugadorTemp[]), 0)
	{
	    InfoJugadorTemp[playerid][InfoJ:i] = 0;
	}

	InfoJugador[playerid][jObjetoColgado] = -1;
	InfoJugador[playerid][jObjetoColgadoData] = 0;
	
	return 1;
}

CALLBACK: CaminarPelear(playerid)
{
	switch(InfoJugador[playerid][jPelea])
	{
		case 1:   SetPlayerFightingStyle(playerid,FIGHT_STYLE_NORMAL);
		case 2:   SetPlayerFightingStyle(playerid,FIGHT_STYLE_KUNGFU);
		case 3:   SetPlayerFightingStyle(playerid,FIGHT_STYLE_KNEEHEAD);
	}

	switch(InfoJugador[playerid][jEstilo])
	{
		case 1:  SetPlayerWalkingStyle(playerid,WALK_NORMAL);
		case 2:  SetPlayerWalkingStyle(playerid,WALK_GANGSTA);
		case 3:  SetPlayerWalkingStyle(playerid,WALK_GANGSTA2);
		case 4:  SetPlayerWalkingStyle(playerid,WALK_OLD);
		case 5:  SetPlayerWalkingStyle(playerid,WALK_FAT_OLD);
		case 6:  SetPlayerWalkingStyle(playerid,WALK_FAT);
		case 7:  SetPlayerWalkingStyle(playerid,WALK_LADY);
		case 8:  SetPlayerWalkingStyle(playerid,WALK_LADY2);
		case 9:  SetPlayerWalkingStyle(playerid,WALK_WHORE);
		case 10: SetPlayerWalkingStyle(playerid,WALK_WHORE2);
		case 11: SetPlayerWalkingStyle(playerid,WALK_DRUNK);
		case 12: SetPlayerWalkingStyle(playerid,WALK_BLIND);
	}

	return 1;
}

CALLBACK: RealSpawn(playerid)
{
	SetPVarInt(playerid,"_SPAWNEO",1);
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	if(newstate == PLAYER_STATE_PASSENGER)
	{
	    if(GetPVarInt(playerid, "TAZEADO"))
	    {
	        RemovePlayerFromVehicle(playerid);
  			ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 0, 0, 0, 1, 0);
			return 1;
		}

	    SpecSync(playerid, 1);

	    new
			VehID = GetPlayerVehicleID(playerid);

		switch(GetVehType(VehID))
		{
		    case VEHICLE_TYPE_CAR:
		    {
			    if(veh_getJob(VehID) == ID_Taxista)
			    {
		            new
		                driverid = INVALID_PLAYER_ID;

					foreach(Player, i)
					{
					    if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
					    {
					        if(GetPlayerVehicleID(i) == VehID)
					        {
					            driverid = i;
					            break;
							}
						}
						if(GetPlayerState(i) == PLAYER_STATE_PASSENGER)
						{
						    if(GetPlayerVehicleID(i) == VehID && i != playerid)
						    {
						        //Taxi occupied
						        RemovePlayerFromVehicle (playerid);
								Mensaje (playerid, -1, "Solo puede ir un pasajero en el taxi.");
								return 1;
						    }
						}
					}
					if(driverid == INVALID_PLAYER_ID)
					{
					    RemovePlayerFromVehicle(playerid);
						return Error(playerid, "Este taxi no tiene un conductor.");
					}
					Mensaje(driverid, -1, "Un cliente ingresó al taxi, el taximetro ya empezó a contar.");
					Mensaje(playerid, -1, "El taximetro ya empezó a contar, indicale al taxista dónde quieres ir.");
					TaxiTime[playerid] = TAXI_TOADD;
					Taxi_DriverID[playerid] = driverid;

					if (RequestedService[playerid][SERVICIO_TAXI])
					{
						new
							xCol = GetPlayerColor (playerid);

						foreach (Player, i)
						{
						    if (InfoJugador [i][jTrabajo] == ID_Taxista)
						    {
						        SetPlayerMarkerForPlayer (i, playerid, xCol);
							}
						}
						RequestedService[playerid][SERVICIO_TAXI] = 0;
					}

					TextDrawShowForPlayer (driverid, TDTaximetroBOX);
					TextDrawShowForPlayer (driverid, TDTaximetroTXT);

					TextDrawShowForPlayer (playerid, TDTaximetroBOX);
					TextDrawShowForPlayer (playerid, TDTaximetroTXT);

					if (TDTaximetro[playerid] == PlayerText: INVALID_TEXT_DRAW)
					{
						TDTaximetro[playerid] = CreatePlayerTextDraw(playerid, 530.862182, 119.505630, "$0");
						PlayerTextDrawLetterSize(playerid, TDTaximetro[playerid], 0.450742, 0.994261);
						PlayerTextDrawTextSize(playerid, TDTaximetro[playerid], 619.187500, -91.851478);
						PlayerTextDrawAlignment(playerid, TDTaximetro[playerid], 1);
						PlayerTextDrawColor(playerid, TDTaximetro[playerid], 16711935);
						PlayerTextDrawUseBox(playerid, TDTaximetro[playerid], true);
						PlayerTextDrawBoxColor(playerid, TDTaximetro[playerid], 336860310);
						PlayerTextDrawSetShadow(playerid, TDTaximetro[playerid], 0);
						PlayerTextDrawSetOutline(playerid, TDTaximetro[playerid], 0);
						PlayerTextDrawBackgroundColor(playerid, TDTaximetro[playerid], 255);
						PlayerTextDrawFont(playerid, TDTaximetro[playerid], 1);
						PlayerTextDrawSetProportional(playerid, TDTaximetro[playerid], 1);
						PlayerTextDrawShow(playerid, TDTaximetro[playerid]);
					}
					if (TDTaximetro[driverid] == PlayerText: INVALID_TEXT_DRAW)
					{
						TDTaximetro[driverid] = CreatePlayerTextDraw(driverid, 530.862182, 119.505630, "$0");
						PlayerTextDrawLetterSize(driverid, TDTaximetro[driverid], 0.450742, 0.994261);
						PlayerTextDrawTextSize(driverid, TDTaximetro[driverid], 619.187500, -91.851478);
						PlayerTextDrawAlignment(driverid, TDTaximetro[driverid], 1);
						PlayerTextDrawColor(driverid, TDTaximetro[driverid], 16711935);
						PlayerTextDrawUseBox(driverid, TDTaximetro[driverid], true);
						PlayerTextDrawBoxColor(driverid, TDTaximetro[driverid], 336860310);
						PlayerTextDrawSetShadow(driverid, TDTaximetro[driverid], 0);
						PlayerTextDrawSetOutline(driverid, TDTaximetro[driverid], 0);
						PlayerTextDrawBackgroundColor(driverid, TDTaximetro[driverid], 255);
						PlayerTextDrawFont(driverid, TDTaximetro[driverid], 1);
						PlayerTextDrawSetProportional(driverid, TDTaximetro[driverid], 1);
						PlayerTextDrawShow(driverid, TDTaximetro[driverid]);
					}
				}
				switch(Veh[VehID][vRadio])
				{
				    case RADIO_LSTV:
						PlayAudioStreamForPlayer(playerid, RadioLSTV);

					case RADIO_REGGAE:
				        PlayAudioStreamForPlayer(playerid, URL_REGGAE);

					case RADIO_RAP:
				        PlayAudioStreamForPlayer(playerid, URL_RAP);

				}
			}
		}
	}
	else if(newstate == PLAYER_STATE_DRIVER)
	{
		if(GetPlayerWeapon(playerid))
			SetPlayerArmedWeapon(playerid, 0);

	    if(GetPVarInt(playerid, "TAZEADO"))
	    {
	        RemovePlayerFromVehicle(playerid);
  			ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 0, 0, 0, 1, 0);
			return 1;
		}

	    SpecSync(playerid, 1);
	    new
			VehID = GetPlayerVehicleID(playerid);

		new
		    TrailerID = GetVehicleTrailer(VehID);

		if(TrailerID)
		{
		    TrailerAttached[playerid] = TrailerID;
		}

		switch(GetVehType(VehID))
		{
			case VEHICLE_TYPE_BICYCLE:
			{
			    veh_setEngine(VehID, true);
			}
		    case VEHICLE_TYPE_CAR:
		    {
		        if (GetVehicleModel (VehID) == 420) // Taxi
		        {
		            if (InfoJugador[playerid][jTrabajo] == ID_Taxista)
		            {
		                new
		                    count;

		                foreach (Player, i)
		                {
		                    if (RequestedService[i][SERVICIO_TAXI])
		                    {
		                        SetPlayerMarkerForPlayer (playerid, i, COLOR_SERVICIO_TAXI);
		                        count ++;
							}
						}

						if (count)
							MensajeF (playerid, -1, "Se marcaron en el mapa "#CAMARILLO"%d clientes "#CBLANCO"que necesitan un taxi.", count);

						else
						    Mensaje (playerid, -1, "Actualmente no hay clientes que necesitan un taxi.");
					}
				}
				switch(Veh[VehID][vRadio])
				{
				    case RADIO_LSTV:
						PlayAudioStreamForPlayer(playerid, RadioLSTV);

					case RADIO_REGGAE:
				        PlayAudioStreamForPlayer(playerid, URL_REGGAE);

					case RADIO_RAP:
				        PlayAudioStreamForPlayer(playerid, URL_RAP);

				}

	 			if(!InfoJugador[playerid][jLicenciaAuto])
					Mensaje(playerid,-1,"¡No tienes licencia para conducir un vehículo! Saca una en el centro de licencias");
			}
			case VEHICLE_TYPE_BIKE:
			{
			    if(!InfoJugador[playerid][jLicenciaMoto])
					Mensaje(playerid,-1,"¡No tienes licencia para conducir una moto! Saca una en el centro de licencias");
			}
		}
		if(!veh_getEngine(VehID))
		{
  			Error(playerid, "Presione ~b~~k~~VEHICLE_FIREWEAPON~ ~w~para encender el ~g~motor.");
		}
		if(PasoTruth[playerid] == 2 && Truth_VehID == VehID)
		{
			SetPlayerRaceCheckpoint(playerid, 0, PosCosechadorMari[0][0], PosCosechadorMari[0][1], PosCosechadorMari[0][2],  PosCosechadorMari[1][0], PosCosechadorMari[1][1], PosCosechadorMari[1][2], 5.0);
			Error(playerid, "Sigue los ~r~Checkpoints ~w~para cosechar.");
			PasoTruth[playerid] = 3;
			veh_setEngine(VehID, true);
			return 1;
		}
		if(veh_getJob(VehID) == ID_Camionero)
		{
		    new
		        Model = GetVehicleModel(VehID);

			if(strlen(InfoCamion[VehID][camChofer]) > 3)
			{
			    if(Model != 515)
			    {
					MensajeF(playerid,-1,""#CINFO"[CAMIÓN DE CARGA] "#CBLANCO"Chofer: "#CINFO"%s "#CBLANCO"| Carga: "#CINFO"%s",InfoCamion[VehID][camChofer],NombreCarga(InfoCamion[VehID][camCarga]));

					if(GetPVarInt(playerid,"Chofer_Camion") == VehID)
					{
						CheckpointEntrega(playerid);
					}
					else
					{
					    Error(playerid,"¡No eres el chofer de este camión!");
						RemovePlayerFromVehicle(playerid);
					}
				}
				else
				{
					MensajeF(playerid,-1,""#CINFO"[CAMIÓN DE CARGA] "#CBLANCO"Chofer: "#CINFO"%s "#CBLANCO"| Carga: "#CINFO"%s",InfoCamion[VehID][camChofer],NombreCarga(InfoCamion[VehID][camCarga]));

					if(GetPVarInt(playerid,"Chofer_Camion") != VehID)
					{
					    Error(playerid,"¡No eres el chofer de este camión!");
						RemovePlayerFromVehicle(playerid);
						return 1;
					}
				}
				return 1;
			}
			else
			{
			    if(Model != 515)
			    {
			        if(GetPVarInt(playerid, "Chofer_Camion"))
			        {
			            Error(playerid, "Ya estás usando un camión.");
			            RemovePlayerFromVehicle(playerid);
			            return 1;
					}

				    Mensaje(playerid,-1,""#CINFO"[CAMIÓN DE CARGA] "#CBLANCO"Chofer: "#CINFO"Nadie "#CBLANCO"| Carga: "#CINFO"Nada");
				    Mensaje(playerid,-1,"Si quiere transportar productos en este camión, dirijase al "#CROJO"punto rojo en el mapa.");
					SetPlayerCP(playerid,CP_CAMIONERO,2640.8167,-2139.0896,13.5469,8);
					SetPVarInt(playerid,"PasoEntrega",0);
				}
				else
				{
					if(InfoJugador[playerid][jTrabajo] != ID_Camionero || InfoJugador[playerid][jNivelTrabajo] < 2)
					{
					    RemovePlayerFromVehicle(playerid);
					    return Error(playerid, "¡No eres nivel dos de camionero!");
					}
				    Mensaje(playerid,-1,""#CINFO"[CAMIÓN DE CARGA] "#CBLANCO"Chofer: "#CINFO"Nadie "#CBLANCO"| Carga: "#CINFO"Nada");
					Error(playerid,"Dirigete a una ~y~fabrica ~w~para buscar la carga.");
					SetPlayerMapIcon(playerid, MI_FABRICA_COMIDA, -1018.6302, -647.0596, 36.2578, 0, C_AMARILLO, MAPICON_GLOBAL);
					SetPlayerMapIcon(playerid, MI_FABRICA_GRANO, 2518.8049, 2772.9048, 12.6953, 0, C_AMARILLO, MAPICON_GLOBAL);
					SetPlayerMapIcon(playerid, MI_FABRICA_TIERRA, 274.8940 ,1410.4055, 12.1626, 0, C_AMARILLO, MAPICON_GLOBAL);
					SetPVarInt(playerid,"PasoEntrega",2);
					SetPVarInt(playerid,"NivelCamionero", 2);
				}
				return 1;
			}
		}
	    if(EsVehRenta(VehID))
	    {
	    	if(VehRentado[VehID] == 0)
	    	{
				if(InfoJugador[playerid][jHoras] > 30)
				{
					Mensaje (playerid, -1, "Para poder rentar un vehículo, deberás tener "#CAMARILLO"menos de 30 horas "#CBLANCO"jugadas en el servidor.");
					return 1;
				}

	    	    new
					RS[300];

	    	    format(RS,sizeof(RS),""#CBLANCO"Puedes rentar este "#CPOSITIVO"Vehículo:\n"#CBLANCO"________________________________\n\n  "#CAZULCLARO"•"#CBLANCO"Precio: "#CAZULCLARO"$"#PRECIO_VEHRENTA"\n  •"#CBLANCO"Modelo: "#CPOSITIVO""#CAZULCLARO"%s\n"#CBLANCO"________________________________",veh_getNameAsString(VehID));
	        	ShowPlayerDialog(playerid,dVehRenta,DIALOG_STYLE_MSGBOX,""#CBLANCO"Vehiculo para "#CPOSITIVO"rentar",RS,"Rentar","Salir");
			}
			else if(VehRentado[VehID] == 1 && GetPVarInt(playerid,"RentoVehID") != VehID)
			{
				RemovePlayerFromVehicle(playerid);
				Error(playerid,"¡Ya alguien ha rentado este vehículo!");
				return 1;
			}
			else if(VehRentado[VehID] == 1 && GetPVarInt(playerid,"RentoVehID") == VehID){}
		}

		// Vehiculos de venta
		if(veh_isOwnVeh(VehID))
		{
			MensajeF(playerid,-1, "Este vehículo, pertenece a "#CAZULRARO"%s", veh_getOwnerAsString(VehID));

			if(VehEmbargado(VehID))
			    Mensaje(playerid, -1, "Este vehículo está "#CROJO"embargado.");

			if(TieneLlaveVeh(playerid,VehID) == 2) //Dueño
			{
   				new
       				Multas,
					Path[45];

				Loop(i, MAX_MULTAS_VEH, 0)
				{
					A_Format(Path, "Facciones/LSPD/Multas/%s_%d.ini", veh_getPlateAsString(VehID), i);
					if(fexist(Path))
					{
						Multas++;
					}
				}
				if(Multas)
				{
				    if(Multas == 1)
				    {
						Mensaje(playerid, -1, "Este vehículo tiene "#CROJO"1 "#CBLANCO" multa. Para pagarla(s), valla a la "#CVERDE"Central nº 2 "#CBLANCO" de la policía (Al lado del hospital).");
					}
					else
					{
						MensajeF(playerid, -1, "Este vehículo tiene "#CROJO"%d "#CBLANCO"multas. Para pagarla(s), valla a la "#CVERDE"Comisaria nº 2 "#CBLANCO"de la policía (Use un mapa o GPS para localizarla).", Multas);
					}
				}
			}
		}
		if(veh_isSellVeh(VehID))
		{
	        new
				VS[400],
				InfoTamano[140];

    	    new
				Float:X,
				Float:Y,
				Float:Z;

    	    GetVehicleModelInfo(GetVehicleModel(VehID),VEHICLE_MODEL_INFO_SIZE, X, Y, Z);

			format(InfoTamano,sizeof(InfoTamano),"  •"#CBLANCO"Ancho: "#CAZULCLARO"%.1fM\n  •"#CBLANCO"Largo: "#CAZULCLARO"%.1fM\n  •"#CBLANCO"Alto: "#CAZULCLARO"%.1fM",X,Y,Z);

   	    	format(VS,sizeof(VS),""#CBLANCO"Puedes adquirir este "#CPOSITIVO"Vehículo:\n"#CBLANCO"________________________________\n\n  "#CAZULCLARO"•"#CBLANCO"Precio: "#CAZULCLARO"$%d\n  •"#CBLANCO"Modelo: "#CPOSITIVO""#CAZULCLARO"%s\n%s\n"#CBLANCO"________________________________\n\nUtilice "#CPOSITIVO"/comprar vehiculo",GetModelPrice(GetVehicleModel(VehID)),veh_getNameAsString(VehID),InfoTamano);
			ShowPlayerDialog(playerid,dError,DIALOG_STYLE_MSGBOX,""#CAZUL"Vehiculo "#CBLANCO"0KM",VS,"Aceptar","");
		}
		return 1;
	}
	else if(newstate == PLAYER_STATE_ONFOOT)
	{
	    SpecSync(playerid, 0);
		StopAudioStreamForPlayer(playerid);
	    TrailerAttached[playerid] = 0;
	    foreach (Player, i)
	    {
	        if (RequestedService[i][SERVICIO_TAXI])
	        {
				SetPlayerMarkerForPlayer (playerid, i, GetPlayerColor(i));
			}
		}
	}

	if (newstate != PLAYER_STATE_DRIVER && newstate != PLAYER_STATE_PASSENGER)
	{
 		SacarVelocimetro(playerid);
	}

	return 1;
}

stock SpecSync(playerid, type)
{
	if(type == 0) //Onfoot
	{
	    foreach(Player, i)
	    {
	        if (Specteando_ID[i] == playerid)
	        {
	        	PlayerSpectatePlayer(i, playerid);
			}
		}
	}
	else if(type == 1) //Vehicle
	{
	    foreach(Player, i)
	    {
	        if (Specteando_ID[i] == playerid)
	        {
	        	PlayerSpectateVehicle(i, GetPlayerVehicleID(playerid));
			}
		}
	}
	return 1;
}

stock MandarSMS(playerid, contact[], text[])
{
	new
	    str[20 + MAX_PLAYER_NAME],
		FreeSlot = -1,
		len@time = strlen(text) / 10;

	format(str, sizeof(str), "Mensaje de: ~b~~h~~h~%s", contact);

	for(new i; i < MAX_SMS_TEXT; i++)
	{
		if(TDSMS [playerid][i] == PlayerText:INVALID_TEXT_DRAW && TDSMS2[playerid][i] == PlayerText:INVALID_TEXT_DRAW)
		{
		    FreeSlot = i;
		    break;
		}
	}
	if(FreeSlot == -1)
	{
	    FreeSlot = 0;
	    PlayerTextDrawSetString(playerid, TDSMS [playerid][FreeSlot], str);
	    PlayerTextDrawSetString(playerid, TDSMS2[playerid][FreeSlot], text);
		SMSTime[playerid][FreeSlot] = len@time+3;
	}
	else
	{
		TDSMS [playerid][FreeSlot] = CreatePlayerTextDraw(playerid, 8.800021, 128.426422+floatmul(107.03, float(FreeSlot)), str);
		PlayerTextDrawLetterSize(playerid, TDSMS [playerid][FreeSlot], 0.271774, 1.547733);
		PlayerTextDrawTextSize(playerid, TDSMS [playerid][FreeSlot], 150.399932, -10.453332);
		PlayerTextDrawAlignment(playerid, TDSMS [playerid][FreeSlot], 1);
		PlayerTextDrawColor(playerid, TDSMS [playerid][FreeSlot], -1);
		PlayerTextDrawUseBox(playerid, TDSMS [playerid][FreeSlot], true);
		PlayerTextDrawBoxColor(playerid, TDSMS [playerid][FreeSlot], 842150655);
		PlayerTextDrawSetShadow(playerid, TDSMS [playerid][FreeSlot], 0);
		PlayerTextDrawSetOutline(playerid, TDSMS [playerid][FreeSlot], 1);
		PlayerTextDrawBackgroundColor(playerid, TDSMS [playerid][FreeSlot], 51);
		PlayerTextDrawFont(playerid, TDSMS [playerid][FreeSlot], 1);
		PlayerTextDrawSetProportional(playerid, TDSMS [playerid][FreeSlot], 1);
		PlayerTextDrawShow(playerid, TDSMS [playerid][FreeSlot]);

		TDSMS2[playerid][FreeSlot] = CreatePlayerTextDraw(playerid, 8.200018, 148.093261+floatmul(107.03, float(FreeSlot)), text);
		PlayerTextDrawLetterSize(playerid, TDSMS2[playerid][FreeSlot], 0.355774, 1.316267);
		PlayerTextDrawTextSize(playerid, TDSMS2[playerid][FreeSlot], 150.399932, -10.453332);
		PlayerTextDrawAlignment(playerid, TDSMS2[playerid][FreeSlot], 1);
		PlayerTextDrawColor(playerid, TDSMS2[playerid][FreeSlot], -1);
		PlayerTextDrawUseBox(playerid, TDSMS2[playerid][FreeSlot], true);
		PlayerTextDrawBoxColor(playerid, TDSMS2[playerid][FreeSlot], 120);
		PlayerTextDrawSetShadow(playerid, TDSMS2[playerid][FreeSlot], 0);
		PlayerTextDrawSetOutline(playerid, TDSMS2[playerid][FreeSlot], 1);
		PlayerTextDrawBackgroundColor(playerid, TDSMS2[playerid][FreeSlot], 51);
		PlayerTextDrawFont(playerid, TDSMS2[playerid][FreeSlot], 1);
		PlayerTextDrawSetProportional(playerid, TDSMS2[playerid][FreeSlot], 1);
		PlayerTextDrawShow(playerid, TDSMS2[playerid][FreeSlot]);

		SMSTime[playerid][FreeSlot] = len@time+3;
	}
	PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
	return 1;
}

stock EsFechaMayor(fecha1[], fecha2[])
{
	new
	    Day[2],
	    Month[2],
	    Age[2];

	if(!strcmp(fecha1, fecha2))
	    return 0;

	if(!sscanf(fecha1, "p</>ddd", Day[0], Month[0], Age[0]) && !sscanf(fecha2, "p</>ddd", Day[1], Month[1], Age[1]))
	{
	    if(Age[0] > Age[1])
	        return 1;

		else if(Age[0] < Age[1])
		    return 0;

		if(Month[0] > Month[1])
		    return 1;

		else if(Month[0] < Month[1])
		    return 0;

		if(Day[0] > Day[1] || Day[0] == Day[1])
		    return 1;
	}
	return 0;
}

CALLBACK: _RemovePlayerAttachedObject(playerid, index) return RemovePlayerAttachedObject(playerid,index);

CALLBACK: Comer(playerid, comida, Float:Hambre, precio,bool:comiendo)
{
	if(comiendo)
	{
		if(GetTickCount() - GetPVarInt(playerid,"T_COMIENDO") < 10000)
		{
		    SetTimerEx("Comer",3000, false, "iifii", playerid, comida, Hambre, precio, true);

		    if(!IsPlayerInAnyVehicle(playerid))
		    {
				ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
			}
		}
		return 1;
	}
	if(precio > GetPlayerMoney(playerid))
	{
	    return Error(playerid,"¡Dinero insuficiente!");
	}
	QuitarDinero(playerid, precio);
	if(ID_Negocio(playerid)) InfoNegocio[ID_Negocio(playerid)][nDinero] += precio;
	if(GetTickCount() - GetPVarInt(playerid,"ULTIMA_COMIDA") < 60000)
	{
	    SetPVarInt(playerid,"COMIDAS_COUNT", GetPVarInt(playerid,"COMIDAS_COUNT")+1);
	    if(GetPVarInt(playerid,"COMIDAS_COUNT") > 4)
	    {
	        cmd_vomitar(playerid, "");
	        InfoJugador[playerid][jHambre] = 15.0;
			MostrarNecesidadesEx(playerid);
			return 1;
		}
	}
	SetPVarInt(playerid, "ULTIMA_COMIDA", GetTickCount() );
	InfoJugador[playerid][jHambre] += Hambre;
	if(InfoJugador[playerid][jHambre] > 100.0) InfoJugador[playerid][jHambre] = 100.0;
	MostrarNecesidadesEx(playerid);
	ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
	switch(comida)
	{
	    case 0:
	    {
			SetPlayerAttachedObject(playerid, SLOT_MANODERECHA, 2881,6,0.128999,0.161000,0.130999,163.399993,-136.800033,-0.200000,1.000000,1.000000,1.000000);
			SetTimerEx("_RemovePlayerAttachedObject",10000,false,"ii", playerid, SLOT_MANODERECHA );
		}
		case 1:
		{
			SetPlayerAttachedObject(playerid, SLOT_MANODERECHA, 2880,  6,0.128999,0.161000,0.130999,163.399993,-136.800033,-0.200000,1.000000,1.000000,1.000000);
			SetTimerEx("_RemovePlayerAttachedObject",10000,false,"ii", playerid, SLOT_MANODERECHA);
		}//2898 id objeto copado pasto verde
	}
	SetPVarInt(playerid,"T_COMIENDO",GetTickCount());
 	SetTimerEx("Comer",3000, false, "iifii", playerid, comida, Hambre, precio, true);
	return 1;
}

stock CargarPreciosModelos()
{
	if(!fexist("Vehiculos/Precios.ini"))
	{
 		print("ADVERTENCIA: Falta configurar precios de vehículos (Vehiculos/Precios.ini)");
 		return;
	}

	new
   		string[18],
		File: Arch = fopen("Vehiculos/Precios.ini", io_read),
		i;

	while(fread(Arch, string))
	{
	    if(i >= MAX_VEHICLE_MODELS-400)
	        return;

		sscanf(string, "i", PrecioModelo[i]);
		i++;
	}
	fclose(Arch);
}

stock GetModelPrice(modelid)
{
	if(400 <= modelid < MAX_VEHICLE_MODELS)
	{
		return PrecioModelo[modelid-400];
	}
	return 0;
}

stock LogAdmin (playerid, const log[])
{
	new
	    string [128];

	A_Format(string, "%s %s", pName(playerid), log);
	Log("admins", string);
	return 1;
}

INI:Camaras_Velocidad[data](name[], value[])
{
	new
	    str[20];
	Loop(i, MAX_CAMARAS_VELOCIDAD, 0)
	{
	    A_Format(str, "X%d", i);
	    INI_Float(str, CamaraVelocidad[i][camX]);
	    A_Format(str, "Y%d", i);
	    INI_Float(str, CamaraVelocidad[i][camY]);
	    A_Format(str, "Z%d", i);
	    INI_Float(str, CamaraVelocidad[i][camZ]);
	    A_Format(str, "Angle%d", i);
	    INI_Float(str, CamaraVelocidad[i][camAngle]);
	    A_Format(str, "MinX%d", i);
	    INI_Float(str, CamaraVelocidad[i][camMinX]);
	    A_Format(str, "MinY%d", i);
	    INI_Float(str, CamaraVelocidad[i][camMinY]);
	    A_Format(str, "MaxX%d", i);
	    INI_Float(str, CamaraVelocidad[i][camMaxX]);
	    A_Format(str, "MaxY%d", i);
	    INI_Float(str, CamaraVelocidad[i][camMaxY]);
	    A_Format(str, "Speed%d", i);
	    INI_Int(str, CamaraVelocidad[i][camSpeed]);
	    A_Format(str, "Multa%d", i);
	    INI_Int(str, CamaraVelocidad[i][camMulta]);
	}
	return 1;
}

// - Radares o cámaras de velocidad
stock CargarCamarasVelocidad()
{
	INI_Load("Camaras_Velocidad.ini");

	new
	    count;

	Loop(i, MAX_CAMARAS_VELOCIDAD, 0)
	{
		if(CamaraVelocidad[i][camX] != 0.0)
		{
		    count++;
			Iter_Add(Camaras, i);
			CamaraVelocidad[i][camObjID] = CreateDynamicObject(OBJ_CAMARAVELOCIDAD, CamaraVelocidad[i][camX],
			                                                                        CamaraVelocidad[i][camY],
			                                                                        CamaraVelocidad[i][camZ],
			                                                                        0.0, 0.0,
			                                                                        CamaraVelocidad[i][camAngle]);
            CamaraVelocidad[i][camZoneID] = CreateDynamicRectangle(CamaraVelocidad[i][camMinX], CamaraVelocidad[i][camMinY], CamaraVelocidad[i][camMaxX], CamaraVelocidad[i][camMaxY]);
			UpdateCameraLabel(i, true, false);
		}
	}
	printf("*- Cámaras de velocidad cargadas. (%d/%d)", count, MAX_CAMARAS_VELOCIDAD);
	return 1;
}


stock GuardarHornosBigFoot()
{
	new
	    str[100],
	    File: Arch = fopen ("Laboratorios/Hornos_BF.db", io_write);

	for (new i; i < MAX_HORNOS_BIGFOOT; i++)
	{
	    A_Format (str, "%f@%f@%f@%f\n", InfoHornoBigFoot[i][hornoCantidad], InfoHornoBigFoot[i][hornoProducto], InfoHornoBigFoot[i][hornoQuerosen], InfoHornoBigFoot[i][hornoCarbon]);
	    fwrite (Arch, str);
	}
	fclose (Arch);
	return 1;
}

stock CargarDataHornosBigFoot()
{
	if (!fexist ("Laboratorios/Hornos_BF.db"))
	    return 0;

	new
	    str[100],
	    File: Arch = fopen ("Laboratorios/Hornos_BF.db", io_read),
		i = 0;

	while (fread(Arch, str) && i < MAX_HORNOS_BIGFOOT)
	{
	    unformat (str, "p<@>ffff", InfoHornoBigFoot[i][hornoCantidad], InfoHornoBigFoot[i][hornoProducto], InfoHornoBigFoot[i][hornoQuerosen], InfoHornoBigFoot[i][hornoCarbon]);
	}
	fclose (Arch);
	return 1;
}

stock GuardarHornosBlackAso()
{
	new
	    str[140],
	    File: Arch = fopen ("Laboratorios/Hornos_BA.db", io_write);

	for (new i; i < MAX_HORNOS_BLACKASO; i++)
	{
	    A_Format (str, "%f@%f@%f@%f@%d@%d\n", InfoHornoBlackAso[i][hornoPorHacer], InfoHornoBlackAso[i][hornoHecho], InfoHornoBlackAso[i][hornoMetal], InfoHornoBlackAso[i][hornoCarbon], InfoHornoBlackAso[i][hornoMolde], InfoHornoBlackAso[i][hornoObj]);
	    fwrite (Arch, str);
	}
	fclose (Arch);
	return 1;
}

stock CargarDataHornosBlackAso()
{
	if (!fexist ("Laboratorios/Hornos_BA.db"))
	    return 0;

	new
	    str[100],
	    File: Arch = fopen ("Laboratorios/Hornos_BA.db", io_read),
		i = 0;

	while (fread(Arch, str) && i < MAX_HORNOS_BLACKASO)
	{
	    unformat (str, "p<@>ffffdd", InfoHornoBlackAso[i][hornoPorHacer], InfoHornoBlackAso[i][hornoHecho], InfoHornoBlackAso[i][hornoMetal], InfoHornoBlackAso[i][hornoCarbon], InfoHornoBlackAso[i][hornoMolde], InfoHornoBlackAso[i][hornoObj]);
		i++;
	}
	fclose (Arch);
	return 1;
}

stock CargarHornosBigFoot()
{
	CargarDataHornosBigFoot();
	for(new i; i < MAX_HORNOS_BIGFOOT; i++)
	{
	    InfoHornoBigFoot[i][hornoObjID][0] = CreateDynamicObject(934, HornosBigFoot[i][0], HornosBigFoot[i][1], HornosBigFoot[i][2], 0.0, 0.0, HornosBigFoot[i][3]);
	    InfoHornoBigFoot[i][hornoLabelID] = CreateDynamic3DTextLabel("Cargando...", C_BLANCO, HornosBigFoot[i][0], HornosBigFoot[i][1], HornosBigFoot[i][2], 6.0);
		ActualizarLabelHornoBigFoot(i);
	}
	for(new i; i < MAX_DESTILADORES_BIGFOOT; i++)
	{
	    InfoDestiladorBigFoot[i][destLabelID] = CreateDynamic3DTextLabel("Cargando...", C_BLANCO, DestiladorBigFoot[i][0], DestiladorBigFoot[i][1], DestiladorBigFoot[i][2], 5.0);
		ActualizarLabDestiladorBigFoot(i);
	}
	return 1;
}

stock CargarHornosBlackAso()
{
	CargarDataHornosBlackAso();
	for(new i; i < MAX_HORNOS_BLACKASO; i++)
	{
	    InfoHornoBlackAso[i][hornoObjID][0] = CreateDynamicObject(934, HornosBlackAso[i][0], HornosBlackAso[i][1], HornosBlackAso[i][2], 0.0, 0.0, HornosBlackAso[i][3]);
	    InfoHornoBlackAso[i][hornoLabelID] = CreateDynamic3DTextLabel("Cargando...", C_BLANCO, HornosBlackAso[i][0], HornosBlackAso[i][1], HornosBlackAso[i][2], 6.0);
		ActualizarLabelHornoBlackAso(i);
	}
	return 1;
}

stock ActualizarLabDestiladorBigFoot(i)
{
	if(0 <= i < MAX_DESTILADORES_BIGFOOT)
	{
	    new
	        string[120];

		A_Format(string, ""#CROJO"Destilador\n\n"#CGRIS"Querosén: "#CVERDE"%d/%d\n\n"#CBLANCO"Usa "#CAMARILLO"/destilar "#CBLANCO"o "#CAMARILLO"/cargar bidon", InfoDestiladorBigFoot[i][destDestilado], InfoDestiladorBigFoot[i][destPorDestilar]);
		UpdateDynamic3DTextLabelText(InfoDestiladorBigFoot[i][destLabelID], C_BLANCO, string);
		return 1;
	}
	return 0;
}

stock CargarMaxCuentaB()
{
	opmysql_tquery( "SELECT `IDCuentaB` FROM `Usuarios` ORDER BY `IDCuentaB` DESC", "OnQueryFinish", "ii", 0, query_type_cargarmaxcb);
}

stock CargarFabricasDroga()
{
	//BigFoot
	if(fexist("Laboratorios/BigFoot.dat"))
	{
	    new
	        File: H = fopen("Laboratorios/BigFoot.dat", io_read),
			str[10];

	    fread(H, str);
	    sscanf(str, "p<=>ii", LaboratorioBigFoot[labFamDominante], LaboratorioBigFoot[labCerrado]);
	    fclose(H);

	}
	else
	{
		ActualizarBigFoot();
	}
	LaboratorioBigFoot[labLabelID] = CreateDynamic3DTextLabel("Cargando...", C_BLANCO, CORDS_LAB_BIGFOOT_EXT, 4.0);
	LaboratorioBigFoot[labZoneID] = CreateDynamicRectangle(MIN_LAB_BIGFOOT, MAX_LAB_BIGFOOT);
	LaboratorioBigFoot[labGangZoneID] = GangZoneCreate(MIN_LAB_BIGFOOT, MAX_LAB_BIGFOOT);

	new
	    Label[650];

	strcat(Label, "Fábrica de Drogas\n\n");
	strcat(Label, ""#CBLANCO"Horno, Hojas de coca, Querosén y Carbón son necesarios para fabricar cocaina.\n");
	strcat(Label, "Primero, deberás conseguir combustible y destirarlo en los destiladores, usando "#CINFO"/destilidar combustible\n");
	strcat(Label, ""#CBLANCO"Luego sacas el combustible destilado (querosen) y lo metes en el horno con "#CINFO"/tirar\n");
	strcat(Label, "Después tienes que conseguir carbón y meterlo en el horno, con "#CINFO"/tirar.\n\n");
	strcat(Label, "Luego debes salir afuera y cortar hojas de coca, para sacar las hojas de la planta "#CINFO"/planta\n");
	strcat(Label, ""#CBLANCO"Una vez obtenido todos estos materiales enciende el horno con el encendedor: "#CINFO"/encender horno\n\n");

	CreateDynamic3DTextLabel(Label, C_ROJO, 2568.8572,-1293.7815,1044.1250, 6.0);
	CreateDynamicPickup(ID_PICKUPINFO, 1, 2568.8572,-1293.7815,1044.1250);
 	CreateDynamicPickup(ID_PICKUPINT, 1, CORDS_LAB_BIGFOOT_EXT);
	ActualizarLabelBigFoot();

	//BlackAso
	if(fexist("Laboratorios/BlackAsociation.dat"))
	{
	    new
	        File: H = fopen("Laboratorios/BlackAsociation.dat", io_read),
			str[10];

	    fread(H, str);
	    sscanf(str, "p<=>ii", FabricaBlackAso[fabFamDominante], FabricaBlackAso[fabCerrado]);
	    fclose(H);
	}
	else
	{
		ActualizarBlackAso();
	}
	FabricaBlackAso[fabLabelID] = CreateDynamic3DTextLabel("Cargando...", C_BLANCO, CORDS_FAB_BLACKASO_EXT, 4.0);

	CreateDynamicPickup(ID_PICKUPINT, 1, CORDS_FAB_BLACKASO_EXT);

	strclr(Label);

	strcat(Label, "Fábrica de Armas\n\n");
	strcat(Label, ""#CBLANCO"Horno, Hierro, y Carbón son necesarios para crear armas, moldes, y cargadores.\n");
	strcat(Label, "Primero, deberás producir el Molde para hacer un arma/cargador, usando "#CINFO"/fabricar molde\n");
	strcat(Label, ""#CBLANCO"Luego, puedes fabricar artilleria usando "#CINFO"/fabricar arma - /fabricar cargador "#CBLANCO"cerca del\n");
	strcat(Label, "horno a utilizar con el molde deseado en la mano.\n\n");
	strcat(Label, "Para meter un elemento al horno, como Carbón o Hierro usa "#CINFO"/tirar\n");
	strcat(Label, ""#CBLANCO"Una vez producida el arma, molde, o cargador usa "#CINFO"/recoger [molde/arma/cargador]\n\n");
	strcat(Label, ""#CBLANCO"Para encender un horno, usa "#CINFO"/encender horno. Para apagar "#CINFO"/apagar horno\n");

	CreateDynamic3DTextLabel(Label, C_ROJO, 289.6488,1976.8829,1010.2794, 6.0);
	CreateDynamicPickup(ID_PICKUPINFO, 1, 289.6488,1976.8829,1010.2794);

	ActualizarLabelBlackAso();
	return 1;
}

stock ActualizarBigFoot()
{
    new
        File: H = fopen("Laboratorios/BigFoot.dat", io_write),
		str[10];

	A_Format(str, "%d=%d", LaboratorioBigFoot[labFamDominante], LaboratorioBigFoot[labCerrado]);
	fwrite(H, str);
	fclose(H);
	return 1;
}

stock ActualizarBlackAso()
{
    new
        File: H = fopen("Laboratorios/BlackAsociation.dat", io_write),
		str[10];

	A_Format(str, "%d=%d", FabricaBlackAso[fabFamDominante], FabricaBlackAso[fabCerrado]);
	fwrite(H, str);
	fclose(H);
	return 1;
}

stock ActualizarLabelBigFoot()
{
	new
		string[130];

	A_Format(string, "Laboratorio: "#CAMARILLO"Bigfoot\n\
	\n\
	"#CBLANCO"Familia dominante: "#CROJO"%s\n\
	"#CBLANCO"Puerta: %s",
	GetFamName(LaboratorioBigFoot[labFamDominante]),
	LaboratorioBigFoot[labCerrado] ? (""#CROJO"Cerrada") : (""#CVERDE"Abierta"));
	UpdateDynamic3DTextLabelText(LaboratorioBigFoot[labLabelID], C_BLANCO, string);
	return 1;
}

stock ActualizarLabelBlackAso()
{
	new
		string[130];

	A_Format(string, "Fábrica: "#CAMARILLO"Black Asociation\n\
	\n\
	"#CBLANCO"Familia dominante: "#CROJO"%s\n\
	"#CBLANCO"Puerta: %s",
	GetFamName(FabricaBlackAso[fabFamDominante]),
	FabricaBlackAso[fabCerrado] ? (""#CROJO"Cerrada") : (""#CVERDE"Abierta"));
	UpdateDynamic3DTextLabelText(FabricaBlackAso[fabLabelID], C_BLANCO, string);
	return 1;
}

stock GetFamName(famid)
{
	new
	    ret_val[25];

	if(famid == 0)
	    ret_val = "Ninguna";

	else
		format(ret_val, 25, InfoFamilia[famid][fNombre]);

	return ret_val;
}

stock ActualizarLabelHornoBigFoot(i)
{
	if(0 <= i < MAX_HORNOS_BIGFOOT)
	{
		new
		    string[200];

		A_Format(string, "Horno %s"#CGRIS"\n\
		\n\
		"#CVERDE"%d "#CGRIS"hojas de coca\n\
		"#CVERDE"%d "#CGRIS"rocas de Carbón\n\
		"#CVERDE"%d "#CGRIS"litros de Querosén\n\
		\n\
		"#CBLANCO"Cocaina producida: "#CVERDE"%d "#CBLANCO"gramos.",
		InfoHornoBigFoot[i][hornoEncendido] ? (""#CVERDE"Encendido") : (""#CROJO"Apagado"),
	 	floatround(InfoHornoBigFoot[i][hornoCantidad], floatround_ceil),
	 	floatround(InfoHornoBigFoot[i][hornoCarbon], floatround_ceil),
	 	floatround(InfoHornoBigFoot[i][hornoQuerosen], floatround_ceil),
	 	floatround(InfoHornoBigFoot[i][hornoProducto], floatround_ceil));

		UpdateDynamic3DTextLabelText(InfoHornoBigFoot[i][hornoLabelID], C_BLANCO, string);
		return 1;
	}
	return 0;
}

stock ActualizarLabelHornoBlackAso(i)
{
	if(0 <= i < MAX_HORNOS_BLACKASO)
	{
		new
		    string[250];

		if (InfoHornoBlackAso[i][hornoMolde])
		{
			A_Format(string, "Horno "#CVERDE"%s\n\
			\n\
			"#CGRIS"Fabricando "#CAMARILLO"%s\n\
			"#CGRIS"Forma: "#CAMARILLO"%s\n\
			"#CGRIS"Carbón: "#CVERDE"%d\n\
			"#CGRIS"Metal: "#CVERDE"%d\n\
			\n\
			"#CBLANCO"Producida: "#CVERDE"%.01f%%",
			InfoHornoBlackAso[i][hornoEncendido] ? (""#CVERDE"Encendido") : (""#CROJO"Apagado"),
			ObjectData[InfoHornoBlackAso[i][hornoObj]][invName],
			ObjectData[InfoHornoBlackAso[i][hornoMolde]][invName],
		 	floatround(InfoHornoBlackAso[i][hornoCarbon], floatround_ceil),
		 	floatround(InfoHornoBlackAso[i][hornoMetal], floatround_ceil),
		 	floatround(InfoHornoBlackAso[i][hornoHecho], floatround_ceil) * 100 / InfoHornoBlackAso[i][hornoPorHacer]);
		}
		else
		{
			A_Format(string, "Horno "#CVERDE"%s\n\
			\n\
			"#CGRIS"Fabricando "#CAMARILLO"%s\n\
			"#CGRIS"Carbón: "#CVERDE"%d\n\
			"#CGRIS"Metal: "#CVERDE"%d\n\
			\n\
			"#CBLANCO"Producida: "#CVERDE"%.01f%%",
			InfoHornoBlackAso[i][hornoEncendido] ? (""#CVERDE"Encendido") : (""#CROJO"Apagado"),
			ObjectData[InfoHornoBlackAso[i][hornoObj]][invName],
		 	floatround(InfoHornoBlackAso[i][hornoCarbon], floatround_ceil),
		 	floatround(InfoHornoBlackAso[i][hornoMetal], floatround_ceil),
		 	floatround(InfoHornoBlackAso[i][hornoHecho], floatround_ceil) * 100 / InfoHornoBlackAso[i][hornoPorHacer]);

		}
		UpdateDynamic3DTextLabelText(InfoHornoBlackAso[i][hornoLabelID], C_BLANCO, string);
		return 1;
	}
	return 0;
}

stock CrearFuegoHornoBigFoot(i)
{
	// Llamita de arriba
    InfoHornoBigFoot[i][hornoObjID][1] = CreateDynamicObject(18693, HornosBigFoot[i][0]+0.38208, HornosBigFoot[i][1]+0.1125, HornosBigFoot[i][2]-0.1497, 0.0, 0.0, HornosBigFoot[i][3], .worldid = VW_BIGFOOT);

	// Ruido (Llama grande)
    InfoHornoBigFoot[i][hornoObjID][2] = CreateDynamicObject(18688, HornosBigFoot[i][0], HornosBigFoot[i][1], HornosBigFoot[i][2]-6.49, 0.0, 0.0, HornosBigFoot[i][3], .worldid = VW_BIGFOOT);
	return 1;
}

stock BorrarFuegoHornoBigFoot(i)
{
	DestroyDynamicObject(InfoHornoBigFoot[i][hornoObjID][1]);
	DestroyDynamicObject(InfoHornoBigFoot[i][hornoObjID][2]);

	InfoHornoBigFoot[i][hornoObjID][1] = 0;
	InfoHornoBigFoot[i][hornoObjID][2] = 0;
	return 1;
}

stock HornoMasCercano(playerid, fabrica = 0)
{
	if (!fabrica)
	{
		Loop(i, MAX_HORNOS_BIGFOOT, 0)
		{
			if(IsPlayerInRangeOfPoint(playerid, 3.0, HornosBigFoot[i][0], HornosBigFoot[i][1], HornosBigFoot[i][2]))
			{
				return i;
			}
		}
		return -1;
	}
	else
	{
		Loop(i, MAX_HORNOS_BLACKASO, 0)
		{
			if(IsPlayerInRangeOfPoint(playerid, 3.0, HornosBlackAso[i][0], HornosBlackAso[i][1], HornosBlackAso[i][2]))
			{
				return i;
			}
		}
		return -1;
	}
}

stock DestiladorMasCercano(playerid)
{
	Loop(i, MAX_DESTILADORES_BIGFOOT, 0)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, DestiladorBigFoot[i][0], DestiladorBigFoot[i][1], DestiladorBigFoot[i][2]))
		{
			return i;
		}
	}
	return -1;
}

stock EstaEnFabricaBigFoot(playerid)
{
	if (GetPlayerVirtualWorld(playerid) == VW_BIGFOOT)
	{
	    if (IsPlayerInRangeOfPoint(playerid, 60.0, HornosBigFoot[0][0], HornosBigFoot[0][1], HornosBigFoot[0][2]))
		{
		    return 1;
		}
	}
	return 0;
}

stock EstaEnFabricaBlackAso(playerid)
{
	if (GetPlayerVirtualWorld(playerid) == VW_BLACKASO)
	{
	    if (IsPlayerInRangeOfPoint(playerid, 120.0, HornosBlackAso[0][0], HornosBlackAso[0][1], HornosBlackAso[0][2]))
		{
		    return 1;
		}
	}
	return 0;
}

stock CargarFrecuencias()
{
	new
	    str_freq[25];

	for(new i = 1000; i < 10000; i++)
	{
	    A_Format(str_freq, "Frecuencias/%d.dat", i);
	    if(fexist(str_freq))
	    {
	        new
	            ReadData[65],
				OwnerFrec[MAX_PLAYER_NAME],
				TimeFrec,
				PassFrec,
				File: handle = fopen(str_freq, io_read);

			fread(handle, ReadData);
			fclose(handle);

			sscanf(ReadData, "p<|>s[24]dd", OwnerFrec, PassFrec, TimeFrec);

	    	A_Format(str_freq, "%d_OWN", i);
			SetGVarString(str_freq, OwnerFrec);

	    	A_Format(str_freq, "%d_TIME", i);
			SetGVarInt(str_freq, TimeFrec);

	    	A_Format(str_freq, "%d_PW", i);
			SetGVarInt(str_freq, PassFrec);
		}
	}
	return 1;
}

stock GetFreqValidTime(freq)
{
	new
	    string[15];

	A_Format(string, "%d_TIME", freq);

	new
	    time = gettime(),
	    dif = GetGVarInt(string) - time;

	if(!dif)
	    dif = 0;

	return dif;
}

stock CargarObjetosTirados()
{
	Loop(i, MAX_OBJETOS_T, 0)
	{
	    new
	        path[30];

		A_Format(path, "ObjetosTirados/%d.dat", i);
		if(fexist(path))
		{
		    new
		        File: handle = fopen(path, io_read);

			new
			    object,
			    data,
			    Float:x,
			    Float:y,
			    Float:z,
			    Float:rx,
			    Float:ry,
			    Float:rz,
			   	interior_unused,
			    virtualworld;

			new
				readdata[100];

			fread(handle, readdata);

			if (sscanf(readdata, "p<|>ddffffffd", object, data, x, y, z, rx, ry, rz, virtualworld)) // OBjetos tirados viejos si guardaban el "Interior" pero ya no es necesario
			{
			    sscanf(readdata, "p<|>ddffffffdd", object, data, x, y, z, rx, ry, rz, interior_unused, virtualworld);
			}

			fclose(handle);

			CrearObjetoTirado(object, data, x, y, z, rx, ry, rz, virtualworld, i);
		}
	}
	return printf("*- Objetos tirados fueron cargados.");
}

stock CrearEstacion(NegID, Float:x, Float:y, Float:z, Float:Angle, litros = MAX_LITROS_ESTACION)
{
	new
	    est_id;

	for( ; est_id < MAX_ESTACIONES; est_id++)
	{
	    if(InfoEstacion[est_id][estObjID] == 0)
	        break;
	}
	if(est_id >= MAX_ESTACIONES-1)
	    return -1;

	InfoEstacion[est_id][estObjID] = CreateDynamicObject(ID_OBJESTACION, x, y, z, 0.0, 0.0, Angle);
	InfoEstacion[est_id][estLabelID] = CreateDynamic3DTextLabel(" ", C_AZUL,  x, y, z+1.5, 6.0);
	InfoEstacion[est_id][estX] = x;
	InfoEstacion[est_id][estY] = y;
	InfoEstacion[est_id][estZ] = z;
	InfoEstacion[est_id][estAngle] = Angle;
	InfoEstacion[est_id][estNegID] = NegID;
	InfoEstacion[est_id][estLitros] = litros;

	ActualizarLabelEstacion(est_id);
	ActualizarEstacion(est_id);
	Iter_Add(Estacion, est_id);
	return est_id;
}

stock BorrarEstacion(est_id)
{
	if(0 <= est_id < MAX_ESTACIONES)
	{
		if(InfoEstacion[est_id][estLabelID] == Text3D:0)
		    return 0;

		DestroyDynamic3DTextLabel(InfoEstacion[est_id][estLabelID]);
		DestroyDynamicObject(InfoEstacion[est_id][estObjID]);

		InfoEstacion[est_id][estNegID] = 0;
		InfoEstacion[est_id][estLabelID] = Text3D:0;
		InfoEstacion[est_id][estObjID] = 0;

		InfoEstacion[est_id][estLitros] = 0;
		InfoEstacion[est_id][estX] = 0.0;
		InfoEstacion[est_id][estY] = 0.0;
		InfoEstacion[est_id][estZ] = 0.0;
		InfoEstacion[est_id][estAngle] = 0.0;

		new
  			path[32];

		A_Format(path, "Negocios/Estaciones/%d.ini", est_id);
		fremove(path);
		Iter_Remove(Estacion, est_id);
		return 1;
	}
	return 0;
}

stock CambiarLitrosEstacion(est_id, litros = 1, bool:update_file = false)
{
	if(0 <= est_id < MAX_ESTACIONES)
	{
		if(InfoEstacion[est_id][estLabelID] == Text3D:0)
		    return 0;

		InfoEstacion[est_id][estLitros] += litros;

		if(!InfoEstacion[est_id][estLitros])
		    InfoEstacion[est_id][estLitros] = 0;

		ActualizarLabelEstacion(est_id);

		if(update_file)
		{
			new
			    path[32];

			A_Format(path, "Negocios/Estaciones/%d.ini", est_id);
			new
			    INI:Arch = INI_Open(path);
			INI_SetTag(Arch, "data");
			INI_WriteInt(Arch, "Litros", InfoEstacion[est_id][estLitros]);
			INI_Close(Arch);

			if(InfoEstacion[est_id][estNegID])
			{
				A_Format(path, "Negocios/%d.ini", InfoEstacion[est_id][estNegID]);
				new
				    INI:Arch_ = INI_Open(path);
				INI_SetTag(Arch_, "data");
				INI_WriteInt(Arch_, "Dinero", InfoNegocio[InfoEstacion[est_id][estNegID]][nDinero]);
				INI_Close(Arch_);
			}
		}
		return 1;
	}
	return 0;
}

stock ActualizarEstacion(est_id)
{
	new
	    path[32];

	A_Format(path, "Negocios/Estaciones/%d.ini", est_id);
	new
	    INI:Arch = INI_Open(path);
	INI_SetTag(Arch, "data");
	INI_WriteInt(Arch, "Neg", InfoEstacion[est_id][estNegID]);
	INI_WriteInt(Arch, "Litros", InfoEstacion[est_id][estLitros]);
	INI_WriteFloat(Arch, "x", InfoEstacion[est_id][estX]);
	INI_WriteFloat(Arch, "y", InfoEstacion[est_id][estY]);
	INI_WriteFloat(Arch, "z", InfoEstacion[est_id][estZ]);
	INI_WriteFloat(Arch, "angle", InfoEstacion[est_id][estAngle]);
	INI_Close(Arch);
	return 1;
}

stock ActualizarLabelEstacion(est_id)
{
	if(0 <= est_id < MAX_ESTACIONES)
	{
		if(InfoEstacion[est_id][estLabelID] == Text3D:0)
		    return 0;

		new
		    str[230];

		format(str, sizeof(str), ""#CROJO"Surtidor de Combustible (%d)\n\n\n"#CBLANCO"Costo del litro: "#CVERDE"$%d\n"#CBLANCO"Nivel de combustible: "#CINFO"%d/%d (%d%%)\n\n"#CBLANCO"Use "#CINFO"/cargar combustible "#CBLANCO"o "#CINFO"/cargar combustible [litros]", est_id, PRECIO_GASOLINA, InfoEstacion[est_id][estLitros], MAX_LITROS_ESTACION, (InfoEstacion[est_id][estLitros] * 100 / MAX_LITROS_ESTACION));
		UpdateDynamic3DTextLabelText(InfoEstacion[est_id][estLabelID], 0xFFFFFFFF, str);
		return 1;
	}
	return 0;
}

stock CargarCasillerosLSPD()
{
	static const path[] = "Facciones/LSPD/Casilleros";

	Loop(i, MAX_CASILLEROS_LSPD, 0)
	{
	    new
	        str[70];

		A_Format(str, "%s/%d.dat", path, i);
		if(fexist(str))
		{
		    new
				File: handle = fopen(str, io_read),
		        item,
		        data,
				index = -1;

			while(fread(handle, str) && index < MAX_ITEMS_CASILLERO_LSPD)
			{
				if(index == -1)
				{
				    alm(CasilleroLSPD[i][casOwner], str);
				    index = 0;
					continue;
				}
			    sscanf(str, "p<^>ii", item, data);
			    CasilleroLSPD[i][casItem][index] = item;
			    CasilleroLSPD[i][casData][index] = data;
                index ++;
			}
			fclose(handle);
		}
		if(isnull(CasilleroLSPD[i][casOwner]))
			A_Format(str, "Casillero "#CVERDE"nº %d", i);

		else
			A_Format(str, "Casillero "#CVERDE"nº %d\n\n"#CBLANCO"Pertenece a "#CAMARILLO"%s", i, CasilleroLSPD[i][casOwner]);

		CasilleroLSPD[i][casLabelID] = CreateDynamic3DTextLabel(str, C_BLANCO, CasillerosLSPD[i][0], CasillerosLSPD[i][1], CasillerosLSPD[i][2]+0.8, 1.2, .testlos = 0);
	}
	return 1;
}

stock CasilleroLSPDMasCercano (playerid)
{
	Loop(i, MAX_CASILLEROS_LSPD, 0)
	{
		if (IsPlayerInRangeOfPoint (playerid, 0.5, CasillerosLSPD[i][0], CasillerosLSPD[i][1], CasillerosLSPD[i][2]))
		    return i;
	}
	return -1;
}

stock ActualizarCasilleroLSPD(i)
{
	if(0 <= i < MAX_CASILLEROS_LSPD)
	{
		static const path[] = "Facciones/LSPD/Casilleros";

	    new
	        str[50];

		A_Format(str, "%s/%d.dat", path, i);

  		new
			File: handle = fopen(str, io_write);

		Loop(index, MAX_ITEMS_CASILLERO_LSPD+1, 0)
		{
		    if(index == 0)
			{
				format(str, MAX_PLAYER_NAME, "%s\n", CasilleroLSPD[i][casOwner]);
				fwrite(handle, str);
				continue;
			}

            format(str, 20, "%04d^%04d\n", CasilleroLSPD[i][casItem][index-1], CasilleroLSPD[i][casData][index-1]);
			fwrite(handle, str);
		}
		fclose(handle);
		return 1;
	}
	return 0;
}

stock MostrarCasilleroLSPD(playerid, casillero)
{
	if(0 <= casillero < MAX_CASILLEROS_LSPD)
	{
	    new
	        Str2[75],
			Str[sizeof(Str2) * MAX_ITEMS_CASILLERO_LSPD];

		Loop(i, MAX_ITEMS_CASILLERO_LSPD, 0)
		{
		    if(CasilleroLSPD[casillero][casItem][i])
			{
				format(Str2, sizeof(Str2), ""#CINVUSADO"(Estante %d)	{FFFFFF}%s\n", i+1, GetObjectName(CasilleroLSPD[casillero][casItem][i], CasilleroLSPD[casillero][casData][i]));
			}
			else
			{
				format(Str2, sizeof(Str2), ""#CINVVACIO"(Estante %d)	{FFFFFF}Vacio\n", i+1);
			}
			strcat(Str, Str2);
		}
		A_Format(Str2, ""#CBLANCO"Casillero "#CROJO"(nº %d)", casillero);
		Dialog(playerid, dCasilleroLSPD, DIALOG_STYLE_LIST, Str2, Str, "Aceptar", "Cancelar");
		SetPVarInt(playerid, "LSPD_CASILLERO", casillero);
		return 1;
	}
	return 0;
}

//LSEM
stock CargarCasillerosLSEM()
{
	static const path[] = "Facciones/LSEM/Casilleros";

	Loop(i, MAX_CASILLEROS_LSEM, 0)
	{
	    new
	        str[70];

		A_Format(str, "%s/%d.dat", path, i);
		if(fexist(str))
		{
		    new
				File: handle = fopen(str, io_read),
		        item,
		        data,
				index = -1;

			while(fread(handle, str) && index < MAX_ITEMS_CASILLERO_LSEM)
			{
				if(index == -1)
				{
				    alm(CasilleroLSEM[i][casOwner], str);
				    index = 0;
					continue;
				}
			    sscanf(str, "p<^>ii", item, data);
			    CasilleroLSEM[i][casItem][index] = item;
			    CasilleroLSEM[i][casData][index] = data;
                index ++;
			}
			fclose(handle);
		}
		if(isnull(CasilleroLSEM[i][casOwner]))
			A_Format(str, "Casillero "#CVERDE"nº %d", i);

		else
			A_Format(str, "Casillero "#CVERDE"nº %d\n\n"#CBLANCO"Pertenece a "#CAMARILLO"%s", i, CasilleroLSEM[i][casOwner]);

		CasilleroLSEM[i][casLabelID] = CreateDynamic3DTextLabel(str, C_BLANCO, CasillerosLSEM[i][0], CasillerosLSEM[i][1], CasillerosLSEM[i][2]+0.8, 1.2, .testlos = 1);
	}
	return 1;
}

stock CasilleroLSEMMasCercano (playerid)
{
	Loop(i, MAX_CASILLEROS_LSEM, 0)
	{
		if (IsPlayerInRangeOfPoint (playerid, 0.5, CasillerosLSEM[i][0], CasillerosLSEM[i][1], CasillerosLSEM[i][2]))
		    return i;
	}
	return -1;
}

stock ActualizarCasilleroLSEM (i)
{
	if(0 <= i < MAX_CASILLEROS_LSEM)
	{
		static const path[] = "Facciones/LSEM/Casilleros";

	    new
	        str[50];

		A_Format(str, "%s/%d.dat", path, i);

  		new
			File: handle = fopen(str, io_write);

		Loop(index, MAX_ITEMS_CASILLERO_LSEM+1, 0)
		{
		    if(index == 0)
			{
				format(str, MAX_PLAYER_NAME, "%s\n", CasilleroLSEM[i][casOwner]);
				fwrite(handle, str);
				continue;
			}

            format(str, 20, "%04d^%04d\n", CasilleroLSEM[i][casItem][index-1], CasilleroLSEM[i][casData][index-1]);
			fwrite(handle, str);
		}
		fclose(handle);
		return 1;
	}
	return 0;
}

stock MostrarCasilleroLSEM(playerid, casillero)
{
	if(0 <= casillero < MAX_CASILLEROS_LSEM)
	{
	    new
	        Str2[75],
			Str[sizeof(Str2) * MAX_ITEMS_CASILLERO_LSEM];

		Loop(i, MAX_ITEMS_CASILLERO_LSEM, 0)
		{
		    if(CasilleroLSEM[casillero][casItem][i])
			{
				format(Str2, sizeof(Str2), ""#CINVUSADO"(Estante %d)	{FFFFFF}%s\n", i+1, GetObjectName(CasilleroLSEM[casillero][casItem][i], CasilleroLSEM[casillero][casData][i]));
			}
			else
			{
				format(Str2, sizeof(Str2), ""#CINVVACIO"(Estante %d)	{FFFFFF}Vacio\n", i+1);
			}
			strcat(Str, Str2);
		}
		A_Format(Str2, ""#CBLANCO"Casillero "#CROJO"(nº %d)", casillero);
		Dialog(playerid, dCasilleroLSEM, DIALOG_STYLE_LIST, Str2, Str, "Aceptar", "Cancelar");
		SetPVarInt(playerid, "LSEM_CASILLERO", casillero);
		return 1;
	}
	return 0;
}

stock MostrarMaletero(playerid, vehicleid)
{
	if(IsValidVehicle(vehicleid))
	{
	    new
	        Str2[75],
			Str[sizeof(Str2) * MAX_LUGARES_MALETERO],
			lugares = veh_getMalSlots(vehicleid);

		Loop(i, lugares, 0)
		{
		    if(ItemMaletero[vehicleid][i][invObject])
			{
				format(Str2, sizeof(Str2), ""#CINVUSADO"(%d)	{FFFFFF}%s\n", i+1, GetObjectName(ItemMaletero[vehicleid][i][invObject], ItemMaletero[vehicleid][i][invData]));
			}
			else
			{
				format(Str2, sizeof(Str2), ""#CINVVACIO"(%d)	{FFFFFF}Vacio\n", i+1);
			}
			strcat(Str, Str2);
		}
		A_Format(Str2, ""#CBLANCO"Maletero del "#CROJO"%s", veh_getNameAsString(vehicleid));
		Dialog(playerid, dMaleteroVer, DIALOG_STYLE_LIST, Str2, Str, "Sacar", "Cerrar");
		SetPVarInt(playerid, "MALETERO_VEH", vehicleid);
		return 1;
	}
	return 0;
}

stock MostrarArmarioCasa(playerid, casa)
{
	if(IsValidHouse(casa))
	{
	    new
	        Str2[60],
			Str[sizeof(Str2) * MAX_LUGARES_CASA];

		Loop(i, MAX_LUGARES_CASA, 0)
		{
		    if(InfoCasa[casa][cArmarioObjeto][i])
			{
				format(Str2, sizeof(Str2), ""#CINVUSADO"(%d)	{FFFFFF}%s\n", i+1, GetObjectName(InfoCasa[casa][cArmarioObjeto][i], InfoCasa[casa][cArmarioData][i]));
			}
			else
			{
				format(Str2, sizeof(Str2), ""#CINVVACIO"(%d)	{FFFFFF}Vacio\n", i+1);
			}
			strcat(Str, Str2);
		}
		Dialog(playerid, dArmarioCasa, DIALOG_STYLE_LIST, ""#CBLANCO"Armario", Str, "Sacar", "Cerrar");
		SetPVarInt(playerid, "CASA_VER", casa);
		return 1;
	}
	return 0;
}

stock CargarPlantasMarihuana()
{
	new
	    str[20];

	Loop(i, MAX_PLANTAS, 0)
	{
	    A_Format(str, "Plantas/%d.ini", i);
	    if(fexist(str))
	    {
	        INI_ParseFile(str, "CargarPlanta_data", .bExtra = true, .extra = i);

	        if(InfoPlanta[i][plantaTipo] == PLANTA_MARIHUANA)
	        {
 				InfoPlanta[i][plantaObjID] = CreateDynamicObject(ID_OBJPLANTA, InfoPlanta[i][plantaX], InfoPlanta[i][plantaY], InfoPlanta[i][plantaZ], 180.0, 0.0, 0.0);
                ActualizarObjetoPlanta(i, 100.0);
			}
	        else if(InfoPlanta[i][plantaTipo] == PLANTA_COCA)
	        {
			 	InfoPlanta[i][plantaObjID] = CreateDynamicObject(ID_OBJPLANTA_COCA, InfoPlanta[i][plantaX], InfoPlanta[i][plantaY], InfoPlanta[i][plantaZ], 0.0, 0.0, float(random(360)));
				SetDynamicObjectMaterial(InfoPlanta[i][plantaObjID], 0, -1, "none", "none", 0xFF00FF00);
	        }
			InfoPlanta[i][plantaLabelID] = CreateDynamic3DTextLabel(" ", C_AZUL,  InfoPlanta[i][plantaX], InfoPlanta[i][plantaY], InfoPlanta[i][plantaZ], 3.0);
			ActualizarLabelPlanta(i);

			Iter_Add(Planta, i);
			continue;
		}
	}
	return printf("*- Plantas de marihuana cargadas.");
}

CALLBACK: CargarPlanta_data(i, name[], value[])
{
	INI_Float("x", InfoPlanta[i][plantaX]);
	INI_Float("y", InfoPlanta[i][plantaY]);
	INI_Float("z", InfoPlanta[i][plantaZ]);
	INI_Int("Gramos", InfoPlanta[i][plantaGramos]);
	INI_Int("Max", InfoPlanta[i][plantaMax]);
	INI_Int("Tipo", InfoPlanta[i][plantaTipo]);
	INI_String("Owner", InfoPlanta[i][plantaOwner], MAX_PLAYER_NAME);
	INI_Int("Casa", InfoPlanta[i][plantaCasaID]);
	return 1;
}

stock BorrarPlantaMarihuana (i)
{
	if(0 <= i < MAX_PLANTAS)
	{
		if(IsValidDynamic3DTextLabel(InfoPlanta[i][plantaLabelID]))
		    DestroyDynamic3DTextLabel(InfoPlanta[i][plantaLabelID]);

		if(IsValidDynamicObject(InfoPlanta[i][plantaObjID]))
		    DestroyDynamicObject(InfoPlanta[i][plantaObjID]);

		InfoPlanta[i][plantaTipo] = 0;
		InfoPlanta[i][plantaObjID] = 0;
		InfoPlanta[i][plantaLabelID] = Text3D:0;

		InfoPlanta[i][plantaX] = 0.0;
		InfoPlanta[i][plantaY] = 0.0;
		InfoPlanta[i][plantaZ] = 0.0;
		InfoPlanta[i][plantaGramos] = 0;
		InfoPlanta[i][plantaMax] = 0;
		InfoPlanta[i][plantaCasaID] = 0;
		alm(InfoPlanta[i][plantaMax], "");

		Iter_Remove(Planta, i);

		new
		    str[20];

		A_Format(str, "Plantas/%d.ini", i);
		fremove(str);
		return 1;
	}
	return 0;
}

stock ActualizarPlanta (i)
{
	if(0 <= i < MAX_PLANTAS)
	{
		new
		    str[20];

		A_Format(str, "Plantas/%d.ini", i);
		new
		    INI:Arch = INI_Open(str);
		INI_SetTag(Arch, "data");
		INI_WriteFloat(Arch, "x", InfoPlanta[i][plantaX]);
		INI_WriteFloat(Arch, "y", InfoPlanta[i][plantaY]);
		INI_WriteFloat(Arch, "z", InfoPlanta[i][plantaZ]);
		INI_WriteInt(Arch, "Gramos", InfoPlanta[i][plantaGramos]);
		INI_WriteInt(Arch, "Tipo", InfoPlanta[i][plantaTipo]);
		if(InfoPlanta[i][plantaTipo] == PLANTA_MARIHUANA)
		{
			INI_WriteInt(Arch, "Max", InfoPlanta[i][plantaMax]);
			INI_WriteInt(Arch, "Casa", InfoPlanta[i][plantaCasaID]);
			INI_WriteString(Arch, "Owner", InfoPlanta[i][plantaOwner]);
		}
		INI_Close(Arch);
		return 1;
	}
	return 0;
}

stock CrearPlantaMarihuana(CasaID, Float:x, Float:y, Float:z, owner[])
{
	new
	    Planta_id;

	for( ; Planta_id < MAX_PLANTAS; Planta_id++)
	{
	    if(InfoPlanta[Planta_id][plantaObjID] == 0)
	        break;
	}
	if(Planta_id >= MAX_PLANTAS-1)
	    return -1;

    InfoPlanta[Planta_id][plantaTipo] = PLANTA_MARIHUANA;

    InfoPlanta[Planta_id][plantaX] = x;
    InfoPlanta[Planta_id][plantaY] = y;
    InfoPlanta[Planta_id][plantaZ] = z;

    InfoPlanta[Planta_id][plantaCasaID] = CasaID;
	alm(InfoPlanta[Planta_id][plantaOwner], owner);

 	InfoPlanta[Planta_id][plantaObjID] = CreateDynamicObject(ID_OBJPLANTA, InfoPlanta[Planta_id][plantaX], InfoPlanta[Planta_id][plantaY], InfoPlanta[Planta_id][plantaZ], 180.0, 0.0, 0.0);
	InfoPlanta[Planta_id][plantaLabelID] = CreateDynamic3DTextLabel(" ", C_AZUL,  InfoPlanta[Planta_id][plantaX], InfoPlanta[Planta_id][plantaY], InfoPlanta[Planta_id][plantaZ], 3.0);
	ActualizarLabelPlanta(Planta_id);
	ActualizarObjetoPlanta(Planta_id, 100.0);
	Iter_Add(Planta, Planta_id);
	ActualizarPlanta(Planta_id);
	return Planta_id;
}

stock CrearPlantaCoca(Float:x, Float:y, Float:z)
{
	new
	    Planta_id;

	for( ; Planta_id < MAX_PLANTAS; Planta_id++)
	{
	    if(InfoPlanta[Planta_id][plantaObjID] == 0)
	        break;
	}
	if(Planta_id >= MAX_PLANTAS-1)
	    return -1;

    InfoPlanta[Planta_id][plantaTipo] = PLANTA_COCA;

    InfoPlanta[Planta_id][plantaX] = x;
    InfoPlanta[Planta_id][plantaY] = y;
    InfoPlanta[Planta_id][plantaZ] = z;

 	InfoPlanta[Planta_id][plantaObjID] = CreateDynamicObject(ID_OBJPLANTA_COCA, InfoPlanta[Planta_id][plantaX], InfoPlanta[Planta_id][plantaY], InfoPlanta[Planta_id][plantaZ], 0.0, 0.0, float(random(360)));
	SetDynamicObjectMaterial(InfoPlanta[Planta_id][plantaObjID], 0, -1, "none", "none", 0xFF00FF00);
	InfoPlanta[Planta_id][plantaLabelID] = CreateDynamic3DTextLabel("Cargando...", C_AZUL,  InfoPlanta[Planta_id][plantaX], InfoPlanta[Planta_id][plantaY], InfoPlanta[Planta_id][plantaZ]-0.5, 3.0);
	ActualizarLabelPlanta(Planta_id);
	Iter_Add(Planta, Planta_id);
	ActualizarPlanta(Planta_id);
	return Planta_id;
}

stock CrecerPlanta (i)
{
	if(0 <= i < MAX_PLANTAS)
	{
		if(InfoPlanta[i][plantaTipo] == PLANTA_MARIHUANA)
		{
			if(InfoPlanta[i][plantaMax] < MAX_GR_PLANTA_MARI)
			    InfoPlanta[i][plantaMax]++;

			if(InfoPlanta[i][plantaGramos] < MAX_GR_PLANTA_MARI)
			    InfoPlanta[i][plantaGramos]++;

			ActualizarLabelPlanta(i);
			ActualizarObjetoPlanta(i);
		}
		else if(InfoPlanta[i][plantaTipo] == PLANTA_COCA)
		{
		    new
		        gramos = InfoPlanta[i][plantaGramos] + 2;

			if(gramos > MAX_GR_PLANTA_COCA)
			    gramos = MAX_GR_PLANTA_COCA;

			InfoPlanta[i][plantaGramos] = gramos;

			ActualizarLabelPlanta(i);
		}
/*		else if(InfoPlanta[i][plantaTipo] == PLANTA_MARIHUANANATIVA)
		{
			if(InfoPlanta[i][plantaGramos] < MAX_GR_PLANTA_MARI)
			    InfoPlanta[i][plantaGramos]++;

			ActualizarLabelPlanta(i);
		}*/
		ActualizarPlanta(i);
		return 1;
	}
	return 0;
}


stock RegarPlanta (i)
{
	if(0 <= i < MAX_PLANTAS)
	{
		InfoPlanta[i][plantaRegada] = gettime() + (HORAS_EFECTO_RIEGO*3600);
		new
		    Handle[20];
		A_Format(Handle, "Plantas/%d.ini", i);
		new
		    INI:Arch = INI_Open(Handle);
		INI_SetTag(Arch, "data");
		INI_WriteInt(Arch, "Regada", InfoPlanta[i][plantaRegada]);
		INI_Close(Arch);
		return 1;
	}
	return 0;
}

stock ActualizarLabelPlanta(i)
{
	if(0 <= i < MAX_PLANTAS)
	{
	    if(IsValidDynamic3DTextLabel(InfoPlanta[i][plantaLabelID]))
	    {
			new
			    str[100];

			if(InfoPlanta[i][plantaTipo] == PLANTA_MARIHUANA)
				format(str, sizeof(str), "(%d) "#CVERDE"Planta de marihuana\n\n"#CAMARILLO"Crecimiento: %d%%\nGramos disponibles: %d/%d", i, InfoPlanta[i][plantaGramos] * 100 / MAX_GR_PLANTA_MARI, InfoPlanta[i][plantaGramos], InfoPlanta[i][plantaMax]);

			else if(InfoPlanta[i][plantaTipo] == PLANTA_COCA)
				format(str, sizeof(str), "(%d) "#CVERDE"Planta de coca\n\n"#CMARRON"Hojas: %d/%d", i, InfoPlanta[i][plantaGramos], MAX_GR_PLANTA_COCA);

//			else if(InfoPlanta[i][plantaTipo] == PLANTA_MARIHUANANATIVA)
//				format(str, sizeof(str), "(%d) "#CVERDE"Planta de marihuana\n\n"#CMARRON"Gramos: %d/%d", i, InfoPlanta[i][plantaGramos], MAX_GR_PLANTA_MARI);

			UpdateDynamic3DTextLabelText(InfoPlanta[i][plantaLabelID], C_BLANCO, str);
			return 1;
		}
	}
	return 0;
}

stock ActualizarObjetoPlanta(i, Float:speed = 0.04)
{
	if(0 <= i < MAX_PLANTAS)
	{
	    if(IsValidDynamicObject(InfoPlanta[i][plantaObjID]))
	    {
  			new
         		Float:Dif_z = InfoPlanta[i][plantaZ] - 1.0;

           	Dif_z += floatdiv(floatmul(InfoPlanta[i][plantaGramos], 1.5), float(MAX_GR_PLANTA_MARI));

			MoveDynamicObject(InfoPlanta[i][plantaObjID], InfoPlanta[i][plantaX], InfoPlanta[i][plantaY], Dif_z, speed, -1000.0, -1000.0, -1000.0);
			return 1;
		}
	}
	return 0;
}

stock CargarEstaciones()
{
	new
		str[32];

	Loop(i, MAX_ESTACIONES, 0)
	{
		A_Format(str, "Negocios/Estaciones/%d.ini", i);
		if(fexist(str))
		{
			INI_ParseFile(str, "CargarEstacion_data", .bExtra = true, .extra = i);
 			InfoEstacion[i][estObjID] = CreateDynamicObject(ID_OBJESTACION, InfoEstacion[i][estX], InfoEstacion[i][estY], InfoEstacion[i][estZ], 0.0, 0.0, InfoEstacion[i][estAngle]);
			InfoEstacion[i][estLabelID] = CreateDynamic3DTextLabel(" ", C_AZUL,  InfoEstacion[i][estX], InfoEstacion[i][estY], InfoEstacion[i][estZ]+1.5, 6.0);
			ActualizarLabelEstacion(i);
			Iter_Add(Estacion, i);
		}
	}
	return printf("*- Surtidores de combustible fueron cargados.");
}

CALLBACK: CargarEstacion_data(i, name[], value[])
{
	INI_Float("x", InfoEstacion[i][estX]);
	INI_Float("y", InfoEstacion[i][estY]);
	INI_Float("z", InfoEstacion[i][estZ]);
	INI_Float("angle", InfoEstacion[i][estAngle]);
	INI_Int("Litros", InfoEstacion[i][estLitros]);
	INI_Int("Neg", InfoEstacion[i][estNegID]);
	return 1;
}

stock CargarGraffitis()
{
	new
	    str[20];

	Loop(i, MAX_GRAFFITIS, 0)
	{
	    A_Format(str, "Graffitis/%d.ini", i);
	    if(fexist(str))
	    {
	        INI_ParseFile(str, "CargarGraffiti_data", .bExtra = true, .extra = i);
	        InfoGraffiti[i][grafObjID] = CreateDynamicObject(ID_OBJGRAFFITI, InfoGraffiti[i][grafX], InfoGraffiti[i][grafY], InfoGraffiti[i][grafZ], InfoGraffiti[i][grafRotX], InfoGraffiti[i][grafRotY], InfoGraffiti[i][grafRotZ]);
			SetDynamicObjectMaterialText(InfoGraffiti[i][grafObjID], 0, InfoGraffiti[i][grafTexto], OBJECT_MATERIAL_SIZE_256x64, GRAFFITI_FONT, 50, 1, InfoGraffiti[i][grafColor], 0, 0); //Capa uno (Texto)
			SetDynamicObjectMaterialText(InfoGraffiti[i][grafObjID], 1, "null", OBJECT_MATERIAL_SIZE_256x64, "Arial", 50, 1, 0, 0, 0); //Capa dos (Madera)
			Iter_Add(Graffiti, i);
		}
	}
	return printf("*- Sistema de Graffitis fue cargado.");
}

stock CargarMecanicos()
{
	new
	    path[] = "Facciones/Mecanicos/Precios.ini";

	if(fexist(path))
	{
		new
		    File:Arch = fopen(path, io_read),
			val[7],
			i;

		while(fread(Arch, val) && i < 14)
		    sscanf(val, "i", PrecioPiezaM[i++]);

		fclose(Arch);
	}

	MecaPizarron[0] = CreateDynamicObject(19358, 1621.577148,-2156.025634,14.364686,0.0, 0.0, 90.5); // "• Precio"
	SetDynamicObjectMaterialText(MecaPizarron[0], 0, "• Precios", 100, "Arial", 26, 0, 0xFFFFFFFF, 0, 0);

	MecaPizarron[1] = CreateDynamicObject(19358, 1621.594604,-2156.014160,14.324692,0.0, 0.0, 89.900016); // "_________"
	SetDynamicObjectMaterialText(MecaPizarron[1], 0, "________________", 100, "Arial", 24, 0, 0xFF00DB00, 0, 0);

    MecaPizarron[2] = CreateDynamicObject(19358, 1621.383422, -2156.016601,13.924692, 0.0, 0.0, 90.0); //Objeto Precios
	ActualizarPizarronMecanicos();

	CreateDynamicObject(19372, 1621.379760,-2156.013427,14.554690,0.0, 0.0, -90.100013);//Objeto de fondo
	return printf("*- Los datos del taller mecánico fueron cargados.");
}

stock ActualizarPizarronMecanicos()
{
	new
	    str[40], str2[sizeof(str)*14],
		File: Arch = fopen("Facciones/Mecanicos/Precios.ini", io_write);

	Loop(i, 14, 0)
	{
		format(str, 7, "%d\n", PrecioPiezaM[i]);
		fwrite(Arch, str);
	    A_Format(str, "   %d. %s $%d\n", i+1, GetComponentTypeName(i), PrecioPiezaM[i]);
	    strcat(str2, str);
	}
	fclose(Arch);
	SetDynamicObjectMaterialText(MecaPizarron[2], 0, str2, 100, "Arial", 15, 1, 0xFFFFFFFF, 0, 0);
	return 1;
}

// - Interiores
stock CargarInteriores()
{
	#pragma tabsize 0

	/*Aeropuerto: */INT_Aeropuerto = CrearInterior("Aeropuerto",5,1451.309,-2287.064,13.546,451.697,-1911.701,0.361,1061.143,358.737,2);
	/*Policía: */INT_LSPD = CrearInterior("Policía",6,1554.751,-1675.486,16.195,447.712,257.6577,1229.8461,1566.0165,270.501,2);
	/*Hospital: */INT_LSMD = CrearInterior("Hospital",3,1172.475,-1323.386,15.403,263.329,2031.2023,2920.1755,1104.7494,178.6538,4);
	/*Centro de Licencias: */CrearInterior("Centro de Licencias",3,1153.944,-1772.282,16.599,361.384,-2027.064,-104.276,1035.171,183.015,2);
	/*Ascensor: */CrearInterior("Ascensor",0,474.623,-1519.610,20.390,276.653,470.714,-1515.760,40.572,167.727,5);
	/*Televisión: */CrearInterior("Televisión",1,649.008,-1357.221,13.567,448.834,-1977.085,594.592,1055.585,0.228,3);
	/*Grotti: */CrearInterior("Grotti",17,563.988,-1293.556,17.248,354.951,-962.341,1934.683,28.923,292.730,2);
	/*Juzgado: */CrearInterior("Juzgado",6,1411.853,-1699.812,13.539,233.823,829.915,123.488,981.485,179.263,4);
	/*Mina de Huntle Charry: */INT_MinaHuntleCharry = CrearInterior("Mina de Huntle Charry",1,698.602,894.941,-38.713,450.236,-41.399,-1784.365,743.997,0.000,3);
	/*Minería: */CrearInterior("Minería",3,816.681,856.783,12.789,201.648,-767.269,1299.983,998.607,91.250,4);
	/*Puerta principal: */INT_Camioneros = CrearInterior("Puerta principal",2,2157.7886,-2302.1602,13.5020,533.400,2551.297,-1289.317,1060.984,7.062,0);
	/*Oficina: */INT_CamionerosOficina = CrearInterior("Oficina",2,2576.690,-1300.460,1060.984,450.923,2551.011,-1404.139,1061.157,357.778,0,2);
	/*Cárcel de Los Santos: */INT_CarcelCeldas = CrearInterior("Cárcel de Los Santos",4,2054.1284,-2095.8611,13.5469,180.307,1558.939,-1485.966,1066.339,270.083,4);
	/*Vestidor: */INT_VestidorLSPD = CrearInterior("Vestidor",5,289.4873,1256.7532,1566.0165,-180.391,-1802.122,-223.123,1066.009,180.299,5,INT_LSPD);
	/*Ejército: Base: */INT_BaseEjercito = CrearInterior("Ejército: Base",6,2729.462,-2449.056,17.593,-90.324,1328.8436,-1818.6526,1565.9984,175.0253,4,0);
	/*Oficina de Pagos: */CrearInterior("Oficina de Pagos",3,2104.1990,-2068.6799,17.6951,180.150,288.114,168.885,1007.171,179.264,1,0);
	/*Entrada al Canal: */INT_LSTV = CrearInterior("Entrada al Canal",1,732.447,-1349.081,13.508,-89.343,1263.954,-1215.123,1565.992,1.641,4,0);
	/*Casa Blanca: */INT_CasaBlanca = CrearInterior("Casa Blanca",0,1122.706,-2037.006,69.894,-89.672,1619.079,-1519.619,1365.992,266.626,4,0);
	/*Campo de Entrenamiento: */INT_EntrenamientoLSEM = CrearInterior("Campo de Entrenamiento",2,2721.245,-2380.045,17.340,175.433,2892.216,-1265.590,1266.734,267.237,4,0);
	/*Bodega:(EM) */INT_BodegaLSEM = CrearInterior("Bodega",6,1342.326,-1835.619,1565.995,-3.050,313.111,1895.710,1991.638,359.452,5,INT_BaseEjercito);
	/*Bodega:(PD) */INT_BodegaLSPD = CrearInterior("Bodega",7,300.9671,1215.4580,1562.4764,-3.050,313.111,1895.710,1991.638+200.0,359.452,5,INT_LSPD);
	/*Banco: */INT_Banco = CrearInterior("Banco",4,1479.679,-1776.198,19.067,-0.240,-832.528,1621.307,1004.750,271.133-180.0,4,0);
	/*Hitman: */INT_Hitman = CrearInterior("Hitman",7,284.518,-1509.683,24.921,-129.610,206.141,-1496.150,1008.309,84.417+180.0,4,0);

	#pragma tabsize 4
	return printf("*- Interiores fueron cargados.");
}

CALLBACK: OnPlayerRequestEnterInterior(playerid, interiorid)
{
	if(interiorid == INT_BodegaLSEM)
	{
	    if(InfoJugador[playerid][jLider] != IDLSEM)
	    {
			Error(playerid, "~r~No eres el líder de los militares");
			return 0;
		}
		CongelarEx(playerid, 4);
	}
	else if(interiorid == INT_BodegaLSPD)
	{
	    if(InfoJugador[playerid][jLider] != IDLSPD)
	    {
     		Error(playerid, "~r~No eres el líder de la policía");
     		return 0;
		}
		CongelarEx(playerid, 4);
	}
	else if(interiorid == INT_MinaHuntleCharry)
	{
		if(InfoJugador[playerid][jTrabajo] != ID_Minero)
		{
	 		Error(playerid, "~r~Sólo mineros pueden entrar.");
	 		return 0;
		}
	}
	return 1;
}

CALLBACK: OnPlayerRequestExitInterior(playerid, interiorid)
{
	if(interiorid == INT_CarcelEntrada)
	{
 		if(!EsLSPD(playerid) && !EsMilitar(playerid))
	    {
	        if(InfoJugador[playerid][jEncarcelado])
	        {
				new Float:Pos[3];
				GetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]);
		        foreach(Player,i)
		        {
		            if(EsLSPD(i) || EsMilitar(i) && GetPlayerInterior(i) == 2)
		            {
		                if(IsPlayerInRangeOfPoint(i,3,Pos[0],Pos[1],Pos[2]))
						{
		    				return 1;
						}
					}
				}
				Error(playerid,"¡No puedes salir de las carceles si no tienes un policia al lado!");
				return 0;
			}
		}
	}
	else if(interiorid == INT_CarcelCeldas)
	{
	    CongelarEx(playerid, 3);
	}
	else if(interiorid == INT_BodegaLSEM)
	{
	    if(InfoJugador[playerid][jLider] != IDLSEM)
	    {
     		Error(playerid, "~r~No eres el líder del ejército");
     		return 0;
		}

		CongelarEx(playerid, 4);
	}
	else if(interiorid == INT_VestidorLSPD)
	{
		CongelarEx (playerid, 6);
	}
	else if(interiorid == INT_BodegaLSPD)
	{
	    if(InfoJugador[playerid][jLider] != IDLSPD)
	    {
     		Error(playerid, "~r~No eres el líder de la policía");
     		return 0;
		}
		CongelarEx(playerid, 4);
	}
	else if(interiorid == INT_MinaHuntleCharry)
	{
		new
		    Pala = GetObjectAtWeapon(6);

		if(GetObject(playerid) == Pala || InfoJugador[playerid][jObjetoColgado] == Pala || GetPlayerWeapon(playerid) == 6)
		{
 			Error(playerid, "~r~No puedes salir con una pala, debes dejarla con ~b~/dejar pala");
 			return 0;
		}
	}
	return 1;
}

stock CrearInterior(const nombre_int[], interiorid, Float:x, Float:y, Float:z, Float:Angle1, Float:x1, Float:y1, Float:z1, Float:Angle2, Freeze, interiorid2 = 0)
{
	static i;

	i++;

	if(i >= MAX_INTERIORES)
	    return printf("[Error] Se debe incrementar MAX_INTERIORES;");

	InfoInterior[i][intEntrada_x] = x;
	InfoInterior[i][intEntrada_y] = y;
	InfoInterior[i][intEntrada_z] = z;
	InfoInterior[i][intEntrada_a] = Angle1;

	InfoInterior[i][intSalida_x] = x1;
	InfoInterior[i][intSalida_y] = y1;
	InfoInterior[i][intSalida_z] = z1;
	InfoInterior[i][intSalida_a] = Angle2;

	InfoInterior[i][intInt] = interiorid;
	InfoInterior[i][intInt2] = interiorid2;
	InfoInterior[i][intTiempo] = Freeze;

	new
	    string[100];

	strcat(string, nombre_int);
	strcat(string, "\n\n"#CINFO"Presione [Y]");

	CreateDynamicPickup(ID_PICKUPINT, 1, InfoInterior[i][intEntrada_x], InfoInterior[i][intEntrada_y], InfoInterior[i][intEntrada_z]);
	CreateDynamic3DTextLabel(string, C_BLANCO, InfoInterior[i][intEntrada_x], InfoInterior[i][intEntrada_y], InfoInterior[i][intEntrada_z]+0.7, 20.0);

	return i;
}

stock SetPlayerCustomInterior (playerid, interiorid, Float:x = 0.0, Float:y = 0.0, Float:z = 0.0, Float:angle = 0.0)
{
	if (0 <= interiorid < MAX_INTERIORES)
	{
		if (x == 0.0 && y == 0.0 && z == 0.0 && angle == 0.0)
		{
		    x = InfoInterior [interiorid][intSalida_x];
		    y = InfoInterior [interiorid][intSalida_y];
		    z = InfoInterior [interiorid][intSalida_z];
		    angle = InfoInterior [interiorid][intSalida_a];
		}

		if(InfoInterior[interiorid][intTiempo])
		{
		    CongelarEx (playerid);
		    TextDrawShowForPlayer (playerid, Vendado);
		    TextDrawShowForPlayer (playerid, Cargando);
			SetTimerEx("CargoObjetos", InfoInterior[interiorid][intTiempo]*1000, false, "i", playerid);
		}

		SetPlayerVirtualWorld (playerid, interiorid + INT_CUSTOM_VW);
		SetPlayerFacingAngle (playerid, angle);
		SetPlayerInterior (playerid, InfoInterior [interiorid][intInt]);
		SetPlayerPos (playerid, x, y, z);
		SetCameraBehindPlayer (playerid);
		return 1;
	}
	return 0;
}

stock DestroyIntMap (playerid)
{
	Loop(i, MAX_OBJETOS_INTERIOR, 0)
	{
	    if (IntObject[playerid][i] != INVALID_OBJECT_ID)
	    {
	        DestroyPlayerObject (playerid, IntObject[playerid][i]);
			IntObject[playerid][i] = INVALID_OBJECT_ID;
		}
	}
	DeletePVar (playerid, "mapIntL");
	return 1;
}

stock PreloadMap (playerid, map)
{

	new
	    index;

	#define CreateDynamicObject( IntObject[playerid][index++] = CreatePlayerObject(playerid,
	#define SetMaterialEx(		 SetPlayerObjectMaterial(playerid,IntObject[playerid][index-1],

 	if (map == INT_Camioneros)
 	{
		CreateDynamicObject(1508, 2551.30542, -1290.52661, 1061.57776,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(643, 2566.55688, -1290.42822, 1060.44116,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(643, 2568.09546, -1294.57690, 1060.44116,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(643, 2569.77710, -1291.93420, 1060.44116,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(643, 2565.28735, -1293.04895, 1060.44116,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(643, 2565.60059, -1296.38037, 1060.44116,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(643, 2571.50000, -1294.62939, 1060.44116,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(643, 2569.14551, -1288.95740, 1060.44116,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1557, 2577.19580, -1302.87805, 1061.40369,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1557, 2577.30640, -1298.87634, 1059.97986,   0.00000, 0.00000, -87.59999);
		CreateDynamicObject(1557, 2577.40210, -1301.90198, 1059.97986,   0.00000, 0.00000, -268.68008);
		CreateDynamicObject(1557, 2577.40576, -1301.74670, 1059.97986,   0.00000, 0.00000, -449.93979);
		CreateDynamicObject(643, 2569.89893, -1297.11743, 1060.44116,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1508, 2577.25830, -1288.94934, 1065.79529,   0.00000, 0.00000, 179.85060);
		CreateDynamicObject(1491, 2577.31665, -1282.88428, 1064.36035,   0.00000, 0.00000, -89.63998);
		CreateDynamicObject(1491, 2577.34521, -1285.88379, 1064.36035,   0.00000, 0.00000, -270.30017);
		CreateDynamicObject(1318, 2577.23511, -1298.21631, 1062.20300,   -90.00000, 360.00000, -0.04000);
		CreateDynamicObject(1318, 2577.22388, -1302.58252, 1062.20300,   -90.00000, 360.00000, -180.64050);
 	}
	else if (map == INT_CamionerosOficina)
	{
		CreateDynamicObject(17324, 2565.90576, -1393.23450, 1059.95605,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(17324, 2565.92725, -1393.19519, 1061.89612,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(17324, 2565.92725, -1393.19519, 1063.81604,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(17324, 2565.92725, -1393.19519, 1065.73608,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(17324, 2555.90405, -1412.28821, 1059.95605,   0.00000, 0.00000, -90.78002);
		CreateDynamicObject(17324, 2555.90405, -1412.28821, 1061.85596,   0.00000, 0.00000, -90.78000);
		CreateDynamicObject(17324, 2555.90405, -1412.28821, 1063.77612,   0.00000, 0.00000, -90.78000);
		CreateDynamicObject(17324, 2555.90405, -1412.28821, 1065.71606,   0.00000, 0.00000, -90.78000);
		CreateDynamicObject(17324, 2537.15698, -1394.71814, 1059.95605,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(17324, 2537.15698, -1394.71814, 1061.87610,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(17324, 2537.15649, -1394.73804, 1063.77612,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(17324, 2537.14673, -1394.73535, 1065.69604,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(17324, 2551.30054, -1386.12891, 1059.97607,   0.00000, 0.00000, -90.78000);
		CreateDynamicObject(17324, 2551.10620, -1386.12891, 1061.91614,   0.00000, 0.00000, -90.78000);
		CreateDynamicObject(17324, 2551.10620, -1386.12891, 1063.83606,   0.00000, 0.00000, -90.78000);
		CreateDynamicObject(17324, 2551.10620, -1386.12891, 1065.71606,   0.00000, 0.00000, -90.78000);
		CreateDynamicObject(14412, 2551.01514, -1396.57373, 1069.50122,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(17324, 2555.90405, -1412.28821, 1067.61609,   0.00000, 0.00000, -90.78000);
		CreateDynamicObject(17324, 2555.92407, -1412.28821, 1069.49609,   0.00000, 0.00000, -90.78000);
		CreateDynamicObject(17324, 2565.92725, -1393.19519, 1067.57605,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(17324, 2565.92725, -1393.19519, 1069.47607,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(17324, 2550.82910, -1386.12891, 1067.57605,   0.00000, 0.00000, -90.78000);
		CreateDynamicObject(17324, 2551.13794, -1386.12891, 1069.43604,   -0.02000, 0.00000, -90.78000);
		CreateDynamicObject(17324, 2537.14673, -1394.73535, 1067.61609,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(17324, 2537.14673, -1394.73535, 1069.51611,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2284, 2554.68604, -1393.85120, 1063.52405,   0.00000, 0.00000, 359.37781);
		CreateDynamicObject(2286, 2552.00464, -1393.38708, 1063.97009,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2287, 2549.76025, -1393.78625, 1063.65698,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2289, 2547.02783, -1393.31995, 1063.96704,   0.00000, 0.00000, -0.78000);
		CreateDynamicObject(2008, 2548.52808, -1395.43311, 1060.15027,   0.00000, 0.00000, -179.63977);
		CreateDynamicObject(2164, 2557.42700, -1393.46155, 1060.15320,   0.00000, 0.00000, -0.71994);
		CreateDynamicObject(2164, 2555.68604, -1393.40308, 1060.15320,   0.00000, 0.00000, -0.71994);
		CreateDynamicObject(2164, 2553.94238, -1393.38452, 1060.15320,   0.00000, 0.00000, -0.71994);
		CreateDynamicObject(2164, 2552.20093, -1393.41418, 1060.15320,   0.00000, 0.00000, -0.71994);
		CreateDynamicObject(2164, 2550.43945, -1393.39417, 1060.15320,   0.00000, 0.00000, -0.71994);
		CreateDynamicObject(2356, 2547.66528, -1394.14526, 1060.15308,   0.00000, 0.00000, -180.35994);
		CreateDynamicObject(1808, 2544.62402, -1393.50415, 1060.11035,   0.00000, 0.00000, 38.52000);
		CreateDynamicObject(1828, 2551.01343, -1404.10632, 1060.13501,   0.00000, 0.00000, -89.10000);
		CreateDynamicObject(1557, 2549.59937, -1405.03772, 1060.11145,   0.00000, 0.00000, -0.78000);
		CreateDynamicObject(1557, 2552.58813, -1405.09009, 1060.11145,   0.00000, 0.00000, -180.95990);
		CreateDynamicObject(2202, 2546.53467, -1395.54077, 1060.11121,   0.00000, 0.00000, -180.35980);
		CreateDynamicObject(2239, 2549.49438, -1395.75647, 1060.15173,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1742, 2558.84937, -1395.85034, 1060.12329,   0.00000, 0.00000, -90.30000);
		CreateDynamicObject(1742, 2558.84937, -1397.27026, 1060.12329,   0.00000, 0.00000, -90.30000);
		CreateDynamicObject(1742, 2558.84937, -1398.71033, 1060.12329,   0.00000, 0.00000, -90.30000);
		CreateDynamicObject(1742, 2558.84937, -1400.17029, 1060.12329,   0.00000, 0.00000, -90.30000);
		CreateDynamicObject(1742, 2558.84937, -1401.63025, 1060.12329,   0.00000, 0.00000, -90.30000);
		CreateDynamicObject(1742, 2558.84937, -1403.05029, 1060.12329,   0.00000, 0.00000, -90.30000);
		CreateDynamicObject(1742, 2558.84937, -1404.47034, 1060.12329,   0.00000, 0.00000, -90.30000);
		CreateDynamicObject(1742, 2558.84937, -1394.47034, 1060.12329,   0.00000, 0.00000, -90.30000);
		CreateDynamicObject(2067, 2548.73486, -1393.50574, 1060.11316,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2067, 2548.15430, -1393.51111, 1060.11316,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2067, 2547.57373, -1393.50879, 1060.11316,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2067, 2549.29614, -1393.48621, 1060.11316,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2199, 2544.39575, -1398.31482, 1060.10791,   0.00000, 0.00000, 90.40390);
		CreateDynamicObject(2199, 2544.41040, -1399.67737, 1060.10791,   0.00000, 0.00000, 90.40390);
		CreateDynamicObject(2199, 2544.40332, -1401.03760, 1060.10791,   0.00000, 0.00000, 90.40390);
		CreateDynamicObject(2199, 2544.41968, -1402.37793, 1060.10791,   0.00000, 0.00000, 90.40390);
		CreateDynamicObject(2199, 2544.42627, -1403.73706, 1060.10791,   0.00000, 0.00000, 90.40390);
		CreateDynamicObject(1720, 2548.48340, -1396.96033, 1060.11279,   0.00000, 0.00000, -178.85980);
		CreateDynamicObject(1720, 2547.57715, -1396.98865, 1060.11279,   0.00000, 0.00000, -178.85980);
		CreateDynamicObject(2008, 2554.11890, -1395.30200, 1060.15027,   0.00000, 0.00000, -179.63977);
		CreateDynamicObject(2356, 2553.70483, -1394.05225, 1060.15308,   0.00000, 0.00000, -180.35994);
		CreateDynamicObject(2239, 2555.47144, -1395.58716, 1060.15173,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2202, 2552.37451, -1395.35022, 1060.11121,   0.00000, 0.00000, -180.35980);
		CreateDynamicObject(2571, 2553.03198, -1398.92590, 1060.15222,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2571, 2555.97485, -1400.79260, 1060.15222,   0.00000, 0.00000, -186.54001);
	}
	else if (map == INT_BodegaLSPD)
	{
		CreateDynamicObject(14576, 313.19299, 1888.72278, 1998.70825+200.0,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19448, 313.34473, 1896.27075, 1992.30774+200.0,   0.00000, 0.00000, -90.06000);
		CreateDynamicObject(1506, 312.33890, 1896.11914, 1990.54614+200.0,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19386, 313.07870, 1896.20142, 1992.26758+200.0,   0.00000, 0.00000, -90.00010);
		CreateDynamicObject(19462, 311.98120, 1876.03491, 1991.66882+200.0,   0.00000, 0.00000, -89.93996);
		CreateDynamicObject(1506, 312.46271, 1876.09375, 1990.48987+200.0,   0.00000, 0.00000, 0.00000);
	}
	else if (map == INT_BodegaLSEM)
	{
		CreateDynamicObject(14576, 313.19299, 1888.72278, 1998.70825,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19448, 313.34473, 1896.27075, 1992.30774,   0.00000, 0.00000, -90.06000);
		CreateDynamicObject(1506, 312.33890, 1896.11914, 1990.54614,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19386, 313.07870, 1896.20142, 1992.26758,   0.00000, 0.00000, -90.00010);
		CreateDynamicObject(19462, 311.98120, 1876.03491, 1991.66882,   0.00000, 0.00000, -89.93996);
		CreateDynamicObject(1506, 312.46271, 1876.09375, 1990.48987,   0.00000, 0.00000, 0.00000);
	}
	else if (map == INT_CasaBlanca)
	{
		// Suelo
		CreateDynamicObject(8411, 1588.79431, -1516.02771, 1300.00000,   0.00000, 0.00000, 0.00000);
		SetMaterialEx(1, 15033, "vegassavesmal", "AH_flroortile4");

		CreateDynamicObject(8411, 1588.79468, -1490.59961, 1300.00000,   0.00000, 0.00000, 0.00000);
		SetMaterialEx(1, 15033, "vegassavesmal", "AH_flroortile4");

		CreateDynamicObject(8411, 1583.89319, -1472.90100, 1304.36108,   0.00000, 0.00000, 0.00000);
		SetMaterialEx(1, 15033, "vegassavesmal", "AH_flroortile4");

		// Techo
		CreateDynamicObject(8411, 1583.53418, -1481.66174, 1437.76062,   0.00000, -180.00000, 0.00000);
		SetMaterialEx(1, 6322, "law2_roadsb", "rodeo3sjm");

		CreateDynamicObject(8411, 1588.90283, -1506.96997, 1433.39990,   0.00000, -180.00000, 0.00000);
		SetMaterialEx(1, 6322, "law2_roadsb", "rodeo3sjm");

		CreateDynamicObject(8411, 1588.89844, -1532.41907, 1433.39990,   0.00000, -180.00000, 0.00000);
		SetMaterialEx(1, 6322, "law2_roadsb", "rodeo3sjm");

		CreateDynamicObject(19462, 1619.52625, -1524.01746, 1366.68018,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19462, 1619.53015, -1514.38513, 1366.68018,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19462, 1619.51013, -1504.74475, 1366.68018,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19462, 1614.80212, -1528.74866, 1366.68018,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19462, 1605.18298, -1528.74646, 1366.68018,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19462, 1595.59473, -1528.73779, 1366.68018,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19462, 1614.81372, -1509.57520, 1366.68018,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19462, 1605.19971, -1509.58459, 1366.68018,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19462, 1595.61804, -1509.57581, 1366.68018,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19386, 1589.22168, -1509.57922, 1366.68835,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19462, 1595.68250, -1514.43030, 1364.66199,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19386, 1595.69690, -1520.82947, 1366.71375,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19462, 1595.69019, -1527.13354, 1366.66199,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19462, 1595.68250, -1514.43030, 1369.42212,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1502, 1595.72729, -1520.03918, 1364.94995,   0.00000, 0.00000, -90.54000);
		CreateDynamicObject(19462, 1587.69470, -1514.32666, 1366.68018,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19462, 1585.98071, -1528.76306, 1366.68018,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(3399, 1588.64758, -1490.57690, 1367.12854,   0.00000, 0.00000, 89.34000);
		CreateDynamicObject(19462, 1587.69043, -1523.88525, 1366.68018,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19462, 1590.83740, -1504.67627, 1366.68018,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19386, 1590.84607, -1498.38025, 1366.68835,   0.00000, 0.00000, -180.06020);
		CreateDynamicObject(19462, 1587.70862, -1495.34045, 1366.68018,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19462, 1590.85962, -1492.00818, 1366.68018,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19450, 1590.88171, -1491.99268, 1370.18018,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19462, 1587.70862, -1485.76050, 1366.68018,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19450, 1587.70862, -1485.76050, 1370.18018,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19450, 1590.88367, -1482.56458, 1370.18018,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19450, 1582.97974, -1481.02917, 1370.18018,   0.00000, 0.00000, -89.93994);
		CreateDynamicObject(19450, 1586.48853, -1477.74915, 1370.18018,   0.00000, 0.00000, -89.93994);
		CreateDynamicObject(19358, 1570.61523, -1477.78687, 1370.18762,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(19462, 1588.75854, -1485.72791, 1367.60022,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19462, 1588.75854, -1485.72791, 1364.10022,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19462, 1589.86133, -1489.97375, 1364.92017,   0.00000, -90.00000, -90.00000);
		CreateDynamicObject(19462, 1589.86865, -1489.76062, 1366.68018,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19462, 1594.61328, -1494.45581, 1366.68018,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19462, 1594.60278, -1492.77075, 1368.34082,   0.00000, -90.00000, -90.00000);
		CreateDynamicObject(19462, 1594.65173, -1489.35168, 1368.34082,   0.00000, -90.00000, -90.00000);
		CreateDynamicObject(19462, 1594.76343, -1485.89563, 1368.34082,   0.00000, -90.00000, -90.00000);
		CreateDynamicObject(19450, 1586.57214, -1494.86572, 1370.18018,   0.00000, 0.00000, -89.93994);
		CreateDynamicObject(19450, 1587.71362, -1495.17493, 1370.18018,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19450, 1569.12427, -1485.69360, 1370.18018,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19450, 1564.43054, -1485.40759, 1370.18018,   0.00000, 0.00000, -89.93994);
		CreateDynamicObject(19450, 1554.90710, -1485.42224, 1370.18018,   0.00000, 0.00000, -89.93994);
		CreateDynamicObject(19450, 1564.84143, -1477.80627, 1370.18018,   0.00000, 0.00000, -89.93994);
		CreateDynamicObject(19450, 1555.26672, -1477.81970, 1370.18018,   0.00000, 0.00000, -89.93994);
		CreateDynamicObject(19450, 1553.01025, -1481.68542, 1370.18018,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19462, 1601.80664, -1504.77612, 1366.68018,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19462, 1601.77344, -1495.44800, 1366.68018,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19462, 1604.11243, -1494.43530, 1366.68018,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19462, 1567.46899, -1482.26477, 1369.27014,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19462, 1563.96875, -1482.13586, 1369.27014,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19462, 1560.48145, -1481.78223, 1369.27014,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19462, 1556.99182, -1481.28137, 1369.27014,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19462, 1553.58447, -1481.10657, 1369.27014,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(1557, 1619.50806, -1518.82593, 1364.98901,   0.00000, 0.00000, -90.48000);
		CreateDynamicObject(630, 1619.00818, -1510.14246, 1365.98633,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(630, 1619.10364, -1528.42139, 1365.98633,   0.00000, 0.00000, 16.68000);
		CreateDynamicObject(1764, 1607.69275, -1528.19861, 1364.98804,   0.00000, 0.00000, -180.42006);
		CreateDynamicObject(1764, 1604.04419, -1528.14929, 1364.98804,   0.00000, 0.00000, -180.42006);
		CreateDynamicObject(1764, 1599.77856, -1528.27979, 1364.98804,   0.00000, 0.00000, -180.42006);
		CreateDynamicObject(1764, 1611.30078, -1528.13525, 1364.98804,   0.00000, 0.00000, -180.42006);
		CreateDynamicObject(1764, 1615.10681, -1528.15698, 1364.98804,   0.00000, 0.00000, -180.42006);
		CreateDynamicObject(2161, 1587.78088, -1528.18518, 1364.98938,   0.00000, 0.00000, 89.94000);
		CreateDynamicObject(2161, 1587.78088, -1526.86523, 1364.98938,   0.00000, 0.00000, 89.94000);
		CreateDynamicObject(2161, 1587.78088, -1525.54517, 1364.98938,   0.00000, 0.00000, 89.94000);
		CreateDynamicObject(2161, 1587.78088, -1524.22522, 1364.98938,   0.00000, 0.00000, 89.94000);
		CreateDynamicObject(2161, 1587.78088, -1522.92505, 1364.98938,   0.00000, 0.00000, 89.94000);
		CreateDynamicObject(2161, 1587.78088, -1521.60510, 1364.98938,   0.00000, 0.00000, 89.94000);
		CreateDynamicObject(2161, 1587.78088, -1520.28516, 1364.98938,   0.00000, 0.00000, 89.94000);
		CreateDynamicObject(2161, 1587.78088, -1518.96509, 1364.98938,   0.00000, 0.00000, 89.94000);
		CreateDynamicObject(2161, 1587.78088, -1517.64514, 1364.98938,   0.00000, 0.00000, 89.94000);
		CreateDynamicObject(2161, 1587.78088, -1516.32507, 1364.98938,   0.00000, 0.00000, 89.94000);
		CreateDynamicObject(2161, 1587.78088, -1515.00513, 1364.98938,   0.00000, 0.00000, 89.94000);
		CreateDynamicObject(2161, 1587.78088, -1513.68506, 1364.98938,   0.00000, 0.00000, 89.94000);
		CreateDynamicObject(2161, 1587.78088, -1512.36499, 1364.98938,   0.00000, 0.00000, 89.94000);
		CreateDynamicObject(2161, 1587.78088, -1511.04504, 1364.98938,   0.00000, 0.00000, 89.94000);
		CreateDynamicObject(2197, 1591.16345, -1527.22241, 1364.98645,   0.00000, 0.00000, -181.43961);
		CreateDynamicObject(2197, 1591.81946, -1527.24219, 1364.98645,   0.00000, 0.00000, -181.43961);
		CreateDynamicObject(2197, 1592.47986, -1527.25806, 1364.98645,   0.00000, 0.00000, -181.43961);
		CreateDynamicObject(2199, 1592.48315, -1509.70459, 1364.96838,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2199, 1591.12317, -1509.70459, 1364.96838,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2569, 1595.08911, -1516.08826, 1365.10547,   0.00000, 0.00000, -90.18000);
		CreateDynamicObject(2569, 1595.08911, -1512.82825, 1365.10547,   0.00000, 0.00000, -90.18000);
		CreateDynamicObject(2569, 1595.08911, -1509.66846, 1365.10547,   0.00000, 0.00000, -90.18000);
		CreateDynamicObject(1806, 1593.71851, -1514.63440, 1364.98950,   0.00000, 0.00000, -94.32001);
		CreateDynamicObject(1806, 1593.68018, -1517.54944, 1364.98950,   0.00000, 0.00000, -94.32001);
		CreateDynamicObject(1806, 1593.69531, -1511.05103, 1364.98950,   0.00000, 0.00000, -94.32001);
		CreateDynamicObject(2606, 1595.35620, -1510.66760, 1367.90405,   0.00000, 0.00000, -89.93990);
		CreateDynamicObject(2606, 1595.35620, -1512.62756, 1367.90405,   0.00000, 0.00000, -89.93990);
		CreateDynamicObject(2606, 1595.35620, -1514.58765, 1367.90405,   0.00000, 0.00000, -89.93990);
		CreateDynamicObject(2606, 1595.35620, -1516.54761, 1367.90405,   0.00000, 0.00000, -89.93990);
		CreateDynamicObject(2606, 1595.35620, -1518.00757, 1367.90405,   0.00000, 0.00000, -89.93990);
		CreateDynamicObject(2608, 1594.09094, -1528.04773, 1365.59180,   0.00000, 0.00000, -180.18010);
		CreateDynamicObject(2608, 1589.55139, -1528.11084, 1365.59180,   0.00000, 0.00000, -180.18010);
		CreateDynamicObject(2161, 1587.78088, -1528.18518, 1366.32935,   0.00000, 0.00000, 89.94000);
		CreateDynamicObject(2161, 1587.78088, -1526.86523, 1366.32935,   0.00000, 0.00000, 89.94000);
		CreateDynamicObject(2161, 1587.78088, -1525.54517, 1366.32935,   0.00000, 0.00000, 89.94000);
		CreateDynamicObject(2161, 1587.78088, -1524.22522, 1366.32935,   0.00000, 0.00000, 89.94000);
		CreateDynamicObject(2161, 1587.78088, -1522.92505, 1366.32935,   0.00000, 0.00000, 89.94000);
		CreateDynamicObject(2161, 1587.78088, -1521.60510, 1366.32935,   0.00000, 0.00000, 89.94000);
		CreateDynamicObject(2161, 1587.78088, -1520.28516, 1366.32935,   0.00000, 0.00000, 89.94000);
		CreateDynamicObject(2161, 1587.78088, -1518.96509, 1366.32935,   0.00000, 0.00000, 89.94000);
		CreateDynamicObject(2161, 1587.78088, -1517.64514, 1366.32935,   0.00000, 0.00000, 89.94000);
		CreateDynamicObject(2161, 1587.78088, -1516.32507, 1366.32935,   0.00000, 0.00000, 89.94000);
		CreateDynamicObject(2161, 1587.78088, -1515.00513, 1366.32935,   0.00000, 0.00000, 89.94000);
		CreateDynamicObject(2161, 1587.78088, -1513.68506, 1366.32935,   0.00000, 0.00000, 89.94000);
		CreateDynamicObject(2161, 1587.78088, -1512.36499, 1366.32935,   0.00000, 0.00000, 89.94000);
		CreateDynamicObject(2161, 1587.78088, -1511.04504, 1366.32935,   0.00000, 0.00000, 89.94000);
		CreateDynamicObject(2737, 1595.56836, -1525.17468, 1366.86987,   0.00000, 0.00000, -90.00010);
		CreateDynamicObject(1764, 1611.30078, -1510.05530, 1364.98804,   0.00000, 0.00000, -360.00000);
		CreateDynamicObject(1764, 1607.78076, -1510.05530, 1364.98804,   0.00000, 0.00000, -360.00000);
		CreateDynamicObject(1764, 1604.18079, -1510.05530, 1364.98804,   0.00000, 0.00000, -360.00000);
		CreateDynamicObject(1764, 1600.44080, -1510.05530, 1364.98804,   0.00000, 0.00000, -360.00000);
		CreateDynamicObject(1764, 1597.08081, -1510.05530, 1364.98804,   0.00000, 0.00000, -360.00000);
		CreateDynamicObject(2002, 1596.12842, -1528.40942, 1364.88306,   0.00000, 0.00000, -195.95990);
		CreateDynamicObject(2117, 1595.79553, -1504.04065, 1364.98877,   0.00000, 0.00000, -91.26003);
		CreateDynamicObject(2117, 1595.83032, -1502.06201, 1364.98877,   0.00000, 0.00000, -91.26000);
		CreateDynamicObject(2117, 1595.87024, -1500.08191, 1364.98877,   0.00000, 0.00000, -91.26000);
		CreateDynamicObject(2117, 1595.91016, -1498.10181, 1364.98877,   0.00000, 0.00000, -91.26000);
		CreateDynamicObject(2076, 1595.18665, -1500.86804, 1368.32703,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1671, 1595.89465, -1496.72021, 1365.43054,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1721, 1597.35327, -1498.26929, 1364.99072,   0.00000, 0.00000, 88.74000);
		CreateDynamicObject(1721, 1597.35327, -1499.80933, 1364.99072,   0.00000, 0.00000, 88.74000);
		CreateDynamicObject(1721, 1597.35327, -1501.38928, 1364.99072,   0.00000, 0.00000, 88.74000);
		CreateDynamicObject(1721, 1597.35327, -1502.76929, 1364.99072,   0.00000, 0.00000, 88.74000);
		CreateDynamicObject(1721, 1597.35327, -1504.62488, 1364.99072,   0.00000, 0.00000, 88.74000);
		CreateDynamicObject(1671, 1595.75977, -1506.40161, 1365.43054,   0.00000, 0.00000, -181.31995);
		CreateDynamicObject(1721, 1594.21338, -1504.54688, 1364.99072,   0.00000, 0.00000, -91.25996);
		CreateDynamicObject(1721, 1594.19556, -1502.79602, 1364.99072,   0.00000, 0.00000, -91.26000);
		CreateDynamicObject(1721, 1594.19556, -1501.31604, 1364.99072,   0.00000, 0.00000, -91.26000);
		CreateDynamicObject(1721, 1594.19556, -1499.85596, 1364.99072,   0.00000, 0.00000, -91.26000);
		CreateDynamicObject(1721, 1594.19556, -1498.57605, 1364.99072,   0.00000, 0.00000, -91.26000);
		CreateDynamicObject(2894, 1596.01074, -1497.93152, 1365.79321,   0.00000, 0.00000, -181.49980);
		CreateDynamicObject(2289, 1601.67920, -1506.52808, 1366.98950,   0.00000, 0.00000, -90.54010);
		CreateDynamicObject(2288, 1601.19568, -1498.82385, 1366.84729,   0.00000, 0.00000, -89.76005);
		CreateDynamicObject(948, 1590.35742, -1494.99060, 1364.98950,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2195, 1590.41895, -1478.20496, 1369.96960,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2240, 1568.74182, -1484.99316, 1369.83997,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2279, 1553.63672, -1484.05859, 1370.96594,   0.00000, 0.00000, 89.70000);
		CreateDynamicObject(2108, 1557.68066, -1479.95422, 1369.35718,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1822, 1563.91992, -1483.31458, 1369.35107,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1892, 1570.94824, -1478.92065, 1369.35181,   0.00000, 0.00000, -90.17999);
		CreateDynamicObject(1734, 1558.11963, -1481.45593, 1372.22668,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1707, 1565.25476, -1484.67444, 1369.27795,   0.00000, 0.00000, -179.03990);
		CreateDynamicObject(1742, 1554.04712, -1485.46643, 1369.33765,   0.00000, 0.00000, -179.70000);
		CreateDynamicObject(1742, 1555.46704, -1485.46643, 1369.33765,   0.00000, 0.00000, -179.70000);
		CreateDynamicObject(1742, 1556.88708, -1485.46643, 1369.33765,   0.00000, 0.00000, -179.70000);
		CreateDynamicObject(1744, 1569.19763, -1481.75354, 1370.52539,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(1744, 1569.19763, -1483.23364, 1370.52539,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(1744, 1569.19763, -1484.69360, 1370.52539,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(2604, 1554.02075, -1479.82654, 1369.76184,   0.00000, 0.00000, 90.60002);
		CreateDynamicObject(2002, 1562.49023, -1484.79077, 1369.35034,   0.00000, 0.00000, -181.56000);
		CreateDynamicObject(2297, 1563.91772, -1478.10339, 1369.32495,   0.00000, 0.00000, -44.34002);
		CreateDynamicObject(2008, 1557.56787, -1481.18030, 1369.35718,   0.00000, 0.00000, -89.58002);
		CreateDynamicObject(1715, 1556.12329, -1482.05200, 1369.35815,   0.00000, 0.00000, 89.33999);
		CreateDynamicObject(2614, 1553.27466, -1482.44653, 1370.80322,   0.00000, 0.00000, 88.02000);
		CreateDynamicObject(2108, 1557.68066, -1483.57422, 1369.35718,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2174, 1560.82202, -1478.36804, 1369.32434,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1502, 1569.17700, -1480.15808, 1369.31641,   0.00000, 0.00000, 89.40000);
		CreateDynamicObject(1502, 1590.87598, -1499.16028, 1364.94275,   0.00000, 0.00000, 90.24010);
		CreateDynamicObject(1502, 1588.46606, -1509.60059, 1364.98328,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19462, 1590.04065, -1494.40637, 1370.14026,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19370, 1587.70862, -1507.93970, 1366.66785,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19386, 1587.69055, -1501.67456, 1366.68835,   0.00000, 0.00000, -180.06020);
		CreateDynamicObject(19370, 1587.70862, -1504.73962, 1366.66785,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19462, 1582.96729, -1505.84290, 1366.68018,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19462, 1582.78223, -1504.17749, 1366.68018,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19462, 1582.98364, -1499.58313, 1366.68018,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(2514, 1585.70166, -1505.35400, 1364.98950,   0.00000, 0.00000, -178.56000);
		CreateDynamicObject(2520, 1584.37390, -1500.34924, 1364.99036,   0.00000, 0.00000, -270.00003);
		CreateDynamicObject(2523, 1583.38489, -1504.17761, 1364.99634,   0.00000, 0.00000, 90.41998);
		CreateDynamicObject(1502, 1587.70166, -1502.46021, 1364.94275,   0.00000, 0.00000, 90.24010);
		CreateDynamicObject(19358, 1573.83521, -1477.78711, 1370.18762,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(19358, 1576.99524, -1477.78711, 1370.18762,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(19388, 1580.14307, -1477.75000, 1371.07166,   0.00000, 0.00000, -89.93990);
		CreateDynamicObject(19450, 1575.54883, -1472.98645, 1370.18018,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19450, 1584.33130, -1473.00525, 1370.18018,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19450, 1579.83826, -1470.14648, 1370.18018,   0.00000, 0.00000, -89.93994);
		CreateDynamicObject(14446, 1579.86951, -1472.06348, 1369.92859,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2251, 1564.26038, -1482.80298, 1370.64880,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(14705, 1584.06470, -1470.41833, 1369.57166,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2297, 1577.87390, -1477.51099, 1369.32495,   0.00000, 0.00000, -224.34019);
		CreateDynamicObject(19358, 1576.63367, -1481.02014, 1370.17761,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(19388, 1573.45947, -1481.04651, 1371.07166,   0.00000, 0.00000, -89.93990);
		CreateDynamicObject(19358, 1570.65076, -1481.03406, 1370.18762,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(14393, 1573.60168, -1489.87256, 1371.59094,   0.00000, 0.00000, 89.88000);
		CreateDynamicObject(8411, 1549.71155, -1498.26025, 1304.36108,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(14391, 1573.85010, -1489.21619, 1370.26990,   0.00000, 0.00000, 89.10000);
		CreateDynamicObject(19462, 1572.05164, -1489.79504, 1371.06018,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(1502, 1579.40234, -1477.76880, 1369.29041,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1502, 1572.71155, -1481.08069, 1369.29041,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1736, 1583.96497, -1474.38513, 1371.26099,   0.00000, 0.00000, -88.31990);
		CreateDynamicObject(1808, 1584.10681, -1477.48499, 1369.35071,   0.00000, 0.00000, -135.48004);
		CreateDynamicObject(1828, 1580.10205, -1477.35303, 1369.33179,   0.00000, 0.00000, -88.74000);
		CreateDynamicObject(19388, 1569.17053, -1479.40955, 1371.07166,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2099, 1582.57190, -1477.65076, 1369.35022,   0.00000, 0.00000, -179.58002);
		CreateDynamicObject(2186, 1559.26477, -1485.01807, 1369.35754,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2277, 1576.12012, -1475.83545, 1370.65295,   0.00000, 0.00000, 90.17491);
		CreateDynamicObject(2276, 1576.15320, -1473.36853, 1370.73010,   0.00000, 0.00000, 90.42003);
		CreateDynamicObject(19450, 1586.48853, -1477.74915, 1373.68018,   0.00000, 0.00000, -89.93990);
		CreateDynamicObject(19358, 1576.99524, -1477.78711, 1373.68018,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(19358, 1573.83521, -1477.78711, 1373.68018,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(19358, 1570.61523, -1477.78687, 1373.68018,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(19358, 1570.65076, -1481.03406, 1373.68018,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(19358, 1576.63367, -1481.02014, 1373.68018,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(19450, 1582.97974, -1481.02917, 1373.68018,   0.00000, 0.00000, -89.93990);
		CreateDynamicObject(19450, 1579.83826, -1470.14648, 1373.68018,   0.00000, 0.00000, -89.93990);
		CreateDynamicObject(19450, 1575.54883, -1472.98645, 1373.68018,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19450, 1584.33130, -1473.00525, 1370.18018,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19450, 1584.33130, -1473.00525, 1373.68018,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19450, 1564.43054, -1485.40759, 1373.68018,   0.00000, 0.00000, -89.93990);
		CreateDynamicObject(19450, 1569.12427, -1485.69360, 1373.68018,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19450, 1564.84143, -1477.80627, 1373.68018,   0.00000, 0.00000, -89.93990);
		CreateDynamicObject(19450, 1555.26672, -1477.81970, 1373.68018,   0.00000, 0.00000, -89.93990);
		CreateDynamicObject(19450, 1553.01025, -1481.68542, 1373.68018,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19450, 1554.90710, -1485.42224, 1373.68018,   0.00000, 0.00000, -89.93990);
		CreateDynamicObject(19450, 1590.90356, -1482.56702, 1373.68018,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19450, 1587.70862, -1485.76050, 1373.68018,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19450, 1587.71362, -1495.17493, 1373.68018,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19450, 1590.88171, -1491.99268, 1373.68018,   0.00000, 0.00000, 0.00000);
	}
	else if (map == INT_Banco)
	{
		CreateDynamicObject(19340, -818.29633, 1560.37402, 1000.00000,   0.00000, 0.00000, 0.00000);
		SetMaterialEx(0,6134,"venice_law","stonewall_la",0);

		CreateDynamicObject(19340, -824.50842, 1459.82617, 1000.00000,   0.00000, 0.00000, 0.00000);
		SetMaterialEx(0,6134,"venice_law","stonewall_la",0);

		CreateDynamicObject(19340, -871.79749, 1560.34985, 1012.47998,   0.00000, -180.00000, 0.30000);
		SetMaterialEx(0,6134,"venice_law","stonewall_la",0);

		CreateDynamicObject(3980, -872.41565, 1573.78271, 1007.40808,   0.00000, 0.00000, -181.02000);
		SetMaterialEx(10,6134,"venice_law","stonewall_la",0);
		SetMaterialEx(8,6134,"venice_law","stonewall_la",0);
		SetMaterialEx(3,9332,"newstuff_sfn","ahoodfence2",0);
		SetMaterialEx(2,6134,"venice_law","stonewall_la",0);
		SetMaterialEx(4,6134,"venice_law","stonewall_la",0);

		CreateDynamicObject(3980, -792.14410, 1589.85229, 1007.40808,   0.00000, 0.00000, -88.73990);
		SetMaterialEx(10,6134,"venice_law","stonewall_la",0);
		SetMaterialEx(8,6134,"venice_law","stonewall_la",0);
		SetMaterialEx(3,9332,"newstuff_sfn","ahoodfence2",0);
		SetMaterialEx(2,6134,"venice_law","stonewall_la",0);
		SetMaterialEx(4,6134,"venice_law","stonewall_la",0);

		CreateDynamicObject(3980, -845.15161, 1673.66602, 1007.40808,   0.00000, 0.00000, -0.05980);
		SetMaterialEx(10,6134,"venice_law","stonewall_la",0);
		SetMaterialEx(8,6134,"venice_law","stonewall_la",0);
		SetMaterialEx(3,9332,"newstuff_sfn","ahoodfence2",0);
		SetMaterialEx(2,6134,"venice_law","stonewall_la",0);
		SetMaterialEx(4,6134,"venice_law","stonewall_la",0);

		CreateDynamicObject(2946, -831.70837, 1619.73999, 1003.68140,   0.00000, 0.00000, 0.18000);
		CreateDynamicObject(2946, -831.72021, 1622.88916, 1003.68140,   0.00000, 0.00000, -179.94000);
		CreateDynamicObject(14576, -848.02521, 1618.79199, 999.35358,   0.00000, 0.00000, -90.24010);
		CreateDynamicObject(19452, -862.80872, 1621.06665, 1005.47998,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19386, -862.77020, 1615.19214, 1005.44928,   0.00000, 0.00000, -0.24000);
		CreateDynamicObject(19452, -862.80408, 1630.63000, 1005.47998,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19452, -862.80408, 1630.63000, 1008.94000,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19452, -862.79999, 1621.04736, 1008.94000,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19452, -862.77332, 1611.41919, 1008.94000,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19452, -862.81732, 1611.56482, 1012.44000,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19452, -862.77576, 1608.82581, 1005.45001,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19452, -862.79999, 1621.06738, 1012.44000,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19452, -862.80408, 1630.63000, 1012.44000,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19452, -864.46973, 1616.85461, 1008.53998,   -90.00000, -359.00000, -88.08000);
		CreateDynamicObject(2414, -861.48883, 1621.27087, 1003.53137,   0.00000, 0.00000, 180.83971);
		CreateDynamicObject(19452, -853.11487, 1625.63843, 1002.85999,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2414, -859.49622, 1621.30005, 1003.53137,   0.00000, 0.00000, 180.83971);
		CreateDynamicObject(19452, -857.95770, 1620.91052, 1002.85999,   0.00000, 0.00000, -89.94000);
		CreateDynamicObject(2414, -857.50330, 1621.32971, 1003.53137,   0.00000, 0.00000, 180.83971);
		CreateDynamicObject(2414, -855.50562, 1621.35559, 1003.53137,   0.00000, 0.00000, 180.83971);
		CreateDynamicObject(2414, -853.61768, 1621.37695, 1003.53137,   0.00000, 0.00000, 180.83971);
		CreateDynamicObject(2414, -853.58258, 1623.32678, 1003.53137,   0.00000, 0.00000, 270.41949);
		CreateDynamicObject(2414, -853.60089, 1625.30835, 1003.53137,   0.00000, 0.00000, 270.41949);
		CreateDynamicObject(19452, -853.11102, 1635.24524, 1002.85999,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2414, -853.60754, 1627.31592, 1003.53137,   0.00000, 0.00000, 270.41949);
		CreateDynamicObject(2414, -853.61707, 1629.28345, 1003.53137,   0.00000, 0.00000, 270.41949);
		CreateDynamicObject(2414, -853.61670, 1631.24622, 1003.53137,   0.00000, 0.00000, 270.41949);
		CreateDynamicObject(2414, -853.61621, 1633.20911, 1003.53137,   0.00000, 0.00000, 270.41949);
		CreateDynamicObject(19452, -853.11493, 1625.63843, 1007.88000,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19452, -853.11102, 1635.24524, 1007.88000,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19452, -857.95770, 1620.91052, 1007.88000,   0.00000, 0.00000, -89.94000);
		CreateDynamicObject(19452, -853.11493, 1625.63843, 1011.38000,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19452, -853.11102, 1635.24524, 1011.38000,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19452, -857.95770, 1620.91052, 1011.38000,   0.00000, 0.00000, -89.94000);
		CreateDynamicObject(1846, -852.09961, 1622.21924, 1005.84430,   -90.00000, -89.00000, 1.02000);
		CreateDynamicObject(1846, -854.44897, 1619.88208, 1005.84430,   -90.00000, -89.00000, -88.92000);
		CreateDynamicObject(1846, -852.09961, 1624.99915, 1005.84430,   -90.00000, -89.00000, 1.02000);
		CreateDynamicObject(1846, -852.09961, 1627.77917, 1005.84430,   -90.00000, -89.00000, 1.02000);
		CreateDynamicObject(1846, -852.09961, 1630.55920, 1005.84430,   -90.00000, -89.00000, 1.02000);
		CreateDynamicObject(1846, -852.09961, 1633.33923, 1005.84430,   -90.00000, -89.00000, 1.02000);
		CreateDynamicObject(1846, -857.22900, 1619.88208, 1005.84430,   -90.00000, -89.00000, -88.92000);
		CreateDynamicObject(1846, -860.00897, 1619.88208, 1005.84430,   -90.00000, -89.00000, -88.92000);
		CreateDynamicObject(1846, -862.78900, 1619.88208, 1005.84430,   -90.00000, -89.00000, -88.92000);
		CreateDynamicObject(2414, -853.62970, 1635.16907, 1003.53137,   0.00000, 0.00000, 270.41949);
		CreateDynamicObject(2773, -838.87128, 1624.15808, 1004.24329,   0.00000, 0.00000, 92.33995);
		CreateDynamicObject(2773, -841.17700, 1624.06226, 1004.24329,   0.00000, 0.00000, 92.34000);
		CreateDynamicObject(2773, -843.51691, 1623.99988, 1004.24329,   0.00000, 0.00000, 92.34000);
		CreateDynamicObject(2773, -844.54437, 1625.31201, 1004.24329,   0.00000, 0.00000, 1.62001);
		CreateDynamicObject(2773, -838.87128, 1625.69812, 1004.24329,   0.00000, 0.00000, 92.34000);
		CreateDynamicObject(2773, -841.17700, 1625.69812, 1004.24329,   0.00000, 0.00000, 92.34000);
		CreateDynamicObject(2773, -842.20660, 1627.01208, 1004.24329,   0.00000, 0.00000, 1.62000);
		CreateDynamicObject(2773, -842.29907, 1629.32690, 1004.24329,   0.00000, 0.00000, 1.62001);
		CreateDynamicObject(2773, -844.62238, 1627.61584, 1004.24329,   0.00000, 0.00000, 1.62001);
		CreateDynamicObject(2773, -843.64856, 1630.27527, 1004.24329,   0.00000, 0.00000, 90.90000);
		CreateDynamicObject(2773, -842.29907, 1629.32690, 1004.24329,   0.00000, 0.00000, 1.62001);
		CreateDynamicObject(2773, -845.95007, 1630.24316, 1004.24329,   0.00000, 0.00000, 90.90000);
		CreateDynamicObject(2773, -845.96069, 1628.56140, 1004.24329,   0.00000, 0.00000, 90.90000);
		CreateDynamicObject(2773, -849.21271, 1628.84558, 1004.24329,   0.00000, 0.00000, 179.15981);
		CreateDynamicObject(2773, -849.22412, 1626.52625, 1004.24329,   0.00000, 0.00000, 179.15981);
		CreateDynamicObject(2773, -846.94781, 1627.22961, 1004.24329,   0.00000, 0.00000, 179.15981);
		CreateDynamicObject(2773, -846.94910, 1624.93323, 1004.24329,   0.00000, 0.00000, 179.15981);
		CreateDynamicObject(2773, -848.32056, 1623.92920, 1004.24329,   0.00000, 0.00000, 90.90000);
		CreateDynamicObject(2773, -850.53229, 1625.50415, 1004.24329,   0.00000, 0.00000, 90.90000);
		CreateDynamicObject(2773, -850.64807, 1623.94238, 1004.24329,   0.00000, 0.00000, 90.90000);
		CreateDynamicObject(2773, -849.23395, 1631.13025, 1004.24329,   0.00000, 0.00000, 179.15981);
		CreateDynamicObject(2773, -846.98029, 1631.54980, 1004.24329,   0.00000, 0.00000, 179.15981);
		CreateDynamicObject(2773, -846.95099, 1633.45801, 1004.24329,   0.00000, 0.00000, 179.33980);
		CreateDynamicObject(2773, -848.30261, 1634.44702, 1004.24329,   0.00000, 0.00000, 268.97968);
		CreateDynamicObject(2773, -846.95099, 1633.45801, 1004.24329,   0.00000, 0.00000, 179.33980);
		CreateDynamicObject(2773, -850.61023, 1634.45544, 1004.24329,   0.00000, 0.00000, 270.29959);
		CreateDynamicObject(2773, -850.58264, 1632.07288, 1004.24329,   0.00000, 0.00000, 270.29959);
		CreateDynamicObject(2369, -853.94196, 1633.30896, 1004.44299,   0.00000, 0.00000, 89.94010);
		CreateDynamicObject(2369, -853.88611, 1630.81250, 1004.44299,   0.00000, 0.00000, 89.94010);
		CreateDynamicObject(2369, -853.92694, 1628.89026, 1004.44299,   0.00000, 0.00000, 89.94010);
		CreateDynamicObject(2369, -853.93372, 1626.88611, 1004.44299,   0.00000, 0.00000, 89.94010);
		CreateDynamicObject(2369, -853.89410, 1624.85876, 1004.44299,   0.00000, 0.00000, 89.94010);
		CreateDynamicObject(2369, -853.88599, 1622.95435, 1004.44299,   0.00000, 0.00000, 89.94010);
		CreateDynamicObject(2369, -855.86841, 1621.68445, 1004.44299,   0.00000, 0.00000, 0.42011);
		CreateDynamicObject(2369, -857.71240, 1621.66504, 1004.44299,   0.00000, 0.00000, 0.42011);
		CreateDynamicObject(2369, -859.49402, 1621.67200, 1004.44299,   0.00000, 0.00000, 0.42011);
		CreateDynamicObject(2369, -861.39966, 1621.60461, 1004.44299,   0.00000, 0.00000, 0.42011);
		CreateDynamicObject(1714, -855.23688, 1633.16528, 1003.74573,   0.00000, 0.00000, 89.52020);
		CreateDynamicObject(1714, -855.23688, 1630.58533, 1003.74573,   0.00000, 0.00000, 89.52020);
		CreateDynamicObject(1714, -855.23688, 1628.68530, 1003.74573,   0.00000, 0.00000, 89.52020);
		CreateDynamicObject(1714, -855.23688, 1626.68530, 1003.74573,   0.00000, 0.00000, 89.52020);
		CreateDynamicObject(1714, -855.23688, 1624.66528, 1003.74573,   0.00000, 0.00000, 89.52020);
		CreateDynamicObject(1714, -855.23688, 1622.94531, 1003.74573,   0.00000, 0.00000, 89.52020);
		CreateDynamicObject(1714, -856.07275, 1622.75586, 1003.74573,   0.00000, 0.00000, 2.04022);
		CreateDynamicObject(1714, -857.89282, 1622.79590, 1003.74573,   0.00000, 0.00000, 2.04020);
		CreateDynamicObject(1714, -859.69281, 1622.79590, 1003.74573,   0.00000, 0.00000, 2.04020);
		CreateDynamicObject(1714, -861.53278, 1622.79590, 1003.74573,   0.00000, 0.00000, 2.04020);
		CreateDynamicObject(1569, -865.34161, 1613.18713, 999.55261,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19377, -867.54321, 1613.11169, 1001.34741,   0.00000, 0.00000, -90.30000);
		CreateDynamicObject(1569, -862.77832, 1614.01794, 999.55261,   0.00000, 0.00000, 90.24003);
		CreateDynamicObject(1569, -865.13721, 1613.19763, 1003.75513,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1568, -843.84967, 1632.93933, 1013.66431,   0.00000, 178.00000, 0.00000);
		CreateDynamicObject(19433, -835.96222, 1615.75000, 1005.42529,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19433, -835.25677, 1616.47351, 1005.42529,   0.00000, 0.00000, -89.82000);
		CreateDynamicObject(19433, -834.54132, 1615.75806, 1005.42529,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19433, -835.25842, 1615.02051, 1005.42529,   0.00000, 0.00000, -89.64000);
		CreateDynamicObject(19433, -859.47760, 1629.79675, 1005.42529,   0.00000, 0.00000, -89.82000);
		CreateDynamicObject(19433, -860.19611, 1629.06860, 1005.42529,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19433, -859.47449, 1628.35205, 1005.42529,   0.00000, 0.00000, -90.54000);
		CreateDynamicObject(19433, -858.75720, 1629.07263, 1005.42529,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19433, -858.75720, 1629.07263, 1008.90527,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19433, -859.47760, 1629.79675, 1008.90527,   0.00000, 0.00000, -89.82000);
		CreateDynamicObject(19433, -859.47449, 1628.35205, 1008.90527,   0.00000, 0.00000, -90.54000);
		CreateDynamicObject(19433, -860.19611, 1629.06860, 1008.90527,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19433, -836.46643, 1631.85474, 1005.42529,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19433, -835.74902, 1632.57324, 1005.42529,   0.00000, 0.00000, -89.82000);
		CreateDynamicObject(19433, -835.74719, 1631.14136, 1005.42529,   0.00000, 0.00000, -89.82000);
		CreateDynamicObject(19433, -835.02863, 1631.85999, 1005.42529,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19433, -835.02863, 1631.85999, 1008.92529,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19433, -835.74719, 1631.14136, 1008.92529,   0.00000, 0.00000, -89.82000);
		CreateDynamicObject(19433, -836.46637, 1631.85474, 1008.92529,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19433, -835.74902, 1632.57324, 1008.92529,   0.00000, 0.00000, -89.82000);
		CreateDynamicObject(19433, -835.25842, 1615.02051, 1008.92529,   0.00000, 0.00000, -89.64000);
		CreateDynamicObject(19433, -835.96222, 1615.75000, 1008.92529,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19433, -835.25677, 1616.47351, 1008.92529,   0.00000, 0.00000, -89.82000);
		CreateDynamicObject(19433, -834.54132, 1615.75806, 1008.92529,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19433, -843.38373, 1615.71582, 1005.42529,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19433, -844.09979, 1614.99500, 1005.42529,   0.00000, 0.00000, -89.64000);
		CreateDynamicObject(19433, -844.09680, 1616.42883, 1005.42529,   0.00000, 0.00000, -89.82000);
		CreateDynamicObject(19433, -844.82373, 1615.71582, 1005.42529,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19433, -844.82373, 1615.71582, 1008.92529,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19433, -844.09680, 1616.42883, 1008.92529,   0.00000, 0.00000, -89.82000);
		CreateDynamicObject(19433, -843.38373, 1615.71582, 1008.92529,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19433, -844.09979, 1614.99500, 1008.92529,   0.00000, 0.00000, -89.64000);
		CreateDynamicObject(19433, -843.66644, 1633.63916, 1005.42529,   0.00000, 0.00000, -89.82000);
		CreateDynamicObject(19433, -842.95551, 1632.91003, 1005.42529,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19433, -843.67163, 1632.19360, 1005.42529,   0.00000, 0.00000, -89.82000);
		CreateDynamicObject(19433, -844.38550, 1632.90698, 1005.42529,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19433, -844.38550, 1632.90698, 1008.92529,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19433, -843.67157, 1632.19360, 1008.92529,   0.00000, 0.00000, -89.82000);
		CreateDynamicObject(19433, -842.95551, 1632.91003, 1008.92529,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19433, -843.66638, 1633.63916, 1008.92529,   0.00000, 0.00000, -89.82000);
		CreateDynamicObject(2634, -862.82361, 1615.17957, 1005.17822,   0.00000, 0.00000, -90.24000);
		CreateDynamicObject(2634, -840.48010, 1618.75525, 992.86438,   0.00000, 0.00000, 89.70000);
		CreateDynamicObject(19433, -853.94873, 1615.34265, 1005.42529,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19433, -853.21368, 1616.10071, 1005.42529,   0.00000, 0.00000, -89.82000);
		CreateDynamicObject(19433, -853.22571, 1614.62683, 1005.42529,   0.00000, 0.00000, -89.82000);
		CreateDynamicObject(19433, -852.48645, 1615.35974, 1005.42529,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19433, -853.21368, 1616.10071, 1008.92529,   0.00000, 0.00000, -89.82000);
		CreateDynamicObject(19433, -852.48651, 1615.35974, 1008.92529,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19433, -853.22571, 1614.62683, 1008.92529,   0.00000, 0.00000, -89.82000);
		CreateDynamicObject(19433, -853.94873, 1615.34265, 1008.92529,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2161, -862.71710, 1625.68445, 1003.71399,   0.00000, 0.00000, 89.94010);
		CreateDynamicObject(2161, -862.71710, 1625.68445, 1005.05402,   0.00000, 0.00000, 87.72010);
		CreateDynamicObject(2161, -862.71710, 1625.68445, 1006.37402,   0.00000, 0.00000, 88.98009);
		CreateDynamicObject(2161, -862.69708, 1626.96436, 1003.71399,   0.00000, 0.00000, 87.72010);
		CreateDynamicObject(2161, -862.67712, 1626.98438, 1005.03400,   0.00000, 0.00000, 87.72010);
		CreateDynamicObject(2161, -862.67712, 1626.98438, 1006.37402,   0.00000, 0.00000, 87.72010);
		CreateDynamicObject(2161, -862.65723, 1628.26440, 1003.71399,   0.00000, 0.00000, 87.72010);
		CreateDynamicObject(2161, -862.71680, 1632.28625, 1003.71399,   0.00000, 0.00000, 89.70006);
		CreateDynamicObject(2161, -862.65723, 1628.26440, 1005.03400,   0.00000, 0.00000, 87.72010);
		CreateDynamicObject(2161, -862.65723, 1628.26440, 1006.37402,   0.00000, 0.00000, 87.72010);
		CreateDynamicObject(2161, -862.71680, 1632.28625, 1005.03400,   0.00000, 0.00000, 89.70010);
		CreateDynamicObject(2161, -862.71680, 1632.28625, 1006.37402,   0.00000, 0.00000, 89.70010);
		CreateDynamicObject(2161, -862.71680, 1633.58630, 1003.71399,   0.00000, 0.00000, 89.70010);
		CreateDynamicObject(2161, -862.71680, 1633.58630, 1005.03400,   0.00000, 0.00000, 89.70010);
		CreateDynamicObject(2161, -862.71680, 1633.58630, 1006.37402,   0.00000, 0.00000, 89.70010);
		CreateDynamicObject(2161, -862.71710, 1624.36340, 1003.71399,   0.00000, 0.00000, 89.82000);
		CreateDynamicObject(2161, -862.71710, 1624.36340, 1005.03400,   0.00000, 0.00000, 89.82000);
		CreateDynamicObject(2161, -862.71710, 1624.36340, 1006.37402,   0.00000, 0.00000, 89.82000);
		CreateDynamicObject(1704, -842.08740, 1612.72656, 1003.72632,   0.00000, 0.00000, 179.10030);
		CreateDynamicObject(1704, -840.98743, 1612.72656, 1003.72632,   0.00000, 0.00000, 179.10030);
		CreateDynamicObject(1704, -839.84741, 1612.72656, 1003.72632,   0.00000, 0.00000, 179.10030);
		CreateDynamicObject(1704, -838.72742, 1612.72656, 1003.72632,   0.00000, 0.00000, 179.10030);
		CreateDynamicObject(1704, -837.60742, 1612.70654, 1003.72632,   0.00000, 0.00000, 179.10030);
		CreateDynamicObject(1704, -836.48743, 1612.68652, 1003.72632,   0.00000, 0.00000, 179.10030);
		CreateDynamicObject(1704, -854.58624, 1612.95959, 1003.72632,   0.00000, 0.00000, 179.10030);
		CreateDynamicObject(1704, -855.70618, 1612.95959, 1003.72632,   0.00000, 0.00000, 179.10030);
		CreateDynamicObject(1704, -856.78619, 1612.95959, 1003.72632,   0.00000, 0.00000, 179.10030);
		CreateDynamicObject(1704, -857.90619, 1612.95959, 1003.72632,   0.00000, 0.00000, 179.10030);
		CreateDynamicObject(2161, -862.72961, 1630.98633, 1003.71399,   0.00000, 0.00000, 89.70010);
		CreateDynamicObject(2161, -862.72961, 1630.98633, 1005.05402,   0.00000, 0.00000, 89.70010);
		CreateDynamicObject(2161, -862.72961, 1630.98633, 1006.37402,   0.00000, 0.00000, 89.70010);
		CreateDynamicObject(1568, -835.89716, 1631.82788, 1013.66431,   0.00000, 178.00000, 0.00000);
		CreateDynamicObject(1568, -835.37421, 1615.77551, 1013.66431,   0.00000, 178.00000, 0.00000);
		CreateDynamicObject(1568, -844.22516, 1615.66992, 1013.66431,   0.00000, 178.00000, 0.00000);
		CreateDynamicObject(1568, -853.36914, 1615.51379, 1013.66431,   0.00000, 178.00000, 0.00000);
		CreateDynamicObject(1568, -859.61017, 1629.15710, 1013.66431,   0.00000, 178.00000, 0.00000);
	}
	else if (map == (VW_BLACKASO - INT_CUSTOM_VW))
	{
		IntObject[playerid][index++] = CreatePlayerObject(playerid,18753, 314.95093, 1963.95142, 1008.77936,   0.00000, 0.00000, 0.00000);
		SetPlayerObjectMaterial(playerid, IntObject[playerid][index-1], 0, 19362, "all_walls", "carp11s", 0);

		IntObject[playerid][index++] = CreatePlayerObject(playerid,18753, 314.95090, 1963.95142, 1021.41937,   0.00000, 0.00000, 0.00000);
		SetPlayerObjectMaterial(playerid, IntObject[playerid][index-1], 0, 19371, "all_walls", "stormdrain3_nt", 0);
		CreateDynamicObject(7488, 259.93448, 1938.26221, 1008.57599,   0.00000, 0.00000, 89.04000);
		CreateDynamicObject(7488, 261.12646, 2010.39148, 1008.57599,   0.00000, 0.00000, 89.04000);
		CreateDynamicObject(7488, 297.10547, 1902.91809, 1008.57599,   0.00000, 0.00000, 179.58003);
		CreateDynamicObject(7488, 369.32864, 1902.37927, 1008.57599,   0.00000, 0.00000, 179.58000);
		CreateDynamicObject(7488, 401.60526, 1935.48267, 1008.57599,   0.00000, 0.00000, 268.97980);
		CreateDynamicObject(7488, 402.86108, 2007.56995, 1008.57599,   0.00000, 0.00000, 268.97980);
		CreateDynamicObject(7488, 285.20981, 2008.66931, 1008.57599,   0.00000, 0.00000, -0.12000);
		CreateDynamicObject(7488, 357.75439, 2008.49463, 1008.57599,   0.00000, 0.00000, -0.12000);
		CreateDynamicObject(1508, 286.12640, 1958.40527, 1010.79749,   0.00000, 0.00000, -0.90000);
		CreateDynamicObject(5262, 290.66196, 1932.66040, 1012.07092,   0.00000, 0.00000, -90.78000);
		CreateDynamicObject(5259, 371.77301, 1930.82043, 1010.89740,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(5259, 371.77301, 1938.76038, 1010.89740,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(5259, 371.77301, 1946.70044, 1010.89740,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(5259, 371.77301, 1954.68042, 1010.89740,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(5259, 371.78479, 1962.60510, 1010.89740,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(5259, 371.78845, 1970.53027, 1010.89740,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(5259, 371.79169, 1978.43921, 1010.89740,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 313.53561, 1954.62109, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 315.87561, 1954.62109, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 318.23560, 1954.62109, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 320.55560, 1954.62109, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 322.89560, 1954.62109, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 325.25562, 1954.62109, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 327.59561, 1954.62109, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 329.95560, 1954.62109, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 332.29559, 1954.62109, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 334.65561, 1954.62109, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 337.03561, 1954.62109, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 339.37561, 1954.62109, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 341.73560, 1954.62109, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 344.07559, 1954.62109, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 346.41559, 1954.62109, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 313.49030, 1958.06104, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 315.83560, 1958.06104, 1009.71228,   0.00000, 0.00000, 1.14000);
		CreateDynamicObject(941, 318.19559, 1958.06104, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 320.53549, 1958.06104, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 322.87549, 1958.06104, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 325.21552, 1958.06104, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 327.54880, 1958.06104, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 329.90881, 1958.06104, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 332.24881, 1958.06104, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 334.58881, 1958.06104, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 336.95560, 1958.06104, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 339.29739, 1958.08093, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 341.65741, 1958.08093, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 344.01740, 1958.08093, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 346.37741, 1958.08093, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 344.01740, 1958.08093, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 313.04630, 1964.61353, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 315.40631, 1964.61353, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 317.77100, 1964.61633, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 320.11099, 1964.61633, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 322.45099, 1964.61633, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 324.79099, 1964.61633, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 327.15100, 1964.61633, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 329.49100, 1964.61633, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 331.85101, 1964.61633, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 334.19101, 1964.61633, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 336.53101, 1964.61633, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 338.87100, 1964.61633, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 341.23099, 1964.61633, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 343.57101, 1964.61633, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 345.90921, 1964.62463, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 313.04630, 1968.29346, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 315.40631, 1968.29346, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 317.76630, 1968.29346, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 320.12631, 1968.29346, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 322.48630, 1968.29346, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 324.84631, 1968.29346, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 327.18631, 1968.29346, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 329.52631, 1968.29346, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 331.88629, 1968.29346, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 334.24631, 1968.29346, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 336.60629, 1968.29346, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 338.94629, 1968.29346, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 341.28629, 1968.29346, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 343.62631, 1968.29346, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 345.96631, 1968.29346, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 313.53561, 1948.80115, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 315.89560, 1948.80115, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 318.25562, 1948.80115, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 320.61560, 1948.80115, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 322.95560, 1948.80115, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 325.29559, 1948.80115, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 327.65561, 1948.80115, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 330.01559, 1948.80115, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 332.35559, 1948.80115, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 334.71561, 1948.80115, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 337.07559, 1948.80115, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 339.43561, 1948.80115, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 341.77560, 1948.80115, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 344.11560, 1948.80115, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 346.47559, 1948.80115, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 346.47559, 1944.30115, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 344.11560, 1944.30115, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 341.77560, 1944.30115, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 339.43561, 1944.30115, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 337.07559, 1944.30115, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 334.71561, 1944.30115, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 332.35559, 1944.30115, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 329.99561, 1944.30115, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 327.65561, 1944.30115, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 325.29559, 1944.30115, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 322.93561, 1944.30115, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 320.59561, 1944.30115, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 318.23560, 1944.30115, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 315.87561, 1944.30115, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 313.53561, 1944.30115, 1009.71228,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(939, 312.01822, 1981.65759, 1011.66827,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(3066, 320.61325, 1980.31824, 1010.25177,   0.00000, 0.00000, -90.06000);
		CreateDynamicObject(2991, 329.04730, 1980.81091, 1009.89423,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(3378, 342.66504, 1981.69495, 1009.23407,   0.00000, 0.00000, -90.12000);
		CreateDynamicObject(3621, 242.94589, 1983.43042, 1009.26880,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(5262, 300.24200, 1932.52039, 1012.07092,   0.00000, 0.00000, -90.78000);
		CreateDynamicObject(2917, 319.01270, 1957.60632, 1020.41248,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(939, 309.57379, 1929.87378, 1011.68872,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(939, 315.81381, 1929.87378, 1011.68872,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(3066, 325.38864, 1929.90308, 1010.25177,   0.00000, 0.00000, -90.06000);
		CreateDynamicObject(5260, 336.37720, 1931.71350, 1010.73212,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(3378, 352.18304, 1928.96326, 1009.23407,   0.00000, 0.00000, -90.12000);

	}
	else if (map == INT_EntrenamientoLSEM)
	{
		CreateDynamicObject(8411, 2862.18848, -1254.65247, 1200.74280,   0.00000, 0.00000, -0.90000);
		CreateDynamicObject(19463, 2892.69678, -1263.23010, 1267.45630,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 2892.69678, -1253.61011, 1267.45630,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 2892.69678, -1243.99011, 1267.45630,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 2888.03882, -1267.13977, 1267.45630,   0.00000, 0.00000, 89.10000);
		CreateDynamicObject(18051, 2867.02075, -1249.05005, 1267.22900,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 2878.54297, -1266.99304, 1267.45630,   0.00000, 0.00000, 89.10000);
		CreateDynamicObject(19463, 2887.88086, -1262.64758, 1267.45630,   0.00000, 0.00000, 89.10000);
		CreateDynamicObject(19463, 2883.12866, -1257.84412, 1267.45630,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 2877.80493, -1262.88977, 1267.45630,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19392, 2877.80322, -1256.48425, 1267.44641,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 2877.80640, -1250.25195, 1267.44641,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 2882.62354, -1249.84070, 1267.45630,   0.00000, 0.00000, 89.10000);
		CreateDynamicObject(1318, 2877.89795, -1265.45618, 1268.08850,   91.00000, -360.00000, 0.00000);
		CreateDynamicObject(19392, 2883.11255, -1251.45825, 1267.44641,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 2892.22095, -1249.98523, 1267.45630,   0.00000, 0.00000, 89.10000);
		CreateDynamicObject(19463, 2872.99463, -1258.00500, 1267.45630,   0.00000, 0.00000, 89.10000);
		CreateDynamicObject(19454, 2870.93677, -1247.14929, 1269.93628,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1594, 2885.65942, -1254.72180, 1266.19238,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(16151, 2891.50879, -1255.39075, 1266.05225,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1507, 2892.62402, -1264.81714, 1265.70386,   0.00000, 0.00000, -89.94000);
		CreateDynamicObject(19454, 2870.93677, -1256.78931, 1269.93628,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19454, 2870.93677, -1256.78931, 1264.95630,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19454, 2870.93677, -1247.10938, 1264.95630,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 2872.93188, -1242.44653, 1267.45630,   0.00000, 0.00000, 89.10000);
		CreateDynamicObject(19463, 2863.47314, -1242.30530, 1267.45630,   0.00000, 0.00000, 89.10000);
		CreateDynamicObject(19463, 2854.15869, -1242.15332, 1267.45630,   0.00000, 0.00000, 89.10000);
		CreateDynamicObject(19463, 2863.53223, -1257.85974, 1267.45630,   0.00000, 0.00000, 89.10000);
		CreateDynamicObject(19463, 2854.15698, -1257.72034, 1267.45630,   0.00000, 0.00000, 89.10000);
		CreateDynamicObject(19454, 2850.26001, -1253.01855, 1267.45630,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19454, 2850.25317, -1243.46252, 1267.45630,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2049, 2850.38623, -1255.40625, 1267.85645,   0.00000, 0.00000, 89.46004);
		CreateDynamicObject(2049, 2850.38623, -1254.24634, 1267.85645,   0.00000, 0.00000, 89.46000);
		CreateDynamicObject(2049, 2850.38623, -1252.88635, 1267.85645,   0.00000, 0.00000, 89.46000);
		CreateDynamicObject(2049, 2850.38623, -1251.72632, 1267.85645,   0.00000, 0.00000, 89.46000);
		CreateDynamicObject(2049, 2850.38623, -1250.42627, 1267.85645,   0.00000, 0.00000, 89.46000);
		CreateDynamicObject(2049, 2850.38623, -1248.96631, 1267.85645,   0.00000, 0.00000, 89.46000);
		CreateDynamicObject(2049, 2850.38623, -1247.74634, 1267.85645,   0.00000, 0.00000, 89.46000);
		CreateDynamicObject(2049, 2850.38623, -1246.32629, 1267.85645,   0.00000, 0.00000, 89.46000);
		CreateDynamicObject(2049, 2850.38623, -1245.02625, 1267.85645,   0.00000, 0.00000, 89.46000);
		CreateDynamicObject(2049, 2850.38623, -1243.66626, 1267.85645,   0.00000, 0.00000, 89.46000);
		CreateDynamicObject(2240, 2892.01147, -1263.24341, 1266.19226,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1594, 2887.69531, -1256.69116, 1266.19238,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1594, 2885.36182, -1258.32471, 1266.19238,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1594, 2887.70923, -1259.93408, 1266.19238,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1594, 2885.44897, -1260.85767, 1266.19238,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1502, 2877.84131, -1257.24365, 1265.70020,   0.00000, 0.00000, 90.18000);
		CreateDynamicObject(1502, 2883.12891, -1252.20679, 1265.70020,   0.00000, 0.00000, 90.18000);
		CreateDynamicObject(2811, 2871.53735, -1257.47949, 1265.73315,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2811, 2877.35352, -1243.25513, 1265.73315,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2240, 2892.30981, -1266.70703, 1266.19226,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(8411, 2861.73071, -1254.36951, 1334.16284,   0.00000, -180.00000, 0.02000);
		CreateDynamicObject(2241, 2883.69629, -1250.27405, 1266.21179,   0.00000, 0.00000, -33.06000);
		CreateDynamicObject(2241, 2892.28857, -1262.13525, 1266.21179,   0.00000, 0.00000, -33.06000);
		CreateDynamicObject(1594, 2890.02710, -1261.35742, 1266.19238,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2001, 2878.24194, -1266.60425, 1265.73267,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19452, 2876.00000, 0.00000, 0.00000,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19452, 2875.98242, -1244.83875, 1265.65112,   -360.00000, -90.00000, 0.00000);
		CreateDynamicObject(19452, 2872.48242, -1244.83875, 1265.65112,   -360.00000, -90.00000, 0.00000);
		CreateDynamicObject(19452, 2875.98242, -1254.43872, 1265.65112,   -360.00000, -90.00000, 0.00000);
		CreateDynamicObject(19463, 2877.80640, -1240.83203, 1267.44641,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19452, 2872.50244, -1254.43872, 1265.65112,   -360.00000, -90.00000, 0.00000);
		CreateDynamicObject(19452, 2884.96875, -1257.81750, 1265.65112,   -360.00000, -90.00000, 0.00000);
		CreateDynamicObject(19452, 2888.44873, -1257.81750, 1265.65112,   -360.00000, -90.00000, 0.00000);
		CreateDynamicObject(19452, 2891.92896, -1257.81750, 1265.65112,   -360.00000, -90.00000, 0.00000);
		CreateDynamicObject(19452, 2884.96875, -1248.21753, 1265.65112,   -360.00000, -90.00000, 0.00000);
		CreateDynamicObject(19452, 2888.44897, -1248.21753, 1265.65112,   -360.00000, -90.00000, 0.00000);
		CreateDynamicObject(19452, 2891.92896, -1248.21753, 1265.65112,   -360.00000, -90.00000, 0.00000);
	}
	else if (map == INT_CarcelCeldas)
	{
		CreateDynamicObject(19463, 1558.13623, -1485.14075, 1067.00745,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1558.13623, -1494.72058, 1067.00745,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1562.89429, -1480.29602, 1067.00745,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(19463, 1572.49426, -1480.27600, 1067.00745,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(19463, 1559.82581, -1499.55457, 1067.00745,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(19463, 1572.42578, -1499.53455, 1067.00745,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(19392, 1563.39063, -1494.33740, 1067.05225,   0.00000, 0.00000, -89.82000);
		CreateDynamicObject(19463, 1556.99939, -1494.35364, 1067.04736,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(19463, 1569.79944, -1494.35364, 1067.04736,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(19463, 1574.53967, -1489.47253, 1067.04736,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1574.53967, -1479.84021, 1067.04736,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19448, 1567.64832, -1489.48718, 1064.81287,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19386, 1567.63770, -1483.08679, 1067.05286,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19448, 1567.62964, -1476.75439, 1067.05286,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1491, 1567.63855, -1483.84253, 1065.30164,   0.00000, 0.00000, 90.06005);
		CreateDynamicObject(19448, 1567.63049, -1489.47437, 1069.09277,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1557, 1558.24646, -1487.52222, 1065.29321,   0.00000, 0.00000, 89.76000);
		CreateDynamicObject(1557, 1558.24646, -1484.48816, 1065.29321,   0.00000, 0.00000, -90.42000);
		CreateDynamicObject(2008, 1568.21484, -1487.37036, 1065.31616,   0.00000, 0.00000, 88.08000);
		CreateDynamicObject(2174, 1573.96985, -1491.76050, 1065.31445,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(2174, 1573.96985, -1489.82056, 1065.31445,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(2067, 1574.04419, -1488.16992, 1065.31360,   0.00000, 0.00000, -90.78000);
		CreateDynamicObject(2067, 1574.07373, -1487.61218, 1065.31360,   0.00000, 0.00000, -90.78000);
		CreateDynamicObject(2161, 1574.44824, -1485.76062, 1065.30725,   0.00000, 0.00000, -90.78000);
		CreateDynamicObject(2161, 1574.44824, -1485.76062, 1066.62732,   0.00000, 0.00000, -90.78000);
		CreateDynamicObject(2161, 1574.44812, -1484.46057, 1065.30725,   0.00000, 0.00000, -90.12000);
		CreateDynamicObject(2161, 1574.44824, -1485.76062, 1065.30725,   0.00000, 0.00000, -90.78000);
		CreateDynamicObject(2161, 1574.44812, -1484.46057, 1066.62732,   0.00000, 0.00000, -90.12000);
		CreateDynamicObject(2199, 1574.39990, -1482.90747, 1065.31970,   0.00000, 0.00000, -90.30000);
		CreateDynamicObject(2199, 1574.39990, -1480.96753, 1065.31970,   0.00000, 0.00000, -90.30000);
		CreateDynamicObject(2737, 1570.83997, -1494.19995, 1067.29211,   0.00000, 0.00000, 179.91119);
		CreateDynamicObject(19463, 1579.31946, -1494.35364, 1067.04736,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(19463, 1581.91077, -1499.51453, 1067.00745,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(19392, 1566.06921, -1499.51367, 1067.05225,   0.00000, 0.00000, -89.82000);
		CreateDynamicObject(1491, 1565.32434, -1499.50867, 1065.30164,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1568.12427, -1504.38245, 1067.00745,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1558.13623, -1504.34058, 1067.00745,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1558.13623, -1513.84058, 1067.00745,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1563.23901, -1516.10486, 1067.00745,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(19455, 1562.67590, -1508.14722, 1064.73291,   0.00000, 0.00000, -89.82000);
		CreateDynamicObject(19455, 1572.08606, -1508.10754, 1064.75293,   0.00000, 0.00000, -89.82000);
		CreateDynamicObject(19455, 1562.67590, -1508.14722, 1069.99292,   0.00000, 0.00000, -89.82000);
		CreateDynamicObject(19455, 1572.08606, -1508.10754, 1069.99292,   0.00000, 0.00000, -89.82000);
		CreateDynamicObject(19357, 1565.74109, -1508.07104, 1066.54065,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19357, 1563.44104, -1508.07104, 1066.54065,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19357, 1560.88110, -1508.07104, 1066.54065,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(3851, 1562.42371, -1508.08044, 1068.66577,   0.00000, 0.00000, -89.76000);
		CreateDynamicObject(1722, 1567.04248, -1506.90930, 1065.33447,   0.00000, 0.00000, -180.41988);
		CreateDynamicObject(1722, 1564.58252, -1506.90930, 1065.33447,   0.00000, 0.00000, -180.41991);
		CreateDynamicObject(1722, 1562.18250, -1506.90930, 1065.33447,   0.00000, 0.00000, -180.41991);
		CreateDynamicObject(1722, 1559.52246, -1506.90930, 1065.33447,   0.00000, 0.00000, -180.41991);
		CreateDynamicObject(1722, 1567.04248, -1509.45178, 1065.33447,   0.00000, 0.00000, -359.03979);
		CreateDynamicObject(1722, 1564.50244, -1509.45178, 1065.33447,   0.00000, 0.00000, -359.03979);
		CreateDynamicObject(1722, 1562.06250, -1509.45178, 1065.33447,   0.00000, 0.00000, -359.03979);
		CreateDynamicObject(1722, 1559.42249, -1509.45178, 1065.33447,   0.00000, 0.00000, -359.03979);
		CreateDynamicObject(19463, 1553.69641, -1516.09070, 1067.00745,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(1671, 1569.31274, -1492.49744, 1065.79565,   0.00000, 0.00000, -91.32001);
		CreateDynamicObject(1671, 1569.43274, -1486.85742, 1065.79565,   0.00000, 0.00000, -91.32000);
		CreateDynamicObject(19463, 1588.80042, -1494.33301, 1067.04736,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(19392, 1586.22607, -1497.92065, 1067.07214,   0.00000, 0.00000, -179.99989);
		CreateDynamicObject(19463, 1586.23071, -1491.61658, 1067.00745,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1586.63342, -1504.25098, 1067.00745,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1586.62952, -1523.20056, 1067.00745,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1586.62952, -1532.78064, 1067.00745,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19371, 1586.61865, -1510.44470, 1066.87598,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19371, 1586.61902, -1513.60498, 1066.87598,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19392, 1586.63440, -1516.80481, 1067.07214,   0.00000, 0.00000, -179.99989);
		CreateDynamicObject(19463, 1581.80176, -1518.26746, 1067.04736,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(19463, 1572.38110, -1518.34839, 1067.04736,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(19371, 1568.13037, -1510.67578, 1066.87598,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19392, 1568.14185, -1513.84106, 1067.07214,   0.00000, 0.00000, -179.99989);
		CreateDynamicObject(19463, 1568.13550, -1520.16052, 1067.00745,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1581.88684, -1511.89417, 1067.04736,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(19463, 1573.00415, -1511.90295, 1067.04736,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(1491, 1568.13184, -1513.09424, 1065.33435,   0.00000, 0.00000, -89.84620);
		CreateDynamicObject(19463, 1590.45654, -1518.17444, 1067.00745,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1590.45349, -1527.59900, 1067.00745,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(14407, 1588.65369, -1532.95410, 1062.15735,   0.00000, 0.00000, -179.88000);
		CreateDynamicObject(19463, 1590.45349, -1527.59900, 1063.52734,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1586.62952, -1532.78064, 1063.52734,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1590.45349, -1527.59900, 1060.08728,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1590.46143, -1537.24561, 1060.08728,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1590.46143, -1537.24561, 1063.54724,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1590.46143, -1537.24561, 1066.98730,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1586.62952, -1532.78064, 1060.04724,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1586.62903, -1542.32129, 1060.04724,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1586.62903, -1542.32129, 1063.54724,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1586.62903, -1542.32129, 1067.02722,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1591.17053, -1546.13770, 1062.96741,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(19463, 1590.20801, -1541.98389, 1066.42773,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(19463, 1590.20801, -1541.98389, 1069.90771,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(19463, 1595.19116, -1541.95544, 1062.96741,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(19392, 1597.49182, -1546.19519, 1063.06665,   0.00000, 0.00000, -91.44000);
		CreateDynamicObject(19463, 1604.33069, -1551.12817, 1063.02722,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1594.35706, -1555.75500, 1062.96741,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(19463, 1584.85620, -1555.76404, 1062.96741,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(4100, 1586.58606, -1553.65210, 1064.43506,   0.00000, 0.00000, 49.50010);
		CreateDynamicObject(19463, 1586.62146, -1551.87561, 1060.64722,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1586.62146, -1551.87561, 1065.98718,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1581.77734, -1546.36292, 1062.96741,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(19463, 1580.64136, -1551.36279, 1063.02722,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1968, 1590.58960, -1548.21582, 1061.91663,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1968, 1590.56982, -1551.62048, 1061.91663,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1968, 1590.58960, -1554.97583, 1061.91663,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1968, 1593.65063, -1548.22375, 1061.91663,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1603.68274, -1546.24524, 1062.96741,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(19463, 1603.90540, -1555.72766, 1062.96741,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(1968, 1593.70007, -1551.50635, 1061.91663,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1968, 1593.65063, -1555.00378, 1061.91663,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1968, 1599.77063, -1548.22375, 1061.91663,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1968, 1602.83057, -1548.22375, 1061.91663,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1968, 1602.81189, -1551.48328, 1061.91663,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1968, 1602.83252, -1554.98389, 1061.91663,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1968, 1599.32910, -1551.45251, 1061.91663,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1968, 1599.77063, -1554.98376, 1061.91663,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2416, 1581.13647, -1555.14038, 1061.37476,   0.00000, 0.00000, 90.84000);
		CreateDynamicObject(2416, 1581.11646, -1547.76038, 1061.37476,   0.00000, 0.00000, 90.84000);
		CreateDynamicObject(2418, 1585.91052, -1554.27002, 1061.32959,   0.00000, 0.00000, -90.60000);
		CreateDynamicObject(2419, 1585.98865, -1546.80994, 1061.33447,   0.00000, 0.00000, -90.24000);
		CreateDynamicObject(19463, 1604.74060, -1541.95471, 1062.96741,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(19463, 1610.83838, -1550.60400, 1062.82715,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19371, 1609.30310, -1546.23486, 1062.94629,   0.00000, 0.00000, -88.85990);
		CreateDynamicObject(19463, 1614.62317, -1546.36780, 1062.96716,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1614.25037, -1541.93164, 1062.96741,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(19463, 1614.63782, -1555.83142, 1063.02722,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1610.82849, -1560.24731, 1063.02722,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(14407, 1612.76172, -1558.29028, 1057.97131,   0.00000, 0.00000, -179.88000);
		CreateDynamicObject(19463, 1614.63782, -1555.83142, 1059.56726,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1614.63782, -1555.83142, 1056.08716,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1610.82849, -1560.24731, 1059.56726,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1610.82849, -1560.24731, 1056.12732,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1614.63013, -1565.45740, 1056.08716,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1614.63013, -1565.45740, 1059.56726,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1614.63013, -1565.45740, 1063.04724,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1610.84387, -1569.72253, 1056.12732,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1610.84387, -1569.72253, 1059.60730,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1610.84387, -1569.72253, 1063.06726,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1615.45007, -1573.36755, 1058.22717,   0.00000, 0.00000, -91.19998);
		CreateDynamicObject(19463, 1609.71228, -1570.15112, 1061.66736,   0.00000, 0.00000, -91.13997);
		CreateDynamicObject(19463, 1619.41772, -1570.28284, 1058.22717,   0.00000, 0.00000, -91.19998);
		CreateDynamicObject(19463, 1624.82825, -1573.57153, 1058.28723,   0.00000, 0.00000, -91.20000);
		CreateDynamicObject(19463, 1628.47205, -1570.47021, 1058.22717,   0.00000, 0.00000, -91.19998);
		CreateDynamicObject(19392, 1631.21155, -1573.70313, 1058.28638,   0.00000, 0.00000, -91.44000);
		CreateDynamicObject(19463, 1621.85376, -1578.24146, 1058.28735,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1621.85376, -1578.24146, 1061.76746,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1642.18030, -1578.61206, 1058.28735,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1626.21594, -1583.15112, 1058.22717,   0.00000, 0.00000, -91.19998);
		CreateDynamicObject(19463, 1635.71411, -1583.36414, 1058.22717,   0.00000, 0.00000, -91.19998);
		CreateDynamicObject(14780, 1625.26123, -1576.80554, 1057.29358,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1626.21594, -1583.15112, 1061.70715,   0.00000, 0.00000, -91.20000);
		CreateDynamicObject(19463, 1635.71411, -1583.36414, 1061.70715,   0.00000, 0.00000, -91.20000);
		CreateDynamicObject(19463, 1642.18030, -1578.73206, 1061.76746,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1637.45190, -1573.85132, 1061.70715,   0.00000, 0.00000, -91.20000);
		CreateDynamicObject(19463, 1627.90027, -1573.64429, 1061.70715,   0.00000, 0.00000, -91.20000);
		CreateDynamicObject(19463, 1618.27783, -1573.44897, 1061.70715,   0.00000, 0.00000, -91.20000);
		CreateDynamicObject(19463, 1637.45190, -1573.85132, 1058.28723,   0.00000, 0.00000, -91.20000);
		CreateDynamicObject(19371, 1642.00635, -1583.51489, 1058.20056,   0.00000, 0.00000, -91.32000);
		CreateDynamicObject(19371, 1642.00635, -1583.51489, 1061.68054,   0.00000, 0.00000, -91.32000);
		CreateDynamicObject(19463, 1648.55872, -1575.75732, 1058.28735,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19371, 1643.75232, -1573.93311, 1058.20056,   0.00000, 0.00000, -91.32000);
		CreateDynamicObject(19463, 1645.27014, -1578.70081, 1058.28735,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1648.58618, -1585.12390, 1058.28735,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1645.26758, -1588.21240, 1058.28735,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1648.58618, -1585.12390, 1054.82739,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1645.26758, -1588.21240, 1054.82739,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1647.60852, -1592.32666, 1058.32727,   0.00000, 0.00000, -92.52000);
		CreateDynamicObject(14407, 1646.74609, -1586.89160, 1053.41357,   0.00000, 0.00000, -179.88000);
		CreateDynamicObject(14407, 1650.77356, -1595.37903, 1047.43384,   0.00000, 0.00000, -89.46000);
		CreateDynamicObject(19463, 1643.94250, -1595.28186, 1050.50183,   0.00000, -90.00000, -91.00000);
		CreateDynamicObject(19463, 1645.26758, -1588.21240, 1051.36743,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1645.28735, -1597.65430, 1051.36743,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1645.28735, -1597.65430, 1054.82739,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1647.32739, -1597.12268, 1051.92725,   0.00000, 0.00000, -91.20000);
		CreateDynamicObject(19463, 1648.58618, -1585.12390, 1051.40735,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1648.58618, -1588.70386, 1051.40735,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1648.58618, -1588.70386, 1054.86731,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1647.32739, -1597.12268, 1055.38721,   0.00000, 0.00000, -91.20000);
		CreateDynamicObject(19463, 1656.65173, -1597.31445, 1051.92725,   0.00000, 0.00000, -91.20000);
		CreateDynamicObject(19463, 1656.65173, -1597.31445, 1048.46716,   0.00000, 0.00000, -91.20000);
		CreateDynamicObject(19463, 1656.65173, -1597.31445, 1045.04724,   0.00000, 0.00000, -91.20000);
		CreateDynamicObject(19463, 1647.32739, -1597.12268, 1048.56726,   0.00000, 0.00000, -91.20000);
		CreateDynamicObject(19463, 1653.31799, -1593.54944, 1051.92725,   0.00000, 0.00000, -91.20000);
		CreateDynamicObject(19463, 1653.31799, -1593.54944, 1048.48718,   0.00000, 0.00000, -91.20000);
		CreateDynamicObject(19463, 1653.31799, -1593.54944, 1055.40723,   0.00000, 0.00000, -91.20000);
		CreateDynamicObject(19463, 1653.31799, -1593.54944, 1045.04724,   0.00000, 0.00000, -91.20000);
		CreateDynamicObject(19463, 1648.58618, -1588.70386, 1058.34729,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1656.65173, -1597.31445, 1055.40723,   0.00000, 0.00000, -91.20000);
		CreateDynamicObject(19463, 1661.40356, -1588.88647, 1046.16687,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1656.65173, -1593.61450, 1045.04724,   0.00000, 0.00000, -91.20000);
		CreateDynamicObject(19463, 1656.64307, -1593.59644, 1048.50720,   0.00000, 0.00000, -91.20000);
		CreateDynamicObject(19463, 1666.23145, -1584.65112, 1046.22742,   -0.30000, 0.00000, -91.20000);
		CreateDynamicObject(19463, 1675.77307, -1584.90198, 1046.22742,   -0.30000, 0.00000, -91.20000);
		CreateDynamicObject(19463, 1685.11572, -1585.07959, 1046.22742,   -0.30000, 0.00000, -91.20000);
		CreateDynamicObject(19463, 1691.38599, -1588.58203, 1046.22742,   -0.30000, 0.00000, -91.20000);
		CreateDynamicObject(19463, 1661.42090, -1602.15039, 1046.16687,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1666.19385, -1607.09741, 1046.22742,   -0.30000, 0.00000, -91.20000);
		CreateDynamicObject(19463, 1675.66357, -1607.28760, 1046.18738,   -0.30000, 0.00000, -91.20000);
		CreateDynamicObject(19463, 1685.13245, -1607.48706, 1046.18738,   -0.30000, 0.00000, -91.20000);
		CreateDynamicObject(19463, 1691.28723, -1604.88147, 1046.18738,   -0.30000, 0.00000, -91.20000);
		CreateDynamicObject(19463, 1697.91431, -1589.50940, 1046.16687,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1697.92468, -1608.53967, 1046.16687,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1664.58618, -1584.02063, 1046.24939,   0.00000, 0.00000, 0.12000);
		CreateDynamicObject(19392, 1663.05847, -1588.72791, 1046.24866,   0.00000, 0.00000, -91.44010);
		CreateDynamicObject(19392, 1666.11743, -1588.81177, 1046.24866,   0.00000, 0.00000, -91.44010);
		CreateDynamicObject(19463, 1667.65308, -1584.08289, 1046.24939,   0.00000, 0.00000, 0.12000);
		CreateDynamicObject(19392, 1669.31738, -1588.89185, 1046.24866,   0.00000, 0.00000, -91.44010);
		CreateDynamicObject(19463, 1670.82532, -1584.18127, 1046.24939,   0.00000, 0.00000, 0.12000);
		CreateDynamicObject(19392, 1672.51746, -1588.97180, 1046.24866,   0.00000, 0.00000, -91.44010);
		CreateDynamicObject(19463, 1674.04529, -1584.26135, 1046.24939,   0.00000, 0.00000, -1.38000);
		CreateDynamicObject(19463, 1661.40356, -1588.88647, 1049.66687,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19392, 1675.61755, -1589.05176, 1046.24866,   0.00000, 0.00000, -91.44010);
		CreateDynamicObject(19463, 1677.26526, -1584.36133, 1046.24939,   0.00000, 0.00000, -1.38000);
		CreateDynamicObject(19392, 1678.72375, -1589.14441, 1046.24866,   0.00000, 0.00000, -91.44010);
		CreateDynamicObject(19463, 1680.36536, -1584.36133, 1046.24939,   0.00000, 0.00000, -1.38000);
		CreateDynamicObject(19392, 1681.82300, -1589.24146, 1046.24866,   0.00000, 0.00000, -91.44010);
		CreateDynamicObject(19463, 1683.46301, -1584.50781, 1046.24939,   0.00000, 0.00000, -1.38000);
		CreateDynamicObject(19463, 1686.74622, -1583.72888, 1046.24939,   0.00000, 0.00000, -1.38000);
		CreateDynamicObject(19392, 1663.08569, -1603.24158, 1046.24866,   0.00000, 0.00000, -91.44010);
		CreateDynamicObject(2525, 1664.18726, -1585.13281, 1044.48950,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1664.61438, -1608.08752, 1046.24939,   0.00000, 0.00000, 0.12000);
		CreateDynamicObject(19392, 1666.26807, -1603.31812, 1046.24866,   0.00000, 0.00000, -91.44010);
		CreateDynamicObject(19463, 1667.79163, -1608.11365, 1046.24939,   0.00000, 0.00000, 0.12000);
		CreateDynamicObject(19392, 1669.39197, -1603.40259, 1046.24866,   0.00000, 0.00000, -91.44010);
		CreateDynamicObject(19463, 1670.93091, -1608.17151, 1046.24939,   0.00000, 0.00000, 0.12000);
		CreateDynamicObject(19392, 1672.48096, -1603.47644, 1046.24866,   0.00000, 0.00000, -91.44010);
		CreateDynamicObject(19463, 1674.01086, -1608.26489, 1046.24939,   0.00000, 0.00000, 0.12000);
		CreateDynamicObject(19392, 1675.62854, -1603.57043, 1046.24866,   0.00000, 0.00000, -91.44010);
		CreateDynamicObject(19463, 1677.20911, -1608.36865, 1046.24939,   0.00000, 0.00000, 0.12000);
		CreateDynamicObject(19392, 1678.74927, -1603.65955, 1046.24866,   0.00000, 0.00000, -91.44010);
		CreateDynamicObject(19463, 1680.28076, -1608.46558, 1046.24939,   0.00000, 0.00000, 0.12000);
		CreateDynamicObject(19392, 1681.86609, -1603.73962, 1046.24866,   0.00000, 0.00000, -91.44010);
		CreateDynamicObject(19463, 1683.40356, -1608.51038, 1046.24939,   0.00000, 0.00000, 0.12000);
		CreateDynamicObject(19463, 1686.54285, -1609.52209, 1046.24939,   0.00000, 0.00000, 0.12000);
		CreateDynamicObject(19463, 1661.42090, -1602.15039, 1049.62695,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1666.11194, -1589.67859, 1047.96790,   0.00000, -90.00000, -91.12000);
		CreateDynamicObject(19463, 1675.64807, -1589.86670, 1047.96790,   0.00000, -90.00000, -91.12000);
		CreateDynamicObject(19463, 1681.96973, -1589.95520, 1047.96790,   0.00000, -90.00000, -91.12000);
		CreateDynamicObject(19463, 1682.02966, -1586.49524, 1047.96790,   0.00000, -90.00000, -91.12000);
		CreateDynamicObject(19463, 1672.44519, -1586.33203, 1047.96790,   0.00000, -90.00000, -91.12000);
		CreateDynamicObject(19463, 1662.90466, -1586.15857, 1047.96790,   0.00000, -90.00000, -91.12000);
		CreateDynamicObject(19392, 1663.05847, -1588.72791, 1049.72876,   0.00000, 0.00000, -91.44010);
		CreateDynamicObject(19392, 1666.21851, -1588.78784, 1049.72876,   0.00000, 0.00000, -91.44010);
		CreateDynamicObject(19463, 1664.64624, -1584.02063, 1049.72937,   0.00000, 0.00000, 0.12000);
		CreateDynamicObject(19463, 1667.74622, -1584.02063, 1049.72937,   0.00000, 0.00000, 0.12000);
		CreateDynamicObject(19392, 1669.37903, -1588.86023, 1049.72876,   0.00000, 0.00000, -91.44010);
		CreateDynamicObject(19463, 1670.88623, -1584.02063, 1049.72937,   0.00000, 0.00000, 0.12000);
		CreateDynamicObject(19392, 1672.56384, -1588.93982, 1049.72876,   0.00000, 0.00000, -91.44010);
		CreateDynamicObject(19463, 1674.08618, -1584.10059, 1049.72937,   0.00000, 0.00000, 0.12000);
		CreateDynamicObject(19392, 1675.69458, -1589.02014, 1049.72876,   0.00000, 0.00000, -91.44010);
		CreateDynamicObject(19463, 1677.30701, -1584.31824, 1049.72937,   0.00000, 0.00000, 0.12000);
		CreateDynamicObject(19392, 1678.88159, -1589.10095, 1049.72876,   0.00000, 0.00000, -91.44010);
		CreateDynamicObject(19463, 1680.42651, -1584.40332, 1049.72937,   0.00000, 0.00000, 0.12000);
		CreateDynamicObject(19392, 1681.98352, -1589.18823, 1049.72876,   0.00000, 0.00000, -91.44010);
		CreateDynamicObject(19463, 1683.51428, -1584.46533, 1049.72937,   0.00000, 0.00000, 0.12000);
		CreateDynamicObject(19463, 1681.78027, -1602.89954, 1047.96790,   0.00000, -90.00000, -91.12000);
		CreateDynamicObject(19463, 1672.26855, -1602.70251, 1047.96790,   0.00000, -90.00000, -91.12000);
		CreateDynamicObject(19463, 1662.68140, -1602.51379, 1047.96790,   0.00000, -90.00000, -91.12000);
		CreateDynamicObject(19463, 1681.70435, -1606.39709, 1047.96790,   0.00000, -90.00000, -91.12000);
		CreateDynamicObject(19463, 1672.10376, -1606.20471, 1047.96790,   0.00000, -90.00000, -91.12000);
		CreateDynamicObject(19463, 1662.58508, -1606.00745, 1047.96790,   0.00000, -90.00000, -91.12000);
		CreateDynamicObject(19463, 1685.11572, -1585.07959, 1049.66736,   -0.30000, 0.00000, -91.20000);
		CreateDynamicObject(19463, 1675.77307, -1584.90198, 1049.76746,   -0.30000, 0.00000, -91.20000);
		CreateDynamicObject(19463, 1666.23145, -1584.65112, 1049.76746,   -0.30000, 0.00000, -91.20000);
		CreateDynamicObject(19392, 1663.10559, -1603.23938, 1049.72876,   0.00000, 0.00000, -91.44010);
		CreateDynamicObject(19463, 1666.17444, -1607.09277, 1049.58740,   -0.30000, 0.00000, -91.20000);
		CreateDynamicObject(19463, 1664.61023, -1608.10706, 1049.72937,   0.00000, 0.00000, 0.12000);
		CreateDynamicObject(19392, 1666.26794, -1603.31824, 1049.72876,   0.00000, 0.00000, -91.44010);
		CreateDynamicObject(19463, 1667.88879, -1608.23633, 1049.72937,   0.00000, 0.00000, 0.12000);
		CreateDynamicObject(19392, 1669.38013, -1603.40881, 1049.72876,   0.00000, 0.00000, -91.44010);
		CreateDynamicObject(19463, 1670.90540, -1608.20178, 1049.72937,   0.00000, 0.00000, 0.12000);
		CreateDynamicObject(19392, 1672.57385, -1603.49231, 1049.72876,   0.00000, 0.00000, -91.44010);
		CreateDynamicObject(19463, 1674.14478, -1608.27075, 1049.72937,   0.00000, 0.00000, 0.12000);
		CreateDynamicObject(19392, 1675.72729, -1603.57727, 1049.72876,   0.00000, 0.00000, -91.44010);
		CreateDynamicObject(19463, 1677.29321, -1608.40710, 1049.72937,   0.00000, 0.00000, 0.12000);
		CreateDynamicObject(19392, 1678.86487, -1603.65198, 1049.72876,   0.00000, 0.00000, -91.44010);
		CreateDynamicObject(19463, 1680.40552, -1608.50195, 1049.72937,   0.00000, 0.00000, 0.12000);
		CreateDynamicObject(19392, 1682.01416, -1603.72864, 1049.72876,   0.00000, 0.00000, -91.44010);
		CreateDynamicObject(19463, 1683.54736, -1608.52661, 1049.72937,   0.00000, 0.00000, 0.12000);
		CreateDynamicObject(19463, 1675.66357, -1607.28760, 1049.54736,   -0.30000, 0.00000, -91.20000);
		CreateDynamicObject(19463, 1685.13245, -1607.48706, 1049.64746,   -0.30000, 0.00000, -91.20000);
		CreateDynamicObject(19463, 1700.75793, -1605.11633, 1049.66736,   -0.30000, 0.00000, -91.20000);
		CreateDynamicObject(19463, 1696.19019, -1596.72827, 1047.96790,   0.00000, -90.00000, -179.98000);
		CreateDynamicObject(19463, 1691.60876, -1590.13770, 1047.96790,   0.00000, -90.00000, -91.12000);
		CreateDynamicObject(19463, 1701.00684, -1590.32849, 1047.96790,   0.00000, -90.00000, -91.12000);
		CreateDynamicObject(19463, 1691.38953, -1603.08289, 1047.96790,   0.00000, -90.00000, -91.12000);
		CreateDynamicObject(19463, 1686.73523, -1583.73914, 1049.76953,   0.00000, 0.00000, -1.38000);
		CreateDynamicObject(19463, 1697.92468, -1608.53967, 1049.66687,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1697.91431, -1589.50940, 1049.66687,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1691.38599, -1588.58203, 1049.74744,   -0.30000, 0.00000, -91.20000);
		CreateDynamicObject(19463, 1700.89954, -1588.80371, 1046.22742,   -0.30000, 0.00000, -91.20000);
		CreateDynamicObject(19463, 1700.89954, -1588.80371, 1049.68738,   -0.30000, 0.00000, -91.20000);
		CreateDynamicObject(19463, 1691.30725, -1604.88025, 1049.72729,   -0.30000, 0.00000, -91.20000);
		CreateDynamicObject(19463, 1700.75757, -1605.07251, 1046.16736,   -0.30000, 0.00000, -91.20000);
		CreateDynamicObject(19463, 1686.57727, -1609.51709, 1049.72278,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1800, 1661.97546, -1588.77795, 1044.50928,   0.00000, 0.00000, -1.38000);
		CreateDynamicObject(1800, 1665.21558, -1588.79761, 1044.50928,   0.00000, 0.00000, -1.38000);
		CreateDynamicObject(2525, 1667.21326, -1585.18567, 1044.48950,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1800, 1668.19507, -1588.44678, 1044.50928,   0.00000, 0.00000, -1.38000);
		CreateDynamicObject(2525, 1670.41101, -1585.33594, 1044.48950,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1800, 1671.46838, -1588.39172, 1044.50928,   0.00000, 0.00000, -1.38000);
		CreateDynamicObject(2525, 1673.55432, -1585.38037, 1044.48950,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1800, 1674.74609, -1588.43896, 1044.50928,   0.00000, 0.00000, -1.38000);
		CreateDynamicObject(2525, 1676.79333, -1585.52979, 1044.48950,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1800, 1677.82874, -1588.48743, 1044.50928,   0.00000, 0.00000, -1.38000);
		CreateDynamicObject(2525, 1679.88867, -1585.54639, 1044.48950,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1800, 1680.88245, -1588.63623, 1044.50928,   0.00000, 0.00000, -1.38000);
		CreateDynamicObject(2525, 1683.08179, -1585.60974, 1044.48950,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1800, 1680.88245, -1588.63623, 1048.00928,   0.00000, 0.00000, -1.38000);
		CreateDynamicObject(1800, 1677.82874, -1588.48743, 1048.00928,   0.00000, 0.00000, -1.38000);
		CreateDynamicObject(1800, 1674.74609, -1588.43896, 1048.00928,   0.00000, 0.00000, -1.38000);
		CreateDynamicObject(1800, 1671.46838, -1588.39172, 1048.00928,   0.00000, 0.00000, -1.38000);
		CreateDynamicObject(1800, 1668.19507, -1588.44678, 1048.00928,   0.00000, 0.00000, -1.38000);
		CreateDynamicObject(1800, 1665.21558, -1588.79761, 1048.00928,   0.00000, 0.00000, -1.38000);
		CreateDynamicObject(1800, 1661.99426, -1588.75671, 1048.00928,   0.00000, 0.00000, -1.38000);
		CreateDynamicObject(2525, 1683.08179, -1585.60974, 1048.02954,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2525, 1679.88867, -1585.54639, 1048.02954,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2525, 1676.79333, -1585.52979, 1048.02954,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2525, 1673.55432, -1585.38037, 1048.02954,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2525, 1670.41101, -1585.33594, 1048.02954,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2525, 1667.21326, -1585.18567, 1048.02954,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2525, 1664.18726, -1585.13281, 1048.02954,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2525, 1661.92871, -1606.47131, 1044.48950,   0.00000, 0.00000, -181.55995);
		CreateDynamicObject(2525, 1665.04993, -1606.51880, 1044.48950,   0.00000, 0.00000, -181.55995);
		CreateDynamicObject(1800, 1666.84290, -1608.06714, 1044.46863,   0.00000, 0.00000, -1.20000);
		CreateDynamicObject(2525, 1668.12964, -1606.57129, 1044.48950,   0.00000, 0.00000, -181.55995);
		CreateDynamicObject(2525, 1671.22754, -1606.57520, 1044.48950,   0.00000, 0.00000, -181.55995);
		CreateDynamicObject(2525, 1674.43323, -1606.68384, 1044.48950,   0.00000, 0.00000, -181.55995);
		CreateDynamicObject(2525, 1677.61035, -1606.78577, 1044.48950,   0.00000, 0.00000, -181.55995);
		CreateDynamicObject(2525, 1680.64978, -1606.81824, 1044.48950,   0.00000, 0.00000, -181.55995);
		CreateDynamicObject(2525, 1680.64978, -1606.81824, 1048.02954,   0.00000, 0.00000, -181.56000);
		CreateDynamicObject(2525, 1677.61035, -1606.78577, 1048.02954,   0.00000, 0.00000, -181.56000);
		CreateDynamicObject(2525, 1674.43323, -1606.68384, 1048.02954,   0.00000, 0.00000, -181.56000);
		CreateDynamicObject(2525, 1671.22754, -1606.57520, 1048.02954,   0.00000, 0.00000, -181.56000);
		CreateDynamicObject(2525, 1668.12964, -1606.57129, 1048.02954,   0.00000, 0.00000, -181.56000);
		CreateDynamicObject(2525, 1665.04993, -1606.51880, 1048.02954,   0.00000, 0.00000, -181.56000);
		CreateDynamicObject(2525, 1661.92871, -1606.47131, 1048.02954,   0.00000, 0.00000, -181.56000);
		CreateDynamicObject(983, 1691.22656, -1601.36206, 1048.70190,   0.00000, 0.00000, -91.14000);
		CreateDynamicObject(983, 1684.84460, -1601.24243, 1048.70190,   0.00000, 0.00000, -91.14000);
		CreateDynamicObject(983, 1678.46753, -1601.12488, 1048.70190,   0.00000, 0.00000, -91.14000);
		CreateDynamicObject(983, 1672.13000, -1601.01099, 1048.70190,   0.00000, 0.00000, -91.14000);
		CreateDynamicObject(983, 1665.77100, -1600.91553, 1048.70190,   0.00000, 0.00000, -91.14000);
		CreateDynamicObject(983, 1659.40857, -1600.78760, 1048.70190,   0.00000, 0.00000, -91.14000);
		CreateDynamicObject(983, 1691.33752, -1591.84399, 1048.70190,   0.00000, 0.00000, -91.14000);
		CreateDynamicObject(983, 1684.96326, -1591.68420, 1048.70190,   0.00000, 0.00000, -91.14000);
		CreateDynamicObject(983, 1678.56189, -1591.54724, 1048.70190,   0.00000, 0.00000, -91.14000);
		CreateDynamicObject(983, 1672.16138, -1591.44165, 1048.70190,   0.00000, 0.00000, -91.14000);
		CreateDynamicObject(983, 1665.76343, -1591.31042, 1048.70190,   0.00000, 0.00000, -91.14000);
		CreateDynamicObject(983, 1659.37915, -1591.18701, 1048.70190,   0.00000, 0.00000, -91.14000);
		CreateDynamicObject(19463, 1661.42090, -1602.15039, 1053.10706,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1661.40356, -1588.88647, 1053.14685,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1656.64307, -1593.59644, 1051.96716,   0.00000, 0.00000, -91.20000);
		CreateDynamicObject(19463, 1656.64307, -1593.59644, 1055.42725,   0.00000, 0.00000, -91.20000);
		CreateDynamicObject(19463, 1661.15234, -1593.70691, 1053.10742,   0.00000, 0.00000, -2.28000);
		CreateDynamicObject(19463, 1661.15234, -1593.70691, 1056.58740,   0.00000, 0.00000, -2.28000);
		CreateDynamicObject(19392, 1661.08911, -1595.33325, 1046.18616,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1661.07397, -1601.56726, 1046.16699,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1661.07397, -1601.56726, 1049.64697,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1661.08228, -1592.11365, 1049.66687,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19392, 1588.21106, -1528.51208, 1066.99695,   0.00000, 0.00000, -88.38000);
		CreateDynamicObject(19463, 1594.55371, -1528.47839, 1067.04736,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(1800, 1663.50464, -1608.04517, 1044.46863,   0.00000, 0.00000, -1.20000);
		CreateDynamicObject(1800, 1669.96204, -1608.15283, 1044.46863,   0.00000, 0.00000, -1.20000);
		CreateDynamicObject(1800, 1673.04578, -1608.21655, 1044.46863,   0.00000, 0.00000, -1.20000);
		CreateDynamicObject(1800, 1676.21594, -1608.31958, 1044.46863,   0.00000, 0.00000, -1.20000);
		CreateDynamicObject(1800, 1679.38403, -1608.36536, 1044.46863,   0.00000, 0.00000, -1.20000);
		CreateDynamicObject(1800, 1682.54321, -1608.46326, 1044.46863,   0.00000, 0.00000, -1.20000);
		CreateDynamicObject(1800, 1682.54321, -1608.46326, 1048.00854,   0.00000, 0.00000, -1.20000);
		CreateDynamicObject(1800, 1679.40405, -1608.36450, 1048.00854,   0.00000, 0.00000, -1.20000);
		CreateDynamicObject(1800, 1676.21594, -1608.31958, 1048.00854,   0.00000, 0.00000, -1.20000);
		CreateDynamicObject(1800, 1663.50464, -1608.04517, 1048.00854,   0.00000, 0.00000, -1.20000);
		CreateDynamicObject(1800, 1666.84290, -1608.06714, 1048.00854,   0.00000, 0.00000, -1.20000);
		CreateDynamicObject(1800, 1669.96204, -1608.15283, 1048.00854,   0.00000, 0.00000, -1.20000);
		CreateDynamicObject(1800, 1673.04578, -1608.21655, 1048.00854,   0.00000, 0.00000, -1.20000);
		CreateDynamicObject(2960, 1640.12524, -1578.70410, 1059.92932,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2960, 1635.53833, -1578.68701, 1059.92932,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1985, 1639.24011, -1578.70837, 1059.65686,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2960, 1633.37366, -1578.67188, 1059.92932,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2960, 1631.36597, -1580.80334, 1059.92932,   0.00000, 0.00000, 92.22000);
		CreateDynamicObject(1985, 1633.55237, -1578.63391, 1059.65686,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1985, 1631.37610, -1580.63281, 1059.65686,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(14407, 1704.49109, -1595.96716, 1044.91382,   0.00000, 0.00000, -272.09991);
		CreateDynamicObject(19371, 1697.93286, -1602.14941, 1046.14722,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19371, 1697.92810, -1598.98157, 1046.14722,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19392, 1697.91846, -1595.82031, 1046.15186,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1702.76672, -1594.30518, 1046.22742,   -0.30000, 0.00000, -91.20000);
		CreateDynamicObject(19463, 1702.75525, -1597.50635, 1046.22742,   -0.30000, 0.00000, -91.20000);
		CreateDynamicObject(19417, 1697.88660, -1595.80420, 1049.71741,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19371, 1697.92810, -1598.98157, 1046.14722,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1697.85693, -1605.38379, 1049.70691,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1702.67786, -1592.88159, 1047.98792,   0.00000, -90.00000, -91.12000);
		CreateDynamicObject(19371, 1699.71484, -1596.11621, 1048.00708,   0.00000, 90.00000, 0.00000);
		CreateDynamicObject(19463, 1702.68140, -1599.20935, 1047.98792,   0.00000, -90.00000, -91.12000);
		CreateDynamicObject(19463, 1707.48572, -1607.18567, 1047.96790,   0.00000, -90.00000, -179.74010);
		CreateDynamicObject(19463, 1709.04395, -1602.37781, 1047.98792,   0.00000, -90.00000, -179.74005);
		CreateDynamicObject(19463, 1707.27026, -1596.18298, 1049.82690,   0.00000, 0.00000, -1.14000);
		CreateDynamicObject(19463, 1704.19482, -1604.23096, 1049.82690,   0.00000, 0.00000, -43.08001);
		CreateDynamicObject(19463, 1704.57373, -1590.17371, 1049.82690,   0.00000, 0.00000, 39.84000);
		CreateDynamicObject(19417, 1697.88354, -1598.99451, 1049.71741,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1710.63660, -1603.51794, 1047.96790,   0.00000, -90.00000, -91.12000);
		CreateDynamicObject(19463, 1701.02832, -1602.63550, 1047.96790,   0.00000, -90.00000, -91.12000);
		CreateDynamicObject(19463, 1700.92468, -1606.11755, 1047.96790,   0.00000, -90.00000, -91.12000);
		CreateDynamicObject(19463, 1710.63257, -1602.85425, 1047.96790,   0.00000, -90.00000, -91.12000);
		CreateDynamicObject(1714, 1699.84680, -1601.22205, 1048.05530,   0.00000, 0.00000, -88.20000);
		CreateDynamicObject(2008, 1698.47766, -1602.01624, 1048.03320,   0.00000, 0.00000, 90.48000);
		CreateDynamicObject(2008, 1698.63623, -1592.92322, 1048.03320,   0.00000, 0.00000, 90.48000);
		CreateDynamicObject(1714, 1699.94165, -1592.41858, 1048.05530,   0.00000, 0.00000, -88.50001);
		CreateDynamicObject(2174, 1704.85364, -1602.64966, 1048.07495,   0.00000, 0.00000, -132.18021);
		CreateDynamicObject(2174, 1704.20679, -1590.63110, 1048.07495,   0.00000, 0.00000, -49.98020);
		CreateDynamicObject(1649, 1697.91064, -1600.18933, 1049.55457,   0.00000, 0.00000, 90.24000);
		CreateDynamicObject(1649, 1697.91492, -1595.30322, 1049.55457,   0.00000, 0.00000, -90.36002);
		CreateDynamicObject(1649, 1697.82788, -1595.18347, 1049.55457,   0.00000, 0.00000, 89.94005);
		CreateDynamicObject(1649, 1697.85352, -1599.94214, 1049.55457,   0.00000, 0.00000, -90.06000);
		CreateDynamicObject(19463, 1690.00757, -1596.48450, 1046.10791,   23.00000, -90.00000, -91.00000);
		CreateDynamicObject(970, 1692.26794, -1594.84790, 1047.69519,   0.00000, 22.00000, -181.46001);
		CreateDynamicObject(970, 1688.45654, -1594.77405, 1046.03528,   0.00000, 25.00000, -181.00000);
		CreateDynamicObject(970, 1688.45654, -1598.15405, 1046.03528,   0.00000, 25.00000, -181.00000);
		CreateDynamicObject(970, 1692.26794, -1598.22791, 1047.69519,   0.00000, 22.00000, -181.46001);
		CreateDynamicObject(19340, 1597.14673, -1443.52026, 1061.58826,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19340, 1566.39502, -1611.72034, 1057.40833,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19377, 1616.08789, -1551.40308, 1061.07214,   0.00000, 90.00000, 0.00000);
		CreateDynamicObject(19377, 1616.09595, -1541.78467, 1061.07214,   0.00000, 90.00000, 0.00000);
		CreateDynamicObject(19340, 1600.45239, -1634.25317, 1052.86829,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19340, 1689.43018, -1496.84985, 1052.86829,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19340, 1696.61780, -1520.23340, 1040.80835,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19340, 1748.39966, -1578.36609, 1055.15088,   0.00000, -180.00000, -91.26000);
		CreateDynamicObject(19377, 1656.01526, -1597.11694, 1056.53577,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19377, 1645.51526, -1597.11694, 1056.53577,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19340, 1656.50244, -1548.30750, 1068.45630,   0.00000, -180.00000, -89.94000);
		CreateDynamicObject(19463, 1609.71228, -1570.15112, 1065.14746,   0.00000, 0.00000, -91.14000);
		CreateDynamicObject(19340, 1701.92676, -1567.01184, 1063.69775,   0.00000, -180.00000, -91.26000);
		CreateDynamicObject(19340, 1645.01624, -1497.41504, 1072.28955,   0.00000, -180.00000, -89.94000);
		CreateDynamicObject(19340, 1524.42065, -1446.69922, 1072.28955,   0.00000, -180.00000, -89.94000);
		CreateDynamicObject(19340, 1526.94580, -1612.74573, 1063.69775,   0.00000, -180.00000, -91.26000);
		CreateDynamicObject(19463, 1638.03992, -1570.64392, 1058.22717,   0.00000, 0.00000, -91.19998);
		CreateDynamicObject(19463, 1647.63013, -1570.85632, 1058.22717,   0.00000, 0.00000, -91.19998);
		CreateDynamicObject(19463, 1590.44092, -1508.64880, 1067.00745,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 1590.44116, -1499.04688, 1067.00745,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2008, 1568.23889, -1492.98328, 1065.31616,   0.00000, 0.00000, 90.95997);
	}
	else if (map == INT_Hitman)
	{
		CreateDynamicObject(19340, 210.32159, -1571.41931, 1003.56000,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19462, 217.24690, -1484.53882, 1009.00049,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19462, 207.63960, -1484.53882, 1009.00049,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19462, 226.86690, -1484.53882, 1009.00049,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19378, 208.07950, -1489.42676, 1007.22101,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 218.55949, -1489.42676, 1007.22101,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 218.55630, -1499.04651, 1007.22101,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 208.07950, -1499.04651, 1007.22101,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 229.05949, -1489.42676, 1007.22101,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 229.03951, -1499.04675, 1007.22101,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19462, 236.45470, -1484.53015, 1009.00049,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19462, 234.16663, -1489.38440, 1009.00049,   0.00000, 0.00000, -180.00011);
		CreateDynamicObject(19462, 234.16550, -1499.00342, 1009.00049,   0.00000, 0.00000, -180.00011);
		CreateDynamicObject(19462, 229.42250, -1503.38257, 1009.00049,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19462, 219.85626, -1503.36023, 1009.00049,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19462, 210.35629, -1503.35339, 1009.00049,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19462, 205.69304, -1498.60291, 1009.00049,   0.00000, 0.00000, -180.00011);
		CreateDynamicObject(19462, 205.69760, -1488.98987, 1009.00049,   0.00000, 0.00000, -180.00011);
		CreateDynamicObject(14407, 232.61450, -1491.64221, 1007.58142,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19378, 229.03951, -1499.04675, 1010.68103,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19462, 230.56970, -1493.47034, 1009.02051,   0.00000, 0.00000, -180.00011);
		CreateDynamicObject(19462, 230.56970, -1503.09033, 1009.00049,   0.00000, 0.00000, -180.00011);
		CreateDynamicObject(19378, 225.39639, -1489.41125, 1010.68103,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 218.53951, -1499.04675, 1010.68103,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 208.03951, -1499.04675, 1010.68103,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 214.91209, -1489.41077, 1010.68103,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 204.41209, -1489.41077, 1010.68103,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19462, 234.18640, -1489.38171, 1012.48053,   0.00000, 0.00000, -180.00011);
		CreateDynamicObject(19462, 234.16550, -1499.00342, 1012.48053,   0.00000, 0.00000, -180.00011);
		CreateDynamicObject(19462, 229.42250, -1503.38257, 1012.48053,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19462, 219.85629, -1503.36023, 1012.48053,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19462, 210.35629, -1503.35339, 1012.48053,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19462, 205.73279, -1498.60681, 1012.48053,   0.00000, 0.00000, -180.00011);
		CreateDynamicObject(19462, 205.69760, -1488.98987, 1012.48053,   0.00000, 0.00000, -180.00011);
		CreateDynamicObject(19462, 207.63960, -1484.53882, 1012.48053,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19462, 217.24690, -1484.53882, 1012.48053,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19462, 226.86690, -1484.53882, 1012.48053,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19462, 236.44440, -1484.51294, 1012.48053,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19378, 229.01950, -1499.04712, 1014.28101,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 218.53951, -1499.04675, 1014.28101,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 225.39639, -1489.41125, 1014.30103,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 214.91209, -1489.41077, 1014.30103,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 204.41209, -1489.41077, 1014.30103,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 208.03951, -1499.04675, 1014.28101,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 235.89639, -1489.41125, 1014.30103,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19462, 230.54970, -1493.47034, 1012.48053,   0.00000, 0.00000, -180.00011);
		CreateDynamicObject(19462, 230.54951, -1483.90527, 1012.48053,   0.00000, 0.00000, -180.00011);
		CreateDynamicObject(19415, 224.43340, -1498.56580, 1009.00238,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19415, 225.94119, -1497.03784, 1009.00238,   0.00000, 0.00000, -89.76000);
		CreateDynamicObject(19415, 229.13640, -1497.03003, 1009.00238,   0.00000, 0.00000, -89.76000);
		CreateDynamicObject(19397, 224.43340, -1501.73376, 1009.00098,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19415, 219.94110, -1497.13977, 1009.00238,   0.00000, 0.00000, -89.76000);
		CreateDynamicObject(19415, 221.45340, -1498.66577, 1009.00238,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19397, 221.45340, -1501.85266, 1009.00098,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19415, 216.73746, -1497.15515, 1009.00238,   0.00000, 0.00000, -89.76000);
		CreateDynamicObject(19415, 215.21420, -1498.67847, 1009.00238,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19415, 215.21420, -1501.87854, 1009.00238,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19415, 215.21420, -1486.19849, 1009.00238,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19397, 215.21603, -1489.39319, 1009.00098,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19415, 216.74989, -1490.90710, 1009.00238,   0.00000, 0.00000, -89.76000);
		CreateDynamicObject(19415, 219.92990, -1490.88708, 1009.00238,   0.00000, 0.00000, -89.76000);
		CreateDynamicObject(19415, 221.45419, -1489.35999, 1009.00238,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19415, 221.45419, -1486.16003, 1009.00238,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19397, 212.06000, -1489.37354, 1009.00098,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19415, 212.06120, -1486.16248, 1009.00238,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19415, 210.52991, -1490.90710, 1009.00238,   0.00000, 0.00000, -89.76000);
		CreateDynamicObject(19415, 207.35800, -1490.92578, 1009.00238,   0.00000, 0.00000, -89.76000);
		CreateDynamicObject(1557, 205.71120, -1495.39563, 1007.28632,   0.00000, 0.00000, -89.57990);
		CreateDynamicObject(2162, 210.69501, -1484.65271, 1007.27271,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2161, 208.60760, -1484.62878, 1007.26172,   -0.02000, 0.00000, 0.00000);
		CreateDynamicObject(2161, 207.28760, -1484.62878, 1007.26172,   -0.02000, 0.00000, 0.00000);
		CreateDynamicObject(2165, 209.30878, -1490.37292, 1007.30817,   0.00000, 0.00000, -179.75987);
		CreateDynamicObject(1806, 208.73157, -1488.92236, 1007.30865,   0.00000, 0.00000, -180.54002);
		CreateDynamicObject(1502, 212.04131, -1488.57898, 1007.30713,   0.00000, 0.00000, -89.64000);
		CreateDynamicObject(1502, 215.18130, -1488.57898, 1007.30713,   0.00000, 0.00000, -89.64000);
		CreateDynamicObject(1742, 205.65710, -1489.16223, 1007.28601,   0.00000, 0.00000, 89.88000);
		CreateDynamicObject(1742, 205.65710, -1487.74219, 1007.28601,   0.00000, 0.00000, 89.88000);
		CreateDynamicObject(1742, 205.65710, -1486.32214, 1007.28601,   0.00000, 0.00000, 89.88000);
		CreateDynamicObject(2616, 211.12860, -1484.66931, 1009.60199,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2616, 207.88860, -1484.66931, 1009.60199,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(14699, 211.73660, -1496.56824, 1009.08740,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(14699, 228.07660, -1496.56824, 1009.08740,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(14699, 219.87660, -1496.56824, 1009.08740,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2239, 206.15971, -1502.81641, 1007.26678,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1760, 210.32651, -1502.85718, 1007.30792,   0.00000, 0.00000, -179.99960);
		CreateDynamicObject(1760, 213.98650, -1502.85718, 1007.30792,   0.00000, 0.00000, -179.99960);
		CreateDynamicObject(1817, 212.68121, -1500.87134, 1007.30737,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1817, 208.94119, -1500.87134, 1007.30737,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2007, 211.64439, -1487.85632, 1007.28748,   0.00000, 0.00000, -89.76000);
		CreateDynamicObject(2165, 219.06880, -1490.35291, 1007.30823,   0.00000, 0.00000, -179.75990);
		CreateDynamicObject(1806, 218.45160, -1488.92236, 1007.30872,   0.00000, 0.00000, -180.53999);
		CreateDynamicObject(1742, 215.79810, -1484.49414, 1007.28601,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1742, 217.21809, -1484.49414, 1007.28601,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2161, 220.24760, -1484.62878, 1007.26172,   -0.02000, 0.00000, 0.00000);
		CreateDynamicObject(2007, 221.03360, -1487.74683, 1007.28748,   0.00000, 0.00000, -89.76000);
		CreateDynamicObject(2616, 211.12860, -1484.66931, 1009.60199,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2616, 219.42679, -1484.70117, 1009.60199,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2165, 217.79118, -1497.68616, 1007.30823,   0.00000, 0.00000, -359.93958);
		CreateDynamicObject(2007, 221.00464, -1500.36084, 1007.28748,   0.00000, 0.00000, -89.76000);
		CreateDynamicObject(1806, 218.41113, -1499.18396, 1007.30865,   0.00000, 0.00000, -362.34048);
		CreateDynamicObject(1742, 216.24190, -1503.40625, 1007.28601,   0.00000, 0.00000, -179.82001);
		CreateDynamicObject(1742, 217.68140, -1503.41052, 1007.28601,   0.00000, 0.00000, -179.82001);
		CreateDynamicObject(2161, 219.49890, -1503.27490, 1007.26172,   -0.02000, 0.00000, -180.00000);
		CreateDynamicObject(2616, 219.37350, -1503.23376, 1009.60199,   0.00000, 0.00000, -180.00011);
		CreateDynamicObject(1742, 225.66815, -1503.41382, 1007.28601,   0.00000, 0.00000, -179.82001);
		CreateDynamicObject(1742, 227.08820, -1503.41382, 1007.28601,   0.00000, 0.00000, -179.82001);
		CreateDynamicObject(2161, 228.67889, -1503.27490, 1007.26172,   -0.02000, 0.00000, -180.00000);
		CreateDynamicObject(2161, 229.99890, -1503.27490, 1007.26172,   -0.02000, 0.00000, -180.00000);
		CreateDynamicObject(2616, 228.96259, -1503.25696, 1009.60199,   0.00000, 0.00000, -180.00011);
		CreateDynamicObject(2165, 226.81041, -1497.56897, 1007.30823,   0.00000, 0.00000, -359.93958);
		CreateDynamicObject(1806, 227.40300, -1499.08862, 1007.30865,   0.00000, 0.00000, -362.34048);
		CreateDynamicObject(2007, 230.05028, -1497.82654, 1007.28748,   0.00000, 0.00000, -89.76000);
		CreateDynamicObject(1742, 230.57796, -1499.07349, 1007.28601,   0.00000, 0.00000, -89.81992);
		CreateDynamicObject(1742, 230.57800, -1500.51355, 1007.28601,   0.00000, 0.00000, -89.81990);
		CreateDynamicObject(1502, 221.45320, -1501.06042, 1007.30713,   0.00000, 0.00000, -89.64000);
		CreateDynamicObject(1502, 224.41290, -1500.94080, 1007.30713,   0.00000, 0.00000, -89.64000);
		CreateDynamicObject(19462, 217.63010, -1489.42261, 1012.48053,   0.00000, 0.00000, -180.00011);
		CreateDynamicObject(19386, 217.62981, -1495.82104, 1012.48102,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19462, 217.61801, -1502.17603, 1012.48053,   0.00000, 0.00000, -180.00011);
		CreateDynamicObject(19466, 219.89931, -1497.14282, 1008.94067,   0.00000, 0.00000, -89.75990);
		CreateDynamicObject(19466, 216.73930, -1497.14282, 1008.94067,   0.00000, 0.00000, -89.75990);
		CreateDynamicObject(19466, 225.99690, -1497.04065, 1008.94067,   0.00000, 0.00000, -89.75990);
		CreateDynamicObject(19466, 229.21690, -1497.02063, 1008.94067,   0.00000, 0.00000, -89.75990);
		CreateDynamicObject(19466, 216.65500, -1490.91345, 1008.90070,   0.00000, 0.00000, -89.75990);
		CreateDynamicObject(19466, 219.83501, -1490.91345, 1008.90070,   0.00000, 0.00000, -89.75990);
		CreateDynamicObject(19466, 210.41550, -1490.90320, 1008.90070,   0.00000, 0.00000, -89.75990);
		CreateDynamicObject(19466, 207.43550, -1490.90320, 1008.90070,   0.00000, 0.00000, -89.75990);
		CreateDynamicObject(19466, 221.46210, -1489.18579, 1008.90070,   0.00000, 0.00000, 0.00010);
		CreateDynamicObject(19466, 221.46210, -1486.16577, 1008.90070,   0.00000, 0.00000, 0.00010);
		CreateDynamicObject(19466, 215.20480, -1486.29272, 1008.90070,   0.00000, 0.00000, 0.00010);
		CreateDynamicObject(19466, 215.21449, -1498.52393, 1008.90070,   0.00000, 0.00000, 0.00010);
		CreateDynamicObject(19466, 215.21449, -1501.94385, 1008.90070,   0.00000, 0.00000, 0.00010);
		CreateDynamicObject(19466, 221.44890, -1498.76135, 1008.90070,   0.00000, 0.00000, 0.00010);
		CreateDynamicObject(19466, 224.43269, -1498.51257, 1008.90070,   0.00000, 0.00000, 0.00010);
		CreateDynamicObject(19462, 225.66431, -1491.13159, 1012.48053,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(18070, 210.64560, -1495.54614, 1011.24780,   0.00000, 0.00000, 90.90010);
		CreateDynamicObject(2161, 212.91209, -1484.62842, 1010.71832,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2161, 211.59210, -1484.62842, 1010.71832,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1742, 214.22830, -1484.62927, 1010.74719,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1742, 215.66830, -1484.62927, 1010.74719,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2164, 209.85069, -1484.62903, 1010.72467,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2199, 217.04120, -1503.22083, 1010.75720,   0.00000, 0.00000, -180.30009);
		CreateDynamicObject(2199, 215.66119, -1503.22083, 1010.75720,   0.00000, 0.00000, -180.30009);
		CreateDynamicObject(2199, 214.28120, -1503.22083, 1010.75720,   0.00000, 0.00000, -180.30009);
		CreateDynamicObject(1714, 210.37425, -1495.65771, 1010.76855,   0.00000, 0.00000, 89.81999);
		CreateDynamicObject(2611, 205.83920, -1491.75708, 1012.90930,   0.00000, 0.00000, 89.99990);
		CreateDynamicObject(2894, 212.10141, -1495.68567, 1011.75616,   0.00000, 0.00000, -89.04007);
		CreateDynamicObject(2286, 205.84070, -1495.72729, 1013.02417,   0.00000, 0.00000, 89.88010);
		CreateDynamicObject(2281, 206.31290, -1499.82959, 1012.73810,   0.00000, 0.00000, 90.00000);
		CreateDynamicObject(2278, 206.26901, -1487.87134, 1012.67529,   0.00000, 0.00000, 90.71995);
		CreateDynamicObject(1734, 212.02223, -1496.23853, 1014.44952,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 229.04320, -1485.27698, 1011.16791,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 226.70320, -1485.27698, 1011.16791,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 224.36320, -1485.27698, 1011.16791,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 222.02319, -1485.27698, 1011.16791,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 229.04320, -1490.49695, 1011.16791,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 226.70320, -1490.49695, 1011.16791,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 224.36320, -1490.49695, 1011.16791,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 222.02319, -1490.49695, 1011.16791,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2007, 212.73090, -1502.80725, 1010.68408,   0.00000, 0.00000, -180.17999);
		CreateDynamicObject(2007, 211.77090, -1502.80725, 1010.68408,   0.00000, 0.00000, -180.17999);
		CreateDynamicObject(2007, 212.73090, -1502.80725, 1010.68408,   0.00000, 0.00000, -180.17999);
		CreateDynamicObject(2162, 210.68489, -1503.26941, 1010.74127,   0.00000, 0.00000, -180.59990);
		CreateDynamicObject(2162, 207.52640, -1503.28503, 1010.74127,   0.00000, 0.00000, -180.59990);
		CreateDynamicObject(3124, 222.27150, -1484.90479, 1012.28223,   7.00000, -6.00000, 34.28000);
		CreateDynamicObject(3124, 223.31149, -1484.90479, 1012.28223,   7.00000, -6.00000, 34.28000);
		CreateDynamicObject(3124, 224.83150, -1484.90479, 1012.28223,   7.00000, -6.00000, 34.28000);
		CreateDynamicObject(3124, 226.19150, -1484.90479, 1012.28223,   7.00000, -6.00000, 34.28000);
		CreateDynamicObject(3124, 227.59151, -1484.92480, 1012.36218,   7.00000, -6.00000, 34.28000);
		CreateDynamicObject(3124, 229.09151, -1484.90479, 1012.36218,   7.00000, -6.00000, 34.28000);
		CreateDynamicObject(347, 221.50436, -1485.13062, 1011.62201,   93.00000, -360.00000, -168.59970);
		CreateDynamicObject(347, 222.34441, -1485.13062, 1011.62201,   93.00000, -360.00000, -168.59970);
		CreateDynamicObject(347, 223.10440, -1485.13062, 1011.62201,   93.00000, -360.00000, -168.59970);
		CreateDynamicObject(347, 224.16440, -1485.13062, 1011.62201,   93.00000, -360.00000, -168.59970);
		CreateDynamicObject(347, 225.04440, -1485.13062, 1011.62201,   93.00000, -360.00000, -168.59970);
		CreateDynamicObject(347, 226.16440, -1485.13062, 1011.62201,   93.00000, -360.00000, -168.59970);
		CreateDynamicObject(347, 227.04440, -1485.13062, 1011.62201,   93.00000, -360.00000, -168.59970);
		CreateDynamicObject(347, 228.06441, -1485.13062, 1011.62201,   93.00000, -360.00000, -168.59970);
		CreateDynamicObject(347, 229.14439, -1485.13062, 1011.62201,   93.00000, -360.00000, -168.59970);
		CreateDynamicObject(347, 230.32440, -1485.13062, 1011.62201,   93.00000, -360.00000, -168.59970);
		CreateDynamicObject(3124, 222.31149, -1491.26477, 1012.28223,   7.00000, -6.00000, 34.28000);
		CreateDynamicObject(3124, 224.77150, -1491.26477, 1012.28223,   7.00000, -6.00000, 34.28000);
		CreateDynamicObject(3124, 227.15150, -1491.26477, 1012.28223,   7.00000, -6.00000, 34.28000);
		CreateDynamicObject(3124, 229.31149, -1491.26477, 1012.28223,   7.00000, -6.00000, 34.28000);
		CreateDynamicObject(347, 221.78754, -1490.36377, 1011.62201,   93.00000, -360.00000, -351.11981);
		CreateDynamicObject(347, 222.60750, -1490.36377, 1011.62201,   93.00000, -360.00000, -351.11981);
		CreateDynamicObject(347, 223.58749, -1490.36377, 1011.62201,   93.00000, -360.00000, -351.11981);
		CreateDynamicObject(347, 224.56750, -1490.36377, 1011.62201,   93.00000, -360.00000, -351.11981);
		CreateDynamicObject(347, 225.38750, -1490.36377, 1011.62201,   93.00000, -360.00000, -351.11981);
		CreateDynamicObject(347, 226.42751, -1490.36377, 1011.62201,   93.00000, -360.00000, -351.11981);
		CreateDynamicObject(347, 227.46750, -1490.36377, 1011.62201,   93.00000, -360.00000, -351.11981);
		CreateDynamicObject(347, 228.32750, -1490.36377, 1011.62201,   93.00000, -360.00000, -351.11981);
		CreateDynamicObject(347, 229.34750, -1490.36377, 1011.62201,   93.00000, -360.00000, -351.11981);
		CreateDynamicObject(3124, 230.06551, -1487.85669, 1013.26221,   7.00000, -6.00000, -59.50010);
		CreateDynamicObject(3124, 230.06551, -1487.85669, 1012.48218,   7.00000, -6.00000, -59.50010);
		CreateDynamicObject(3124, 230.06551, -1487.85669, 1011.58221,   7.00000, -6.00000, -59.50010);
		CreateDynamicObject(948, 206.10619, -1491.53088, 1007.26050,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(948, 230.10100, -1491.55750, 1010.75128,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(948, 218.13269, -1502.81104, 1010.75128,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2240, 206.12523, -1484.97559, 1011.18811,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(948, 217.05991, -1485.10486, 1010.73132,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1742, 208.42160, -1484.58960, 1010.74719,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1742, 207.00160, -1484.58960, 1010.74719,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(948, 208.69981, -1503.04626, 1010.75128,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19386, 219.34586, -1491.14929, 1012.48102,   0.00000, 0.00000, -89.93996);
		CreateDynamicObject(1502, 218.59930, -1491.17542, 1010.70941,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1502, 217.61501, -1495.03650, 1010.70941,   0.00000, 0.00000, -90.24000);
		CreateDynamicObject(14699, 223.55659, -1498.42822, 1012.78741,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(14699, 228.83659, -1498.42822, 1012.78741,   0.00000, 0.00000, 0.00000);
	}
	else if (map == INT_MinaHuntleCharry)
	{
		CreateDynamicObject(13675, 38.72421, -1695.08228, 800.40631,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(13675, -23.83010, -1572.05896, 800.40631,   0.00000, 0.00000, 45.59999);
		CreateDynamicObject(13675, -137.45171, -1517.40466, 800.40631,   0.00000, 0.00000, 73.19999);
		CreateDynamicObject(13675, -228.98851, -1545.34668, 800.40631,   0.00000, 0.00000, 111.11992);
		CreateDynamicObject(13675, -330.88275, -1586.70190, 800.40631,   0.00000, 0.00000, 140.63989);
		CreateDynamicObject(13675, -107.97237, -1785.43225, 800.72632,   0.00000, 0.00000, -169.80009);
		CreateDynamicObject(13675, -177.23381, -1751.15845, 802.32629,   0.00000, 0.00000, -64.56000);
		CreateDynamicObject(4020, -50.31731, -1831.92651, 762.90295,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(4020, -62.81237, -1751.48621, 729.88135,   0.00000, 180.00000, 359.00000);
		CreateDynamicObject(4020, -88.90334, -1637.89124, 762.90295,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(4020, -158.23430, -1546.07959, 762.78302,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(4020, -273.22391, -1598.25330, 762.90295,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(4020, -292.11383, -1656.85925, 762.90295,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(4020, -364.39639, -1703.86658, 762.90295,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(13675, -104.32078, -1834.00574, 800.72632,   0.00000, 0.00000, -87.24009);
		CreateDynamicObject(4020, -25.72769, -1719.82043, 762.90302,   0.00000, 0.00000, -360.00000);
		CreateDynamicObject(4020, -57.81711, -1668.58154, 729.89581,   0.00000, 180.00000, 359.00000);
		CreateDynamicObject(4020, -28.03932, -1577.68176, 729.90723,   0.00000, 180.00000, 336.92020);
		CreateDynamicObject(4020, -189.69630, -1557.02856, 729.91742,   0.00000, 180.00000, 359.00000);
		CreateDynamicObject(4020, -234.72290, -1638.53186, 748.33398,   0.00000, 180.00000, 359.00000);
		CreateDynamicObject(4020, -336.93256, -1676.69604, 748.33398,   0.00000, 180.00000, 359.00000);
		CreateDynamicObject(13675, -195.41676, -1665.35645, 802.32629,   0.00000, 0.00000, -149.22008);
		CreateDynamicObject(16304, -15.44362, -1747.56616, 743.00043,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1508, -41.28690, -1785.86584, 744.60999,   0.00000, 0.00000, -89.40000);
		CreateDynamicObject(1215, -74.97430, -1767.90210, 743.53271,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1215, -76.22976, -1764.98120, 743.53271,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1215, -77.54890, -1760.09033, 743.53271,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1215, -80.19475, -1754.52502, 743.53271,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1215, -82.64898, -1749.34802, 743.53271,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1215, -83.80196, -1745.10327, 743.53271,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1215, -84.90636, -1739.95923, 743.53271,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1215, -85.65501, -1735.51904, 743.53271,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1215, -85.81023, -1729.73645, 743.53271,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1215, -85.67202, -1724.57288, 743.53271,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1215, -84.82640, -1719.02734, 743.53271,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1215, -85.66856, -1712.11877, 743.53271,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1215, -85.54327, -1705.20227, 743.53271,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1215, -84.12414, -1698.12061, 743.53271,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1215, -84.62482, -1692.38477, 743.53271,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1215, -85.10758, -1688.12012, 743.53271,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1215, -85.98846, -1682.46436, 743.53271,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1215, -87.02965, -1678.37610, 743.53271,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1215, -86.07346, -1672.27100, 743.53271,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1215, -83.37793, -1666.56299, 743.53271,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1215, -80.18055, -1659.66992, 743.53271,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(3461, -44.74261, -1785.81116, 744.58679,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(3461, -37.79049, -1785.72119, 744.58679,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(899, -59.25952, -1781.00537, 743.00000,   0.00000, 0.00000, -27.00001);
		CreateDynamicObject(899, -25.62954, -1779.22168, 743.00000,   0.00000, 0.00000, -332.27957);
		CreateDynamicObject(899, -26.88462, -1768.16858, 743.00000,   0.00000, 0.00000, -332.27957);
		CreateDynamicObject(899, -28.36500, -1755.49744, 743.00000,   0.00000, 0.00000, -332.27957);
		CreateDynamicObject(899, -29.59880, -1741.84717, 743.00000,   0.00000, 0.00000, -332.27957);
		CreateDynamicObject(899, -58.80568, -1772.96216, 743.00000,   0.00000, 0.00000, -27.00001);
		CreateDynamicObject(899, -58.52188, -1763.90503, 743.00000,   0.00000, 0.00000, -24.00001);
		CreateDynamicObject(899, -60.40875, -1753.44861, 748.95105,   0.00000, 0.00000, 34.25999);
		CreateDynamicObject(899, -58.63491, -1753.08691, 743.00000,   0.00000, 0.00000, -20.46001);
		CreateDynamicObject(899, -62.35653, -1787.20605, 748.95105,   0.00000, 0.00000, -2.46001);
		CreateDynamicObject(899, -59.38841, -1768.23413, 748.95105,   0.00000, 0.00000, 31.50000);
		CreateDynamicObject(899, -25.72558, -1776.33472, 746.74921,   0.00000, 0.00000, -406.19931);
		CreateDynamicObject(899, -26.35951, -1761.21765, 746.74921,   0.00000, 0.00000, -406.19931);
		CreateDynamicObject(899, -27.23732, -1744.74902, 746.74921,   0.00000, 0.00000, -406.19931);
		CreateDynamicObject(897, -51.86588, -1742.73499, 743.00275,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(897, -39.11488, -1737.05115, 743.00275,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(897, -41.92130, -1731.74304, 743.00275,   0.00000, 0.00000, 34.32003);
		CreateDynamicObject(897, -54.38836, -1737.69604, 743.00275,   0.00000, 0.00000, -3.29997);
		CreateDynamicObject(897, -57.32939, -1734.36853, 743.00275,   0.00000, 0.00000, 36.48006);
		CreateDynamicObject(897, -44.48940, -1727.32825, 743.00275,   0.00000, 0.00000, 50.34007);
		CreateDynamicObject(897, -63.83605, -1732.17432, 743.00275,   0.00000, 0.00000, 36.48006);
		CreateDynamicObject(897, -52.10003, -1722.75940, 743.00275,   0.00000, 0.00000, 46.86007);
		CreateDynamicObject(897, -58.65533, -1720.04602, 743.00275,   0.00000, 0.00000, 24.12006);
		CreateDynamicObject(897, -62.47881, -1720.39905, 743.00275,   0.00000, 0.00000, 6.42006);
		CreateDynamicObject(897, -67.87538, -1719.18164, 743.00275,   0.00000, 0.00000, -31.43996);
		CreateDynamicObject(897, -71.42590, -1730.35791, 743.00275,   0.00000, 0.00000, 54.60008);
		CreateDynamicObject(897, -79.75711, -1723.13318, 743.00275,   0.00000, 0.00000, -21.11992);
		CreateDynamicObject(897, -68.75751, -1716.67517, 743.00275,   0.00000, 0.00000, -74.33995);
		CreateDynamicObject(897, -80.55328, -1717.06091, 743.00275,   0.00000, 0.00000, -25.91993);
		CreateDynamicObject(897, -79.32236, -1708.39136, 743.00275,   0.00000, 0.00000, -59.21993);
		CreateDynamicObject(897, -38.24154, -1734.08179, 748.81995,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(897, -41.34068, -1728.47644, 748.81995,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(897, -45.59306, -1723.25769, 748.81995,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(897, -51.50254, -1720.61011, 748.81995,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(897, -55.59548, -1719.93103, 748.81995,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(897, -66.50033, -1717.47717, 748.81995,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(897, -56.40707, -1739.47034, 748.81995,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(897, -61.70749, -1736.49658, 748.81995,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(897, -68.24284, -1732.98389, 748.81995,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(897, -72.99895, -1731.76379, 748.81995,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(897, -79.04302, -1728.45288, 748.81995,   0.00000, 0.00000, -30.78000);
		CreateDynamicObject(897, -82.07169, -1722.24158, 748.81995,   0.00000, 0.00000, -30.78000);
		CreateDynamicObject(897, -82.10052, -1716.74084, 748.81995,   0.00000, 0.00000, -30.78000);
		CreateDynamicObject(897, -82.45276, -1711.39282, 748.81995,   0.00000, 0.00000, -30.78000);
		CreateDynamicObject(897, -68.19642, -1713.15637, 743.00275,   0.00000, 0.00000, -93.95988);
		CreateDynamicObject(897, -79.56894, -1703.15686, 743.00275,   0.00000, 0.00000, -23.99992);
		CreateDynamicObject(897, -66.78532, -1708.94495, 743.00275,   0.00000, 0.00000, -83.93989);
		CreateDynamicObject(897, -65.52290, -1703.45361, 743.00275,   0.00000, 0.00000, -69.11988);
		CreateDynamicObject(897, -65.68745, -1698.20898, 743.00275,   0.00000, 0.00000, -56.87990);
		CreateDynamicObject(897, -79.55096, -1697.08691, 743.00275,   0.00000, 0.00000, -38.57993);
		CreateDynamicObject(897, -78.33022, -1690.65479, 743.00275,   0.00000, 0.00000, -45.95992);
		CreateDynamicObject(897, -66.00869, -1693.06335, 743.00275,   0.00000, 0.00000, -65.09991);
		CreateDynamicObject(897, -76.47431, -1684.64307, 743.00275,   0.00000, 0.00000, -62.45995);
		CreateDynamicObject(897, -64.19297, -1690.02856, 743.00275,   0.00000, 0.00000, -81.95989);
		CreateDynamicObject(897, -60.41877, -1680.34949, 743.67340,   0.00000, 0.00000, -109.61999);
		CreateDynamicObject(897, -62.08486, -1684.39014, 745.08606,   0.00000, 0.00000, -97.79993);
		CreateDynamicObject(897, -62.97079, -1697.72070, 747.09088,   0.00000, 0.00000, -65.09991);
		CreateDynamicObject(897, -63.06852, -1703.70093, 747.09088,   0.00000, 0.00000, -65.09991);
		CreateDynamicObject(897, -64.24112, -1707.68909, 747.09088,   0.00000, 0.00000, -65.09991);
		CreateDynamicObject(897, -82.98895, -1704.91187, 748.81995,   0.00000, 0.00000, -2.64000);
		CreateDynamicObject(897, -81.85017, -1696.67944, 748.81995,   0.00000, 0.00000, -2.64000);
		CreateDynamicObject(897, -79.40360, -1685.30627, 748.81995,   0.00000, 0.00000, -2.64000);
		CreateDynamicObject(897, -77.46304, -1684.25989, 748.81995,   0.00000, 0.00000, -2.64000);
		CreateDynamicObject(3461, -57.70653, -1725.54346, 744.47266,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(3461, -50.32522, -1728.86279, 744.47266,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(3461, -77.47004, -1722.12695, 744.47266,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(3461, -72.33083, -1721.15564, 744.47266,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(3461, -73.16969, -1707.69629, 744.47266,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(899, -76.27644, -1667.51440, 746.74921,   0.00000, 0.00000, -490.67929);
		CreateDynamicObject(897, -58.65609, -1678.71692, 743.67340,   0.00000, 0.00000, -56.99994);
		CreateDynamicObject(899, -45.36520, -1688.56421, 746.74921,   0.00000, 0.00000, -410.03976);
		CreateDynamicObject(899, -32.32108, -1690.23657, 746.74921,   0.00000, 0.00000, -375.83981);
		CreateDynamicObject(899, -14.65103, -1698.69629, 746.74921,   0.00000, 0.00000, -365.51999);
		CreateDynamicObject(899, -12.17145, -1672.57434, 752.66718,   0.00000, 0.00000, -443.87921);
		CreateDynamicObject(897, -54.88369, -1677.77234, 751.10022,   0.00000, 0.00000, -56.99994);
		CreateDynamicObject(897, -62.25743, -1693.02124, 748.70087,   0.00000, 0.00000, -81.95989);
		CreateDynamicObject(897, -62.02174, -1684.38611, 748.08008,   0.00000, 0.00000, -97.79993);
		CreateDynamicObject(899, 3.60791, -1673.34033, 745.36688,   0.00000, 0.00000, -443.87921);
		CreateDynamicObject(899, -12.61699, -1697.30591, 753.39569,   0.00000, 0.00000, -365.51999);
		CreateDynamicObject(2395, -37.42930, -1785.70154, 745.35059,   0.00000, 0.00000, 180.70790);
		CreateDynamicObject(2395, -37.42930, -1785.70154, 742.61060,   0.00000, 0.00000, 180.70790);
		CreateDynamicObject(2395, -41.09000, -1785.75256, 745.35059,   0.00000, 0.00000, 180.70790);
		CreateDynamicObject(897, -71.35580, -1675.16125, 742.58459,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(897, -66.29287, -1667.60266, 742.99396,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(897, -68.69058, -1671.57764, 742.99396,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(897, -66.97510, -1666.14026, 745.63397,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(897, -52.97350, -1676.91504, 744.03339,   0.00000, 0.00000, -56.99990);
		CreateDynamicObject(897, -70.11504, -1658.63464, 745.63397,   0.00000, 0.00000, 32.40000);
		CreateDynamicObject(897, -68.40600, -1657.49451, 742.21399,   0.00000, 0.00000, 32.40000);
		CreateDynamicObject(897, -54.39953, -1659.17639, 742.99396,   0.00000, 0.00000, -3.12000);
		CreateDynamicObject(897, -55.33611, -1655.10986, 742.99396,   0.00000, 0.00000, -3.12000);
		CreateDynamicObject(897, -56.70245, -1651.01733, 742.99396,   0.00000, 0.00000, 27.12000);
		CreateDynamicObject(897, -52.69321, -1658.12427, 748.41400,   0.00000, 0.00000, -3.12000);
		CreateDynamicObject(897, -53.30932, -1653.62012, 748.41400,   0.00000, 0.00000, -3.12000);
		CreateDynamicObject(897, -54.72378, -1649.56934, 748.41400,   0.00000, 0.00000, 27.12000);
		CreateDynamicObject(897, -50.53504, -1665.23962, 742.99396,   0.00000, 0.00000, -3.12000);
		CreateDynamicObject(897, -48.83061, -1670.77759, 742.99396,   0.00000, 0.00000, -3.12000);
		CreateDynamicObject(897, -48.83060, -1670.77759, 748.41400,   0.00000, 0.00000, -3.12000);
		CreateDynamicObject(897, -50.53500, -1665.23962, 748.41400,   0.00000, 0.00000, -3.12000);
		CreateDynamicObject(897, -67.92462, -1661.72754, 741.81403,   0.00000, 0.00000, 32.40000);
		CreateDynamicObject(897, -71.19184, -1653.43103, 742.21399,   0.00000, 0.00000, -5.46000);
		CreateDynamicObject(897, -73.92494, -1657.15051, 748.41400,   0.00000, 0.00000, -5.46000);
		CreateDynamicObject(897, -52.58481, -1643.36072, 742.99396,   0.00000, 0.00000, 8.46000);
		CreateDynamicObject(897, -47.60620, -1637.20984, 742.99396,   0.00000, 0.00000, -66.77999);
		CreateDynamicObject(897, -46.33388, -1630.56958, 742.99396,   0.00000, 0.00000, -55.14000);
		CreateDynamicObject(897, -71.05906, -1639.84998, 742.21399,   0.00000, 0.00000, -16.14000);
		CreateDynamicObject(897, -49.31118, -1624.70886, 742.99396,   0.00000, 0.00000, -7.62000);
		CreateDynamicObject(897, -51.21324, -1620.00574, 742.99396,   0.00000, 0.00000, 1.98000);
		CreateDynamicObject(897, -78.64677, -1640.94910, 742.21399,   0.00000, 0.00000, -16.14000);
		CreateDynamicObject(897, -76.43670, -1653.47241, 742.21399,   0.00000, 0.00000, 67.92000);
		CreateDynamicObject(897, -76.86366, -1657.09753, 748.41400,   0.00000, 0.00000, 67.92000);
		CreateDynamicObject(897, -83.71473, -1642.19727, 742.21399,   0.00000, 0.00000, -86.64002);
		CreateDynamicObject(897, -86.32143, -1642.10632, 748.41400,   0.00000, 0.00000, -86.64000);
		CreateDynamicObject(897, -80.82770, -1640.10229, 748.41400,   0.00000, 0.00000, -111.06004);
		CreateDynamicObject(897, -55.63606, -1620.97168, 742.99396,   0.00000, 0.00000, 84.00001);
		CreateDynamicObject(897, -61.08087, -1621.21692, 742.99396,   0.00000, 0.00000, 84.00001);
		CreateDynamicObject(897, -67.48183, -1622.32739, 742.99396,   0.00000, 0.00000, 39.90003);
		CreateDynamicObject(897, -65.23527, -1639.25378, 742.21399,   0.00000, 0.00000, -53.94001);
		CreateDynamicObject(897, -63.17222, -1636.92651, 742.21399,   0.00000, 0.00000, -53.94001);
		CreateDynamicObject(897, -60.81271, -1633.95007, 742.21399,   0.00000, 0.00000, -53.94001);
		CreateDynamicObject(897, -72.70512, -1624.18738, 742.99396,   0.00000, 0.00000, 39.90003);
		CreateDynamicObject(897, -87.19517, -1654.73779, 742.21399,   0.00000, 0.00000, 67.92000);
		CreateDynamicObject(897, -87.74479, -1641.74646, 742.21399,   0.00000, 0.00000, -140.34004);
		CreateDynamicObject(897, -87.84991, -1641.70020, 742.21399,   0.00000, 0.00000, -140.34004);
		CreateDynamicObject(897, -92.39719, -1653.48462, 742.21399,   0.00000, 0.00000, 31.50000);
		CreateDynamicObject(897, -99.81099, -1646.27087, 741.95398,   0.00000, 0.00000, -15.12000);
		CreateDynamicObject(897, -101.12066, -1639.35583, 741.95398,   0.00000, 0.00000, -45.24001);
		CreateDynamicObject(897, -78.64190, -1625.92163, 742.99396,   0.00000, 0.00000, 39.90003);
		CreateDynamicObject(897, -81.58339, -1626.63965, 742.99396,   0.00000, 0.00000, 89.28005);
		CreateDynamicObject(897, -86.61072, -1627.63306, 742.99396,   0.00000, 0.00000, 89.28005);
		CreateDynamicObject(897, -92.02995, -1628.52612, 742.99396,   0.00000, 0.00000, 89.28005);
		CreateDynamicObject(897, -96.62125, -1627.74731, 742.99396,   0.00000, 0.00000, 76.56005);
		CreateDynamicObject(897, -104.86895, -1635.95313, 741.95398,   0.00000, 0.00000, -129.96021);
		CreateDynamicObject(897, -108.25828, -1634.21753, 741.95398,   0.00000, 0.00000, -129.96021);
		CreateDynamicObject(897, -100.88348, -1624.56946, 742.99396,   0.00000, 0.00000, 56.46006);
		CreateDynamicObject(897, -112.54411, -1629.75293, 741.95398,   0.00000, 0.00000, -147.17982);
		CreateDynamicObject(897, -113.66560, -1622.05420, 741.95398,   0.00000, 0.00000, -196.01982);
		CreateDynamicObject(897, -100.40403, -1621.30469, 742.99396,   0.00000, 0.00000, 56.46006);
		CreateDynamicObject(897, -99.94418, -1624.40222, 747.33398,   0.00000, 0.00000, 56.46010);
		CreateDynamicObject(897, -100.40400, -1621.30469, 747.33398,   0.00000, 0.00000, 56.46010);
		CreateDynamicObject(897, -115.07724, -1621.73010, 747.33398,   0.00000, 0.00000, -196.01981);
		CreateDynamicObject(897, -114.43169, -1630.95947, 747.33398,   0.00000, 0.00000, -147.17979);
		CreateDynamicObject(897, -108.86337, -1636.44653, 747.33398,   0.00000, 0.00000, -134.70021);
		CreateDynamicObject(897, -105.01202, -1638.32935, 747.33398,   0.00000, 0.00000, -129.96021);
		CreateDynamicObject(897, -103.32903, -1645.55249, 747.33398,   0.00000, 0.00000, -45.24000);
		CreateDynamicObject(897, -100.12855, -1651.88330, 747.33398,   0.00000, 0.00000, -15.12000);
		CreateDynamicObject(897, -92.70170, -1657.17688, 747.33398,   0.00000, 0.00000, 31.50000);
		CreateDynamicObject(897, -83.91656, -1654.97192, 742.21399,   0.00000, 0.00000, 67.92000);
		CreateDynamicObject(897, -86.78530, -1658.06079, 747.33398,   0.00000, 0.00000, 67.92000);
		CreateDynamicObject(897, -71.39843, -1638.32080, 747.33398,   0.00000, 0.00000, -16.14000);
		CreateDynamicObject(897, -65.45538, -1638.74280, 747.33398,   0.00000, 0.00000, -53.94000);
		CreateDynamicObject(897, -62.89067, -1634.20337, 747.33398,   0.00000, 0.00000, -53.94000);
		CreateDynamicObject(897, -50.25779, -1644.41711, 747.33398,   0.00000, 0.00000, 8.46000);
		CreateDynamicObject(897, -46.19201, -1638.26135, 747.33398,   0.00000, 0.00000, -66.78000);
		CreateDynamicObject(897, -44.44835, -1630.28613, 747.33398,   0.00000, 0.00000, -55.14000);
		CreateDynamicObject(897, -48.09879, -1623.49182, 747.33398,   0.00000, 0.00000, -7.62000);
		CreateDynamicObject(897, -56.04007, -1619.94373, 747.33398,   0.00000, 0.00000, 84.00000);
		CreateDynamicObject(897, -63.12103, -1618.98132, 747.33398,   0.00000, 0.00000, 84.00000);
		CreateDynamicObject(897, -68.78428, -1621.28406, 747.33398,   0.00000, 0.00000, 39.90000);
		CreateDynamicObject(897, -75.39736, -1622.46057, 747.33398,   0.00000, 0.00000, 39.90000);
		CreateDynamicObject(897, -81.15340, -1624.08215, 747.33398,   0.00000, 0.00000, 39.90000);
		CreateDynamicObject(897, -87.40063, -1625.54443, 747.33398,   0.00000, 0.00000, 89.28010);
		CreateDynamicObject(897, -93.69851, -1626.20569, 747.33398,   0.00000, 0.00000, 89.28010);
		CreateDynamicObject(941, -38.68920, -1781.10913, 743.45612,   0.00000, 0.00000, -87.66000);
		CreateDynamicObject(2228, -39.08678, -1781.82983, 743.94818,   86.00000, 360.00000, 360.00000);
		CreateDynamicObject(2228, -39.08680, -1780.60974, 743.94818,   86.00000, 360.00000, 360.00000);
		CreateDynamicObject(2228, -38.44680, -1780.60974, 743.94818,   86.00000, 360.00000, 360.00000);
		CreateDynamicObject(2228, -38.44680, -1781.84985, 743.94818,   86.00000, 360.00000, 360.00000);
		CreateDynamicObject(897, -116.69131, -1616.80078, 741.95398,   0.00000, 0.00000, -166.07983);
		CreateDynamicObject(897, -122.48383, -1615.09985, 741.95398,   0.00000, 0.00000, -132.29987);
		CreateDynamicObject(897, -128.59007, -1615.55359, 741.95398,   0.00000, 0.00000, -112.55988);
		CreateDynamicObject(897, -137.19801, -1616.19287, 741.95398,   0.00000, 0.00000, -91.37992);
		CreateDynamicObject(897, -139.71841, -1619.96887, 741.95398,   0.00000, 0.00000, -87.05988);
		CreateDynamicObject(897, -144.94066, -1625.20447, 741.95398,   0.00000, 0.00000, -73.79986);
		CreateDynamicObject(897, -148.04591, -1630.28979, 741.95398,   0.00000, 0.00000, -42.47986);
		CreateDynamicObject(897, -152.38223, -1634.33252, 741.95398,   0.00000, 0.00000, -70.37985);
		CreateDynamicObject(897, -157.04652, -1637.21509, 741.95398,   0.00000, 0.00000, -86.75986);
		CreateDynamicObject(897, -161.86305, -1640.34668, 741.95398,   0.00000, 0.00000, -92.45985);
		CreateDynamicObject(897, -116.88274, -1599.83533, 741.95398,   0.00000, 0.00000, -184.55971);
		CreateDynamicObject(897, -133.59209, -1604.97937, 741.95398,   0.00000, 0.00000, -108.77972);
		CreateDynamicObject(897, -128.44795, -1603.84497, 741.95398,   0.00000, 0.00000, -106.37971);
		CreateDynamicObject(897, -133.71492, -1616.18286, 741.95398,   0.00000, 0.00000, -95.99988);
		CreateDynamicObject(897, -140.32559, -1605.27136, 741.95398,   0.00000, 0.00000, -120.77972);
		CreateDynamicObject(897, -146.65785, -1608.57837, 741.95398,   0.00000, 0.00000, -65.33975);
		CreateDynamicObject(897, -167.50027, -1637.82800, 741.95398,   0.00000, 0.00000, -168.89967);
		CreateDynamicObject(897, -151.87984, -1614.93567, 741.95398,   0.00000, 0.00000, -71.51975);
		CreateDynamicObject(897, -155.74379, -1620.66199, 741.95398,   0.00000, 0.00000, -61.79975);
		CreateDynamicObject(897, -159.17805, -1624.56958, 741.95398,   0.00000, 0.00000, -76.97976);
		CreateDynamicObject(897, -164.60162, -1628.25940, 741.95398,   0.00000, 0.00000, -83.39977);
		CreateDynamicObject(897, -169.92426, -1632.19812, 741.95398,   0.00000, 0.00000, -83.39977);
		CreateDynamicObject(897, -169.82597, -1629.79346, 748.07397,   0.00000, 0.00000, -83.39980);
		CreateDynamicObject(897, -165.91426, -1626.44824, 748.07397,   0.00000, 0.00000, -83.39980);
		CreateDynamicObject(897, -161.49242, -1622.08228, 748.07397,   0.00000, 0.00000, -76.97980);
		CreateDynamicObject(897, -159.02643, -1616.99158, 748.07397,   0.00000, 0.00000, -61.79980);
		CreateDynamicObject(897, -155.04585, -1612.84363, 748.07397,   0.00000, 0.00000, -71.51980);
		CreateDynamicObject(897, -149.65958, -1606.33752, 748.07397,   0.00000, 0.00000, -65.33980);
		CreateDynamicObject(897, -142.75809, -1601.83667, 748.07397,   0.00000, 0.00000, -120.77970);
		CreateDynamicObject(897, -134.73619, -1601.18872, 748.07397,   0.00000, 0.00000, -108.77970);
		CreateDynamicObject(897, -128.76486, -1600.01404, 748.07397,   0.00000, 0.00000, -106.37970);
		CreateDynamicObject(897, -123.12518, -1602.71997, 741.95398,   0.00000, 0.00000, -139.85971);
		CreateDynamicObject(897, -122.68344, -1599.70203, 748.07397,   0.00000, 0.00000, -139.85970);
		CreateDynamicObject(897, -117.78001, -1598.46252, 748.07397,   0.00000, 0.00000, -139.85970);
		CreateDynamicObject(897, -105.93027, -1609.68921, 741.95398,   0.00000, 0.00000, -249.35962);
		CreateDynamicObject(897, -169.76952, -1637.64575, 747.61401,   0.00000, 0.00000, -168.89970);
		CreateDynamicObject(897, -166.73337, -1640.46753, 747.61401,   0.00000, 0.00000, -168.89970);
		CreateDynamicObject(897, -159.39903, -1642.18860, 748.07397,   0.00000, 0.00000, -92.45990);
		CreateDynamicObject(897, -154.69106, -1639.05469, 748.07397,   0.00000, 0.00000, -86.75990);
		CreateDynamicObject(897, -151.02734, -1636.66321, 748.07397,   0.00000, 0.00000, -70.37990);
		CreateDynamicObject(897, -145.38168, -1632.74585, 748.07397,   0.00000, 0.00000, -42.47990);
		CreateDynamicObject(897, -142.54800, -1627.50342, 748.07397,   0.00000, 0.00000, -73.79990);
		CreateDynamicObject(897, -138.30351, -1622.47510, 748.07397,   0.00000, 0.00000, -87.05990);
		CreateDynamicObject(897, -134.95700, -1618.25903, 748.07397,   0.00000, 0.00000, -91.37990);
		CreateDynamicObject(897, -132.10684, -1617.96863, 748.07397,   0.00000, 0.00000, -95.99990);
		CreateDynamicObject(897, -127.77584, -1618.30688, 748.07397,   0.00000, 0.00000, -112.55990);
		CreateDynamicObject(897, -123.41968, -1617.88477, 748.07397,   0.00000, 0.00000, -132.29990);
		CreateDynamicObject(897, -100.72694, -1602.31165, 741.95398,   0.00000, 0.00000, -226.13950);
		CreateDynamicObject(897, -117.78001, -1598.46252, 748.07397,   0.00000, 0.00000, -139.85970);
		CreateDynamicObject(897, -115.28188, -1602.97266, 741.95398,   0.00000, 0.00000, -216.65976);
		CreateDynamicObject(897, -113.29868, -1599.54614, 741.95398,   0.00000, 0.00000, -228.53979);
		CreateDynamicObject(897, -111.70081, -1596.03540, 741.95398,   0.00000, 0.00000, -60.65968);
		CreateDynamicObject(897, -107.80471, -1590.55359, 741.95398,   0.00000, 0.00000, -74.09972);
		CreateDynamicObject(897, -97.72152, -1598.00256, 741.95398,   0.00000, 0.00000, -251.87929);
		CreateDynamicObject(897, -102.61192, -1585.92017, 741.95398,   0.00000, 0.00000, -86.09973);
		CreateDynamicObject(897, -93.25816, -1593.81360, 741.95398,   0.00000, 0.00000, -260.75925);
		CreateDynamicObject(897, -100.49370, -1584.14844, 741.95398,   0.00000, 0.00000, 14.52026);
		CreateDynamicObject(897, -87.82655, -1589.62671, 741.95398,   0.00000, 0.00000, -266.21902);
		CreateDynamicObject(897, -105.50262, -1579.96753, 741.95398,   0.00000, 0.00000, 34.86027);
		CreateDynamicObject(897, -111.10709, -1577.81104, 741.95398,   0.00000, 0.00000, 60.54028);
		CreateDynamicObject(897, -117.82413, -1577.94165, 741.95398,   0.00000, 0.00000, 60.54028);
		CreateDynamicObject(897, -123.41376, -1578.55554, 741.95398,   0.00000, 0.00000, 76.74029);
		CreateDynamicObject(897, -129.12021, -1580.52344, 741.95398,   0.00000, 0.00000, 82.44028);
		CreateDynamicObject(897, -92.34847, -1576.14551, 741.95398,   0.00000, 0.00000, -25.55974);
		CreateDynamicObject(897, -96.48074, -1572.35559, 741.95398,   0.00000, 0.00000, -17.87974);
		CreateDynamicObject(897, -101.66680, -1569.17712, 741.95398,   0.00000, 0.00000, -17.87974);
		CreateDynamicObject(897, -108.07125, -1566.76758, 741.95398,   0.00000, 0.00000, -0.23974);
		CreateDynamicObject(897, -101.66680, -1569.17712, 741.95398,   0.00000, 0.00000, -17.87974);
		CreateDynamicObject(897, -115.60799, -1566.79102, 741.95398,   0.00000, 0.00000, 21.60027);
		CreateDynamicObject(897, -120.84537, -1566.99390, 741.95398,   0.00000, 0.00000, 21.60027);
		CreateDynamicObject(897, -127.32059, -1568.16260, 741.95398,   0.00000, 0.00000, 21.60027);
		CreateDynamicObject(897, -134.07103, -1569.99133, 741.95398,   0.00000, 0.00000, 43.50028);
		CreateDynamicObject(897, -138.67981, -1572.22192, 741.95398,   0.00000, 0.00000, 43.50028);
		CreateDynamicObject(897, -134.80952, -1583.61731, 741.95398,   0.00000, 0.00000, 97.56024);
		CreateDynamicObject(897, -143.56927, -1575.08350, 744.43402,   0.00000, 0.00000, 65.58030);
		CreateDynamicObject(897, -137.48216, -1570.17371, 746.57397,   0.00000, 0.00000, 65.58030);
		CreateDynamicObject(897, -130.58337, -1566.56006, 746.57397,   0.00000, 0.00000, 65.58030);
		CreateDynamicObject(897, -124.47915, -1565.59363, 746.57397,   0.00000, 0.00000, 65.58030);
		CreateDynamicObject(897, -118.70589, -1564.68677, 746.57397,   0.00000, 0.00000, 65.58030);
		CreateDynamicObject(897, -112.08005, -1563.89417, 746.57397,   0.00000, 0.00000, 65.58030);
		CreateDynamicObject(897, -105.10876, -1565.13452, 746.57397,   0.00000, 0.00000, 49.62030);
		CreateDynamicObject(897, -99.06409, -1567.83728, 746.57397,   0.00000, 0.00000, 25.80030);
		CreateDynamicObject(897, -92.98366, -1572.06519, 746.57397,   0.00000, 0.00000, 17.40030);
		CreateDynamicObject(897, -89.01116, -1576.12952, 746.57397,   0.00000, 0.00000, -9.05970);
		CreateDynamicObject(897, -102.50055, -1585.02649, 746.57397,   0.00000, 0.00000, -70.97970);
		CreateDynamicObject(897, -106.63065, -1581.65942, 746.57397,   0.00000, 0.00000, -129.53964);
		CreateDynamicObject(897, -113.26636, -1580.14526, 746.57397,   0.00000, 0.00000, -129.53964);
		CreateDynamicObject(897, -120.41476, -1580.87744, 746.57397,   0.00000, 0.00000, -129.53964);
		CreateDynamicObject(897, -126.00091, -1581.46460, 746.57397,   0.00000, 0.00000, -129.53964);
		CreateDynamicObject(897, -131.26563, -1583.80481, 746.57397,   0.00000, 0.00000, -129.53964);
		CreateDynamicObject(897, -136.18098, -1585.63647, 746.57397,   0.00000, 0.00000, -129.53964);
		CreateDynamicObject(897, -144.25670, -1574.02307, 748.89398,   0.00000, 0.00000, 65.58030);
		CreateDynamicObject(897, -98.03602, -1617.31482, 741.95398,   0.00000, 0.00000, -115.85972);
		CreateDynamicObject(897, -95.41901, -1611.83105, 741.95398,   0.00000, 0.00000, -121.55981);
		CreateDynamicObject(897, -91.61005, -1608.10986, 741.95398,   0.00000, 0.00000, -121.55981);
		CreateDynamicObject(897, -88.01634, -1604.09790, 741.95398,   0.00000, 0.00000, -121.55981);
		CreateDynamicObject(897, -84.49590, -1601.23340, 741.95398,   0.00000, 0.00000, -127.67980);
		CreateDynamicObject(897, -80.01468, -1597.26648, 741.95398,   0.00000, 0.00000, -98.45984);
		CreateDynamicObject(897, -78.11090, -1593.21680, 741.95398,   0.00000, 0.00000, -73.73985);
		CreateDynamicObject(897, -77.43458, -1588.58923, 741.95398,   0.00000, 0.00000, -67.61982);
		CreateDynamicObject(897, -77.72217, -1584.29468, 741.95398,   0.00000, 0.00000, -56.63981);
		CreateDynamicObject(897, -81.59901, -1578.71252, 741.95398,   0.00000, 0.00000, -11.75981);
		CreateDynamicObject(897, -85.79173, -1576.72607, 741.95398,   0.00000, 0.00000, -11.75981);
		CreateDynamicObject(897, -146.63133, -1578.63623, 744.43402,   0.00000, 0.00000, 65.22030);
		CreateDynamicObject(897, -148.75572, -1580.63513, 744.43402,   0.00000, 0.00000, 56.40030);
		CreateDynamicObject(897, -152.14807, -1583.13806, 744.43402,   0.00000, 0.00000, 54.66029);
		CreateDynamicObject(897, -155.89259, -1585.77673, 744.43402,   0.00000, 0.00000, 52.02028);
		CreateDynamicObject(897, -160.18616, -1588.53064, 744.43402,   0.00000, 0.00000, 52.02028);
		CreateDynamicObject(897, -163.58363, -1590.52820, 744.43402,   0.00000, 0.00000, 52.02028);
		CreateDynamicObject(897, -140.03876, -1587.96399, 741.95398,   0.00000, 0.00000, 101.46019);
		CreateDynamicObject(897, -145.17020, -1592.58716, 741.95398,   0.00000, 0.00000, 101.46019);
		CreateDynamicObject(897, -149.14977, -1596.05737, 741.95398,   0.00000, 0.00000, 98.64019);
		CreateDynamicObject(897, -154.11418, -1598.96570, 741.95398,   0.00000, 0.00000, 82.92018);
		CreateDynamicObject(897, -159.03241, -1601.22327, 741.95398,   0.00000, 0.00000, 88.44017);
		CreateDynamicObject(897, -157.28194, -1602.72327, 746.57397,   0.00000, 0.00000, 88.44020);
		CreateDynamicObject(897, -151.92793, -1599.79651, 746.57397,   0.00000, 0.00000, 88.44020);
		CreateDynamicObject(897, -147.82109, -1597.44458, 746.57397,   0.00000, 0.00000, 88.44020);
		CreateDynamicObject(897, -144.87701, -1594.93738, 746.57397,   0.00000, 0.00000, 88.44020);
		CreateDynamicObject(897, -140.11020, -1591.55798, 746.57397,   0.00000, 0.00000, 88.44020);
		CreateDynamicObject(897, -95.91058, -1618.46204, 746.57397,   0.00000, 0.00000, -115.85970);
		CreateDynamicObject(897, -91.71834, -1611.56030, 746.57397,   0.00000, 0.00000, -121.55980);
		CreateDynamicObject(897, -87.54861, -1607.47461, 746.57397,   0.00000, 0.00000, -121.55980);
		CreateDynamicObject(897, -84.07505, -1603.79724, 746.57397,   0.00000, 0.00000, -121.55980);
		CreateDynamicObject(897, -80.18348, -1600.91907, 746.57397,   0.00000, 0.00000, -121.55980);
		CreateDynamicObject(897, -77.16775, -1596.68799, 746.57397,   0.00000, 0.00000, -92.21980);
		CreateDynamicObject(897, -75.47279, -1591.30737, 746.57397,   0.00000, 0.00000, -61.61980);
		CreateDynamicObject(897, -75.79034, -1586.69873, 746.57397,   0.00000, 0.00000, -61.61980);
		CreateDynamicObject(897, -77.18368, -1581.49329, 746.57397,   0.00000, 0.00000, -35.69980);
		CreateDynamicObject(897, -80.86819, -1577.11426, 746.57397,   0.00000, 0.00000, -0.89979);
		CreateDynamicObject(897, -104.35309, -1605.95190, 747.09399,   0.00000, 0.00000, -204.42010);
		CreateDynamicObject(897, -99.51662, -1601.82690, 747.09399,   0.00000, -256.00000, -273.00000);
		CreateDynamicObject(897, -95.21915, -1596.36621, 747.09399,   0.00000, -256.00000, -273.00000);
		CreateDynamicObject(897, -91.44274, -1592.78491, 747.09399,   0.00000, -256.00000, -273.00000);
		CreateDynamicObject(897, -88.78349, -1590.23938, 747.09399,   0.00000, -256.00000, -273.00000);
		CreateDynamicObject(897, -165.73392, -1600.26575, 744.43402,   0.00000, 0.00000, 108.66026);
		CreateDynamicObject(897, -165.91147, -1599.17395, 747.45398,   0.00000, 0.00000, 108.66030);
		CreateDynamicObject(897, -168.38089, -1593.12988, 744.43402,   0.00000, 0.00000, 52.02028);
	}
	else if (map == INT_BaseEjercito)
	{
		CreateDynamicObject(19447, 1293.25513, -1792.37537, 1566.68005,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1297.97046, -1787.49036, 1566.68018,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1307.59045, -1787.49036, 1566.68018,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19385, 1313.93518, -1787.48035, 1566.67249,   0.00000, 0.00000, -89.81990);
		CreateDynamicObject(19447, 1293.27490, -1782.63135, 1566.68005,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1297.97046, -1779.97046, 1566.68018,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1307.57056, -1779.97046, 1566.68018,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1317.17065, -1779.97205, 1566.68018,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1315.44727, -1782.74292, 1566.68005,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1320.31055, -1787.49036, 1566.68018,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19385, 1326.71521, -1787.48035, 1566.67249,   0.00000, 0.00000, -89.81990);
		CreateDynamicObject(19447, 1333.09045, -1787.49036, 1566.68018,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1326.79065, -1779.97205, 1566.68018,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1336.41052, -1779.97205, 1566.68018,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1334.65027, -1782.73584, 1566.68005,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1297.97046, -1795.33044, 1566.68018,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1307.59045, -1795.33044, 1566.68018,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19385, 1313.93518, -1795.32031, 1566.67249,   0.00000, 0.00000, -89.81990);
		CreateDynamicObject(19447, 1315.44727, -1800.06287, 1566.68005,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1320.31055, -1795.31042, 1566.68018,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19385, 1326.71521, -1795.30029, 1566.67249,   0.00000, 0.00000, -89.81990);
		CreateDynamicObject(19447, 1333.09045, -1795.29041, 1566.68018,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1334.63269, -1800.06531, 1566.68005,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1297.97046, -1803.49036, 1566.68018,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1293.25513, -1801.97534, 1566.68005,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1307.59045, -1803.49036, 1566.68018,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1317.21045, -1803.49036, 1566.68018,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1326.83044, -1803.49036, 1566.68018,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19355, 1332.99561, -1803.48132, 1566.69409,   0.00000, 0.00000, -89.94000);
		CreateDynamicObject(1501, 1328.14063, -1817.67310, 1564.97424,   0.00000, 0.00000, -360.35986);
		CreateDynamicObject(1491, 1313.19629, -1787.52002, 1564.92053,   0.00000, 0.00000, 0.42000);
		CreateDynamicObject(1491, 1325.96924, -1787.49670, 1564.92053,   0.00000, 0.00000, 0.42000);
		CreateDynamicObject(1491, 1313.19812, -1795.31482, 1564.92053,   0.00000, 0.00000, 0.42000);
		CreateDynamicObject(1491, 1325.97693, -1795.30493, 1564.92053,   0.00000, 0.00000, 0.42000);
		CreateDynamicObject(2603, 1318.19006, -1781.33716, 1565.42908,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2603, 1320.59009, -1781.33716, 1565.42908,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2603, 1323.05005, -1781.33716, 1565.42908,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2603, 1325.51013, -1781.33716, 1565.42908,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2603, 1327.97009, -1781.33716, 1565.42908,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2603, 1330.73010, -1781.33716, 1565.42908,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2603, 1333.71008, -1781.33716, 1565.42908,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2603, 1296.17017, -1781.33716, 1565.42908,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2603, 1299.13025, -1781.33716, 1565.42908,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2603, 1302.41016, -1781.33716, 1565.42908,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2603, 1305.15015, -1781.33716, 1565.42908,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2603, 1308.17017, -1781.33716, 1565.42908,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2603, 1311.31018, -1781.33716, 1565.42908,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2603, 1314.33020, -1781.33716, 1565.42908,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2603, 1296.17017, -1802.15723, 1565.42908,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2603, 1299.13025, -1802.15723, 1565.42908,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2603, 1302.19019, -1802.15723, 1565.42908,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2603, 1305.13025, -1802.15723, 1565.42908,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2603, 1308.11023, -1802.15723, 1565.42908,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2603, 1311.13025, -1802.15723, 1565.42908,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2603, 1314.33020, -1802.15723, 1565.42908,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2603, 1318.29248, -1802.13733, 1565.42908,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2603, 1321.49255, -1802.13733, 1565.42908,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2603, 1324.71252, -1802.13733, 1565.42908,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2603, 1327.93250, -1802.13733, 1565.42908,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2603, 1330.89246, -1802.13733, 1565.42908,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2603, 1333.75244, -1802.13733, 1565.42908,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19355, 1294.73828, -1784.34131, 1566.69885,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19385, 1296.27026, -1785.85217, 1566.66736,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2738, 1293.60352, -1785.24170, 1565.56213,   0.00000, 0.00000, 89.82000);
		CreateDynamicObject(2739, 1294.56372, -1784.88757, 1564.94604,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1491, 1296.26038, -1785.06506, 1564.92053,   0.02000, 0.00000, -89.88000);
		CreateDynamicObject(19385, 1296.27026, -1796.87219, 1566.66736,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19355, 1294.73828, -1798.38135, 1566.69885,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(1491, 1296.26038, -1796.08508, 1564.92053,   0.02000, 0.00000, -89.88000);
		CreateDynamicObject(2738, 1293.67505, -1796.41821, 1565.56213,   0.00000, 0.00000, 89.82000);
		CreateDynamicObject(2739, 1294.56372, -1795.86755, 1564.94604,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2520, 1294.90442, -1786.93604, 1564.98950,   0.00000, 0.00000, 90.05992);
		CreateDynamicObject(19355, 1316.97827, -1784.34131, 1566.69885,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19385, 1318.53027, -1785.85217, 1566.66736,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1491, 1318.56042, -1785.06506, 1564.92053,   0.02000, 0.00000, -89.88000);
		CreateDynamicObject(2520, 1317.00439, -1786.93604, 1564.98950,   0.00000, 0.00000, 90.05990);
		CreateDynamicObject(2738, 13018.60352, -1785.24170, 1565.56213,   0.00000, 0.00000, 89.82000);
		CreateDynamicObject(2739, 1316.70374, -1784.88757, 1564.94604,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2738, 1315.84351, -1785.24170, 1565.56213,   0.00000, 0.00000, 89.82000);
		CreateDynamicObject(19355, 1316.97827, -1798.46143, 1566.69885,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19385, 1318.53027, -1796.95215, 1566.66736,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2520, 1317.00439, -1797.93604, 1564.98950,   0.00000, 0.00000, 90.05990);
		CreateDynamicObject(2738, 1315.84351, -1796.34167, 1565.56213,   0.00000, 0.00000, 89.82000);
		CreateDynamicObject(2739, 1316.49792, -1795.84583, 1564.94604,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1491, 1318.54077, -1796.14856, 1564.92053,   0.02000, 0.00000, -89.88000);
		CreateDynamicObject(19355, 1339.48584, -1787.49011, 1566.67676,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1337.85303, -1800.06226, 1566.68005,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1344.28906, -1792.18066, 1566.68005,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19355, 1342.59961, -1787.64478, 1566.67676,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1344.28906, -1801.76074, 1566.68005,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19385, 1344.29553, -1808.16187, 1566.68555,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1344.28906, -1814.52075, 1566.68005,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1349.15259, -1794.50989, 1566.68018,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1358.77258, -1794.50989, 1566.68018,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1368.37256, -1794.50989, 1566.68018,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1373.15393, -1799.21985, 1566.68005,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1373.15393, -1808.83984, 1566.68005,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1373.15393, -1818.41980, 1566.68005,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1349.01941, -1819.26501, 1566.68018,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1358.59985, -1819.26501, 1566.68018,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1368.19995, -1819.26501, 1566.68018,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1377.74353, -1819.24695, 1566.68018,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(2627, 1351.10754, -1795.62451, 1564.98608,   0.00000, 0.00000, -0.06000);
		CreateDynamicObject(2627, 1349.02747, -1795.64453, 1564.98608,   0.00000, 0.00000, -0.06000);
		CreateDynamicObject(2627, 1347.18750, -1795.64453, 1564.98608,   0.00000, 0.00000, -0.06000);
		CreateDynamicObject(2627, 1345.06750, -1795.64453, 1564.98608,   0.00000, 0.00000, -0.06000);
		CreateDynamicObject(2627, 1353.02759, -1795.62231, 1564.98608,   0.00000, 0.00000, -0.06000);
		CreateDynamicObject(2627, 1354.98755, -1795.62451, 1564.98608,   0.00000, 0.00000, -0.06000);
		CreateDynamicObject(2630, 1357.20972, -1795.62695, 1564.98645,   0.00000, 0.00000, -180.17990);
		CreateDynamicObject(2630, 1359.04968, -1795.62695, 1564.98645,   0.00000, 0.00000, -180.17990);
		CreateDynamicObject(2630, 1360.80969, -1795.62695, 1564.98645,   0.00000, 0.00000, -180.17990);
		CreateDynamicObject(2630, 1362.60974, -1795.62695, 1564.98645,   0.00000, 0.00000, -180.17990);
		CreateDynamicObject(2630, 1364.50964, -1795.62695, 1564.96655,   0.00000, 0.00000, -180.17990);
		CreateDynamicObject(2628, 1366.54150, -1795.40234, 1564.95142,   0.04000, 0.00000, 0.00000);
		CreateDynamicObject(2628, 1368.40149, -1795.40234, 1564.95142,   0.04000, 0.00000, 0.00000);
		CreateDynamicObject(2628, 1370.16150, -1795.40234, 1564.95142,   0.04000, 0.00000, 0.00000);
		CreateDynamicObject(2628, 1371.92151, -1795.40234, 1564.95142,   0.04000, 0.00000, 0.00000);
		CreateDynamicObject(2627, 1345.06750, -1817.34448, 1564.98608,   0.00000, 0.00000, -0.06000);
		CreateDynamicObject(2627, 1345.06750, -1795.64453, 1564.98608,   0.00000, 0.00000, -0.06000);
		CreateDynamicObject(2627, 1347.18750, -1817.32446, 1564.98608,   0.00000, 0.00000, -0.06000);
		CreateDynamicObject(2627, 1349.02747, -1817.32446, 1564.98608,   0.00000, 0.00000, -0.06000);
		CreateDynamicObject(2627, 1351.10754, -1817.23816, 1564.98608,   0.00000, 0.00000, -0.06000);
		CreateDynamicObject(2627, 1353.02759, -1817.23816, 1564.98608,   0.00000, 0.00000, -0.06000);
		CreateDynamicObject(2627, 1354.98755, -1817.23816, 1564.98608,   0.00000, 0.00000, -0.06000);
		CreateDynamicObject(2630, 1357.20972, -1818.45825, 1564.98608,   0.00000, 0.00000, -0.06000);
		CreateDynamicObject(2630, 1359.04968, -1818.45825, 1564.98608,   0.00000, 0.00000, -0.06000);
		CreateDynamicObject(2630, 1360.80981, -1818.45825, 1564.98608,   0.00000, 0.00000, -0.06000);
		CreateDynamicObject(2630, 1362.60974, -1818.45825, 1564.98608,   0.00000, 0.00000, -0.06000);
		CreateDynamicObject(2630, 1364.50964, -1818.45825, 1564.98608,   0.00000, 0.00000, -0.06000);
		CreateDynamicObject(2628, 1366.61438, -1818.45825, 1564.98608,   0.00000, 0.00000, -179.58009);
		CreateDynamicObject(2628, 1368.40149, -1818.45825, 1564.98608,   0.00000, 0.00000, -179.58009);
		CreateDynamicObject(2628, 1370.16150, -1818.45825, 1564.98608,   0.00000, 0.00000, -179.58009);
		CreateDynamicObject(2628, 1371.92151, -1818.45825, 1564.98608,   0.00000, 0.00000, -179.58009);
		CreateDynamicObject(19447, 1349.15259, -1794.50989, 1570.14026,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1358.77258, -1794.50989, 1570.14026,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1368.37256, -1794.50989, 1570.14026,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1373.15393, -1799.21985, 1570.14014,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1373.15393, -1808.83984, 1570.14014,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1373.15393, -1818.41980, 1570.14014,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1368.19995, -1819.26501, 1570.12024,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1377.74353, -1819.24695, 1570.12024,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1358.59985, -1819.26501, 1570.12024,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1348.99939, -1819.26501, 1570.10022,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1344.28906, -1814.52075, 1570.10010,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1344.28906, -1804.90076, 1570.10010,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1344.28906, -1795.30078, 1570.10010,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(14780, 1355.40771, -1808.18335, 1565.80469,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19087, 1364.87061, -1807.63574, 1571.92896,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19087, 1364.87061, -1807.63574, 1569.48901,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19087, 1364.87061, -1807.63574, 1567.06897,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1491, 1344.30286, -1808.91345, 1564.92053,   0.00000, 0.00000, 89.82000);
		CreateDynamicObject(19447, 1337.83826, -1809.63574, 1566.68005,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1333.10486, -1817.54224, 1566.68018,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19385, 1337.83972, -1815.99182, 1566.68555,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1333.03943, -1807.60352, 1566.68018,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1323.43945, -1807.60352, 1566.68018,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1313.85950, -1807.60352, 1566.68018,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1323.52490, -1817.54224, 1566.68018,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1313.94495, -1817.54224, 1566.68018,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1316.56836, -1812.10913, 1566.68005,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1316.55969, -1821.54016, 1566.68005,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(16151, 1317.58374, -1812.44958, 1565.30774,   0.00000, 0.00000, -179.40010);
		CreateDynamicObject(643, 1323.63416, -1814.13123, 1565.44934,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(643, 1323.86194, -1809.95593, 1565.44934,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(643, 1328.76331, -1810.01794, 1565.44934,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(643, 1328.08154, -1814.70691, 1565.44934,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(643, 1332.18274, -1814.70483, 1565.44934,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(643, 1332.81506, -1809.56628, 1565.44934,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1491, 1337.83008, -1816.73218, 1564.92053,   0.00000, 0.00000, 89.82000);
		CreateDynamicObject(19447, 1344.28906, -1824.14075, 1566.68005,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1337.83508, -1832.03577, 1566.68005,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1344.28906, -1833.74072, 1566.68005,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19385, 1340.93445, -1826.69641, 1566.67249,   0.00000, 0.00000, -89.81990);
		CreateDynamicObject(19447, 1334.75024, -1826.70691, 1566.68018,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1347.27332, -1826.67737, 1566.68018,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1340.95667, -1836.11975, 1566.68018,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(2008, 1340.15979, -1834.13611, 1564.98987,   0.00000, 0.00000, -0.78000);
		CreateDynamicObject(2356, 1341.01477, -1835.80371, 1564.99011,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19462, 1339.48438, -1831.44287, 1564.90930,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19462, 1342.96436, -1831.44287, 1564.90930,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(3017, 1338.28235, -1835.91101, 1565.48022,   -2.00000, -78.00000, -130.83998);
		CreateDynamicObject(2288, 1343.16321, -1827.27722, 1566.54065,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2287, 1338.65039, -1827.29236, 1566.91833,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2239, 1342.41418, -1834.18298, 1564.97693,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19462, 1339.48438, -1831.44287, 1568.48926,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19462, 1342.96436, -1831.44287, 1568.48926,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(2075, 1341.11707, -1819.62842, 1568.39880,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2075, 1341.12268, -1808.24353, 1568.39880,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2075, 1341.50769, -1800.14941, 1568.39880,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2075, 1336.68628, -1791.22644, 1568.39880,   0.00000, 0.00000, -89.94003);
		CreateDynamicObject(2075, 1329.74634, -1791.22644, 1568.39880,   0.00000, 0.00000, -89.94000);
		CreateDynamicObject(2075, 1320.74634, -1791.22644, 1568.39880,   0.00000, 0.00000, -89.94000);
		CreateDynamicObject(2075, 1305.72656, -1791.22949, 1568.39880,   0.00000, 0.00000, -89.94000);
		CreateDynamicObject(2074, 1340.48389, -1834.14001, 1568.17676,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1761, 1338.21619, -1830.81226, 1564.94482,   0.00000, 0.00000, 90.36000);
		CreateDynamicObject(1518, 1340.92712, -1826.89001, 1567.99438,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1325.38013, -1821.60498, 1566.68005,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1325.39001, -1831.07874, 1566.68005,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1325.37195, -1840.58911, 1566.68005,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1325.37817, -1850.08533, 1566.68005,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1327.82166, -1831.42529, 1566.68005,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(14407, 1326.83289, -1847.60999, 1561.82361,   0.00000, 0.00000, -179.52003);
		CreateDynamicObject(19355, 1329.39307, -1826.69189, 1566.67676,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1327.82690, -1840.89502, 1566.68005,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1327.85632, -1850.38269, 1566.68005,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(14407, 1331.23242, -1856.49658, 1555.74365,   0.00000, 0.00000, -90.18006);
		CreateDynamicObject(19462, 1324.19812, -1855.63684, 1558.82898,   0.00000, -90.00000, 90.06000);
		CreateDynamicObject(19447, 1325.38391, -1850.09985, 1563.22009,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1327.85632, -1850.38269, 1563.20007,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1327.85632, -1850.38269, 1559.72009,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1325.38391, -1850.09985, 1559.74011,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1329.85547, -1857.14319, 1558.89441,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1325.35498, -1859.69080, 1559.72009,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1332.67395, -1855.09277, 1558.89441,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1332.67395, -1855.09277, 1555.41443,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1329.85547, -1857.14319, 1555.41443,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1332.67395, -1857.13989, 1555.41443,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1332.67395, -1857.13989, 1558.89453,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1337.39832, -1850.36304, 1556.80005,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1337.39832, -1850.36304, 1560.28027,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1337.39954, -1861.93103, 1556.80005,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1337.39954, -1861.93103, 1560.28003,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1323.18481, -1853.48853, 1565.31445,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1325.35498, -1859.69080, 1563.20007,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1325.35498, -1859.69080, 1566.66016,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1325.24780, -1853.48804, 1568.79443,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1329.85547, -1857.14319, 1562.35437,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1332.67395, -1855.09277, 1562.35437,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1332.67395, -1857.13989, 1562.37451,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1337.39832, -1850.36304, 1563.74036,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1337.39832, -1850.36304, 1567.24036,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1337.39954, -1861.93103, 1563.78003,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1342.24500, -1846.73413, 1556.83435,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1358.13123, -1850.09656, 1556.80249,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1351.70935, -1846.73291, 1567.29443,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1354.52026, -1856.30872, 1556.80005,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1354.52002, -1846.78601, 1556.80005,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1349.73193, -1860.57007, 1560.29443,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1354.52026, -1856.30872, 1563.76001,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1354.52002, -1846.78601, 1563.76001,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1342.12634, -1848.42383, 1558.53442,   0.00000, -90.00000, -90.00000);
		CreateDynamicObject(19447, 1351.72388, -1848.42407, 1558.53442,   0.00000, -90.00000, -90.00000);
		CreateDynamicObject(19385, 1339.07947, -1850.10107, 1556.80249,   0.00000, 0.00000, -89.94000);
		CreateDynamicObject(19355, 1342.09509, -1860.59888, 1556.83899,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19385, 1338.96851, -1860.59888, 1556.86255,   0.00000, 0.00000, -89.94000);
		CreateDynamicObject(19447, 1348.42737, -1860.57910, 1556.83435,   0.00000, 0.00000, -89.70000);
		CreateDynamicObject(19385, 1342.25513, -1850.09326, 1556.80249,   0.00000, 0.00000, -89.94000);
		CreateDynamicObject(19447, 1340.61389, -1845.27625, 1556.80005,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1343.75000, -1845.35364, 1556.80005,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19385, 1345.39417, -1850.09912, 1556.80249,   0.00000, 0.00000, -89.94000);
		CreateDynamicObject(19447, 1346.93787, -1845.35913, 1556.80005,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19385, 1348.55627, -1850.09058, 1556.80249,   0.00000, 0.00000, -89.94000);
		CreateDynamicObject(19447, 1350.08960, -1845.35022, 1556.80005,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19385, 1351.71130, -1850.08838, 1556.80249,   0.00000, 0.00000, -89.94000);
		CreateDynamicObject(19447, 1353.22986, -1845.35559, 1556.80005,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1351.01868, -1865.33252, 1556.80005,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1346.21521, -1867.54443, 1556.83435,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1336.75513, -1867.54126, 1556.83435,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1337.39648, -1871.40808, 1556.80005,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1351.43823, -1845.62988, 1556.83435,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19340, 1335.03931, -1757.73560, 1561.24841,   0.00000, 0.00000, -180.05981);
		CreateDynamicObject(19340, 1340.94336, -1929.13379, 1551.32825,   0.00000, 0.00000, -180.05980);
		CreateDynamicObject(19340, 1337.63428, -1783.42944, 1572.10815,   0.00000, -180.00000, -180.00000);
		CreateDynamicObject(19340, 1348.86157, -1940.38940, 1567.30823,   0.00000, -180.00000, -180.00000);
		CreateDynamicObject(14407, 1346.64856, -1865.74133, 1555.40369,   0.00000, 0.00000, -269.69949);
		CreateDynamicObject(19447, 1346.21521, -1867.54443, 1560.31445,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19462, 1354.16809, -1862.25293, 1558.50903,   0.00000, -90.00000, 90.06000);
		CreateDynamicObject(19462, 1354.16809, -1865.75293, 1558.50903,   0.00000, -90.00000, 90.06000);
		CreateDynamicObject(19462, 1356.33630, -1855.68750, 1558.50903,   0.00000, -90.00000, -0.06000);
		CreateDynamicObject(19462, 1359.83630, -1855.68750, 1558.50903,   0.00000, -90.00000, -0.06000);
		CreateDynamicObject(19447, 1348.94031, -1863.69507, 1556.69446,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19401, 1354.51721, -1858.88416, 1560.28979,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19401, 1354.51721, -1855.68420, 1560.28979,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19401, 1354.51721, -1852.50415, 1560.28979,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1359.33142, -1850.82617, 1560.29443,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1363.77612, -1860.54517, 1560.29443,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1359.03931, -1865.26355, 1560.28027,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1355.83740, -1867.55090, 1560.31445,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1336.57568, -1867.54846, 1560.31445,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1337.40759, -1871.48181, 1560.28003,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1337.39746, -1871.40955, 1563.71997,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1358.02051, -1860.51892, 1556.83435,   0.00000, 0.00000, -89.70000);
		CreateDynamicObject(19447, 1361.04114, -1855.86707, 1560.28027,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1361.04370, -1846.25269, 1560.28027,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1340.26855, -1860.58093, 1560.29443,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19377, 1359.81555, -1855.82263, 1561.96887,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19377, 1359.84058, -1865.44226, 1561.96887,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19377, 1349.34058, -1865.44226, 1561.96887,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19377, 1338.84058, -1865.44226, 1561.96887,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19447, 1348.94080, -1863.69507, 1560.17444,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19355, 1353.66809, -1862.16235, 1559.76086,   0.00000, 0.00000, -179.99989);
		CreateDynamicObject(19377, 1342.39880, -1857.74353, 1563.62891,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19377, 1352.89880, -1857.74353, 1563.62891,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19377, 1342.39880, -1848.12354, 1563.62891,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19377, 1352.89880, -1848.12354, 1563.62891,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19377, 1342.39880, -1867.36353, 1563.62891,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19377, 1352.89880, -1867.36353, 1563.62891,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19447, 1340.26855, -1860.58093, 1563.79443,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1349.73193, -1860.57007, 1563.79443,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(2008, 1355.12903, -1857.82800, 1558.59705,   0.00000, 0.00000, 89.99999);
		CreateDynamicObject(2008, 1355.10669, -1854.48779, 1558.59705,   0.00000, 0.00000, 89.99999);
		CreateDynamicObject(19355, 1344.22534, -1862.18530, 1556.76086,   0.00000, 0.00000, -179.99989);
		CreateDynamicObject(19355, 1344.22534, -1862.18530, 1560.24084,   0.00000, 0.00000, -179.99989);
		CreateDynamicObject(1714, 1356.85083, -1857.06006, 1558.59607,   0.00000, 0.00000, -91.73998);
		CreateDynamicObject(1714, 1356.79199, -1853.65491, 1558.59607,   0.00000, 0.00000, -92.69998);
		CreateDynamicObject(2287, 1357.83997, -1851.38757, 1560.52209,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2272, 1360.45325, -1855.69653, 1560.53699,   0.00000, 0.00000, -90.11990);
		CreateDynamicObject(2269, 1356.65515, -1866.97961, 1560.57227,   0.00000, 0.00000, 179.85760);
		CreateDynamicObject(948, 1358.65393, -1867.17297, 1558.55444,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(948, 1354.31311, -1861.04895, 1558.55444,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1742, 1360.15198, -1860.53381, 1558.57739,   0.00000, 0.00000, -180.00031);
		CreateDynamicObject(2161, 1360.96033, -1857.65125, 1558.56372,   0.00000, 0.00000, -89.70000);
		CreateDynamicObject(2161, 1360.96033, -1856.33118, 1558.56372,   0.00000, 0.00000, -89.70000);
		CreateDynamicObject(2162, 1360.96606, -1854.58813, 1558.58215,   0.00000, 0.00000, -90.06000);
		CreateDynamicObject(2164, 1360.94360, -1852.81714, 1558.58154,   0.00000, 0.00000, -90.12010);
		CreateDynamicObject(2167, 1355.91760, -1850.84839, 1558.57275,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1649, 1354.55493, -1858.50940, 1559.51135,   0.00000, -90.00000, 90.00000);
		CreateDynamicObject(1649, 1354.56616, -1855.37024, 1559.51135,   0.00000, -90.00000, 90.00000);
		CreateDynamicObject(1649, 1354.58276, -1852.65930, 1559.51135,   0.00000, -90.00000, 90.00000);
		CreateDynamicObject(1649, 1354.47986, -1852.73657, 1559.51135,   0.00000, -90.00000, -89.94000);
		CreateDynamicObject(1649, 1354.46924, -1855.73132, 1559.51135,   0.00000, -90.00000, -89.94000);
		CreateDynamicObject(1649, 1354.45752, -1858.76062, 1559.51135,   0.00000, -90.00000, -89.94000);
		CreateDynamicObject(948, 1343.74365, -1861.04700, 1555.06128,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19355, 1337.23083, -1855.96582, 1563.64087,   0.00000, 0.00000, -179.99989);
		CreateDynamicObject(19447, 1337.85034, -1825.38306, 1566.68005,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19385, 1337.85327, -1819.07019, 1566.68555,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(948, 1337.49023, -1826.30225, 1564.99304,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(948, 1325.81384, -1817.99512, 1564.99304,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2167, 1359.33386, -1850.86792, 1558.57275,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19447, 1349.62769, -1850.10254, 1560.27441,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1340.01392, -1850.10254, 1560.27441,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1340.01392, -1850.10254, 1563.73438,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1349.62769, -1850.10254, 1563.73438,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19447, 1354.52002, -1846.08606, 1560.30005,   0.00000, 0.00000, 0.00000);
	}
	else if (map == INT_LSTV)
	{
		CreateDynamicObject(8411, 1288.25964, -1202.89722, 1500.00000,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(8411, 1288.04370, -1177.47937, 1500.00000,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19452, 1256.64575, -1210.88184, 1566.63525,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19452, 1256.64575, -1201.28186, 1566.63525,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19452, 1261.38916, -1215.61353, 1566.63525,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19452, 1270.98926, -1215.61353, 1566.63525,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19452, 1256.64575, -1191.68188, 1566.63525,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19452, 1268.59119, -1210.88904, 1566.63525,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19452, 1268.59119, -1201.27332, 1566.63525,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19452, 1270.89270, -1196.37378, 1566.63525,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19386, 1264.50525, -1196.38855, 1566.64001,   0.00000, 0.00000, -89.75990);
		CreateDynamicObject(19452, 1258.20972, -1196.40710, 1566.63525,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19452, 1270.83301, -1207.85559, 1564.17529,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19386, 1264.49219, -1207.83875, 1566.64001,   0.00000, 0.00000, -89.75990);
		CreateDynamicObject(19452, 1258.09351, -1207.83374, 1564.17529,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19452, 1270.81299, -1207.85559, 1568.79529,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19452, 1258.07104, -1207.83374, 1568.79529,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(2008, 1267.62622, -1207.23438, 1564.94861,   0.00000, 0.00000, -179.75998);
		CreateDynamicObject(2008, 1259.74243, -1207.04541, 1564.94861,   0.00000, 0.00000, -179.75999);
		CreateDynamicObject(2227, 1257.48596, -1196.48975, 1564.98682,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2287, 1259.26379, -1196.98474, 1567.03174,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2286, 1267.23877, -1196.48059, 1567.08435,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2284, 1268.02148, -1201.84448, 1567.05286,   0.00000, 0.00000, 269.92850);
		CreateDynamicObject(2282, 1268.00061, -1199.52393, 1567.03125,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(2065, 1258.29639, -1196.87769, 1564.99036,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2065, 1258.85645, -1196.87769, 1564.99036,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2065, 1259.43640, -1196.87769, 1564.99036,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2065, 1259.99646, -1196.87769, 1564.99036,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2167, 1261.10596, -1196.51660, 1564.96936,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2167, 1261.10596, -1196.51660, 1566.46936,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2167, 1261.96594, -1196.51660, 1564.96936,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2167, 1261.97107, -1196.53589, 1566.46936,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2163, 1266.71191, -1196.49048, 1564.98840,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2164, 1268.50024, -1203.91772, 1564.97925,   0.00000, 0.00000, -89.70000);
		CreateDynamicObject(2164, 1268.50024, -1205.67773, 1564.97925,   0.00000, 0.00000, -89.70000);
		CreateDynamicObject(2164, 1268.50024, -1202.17773, 1564.97925,   0.00000, 0.00000, -89.70000);
		CreateDynamicObject(2162, 1268.48877, -1200.11304, 1564.98706,   0.00000, 0.00000, -89.94000);
		CreateDynamicObject(2162, 1268.48877, -1198.35303, 1564.98706,   0.00000, 0.00000, -89.94000);
		CreateDynamicObject(1806, 1258.90283, -1205.77051, 1564.98950,   0.00000, 0.00000, -182.04004);
		CreateDynamicObject(1806, 1266.81543, -1205.90771, 1564.98950,   0.00000, 0.00000, -182.04004);
		CreateDynamicObject(1502, 1263.73767, -1207.87305, 1564.96289,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2164, 1256.73059, -1202.49451, 1564.97925,   0.00000, 0.00000, -270.17990);
		CreateDynamicObject(2164, 1256.73059, -1200.75452, 1564.97925,   0.00000, 0.00000, -270.17990);
		CreateDynamicObject(2164, 1256.73059, -1204.25452, 1564.97925,   0.00000, 0.00000, -270.17990);
		CreateDynamicObject(2164, 1256.73059, -1205.99451, 1564.97925,   0.00000, 0.00000, -270.17990);
		CreateDynamicObject(1502, 1263.75586, -1196.42871, 1564.96289,   0.00000, 0.00000, 0.18000);
		CreateDynamicObject(1557, 1263.14172, -1215.55469, 1564.98169,   0.00000, 0.00000, 0.48000);
		CreateDynamicObject(1703, 1257.22803, -1215.11890, 1564.98926,   0.00000, 0.00000, 90.78003);
		CreateDynamicObject(1703, 1257.22803, -1212.59888, 1564.98926,   0.00000, 0.00000, 90.78000);
		CreateDynamicObject(1703, 1268.00159, -1213.23376, 1564.98926,   0.00000, 0.00000, -90.36004);
		CreateDynamicObject(1703, 1268.00159, -1210.71375, 1564.98926,   0.00000, 0.00000, -90.36000);
		CreateDynamicObject(948, 1268.21387, -1209.33105, 1564.98877,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(948, 1256.99353, -1209.05493, 1564.98877,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2240, 1265.31738, -1215.24646, 1565.46960,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19452, 1261.43506, -1191.07410, 1566.63525,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19386, 1267.76306, -1191.05640, 1566.64001,   0.00000, 0.00000, -89.75990);
		CreateDynamicObject(1502, 1267.01208, -1191.13330, 1564.96289,   0.00000, 0.00000, 0.18000);
		CreateDynamicObject(14393, 1268.05505, -1182.26636, 1567.22388,   0.00000, 0.00000, -89.76000);
		CreateDynamicObject(19452, 1273.76257, -1191.05371, 1566.63525,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(14391, 1267.16199, -1182.88440, 1565.88892,   0.00000, 0.00000, -90.54000);
		CreateDynamicObject(1502, 1270.83521, -1182.64929, 1564.96289,   0.00000, 0.00000, 0.18000);
		CreateDynamicObject(19386, 1271.59705, -1182.63721, 1566.64001,   0.00000, 0.00000, -89.75990);
		CreateDynamicObject(19317, 1266.76953, -1173.60669, 1566.49268,   0.00000, -115.00000, 0.00000);
		CreateDynamicObject(1736, 1270.35352, -1173.80469, 1566.73328,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1806, 1267.27295, -1186.03271, 1564.98999,   0.00000, 0.00000, -178.73976);
		CreateDynamicObject(1806, 1266.01294, -1186.03271, 1564.98999,   0.00000, 0.00000, -178.73981);
		CreateDynamicObject(1806, 1264.77295, -1186.03271, 1564.98999,   0.00000, 0.00000, -178.73981);
		CreateDynamicObject(19452, 1280.04712, -1196.35046, 1566.63525,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19360, 1283.22266, -1191.02197, 1566.65454,   0.00000, 0.00000, -89.94000);
		CreateDynamicObject(1502, 1284.74011, -1192.08350, 1564.98572,   0.00000, 0.00000, -90.24020);
		CreateDynamicObject(19452, 1284.78772, -1186.41895, 1566.63525,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19452, 1284.78772, -1186.41895, 1570.13525,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19452, 1284.78772, -1199.17944, 1566.63525,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19452, 1284.78772, -1192.79895, 1570.13525,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19452, 1284.78772, -1208.81934, 1566.63525,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19452, 1284.78772, -1176.83887, 1566.63525,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19452, 1284.78772, -1176.83887, 1570.11536,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19386, 1284.77185, -1192.83691, 1566.64001,   0.00000, 0.00000, -179.88013);
		CreateDynamicObject(19452, 1284.78772, -1202.39905, 1570.13525,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19452, 1284.78772, -1212.03894, 1570.13525,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19452, 1284.78772, -1218.47925, 1566.63525,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(7488, 1320.41919, -1155.17651, 1564.96619,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(7488, 1336.16321, -1193.52222, 1564.96619,   0.00000, 0.00000, -89.45999);
		CreateDynamicObject(7488, 1321.46204, -1237.11829, 1564.96619,   0.00000, 0.00000, -178.56021);
		CreateDynamicObject(3819, 1287.32751, -1186.11279, 1565.80298,   0.00000, 0.00000, -180.24010);
		CreateDynamicObject(3819, 1287.21912, -1199.22253, 1565.80298,   0.00000, 0.00000, -180.24010);
		CreateDynamicObject(6449, 1320.41016, -1227.42212, 1571.07959,   0.00000, 0.00000, -178.86000);
		CreateDynamicObject(7090, 1310.17139, -1193.04626, 1562.82104,   -360.00000, -91.00000, -269.42001);
		CreateDynamicObject(7090, 1310.05347, -1184.62146, 1562.72107,   -360.00000, -91.00000, -449.48010);
		CreateDynamicObject(2184, 1303.97217, -1186.10034, 1565.38452,   0.00000, 0.00000, -140.21999);
		CreateDynamicObject(2309, 1304.78577, -1188.50452, 1565.40613,   0.00000, 0.00000, 46.01996);
		CreateDynamicObject(2571, 1305.70874, -1204.67322, 1565.40198,   0.00000, 0.00000, -83.45998);
		CreateDynamicObject(2571, 1303.14258, -1207.83862, 1565.40198,   0.00000, 0.00000, -265.86011);
		CreateDynamicObject(3819, 1287.19373, -1207.74231, 1565.80298,   0.00000, 0.00000, -180.24010);
		CreateDynamicObject(2357, 1304.46130, -1206.27429, 1565.62610,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(2921, 1284.91016, -1207.90002, 1569.50513,   0.00000, 0.00000, 213.62651);
		CreateDynamicObject(2921, 1284.80310, -1192.74963, 1569.50513,   0.00000, 0.00000, 212.18660);
		CreateDynamicObject(19386, 1280.10352, -1191.03345, 1566.64001,   0.00000, 0.00000, -89.75990);
		CreateDynamicObject(1502, 1279.35425, -1191.05798, 1564.96289,   0.00000, 0.00000, 0.18000);
		CreateDynamicObject(19450, 1275.57263, -1186.26831, 1566.63525,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19450, 1280.05945, -1182.06873, 1566.63525,   0.00000, 0.00000, -89.94000);
		CreateDynamicObject(19450, 1282.58252, -1186.12292, 1566.63525,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1276.18018, -1181.70166, 1567.61426,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1276.18018, -1181.70166, 1567.15430,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1276.18018, -1181.70166, 1566.67432,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1276.18018, -1181.70166, 1566.21436,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1276.18018, -1181.70166, 1565.71436,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1276.18018, -1181.70166, 1565.23438,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1276.86023, -1181.70203, 1567.61426,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1276.86023, -1181.70203, 1567.15430,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1276.86023, -1181.70203, 1566.67432,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1276.86023, -1181.70203, 1566.21436,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1276.86023, -1181.70203, 1565.71436,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1276.18018, -1181.70166, 1565.71436,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1276.86023, -1181.70203, 1565.23438,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1277.54016, -1181.70203, 1567.61426,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1277.54016, -1181.70203, 1567.15430,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1277.54028, -1181.70020, 1566.67432,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1277.54028, -1181.70020, 1566.21436,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1277.54028, -1181.70020, 1565.71436,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1277.54028, -1181.70020, 1565.23438,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1278.22229, -1181.70190, 1567.61426,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1278.22229, -1181.70190, 1567.15430,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1278.22229, -1181.70190, 1566.67432,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1278.22229, -1181.70190, 1566.21436,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1278.22229, -1181.70190, 1565.71436,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1278.22229, -1181.70190, 1565.23438,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1278.90222, -1181.70190, 1567.61426,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1278.90222, -1181.70190, 1567.15430,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1278.90222, -1181.70190, 1566.67432,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1278.90222, -1181.70190, 1566.21436,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1278.90222, -1181.70190, 1565.71436,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1278.90222, -1181.70190, 1565.23438,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1279.58215, -1181.70190, 1567.61426,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1279.58215, -1181.70190, 1567.15430,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1279.58215, -1181.70190, 1566.67432,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1279.58215, -1181.70190, 1566.21436,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1279.58215, -1181.70190, 1565.71436,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1279.58215, -1181.70190, 1565.23438,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1280.26221, -1181.70190, 1567.61426,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1280.26221, -1181.70190, 1567.15430,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1280.26221, -1181.70190, 1566.67432,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1280.26221, -1181.70190, 1566.21436,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1280.26221, -1181.70190, 1565.71436,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1280.26221, -1181.70190, 1565.23438,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1280.94226, -1181.70190, 1567.61426,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1280.94226, -1181.70190, 1567.15430,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1280.94226, -1181.70190, 1566.67432,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1280.94226, -1181.70190, 1566.21436,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1280.94226, -1181.70190, 1565.71436,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1280.94226, -1181.70190, 1565.23438,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1281.62231, -1181.70190, 1567.61426,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1281.62231, -1181.70190, 1567.15430,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1281.62231, -1181.70190, 1566.67432,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1281.62231, -1181.70190, 1566.21436,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1281.62231, -1181.70190, 1565.71436,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1281.62231, -1181.70190, 1565.23438,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1282.30225, -1181.70190, 1567.61426,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1282.30225, -1181.70190, 1567.15430,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1282.30225, -1181.70190, 1566.67432,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1282.30225, -1181.70190, 1566.21436,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1282.30225, -1181.70190, 1565.71436,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1750, 1282.30225, -1181.70190, 1565.23438,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1808, 1275.94238, -1190.72449, 1564.98926,   0.00000, 0.00000, -236.33995);
		CreateDynamicObject(14705, 1282.36865, -1190.75146, 1565.16907,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2737, 1282.44873, -1184.87012, 1567.09460,   0.00000, 0.00000, -90.12000);
		CreateDynamicObject(2605, 1278.95691, -1184.40918, 1565.39050,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2356, 1278.97314, -1185.69446, 1564.99060,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2737, 1275.70581, -1185.31750, 1567.09460,   0.00000, 0.00000, -269.93970);
		CreateDynamicObject(948, 1282.18250, -1187.13586, 1564.98877,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(8411, 1253.04529, -1193.83679, 1633.33936,   0.00000, -180.00000, 0.00000);
		CreateDynamicObject(8411, 1252.97241, -1218.91370, 1633.33936,   0.00000, -180.00000, 0.00000);
		CreateDynamicObject(8411, 1283.11304, -1193.16858, 1636.73975,   0.00000, -180.00000, 0.00000);
		CreateDynamicObject(8411, 1279.47461, -1218.55225, 1636.73975,   0.00000, -180.00000, 0.00000);
		CreateDynamicObject(2240, 1257.03479, -1191.41138, 1565.46960,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(948, 1272.80884, -1191.54016, 1564.98877,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(949, 1279.50623, -1195.94568, 1565.58960,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2240, 1257.11597, -1195.97107, 1565.46960,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(948, 1272.80884, -1196.00024, 1564.98877,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2184, 1301.90173, -1188.11450, 1565.38452,   0.00000, 0.00000, -100.80005);
		CreateDynamicObject(2184, 1301.64648, -1191.01819, 1565.38452,   0.00000, 0.00000, -58.08004);
		CreateDynamicObject(2184, 1303.43286, -1193.29846, 1565.38452,   0.00000, 0.00000, -13.38010);
		CreateDynamicObject(2309, 1304.00928, -1189.50403, 1565.40613,   0.00000, 0.00000, 68.39997);
		CreateDynamicObject(2309, 1304.15100, -1190.71790, 1565.40613,   0.00000, 0.00000, 103.13996);
		CreateDynamicObject(2309, 1305.16370, -1191.38013, 1565.40613,   0.00000, 0.00000, 174.29997);
		CreateDynamicObject(2894, 1304.59045, -1193.06189, 1566.15857,   0.00000, 0.00000, -8.88000);
		CreateDynamicObject(2894, 1302.49109, -1191.33447, 1566.15857,   0.00000, 0.00000, -75.48003);
		CreateDynamicObject(2894, 1302.37805, -1188.77686, 1566.15857,   0.00000, 0.00000, -118.98002);
		CreateDynamicObject(2894, 1303.62292, -1187.08618, 1566.15857,   0.00000, 0.00000, -144.41988);
		CreateDynamicObject(2239, 1305.67285, -1186.34094, 1565.40527,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2239, 1306.44019, -1193.37000, 1565.40527,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2258, 1310.42456, -1204.83472, 1567.66138,   0.00000, 0.00000, -89.46000);
		CreateDynamicObject(2256, 1310.46802, -1208.44861, 1567.61169,   0.00000, 0.00000, 270.47891);
	}
	else if (map == INT_LSPD)
	{
		CreateDynamicObject(3051, 287.875274, 1223.593017, 1566.016479, 0.000000, 0.000000, 46.299987); // ascensor1.
		CreateDynamicObject(3051, 287.874084, 1224.803222, 1566.016479, 0.000000, 0.000000, -133.699966); // ascensor1.

		CreateDynamicObject(2026, 274.437408, 1230.329956, 1568.326538, 0.000000, 0.000000, 0.000000); // luz.
		CreateDynamicObject(2026, 283.527282, 1234.426025, 1568.316894, 0.000000, 0.000000, 0.000000); // luz.
		CreateDynamicObject(2026, 289.425201, 1241.902221, 1568.306518, 0.000000, 0.000000, 0.000000); // luz.
		CreateDynamicObject(2026, 262.299102, 1230.008422, 1568.280761, 0.000000, 0.000000, 0.000000); // luz.
		CreateDynamicObject(2026, 283.296539, 1224.710693, 1568.296630, 0.000000, 0.000000, 0.000000); // luz.

		CreateDynamicObject(19450, 256.73050, 1231.36914, 1566.59253,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19450, 256.72620, 1221.95105, 1566.59253,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1557, 256.80600, 1231.50476, 1564.97314,   0.00000, 0.00000, -90.42000);
		CreateDynamicObject(1557, 256.80600, 1228.48096, 1564.97314,   0.00000, 0.00000, -269.75980);
		CreateDynamicObject(19404, 268.93552, 1231.12756, 1566.59607,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19404, 268.93420, 1234.12146, 1566.59607,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19450, 264.23453, 1235.79529, 1566.59436,   0.00000, 0.00000, 269.96561);
		CreateDynamicObject(19450, 254.67757, 1235.80566, 1566.59436,   0.00000, 0.00000, 269.96561);
		CreateDynamicObject(19388, 268.93701, 1224.78894, 1566.58936,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19450, 264.20840, 1223.44373, 1566.59436,   0.00000, 0.00000, 269.96561);
		CreateDynamicObject(19450, 254.62399, 1223.44373, 1566.59436,   0.00000, 0.00000, 269.96561);
		CreateDynamicObject(19450, 273.71674, 1235.79431, 1566.59436,   0.00000, 0.00000, 269.96561);
		CreateDynamicObject(19450, 273.73660, 1223.43628, 1566.59436,   0.00000, 0.00000, 269.96561);
		CreateDynamicObject(19388, 278.46890, 1224.96277, 1566.58936,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19388, 278.46780, 1234.39038, 1566.58936,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19358, 278.46780, 1228.10742, 1566.59595,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19358, 278.46780, 1231.20813, 1566.59595,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19450, 283.21078, 1233.07727, 1566.59436,   0.00000, 0.00000, 269.96561);
		CreateDynamicObject(19450, 283.18857, 1235.78174, 1566.59436,   0.00000, 0.00000, 269.96561);
		CreateDynamicObject(19358, 289.56873, 1233.06763, 1566.59595,   0.00000, 0.00000, 269.96561);
		CreateDynamicObject(19404, 268.93701, 1227.99963, 1566.59607,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19358, 287.95337, 1237.30029, 1566.59595,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19388, 287.95340, 1240.49597, 1566.58936,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19358, 290.83740, 1241.23486, 1566.59583,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19358, 287.95340, 1243.70935, 1566.59595,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19388, 290.83136, 1244.34131, 1566.58936,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19358, 290.83139, 1247.51941, 1566.59595,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19450, 283.20209, 1243.71765, 1566.59436,   0.00000, 0.00000, 269.96561);
		CreateDynamicObject(19450, 279.57431, 1240.64221, 1566.59253,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19388, 287.95340, 1246.89026, 1566.58936,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19388, 290.83139, 1250.70996, 1566.58936,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19358, 290.83139, 1247.51941, 1566.59595,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19450, 290.83139, 1257.12939, 1566.59253,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19450, 289.36630, 1257.50830, 1566.59436,   0.00000, 0.00000, 269.96561);
		CreateDynamicObject(19450, 279.57349, 1250.26233, 1566.59253,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19450, 279.57349, 1259.85706, 1566.59253,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19450, 279.79950, 1257.48840, 1566.59436,   0.00000, 0.00000, 269.96561);
		CreateDynamicObject(19450, 295.57523, 1255.60278, 1566.59436,   0.00000, 0.00000, 269.96561);
		CreateDynamicObject(19450, 295.58539, 1247.48633, 1566.59436,   0.00000, 0.00000, 269.96561);
		CreateDynamicObject(19450, 295.57721, 1235.79395, 1566.59436,   0.00000, 0.00000, 269.96561);
		CreateDynamicObject(19358, 287.95340, 1250.09766, 1566.59595,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19388, 287.95340, 1253.28772, 1566.58936,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19358, 287.95340, 1256.48132, 1566.59595,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19450, 283.17798, 1250.69678, 1566.59436,   0.00000, 0.00000, 269.96561);
		CreateDynamicObject(19388, 290.83740, 1238.16028, 1566.58936,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19450, 290.82599, 1231.75696, 1566.59253,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19450, 295.61395, 1241.23950, 1566.59436,   0.00000, 0.00000, 269.96561);
		CreateDynamicObject(19450, 300.37729, 1240.51599, 1566.59253,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19450, 300.37729, 1250.13391, 1566.59253,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19450, 300.37729, 1259.76038, 1566.59253,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19378, 261.89581, 1231.04175, 1564.93054,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 261.91461, 1221.43018, 1564.93054,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 272.39459, 1231.05115, 1564.93054,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 272.41449, 1221.42163, 1564.93054,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 282.88589, 1231.05115, 1564.93054,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 282.88589, 1221.42163, 1564.93054,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 293.33981, 1231.09119, 1564.93054,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 282.88589, 1240.51123, 1564.93054,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 282.90591, 1250.15247, 1564.93054,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 282.88589, 1259.77112, 1564.93054,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 293.38589, 1240.69116, 1564.93054,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 293.38351, 1250.31116, 1564.93054,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 293.38589, 1259.93115, 1564.93054,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 303.88589, 1240.69116, 1564.93054,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 303.88589, 1250.31116, 1564.93054,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 303.88589, 1259.93115, 1564.93054,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 293.37650, 1221.46155, 1564.93054,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19450, 283.23511, 1226.15710, 1566.59436,   0.00000, 0.00000, 269.96561);
		CreateDynamicObject(19450, 287.97992, 1221.48169, 1566.59253,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19358, 280.00919, 1223.43054, 1566.59595,   0.00000, 0.00000, 269.96561);
		CreateDynamicObject(19358, 283.16919, 1223.43054, 1566.59595,   0.00000, 0.00000, 269.96561);
		CreateDynamicObject(19358, 284.68680, 1221.91150, 1566.59595,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19358, 284.68680, 1218.71155, 1566.59595,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(14407, 286.43851, 1214.60693, 1561.85352,   0.00000, 0.00000, -178.85970);
		CreateDynamicObject(19378, 286.18829, 1208.23242, 1561.39050,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19450, 287.97263, 1211.91516, 1566.59253,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19450, 287.95822, 1211.90308, 1563.13245,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19450, 284.68680, 1212.33521, 1566.59253,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19450, 284.68680, 1212.33521, 1563.17249,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19378, 286.17160, 1204.88464, 1564.97046,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19450, 286.95709, 1209.61731, 1566.58386,   0.00000, 0.00000, 269.96561);
		CreateDynamicObject(19450, 284.68680, 1202.75586, 1563.16357,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19450, 292.71530, 1207.17358, 1563.13245,   0.00000, 0.00000, 269.96561);
		CreateDynamicObject(19378, 296.66830, 1208.23242, 1561.39050,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19388, 295.48389, 1203.93970, 1563.16357,   0.00000, 0.00000, 269.96561);
		CreateDynamicObject(19378, 296.66830, 1198.61243, 1561.39050,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19450, 291.57010, 1199.15918, 1563.16357,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19450, 301.90369, 1203.94214, 1563.16357,   0.00000, 0.00000, 269.96561);
		CreateDynamicObject(19450, 301.70432, 1199.11780, 1563.16357,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19450, 296.98004, 1194.38098, 1563.16357,   0.00000, 0.00000, 269.96561);
		CreateDynamicObject(19450, 287.37949, 1194.38794, 1563.16357,   0.00000, 0.00000, 269.96561);
		CreateDynamicObject(19378, 296.66071, 1191.94580, 1561.55054,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(2441, 293.18375, 1196.21777, 1561.63574,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2441, 300.36371, 1196.21777, 1561.63574,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19392, 311.59171, 1212.51855, 1559.71252,   0.00000, 0.00000, 269.96561);
		CreateDynamicObject(19450, 301.72681, 1211.94128, 1563.13245,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19450, 305.26691, 1207.16724, 1563.13245,   0.00000, 0.00000, 269.96561);
		CreateDynamicObject(19450, 292.86298, 1212.04663, 1563.13245,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19378, 296.40829, 1217.85242, 1561.39050,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19450, 297.20639, 1216.64709, 1563.13245,   0.00000, 0.00000, 269.96561);
		CreateDynamicObject(14407, 303.96371, 1205.63403, 1558.29358,   0.00000, 0.00000, -88.13970);
		CreateDynamicObject(19450, 305.26691, 1207.16724, 1559.67249,   0.00000, 0.00000, 269.96561);
		CreateDynamicObject(19450, 310.69351, 1203.94214, 1563.16357,   0.00000, 0.00000, 269.96561);
		CreateDynamicObject(19450, 310.69351, 1203.94214, 1559.68359,   0.00000, 0.00000, 269.96561);
		CreateDynamicObject(19450, 301.90369, 1203.94214, 1559.68359,   0.00000, 0.00000, 269.96561);
		CreateDynamicObject(19378, 309.89371, 1206.31604, 1557.91052,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19450, 313.11060, 1207.77075, 1559.68359,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19358, 309.99271, 1208.80542, 1559.67249,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19358, 309.98950, 1210.95667, 1559.67249,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19388, 298.99380, 1207.17358, 1563.13245,   0.00000, 0.00000, 269.96561);
		CreateDynamicObject(19378, 299.41370, 1215.91602, 1557.91052,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19463, 318.00580, 1212.52576, 1559.69250,   0.00000, 0.00000, 269.96561);
		CreateDynamicObject(19392, 306.10483, 1214.14771, 1559.65442,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 305.18320, 1212.52356, 1559.69885,   0.00000, 0.00000, 90.00000);
		CreateDynamicObject(19463, 301.62289, 1217.03259, 1559.63245,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 301.37405, 1215.66309, 1559.69885,   0.00000, 0.00000, 90.00000);
		CreateDynamicObject(19392, 306.10480, 1217.34766, 1559.65442,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19378, 309.89371, 1225.53601, 1557.91052,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19463, 301.35016, 1218.86426, 1559.69885,   0.00000, 0.00000, 90.00000);
		CreateDynamicObject(19463, 310.40878, 1222.01636, 1559.69885,   0.00000, 0.00000, 90.00000);
		CreateDynamicObject(19378, 320.38510, 1217.26624, 1557.91052,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19417, 315.16608, 1217.36890, 1559.71594,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19392, 315.16611, 1214.16772, 1559.71436,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 319.81647, 1222.00415, 1559.69885,   0.00000, 0.00000, 90.00000);
		CreateDynamicObject(19392, 306.10480, 1220.50769, 1559.65442,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19378, 299.41370, 1225.53601, 1557.91052,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19463, 301.35785, 1222.02039, 1559.69885,   0.00000, 0.00000, 90.00000);
		CreateDynamicObject(19463, 301.63110, 1226.66516, 1559.73242,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19463, 319.77505, 1217.21033, 1559.73242,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19417, 315.16519, 1220.54895, 1559.71594,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19378, 261.89581, 1231.04175, 1568.39050,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 261.91461, 1221.43018, 1568.39050,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 272.39459, 1231.05115, 1568.39050,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 272.41449, 1221.42163, 1568.39050,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 282.88589, 1221.42163, 1568.39050,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 293.37650, 1221.46155, 1568.39050,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 282.88589, 1231.05115, 1568.39050,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 293.33981, 1231.09119, 1568.39050,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 293.38589, 1240.69116, 1568.39050,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 293.38589, 1250.33118, 1568.39050,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 293.38589, 1259.95117, 1568.39050,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 282.88589, 1240.69116, 1568.39050,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 282.88589, 1250.05115, 1568.39050,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 282.88589, 1259.67114, 1568.39050,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 303.88589, 1259.93115, 1568.39050,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 303.88589, 1250.31116, 1568.39050,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 303.88589, 1240.69116, 1568.39050,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 282.88589, 1211.80164, 1568.39050,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 296.66830, 1198.47241, 1564.97046,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 296.66440, 1208.09277, 1564.97046,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 296.66830, 1217.71240, 1564.97046,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 314.60840, 1207.75159, 1561.39050,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 307.15302, 1204.88208, 1564.97046,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19450, 309.37610, 1202.35730, 1563.16357,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2008, 269.49261, 1233.54895, 1564.97766,   0.00000, 0.00000, 90.00000);
		CreateDynamicObject(2008, 269.49261, 1230.58899, 1564.97766,   0.00000, 0.00000, 90.00000);
		CreateDynamicObject(2008, 269.49261, 1227.50903, 1564.97766,   0.00000, 0.00000, 90.00000);
		CreateDynamicObject(2356, 270.87860, 1228.42310, 1565.01782,   0.00000, 0.00000, 88.56000);
		CreateDynamicObject(2356, 270.87860, 1231.50305, 1565.01782,   0.00000, 0.00000, 88.56000);
		CreateDynamicObject(2356, 270.89859, 1234.40308, 1565.01782,   0.00000, 0.00000, 88.56000);
		CreateDynamicObject(1702, 265.46231, 1235.32544, 1564.94226,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1702, 263.36230, 1235.32544, 1564.94226,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1702, 261.28229, 1235.32544, 1564.94226,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1702, 259.22229, 1235.32544, 1564.94226,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1702, 257.12231, 1235.32544, 1564.94226,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1702, 266.65695, 1224.02441, 1564.94226,   0.00000, 0.00000, -179.75989);
		CreateDynamicObject(1702, 264.59698, 1224.02441, 1564.94226,   0.00000, 0.00000, -179.75990);
		CreateDynamicObject(1702, 262.49701, 1224.02441, 1564.94226,   0.00000, 0.00000, -179.75990);
		CreateDynamicObject(1702, 260.39700, 1224.02441, 1564.94226,   0.00000, 0.00000, -179.75990);
		CreateDynamicObject(2240, 257.44550, 1223.92615, 1565.49255,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2604, 277.96140, 1231.23865, 1565.77148,   0.00000, 0.00000, -90.06010);
		CreateDynamicObject(2608, 277.95651, 1228.07288, 1565.59741,   0.00000, 0.00000, -89.46001);
		CreateDynamicObject(2609, 271.80179, 1223.58472, 1565.76074,   0.00000, 0.00000, -179.21980);
		CreateDynamicObject(2609, 272.22180, 1223.58472, 1565.76074,   0.00000, 0.00000, -179.21980);
		CreateDynamicObject(2609, 272.66180, 1223.58472, 1565.76074,   0.00000, 0.00000, -179.21980);
		CreateDynamicObject(2737, 273.06659, 1235.66577, 1566.60938,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1744, 275.85849, 1235.88477, 1566.64319,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(3017, 298.15591, 1216.42957, 1563.34314,   0.00000, 0.00000, -189.29990);
		CreateDynamicObject(2287, 276.85089, 1223.99121, 1567.09229,   0.00000, 0.00000, 180.16490);
		CreateDynamicObject(2283, 274.54959, 1223.55347, 1567.41760,   0.00000, 0.00000, 179.96230);
		CreateDynamicObject(2240, 267.29419, 1223.88538, 1565.45264,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2240, 268.26889, 1235.34033, 1565.45264,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2609, 271.34619, 1223.58423, 1565.76074,   0.00000, 0.00000, -179.21980);
		CreateDynamicObject(2026, 282.87839, 1239.43225, 1568.33752,   0.00000, 0.00000, 177.00293);
		CreateDynamicObject(2065, 300.15051, 1247.83655, 1564.98438,   0.00000, 0.00000, 89.10000);
		CreateDynamicObject(2065, 300.14041, 1248.39429, 1564.98438,   0.00000, 0.00000, 89.04000);
		CreateDynamicObject(2065, 300.13550, 1248.97534, 1564.98438,   0.00000, 0.00000, 89.10000);
		CreateDynamicObject(2161, 300.30341, 1252.29321, 1564.98975,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(2161, 300.30341, 1252.29321, 1566.32971,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(2161, 300.30341, 1253.59375, 1564.98975,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(2161, 300.30341, 1253.60193, 1566.32971,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(2164, 295.00211, 1247.60095, 1564.99805,   0.00000, 0.00000, 179.93600);
		CreateDynamicObject(2164, 293.23016, 1247.59509, 1564.99805,   0.00000, 0.00000, 179.93600);
		CreateDynamicObject(2199, 284.25589, 1243.58789, 1564.98926,   0.00000, 0.00000, -0.61120);
		CreateDynamicObject(2199, 285.61469, 1243.59595, 1564.98926,   0.00000, 0.00000, -0.20370);
		CreateDynamicObject(2008, 297.14999, 1251.21265, 1564.97766,   0.00000, 0.00000, 90.00000);
		CreateDynamicObject(2356, 298.46274, 1252.25830, 1565.01782,   0.00000, 0.00000, 88.56000);
		CreateDynamicObject(2065, 279.61429, 1238.63599, 1564.98438,   0.00000, 0.00000, 268.75818);
		CreateDynamicObject(2161, 279.65250, 1242.79187, 1564.98975,   0.00000, 0.00000, 90.01370);
		CreateDynamicObject(2356, 281.16553, 1240.00732, 1565.01782,   0.00000, 0.00000, 268.26971);
		CreateDynamicObject(2008, 282.56271, 1240.85303, 1564.97766,   0.00000, 0.00000, 269.93872);
		CreateDynamicObject(2026, 297.21011, 1251.54199, 1568.33752,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2164, 285.61151, 1235.86572, 1564.99805,   0.00000, 0.00000, -180.20740);
		CreateDynamicObject(2199, 292.35031, 1255.45691, 1564.98926,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2199, 293.71851, 1255.45642, 1564.98926,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2199, 293.21530, 1247.35315, 1564.98926,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2199, 291.85529, 1247.35315, 1564.98926,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2008, 297.34265, 1243.78418, 1564.97766,   0.00000, 0.00000, 90.00000);
		CreateDynamicObject(2161, 300.30179, 1244.90234, 1566.32971,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(2161, 300.30179, 1246.22144, 1566.32971,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(2161, 300.30179, 1246.21814, 1564.98975,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(2161, 300.30179, 1244.89697, 1564.98975,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(2026, 297.40399, 1244.09119, 1568.33752,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2065, 300.32080, 1243.39282, 1564.98438,   0.00000, 0.00000, 89.10000);
		CreateDynamicObject(2065, 300.32111, 1242.81592, 1564.98438,   0.00000, 0.00000, 89.04000);
		CreateDynamicObject(2065, 300.32193, 1241.66479, 1564.98438,   0.00000, 0.00000, 89.10000);
		CreateDynamicObject(2065, 300.32159, 1242.24036, 1564.98438,   0.00000, 0.00000, 89.10000);
		CreateDynamicObject(2164, 295.52469, 1241.33069, 1564.99805,   0.00000, 0.00000, 179.93600);
		CreateDynamicObject(2164, 293.76074, 1241.33582, 1564.99805,   0.00000, 0.00000, 179.93600);
		CreateDynamicObject(2164, 295.07959, 1235.88281, 1564.99805,   0.00000, 0.00000, 179.93600);
		CreateDynamicObject(2164, 296.83960, 1235.88281, 1564.99805,   0.00000, 0.00000, 179.93600);
		CreateDynamicObject(2008, 297.40775, 1237.71753, 1564.97766,   0.00000, 0.00000, 90.00000);
		CreateDynamicObject(2065, 300.36349, 1237.81604, 1564.98438,   0.00000, 0.00000, 89.10000);
		CreateDynamicObject(2065, 300.36349, 1237.25598, 1564.98438,   0.00000, 0.00000, 89.04000);
		CreateDynamicObject(2065, 300.36349, 1236.69604, 1564.98438,   0.00000, 0.00000, 89.10000);
		CreateDynamicObject(2065, 300.36349, 1236.13599, 1564.98438,   0.00000, 0.00000, 89.10000);
		CreateDynamicObject(2161, 300.30579, 1240.28906, 1566.32971,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(2161, 300.30579, 1238.96912, 1566.32971,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(2161, 300.30579, 1238.96912, 1564.98975,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(2161, 300.30579, 1240.28906, 1564.98975,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(2356, 298.74799, 1238.59656, 1565.01782,   0.00000, 0.00000, 88.56000);
		CreateDynamicObject(2026, 297.19711, 1238.48425, 1568.33752,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2199, 291.85529, 1241.11316, 1564.98926,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2199, 293.23529, 1241.11316, 1564.98926,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2161, 279.65250, 1242.79187, 1566.30969,   0.00000, 0.00000, 90.01370);
		CreateDynamicObject(2161, 279.65250, 1241.47192, 1564.98975,   0.00000, 0.00000, 90.01370);
		CreateDynamicObject(2161, 279.65250, 1241.47192, 1566.30969,   0.00000, 0.00000, 90.01370);
		CreateDynamicObject(2164, 283.85150, 1235.86572, 1564.99805,   0.00000, 0.00000, -180.20740);
		CreateDynamicObject(2065, 279.61429, 1238.07605, 1564.98438,   0.00000, 0.00000, 268.75821);
		CreateDynamicObject(2065, 279.61429, 1239.19604, 1564.98438,   0.00000, 0.00000, 268.75821);
		CreateDynamicObject(2065, 279.61429, 1239.75598, 1564.98438,   0.00000, 0.00000, 268.75821);
		CreateDynamicObject(1549, 298.20401, 1241.00305, 1564.99817,   0.00000, 0.00000, -4.92000);
		CreateDynamicObject(1549, 298.12128, 1247.26001, 1564.99817,   0.00000, 0.00000, -4.92000);
		CreateDynamicObject(1549, 297.52856, 1255.37500, 1564.99817,   0.00000, 0.00000, -4.92000);
		CreateDynamicObject(1549, 280.78845, 1236.03967, 1564.99817,   0.00000, 0.00000, -4.92000);
		CreateDynamicObject(2161, 279.65271, 1249.77454, 1564.98975,   0.00000, 0.00000, 90.01370);
		CreateDynamicObject(2161, 279.65271, 1249.77454, 1566.32971,   0.00000, 0.00000, 90.01370);
		CreateDynamicObject(2161, 279.65271, 1248.47449, 1564.98975,   0.00000, 0.00000, 90.01370);
		CreateDynamicObject(2161, 279.65271, 1248.47449, 1566.32971,   0.00000, 0.00000, 90.01370);
		CreateDynamicObject(2008, 282.56271, 1248.33301, 1564.97766,   0.00000, 0.00000, 269.93869);
		CreateDynamicObject(2199, 285.61081, 1250.57556, 1564.98926,   0.00000, 0.00000, -0.20370);
		CreateDynamicObject(2199, 284.25079, 1250.57556, 1564.98926,   0.00000, 0.00000, -0.20370);
		CreateDynamicObject(2164, 283.85150, 1243.80566, 1564.99805,   0.00000, 0.00000, -180.20740);
		CreateDynamicObject(2164, 285.63150, 1243.80566, 1564.99805,   0.00000, 0.00000, -180.20740);
		CreateDynamicObject(1549, 279.79779, 1243.36499, 1564.99817,   0.00000, 0.00000, -4.92000);
		CreateDynamicObject(1549, 280.76633, 1243.95483, 1564.99817,   0.00000, 0.00000, -4.92000);
		CreateDynamicObject(2065, 279.58554, 1246.76477, 1564.98438,   0.00000, 0.00000, 268.75821);
		CreateDynamicObject(2065, 279.58551, 1246.18481, 1564.98438,   0.00000, 0.00000, 268.75821);
		CreateDynamicObject(2065, 279.58551, 1245.64478, 1564.98438,   0.00000, 0.00000, 268.75821);
		CreateDynamicObject(2065, 279.58551, 1245.06494, 1564.98438,   0.00000, 0.00000, 268.75821);
		CreateDynamicObject(2356, 281.12872, 1247.35657, 1565.01782,   0.00000, 0.00000, 268.26971);
		CreateDynamicObject(19450, 284.08093, 1255.51025, 1566.59253,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19450, 283.22290, 1255.50806, 1566.59436,   0.00000, 0.00000, 269.96561);
		CreateDynamicObject(2186, 282.63129, 1250.19690, 1564.95776,   0.00000, 0.00000, -89.87997);
		CreateDynamicObject(2186, 282.51068, 1242.87732, 1564.95776,   0.00000, 0.00000, -89.87997);
		CreateDynamicObject(2186, 298.81064, 1236.29553, 1564.95776,   0.00000, 0.00000, -180.18010);
		CreateDynamicObject(2186, 298.08987, 1241.75757, 1564.95776,   0.00000, 0.00000, -180.18010);
		CreateDynamicObject(2186, 298.03085, 1247.98865, 1564.95776,   0.00000, 0.00000, -180.18010);
		CreateDynamicObject(2514, 284.54669, 1253.19263, 1565.01099,   0.00000, 0.00000, 90.06140);
		CreateDynamicObject(2524, 285.65311, 1254.89734, 1564.96594,   0.00000, 0.00000, 0.50630);
		CreateDynamicObject(2527, 284.79880, 1252.36304, 1564.97876,   0.00000, 0.00000, -180.05971);
		CreateDynamicObject(1502, 287.93631, 1239.74121, 1564.93896,   0.00000, 0.00000, 89.76000);
		CreateDynamicObject(1502, 287.98740, 1246.14099, 1564.93896,   0.00000, 0.00000, 90.12000);
		CreateDynamicObject(1502, 287.98740, 1252.54102, 1564.93896,   0.00000, 0.00000, 90.12000);
		CreateDynamicObject(1502, 287.98740, 1246.14099, 1564.93896,   0.00000, 0.00000, 90.12000);
		CreateDynamicObject(1502, 290.88861, 1249.95874, 1564.93896,   0.00000, 0.00000, 90.12000);
		CreateDynamicObject(1502, 290.86520, 1243.58154, 1564.93896,   0.00000, 0.00000, 90.12000);
		CreateDynamicObject(1502, 290.86520, 1237.40149, 1564.93896,   0.00000, 0.00000, 90.12000);
		CreateDynamicObject(1734, 297.38397, 1213.49292, 1564.91907,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2108, 299.52872, 1213.82214, 1561.47668,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2008, 298.13461, 1213.91797, 1561.43542,   0.00000, 0.00000, 180.53999);
		CreateDynamicObject(2611, 295.64651, 1216.51770, 1563.60193,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2854, 297.86880, 1213.71362, 1562.24695,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2289, 292.99081, 1214.88269, 1563.70935,   0.00000, 0.00000, 90.30000);
		CreateDynamicObject(2262, 301.14539, 1211.14783, 1563.53894,   0.00000, 0.00000, 270.03391);
		CreateDynamicObject(2264, 301.14368, 1208.36829, 1563.63354,   0.00000, 0.00000, 270.55978);
		CreateDynamicObject(1712, 301.18680, 1212.11853, 1561.45093,   0.00000, 0.00000, -89.46000);
		CreateDynamicObject(1712, 301.18680, 1209.37854, 1561.45093,   0.00000, 0.00000, -89.46000);
		CreateDynamicObject(1712, 301.22672, 1212.11584, 1561.45093,   0.00000, 0.00000, -89.46000);
		CreateDynamicObject(1742, 292.81812, 1207.73535, 1561.44971,   0.00000, 0.00000, 90.00000);
		CreateDynamicObject(1742, 292.81812, 1209.17542, 1561.44971,   0.00000, 0.00000, 90.00000);
		CreateDynamicObject(1742, 292.81812, 1210.61536, 1561.44971,   0.00000, 0.00000, 90.00000);
		CreateDynamicObject(1742, 292.81812, 1212.05542, 1561.44971,   0.00000, 0.00000, 90.00000);
		CreateDynamicObject(1744, 299.76651, 1216.75073, 1563.01978,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1744, 297.86649, 1216.75073, 1563.01978,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(3017, 276.25070, 1235.52917, 1566.98315,   0.00000, 0.00000, -189.29990);
		CreateDynamicObject(3017, 300.29590, 1216.42957, 1563.34314,   0.00000, 0.00000, -189.29990);
		CreateDynamicObject(1714, 297.06262, 1215.40063, 1561.47827,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1811, 298.35638, 1212.27356, 1561.92834,   0.00000, 0.00000, -91.98000);
		CreateDynamicObject(1811, 297.05640, 1212.27356, 1561.92834,   0.00000, 0.00000, -91.98000);
		CreateDynamicObject(2240, 293.30957, 1216.21838, 1561.95667,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1722, 292.23550, 1201.57971, 1561.47754,   0.00000, 0.00000, -179.76010);
		CreateDynamicObject(1722, 293.43549, 1201.57971, 1561.47754,   0.00000, 0.00000, -179.76010);
		CreateDynamicObject(1722, 294.61551, 1201.57971, 1561.47754,   0.00000, 0.00000, -179.76010);
		CreateDynamicObject(1722, 295.85550, 1201.57971, 1561.47754,   0.00000, 0.00000, -179.76010);
		CreateDynamicObject(1722, 297.07550, 1201.57971, 1561.47754,   0.00000, 0.00000, -179.76010);
		CreateDynamicObject(1722, 298.27551, 1201.57971, 1561.47754,   0.00000, 0.00000, -179.76010);
		CreateDynamicObject(1722, 299.47549, 1201.57971, 1561.47754,   0.00000, 0.00000, -179.76010);
		CreateDynamicObject(1722, 300.63550, 1201.57971, 1561.47754,   0.00000, 0.00000, -179.76010);
		CreateDynamicObject(1722, 300.63550, 1200.13965, 1561.47754,   0.00000, 0.00000, -179.76010);
		CreateDynamicObject(1722, 299.47549, 1200.13965, 1561.47754,   0.00000, 0.00000, -179.76010);
		CreateDynamicObject(1722, 298.27551, 1200.13965, 1561.47754,   0.00000, 0.00000, -179.76010);
		CreateDynamicObject(1722, 297.07550, 1200.13965, 1561.47754,   0.00000, 0.00000, -179.76010);
		CreateDynamicObject(1722, 295.85550, 295.85550, 1561.47754,   0.00000, 0.00000, -179.76010);
		CreateDynamicObject(1722, 295.85550, 1200.13965, 1561.47754,   0.00000, 0.00000, -179.76010);
		CreateDynamicObject(1722, 294.61551, 1200.13965, 1561.47754,   0.00000, 0.00000, -179.76010);
		CreateDynamicObject(1722, 293.43549, 1200.13965, 1561.47754,   0.00000, 0.00000, -179.76010);
		CreateDynamicObject(1722, 292.23550, 1200.13965, 1561.47754,   0.00000, 0.00000, -179.76010);
		CreateDynamicObject(1722, 300.63550, 1198.77954, 1561.47754,   0.00000, 0.00000, -179.76010);
		CreateDynamicObject(1722, 299.47549, 1198.77954, 1561.47754,   0.00000, 0.00000, -179.76010);
		CreateDynamicObject(1722, 298.27551, 1198.77954, 1561.47754,   0.00000, 0.00000, -179.76010);
		CreateDynamicObject(1722, 297.07550, 1198.77954, 1561.47754,   0.00000, 0.00000, -179.76010);
		CreateDynamicObject(1722, 295.85550, 1198.77954, 1561.47754,   0.00000, 0.00000, -179.76010);
		CreateDynamicObject(1722, 294.61551, 1198.77954, 1561.47754,   0.00000, 0.00000, -179.76010);
		CreateDynamicObject(1722, 293.43549, 1198.77954, 1561.47754,   0.00000, 0.00000, -179.76010);
		CreateDynamicObject(1722, 292.23550, 1198.77954, 1561.47754,   0.00000, 0.00000, -179.76010);
		CreateDynamicObject(2737, 296.35699, 1194.51782, 1563.57678,   0.00000, 0.00000, 179.97960);
		CreateDynamicObject(2606, 315.51251, 1217.28259, 1561.17944,   0.00000, 0.00000, 90.00000);
		CreateDynamicObject(2606, 315.53510, 1219.25635, 1561.17944,   0.00000, 0.00000, 90.00000);
		CreateDynamicObject(2606, 315.53510, 1220.73633, 1561.17944,   0.00000, 0.00000, 90.00000);
		CreateDynamicObject(2569, 315.75369, 1215.91394, 1557.84180,   0.00000, 0.00000, 90.06000);
		CreateDynamicObject(2569, 315.75369, 1219.17395, 1557.84180,   0.00000, 0.00000, 90.06000);
		CreateDynamicObject(2604, 319.12411, 1219.79395, 1558.77136,   0.00000, 0.00000, -90.36000);
		CreateDynamicObject(2608, 319.40070, 1216.71765, 1558.67603,   0.00000, 0.00000, -89.94005);
		CreateDynamicObject(2608, 319.40070, 1214.85767, 1558.67603,   0.00000, 0.00000, -89.94000);
		CreateDynamicObject(2356, 317.26346, 1220.81323, 1557.99768,   0.00000, 0.00000, 87.83999);
		CreateDynamicObject(2356, 317.26349, 1217.37317, 1557.99768,   0.00000, 0.00000, 87.84000);
		CreateDynamicObject(2165, 318.85339, 1213.04785, 1557.98132,   0.00000, 0.00000, -180.42010);
		CreateDynamicObject(1649, 315.11511, 1217.19824, 1559.02173,   0.00000, 0.00000, -89.70000);
		CreateDynamicObject(1649, 315.11511, 1220.71826, 1559.02173,   0.00000, 0.00000, -89.70000);
		CreateDynamicObject(1649, 315.19559, 1217.22754, 1559.02173,   0.00000, 0.00000, -269.99991);
		CreateDynamicObject(1649, 315.19559, 1221.24756, 1559.02173,   0.00000, 0.00000, -269.99991);
		CreateDynamicObject(1649, 268.97281, 1231.17456, 1566.11499,   0.00000, -91.00000, 90.00000);
		CreateDynamicObject(1649, 268.97101, 1227.83020, 1566.11499,   0.00000, 0.00000, 89.99990);
		CreateDynamicObject(1649, 268.97281, 1234.25452, 1566.11499,   0.00000, -91.00000, 90.00000);
		CreateDynamicObject(1649, 268.88751, 1228.21375, 1566.11499,   0.00000, -91.00000, -90.00000);
		CreateDynamicObject(1649, 268.88751, 1231.15369, 1566.11499,   0.00000, -91.00000, -90.00000);
		CreateDynamicObject(1649, 268.88751, 1234.73364, 1566.11499,   0.00000, -91.00000, -90.00000);
		CreateDynamicObject(1800, 300.65900, 1213.46716, 1557.99695,   0.00000, 0.00000, -90.47999);
		CreateDynamicObject(2525, 302.12534, 1215.19958, 1557.99646,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2525, 302.12531, 1218.29956, 1557.99646,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2525, 302.12531, 1221.45959, 1557.99646,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1800, 300.65900, 1216.54724, 1557.99695,   0.00000, 0.00000, -90.48000);
		CreateDynamicObject(1800, 300.65900, 1219.76721, 1557.99695,   0.00000, 0.00000, -90.48000);
		CreateDynamicObject(2026, 282.89191, 1248.00903, 1568.33752,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2026, 296.22372, 1199.68774, 1564.91077,   0.00000, 0.00000, 177.00290);
		CreateDynamicObject(2284, 264.24820, 1224.02625, 1567.04504,   0.00000, 0.00000, 180.51785);
		CreateDynamicObject(2286, 258.66910, 1223.55103, 1567.34998,   0.00000, 0.00000, 179.89751);
		CreateDynamicObject(2289, 260.16791, 1235.66675, 1567.28882,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2266, 265.63901, 1235.20679, 1567.07373,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2634, 301.77090, 1215.44250, 1562.79956,   0.00000, 0.00000, 89.58000);
		CreateDynamicObject(1557, 288.72491, 1257.46863, 1564.98059,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19377, 314.61661, 1217.37952, 1557.91736,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19377, 304.11661, 1217.37952, 1557.91736,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19377, 306.87659, 1217.37952, 1561.37744,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19378, 309.31769, 1215.93396, 1557.91052,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19377, 317.37659, 1217.41956, 1561.37744,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19358, 292.44449, 1203.93250, 1563.16357,   0.00000, 0.00000, 90.00000);
		CreateDynamicObject(19388, 289.28290, 1203.93591, 1563.16357,   0.00000, 0.00000, 269.96561);
		CreateDynamicObject(19450, 282.90961, 1203.93591, 1563.16357,   0.00000, 0.00000, 269.96561);
		CreateDynamicObject(19378, 286.18161, 1198.60034, 1561.39050,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19450, 290.82870, 1199.09558, 1563.16357,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19450, 284.68707, 1193.23792, 1563.17249,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19378, 286.17499, 1195.26770, 1564.97046,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(1750, 290.25290, 1194.02234, 1562.67944,   0.00000, 0.00000, -179.75960);
		CreateDynamicObject(1750, 290.25290, 1194.02234, 1563.15942,   0.00000, 0.00000, -179.75960);
		CreateDynamicObject(1750, 290.25290, 1194.02234, 1563.63940,   0.00000, 0.00000, -179.75960);
		CreateDynamicObject(1750, 290.25290, 1194.02234, 1564.11938,   0.00000, 0.00000, -179.75960);
		CreateDynamicObject(1750, 289.57291, 1194.02234, 1562.67944,   0.00000, 0.00000, -179.75960);
		CreateDynamicObject(1750, 289.57291, 1194.02234, 1563.15942,   0.00000, 0.00000, -179.75960);
		CreateDynamicObject(1750, 289.57291, 1194.02234, 1563.63940,   0.00000, 0.00000, -179.75960);
		CreateDynamicObject(1750, 289.57291, 1194.02234, 1564.11938,   0.00000, 0.00000, -179.75960);
		CreateDynamicObject(1750, 288.89291, 1194.02234, 1562.67944,   0.00000, 0.00000, -179.75960);
		CreateDynamicObject(1750, 288.89291, 1194.02234, 1563.15942,   0.00000, 0.00000, -179.75960);
		CreateDynamicObject(1750, 288.89291, 1194.02234, 1563.63940,   0.00000, 0.00000, -179.75960);
		CreateDynamicObject(1750, 288.89291, 1194.02234, 1564.11938,   0.00000, 0.00000, -179.75960);
		CreateDynamicObject(1750, 288.21289, 1194.02234, 1562.67944,   0.00000, 0.00000, -179.75960);
		CreateDynamicObject(1750, 288.21289, 1194.02234, 1563.15942,   0.00000, 0.00000, -179.75960);
		CreateDynamicObject(1750, 288.21289, 1194.02234, 1563.63940,   0.00000, 0.00000, -179.75960);
		CreateDynamicObject(1750, 288.21289, 1194.02502, 1564.11938,   0.00000, 0.00000, -179.75960);
		CreateDynamicObject(1750, 287.53290, 1194.02234, 1562.67944,   0.00000, 0.00000, -179.75960);
		CreateDynamicObject(1750, 287.53290, 1194.02234, 1563.15942,   0.00000, 0.00000, -179.75960);
		CreateDynamicObject(1750, 287.53290, 1194.02209, 1563.63940,   0.00000, 0.00000, -179.75960);
		CreateDynamicObject(1750, 287.53290, 1194.02502, 1564.11938,   0.00000, 0.00000, -179.75960);
		CreateDynamicObject(1750, 286.85291, 1194.02234, 1562.67944,   0.00000, 0.00000, -179.75960);
		CreateDynamicObject(1750, 286.85291, 1194.02234, 1563.15942,   0.00000, 0.00000, -179.75960);
		CreateDynamicObject(1750, 286.85291, 1194.02209, 1563.63940,   0.00000, 0.00000, -179.75960);
		CreateDynamicObject(1750, 286.85291, 1194.02502, 1564.11938,   0.00000, 0.00000, -179.75960);
		CreateDynamicObject(1750, 286.17270, 1194.01978, 1562.67944,   0.00000, 0.00000, -179.75960);
		CreateDynamicObject(1750, 286.17270, 1194.02234, 1563.15942,   0.00000, 0.00000, -179.75960);
		CreateDynamicObject(1750, 286.17270, 1194.02209, 1563.63940,   0.00000, 0.00000, -179.75960);
		CreateDynamicObject(1750, 286.17270, 1194.02295, 1564.11938,   0.00000, 0.00000, -179.75960);
		CreateDynamicObject(1750, 285.49271, 1194.01978, 1562.67944,   0.00000, 0.00000, -179.75960);
		CreateDynamicObject(1750, 285.49271, 1194.02234, 1563.15942,   0.00000, 0.00000, -179.75960);
		CreateDynamicObject(1750, 285.49271, 1194.02209, 1563.63940,   0.00000, 0.00000, -179.75960);
		CreateDynamicObject(1750, 285.49271, 1194.02295, 1564.11938,   0.00000, 0.00000, -179.75960);
		CreateDynamicObject(1750, 284.85269, 1194.02295, 1564.11938,   0.00000, 0.00000, -179.75960);
		CreateDynamicObject(1750, 284.85269, 1194.02209, 1563.63940,   0.00000, 0.00000, -179.75960);
		CreateDynamicObject(1750, 284.85269, 1194.02234, 1563.15942,   0.00000, 0.00000, -179.75960);
		CreateDynamicObject(1750, 284.85269, 1194.01978, 1562.67944,   0.00000, 0.00000, -179.75960);
		CreateDynamicObject(2008, 288.07523, 1197.93799, 1561.43542,   0.00000, 0.00000, 180.53999);
		CreateDynamicObject(1806, 287.16800, 1199.37866, 1561.47827,   0.00000, 0.00000, -181.62010);
		CreateDynamicObject(2240, 285.12167, 1203.39929, 1561.95667,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2240, 290.38675, 1199.08777, 1561.95667,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2611, 290.34683, 1172.29663, 1600.28955,   0.00000, 0.00000, 71.16000);
		CreateDynamicObject(2611, 284.82794, 1201.45740, 1563.60193,   0.00000, 0.00000, 89.99995);
		CreateDynamicObject(1744, 284.58313, 1198.58972, 1563.01978,   0.00000, 0.00000, 90.24003);
		CreateDynamicObject(1744, 284.59424, 1196.70605, 1563.01978,   0.00000, 0.00000, 90.24003);
		CreateDynamicObject(2164, 290.69568, 1201.04578, 1561.43994,   0.00000, 0.00000, -88.62000);
		CreateDynamicObject(2164, 290.65479, 1202.80164, 1561.43994,   0.00000, 0.00000, -88.62000);
		CreateDynamicObject(2069, 326.77155, 1206.26343, 1696.23608,   -180.00000, 0.00000, -6.00000);
	}
	else if (map == INT_LSMD)
	{
		CreateDynamicObject(19445, 2023.19604, 2921.09131, 1105.48889,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19445, 2032.77551, 2921.07471, 1105.48889,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19445, 2018.42944, 2916.36157, 1105.48889,   0.00000, 0.00000, -179.99960);
		CreateDynamicObject(19445, 2037.51050, 2916.34692, 1105.48889,   0.00000, 0.00000, -179.99960);
		CreateDynamicObject(19445, 2037.51050, 2906.79419, 1105.48889,   0.00000, 0.00000, -179.99960);
		CreateDynamicObject(19445, 2018.44946, 2906.75342, 1105.48889,   0.00000, 0.00000, -179.99960);
		CreateDynamicObject(19399, 2026.27112, 2910.60352, 1105.48889,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19399, 2026.27136, 2907.43433, 1105.48889,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19399, 2026.27136, 2904.22876, 1105.48889,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19445, 2013.69165, 2916.26465, 1105.48889,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19383, 2024.74133, 2902.69336, 1105.48889,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(1714, 2024.01074, 2910.26807, 1103.74390,   0.00000, 0.00000, 86.69998);
		CreateDynamicObject(2161, 2018.58801, 2909.73853, 1105.08313,   0.00000, 0.00000, 90.96010);
		CreateDynamicObject(2162, 2018.52307, 2906.43604, 1103.70410,   0.00000, 0.00000, 90.23999);
		CreateDynamicObject(2162, 2018.52576, 2904.63330, 1103.70410,   0.00000, 0.00000, 90.54000);
		CreateDynamicObject(19379, 2023.49280, 2916.26929, 1103.66345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 2033.98804, 2916.26929, 1103.66345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 2033.98804, 2906.64941, 1103.66345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 2023.48804, 2906.64941, 1103.66345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(1721, 2037.30994, 2917.13403, 1103.74841,   -0.02000, 0.00000, 89.82000);
		CreateDynamicObject(1721, 2037.30994, 2916.31396, 1103.74841,   -0.02000, 0.00000, 89.82000);
		CreateDynamicObject(1721, 2037.30994, 2915.49390, 1103.74841,   -0.02000, 0.00000, 89.82000);
		CreateDynamicObject(1721, 2037.30994, 2914.65405, 1103.74841,   -0.02000, 0.00000, 89.82000);
		CreateDynamicObject(1721, 2037.30994, 2913.85400, 1103.74841,   -0.02000, 0.00000, 89.82000);
		CreateDynamicObject(1721, 2037.30994, 2912.97412, 1103.74841,   -0.02000, 0.00000, 89.82000);
		CreateDynamicObject(1721, 2037.30994, 2912.07397, 1103.74841,   -0.02000, 0.00000, 89.82000);
		CreateDynamicObject(1721, 2037.30994, 2911.15405, 1103.74841,   -0.02000, 0.00000, 89.82000);
		CreateDynamicObject(1721, 2037.30994, 2910.29395, 1103.74841,   -0.02000, 0.00000, 89.82000);
		CreateDynamicObject(1721, 2037.30994, 2909.39404, 1103.74841,   -0.02000, 0.00000, 89.82000);
		CreateDynamicObject(1721, 2037.30994, 2908.53394, 1103.74841,   -0.02000, 0.00000, 89.82000);
		CreateDynamicObject(1721, 2037.30994, 2907.61401, 1103.74841,   -0.02000, 0.00000, 89.82000);
		CreateDynamicObject(1721, 2037.30994, 2906.71411, 1103.74841,   -0.02000, 0.00000, 89.82000);
		CreateDynamicObject(1721, 2037.30994, 2905.83398, 1103.74841,   -0.02000, 0.00000, 89.82000);
		CreateDynamicObject(1721, 2037.30994, 2904.91406, 1103.74841,   -0.02000, 0.00000, 89.82000);
		CreateDynamicObject(19379, 2033.98804, 2897.02930, 1103.66345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 2023.48816, 2897.02930, 1103.66345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19445, 2018.44666, 2897.12500, 1105.48889,   0.00000, 0.00000, -179.99960);
		CreateDynamicObject(19445, 2037.51050, 2897.16431, 1105.48889,   0.00000, 0.00000, -179.99960);
		CreateDynamicObject(19445, 2029.47119, 2896.31323, 1105.48889,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19383, 2035.86084, 2896.31323, 1105.48889,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(19445, 2019.85205, 2896.31323, 1105.48889,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(948, 2018.87158, 2912.47534, 1103.75000,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2240, 2018.98328, 2902.14014, 1104.22498,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19379, 2033.98804, 2887.40918, 1103.66345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 2033.98804, 2877.78931, 1103.66345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19383, 2037.51282, 2890.75146, 1105.48889,   0.00000, 0.00000, 0.06000);
		CreateDynamicObject(19353, 2037.51257, 2887.56372, 1105.48889,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19379, 2044.48804, 2897.02930, 1103.66345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 2044.48804, 2887.40918, 1103.66345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19445, 2042.29077, 2895.41602, 1105.48889,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19445, 2042.25513, 2886.04590, 1105.48889,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19445, 2046.51367, 2890.86353, 1105.48889,   0.00000, 0.00000, -179.99960);
		CreateDynamicObject(19445, 2049.82227, 2900.37891, 1105.48889,   0.00000, 0.00000, -179.99960);
		CreateDynamicObject(19445, 2051.85303, 2892.75073, 1105.48889,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19445, 2051.87036, 2886.04590, 1105.48889,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19353, 2037.51257, 2884.35791, 1105.48889,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19383, 2037.51379, 2881.15552, 1105.48889,   0.00000, 0.00000, 0.06000);
		CreateDynamicObject(19379, 2044.48804, 2877.78931, 1103.66345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19445, 2037.51379, 2874.74341, 1105.48889,   0.00000, 0.00000, -179.99960);
		CreateDynamicObject(19445, 2042.27515, 2877.62305, 1105.48889,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19445, 2051.73901, 2877.62939, 1105.48889,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19445, 2046.77148, 2881.24414, 1105.48889,   0.00000, 0.00000, -179.99960);
		CreateDynamicObject(19445, 2049.80811, 2871.53955, 1105.48889,   0.00000, 0.00000, -179.99960);
		CreateDynamicObject(19379, 2033.98804, 2868.16919, 1103.66345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19445, 2037.51379, 2865.12549, 1105.48889,   0.00000, 0.00000, -179.99960);
		CreateDynamicObject(19379, 2023.48816, 2868.18921, 1103.66345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19445, 2032.55200, 2891.46826, 1105.48889,   0.00000, 0.00000, -179.99960);
		CreateDynamicObject(19445, 2032.54492, 2872.39429, 1105.48889,   0.00000, 0.00000, -179.99960);
		CreateDynamicObject(19445, 2027.81995, 2867.46826, 1105.48889,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19379, 2033.98474, 2858.54810, 1103.66345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19383, 2034.21863, 2864.46924, 1105.48889,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(19445, 2027.80188, 2864.46924, 1105.48889,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19445, 2040.62561, 2864.46924, 1105.48889,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19445, 2037.51379, 2855.48853, 1105.48889,   0.00000, 0.00000, -179.99960);
		CreateDynamicObject(19445, 2028.65100, 2859.72266, 1105.48889,   0.00000, 0.00000, -179.99960);
		CreateDynamicObject(19445, 2028.66089, 2850.14600, 1105.48889,   0.00000, 0.00000, -179.99960);
		CreateDynamicObject(19379, 2033.58215, 2848.92163, 1103.66345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19445, 2033.39038, 2853.87231, 1105.48889,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19383, 2021.38965, 2864.46924, 1105.48889,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(19383, 2021.40955, 2867.48828, 1105.48889,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(19379, 2023.48816, 2877.80908, 1103.66345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 2023.48816, 2858.56909, 1103.66345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19445, 2023.82910, 2855.39673, 1105.48889,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19445, 2028.65100, 2872.30273, 1105.48889,   0.00000, 0.00000, -179.99960);
		CreateDynamicObject(19445, 2019.00000, 8666.00000, 2873.00000,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19445, 2019.00000, 8666.00000, 2859.00000,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19445, 2028.00000, 4910.00000, 2859.00000,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19445, 2019.86499, 2859.72168, 1105.48889,   0.00000, 0.00000, -179.99960);
		CreateDynamicObject(19445, 2019.86499, 2872.22168, 1105.48889,   0.00000, 0.00000, -179.99960);
		CreateDynamicObject(19445, 2023.86743, 2877.12646, 1105.48889,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19353, 2018.24390, 2867.48511, 1105.48889,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19379, 2012.98816, 2868.18921, 1103.66345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 2012.98816, 2858.56909, 1103.66345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 2012.98816, 2877.80908, 1103.66345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19353, 2018.20081, 2864.46826, 1105.48889,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19383, 2014.99866, 2864.46265, 1105.48889,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(19353, 2011.79895, 2864.46313, 1105.48889,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19445, 2010.27649, 2859.73315, 1105.48889,   0.00000, 0.00000, -179.99960);
		CreateDynamicObject(19445, 2013.49915, 2872.20923, 1105.48889,   0.00000, 0.00000, -179.99960);
		CreateDynamicObject(14407, 2007.94775, 2866.38892, 1104.06116,   0.00000, 0.00000, -90.00010);
		CreateDynamicObject(19445, 2008.62817, 2867.48560, 1105.48889,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19445, 2005.47437, 2864.47681, 1105.48889,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19379, 2015.00513, 2865.12476, 1107.16345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 2015.00513, 2855.50488, 1107.16345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 2025.50513, 2865.12476, 1107.16345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 2036.00513, 2865.12476, 1107.16345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 2036.00513, 2874.74487, 1107.16345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 2036.00513, 2884.36816, 1107.16345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 2036.00513, 2893.98828, 1107.16345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 2046.50513, 2893.98828, 1107.16345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 2046.50513, 2884.36816, 1107.16345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 2046.50513, 2874.74487, 1107.16345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 2036.01099, 2903.60767, 1107.16345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 2025.51099, 2903.60767, 1107.16345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 2025.51514, 2893.98828, 1107.16345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 2036.00049, 2913.24072, 1107.16345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 2025.50574, 2913.23145, 1107.16345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 2035.98340, 2922.86572, 1107.16345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 2025.48462, 2922.86108, 1107.16345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 2014.98755, 2922.86133, 1107.16345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 2015.00745, 2913.23145, 1107.16345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 2015.00745, 2903.61670, 1107.16345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 2015.02734, 2893.98828, 1107.16345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 2000.86829, 2856.17065, 1107.16345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 2000.82507, 2875.38477, 1107.16345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19445, 2008.62817, 2867.48560, 1108.98901,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19445, 2008.62817, 2864.47754, 1108.98901,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19379, 2000.88513, 2865.78491, 1107.16345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 1990.38501, 2865.78491, 1107.16345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 1990.38501, 2856.16479, 1107.16345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 1990.32568, 2875.38892, 1107.16345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19445, 2003.89087, 2872.20581, 1108.98901,   0.00000, 0.00000, 0.06000);
		CreateDynamicObject(19379, 2000.81689, 2885.00244, 1107.16345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 1990.32068, 2885.00659, 1107.16345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19445, 2003.87683, 2881.82080, 1108.98901,   0.00000, 0.00000, 0.06000);
		CreateDynamicObject(19445, 2003.88843, 2859.76514, 1108.98901,   0.00000, 0.00000, 0.06000);
		CreateDynamicObject(19379, 2000.87891, 2846.54688, 1107.16345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 1990.42065, 2846.54077, 1107.16345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19445, 2003.89465, 2850.17578, 1108.98901,   0.00000, 0.00000, 0.06000);
		CreateDynamicObject(19353, 1995.49561, 2871.62524, 1108.99023,   0.00000, 0.00000, 0.06000);
		CreateDynamicObject(19353, 1995.49915, 2874.76563, 1108.99023,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19383, 1995.50745, 2868.42529, 1108.99023,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19383, 1995.51489, 2858.92480, 1108.99023,   0.00000, 0.00000, 0.06000);
		CreateDynamicObject(19353, 1995.52112, 2862.04297, 1108.99023,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19383, 1995.49915, 2877.97021, 1108.99023,   0.00000, 0.00000, 0.06000);
		CreateDynamicObject(19353, 1995.51636, 2855.73340, 1108.99023,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19353, 1997.18616, 2879.56714, 1108.99023,   0.00000, 0.00000, -89.99999);
		CreateDynamicObject(19383, 2000.32361, 2879.58862, 1108.99023,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(19353, 2003.50623, 2879.57202, 1108.99023,   0.00000, 0.00000, -89.99999);
		CreateDynamicObject(19445, 1996.10583, 2884.39502, 1108.98901,   0.00000, 0.00000, 0.06000);
		CreateDynamicObject(19445, 2000.12329, 2889.15771, 1108.98901,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19445, 1990.71741, 2879.57861, 1108.98901,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19353, 1995.51392, 2865.23828, 1108.99023,   0.00000, 0.00000, 0.06000);
		CreateDynamicObject(19353, 1995.51257, 2852.52734, 1108.99023,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19445, 2003.89600, 2891.41919, 1108.98901,   0.00000, 0.00000, 0.06000);
		CreateDynamicObject(19445, 1990.75293, 2869.98340, 1108.98901,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19445, 1990.58569, 2860.44482, 1108.98901,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19353, 1997.11401, 2850.93945, 1108.99023,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19383, 2000.31555, 2850.93945, 1108.99023,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19353, 2003.51746, 2850.93945, 1108.99023,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19445, 1990.76917, 2851.02710, 1108.98901,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19445, 2003.92456, 2840.70605, 1108.98901,   0.00000, 0.00000, 0.06000);
		CreateDynamicObject(19445, 1995.51270, 2846.14868, 1108.98901,   0.00000, 0.00000, 0.06000);
		CreateDynamicObject(19445, 2000.28967, 2841.79150, 1108.98901,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19445, 1986.17334, 2855.67822, 1108.98901,   0.00000, 0.00000, 0.06000);
		CreateDynamicObject(19445, 1986.16028, 2865.34277, 1108.98901,   0.00000, 0.00000, 0.06000);
		CreateDynamicObject(19445, 1986.16028, 2874.96289, 1108.98901,   0.00000, 0.00000, 0.06000);
		CreateDynamicObject(19379, 2000.81689, 2885.00244, 1110.72351,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 2000.82507, 2875.38477, 1110.72351,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 2000.88513, 2865.78491, 1110.72351,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 2000.86829, 2856.17065, 1110.72351,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 2000.87891, 2846.54688, 1110.72351,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 1990.38501, 2856.16479, 1110.72351,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 1990.40076, 2846.54077, 1110.72351,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 1990.38501, 2865.78491, 1110.72351,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 1990.32568, 2875.38892, 1110.72351,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 2011.36511, 2865.78491, 1110.72351,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19445, 2009.84680, 2862.56787, 1108.98901,   0.00000, 0.00000, 0.12000);
		CreateDynamicObject(1846, 2027.22607, 2907.27368, 1105.53479,   -90.00000, -90.00000, 0.00000);
		CreateDynamicObject(1846, 2027.25586, 2904.24854, 1105.53479,   -90.00000, -90.00000, 0.00000);
		CreateDynamicObject(1846, 2027.23804, 2910.49878, 1105.53479,   -90.00000, -90.00000, 0.00000);
		CreateDynamicObject(2240, 2037.07349, 2896.69604, 1104.24500,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1557, 2029.66528, 2921.02466, 1103.75452,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1557, 2032.66943, 2921.02466, 1103.75452,   0.00000, 0.00000, -180.36000);
		CreateDynamicObject(19445, 2014.24194, 2855.35840, 1105.48889,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19379, 2036.00513, 2855.50488, 1107.16345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 2025.50513, 2855.50488, 1107.16345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(1502, 2023.99463, 2902.65234, 1103.75476,   0.00000, 0.00000, 0.42000);
		CreateDynamicObject(1742, 2036.96216, 2853.81641, 1103.72095,   0.00000, 0.00000, -180.48010);
		CreateDynamicObject(2199, 2034.10278, 2853.99561, 1103.70740,   0.00000, 0.00000, -180.47990);
		CreateDynamicObject(2199, 2032.73914, 2853.99756, 1103.70740,   0.00000, 0.00000, -180.47990);
		CreateDynamicObject(2161, 2029.73572, 2853.94434, 1103.71448,   0.00000, 0.00000, -180.00011);
		CreateDynamicObject(2281, 2029.22852, 2856.64771, 1105.88391,   0.00000, 0.00000, 89.94000);
		CreateDynamicObject(2276, 2029.23096, 2861.84668, 1105.91052,   0.00000, 0.00000, 89.58000);
		CreateDynamicObject(2008, 2033.47473, 2858.43555, 1103.71021,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1714, 2034.41492, 2857.10864, 1103.75171,   0.00000, 0.00000, -177.29993);
		CreateDynamicObject(1811, 2033.21851, 2860.31396, 1104.29126,   0.00000, 0.00000, 89.16001);
		CreateDynamicObject(1811, 2034.80859, 2860.29272, 1104.29126,   0.00000, 0.00000, 89.16000);
		CreateDynamicObject(1728, 2036.93860, 2859.46118, 1103.75098,   0.00000, 0.00000, -90.17996);
		CreateDynamicObject(1728, 2036.94104, 2862.37915, 1103.75098,   0.00000, 0.00000, -90.17996);
		CreateDynamicObject(2108, 2032.35803, 2858.44849, 1103.72986,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1734, 2033.97534, 2858.22485, 1107.09131,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1999, 2042.82141, 2878.47900, 1103.75122,   0.00000, 0.00000, -269.10001);
		CreateDynamicObject(1806, 2044.35803, 2879.41797, 1103.69519,   0.00000, 0.00000, -270.35999);
		CreateDynamicObject(2162, 2046.70569, 2884.92969, 1103.72717,   0.00000, 0.00000, -89.93996);
		CreateDynamicObject(1523, 2020.65186, 2867.46045, 1103.72607,   0.00000, 0.00000, -0.12000);
		CreateDynamicObject(1523, 2020.64832, 2864.45020, 1103.72607,   0.00000, 0.00000, -0.12000);
		CreateDynamicObject(1502, 2014.23755, 2864.44653, 1103.72607,   0.00000, 0.00000, -0.12000);
		CreateDynamicObject(19445, 2017.73962, 2872.30151, 1105.48889,   0.00000, 0.00000, -179.99960);
		CreateDynamicObject(1811, 2041.07556, 2880.00854, 1104.33154,   0.00000, 0.00000, -205.31964);
		CreateDynamicObject(2239, 2042.89246, 2881.01392, 1103.73145,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2161, 2021.00000, 2041.00000, 2855.00000,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2161, 2022.00000, 4669.00000, 2855.00000,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1737, 2012.65393, 2860.10278, 1103.74939,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1737, 2016.29395, 2860.10278, 1103.74939,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1737, 2014.45386, 2860.10278, 1103.74939,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1811, 2012.87671, 2861.84351, 1104.35120,   0.00000, 0.00000, 89.70000);
		CreateDynamicObject(1811, 2013.91675, 2861.84351, 1104.35120,   0.00000, 0.00000, 89.70000);
		CreateDynamicObject(1811, 2014.93689, 2861.84351, 1104.35120,   0.00000, 0.00000, 89.70000);
		CreateDynamicObject(1811, 2015.85669, 2861.84351, 1104.35120,   0.00000, 0.00000, 89.70000);
		CreateDynamicObject(1811, 2016.89673, 2861.84351, 1104.35120,   0.00000, 0.00000, 89.70000);
		CreateDynamicObject(1811, 2012.94910, 2858.35132, 1104.35120,   0.00000, 0.00000, -90.66000);
		CreateDynamicObject(1811, 2013.96912, 2858.35132, 1104.35120,   0.00000, 0.00000, -90.66000);
		CreateDynamicObject(1811, 2014.96912, 2858.35132, 1104.35120,   0.00000, 0.00000, -90.66000);
		CreateDynamicObject(1811, 2015.90906, 2858.35132, 1104.35120,   0.00000, 0.00000, -90.66000);
		CreateDynamicObject(1811, 2016.94910, 2858.35132, 1104.35120,   0.00000, 0.00000, -90.66000);
		CreateDynamicObject(1714, 2018.91040, 2860.23315, 1103.75134,   0.00000, 0.00000, -92.88000);
		CreateDynamicObject(1714, 2011.07422, 2860.22607, 1103.75134,   0.00000, 0.00000, -268.74011);
		CreateDynamicObject(19353, 1989.32947, 2868.27075, 1108.99023,   0.00000, 0.00000, 0.06000);
		CreateDynamicObject(19383, 1987.82349, 2866.69287, 1108.99023,   0.00000, 0.00000, -88.56000);
		CreateDynamicObject(19353, 1989.31763, 2877.86377, 1108.99023,   0.00000, 0.00000, 0.06000);
		CreateDynamicObject(19383, 1987.80603, 2876.30249, 1108.99023,   0.00000, 0.00000, -88.56000);
		CreateDynamicObject(19353, 1989.37122, 2858.92749, 1108.99023,   0.00000, 0.00000, 0.06000);
		CreateDynamicObject(19383, 1987.83911, 2857.39355, 1108.99023,   0.00000, 0.00000, -88.56000);
		CreateDynamicObject(19353, 1998.64185, 2843.43311, 1108.99023,   0.00000, 0.00000, 0.06000);
		CreateDynamicObject(19383, 1997.10107, 2844.92285, 1108.99023,   0.00000, 0.00000, -88.56000);
		CreateDynamicObject(19383, 2002.31006, 2885.82983, 1108.98901,   0.00000, 0.00000, -88.56000);
		CreateDynamicObject(19445, 2000.76917, 2890.52368, 1108.98901,   0.00000, 0.00000, 0.06000);
		CreateDynamicObject(2603, 1987.38574, 2861.10620, 1107.68994,   0.00000, 0.00000, 90.00010);
		CreateDynamicObject(2700, 1995.15942, 2863.48999, 1109.95764,   0.00000, 0.00000, -179.88000);
		CreateDynamicObject(2603, 1987.44690, 2851.75903, 1107.60986,   0.00000, 0.00000, 90.00010);
		CreateDynamicObject(2700, 1995.08643, 2853.44824, 1109.95764,   0.00000, 0.00000, -179.88000);
		CreateDynamicObject(2603, 2003.27991, 2843.04248, 1107.68994,   0.00000, 0.00000, 179.82001);
		CreateDynamicObject(2700, 2002.60522, 2850.57446, 1109.95764,   0.00000, 0.00000, -89.93996);
		CreateDynamicObject(2603, 1996.76282, 2887.93677, 1107.68994,   0.00000, 0.00000, -0.12000);
		CreateDynamicObject(2603, 1987.44348, 2870.64917, 1107.68994,   0.00000, 0.00000, 90.06010);
		CreateDynamicObject(2700, 1995.14722, 2871.09277, 1109.95764,   0.00000, 0.00000, -179.88000);
		CreateDynamicObject(2700, 1997.57300, 2879.92163, 1109.95764,   0.00000, 0.00000, -272.28027);
		CreateDynamicObject(1502, 2001.54236, 2885.78564, 1107.21619,   0.00000, 0.00000, 1.14000);
		CreateDynamicObject(1523, 1999.57385, 2879.55005, 1107.21619,   0.00000, 0.00000, 0.42000);
		CreateDynamicObject(1502, 1987.04858, 2876.32959, 1107.21619,   0.00000, 0.00000, 0.42000);
		CreateDynamicObject(1502, 1987.07544, 2866.67847, 1107.21619,   0.00000, 0.00000, 0.42000);
		CreateDynamicObject(1502, 1987.08191, 2857.39282, 1107.21619,   0.00000, 0.00000, 0.42000);
		CreateDynamicObject(1523, 1999.55933, 2850.87891, 1107.21619,   0.00000, 0.00000, 0.42000);
		CreateDynamicObject(1523, 1995.45813, 2859.73438, 1107.21619,   0.00000, 0.00000, -89.82000);
		CreateDynamicObject(1523, 1995.47546, 2869.22144, 1107.21619,   0.00000, 0.00000, -89.82000);
		CreateDynamicObject(1523, 1995.45215, 2878.76270, 1107.21619,   0.00000, 0.00000, -89.82000);
		CreateDynamicObject(948, 1995.96484, 2851.27856, 1107.23889,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(948, 2003.45068, 2879.09888, 1107.23889,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(948, 2003.48206, 2851.27490, 1107.23889,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2518, 1987.24097, 2859.84692, 1107.40186,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2514, 1988.80518, 2859.10522, 1107.22034,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(2514, 1988.75525, 2868.51050, 1107.22034,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(2518, 1987.23633, 2869.39258, 1107.40186,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2518, 1987.31555, 2878.98999, 1107.40186,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2514, 1988.70740, 2877.63916, 1107.22034,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(2518, 2001.92920, 2888.52881, 1107.44604,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2514, 2003.39685, 2887.19214, 1107.22034,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(2514, 1998.06665, 2842.84180, 1107.22034,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(2518, 1997.32593, 2842.37622, 1107.26599,   0.00000, 0.00000, -180.59970);
		CreateDynamicObject(1502, 1996.35547, 2844.88892, 1107.21619,   0.00000, 0.00000, 0.42000);
		CreateDynamicObject(2276, 2013.05383, 2855.94971, 1105.81128,   0.00000, 0.00000, 180.15634);
		CreateDynamicObject(2277, 2015.30908, 2856.00464, 1105.81555,   0.00000, 0.00000, 178.47951);
		CreateDynamicObject(2279, 2017.37048, 2855.93115, 1105.97998,   0.00000, 0.00000, -180.60069);
		CreateDynamicObject(2894, 2017.42041, 2860.14819, 1104.54382,   0.00000, 0.00000, 89.52000);
		CreateDynamicObject(2894, 2012.51514, 2860.07324, 1104.54382,   0.00000, 0.00000, 89.52000);
		CreateDynamicObject(2007, 2029.15759, 2862.96338, 1103.66626,   0.00000, 0.00000, -270.06000);
		CreateDynamicObject(2007, 2029.15759, 2862.00342, 1103.66626,   0.00000, 0.00000, -270.06000);
		CreateDynamicObject(2007, 2029.15759, 2861.04321, 1103.66626,   0.00000, 0.00000, -270.06000);
		CreateDynamicObject(2007, 2029.15759, 2860.08325, 1103.66626,   0.00000, 0.00000, -270.06000);
		CreateDynamicObject(2240, 2018.91223, 2903.20020, 1104.22498,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1721, 2018.62207, 2915.55347, 1103.74841,   -0.02000, 0.00000, -90.06010);
		CreateDynamicObject(1721, 2018.62207, 2916.31348, 1103.74841,   -0.02000, 0.00000, -90.06010);
		CreateDynamicObject(1721, 2018.62207, 2917.09351, 1103.74841,   -0.02000, 0.00000, -90.06010);
		CreateDynamicObject(1721, 2018.62207, 2917.87354, 1103.74841,   -0.02000, 0.00000, -90.06010);
		CreateDynamicObject(1721, 2018.62207, 2918.65356, 1103.74841,   -0.02000, 0.00000, -90.06010);
		CreateDynamicObject(1721, 2018.62207, 2919.47339, 1103.74841,   -0.02000, 0.00000, -90.06010);
		CreateDynamicObject(1721, 2018.62207, 2914.75342, 1103.74841,   -0.02000, 0.00000, -90.06010);
		CreateDynamicObject(1721, 2018.62207, 2913.87354, 1103.74841,   -0.02000, 0.00000, -90.06010);
		CreateDynamicObject(1721, 2037.30994, 2904.09399, 1103.74841,   -0.02000, 0.00000, 89.82000);
		CreateDynamicObject(1721, 2037.30994, 2903.21411, 1103.74841,   -0.02000, 0.00000, 89.82000);
		CreateDynamicObject(1721, 2037.30994, 2902.35425, 1103.74841,   -0.02000, 0.00000, 89.82000);
		CreateDynamicObject(1721, 2037.30994, 2901.51416, 1103.74841,   -0.02000, 0.00000, 89.82000);
		CreateDynamicObject(1721, 2037.30994, 2900.65430, 1103.74841,   -0.02000, 0.00000, 89.82000);
		CreateDynamicObject(1721, 2037.30994, 2899.79419, 1103.74841,   -0.02000, 0.00000, 89.82000);
		CreateDynamicObject(1721, 2037.30994, 2898.91431, 1103.74841,   -0.02000, 0.00000, 89.82000);
		CreateDynamicObject(1721, 2037.30994, 2898.07422, 1103.74841,   -0.02000, 0.00000, 89.82000);
		CreateDynamicObject(1417, 1990.37793, 2869.63110, 1107.46655,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1417, 1990.37793, 2869.63110, 1108.70654,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1417, 1991.39795, 2869.63110, 1107.46655,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1417, 1991.39795, 2869.63110, 1108.70654,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1417, 1990.29102, 2879.18970, 1107.46655,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1417, 1990.29102, 2879.18970, 1108.72656,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1417, 1991.29102, 2879.18970, 1107.46655,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1417, 1991.29102, 2879.18970, 1108.72656,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2603, 1987.44348, 2873.22925, 1107.68994,   0.00000, 0.00000, 90.06010);
		CreateDynamicObject(1417, 2003.50513, 2881.21631, 1107.46655,   0.00000, 0.00000, -88.91994);
		CreateDynamicObject(1417, 2003.46399, 2882.22095, 1107.46655,   0.00000, 0.00000, -88.91994);
		CreateDynamicObject(1417, 2003.46399, 2882.22095, 1108.70654,   0.00000, 0.00000, -88.91990);
		CreateDynamicObject(1417, 2003.50513, 2881.21631, 1108.70654,   0.00000, 0.00000, -88.91990);
		CreateDynamicObject(1417, 1993.33704, 2860.04956, 1107.46655,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1417, 1992.35706, 2860.04956, 1107.46655,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1417, 1992.35706, 2860.04956, 1108.74658,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1417, 1993.33704, 2860.04956, 1108.74658,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2603, 1987.44690, 2854.09912, 1107.60986,   0.00000, 0.00000, 90.00010);
		CreateDynamicObject(2603, 2000.51978, 2843.04248, 1107.68994,   0.00000, 0.00000, 179.82001);
		CreateDynamicObject(2603, 1987.38574, 2863.46631, 1107.68994,   0.00000, 0.00000, 90.00010);
		CreateDynamicObject(2603, 1998.92285, 2887.93677, 1107.68994,   0.00000, 0.00000, -0.12000);
		CreateDynamicObject(1417, 1995.85461, 2847.41626, 1107.46655,   0.00000, 0.00000, 89.76001);
		CreateDynamicObject(1417, 1995.85461, 2848.41626, 1107.46655,   0.00000, 0.00000, 89.76000);
		CreateDynamicObject(1417, 1995.85461, 2848.41626, 1108.70654,   0.00000, 0.00000, 89.76000);
		CreateDynamicObject(1417, 1995.87500, 2847.41724, 1108.70654,   0.00000, 0.00000, 89.76000);
		CreateDynamicObject(2280, 2019.01074, 2919.20093, 1105.87769,   0.00000, 0.00000, 89.70010);
		CreateDynamicObject(2283, 2018.53333, 2913.86499, 1106.07947,   0.00000, 0.00000, 90.06005);
		CreateDynamicObject(1721, 2018.70508, 2901.34399, 1103.74841,   -0.02000, 0.00000, -90.06010);
		CreateDynamicObject(1721, 2018.70508, 2900.32397, 1103.74841,   -0.02000, 0.00000, -90.06010);
		CreateDynamicObject(1721, 2018.70508, 2899.26392, 1103.74841,   -0.02000, 0.00000, -90.06010);
		CreateDynamicObject(1721, 2018.70508, 2898.28394, 1103.74841,   -0.02000, 0.00000, -90.06010);
		CreateDynamicObject(1721, 2018.70508, 2897.32397, 1103.74841,   -0.02000, 0.00000, -90.06010);
		CreateDynamicObject(2289, 2018.57532, 2897.09692, 1106.23450,   0.00000, 0.00000, 89.87990);
		CreateDynamicObject(2288, 2019.02625, 2900.71509, 1105.83655,   0.00000, 0.00000, 89.76000);
		CreateDynamicObject(2286, 2037.39453, 2917.43359, 1106.29443,   0.00000, 0.00000, -90.18001);
		CreateDynamicObject(2287, 2036.94739, 2911.99658, 1106.01294,   0.00000, 0.00000, -88.19990);
		CreateDynamicObject(2269, 2036.93152, 2905.84399, 1105.95044,   0.00000, 0.00000, -89.46000);
		CreateDynamicObject(948, 2032.95752, 2895.74463, 1103.75000,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(948, 2032.87769, 2867.69116, 1103.75000,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19445, 2016.72266, 2872.23267, 1105.48889,   0.00000, 0.00000, -179.99960);
		CreateDynamicObject(19445, 2013.48218, 2881.74365, 1105.48889,   0.00000, 0.00000, -179.99960);
		CreateDynamicObject(19445, 2016.72693, 2881.83252, 1105.48889,   0.00000, 0.00000, -179.99960);
		CreateDynamicObject(14407, 2015.22742, 2884.81616, 1100.55188,   0.00000, 0.00000, -0.30010);
		CreateDynamicObject(19445, 2013.49646, 2891.20728, 1105.48889,   0.00000, 0.00000, -179.99960);
		CreateDynamicObject(19445, 2016.73193, 2891.33521, 1105.48889,   0.00000, 0.00000, -179.99960);
		CreateDynamicObject(19379, 2012.43201, 2892.12988, 1100.40344,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19445, 2016.71826, 2882.31421, 1101.98889,   0.00000, 0.00000, -179.99960);
		CreateDynamicObject(19445, 2016.71948, 2891.95190, 1101.98889,   0.00000, 0.00000, -179.99960);
		CreateDynamicObject(19445, 2013.44666, 2892.82617, 1101.98889,   0.00000, 0.00000, -179.99960);
		CreateDynamicObject(19445, 2013.45618, 2883.19531, 1101.98889,   0.00000, 0.00000, -179.99960);
		CreateDynamicObject(19379, 2014.58606, 2889.17505, 1109.04346,   0.00000, 0.00000, -90.52000);
		CreateDynamicObject(19379, 2011.77417, 2893.92407, 1103.80334,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 2012.41980, 2901.75220, 1100.40344,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 2015.00513, 2884.36499, 1107.16345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19383, 2015.03784, 2896.86475, 1101.98889,   0.00000, 0.00000, 90.00000);
		CreateDynamicObject(19445, 2013.43811, 2902.45532, 1101.98889,   0.00000, 0.00000, -179.99960);
		CreateDynamicObject(19379, 2001.91980, 289.97220, 1100.40344,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 2022.92139, 2901.75708, 1100.40344,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19445, 2021.44470, 2896.86206, 1101.98889,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(948, 2013.92847, 2893.07910, 1100.45288,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(3387, 2027.48462, 2906.12402, 1100.49146,   0.00000, 0.00000, 89.82000);
		CreateDynamicObject(3384, 2023.57092, 2905.82300, 1103.06763,   -90.00000, 0.00000, 90.00000);
		CreateDynamicObject(941, 2017.04529, 2900.14331, 1100.92957,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2060, 2017.08350, 2900.30127, 1101.52173,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2709, 2020.03503, 2900.31030, 1101.52368,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2709, 2024.32935, 2902.62256, 1101.52368,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19383, 2015.05139, 2869.73901, 1105.48889,   0.00000, 0.00000, -89.88000);
		CreateDynamicObject(1523, 2014.26147, 2896.85596, 1100.22266,   0.00000, 0.00000, -0.12000);
		CreateDynamicObject(19383, 2003.89624, 2866.00586, 1108.99023,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1502, 2003.90295, 2866.79297, 1107.21619,   0.00000, 0.00000, -89.82000);
		CreateDynamicObject(2288, 2033.12756, 2890.52588, 1105.83655,   0.00000, 0.00000, 89.76000);
		CreateDynamicObject(3051, 2032.67505, 2872.25928, 1105.12256,   0.00000, 0.00000, -134.04010);
		CreateDynamicObject(3051, 2032.67505, 2871.07935, 1105.12256,   0.00000, 0.00000, -313.44049);
		CreateDynamicObject(948, 2019.10608, 2920.62915, 1103.75000,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19379, 2025.52710, 2874.75903, 1107.16345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19445, 2028.18298, 2901.52930, 1101.98889,   0.00000, 0.00000, 0.00002);
		CreateDynamicObject(19445, 2018.34497, 2906.53711, 1101.98889,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19445, 2027.94531, 2906.53442, 1101.98889,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19445, 2031.05396, 2896.87012, 1101.98889,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(941, 2019.40283, 2900.15186, 1100.92957,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 2021.76184, 2900.15088, 1100.92957,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 2024.12256, 2900.15405, 1100.92957,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 2017.08301, 2902.53711, 1100.92957,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 2019.44348, 2902.53784, 1100.92957,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 2021.81177, 2902.53491, 1100.92957,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 2024.17188, 2902.54028, 1100.92957,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(3387, 2026.48486, 2906.12866, 1100.49146,   0.00000, 0.00000, 89.82000);
		CreateDynamicObject(3387, 2025.49963, 2906.12793, 1100.49146,   0.00000, 0.00000, 89.82000);
		CreateDynamicObject(3384, 2023.56860, 2905.80005, 1102.08765,   -90.00000, 0.00000, 90.00000);
		CreateDynamicObject(3384, 2023.57849, 2905.78564, 1101.10645,   -90.00000, 0.00000, 90.00000);
		CreateDynamicObject(3387, 2021.12939, 2906.09033, 1100.49146,   0.00000, 0.00000, 269.39996);
		CreateDynamicObject(3387, 2020.12756, 2906.10840, 1100.49146,   0.00000, 0.00000, 269.39996);
		CreateDynamicObject(3384, 2019.04285, 2905.73779, 1102.29565,   180.00000, 0.00000, 90.00000);
		CreateDynamicObject(3384, 2018.00256, 2905.73657, 1102.28955,   180.00000, 0.00000, 90.00000);
		CreateDynamicObject(2709, 2017.62854, 2902.60938, 1101.52368,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 2015.17615, 2906.03540, 1100.92957,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(941, 2015.16357, 2906.91675, 1101.94458,   90.00000, 0.00000, 0.00000);
		CreateDynamicObject(2709, 2015.12854, 2905.98608, 1101.52368,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19379, 2015.02917, 2874.73560, 1107.16345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 2012.98865, 2901.61450, 1103.66345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(1502, 2015.82483, 2869.73950, 1103.76160,   0.00000, 0.00000, -180.03999);
		CreateDynamicObject(0, 2037.44971, 2891.55298, 1103.75024,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(1502, 2037.43433, 2881.93628, 1103.75024,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(2162, 2046.60266, 2882.92773, 1103.72717,   0.00000, 0.00000, -90.47994);
		CreateDynamicObject(2164, 2046.63049, 2879.04395, 1103.73413,   0.00000, 0.00000, 269.99948);
		CreateDynamicObject(2164, 2046.63733, 2880.78638, 1103.73413,   0.00000, 0.00000, 269.99948);
		CreateDynamicObject(1811, 2040.80920, 2878.37671, 1104.33154,   0.00000, 0.00000, -152.99998);
		CreateDynamicObject(2199, 2040.91333, 2885.81299, 1103.72412,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1999, 2042.92383, 2886.69360, 1103.75122,   0.00000, 0.00000, -269.10001);
		CreateDynamicObject(2162, 2046.44446, 2891.89819, 1103.72717,   0.00000, 0.00000, -89.93996);
		CreateDynamicObject(2164, 2046.29736, 2887.43726, 1103.73413,   0.00000, 0.00000, 269.99948);
		CreateDynamicObject(2164, 2046.37207, 2889.67822, 1103.73413,   0.00000, 0.00000, 269.99948);
		CreateDynamicObject(2199, 2039.03442, 2895.24805, 1103.72412,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2199, 2043.44275, 2895.24487, 1103.72412,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1806, 2044.38586, 2887.73682, 1103.69519,   0.00000, 0.00000, -270.35999);
		CreateDynamicObject(1811, 2041.35999, 2887.86328, 1104.33154,   0.00000, 0.00000, -198.47984);
		CreateDynamicObject(1811, 2041.33301, 2886.64526, 1104.33154,   0.00000, 0.00000, -166.55988);
		CreateDynamicObject(2162, 2046.40784, 2894.09692, 1103.72717,   0.00000, 0.00000, -89.93996);
		CreateDynamicObject(2239, 2042.18372, 2889.18872, 1103.73145,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2199, 2044.53040, 2885.87207, 1103.72412,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(1502, 2037.48657, 2891.53882, 1103.75024,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19353, 2032.55200, 2885.05859, 1105.48889,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19353, 2032.55652, 2881.90210, 1105.48889,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19383, 2032.55200, 2878.79663, 1105.48889,   0.00000, 0.00000, 0.06000);
		CreateDynamicObject(19379, 2023.48816, 2887.42920, 1103.66345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19379, 2025.52710, 2884.37891, 1107.16345,   0.00000, -90.00000, 0.00000);
		CreateDynamicObject(19445, 2027.79114, 2884.55298, 1105.48889,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19445, 2023.28210, 2881.97095, 1105.48889,   0.00000, 0.00000, -179.99960);
		CreateDynamicObject(2164, 2023.36450, 2882.98926, 1103.73413,   0.00000, 0.00000, 89.99947);
		CreateDynamicObject(19353, 2030.94299, 2877.16650, 1105.48889,   0.00000, 0.00000, -89.75993);
		CreateDynamicObject(19353, 2027.78748, 2877.13037, 1105.48889,   0.00000, 0.00000, -88.86000);
		CreateDynamicObject(2162, 2023.34692, 2880.45972, 1103.72717,   0.00000, 0.00000, -270.17966);
		CreateDynamicObject(2162, 2023.37720, 2878.05322, 1103.72717,   0.00000, 0.00000, -270.17966);
		CreateDynamicObject(1999, 2027.33875, 2883.93213, 1103.75122,   0.00000, 0.00000, -450.06027);
		CreateDynamicObject(1811, 2029.03882, 2882.44043, 1104.33154,   0.00000, 0.00000, -391.55933);
		CreateDynamicObject(1811, 2029.13440, 2883.85962, 1104.33154,   0.00000, 0.00000, -340.02017);
		CreateDynamicObject(1806, 2025.89197, 2882.90747, 1103.71521,   0.00000, 0.00000, -448.92041);
		CreateDynamicObject(2239, 2027.30994, 2881.96606, 1103.73145,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(2199, 2027.15515, 2877.29907, 1103.72412,   0.00000, 0.00000, -179.04015);
		CreateDynamicObject(2199, 2029.29614, 2877.29175, 1103.72412,   0.00000, 0.00000, -179.04015);
		CreateDynamicObject(1502, 2032.52795, 2879.57397, 1103.75024,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(2007, 2025.02197, 2884.17139, 1103.66626,   0.00000, 0.00000, -359.58011);
		CreateDynamicObject(2007, 2044.81445, 2877.81079, 1103.66626,   0.00000, 0.00000, -540.11926);
		CreateDynamicObject(2007, 2044.67871, 2886.41064, 1103.66626,   0.00000, 0.00000, -540.11932);
		CreateDynamicObject(3396, 2028.02551, 2874.04614, 1103.69824,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(3396, 2028.10791, 2869.78418, 1103.69824,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(3396, 2020.59216, 2874.97998, 1103.69824,   0.00000, 0.00000, -180.18011);
		CreateDynamicObject(3387, 2020.38708, 2871.78345, 1103.71375,   0.00000, 0.00000, -180.77983);
		CreateDynamicObject(3387, 2020.36707, 2870.80347, 1103.71375,   0.00000, 0.00000, -180.77980);
		CreateDynamicObject(3387, 2020.36877, 2861.82788, 1103.71375,   0.00000, 0.00000, -180.77980);
		CreateDynamicObject(3387, 2020.36047, 2860.84424, 1103.71375,   0.00000, 0.00000, -180.77980);
		CreateDynamicObject(3396, 2020.40170, 2858.17822, 1103.75525,   0.00000, 0.00000, 179.99850);
		CreateDynamicObject(3396, 2027.96582, 2862.65210, 1103.69824,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(3396, 2027.74048, 2857.56104, 1103.69824,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(19399, 2021.56921, 2902.64209, 1105.48889,   0.00000, 0.00000, -87.77999);
		CreateDynamicObject(19445, 2015.20020, 2902.58203, 1105.48889,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(19399, 2024.73291, 2912.08643, 1105.48889,   0.00000, 0.00000, -87.77999);
		CreateDynamicObject(19445, 2018.37817, 2911.99756, 1105.48889,   0.00000, 0.00000, -90.00000);
		CreateDynamicObject(1999, 2025.73694, 2911.06079, 1103.65662,   0.00000, 0.00000, -89.75990);
		CreateDynamicObject(1999, 2025.70215, 2907.88037, 1103.65662,   0.00000, 0.00000, -89.75990);
		CreateDynamicObject(1714, 2024.09241, 2907.21997, 1103.74390,   0.00000, 0.00000, 86.69998);
		CreateDynamicObject(1846, 2024.98157, 2911.13013, 1105.53479,   -90.00000, -90.00000, -87.83991);
		CreateDynamicObject(1846, 2021.73962, 2901.70068, 1105.53479,   -90.00000, -90.00000, -87.83991);
		CreateDynamicObject(2161, 2018.58801, 2909.73853, 1103.72314,   0.00000, 0.00000, 90.96010);
		CreateDynamicObject(2161, 2018.58801, 2911.07861, 1103.72314,   0.00000, 0.00000, 90.96010);
		CreateDynamicObject(2161, 2018.58801, 2911.07861, 1105.08313,   0.00000, 0.00000, 90.96010);
		CreateDynamicObject(1232, 2034.110351, 2896.312011, 1110.490112, 0.000000, 0.000000, 0.000000); // luz.
		CreateDynamicObject(1232, 2024.928710, 2918.352050, 1110.300781, 0.000000, 0.000000, 0.000000); // luz.
		CreateDynamicObject(1232, 2033.637939, 2909.552001, 1109.709350, 0.000000, 0.000000, 0.000000); // luz.
		CreateDynamicObject(1232, 2029.294921, 2902.663085, 1109.819824, 0.000000, 0.000000, 0.000000); // luz.
		CreateDynamicObject(1232, 2034.969848, 2886.932861, 1109.831298, 0.000000, 0.000000, 0.000000); // luz.
		CreateDynamicObject(1232, 2037.538574, 2873.709472, 1104.749389, 0.000000, 0.000000, 0.000000); // luz.
		CreateDynamicObject(1232, 2000.230590, 2862.170410, 1113.330810, 0.000000, 0.000000, 0.000000); // luz.
		CreateDynamicObject(1232, 2000.236816, 2877.215087, 1113.360229, 0.000000, 0.000000, 0.000000); // luz.
		CreateDynamicObject(1232, 2027.087646, 2865.549804, 1109.789306, 0.000000, 0.000000, 0.000000); // luz.
		CreateDynamicObject(1232, 2012.559204, 2865.843750, 1109.740966, 0.000000, 0.000000, 0.000000); // luz.
	}

	#undef CreateDynamicObject

	if (IntObject[playerid][0] != INVALID_OBJECT_ID)
 		SetPVarInt (playerid, "mapIntL", true);

	return 1;
}

CALLBACK: CargarNegocio_data(n,name[],value[])
{
	INI_String("Nombre",InfoNegocio[n][nNombre],30);
	INI_String("Dueño",InfoNegocio[n][nComprador],MAX_PLAYER_NAME);
	INI_Int("Contraseña",InfoNegocio[n][nContra]);

	INI_Int("Dinero",InfoNegocio[n][nDinero]);
	INI_Int("Precio_Entrada",InfoNegocio[n][nPrecioEntrada]);
	INI_Int("Precio",InfoNegocio[n][nPrecio]);
	INI_Int("VirtualWorld",InfoNegocio[n][nVW]);
	INI_Int("Interior",InfoNegocio[n][nInt]);
	INI_Int("Tipo",InfoNegocio[n][nTipo]);
	INI_Int("Icono",InfoNegocio[n][nIcono]);

	INI_Bool("Comprado",InfoNegocio[n][nComprado]);
	INI_Bool("Cerrado",InfoNegocio[n][nCerrado]);

	INI_Float("Entrada_x",InfoNegocio[n][nEntrada_x]);
	INI_Float("Entrada_y",InfoNegocio[n][nEntrada_y]);
	INI_Float("Entrada_z",InfoNegocio[n][nEntrada_z]);

	INI_Float("Salida_x",InfoNegocio[n][nSalida_x]);
	INI_Float("Salida_y",InfoNegocio[n][nSalida_y]);
	INI_Float("Salida_z",InfoNegocio[n][nSalida_z]);

	INI_Float("Entrega_x",InfoNegocio[n][nEntrega_x]);
	INI_Float("Entrega_y",InfoNegocio[n][nEntrega_y]);
	INI_Float("Entrega_z",InfoNegocio[n][nEntrega_z]);

	new
	    Str[10];

	Loop(i, MAX_STOCK_NEGOCIO, 0)
	{
		A_Format(Str, "Stock%d", i);
		INI_Int(Str,InfoNegocio[n][nStock][i]);
	}
	return 1;
}

stock ActualizarNegocio(nid, bool:onlydp = false)
{
	new NArch[20];
 	format(NArch,sizeof(NArch),"Negocios/%d.ini",nid);

	new INI:Arch = INI_Open(NArch);

	INI_SetTag(Arch,"data");

	if (!onlydp)
	{
		INI_WriteString(Arch,"Nombre",InfoNegocio[nid][nNombre]);
		INI_WriteString(Arch,"Dueño",InfoNegocio[nid][nComprador]);
		INI_WriteInt(Arch,"Contraseña",InfoNegocio[nid][nContra]);

		INI_WriteInt(Arch,"Dinero",InfoNegocio[nid][nDinero]);
		INI_WriteInt(Arch,"Precio_Entrada",InfoNegocio[nid][nPrecioEntrada]);
		INI_WriteInt(Arch,"Precio",InfoNegocio[nid][nPrecio]);
		INI_WriteInt(Arch,"VirtualWorld",InfoNegocio[nid][nVW]);
		INI_WriteInt(Arch,"Interior",InfoNegocio[nid][nInt]);
		INI_WriteInt(Arch,"Tipo",InfoNegocio[nid][nTipo]);
		INI_WriteInt(Arch,"Icono",InfoNegocio[nid][nIcono]);

		INI_WriteBool(Arch,"Comprado",InfoNegocio[nid][nComprado]);
		INI_WriteBool(Arch,"Cerrado",InfoNegocio[nid][nCerrado]);

		INI_WriteFloat(Arch,"Entrada_x",InfoNegocio[nid][nEntrada_x]);
		INI_WriteFloat(Arch,"Entrada_y",InfoNegocio[nid][nEntrada_y]);
		INI_WriteFloat(Arch,"Entrada_z",InfoNegocio[nid][nEntrada_z]);

		INI_WriteFloat(Arch,"Salida_x",InfoNegocio[nid][nSalida_x]);
		INI_WriteFloat(Arch,"Salida_y",InfoNegocio[nid][nSalida_y]);
		INI_WriteFloat(Arch,"Salida_z",InfoNegocio[nid][nSalida_z]);
	}
	else
	{
		INI_WriteFloat(Arch,"Entrega_x",InfoNegocio[nid][nEntrega_x]);
		INI_WriteFloat(Arch,"Entrega_y",InfoNegocio[nid][nEntrega_y]);
		INI_WriteFloat(Arch,"Entrega_z",InfoNegocio[nid][nEntrega_z]);
	}
	INI_Close(Arch);
	return 1;
}

stock CargarPCs() // OP:PC
{
	for(new i; i < sizeof(pc_Data); i++)
	{
		CreateDynamicObject(pc_Data[i][pcModelID], pc_Data[i][pcObjX], pc_Data[i][pcObjY], pc_Data[i][pcObjZ], 0.0, 0.0, pc_Data[i][pcObjA]);
	}
	return 1;
}

CALLBACK: EscribirPC (playerid, time)
{
	if (time == 0)
	{
		ApplyAnimation(playerid, "INT_OFFICE", "OFF_Sit_Type_Loop", 4.0, 1, 1, 1, 1, 0);
		SetPlayerAttachedObject(playerid, 3, 2356, 7, -0.0600, -0.6340, 0.0459, -88.8999, -7.2999, -104.5000, 1.0000, 1.0000, 1.0000);
		PC.ToggleMenu(playerid, true);
		PC.State[playerid] = PC_STATE_MENU;
		Mensaje(playerid, -1, "Use "#CINFO"/pc "#CBLANCO"o presione "#CVERDE"ESC "#CBLANCO"para dejar de usar la PC.");
	}

	else if (time == 1)
	{
		ApplyAnimation(playerid, "INT_OFFICE", "OFF_Sit_2Idle_180", 4.0, 0, 1, 1, 0, 0);
		RemovePlayerAttachedObject(playerid, 3);
	    if(InfoJugador[playerid][jAttachOcultado][3] == false && InfoJugador[playerid][jAccesorio][3])
	    {
			SetPlayerAttachedObject(playerid,3,
				AttachmentObjects[InfoJugador[playerid][jAccesorio][3]][attachmodel],
				InfoJugador[playerid][jAttachBone][3],
				InfoJugador[playerid][jAttachPosx][3],
				InfoJugador[playerid][jAttachPosy][3],
				InfoJugador[playerid][jAttachPosz][3],
				InfoJugador[playerid][jAttachAngx][3],
				InfoJugador[playerid][jAttachAngy][3],
				InfoJugador[playerid][jAttachAngz][3],
				InfoJugador[playerid][jAttachEscx][3],
				InfoJugador[playerid][jAttachEscy][3],
				InfoJugador[playerid][jAttachEscz][3]);
		}
	}
}

stock PCMasCercana(playerid, type)
{
	for(new i; i < sizeof(pc_Data); i++)
	{
	    if(pc_Data[i][pcNegType] != type)
	        continue;

	    if(IsPlayerInRangeOfPoint(playerid, 0.75, pc_Data[i][pcX], pc_Data[i][pcY], pc_Data[i][pcZ]))
	    	return i;
	}
	return -1;
}

stock CargarNegocios()
{
	new
		NArch[20],
		n;

	while(n < MAX_NEGOCIOS)
	{
	    format(NArch,sizeof(NArch),"Negocios/%d.ini",n);
    	if(fexist(NArch))
    	{
			INI_ParseFile(NArch,"CargarNegocio_%s",.bExtra = true, .extra = n);
			InfoNegocio[n][nPickup] = CreateDynamicPickup(ID_PICKUPNEGOCIO,1,InfoNegocio[n][nEntrada_x],InfoNegocio[n][nEntrada_y],InfoNegocio[n][nEntrada_z]);
			ActualizarNegLabel(n, true);
			Iter_Add(Negocios,n);
		}
		n++;
	}
	printf("*- Sistema de negocios cargado (%d)",Iter_Count(Negocios));
	return 1;
}

stock UpdateMapIcons()
{
	foreach(Player, i)
	{
	    Loop(id, 100, 0)
	    {
	        RemovePlayerMapIcon(id, i);
		}
		LoadMapIcons(i);
	}
	return 1;
}

stock LoadMapIcons(playerid)
{
	foreach(Negocios, n)
	{
	    if(InfoNegocio[n][nIcono])
	    {
	    	SetPlayerMapIcon(playerid, n, InfoNegocio[n][nEntrada_x],InfoNegocio[n][nEntrada_y],InfoNegocio[n][nEntrada_z],InfoNegocio[n][nIcono], -1);
		}
	}
	new
	    iconid = MAX_NEGOCIOS;

	SetPlayerMapIcon(playerid, iconid+1, 1615.359, -2175.33,  0.0, 27, C_BLANCO, MAPICON_LOCAL); //Mecánicos
	SetPlayerMapIcon(playerid, iconid+2, 1204.652, -1342.356, 0.0, 22, C_BLANCO, MAPICON_LOCAL); //Hospital
	return 1;
}

CALLBACK: CargarCasa_data(c,name[],value[])
{
	INI_String("Nombre",InfoCasa[c][cNombre],30);
	INI_String("Dueño",InfoCasa[c][cComprador],MAX_PLAYER_NAME);
	INI_Int("Contraseña",InfoCasa[c][cContra]);

	INI_Int("Dinero",InfoCasa[c][cDinero]);
	INI_Int("Precio",InfoCasa[c][cPrecio]);
	INI_Int("VirtualWorld",InfoCasa[c][cVW]);
	INI_Int("Interior",InfoCasa[c][cInt]);

	INI_Bool("Comprada",InfoCasa[c][cComprada]);
	INI_Bool("Cerrada",InfoCasa[c][cCerrada]);

	INI_Float("Entrada_x",InfoCasa[c][cEntrada_x]);
	INI_Float("Entrada_y",InfoCasa[c][cEntrada_y]);
	INI_Float("Entrada_z",InfoCasa[c][cEntrada_z]);

	INI_Float("Salida_x",InfoCasa[c][cSalida_x]);
	INI_Float("Salida_y",InfoCasa[c][cSalida_y]);
	INI_Float("Salida_z",InfoCasa[c][cSalida_z]);

	INI_Int("Familia",InfoCasa[c][cFamilia]);

	new Str[15];
	Loop(i,MAX_LUGARES_CASA,0)
	{
	    A_Format(Str,"Arm%d",i);
		INI_Int(Str,InfoCasa[c][cArmarioObjeto][i]);
	    A_Format(Str,"ArmD%d",i);
		INI_Int(Str,InfoCasa[c][cArmarioData][i]);
	}

	Loop(i,MAX_MUEBLES_CASA,0)
	{
	    A_Format(Str,"ObjData_%d", i);
	    INI_String(Str, cObjData[i], 70);
	}
	INI_Int("Contraseña_puerta", InfoCasa[c][cContra_puerta]);
	return 1;
}

CALLBACK: CargarInt_data(i,name[],value[])
{
	INI_Int("Interior",InfoInteriorCasa[i][iInt]);
	INI_Float("Pos_x",InfoInteriorCasa[i][iPos_x]);
	INI_Float("Pos_y",InfoInteriorCasa[i][iPos_y]);
	INI_Float("Pos_z",InfoInteriorCasa[i][iPos_z]);
	INI_String("Nombre",InfoInteriorCasa[i][iNombre],24);
	return 1;
}

stock ActualizarCasa(cid, bool:General = true, Mueble = -1, Armario = -1)
{
	new CArch[20];
 	format(CArch,sizeof(CArch),"Casas/%d.ini",cid);

	new INI:Arch = INI_Open(CArch);

	INI_SetTag(Arch,"data");

	new Str[12],Str2[70];

	if(General)
	{
		INI_WriteString(Arch,"Nombre",InfoCasa[cid][cNombre]);
		INI_WriteString(Arch,"Dueño",InfoCasa[cid][cComprador]);
		INI_WriteInt(Arch,"Contraseña",InfoCasa[cid][cContra]);

		INI_WriteInt(Arch,"Dinero",InfoCasa[cid][cDinero]);
		INI_WriteInt(Arch,"Precio",InfoCasa[cid][cPrecio]);
		INI_WriteInt(Arch,"VirtualWorld",InfoCasa[cid][cVW]);
		INI_WriteInt(Arch,"Interior",InfoCasa[cid][cInt]);

		INI_WriteBool(Arch,"Comprada",InfoCasa[cid][cComprada]);
		INI_WriteBool(Arch,"Cerrada",InfoCasa[cid][cCerrada]);

		INI_WriteFloat(Arch,"Entrada_x",InfoCasa[cid][cEntrada_x]);
		INI_WriteFloat(Arch,"Entrada_y",InfoCasa[cid][cEntrada_y]);
		INI_WriteFloat(Arch,"Entrada_z",InfoCasa[cid][cEntrada_z]);

		INI_WriteFloat(Arch,"Salida_x",InfoCasa[cid][cSalida_x]);
		INI_WriteFloat(Arch,"Salida_y",InfoCasa[cid][cSalida_y]);
		INI_WriteFloat(Arch,"Salida_z",InfoCasa[cid][cSalida_z]);

		INI_WriteInt(Arch,"Familia",InfoCasa[cid][cFamilia]);
		INI_WriteInt(Arch,"Contraseña_puerta", InfoCasa[cid][cContra_puerta]);
	}

	if(Armario != -1)
	{
	    A_Format(Str, "Arm%d", Armario);
		INI_WriteInt(Arch,Str,InfoCasa[cid][cArmarioObjeto][Armario]);
	    A_Format(Str, "ArmD%d", Armario);
		INI_WriteInt(Arch,Str,InfoCasa[cid][cArmarioData][Armario]);
	}

	if(Mueble != -1 && Mueble < MAX_MUEBLES_CASA)
	{
		format(Str2,70,"%d|%.03f|%.03f|%.03f|%.03f|%.03f|%.03f", InfoCasa[cid][cObjModel][Mueble], InfoCasa[cid][cObjPosX][Mueble], InfoCasa[cid][cObjPosY][Mueble],
		InfoCasa[cid][cObjPosZ][Mueble],
		InfoCasa[cid][cObjRotX][Mueble],
	 	InfoCasa[cid][cObjRotY][Mueble],
		InfoCasa[cid][cObjRotZ][Mueble]);
	    A_Format(Str,"ObjData_%d", Mueble);
		INI_WriteString(Arch, Str, Str2);
	}
	INI_Close(Arch);

	return 1;
}

stock CargarCasas()
{
	new CArch[22],c;

	while(c < MAX_CASAS)
	{
	    format(CArch,sizeof(CArch),"Casas/%d.ini",c);
    	if(fexist(CArch))
    	{
			INI_ParseFile(CArch,"CargarCasa_%s",.bExtra = true, .extra = c);
			InfoCasa[c][cPickup] = CreateDynamicPickup(ID_PICKUPCASA,1,InfoCasa[c][cEntrada_x],InfoCasa[c][cEntrada_y],InfoCasa[c][cEntrada_z]);
			ActualizarCasaLabel(c, true);
			Iter_Add(Casas, c);
			Loop(i,MAX_MUEBLES_CASA,0)
			{
    			unformat(cObjData[i],"p<|>iffffff",
				InfoCasa[c][cObjModel][i],
				InfoCasa[c][cObjPosX][i],
				InfoCasa[c][cObjPosY][i],
				InfoCasa[c][cObjPosZ][i],
				InfoCasa[c][cObjRotX][i],
				InfoCasa[c][cObjRotY][i],
				InfoCasa[c][cObjRotZ][i]);
				strclr(cObjData[i]);
			}
		}
		c++;
	}
	printf("*- Sistema de casas cargado (%d)",Iter_Count(Casas));
	return 1;
}


stock CargarInteriores_C()
{
	new
		IArch[36],
		c;

	while(c < MAX_INTERIORES_CASA)
	{
	    format(IArch,sizeof(IArch),"Casas/Interiores/%d.ini",c);
    	if(fexist(IArch))
    	{
			++Total_Interiores_Creados;
			INI_ParseFile(IArch,"CargarInt_%s",.bExtra = true, .extra = c);
		}
		c++;
	}
	printf("*- Sistema de interiores [CASAS] cargado (%d)",Total_Interiores_Creados);
	return 1;
}

stock ActualizarInt(cid)
{
	new CArch[26];
 	format(CArch,sizeof(CArch),"Casas/Interiores/%d.ini",cid);

	new INI:Arch = INI_Open(CArch);

	INI_SetTag(Arch,"data");

	INI_WriteInt(Arch,"Interior",InfoInteriorCasa[cid][iInt]);
	INI_WriteFloat(Arch,"Pos_x",InfoInteriorCasa[cid][iPos_x]);
	INI_WriteFloat(Arch,"Pos_y",InfoInteriorCasa[cid][iPos_y]);
	INI_WriteFloat(Arch,"Pos_z",InfoInteriorCasa[cid][iPos_z]);
	INI_WriteString(Arch,"Nombre",InfoInteriorCasa[cid][iNombre]);

	INI_Close(Arch);
	return 1;
}


stock CargarGarages()
{
	new
		gArch[22],
		g;

	Loop(i,3,0) CreateDynamic3DTextLabel(LABEL_GARAGE_S,C_BLANCO,InfoPGarage[i][Posx],InfoPGarage[i][Posy],InfoPGarage[i][Posz]+1,5);

	while(g < MAX_GARAGES)
	{
	    format(gArch,sizeof(gArch),"Casas/Garages/%d.ini",g);
    	if(fexist(gArch))
    	{
			INI_ParseFile(gArch,"CargarGarage_%s",.bExtra = true, .extra = g);
			InfoGarage[g][gLabelID] = CreateDynamic3DTextLabel(LABEL_GARAGE_E,C_BLANCO,InfoGarage[g][gExt_x],InfoGarage[g][gExt_y],InfoGarage[g][gExt_z]+1,10);
			Iter_Add(Garages,g);
		}
		g++;
	}
	printf("*- Sistema de garages cargado (%d)",Iter_Count(Garages));
	return 1;
}

stock ActualizarGarage(gid)
{
	new CArch[26];
 	format(CArch,sizeof(CArch),"Casas/Garages/%d.ini",gid);

	new INI:Arch = INI_Open(CArch);

	INI_SetTag(Arch,"data");

	INI_WriteInt(Arch,"Interior",InfoGarage[gid][gInt]);
	INI_WriteInt(Arch,"Virtual_world",InfoGarage[gid][gVW]);
	INI_WriteInt(Arch,"ID_Casa",InfoGarage[gid][gIDCasa]);

	INI_WriteBool(Arch,"Cerrado",InfoGarage[gid][gCerrado]);

	INI_WriteFloat(Arch,"IntV_x",InfoGarage[gid][gIntV_x]);
	INI_WriteFloat(Arch,"IntV_y",InfoGarage[gid][gIntV_y]);
	INI_WriteFloat(Arch,"Int_x",InfoGarage[gid][gInt_x]);
	INI_WriteFloat(Arch,"Int_y",InfoGarage[gid][gInt_y]);
	INI_WriteFloat(Arch,"Int_z",InfoGarage[gid][gInt_z]);
	INI_WriteFloat(Arch,"Ext_x",InfoGarage[gid][gExt_x]);
	INI_WriteFloat(Arch,"Ext_y",InfoGarage[gid][gExt_y]);
	INI_WriteFloat(Arch,"Ext_z",InfoGarage[gid][gExt_z]);
	INI_WriteFloat(Arch,"ExtV_x",InfoGarage[gid][gExtV_x]);
	INI_WriteFloat(Arch,"ExtV_y",InfoGarage[gid][gExtV_y]);
	INI_WriteFloat(Arch,"Ang",InfoGarage[gid][gAng]);

	INI_Close(Arch);
	return 1;
}

CALLBACK: CargarGarage_data(i,name[],value[])
{
	INI_Int("Interior",InfoGarage[i][gInt]);
	INI_Int("Virtual_world",InfoGarage[i][gVW]);
	INI_Int("ID_Casa",InfoGarage[i][gIDCasa]);

	INI_Bool("Cerrado",InfoGarage[i][gCerrado]);

	INI_Float("IntV_x",InfoGarage[i][gIntV_x]);
	INI_Float("IntV_y",InfoGarage[i][gIntV_y]);
	INI_Float("Int_x",InfoGarage[i][gInt_x]);
	INI_Float("Int_y",InfoGarage[i][gInt_y]);
	INI_Float("Int_z",InfoGarage[i][gInt_z]);
	INI_Float("Ext_x",InfoGarage[i][gExt_x]);
	INI_Float("Ext_y",InfoGarage[i][gExt_y]);
	INI_Float("Ext_z",InfoGarage[i][gExt_z]);
	INI_Float("ExtV_x",InfoGarage[i][gExtV_x]);
	INI_Float("ExtV_y",InfoGarage[i][gExtV_y]);
	INI_Float("Ang",InfoGarage[i][gAng]);
	return 1;
}

stock CargarFamilias()
{
	new
		IArch[18*MAX_FAMILIAS],
		c = 1;

	while(c < MAX_FAMILIAS)
	{
	    format(IArch,sizeof(IArch),"Familias/%d.ini",c);
    	if(fexist(IArch))
    	{
			INI_ParseFile(IArch,"CargarFam_%s",.bExtra = true, .extra = c);
		}
		c++;
	}
	printf("*- Sistema de familias cargado");
	return 1;
}


stock ActualizarFamilia(cid)
{
	if(!cid || cid > MAX_FAMILIAS)
	{
	    printf("BUG: Se intento actualizar la familia ID %d.", cid);
	    return 0;
	}

	new IArch[26];
 	format(IArch,sizeof(IArch),"Familias/%d.ini",cid);

	new INI:Arch = INI_Open(IArch);

	INI_SetTag(Arch,"data");

	INI_WriteString(Arch,"Nombre",InfoFamilia[cid][fNombre]);
	INI_WriteString(Arch,"Dinero",InfoFamilia[cid][fContra]);
	//Rangos
	INI_WriteString(Arch,"Rango_1",InfoFamilia[cid][fRango_1]);
	INI_WriteString(Arch,"Rango_2",InfoFamilia[cid][fRango_2]);
	INI_WriteString(Arch,"Rango_3",InfoFamilia[cid][fRango_3]);
	INI_WriteString(Arch,"Rango_4",InfoFamilia[cid][fRango_4]);
	INI_WriteString(Arch,"Rango_5",InfoFamilia[cid][fRango_5]);
	INI_WriteString(Arch,"Nombre_lider",InfoFamilia[cid][fNombre_L]);

	INI_WriteInt(Arch,"Dinero",InfoFamilia[cid][fDinero]);

	INI_WriteFloat(Arch,"Pos_x",InfoFamilia[cid][fPos_x]);
	INI_WriteFloat(Arch,"Pos_y",InfoFamilia[cid][fPos_y]);
	INI_WriteFloat(Arch,"Pos_z",InfoFamilia[cid][fPos_z]);

	INI_WriteString(Arch,"Lider",InfoFamilia[cid][fLider]);
	INI_WriteInt(Arch,"Miembros",InfoFamilia[cid][fMiembros]);

	INI_WriteBool(Arch,"Pandilla", InfoFamilia[cid][fPandilla] );
	INI_Close(Arch);
	return 1;
}

CALLBACK: CargarFam_data(i,name[],value[])
{
	INI_String("Nombre",InfoFamilia[i][fNombre],32);
	INI_String("Dinero",InfoFamilia[i][fContra],24);

	//Rangos
	INI_String("Rango_1",InfoFamilia[i][fRango_1],24);
	INI_String("Rango_2",InfoFamilia[i][fRango_2],24);
	INI_String("Rango_3",InfoFamilia[i][fRango_3],24);
	INI_String("Rango_4",InfoFamilia[i][fRango_4],24);
	INI_String("Rango_5",InfoFamilia[i][fRango_5],24);
	INI_String("Nombre_lider",InfoFamilia[i][fNombre_L],24);

	INI_Int("Dinero",InfoFamilia[i][fDinero]);

	INI_Float("Pos_x",InfoFamilia[i][fPos_x]);
	INI_Float("Pos_y",InfoFamilia[i][fPos_y]);
	INI_Float("Pos_z",InfoFamilia[i][fPos_z]);

	INI_String("Lider",InfoFamilia[i][fLider], MAX_PLAYER_NAME);
	INI_Int("Miembros",InfoFamilia[i][fMiembros]);

	INI_Bool("Pandilla",InfoFamilia[i][fPandilla]);
	return 1;
}



stock CargarObjetos()
{
	Loop(i,MAX_OBJETOS,0)
	{
	    new Arch[16];
		A_Format(Arch,"Objetos/%d.ini",i);
		if(fexist(Arch))
		{
			INI_ParseFile(Arch,"CargarObj_%s",.bExtra = true, .extra = i);
			Objeto[i][oID] = CreateDynamicObject(Objeto[i][oIDModel],Objeto[i][oPosx],Objeto[i][oPosy],Objeto[i][oPosz],Objeto[i][oAngx],Objeto[i][oAngy],Objeto[i][oAngz]);
			#define IDO i
			if(Objeto[i][oColor])
			{
	 			SetDynamicObjectMaterialText(Objeto[IDO][oID],Objeto[IDO][oIndexO],Objeto[IDO][oNombre],Objeto[IDO][oTamanoO],"Arial",Objeto[IDO][oTamano],1,Objeto[IDO][oColor]);
			}
			#undef IDO
		}
	}
	return 1;
}

CALLBACK: CargarObj_data(i,name[],value[])
{
	INI_Int("ID_Model",Objeto[i][oIDModel]);
	INI_Int("Tamaño",Objeto[i][oTamano]);
	INI_Int("Color",Objeto[i][oColor]);
	INI_Int("Tamaño_o",Objeto[i][oTamanoO]);
	INI_Int("Index_o",Objeto[i][oIndexO]);

	INI_Float("Pos_x",Objeto[i][oPosx]);
	INI_Float("Pos_y",Objeto[i][oPosy]);
	INI_Float("Pos_z",Objeto[i][oPosz]);
	INI_Float("Ang_x",Objeto[i][oAngx]);
	INI_Float("Ang_y",Objeto[i][oAngy]);
	INI_Float("Ang_z",Objeto[i][oAngz]);

	INI_String("Nombre",Objeto[i][oNombre],30);
	return 1;
}

stock CargarPortones()
{
	new
		i = -1,
		string[18];

	while(i++ != MAX_PORTONES)
	{
	    format(string,sizeof(string),"Portones/%d.ini",i);
	    if(fexist(string))
	    {
	    	INI_ParseFile(string,"CargarPorton_data",.bExtra = true, .extra = i);
			InfoPorton_Ex[i][portID] = CreateDynamicObject( InfoPorton_Ex[i][portModel],
															InfoPorton_Ex[i][pX],
															InfoPorton_Ex[i][pY],
															InfoPorton_Ex[i][pZ],
															InfoPorton_Ex[i][pRX],
															InfoPorton_Ex[i][pRY],
															InfoPorton_Ex[i][pRZ]);
		}
	}
	print("*- Sistema de portones cargado.");
	return 1;
}

CALLBACK: CargarPorton_data(i,name[],value[])
{
	INI_Int("ID",InfoPorton_Ex[i][portModel]);
	INI_Float("Pos_x",InfoPorton_Ex[i][pX]);
	INI_Float("Pos_y",InfoPorton_Ex[i][pY]);
	INI_Float("Pos_z",InfoPorton_Ex[i][pZ]);
	INI_Float("Rot_x",InfoPorton_Ex[i][pRX]);
	INI_Float("Rot_y",InfoPorton_Ex[i][pRY]);
	INI_Float("Rot_z",InfoPorton_Ex[i][pRZ]);
	INI_Float("Abierto_x",InfoPorton_Ex[i][pAX]);
	INI_Float("Abierto_y",InfoPorton_Ex[i][pAY]);
	INI_Float("Abierto_z",InfoPorton_Ex[i][pAZ]);
	INI_Float("Velocidad",InfoPorton_Ex[i][portVelocidad]);
	INI_Int("Familia",InfoPorton_Ex[i][portFamilia]);
	INI_Int("Casa",InfoPorton_Ex[i][portCasa]);
	return 1;
}

stock ActualizarPorton(i)
{
	new string[22];
 	format(string,sizeof(string),"Portones/%d.ini",i);
 	new INI:Arch = INI_Open(string);

	INI_WriteInt(Arch,"ID",InfoPorton_Ex[i][portModel]);
	INI_WriteFloat(Arch,"Pos_x",InfoPorton_Ex[i][pX]);
	INI_WriteFloat(Arch,"Pos_y",InfoPorton_Ex[i][pY]);
	INI_WriteFloat(Arch,"Pos_z",InfoPorton_Ex[i][pZ]);
	INI_WriteFloat(Arch,"Rot_x",InfoPorton_Ex[i][pRX]);
	INI_WriteFloat(Arch,"Rot_y",InfoPorton_Ex[i][pRY]);
	INI_WriteFloat(Arch,"Rot_z",InfoPorton_Ex[i][pRZ]);
	INI_WriteFloat(Arch,"Abierto_x",InfoPorton_Ex[i][pAX]);
	INI_WriteFloat(Arch,"Abierto_y",InfoPorton_Ex[i][pAY]);
	INI_WriteFloat(Arch,"Abierto_z",InfoPorton_Ex[i][pAZ]);
	INI_WriteFloat(Arch,"Velocidad",InfoPorton_Ex[i][portVelocidad]);
	INI_WriteInt(Arch,"Familia",InfoPorton_Ex[i][portFamilia]);
	INI_WriteInt(Arch,"Casa",InfoPorton_Ex[i][portCasa]);
	INI_Close(Arch);
	return 1;
}

stock ActualizarObjeto(i)
{
	new Arch2[16];
	A_Format(Arch2,"Objetos/%d.ini",i);
	new INI:Arch = INI_Open(Arch2);

	INI_SetTag(Arch,"data");

	INI_WriteInt(Arch,"ID_Model",Objeto[i][oIDModel]);
	INI_WriteInt(Arch,"Tamaño",Objeto[i][oTamano]);
	INI_WriteInt(Arch,"Color",Objeto[i][oColor]);
	INI_WriteInt(Arch,"Tamaño_o",Objeto[i][oTamanoO]);
	INI_WriteInt(Arch,"Index_o",Objeto[i][oIndexO]);

	INI_WriteFloat(Arch,"Pos_x",Objeto[i][oPosx]);
	INI_WriteFloat(Arch,"Pos_y",Objeto[i][oPosy]);
	INI_WriteFloat(Arch,"Pos_z",Objeto[i][oPosz]);
	INI_WriteFloat(Arch,"Ang_x",Objeto[i][oAngx]);
	INI_WriteFloat(Arch,"Ang_y",Objeto[i][oAngy]);
	INI_WriteFloat(Arch,"Ang_z",Objeto[i][oAngz]);

	INI_WriteString(Arch,"Nombre",Objeto[i][oNombre]);

	INI_Close(Arch);
	return 1;
}

stock ActualizarTVs()
{
	new
		Str[60];

	new
		File:Arch = fopen("Televisores.ini", io_write);

    Loop(i, MAX_TVS, 0)
    {
        if(InfoTV[i][tvPos][0] != 0.0 && InfoTV[i][tvPos][1] != 0.0)
        {
			A_Format(Str,"%.03f|%.03f|%.03f\r\n", InfoTV[i][tvPos][0], InfoTV[i][tvPos][1], InfoTV[i][tvPos][2]);
			fwrite(Arch, Str);
		}
	}
	fclose(Arch);
	return 1;
}

stock CargarTelevisores()
{
	if(!fexist("Televisores.ini")) return 1;
	new
		File:F_TV = fopen("Televisores.ini", io_read),
		Data[30],
		i = -1;

	while(fread(F_TV, Data) && i < (MAX_TVS-1))
	{
		i++;
	    unformat(Data,"p<|>fff", InfoTV[i][tvPos][0], InfoTV[i][tvPos][1], InfoTV[i][tvPos][2]);
		InfoTV[i][tvLabelID] = CreateDynamic3DTextLabel("Televisor\n\n"#CBLANCO"Usa "#CINFO"/usar televisor", C_ROJO, InfoTV[i][tvPos][0], InfoTV[i][tvPos][1], InfoTV[i][tvPos][2], 4.0);
	}
	fclose(F_TV);
	print("*- Sistema de televisores cargado.");
	return 1;
}

stock CargarArmeriaHitman()
{
	if(!fexist("Facciones/Hitman/Armeria.dat"))
	    return 0;

	new
		File: Arch = fopen("Facciones/Hitman/Armeria.dat", io_read),
		Str[20];

	fread (Arch, Str);
	unformat (Str, "p<|>dddd", HIT_AWP, HIT_C_AWP, HIT_SILENCED, HIT_C_SILENCED);
	fclose (Arch);
	return 1;
}

stock ActualizarArmeriaHitman()
{
	new
	    File: Arch = fopen ("Facciones/Hitman/Armeria.dat", io_write),
	    str[20];

	A_Format (str, "%d|%d|%d|%d", HIT_AWP, HIT_C_AWP, HIT_SILENCED, HIT_C_SILENCED);
	fwrite (Arch, str);
	fclose (Arch);
	return 1;
}

//return floatabs (rest);

CALLBACK: Float: floatdif (Float: num1, Float: num2)
{
	new
	    Float: rest = floatsub(num1, num2);

	if (rest > 0.0)
	    return rest;

	else
	    return -rest;
}

stock intdif (num1, num2)
{
	new
	    ret = num1 - num2;

	if (ret > 0)
	    return ret;

	else
	    return -ret;
}

stock GetDaysBetweenDate(date1[], date2[])
{
	new
	    Day[2],
	    Month[2],
	    Age[2],
	    Days_dif[2];

	if (sscanf (date1, "p</>ddd", Day[0], Month[0], Age[0]))
	    return -1;

	if (sscanf (date2, "p</>ddd", Day[1], Month[1], Age[1]))
	    return -1;

	for (new i; i < 2; i++)
		Days_dif[i] = Day[i] + (Month[i] * 30) + (Age[i] * 360);

	return intdif (Days_dif[0], Days_dif[1]);
}


stock CargarContratos()
{
	if(!fexist("Facciones/Hitman/Contratos.ini"))
	    return 0;

	new
		File:ContratHit = fopen("Facciones/Hitman/Contratos.ini", io_read),
		Str[60],
		i = -1;

	while(fread(ContratHit, Str))
	{
		i++;
		unformat(Str,"p<|>s[24]ds[24]", InfoContrato[i][hitPor], InfoContrato[i][hitDinero],  InfoContrato[i][hitVictima]);
		strdel(InfoContrato[i][hitVictima],strlen(InfoContrato[i][hitVictima])-2, InfoContrato[i][hitVictima]);
	}
	fclose(ContratHit);
  	printf("*- Sistema de contratos para hitman cargado (%d)", i+1);
	return 1;
}

stock BorrarMinerales()
{
	for(new i; i < sizeof(PosMinerales); i ++)
	{
	    Bit_Set(ValidMineral, i, false);
		if(InfoMineral[i][minObjID])
		{
		    DestroyDynamicObject(InfoMineral[i][minObjID]);
			foreach(Player, p)
			{
			    if(GetPVarInt(p, "MINERO_MIN_ID") == i)
			    {
			        Mensaje(p, -1, "¡Ops! Los minerales fueron re-spawneados.");
			        TerminarMinear(p, true);
				}
			}
		}
	}
	return 1;
}

stock CrearMinerales()
{
	for(new i = 1; i < sizeof(PosMinerales); i += 1+random(2) )
	{
	    new
	        rand = random(101),
			min_type;

		switch(rand)
		{
			case 0..50:
			    min_type = M_TYPE_CARBON;

			case 51..84:
			    min_type = M_TYPE_HIERRO;

			case 85..95:
			    min_type = M_TYPE_ORO;

			case 96..100:
				min_type = M_TYPE_DIAMANTE;

		    //Hierro y carbón (Más abundantes)
/*		    case 0..20:
				min_type = M_TYPE_HIERRO;
			case 21..40:
			    min_type = M_TYPE_CARBON;

			//Oro y Plata
			case 41..43:
			    min_type = M_TYPE_PLATA;
			case 44,45:
			    min_type = M_TYPE_ORO;

			//Diamante
			case 46:
			    min_type = M_TYPE_DIAMANTE;

			//Corindón
			case 47:
			    min_type = M_TYPE_ZAFIRO;
			case 48:
			    min_type = M_TYPE_RUBI;
			case 49,50:
			    min_type = M_TYPE_ESMERALDA;*/
		}
		InfoMineral[i][minType] = min_type;
		InfoMineral[i][minObjID] = CreateDynamicObject(3931, PosMinerales[i][0], PosMinerales[i][1], PosMinerales[i][2], PosMinerales[i][3], PosMinerales[i][4], PosMinerales[i][5]);
		SetDynamicObjectMaterial(InfoMineral[i][minObjID], 0, 3931, "none", "none", DataMineral[min_type][mindataCol]);
		Bit_Set(ValidMineral, i, true);
	}
	printf("*- Los minerales fueron creados.");
	return 1;
}

stock ActualizarContratos()
{
	new
		File:ContratHit = fopen("Facciones/Hitman/Contratos.ini", io_write),
		Str[60];

	Loop(i, sizeof InfoContrato, 0)
	{
	    if(strlen(InfoContrato[i][hitPor]) && InfoContrato[i][hitDinero])
	    {
			A_Format(Str,"%s|%d|%s\r\n", InfoContrato[i][hitPor], InfoContrato[i][hitDinero], InfoContrato[i][hitVictima]);
			fwrite(ContratHit, Str);
		}
	}

	fclose(ContratHit);

	return 1;
}

stock CargarGangZones()
{
	if(!fexist("GangZones.ini")) return 1;

	new
		File:F_GZ = fopen("GangZones.ini", io_read),
 		Data[70];

    while( fread(F_GZ, Data) )
    {
        static i;

        i++;

	    unformat(Data,"p<|>ffffi",
		InfoGZ[i][gzMin][0],
		InfoGZ[i][gzMin][1],
		InfoGZ[i][gzMax][0],
		InfoGZ[i][gzMax][1],
		InfoGZ[i][gzPandilla]);

		if(InfoGZ[i][gzMin][0] && InfoGZ[i][gzMin][1])
		{
			CrearGangZone(i,InfoGZ[i][gzMin][0],InfoGZ[i][gzMin][1],InfoGZ[i][gzMax][0],InfoGZ[i][gzMax][1], InfoGZ[i][gzPandilla]);
		}
		strclr(Data);
	}
	fclose(F_GZ);
	print("*- Sistema de gangzones cargado.");
	return 1;
}

stock CargarModelos()
{
	m_Binco_m = LoadModelSelectionMenu("Modelos/Binco_m.txt");
	m_ZIP_m = LoadModelSelectionMenu("Modelos/ZIP_m.txt");
	m_Didlersachs_m = LoadModelSelectionMenu("Modelos/Didiersachs_m.txt");
	m_Victim_m = LoadModelSelectionMenu("Modelos/Victim_m.txt");

	m_Binco_f = LoadModelSelectionMenu("Modelos/Binco_f.txt");
	m_ZIP_f = LoadModelSelectionMenu("Modelos/ZIP_f.txt");
	m_Didlersachs_f = LoadModelSelectionMenu("Modelos/Didiersachs_f.txt");
	m_Victim_f = LoadModelSelectionMenu("Modelos/Victim_f.txt");

    m_Accesorios = LoadModelSelectionMenu("Modelos/Accesorios.txt");
    m_Muebles = LoadModelSelectionMenu("Modelos/Muebles.txt");

	print("*- Sistema de modelos cargado. (0.3x)");
    return 1;
}

CALLBACK: CargarNPCS()
{
	print("*- Conectando bots..");

	ConnectNPC("Claudia", "NPC_SecretariaLSPD");
	ConnectNPC("Truth",   "NPC_Truth");
	return 1;
}

stock SleepEx (time)
{
	time += GetTickCount();

	while (GetTickCount() < time) {}
	return 1;
}

stock RandFemaleName()
{
	new
		N[20];

	switch(random(16))
	{
	    case 0: N = "Maria";
	    case 1: N = "Fernanda";
	    case 2: N = "Amelia";
	    case 3: N = "Camila";
	    case 4: N = "Agustina";
	    case 5: N = "Lara";
	    case 6: N = "Candela";
	    case 7: N = "Victoria";
	    case 8: N = "Brenda";
	    case 9: N = "Adriana";
	    case 10: N = "Beatriz";
	    case 11: N = "Daniela";
	    case 12: N = "Evangelina";
	    case 13: N = "Graciela";
	    case 14: N = "Ivana";
	}
	return N;
}

stock RandMaleName()
{
	new
		N[20];

	switch(random(16))
	{
	    case 0: N = "Facundo";
	    case 1: N = "Rodrigo";
	    case 2: N = "Agustin";
	    case 3: N = "Edgar";
	    case 4: N = "Alejandro";
	    case 5: N = "Adrian";
	    case 6: N = "Andres";
	    case 7: N = "Jonathan";
	    case 8: N = "Arturo";
	    case 9: N = "Octavio";
	    case 10: N = "Gonzalo";
	    case 11: N = "Alexis";
	    case 12: N = "Alex";
	    case 13: N = "Fernando";
	    case 14: N = "Ivan";
	}
	return N;
}

stock LetraRandom()
{
	new Letras[] =
	{
	    'A','B','C','D','E','F','G','H','I',
		'J','K','L','M','N','O','P','Q','R',
		'S','T','U','V','W','X','Y','Z'
	};

	return Letras [ random(sizeof Letras) ];
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	veh_respawn(vehicleid);
	antic_Ban(playerid,"Cheat de tunning");
	return 1;
}

CALLBACK: T_RemoveVehicleComponent(vehicleid, componentid) return RemoveVehicleComponent(vehicleid, componentid);

stock AutoRol(playerid, rol[])
{
	new string[160];
	format(string, sizeof(string), "  * %s %s *",NombreJugador(playerid), rol);
	ProxDetector(20.0, playerid, string,C_ME,C_ME,C_ME,C_ME,C_ME);
	return 1;
}

CALLBACK: EncontrarJugador(playerid, quien)
{
    if(quien == INVALID_PLAYER_ID || !IsPlayerConnected(quien) ) return GameTextForPlayer(playerid, "~r~error", 5000, 3);
	SetPlayerMarkerForPlayer(playerid, quien, 0xFF0000FF);
	GameTextForPlayer(playerid, "~g~~h~encontrado", 5000, 3);
	return 1;
}

CALLBACK: DescagarCamionB(playerid)
{
	Mensaje(playerid,-1,"Ya descargaste la basúra, ahora regresa para devolver el camión (y recibir el dinero)");
	SetPlayerCP(playerid,CP_BASURERO,1279.0297,-1248.3020,14.010,8);
	SetPVarInt(playerid,"TerminoBasura",1);
	return 1;
}

CALLBACK: SubeBarraMotor(playerid)
{
	new
	    CurrentTD = GetPVarInt(playerid, "ID_TD_ENCENDIENDO");

	if(!CurrentTD)
	    return 0;

    KillTimer2(playerid,TIMER_BMOTOR);
	PlayerTextDrawDestroy(playerid, PlayerText:CurrentTD);
	DeletePVar(playerid, "ID_TD_ENCENDIENDO");

	new
		veh = GetPlayerVehicleID(playerid),
		Float: HP;

	if (!veh)
	    return 1;

	GetVehicleHealth(veh, HP);

	if(HP <= 400.0)
	{
 		MensajeF(playerid, -1, "Este "#CAMARILLO"%s "#CBLANCO"no enciende, al parecer tiene fallas en el motor. Si tiene un celular, puede llamar a un mecánico.", veh_getNameAsString(veh));
   		return 1;
	}
	if(veh_getFuel(veh))
	{
 		AutoRol(playerid,"enciende el motor del vehículo");
 		veh_setEngine(veh, true);
	}
	else
	{
		return MensajeF(playerid, -1, "Este "#CROJO"%s "#CBLANCO"no tiene nada de combustible.", veh_getNameAsString(veh));
	}
	return 1;
}

stock ActualizarNegLabel(n, bool: Crear = false)
{
	static
	    count_direction[sizeof ZoneNames],
		Neg_ID_Direccion[MAX_NEGOCIOS];

	new
		LabelStr[300],
		name_zone[28],
		str_direction[28+8],
		id_zone;

	id_zone = GetZoneNameAtCoord(InfoNegocio[n][nEntrada_x], InfoNegocio[n][nEntrada_y], name_zone);

	Loop(i, sizeof (ZoneNames), 0)
	{
	    if(id_zone == i) continue;

	    new
			str[28];
	    strunpack(str, ZoneNames[i][zoneName]);
	    if(!strcmp(str, name_zone))
	    {
	    	id_zone = i;
	    	break;
		}
	}

	if(Crear)
	{
        count_direction[id_zone] ++;
        Neg_ID_Direccion[n] = count_direction[id_zone];
	}

	A_Format(str_direction, "%s nº %d", name_zone, Neg_ID_Direccion[n]);

	if(InfoNegocio[n][nComprado])
	{
		if(InfoNegocio[n][nPrecioEntrada])
		{
			format(LabelStr,sizeof(LabelStr),""#CROJO"%s\n\n"#CBLANCO"Pertenece a "#CVERDE"%s\n"#CBLANCO"Dirección: "#CVERDE"%s\n"#CBLANCO"Entrada: "#CVERDE"$%d",
			InfoNegocio[n][nNombre],InfoNegocio[n][nComprador], str_direction, InfoNegocio[n][nPrecioEntrada]);
		}
		else
		{
			format(LabelStr,sizeof(LabelStr),""#CROJO"%s\n\n"#CBLANCO"Pertenece a "#CVERDE"%s\n"#CBLANCO"Dirección: "#CVERDE"%s",
			InfoNegocio[n][nNombre],InfoNegocio[n][nComprador], str_direction);
		}
	}
	else
	{
		format(LabelStr,sizeof(LabelStr),""#CROJO"%s\n\n"#CBLANCO"Precio: "#CVERDE"$%d "#CBLANCO"| Usa: "#CINFO"/comprar negocio\n"#CBLANCO"Dirección: "#CVERDE"%s",
		InfoNegocio[n][nNombre],InfoNegocio[n][nPrecio], str_direction);
	}
	if(InfoNegocio[n][nCerrado])
	{
	    strins(LabelStr,"\n"#CBLANCO"Puerta: "#CROJO"Cerrada",strlen(LabelStr));
	}
 	strins(LabelStr,MSG_TECLAENTRAR,strlen(LabelStr));
 	if(Crear)
 	{
 		InfoNegocio[n][nLabelID] = CreateDynamic3DTextLabel(LabelStr,C_BLANCO,InfoNegocio[n][nEntrada_x],InfoNegocio[n][nEntrada_y],InfoNegocio[n][nEntrada_z]+1,8);
	}
	else
	{
 		UpdateDynamic3DTextLabelText(InfoNegocio[n][nLabelID], C_BLANCO, LabelStr);
	}
	return 1;
}

stock ActualizarCasaLabel(c, bool: Crear = false)
{
	static
	    count_direction[sizeof ZoneNames],
		Casa_ID_Direccion[MAX_CASAS];

	new
		LabelStr[300],
		name_zone[28],
		str_direction[28+8],
		id_zone;

	id_zone = GetZoneNameAtCoord(InfoCasa[c][cEntrada_x], InfoCasa[c][cEntrada_y], name_zone);

	Loop(i, sizeof (ZoneNames), 0)
	{
	    if(id_zone == i) continue;

	    new
			str[28];
	    strunpack(str, ZoneNames[i][zoneName]);
	    if(!strcmp(str, name_zone))
	    {
	    	id_zone = i;
	    	break;
		}
	}

	if(Crear)
	{
        count_direction[id_zone] ++;
        Casa_ID_Direccion[c] = count_direction[id_zone];
	}

	A_Format(str_direction, "%s nº %d", name_zone, Casa_ID_Direccion[c]);
	alm(InfoCasa[c][cDireccion], str_direction);

	if(InfoCasa[c][cComprada])
	{
		if(InfoCasa[c][cCerrada])
		{
			format(LabelStr,sizeof(LabelStr),"Casa "#CROJO"'%s'\n\n"#CBLANCO"Pertenece a "#CVERDE"%s\n"#CBLANCO"Dirección: "#CVERDE"%s\n"#CBLANCO"Puerta: "#CROJO"Cerrada",
			InfoCasa[c][cNombre],InfoCasa[c][cComprador], str_direction);
		}
		else
		{
			format(LabelStr,sizeof(LabelStr),"Casa "#CROJO"'%s'\n\n"#CBLANCO"Pertenece a "#CVERDE"%s\n"#CBLANCO"Dirección: "#CVERDE"%s\n"#CBLANCO"Puerta: "#CVERDE"Abierta",
			InfoCasa[c][cNombre],InfoCasa[c][cComprador], str_direction);
		}
	}
	else
	{
		format(LabelStr,sizeof(LabelStr),""#CROJO"< Casa en venta >\n\n"#CBLANCO"Precio: "#CVERDE"$%d "#CBLANCO"| Usa: "#CINFO"/comprar casa\n"#CBLANCO"Dirección: "#CVERDE"%s",InfoCasa[c][cPrecio], str_direction);
	}
 	strins(LabelStr,MSG_TECLAENTRAR,strlen(LabelStr));

	if(Crear)
	{
		InfoCasa[c][cLabelID] = CreateDynamic3DTextLabel (LabelStr, C_BLANCO, InfoCasa[c][cEntrada_x], InfoCasa[c][cEntrada_y], InfoCasa[c][cEntrada_z]+1, 5.0, .testlos = 1);
	}
	else
	{
		UpdateDynamic3DTextLabelText(InfoCasa[c][cLabelID], C_BLANCO, LabelStr);
	}
	return 1;
}

stock strmatch(const String1[], const String2[])
{
	return ((strcmp(String1, String2, true, strlen(String2)) == 0) && (strlen(String2) == strlen(String1)));
}

#define pack::		pack_
#define min(%1,%2)	%1 > %2 ? %2 : %1
#define max(%1,%2)	%1 < %2 ? %2 : %1

stock pack::strcmp (const string_1[], const string_2[], bool: ignorecase = false, len = 0, size_1 = sizeof (string_1), size_2 = sizeof (string_2))
{
	// Pre-set lenght
	switch (lenght)
	{
		case 0:
		{
			lenght = min(size_1, size_2);
		}
	}

	// IF any string is empty, return 0
	switch (string_1{0} == '\0' || string_2{0} == '\0')
	{
		case true:
		{
			return 1;
		}
	}

	switch (ignorecase)
	{
		case true:
		{
			while (lenght--)
			{
				if (tolower (string_1{lenght}) != tolower (string_2{lenght}))
				{
					return 1;
				}
			}
		}
		case false:
		{
			while (lenght--)
			{
				if (string_1{lenght} != string_2{lenght})
				{
					return 1;
				}
			}
		}
	}
	return 0;
}

stock strlow(c)
{
	switch (c)
	{
		case 'A' .. 'Z':
		{
			return (c - ('A' - 'a'));
		}
	}
	return c;
}

CALLBACK: ActualizarCuentas()
{
	foreach(Player,i)
	{
 		if(GetPVarInt(i,"Logueado"))
	    {
			ActualizarCuenta(i);
		}
	}
	return 1;
}

stock Staff(playerid, nivel)
{
	if(InfoJugador[playerid][jAdmin] < nivel)
	{
		switch(nivel)
		{
			case Destacado: 		Error(playerid,"Este comando, está autorizado para: Usuario Destacado o más.");
			case Ayudante: 			Error(playerid,"Este comando, está autorizado para: Ayudante o más.");
			case Colaborador: 		Error(playerid,"Este comando, está autorizado para: Colaborador o más.");
			case Moderador: 		Error(playerid,"Este comando, está autorizado para: Moderador o más.");
			case Mod.Superior: 		Error(playerid,"Este comando, está autorizado para: Administrador o más.");
			case Administrador: 	Error(playerid,"Este comando, está autorizado para: Administrador superior o más.");
			case AdministradorSup: 	Error(playerid,"Este comando, está autorizado para: Administrador general o más.");
			case SubDueno: 			Error(playerid,"Este comando, está autorizado para: Administrador encargado o más.");
			case Dueno: 			Error(playerid,"Este comando, está autorizado para: Dueños.");
		}
		return 1;
	}
	return 0;//success.
}

public OnPlayerCommandReceived(playerid, cmdtext[])
{
	if(!LoginTime[playerid]) return 0;

	new
	    time = gettime();

	if(BloquedCommand[playerid] > time)
	    return 0;

	static
	    OldCommand[MAX_PLAYERS],
		CountCommand[MAX_PLAYERS];

	if(OldCommand[playerid] > time)
	{
	    CountCommand[playerid] ++;
	    if(CountCommand[playerid] > 5)
	    {
	        Mensaje(playerid, -1, "Se te bloqueó el acceso a comandos automáticamente por 10 segundos (Command Spam).");
            BloquedCommand[playerid] = time + 10;
			return 0;
		}
	}
	else
	{
		OldCommand[playerid] = time + 4;
		CountCommand[playerid] = 0;
	 	BloquedCommand[playerid] = 0;
	}

	return 1;
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
	if(BloquedCommand[playerid] > gettime())
	    return 0;

	#if CMD_LOG == true
	printf("[CMD] %s: %s",pName(playerid),cmdtext);
	#endif

	if(!success)
		Error(playerid,"El comando escrito, es incorrecto.");

 	return 1;
}

CALLBACK: OnPlayerCrashVehicle (playerid, vehicleid, Float: newhealth, Float: oldhealth)
{
	if (newhealth >= 250.0)
	{
		new
		    dif_hp = floatround (oldhealth) - floatround (newhealth);

		if (dif_hp > 25 && (GetTickCount() - LastVehicleShot [vehicleid]) > 5000)
		{
		    new
				hp_rest = dif_hp / 10;

			HealthData [playerid] -= float (hp_rest);

			if (HealthData [playerid] < 0.0)
			    HealthData [playerid] = 0.0;

			SetPlayerHealth (playerid, HealthData[playerid]);
		}
	}
	return 1;
}

timer NecesitaDroga[60000 * 40]()
{
	new
	    time_ = gettime(),
		dif_login = 40*60,
		dif_papped_low = (60 * 60) * 2,
		dif_papped_med = (60 * 60),
		dif_papped_high = (60 * 30);

	foreach(Player,i)
	{
	    if(InfoJugador[i][jPapeado] > 40 && (time_ - LoginTime[i]) > dif_login)
	    {
	        if (Papeado[i])
	            continue;

			new
			    dif_time = time_ - GetPVarInt(i, "OLD_PAPPED"),
				Float: my_hp;

			GetPlayerHealth(i, my_hp);

			if(InfoJugador[i][jPapeado] > 350) // Full papped (maradona style)
			{
				if (dif_time > dif_papped_high)
				{
					my_hp -= 20.0;
				}
			}
			else if(InfoJugador[i][jPapeado] > 150) // medium papped (Uri style)
			{
				if (dif_time > dif_papped_med)
				{
					my_hp -= 15.0;
				}
			}
			else
			{
				if (dif_time > dif_papped_low)
				{
					my_hp -= 10.0;
				}
			}

			if(my_hp < 5.0)
				my_hp = 5.0;

			SetPlayerHealth(i, my_hp);
			SetPlayerDrunkLevel(i, GetPlayerDrunkLevel(i) + 2000);
			Mensaje(i, C_GRIS, "Tu cuerpo siente necesidad de cocaina");
 		}
	}
	return 1;
}

timer BajaSaldo[8000]()
{
	foreach(Player,playerid)
	{
	    if(!LoginTime[playerid]) continue;
	    if(!GetPVarInt(playerid,"NUM_MELLAMA") && GetPVarInt(playerid,"EN_LLAMADA"))
	    {
			PlayerPlaySound(playerid, 1084, 0.0, 0.0, 0.0);
	        InfoJugador[playerid][jSaldo] --;
  	        if(!InfoJugador[playerid][jSaldo])
	        {
	            cmd_colgar(playerid,"celular");
				GameTextForPlayer(playerid, "~r~sin saldo", 3000, 1);
			}
		}
	}
	return 1;
}

timer BajaGasolina[10000]()
{
	new
		Speed,
		Float: Rest;

	foreach(veh, i)
	{
		if (veh_getEngine(i))
		{
  			Speed = GetVehicleSpeed(i);

			if(0 <= Speed <= 20)
			{
			    Rest = 0.1;
			}
			else
			{
				Rest = floatdiv(float(Speed), 160.0);
			}
			veh_setFuel(i, veh_getFuel(i) - Rest);
			if(veh_getFuel(i) < 0.0)
			{
				veh_setFuel(i, 0.0);
			    foreach(Player, x)
			    {
			        if(GetPlayerState(x) == PLAYER_STATE_DRIVER && IsPlayerInVehicle(x, i))
			        {
			            Mensaje(x, -1, "El vehículo no tiene más combustible.");
			        }
			    }
			    veh_setEngine(i, false);
			}
		}
	}
	return 1;
}

timer ActualizarVelocimetro[500]()
{
	new
		Str[20];

	static
	    OldPlayerFuel[MAX_PLAYERS];

	foreach(Player, i)
	{
	    if (!LoginTime[i])
			continue;

		if (GetPlayerState(i) == PLAYER_STATE_DRIVER)
		{
	        new
				VehID = GetPlayerVehicleID(i);

			if (!veh_getEngine(VehID))
			{
				if (PlayerBools [i] & e_MOSTROVEL)
				{
	 				SacarVelocimetro(i);
				}
				continue;
			}
			if (GetVehType(VehID) == VEHICLE_TYPE_BICYCLE)
			{
				continue;
			}
			if (!(PlayerBools [i] & e_MOSTROVEL))
			{
 				MostrarVelocimetro(i);
			}

			new
			    Speed,
			    Float: Health;

			GetVehicleHealth(VehID, Health);
			Speed = GetVehicleSpeed(VehID);

			if (Health < 400.0)
			{
				SetVehicleHealth(VehID,400.0);
				veh_setEngine(VehID, false);
				TextoJugador(i, "~w~motor ~r~destruido", 5000, 3);
			}

			//Velocimetro
			SetPlayerProgressBarValue(i, BVelocimetro[i], float(Speed));
			ShowPlayerProgressBar(i, BVelocimetro[i]);

			A_Format(Str, "%d KM/H", Speed);
			PlayerTextDrawSetString(i, TDVelocimetro[i], Str);

			//Gasolimetro
			new
			    FuelAmmount = int(veh_getFuel(VehID));

			if (FuelAmmount != OldPlayerFuel[i])
			{
			    A_Format(Str, "%d/%d", FuelAmmount, veh_getMaxFuel(VehID));
			    PlayerTextDrawSetString(i, TDGasolimetro[i], Str);
				SetPlayerProgressBarValue(i, BGasolimetro[i], veh_getFuel(VehID));
				ShowPlayerProgressBar(i, BGasolimetro[i]);
			    OldPlayerFuel[i] = FuelAmmount;
			}

			if (veh_isOwnVeh(VehID))
			{
				new
					Float:Distancia = GetPlayerDistanceFromPoint(i, GetPVarFloat(i,"POSVIEJA_X"),
																	GetPVarFloat(i,"POSVIEJA_Y"),
																	GetPVarFloat(i,"POSVIEJA_Z"));
				new
					Float: PosVieja[3];

				GetPlayerPos(i, PosVieja[0], PosVieja[1], PosVieja[2]);

				SetPVarFloat(i,"POSVIEJA_X",PosVieja[0]);
				SetPVarFloat(i,"POSVIEJA_Y",PosVieja[1]);
				SetPVarFloat(i,"POSVIEJA_Z",PosVieja[2]);

				if(Distancia > 40.0)
					Distancia = 0;

				Veh[VehID][vehMetros] += int(Distancia);
				A_Format(Str,"%d ~b~~h~km",Veh[VehID][vehMetros]/1000);
				PlayerTextDrawSetString(i,TDContadorKM[i],Str);
			}
	    }
	}
	return true;
}

stock ActualizarGangZones()
{
	new
		File:GZ = fopen("GangZones.ini", io_write),
		Str[80];

	Loop(i, MAX_GZS, 0) if(IsValidGangZone(i))
	{
		A_Format(Str,"%.04f|%.04f|%.04f|%.04f|%d\r\n", InfoGZ[i][gzMin][0],InfoGZ[i][gzMin][1],InfoGZ[i][gzMax][0], InfoGZ[i][gzMax][1], InfoGZ[i][gzPandilla]);
		fwrite(GZ, Str);
	}

	fclose(GZ);
	return 1;
}

stock CancelTaxi (playerid)
{
	TaxiTime[playerid] = 0;
	Taxi_DriverID[playerid] = INVALID_PLAYER_ID;
	if (TDTaximetro[playerid] != PlayerText: INVALID_TEXT_DRAW)
	{
		PlayerTextDrawDestroy (playerid, TDTaximetro[playerid]);
		TDTaximetro[playerid] = PlayerText: INVALID_TEXT_DRAW;
	}
	TextDrawHideForPlayer(playerid, TDTaximetroBOX);
	TextDrawHideForPlayer(playerid, TDTaximetroTXT);

	DeletePVar (playerid, "$TAXI");

	new
	    VehID = GetPlayerVehicleID(playerid);

	if (VehID)
	{
		if (veh_getJob(VehID) == ID_Taxista)
		{
		    new
		        Float:x, Float:y, Float:z;
		    GetVehiclePos (VehID, x, y, z);
			SetPlayerPos (playerid, x+1.0, y+1.5, z);
		}
	}
	return 1;
}

stock CancelTaxiEx (playerid, driverid, type)
{
	// Player
	if (TDTaximetro[playerid] != PlayerText: INVALID_TEXT_DRAW)
	{
		PlayerTextDrawDestroy (playerid, TDTaximetro[playerid]);
		TDTaximetro[playerid] = PlayerText: INVALID_TEXT_DRAW;
	}
	TextDrawHideForPlayer(playerid, TDTaximetroBOX);
	TextDrawHideForPlayer(playerid, TDTaximetroTXT);

	//Driver
	if (TDTaximetro[driverid] != PlayerText: INVALID_TEXT_DRAW)
	{
		PlayerTextDrawDestroy (driverid, TDTaximetro[driverid]);
		TDTaximetro[driverid] = PlayerText: INVALID_TEXT_DRAW;
	}
	TextDrawHideForPlayer(driverid, TDTaximetroBOX);
	TextDrawHideForPlayer(driverid, TDTaximetroTXT);

	//Pagar
	new
	    Money = GetPVarInt (playerid, "$TAXI");

	DeletePVar (playerid, "$TAXI");

	QuitarDinero (playerid, Money);
	GivePlayerMoney (driverid, Money);

	if (type == 0) // Legal.
	{
		MensajeF(driverid, -1, "Recaudaste "#CVERDE"$%d "#CBLANCO"del cliente.", Money);
		MensajeF(playerid, -1, "El costo del viaje es de "#CVERDE"$%d.", Money);
	}
	else if (type == 1) // dinero insuficiente.
	{
		MensajeF(driverid, -1, "El pasajero no tiene más dinero, el dinero recaudado es "#CVERDE"$%d.", Money);
		MensajeF(playerid, -1, "No tienes más dinero para pagar el viaje, el costo es de "#CVERDE"$%d.", Money);
	}
	else if (type == 2) // desconectado
	{
		MensajeF(driverid, -1, "El pasajero se desconectó, el dinero recaudado es "#CVERDE"$%d.", Money);
	}

	// Reset var
	TaxiTime[playerid] = 0;
	Taxi_DriverID[playerid] = INVALID_PLAYER_ID;
	return 1;
}

stock UpdateTaxiTD (playerid, driverid)
{
	new
	    str[10];

	A_Format(str, "$%d", TaxiTime[playerid]);

	PlayerTextDrawSetString (playerid, TDTaximetro[playerid], str);
	PlayerTextDrawSetString (driverid, TDTaximetro[driverid], str);
	SetPVarInt (playerid, "$TAXI", TaxiTime[playerid]);
	return 1;
}

timer Timer_Segundo[1000]()
{
	ownVeh_processSecond();
	MySQL_CheckConnection ();
	#if defined FILE_DEBUG_MODE
	new
	    start_gtc = GetTickCount();
	#endif
	new
	    time_passed = gettime();

	// Si la planta se quema te pega igual
	foreach(Planta, i)
	{
	    if(PlantaQuemandose[i])
	    {
	        foreach(Player, p)
	        {
	            if(IsPlayerInRangeOfPoint(p, 3.0, InfoPlanta[i][plantaX], InfoPlanta[i][plantaY], InfoPlanta[i][plantaZ]))
	            {
	                PegarEfectoFaso(p, 2);
				}
			}
		}
	}

	ActualizarHornosBigFoot();
	ActualizarHornosBlackAso();

	foreach(Player, i)
	{
	    if(PreventedOPU[i])
	    {
	        PreventedOPU[i] --;
		}
	    if(LoginTime[i])
	    {
	        //Prevent unfreeze
	        if (Freezed [i])
	        {
	            if (Freezed [i] == 0xFFFF)
	            {
	                TogglePlayerControllable(i, false);
				}
				else
				{
				    Freezed [i] --;
				    if (Freezed [i] == 1)
				    {
						Descongelar (i);
					}
					else
					{
					    TogglePlayerControllable(i, false);
					}
				}
			}

			if (TaxiTime[i])
			{
			    new
			        DriverID = Taxi_DriverID[i];

				if (!IsPlayerConnected (DriverID))
				{
					CancelTaxi (i);
				}
				else
				{
				    if (GetPlayerState(i) == PLAYER_STATE_PASSENGER && GetPlayerVehicleID (i) == GetPlayerVehicleID (DriverID) && GetPlayerState (DriverID) == PLAYER_STATE_DRIVER)
				    {
				        TaxiTime[i] += TAXI_TOADD;
				        if ((TaxiTime[i] % TAXI_VECTOR) == 0)
				        {
				            if ((TaxiTime[i]-TAXI_VECTOR) < GetPlayerMoney (i))
				            {
				                UpdateTaxiTD (i, DriverID);
							}
							else
							{
							    RemovePlayerFromVehicle (i);
							    CancelTaxiEx (i, DriverID, 1);
							}
						}
					}
					else
					{
						CancelTaxiEx (i, DriverID, 0);
					}
				}
			}
			if (HospitalData [i] != -1)
			{
			    if (!Freezed[i])
			    {
			        CongelarEx (i);
				}
			    if (HealthData [i] >= 70.0)
			    {
			        HospitalData [i] = -1;

					Confiscar (i);

					Mensaje(i, -1, "");
					Mensaje(i, -1, "");
					Mensaje(i, -1, "");
					Mensaje(i, -1, "");
					Mensaje(i, -1, "");
					Mensaje(i, -1, "");
					Mensaje(i, -1, "");
					Mensaje(i, -1, "Los médicos ya te dieron el alta. Ahora puedes retirarte del hospital.");
					Mensaje(i, -1, "Todos los elementos ilegales que tenias fueron confiscados.");
					Mensaje(i, -1, "El hospital te cobró "#CVERDE"$"#PRECIO_MUERTE" "#CBLANCO"por todos los gastos efectuados durante tu recuperación.");

					SetPlayerPos (i, HOSP_POS_TERMINO);
					SetPlayerFacingAngle (i, HOSP_ANG_TERMINO);

					SetCameraBehindPlayer (i);

					Descongelar (i);
					if (GetPlayerMoney (i) >= PRECIO_MUERTE)
					{
						QuitarDinero (i, PRECIO_MUERTE);
					}
					else
					{
						if (GetPlayerMoney (i) > 0)
						{
					    	GivePlayerMoney (i, -GetPlayerMoney (i));
						}
					}
				}
				else
				{
					HealthData [i] += 1.0;
					SetPlayerHealth (i, HealthData[i]);
				}
			}
			//Licencia
			if (PlayerBools [i] & e_LICENCIA)
			{
			    new
			        time = GetPVarInt (i, "licSEGS"),
					VehID = GetPlayerVehicleID (i);
			        
				if (VehID == 0)
				{
				    GameTextForPlayer (i, "~r~test desaprobado~n~~n~~w~saliste del vehiculo", 4000, 3);
				    CancelLicense (i);
				}
				else
				{
					time --;

					if (time < 0)
					{
					    new
					        points = GetPVarInt (i, "licPOINTS"),
							Float: veh_hp,
							bool: approved = true;

						GetVehicleHealth (PlayerTempData [i][e_VEH_LICENCIA], veh_hp);

						if (points < 25)
						{
						    GameTextForPlayer (i, "~r~test desaprobado~n~~n~~w~agarraste menos de ~p~25 ~w~puntos", 4000, 3);
							approved = false;
						}
						if (veh_hp < 650.0)
						{
						    GameTextForPlayer (i, "~r~test desaprobado~n~~n~~w~el vehiculo esta destruido", 4000, 3);
							approved = false;
						}
						if (approved)
						{
							if (GetVehicleModel (VehID) == 426)
							{
								Mensaje (i, -1, "Felicidades, pasó el test. El "#CINFO"Departamento de licencias "#CBLANCO"le otorgó su "#CVERDE"Licencia de Automóvil.");
								Mensaje (i, -1, "Para mostrar su licencia a otro jugador, o verla usted use "#CINFO"/mostrarlicencia [id/nombre del jugador] conduccion");
							    InfoJugador[i][jLicenciaAuto] = true;
							}
							else if (GetVehicleModel(VehID) == 521)
							{
								Mensaje (i, -1, "Felicidades, pasó el test. El "#CINFO"Departamento de licencias "#CBLANCO"le otorgó su "#CVERDE"Licencia de Motos.");
								Mensaje (i, -1, "Para mostrar su licencia a otro jugador, o verla usted use "#CINFO"/mostrarlicencia [id/nombre del jugador] motos");
							    InfoJugador[i][jLicenciaMoto] = true;
							}
						}
						CancelLicense (i);
					}
					else
					{
					    new
					        string [84];
					        
						A_Format (string, "~n~~n~~n~~n~~n~~n~~r~Segundos restantes: ~w~%d~n~~r~puntos: ~w~%d/25", time, GetPVarInt (i, "licPOINTS"));
						GameTextForPlayer (i, string, 2000, 3);
						SetPVarInt (i, "licSEGS", time);
					}
				}
			}
			//Servicios
	  		for(new s; s < MAX_SERVICIOS; s++)
			{
			    if (RequestedService[i][s])
			    {
			        if (RequestedService[i][s] == 1)
			        {
			            switch (s)
			            {
							case SERVICIO_POLICIA:
							{
								new
								    my_col = GetPlayerColor(i);

							    foreach (Player, p)
							    {
							        if (EsLSPD(p))
							        {
							            SetPlayerMarkerForPlayer(p, i, my_col);
									}
								}
								Mensaje(i, -1, "Tu llamada a la policía "#CROJO"expiró. "#CBLANCO"Puedes volver a llamar si aún necesitas el servicio.");
							}
							case SERVICIO_TAXI:
							{
								new
								    my_col = GetPlayerColor(i);

							    foreach (Player, p)
							    {
							        if (InfoJugador[p][jTrabajo] == ID_Taxista)
							        {
							            SetPlayerMarkerForPlayer(p, i, my_col);
									}
								}
								Mensaje(i, -1, "Tu llamada a los taxistas "#CROJO"expiró. "#CBLANCO"Puedes volver a llamar si aún necesitas el servicio.");
							}
							case SERVICIO_HOSPITAL:
							{
								new
								    my_col = GetPlayerColor(i);

							    foreach (Player, p)
							    {
							        if (EsMedico(p))
							        {
							            SetPlayerMarkerForPlayer(p, i, my_col);
									}
								}
								Mensaje(i, -1, "Tu llamada a los médicos "#CROJO"expiró. "#CBLANCO"Puedes volver a llamar si aún necesitas el servicio.");
							}
							case SERVICIO_TALLER:
							{
								new
								    my_col = GetPlayerColor(i);

							    foreach (Player, p)
							    {
							        if (EsMecanico(p))
							        {
							            SetPlayerMarkerForPlayer(p, i, my_col);
									}
								}
								Mensaje(i, -1, "Tu llamada a los mecánicos "#CROJO"expiró. "#CBLANCO"Puedes volver a llamar si aún necesitas el servicio.");
							}
						}
						RequestedService[i][s] = 0;
					}
					else
					{
					    // Disminuir tiempo
					    RequestedService[i][s] --;
					}
				}
			}

	        //Crack (Devolver anim)
	        if (Cracked[i])
	        {
				if (GetPlayerState(i) == PLAYER_STATE_ONFOOT)
				{
					if (Cracked[i] == 1)
			        {
						if (GetPlayerAnimationIndex(i) != 1701)
						{
							ApplyAnimation(i, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0);
						}
					}
			        else if (Cracked[i] == 2)
			        {
						if (GetPlayerAnimationIndex(i) != 386)
						{
							ApplyAnimation(i, "CRACK", "crckdeth2", 4.0, 1, 1, 1, 1, 0);
						}
					}
				}
			}

			//Muriendose
			if (InfoJugador[i][jMuerto] == true)
			{
				new
				    Float: hp_player;

				GetPlayerHealth(i, hp_player);

				hp_player -= 1.0;

				if (hp_player <= 0.0)
				{
					hp_player = 0.0;
				}
				SetPlayerHealth(i, hp_player);
			}

	        //Inventario
			if(ArmaActual[i])
			{
   				if(INV_Ammo [i])
   				{
   				    new
   				        p_state = GetPlayerState (i);
   				        
					if (p_state == PLAYER_STATE_DRIVER)
					{
					    if (GetPlayerWeapon (i))
					    {
					        SetPlayerArmedWeapon (i, 0);
						}
					}
					else
					{
					    if(GetPlayerWeapon(i) != ArmaActual[i])
					    {
				        	SetPlayerArmedWeapon(i, ArmaActual[i]);
						}
					}
				}
			}

	        //Faso
	        if(InfoJugador[i][jFalopeado])
	        {
	            new
	                Float: hp;

				GetPlayerHealth(i, hp);
				if(random(3))
				{
					hp += 1.0;
				}
				if(hp < 75.0)
				{
				    SetPlayerHealth(i, hp);
				}
	            if(InfoJugador[i][jFalopeado] == 1)
	            {
	                TextDrawHideForPlayer(i, TDEfectoFaso);
				}
                InfoJugador[i][jFalopeado]--;
			}

	        //Cocaina
	        if(Papeado[i])
	        {
	            InfoJugador[i][jCansancio] += 0.7;
	            InfoJugador[i][jHambre] += 0.5;

	            MostrarNecesidadesEx(i);

	            if(InfoJugador[i][jCansancio] > 100.0)
	                InfoJugador[i][jCansancio] = 100.0;

	            if(InfoJugador[i][jHambre] > 100.0)
	                InfoJugador[i][jHambre] = 100.0;

				new
				    Float: Armour;

				GetPlayerArmour(i, Armour);

				if(random(2))
				{
					Armour += 1.0;

					if(Armour > 25.0)
					    Armour = 25.0;

					SetPlayerArmour(i, Armour);
				}

	            if(Papeado[i] == 1)
	            {
	                SetPVarInt(i, "OLD_PAPPED", time_passed);
	                ResetCustomWeather(i);
					ResetCustomTime(i);
				}
                Papeado[i]--;
			}

			//SMS
			for(new a; a < MAX_SMS_TEXT; a++)
			{
				if(SMSTime[i][a])
				{
				    if(SMSTime[i][a] == 1)
				    {
				        PlayerTextDrawDestroy(i, TDSMS [i][a]);
				        PlayerTextDrawDestroy(i, TDSMS2[i][a]);

					    TDSMS [i][a] = PlayerText:INVALID_TEXT_DRAW;
					    TDSMS2[i][a] = PlayerText:INVALID_TEXT_DRAW;

						SMSTime[i][a] = 0;
					}
					else
					{
					    SMSTime[i][a]--;
					}
				}
			}

	    	//Necesidades
		    if(TiempoNecesidades[i] > 0)
		    {
			    if(time_passed > TiempoNecesidades[i])
			    {
			        SacarNecesidades(i);
			        TiempoNecesidades[i] = 0;
				}
			}

			//Graffiti
			if(PintandoGraffiti[i])
			{
			    if(GetPlayerWeapon(i) == 41)
			    {
			        static
			            OldGraffAmmo[MAX_PLAYERS];

			        new
			            Keys, ud, lr,
						Anim = GetPlayerAnimationIndex(i);

					GetPlayerKeys(i, Keys, ud, lr);

					if(Keys & KEY_FIRE && (1160 <= Anim <= 1163 || Anim == 1167) && GetPlayerAmmo(i) != OldGraffAmmo[i]) //Chequear si el jugador está pintando
					{
					    new
					        Float:x, Float:y, Float:z;

						x = GetPVarFloat(i, "GRAFFITI_x");
						y = GetPVarFloat(i, "GRAFFITI_y");
						z = GetPVarFloat(i, "GRAFFITI_z");

						OldGraffAmmo[i] = GetPlayerAmmo(i);
						if(IsPlayerInRangeOfPoint(i, 2.0, x, y, z))
						{
					    	PintandoGraffiti[i] ++;
					    	SetPlayerSpecialBarValue(i, PintandoGraffiti[i]);
							if(PintandoGraffiti[i] >= MAX_GRAFFITI_SEGS)
							{
								DestroyPlayerSpecialBar(i);
								new
								    text[10];

								GetPVarString(i, "GRAFFITI_TEXTO", text, 10);
								GetPosInFrontOfPlayer(i, x, y, 0.5);

								new
								    Float:Angle;

								GetPlayerFacingAngle(i, Angle);

								new
								    ObjectID = CreateDynamicObject(ID_OBJGRAFFITI, x, y, z, 0.0, 0.0, Angle);

								SetDynamicObjectMaterialText(ObjectID, 0, text, OBJECT_MATERIAL_SIZE_256x64, GRAFFITI_FONT, 50, 1, (ID_Familia(i) < sizeof(ColorGraffiti)) ? ColorGraffiti[ID_Familia(i)][0] : 0, 0, 0); //Capa uno (Texto)
								SetDynamicObjectMaterialText(ObjectID, 1, "null", OBJECT_MATERIAL_SIZE_256x64, "Arial", 50, 1, 0, 0, 0); //Capa dos (Madera)
								EditDynamicObject(i, ObjectID);
								PintandoGraffiti[i] = 0;
								Error(i, "Graffiti ~g~pintado.");
								Mensaje(i, -1, "Pintaste el Graffiti. Puedes editar la posición para perfeccionarlo.");
								SetPVarInt(i, "GRAFFITI_EDITPOS", true);
								SetPVarInt(i, "GRAFFITI_OBJID", ObjectID);
							}
						}
					}
				}
			}

		    //Dudas
		    if(InfoJugador[i][jTiempoDudas])
		        InfoJugador[i][jTiempoDudas]--;

			// Arrastrar
			if(JugadorArrastrado[i] != INVALID_PLAYER_ID)
			{
			    if(!IsPlayerConnected(JugadorArrastrado[i]))
			    {
					JugadorArrastrado[i] = INVALID_PLAYER_ID;
					continue;
				}
				new
				    Float:x, Float:y, Float:z;

				GetPlayerPos(i, x, y, z);
				if(GetPlayerDistanceFromPoint(JugadorArrastrado[i], x, y, z) < 1.5)
				{
				    ApplyAnimation(JugadorArrastrado[i], "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
				}
				else
				{
					PlayerWatchPlayer(JugadorArrastrado[i], i);
		       		switch(GetPlayerWalkingStyle(JugadorArrastrado[i]))
					{
					    case WALK_NORMAL:
							ApplyAnimation(JugadorArrastrado[i],"PED","WALK_player",4.1,1,1,1,0,0);

						case WALK_PED:
							ApplyAnimation(JugadorArrastrado[i],"PED","WALK_civi",4.1,1,1,1,0,0);

					 	case WALK_GANGSTA:
							ApplyAnimation(JugadorArrastrado[i],"PED","WALK_gang1",4.1,1,1,1,0,0);

						case WALK_GANGSTA2:
							ApplyAnimation(JugadorArrastrado[i],"PED","WALK_gang2",4.1,1,1,1,0,0);

						case WALK_OLD:
							ApplyAnimation(JugadorArrastrado[i],"PED","WALK_old",4.1,1,1,1,0,0);

						case WALK_FAT_OLD:
							ApplyAnimation(JugadorArrastrado[i],"PED","WALK_fatold",4.1,1,1,1,0,0);

						case WALK_FAT:
							ApplyAnimation(JugadorArrastrado[i],"PED","WALK_fat",4.1,1,1,1,0,0);

						case WALK_LADY:
							ApplyAnimation(JugadorArrastrado[i],"PED","WOMAN_walknorm",4.1,1,1,1,0,0);

						case WALK_LADY2:
							ApplyAnimation(JugadorArrastrado[i],"PED","WOMAN_walkbusy",4.1,1,1,1,0,0);

						case WALK_WHORE:
							ApplyAnimation(JugadorArrastrado[i],"PED","WOMAN_walkpro",4.1,1,1,1,0,0);

						case WALK_WHORE2:
							ApplyAnimation(JugadorArrastrado[i],"PED","WOMAN_walksexy",4.1,1,1,1,0,0);

						case WALK_DRUNK:
							ApplyAnimation(JugadorArrastrado[i],"PED","WALK_drunk",4.1,1,1,1,0,0);

						case WALK_BLIND:
							ApplyAnimation(JugadorArrastrado[i],"PED","Walk_Wuzi",4.1,1,1,1,0,0);
					}
				}
			}
		}
		else
		{
		    if (LoginSecs[i] > 0)
		    {
			    if (LoginSecs[i] == 1 && GetPlayerDialogID(i) == dIngreso)
			    {
			        Mensaje(i, -1, "Fuiste expulsado automáticamente por tardar más de "#CROJO"25 "#CBLANCO"segundos en loguear.");

					Dialog(i, dError, DIALOG_STYLE_MSGBOX, HEADER_REGISTRO, ""#CROJO"Debes colocar la contraseña en menos de 25 segundos.", "Cerrar", "");
			        DelayKick(i);
			        continue;
				}
		    	LoginSecs[i] --;
			}
		}
	}

	//GangZones
	Loop(i, sizeof InfoGZ, 0)
	{
	    if(gzAtacadaPor[i] != -1)
	    {
	        gzTiempo[i] ++;
	        if(gzTiempo[i] >= TIEMPO_GUERRA_GZ)
	        {
	            new
					bool:success;

	            if(PandillerosEnGangZone(gzAtacadaPor[i], i))
	            {
			        Loop(f, sizeof InfoFamilia, 0) if(InfoFamilia[f][fPandilla])
			        {
			            if(PandillerosEnGangZone(gzAtacadaPor[i], i) < PandillerosEnGangZone(f, i))
			            {
			                gzAtacadaPor[i] = f;
						}
						foreach(Player,playerid)
						{
						    RemovePlayerMapIcon(playerid, MI_GANGWARS);
						}
					}
					success = true;
				}
				else
				{
				    printf("- GangZone ID %d volvio a su viejo estado, porque no habian atacantes");
					success = false;
				}

				if(!success)
				{
		            gzTiempo[i] = 0;
					gzAtacadaPor[i] = -1;
					GangZoneStopFlashForAll( InfoGZ[i][gzID] );
					continue;
				}

				GangZoneStopFlashForAll(InfoGZ[i][gzID]);
				GangZoneHideForAll(InfoGZ[i][gzID]);
				GangZoneShowForAll(InfoGZ[i][gzID], ColoresGZ[gzAtacadaPor[i]]);
				InfoGZ[i][gzPandilla] = gzAtacadaPor[i];
	            gzTiempo[i] = 0;
				gzAtacadaPor[i] = -1;
				ActualizarGangZones();
			}
		}
	}
	if(LaboratorioBigFoot[labTiempoGuerra])
	{
		if(LaboratorioBigFoot[labTiempoGuerra] == 1)
		{
		    new
		        current_state = LaboratorioBigFoot[labFamDominante];

			if(current_state)
			{
			    new
			        defenders = GetPlayersInBigFoot(current_state),
			        attackers = GetPlayersInBigFoot(LaboratorioBigFoot[labAtacante]);

				if(defenders > attackers || defenders == attackers || attackers < 2) //Defendieron
				{
				    MensajeFamilia(current_state, "¡El laboratorio Bigfoot fue defendido!");
				    MensajeFamilia(LaboratorioBigFoot[labAtacante], "No se pudo conquistar el laboratorio Bigfoot.");
				}
				else
				{
				    LaboratorioBigFoot[labFamDominante] = LaboratorioBigFoot[labAtacante];
				    ActualizarBigFoot();
				    ActualizarLabelBigFoot();
				    MensajeFamiliaF(current_state, "El laboratorio Bigfoot fue conquistado por los "#CAMARILLO"%s.", GetFamName(LaboratorioBigFoot[labAtacante]));
				    MensajeFamilia(LaboratorioBigFoot[labAtacante], ""#CVERDE"[ATENCIÓN] "#CBLANCO"¡El laboratorio Bigfoot fue "#CAMARILLO"conquistado"#CBLANCO"!");
				}
			    LaboratorioBigFoot[labTiempoGuerra] = 0;
			    LaboratorioBigFoot[labAtacante] = 0;
    			GangZoneStopFlashForAll(LaboratorioBigFoot[labGangZoneID]);
			}
			else
			{
			    new
					fam_win = GetFamWinnerInBigFoot();

				if(fam_win != -1)
				{
				    LaboratorioBigFoot[labTiempoGuerra] = 0;
				    LaboratorioBigFoot[labAtacante] = 0;
				    LaboratorioBigFoot[labFamDominante] = fam_win;
				    new
				        str_full[100];

					A_Format(str_full, "La familia "#CAMARILLO"%s "#CBLANCO"ganó la conquista del laboratorio de "#CVERDE"Bigfoot", GetFamName(fam_win) );
					foreach(Player, i)
					{
						new
						    Fam_PJ = ID_Familia(i);

					    if (!InfoFamilia[Fam_PJ][fPandilla])
					    {
					        Mensaje(i, -1, str_full);
					    }
					}
					ActualizarBigFoot();
					ActualizarLabelBigFoot();
				}
			}
		}
		else
		{
			LaboratorioBigFoot[labTiempoGuerra] --;
		}
	}
	if(FabricaBlackAso[fabTiempoGuerra])
	{
		if(FabricaBlackAso[fabTiempoGuerra] == 1)
		{
		    new
		        current_state = FabricaBlackAso[fabFamDominante];

			if(current_state)
			{
			    new
			        defenders = GetPlayersInBlackAso(current_state),
			        attackers = GetPlayersInBlackAso(FabricaBlackAso[fabAtacante]);

				if(defenders > attackers || defenders == attackers || attackers < 2) //Defendieron
				{
				    MensajeFamilia(current_state, "¡La fábrica Black Asociation fue defendida!");
				    MensajeFamilia(FabricaBlackAso[fabAtacante], "No se pudo conquistar la fábrica Black Asociation.");
				}
				else
				{
				    FabricaBlackAso[fabFamDominante] = FabricaBlackAso[fabAtacante];
				    ActualizarBlackAso();
				    ActualizarLabelBlackAso();
				    MensajeFamiliaF(current_state, "La fábrica Black Asociation fue conquistado por los "#CAMARILLO"%s.", GetFamName(FabricaBlackAso[fabAtacante]));
				    MensajeFamilia(FabricaBlackAso[fabAtacante], ""#CVERDE"[ATENCIÓN] "#CBLANCO"¡La fabrica Back Asociation fue "#CAMARILLO"conquistada"#CBLANCO"!");
				}
			    FabricaBlackAso[fabTiempoGuerra] = 0;
			    FabricaBlackAso[fabAtacante] = 0;
			}
			else
			{
			    new
					fam_win = GetFamWinnerInBlackAso();

				if(fam_win != -1)
				{
				    FabricaBlackAso[fabTiempoGuerra] = 0;
				    FabricaBlackAso[fabAtacante] = 0;
				    FabricaBlackAso[fabFamDominante] = fam_win;
				    new
				        str_full[100];

					A_Format(str_full, "La familia "#CAMARILLO"%s "#CBLANCO"ganó la conquista de la fábrica "#CVERDE"Black Asociation", GetFamName(fam_win) );
					foreach(Player, i)
					{
						new
						    Fam_PJ = ID_Familia(i);

					    if (!InfoFamilia[Fam_PJ][fPandilla])
					    {
					        Mensaje(i, -1, str_full);
					    }
					}
					ActualizarBlackAso();
					ActualizarLabelBlackAso();
				}
			}
		}
		else
		{
			FabricaBlackAso[fabTiempoGuerra] --;
		}
	}
	#if defined FILE_DEBUG_MODE
	new
	    result = GetTickCount() - start_gtc;

	time_elapsed_second = result;
	#endif
	return 1;
}

stock CancelOffer(playerid) {
	DeletePVar(playerid, "voffer_to");
	DeletePVar(playerid, "voffer_on");
	DeletePVar(playerid, "voffer_vehicle");
	DeletePVar(playerid, "voffer_price");
	DeletePVar(playerid, "voffer_time");
}

stock CancelLicense (playerid)
{
	if (PlayerBools [playerid] & e_LICENCIA)
	{
		PlayerBools [playerid] &= ~e_LICENCIA;
		SetPlayerPos(playerid, -2029.9017, -119.1597, 1035.1719);
		SetPlayerVirtualWorld (playerid, 0);
	    SetPlayerInterior (playerid, 3);
   		DestroyPCP (playerid, CP_LICENCIAVEH);
   		DeletePVar (playerid, "licSEGS");
		DeletePVar (playerid, "licPOINTS");
		DeletePVar (playerid, "licTIPO");
	}
	if (PlayerTempData [playerid][e_VEH_LICENCIA] != 0)
	{
	    veh_destroy (PlayerTempData [playerid][e_VEH_LICENCIA]);
	    PlayerTempData [playerid][e_VEH_LICENCIA] = 0;
	}
	return 1;
}

stock GetPlayersInBigFoot(famid)
{
	new
	    count_p = 0;

	foreach(Player, i)
	{
	    if(ID_Familia(i) == famid && InfoJugador[i][jMuerto] == false)
	    {
	        if(IsPlayerInDynamicArea(i, LaboratorioBigFoot[labZoneID]) || GetPlayerVirtualWorld(i) == VW_BIGFOOT)
	        {
	            count_p ++;
			}
		}
	}
	return count_p;
}

stock GetPlayersInBlackAso(famid)
{
	new
	    count_p = 0;

	foreach(Player, i)
	{
	    if(ID_Familia(i) == famid && InfoJugador[i][jMuerto] == false)
	    {
	        if(GetPlayerVirtualWorld(i) == VW_BLACKASO)
	        {
	            count_p ++;
			}
		}
	}
	return count_p;
}

stock GetPlayersInBlackAso2(famid)
{
	new
	    count_p = 0;

	foreach(Player, i)
	{
	    if(ID_Familia(i) == famid)
	    {
	        if(IsPlayerInRangeOfPoint(i, 15.0, CORDS_FAB_BLACKASO_EXT))
	        {
	            count_p ++;
			}
		}
	}
	return count_p;
}

stock GetFamWinnerInBigFoot()
{
	new
		winner_count,
	    fam_winner = -1,
		members[MAX_FAMILIAS];

	Loop(i, MAX_FAMILIAS, 0)
	{
	    if (IsValidFam(i))
	    {
		    if (!InfoFamilia[i][fPandilla])
		    {
			    members[i] = GetPlayersInBigFoot(i);
			    if (members[i] > winner_count)
			    {
			        winner_count = members[i];
			        fam_winner = i;
				}
			}
		}
	}
	return fam_winner;
}

stock GetFamWinnerInBlackAso()
{
	new
		winner_count,
	    fam_winner = -1,
		members[MAX_FAMILIAS];

	Loop(i, MAX_FAMILIAS, 0)
	{
	    if (IsValidFam(i))
	    {
		    if (!InfoFamilia[i][fPandilla])
		    {
			    members[i] = GetPlayersInBlackAso(i);
			    if (members[i] > winner_count)
			    {
			        winner_count = members[i];
			        fam_winner = i;
				}
			}
		}
	}
	return fam_winner;
}

stock ActualizarHornosBigFoot()
{
	Loop(i, MAX_HORNOS_BIGFOOT, 0)
	{
		if(InfoHornoBigFoot[i][hornoEncendido])
		{
		    new
		        Float: carbon = InfoHornoBigFoot[i][hornoCarbon],
		        Float: querosen = InfoHornoBigFoot[i][hornoQuerosen],
		        Float: producto = InfoHornoBigFoot[i][hornoProducto],
		        Float: coca = InfoHornoBigFoot[i][hornoCantidad];

			if (carbon)
			{
				carbon -= 0.003;
				if(coca)
				{
					if(querosen)
					{
					    producto += 0.3;
					    querosen -= 0.045;
					}
					coca -= 0.06;
				}
			}
			else
			{
			    InfoHornoBigFoot[i][hornoEncendido] = false;
			    BorrarFuegoHornoBigFoot(i);
			}
			// No valores negativos
		    if(carbon < 0.0)
		        carbon = 0.0;

		    if(querosen < 0.0)
		        querosen = 0.0;

		    if(producto < 0.0)
		        producto = 0.0;

		    if(coca < 0.0)
		        coca = 0.0;

			if(producto > 500)
			    producto = 500;

			InfoHornoBigFoot[i][hornoCarbon] = carbon;
			InfoHornoBigFoot[i][hornoQuerosen] = querosen;
			InfoHornoBigFoot[i][hornoProducto] = producto;
			InfoHornoBigFoot[i][hornoCantidad] = coca;

			ActualizarLabelHornoBigFoot(i);
		}
	}
	Loop(i, MAX_DESTILADORES_BIGFOOT, 0)
	{
		if(InfoDestiladorBigFoot[i][destPorDestilar])
		{
		    if(InfoDestiladorBigFoot[i][destDestilado] < InfoDestiladorBigFoot[i][destPorDestilar])
		    {
		        InfoDestiladorBigFoot[i][destDestilado] ++;
		        ActualizarLabDestiladorBigFoot(i);
			}
		}
	}
	return 1;
}

/*
CUENTAS:

	AK-47:
	    - 5 de metal
	    - 4 size
	    - 3 carbon

	    - total size: 320

	    320 ------ 4
		fabricado ------ x

		320 seg ----- 7 rocas
	    1 seg ----- x =

	    320 --------- 4
	    fabricado ----- x
*/

stock ActualizarHornosBlackAso()
{
	Loop(i, MAX_HORNOS_BLACKASO, 0)
	{
		if(InfoHornoBlackAso[i][hornoEncendido])
		{
		    new
		        Float: carbon = InfoHornoBlackAso[i][hornoCarbon],
		        Float: hecho = InfoHornoBlackAso[i][hornoHecho],
		        Float: metal = InfoHornoBlackAso[i][hornoMetal];

			if(carbon)
			{
				if(metal)
				{
				    metal -= 0.0125;
				    hecho += 1.0;
				}
				carbon -= 0.014;
			}
			else
			{
				InfoHornoBlackAso[i][hornoEncendido] = false;
			    //BorrarFuegoHornoBigFoot(i);
			}
			// No valores negativos
		    if(carbon < 0.0)
		        carbon = 0.0;

		    if(metal < 0.0)
		        metal = 0.0;

			if(hecho > InfoHornoBlackAso[i][hornoPorHacer])
			    hecho = InfoHornoBlackAso[i][hornoPorHacer];

			InfoHornoBlackAso[i][hornoCarbon] = carbon;
			InfoHornoBlackAso[i][hornoMetal] = metal;
			InfoHornoBlackAso[i][hornoHecho] = hecho;
			ActualizarLabelHornoBlackAso(i);
		}
	}
	return 1;
}

stock Rand(min,max)
{
    new TotalAm = min+(max/min)+random(max-min);
    if(TotalAm > max) TotalAm = max;
    if(TotalAm < min) TotalAm = min;
	return TotalAm;
}

stock GetVehType(vehicleid)
{
	new
	    VehModel = GetVehicleModel(vehicleid);

	if( 400 <= VehModel <= 611 )
	{
		switch(VehModel)
		{
		    case 417, 425, 447, 460, 469, 476, 487, 488, 497, 511, 512, 513, 519, 520, 548, 553, 563, 577, 592, 593:
		    {
		        return VEHICLE_TYPE_AIRCRAFT;
			}
			case 481, 509, 510:
			{
			    return VEHICLE_TYPE_BICYCLE;
			}
			case 448, 461, 462, 463, 468, 471, 521, 522, 523, 581, 586:
			{
			    return VEHICLE_TYPE_BIKE;
			}
			case 430, 446, 452, 453, 454, 472, 473, 484, 493, 595:
			{
			    return VEHICLE_TYPE_BOAT;
			}
			case 449, 537, 538, 569, 570, 590:
			{
			    return VEHICLE_TYPE_TRAIN;
			}
			case 441, 465, 501, 564, 594:
			{
			    return VEHICLE_TYPE_OTHER;
			}
			default:
			{
			    return VEHICLE_TYPE_CAR;
			}
		}
	}
	return VEHICLE_TYPE_UNKNOWN;
}

stock alm(string[],string2[])
{
	new
	    len = strlen(string2);

	strmid(string, string2, 0, len, len+1);
	return 1;
}

stock CargarGasolina_P(playerid, litros)
{
	new
	    VehID = GetPlayerVehicleID(playerid);

	SetPVarInt(playerid, "Litros_por_cargar", int(veh_getFuel(VehID))+litros);

	KillTimer2(playerid, TIMER_CARGANDOCOMB);
	Timer_Jugador[playerid][TIMER_CARGANDOCOMB] = SetTimerEx("CargarCombustible", 1013 * 2, true, "i", playerid);
	AutoRol(playerid, "comienza a llenar el tanque de su vehículo");
	SetPVarInt(playerid, "CargandoComb", true);

	new
	    str[10],
	    MaxFuel = veh_getMaxFuel(VehID);

    // Barras de progreso
	if(BGasolimetro[playerid] == INVALID_PLAYER_BAR_ID)
	{
	    BGasolimetro[playerid] = CreatePlayerProgressBar(playerid, 536.00, 429.00, 78.50, 1.50, C_BARRA_GASOLIMETRO, MaxFuel);
	}
	else
	{
		SetPlayerProgressBarMaxValue(playerid, BGasolimetro[playerid], MaxFuel);
	}

	A_Format(str, "%d/%d", int(veh_getFuel(VehID)), MaxFuel);

	SetPlayerProgressBarValue(playerid, BGasolimetro[playerid], int(veh_getFuel(VehID)));
	ShowPlayerProgressBar(playerid, BGasolimetro[playerid]);

	if(TDGasolimetro[playerid] == PlayerText:INVALID_TEXT_DRAW)
	{
		TDGasolimetro[playerid] = CreatePlayerTextDraw(playerid, 552.999023, 410.919982, str);
		PlayerTextDrawLetterSize(playerid, TDGasolimetro[playerid], 0.413199, 1.301331);
		PlayerTextDrawAlignment(playerid, TDGasolimetro[playerid], 1);
		PlayerTextDrawColor(playerid, TDGasolimetro[playerid], -1);
		PlayerTextDrawSetShadow(playerid, TDGasolimetro[playerid], 0);
		PlayerTextDrawSetOutline(playerid, TDGasolimetro[playerid], 0);
		PlayerTextDrawBackgroundColor(playerid, TDGasolimetro[playerid], 51);
		PlayerTextDrawFont(playerid, TDGasolimetro[playerid], 1);
		PlayerTextDrawSetProportional(playerid, TDGasolimetro[playerid], 1);
	}
	PlayerTextDrawShow(playerid, TDGasolimetro[playerid]);
	TextDrawShowForPlayer(playerid, TDGasolimetroBOX);
	TextDrawShowForPlayer(playerid, TDGasolimetroTXT);
	TextDrawShowForPlayer(playerid, TDGasolimetroFondo);
	return 1;
}

CALLBACK: CargarCombustible(playerid)
{
	new
		VehID = GetPlayerVehicleID(playerid),
		est_id = GetPVarInt(playerid, "ID_Estacion");

	if(VehID == 0)
	{
	    Mensaje(playerid, -1, "No está dentro de un vehículo.");

		//Actualizar surtidor
		CambiarLitrosEstacion(est_id, 0, true);
	    return CancelarCargaCombustible(playerid);
	}
	if(int(veh_getFuel(VehID)) < GetPVarInt(playerid, "Litros_por_cargar"))
	{
		if(GetPlayerMoney(playerid) < PRECIO_GASOLINA)
		{
			Mensaje(playerid, -1, "No tienes suficiente dinero como para continuar comprando combustible.");
			CancelarCargaCombustible(playerid);

			//Actualizar surtidor
			CambiarLitrosEstacion(est_id, 0, true);
			return 1;
		}
		else
		{
		    if(!InfoEstacion[est_id][estLitros])
		    {
		        Error(playerid, "El surtidor no tiene más combustible.");
				CancelarCargaCombustible(playerid);
				return 1;
			}

			if(InfoEstacion[est_id][estNegID])
			{
			    InfoNegocio[InfoEstacion[est_id][estNegID]][nDinero] += PRECIO_GASOLINA;
			}

			new
			    str[8];

			veh_setFuel(VehID, veh_getFuel(VehID)+1);
			QuitarDinero(playerid, PRECIO_GASOLINA);

			//TD
			A_Format(str, "%d/%d", int(veh_getFuel(VehID)), veh_getMaxFuel(VehID));
			PlayerTextDrawSetString(playerid, TDGasolimetro[playerid], str);

			//Barra
			SetPlayerProgressBarValue(playerid, BGasolimetro[playerid], veh_getFuel(VehID));
			ShowPlayerProgressBar(playerid, BGasolimetro[playerid]);

			//Actualizar surtidor
			CambiarLitrosEstacion(est_id, -1);
			return 1;
		}
	}
	else
	{
	    MensajeF(playerid, -1, "Servicio: El tanque ya está lleno. ¡Que tenga buen día!");
		CancelarCargaCombustible(playerid);

		//Actualizar surtidor
		CambiarLitrosEstacion(est_id, 0, true);
		return 1;
	}
}

stock CancelarCargaCombustible(playerid)
{
	Descongelar(playerid);
	KillTimer2(playerid,TIMER_CARGANDOCOMB);
	DeletePVar(playerid,"CargandoComb");
	DeletePVar(playerid,"Litros_por_cargar");
	DeletePVar(playerid,"ID_Estacion");
	if(IsPlayerInAnyVehicle(playerid))
	{
		SacarVelocimetro(playerid);
	}
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	SetVehicleHealth(vehicleid, 1000.0);

	for(new i; i < sizeof(VehConSirena); i++)
	{
	    if(vehicleid == VehConSirena[i])
	    {
			if(SirenaVeh[i] != INVALID_OBJECT_ID)
			{
			    DestroyObject(SirenaVeh[i]);
			    SirenaVeh[i] = INVALID_OBJECT_ID;
				break;
			}
		}
	}

	if(EsVehRenta(vehicleid))
	{
		if(VehRentado[vehicleid])
		{
			foreach(Player,i)
  			{
	    	    if(GetPVarInt(i,"RentoVehID") == vehicleid)
	    	    {
	    	        DeletePVar(i,"RentoVehID");
	    	        Mensaje(i,-1,"El vehículo que habias rentado, fue devuelto.");
				}
			}
		}
		VehRentado[vehicleid] = 0;
		return 1;
	}
	else if(EsCamion(vehicleid))
	{
	    foreach(Player,i)
	    {
	        if(EsCamionero(i))
	        {
	            if(GetPVarInt(i,"Chofer_Camion") == vehicleid)
	            {
	                Error(i,"Fallaste tu misión de camionero, perdiste el camión.");
					DeletePVar(i,"Chofer_Camion");
					DeletePVar(i,"NivelCamionero");
					DeletePVar(i,"PasoEntrega");
				}
			}
		}
		strclr(InfoCamion[vehicleid][camChofer]);
		InfoCamion[vehicleid][camCarga] = 0;
		return 1;
	}
	else if(EsCosechadora(vehicleid))
	{
	    foreach(Player,i)
	    {
	        if(EsCosechador(i))
	        {
	            if(GetPVarInt(i,"EstaCultivando") == vehicleid)
				{
				    Error(i,"¡Fallaste tu trabajo de cosechador!");
				    DeletePVar(i,"EstaCultivando");
				    DeletePVar(i,"ParteCosecha");
					if (IsPlayerWhitSpecialBar (i))
					{
					    DestroyPlayerSpecialBar (i);
					}
					DisablePlayerRaceCheckpoint(i);
				}
			}
		}
	}

	foreach(Player,i)
	{
		if(GetPVarInt(i,"CAMION_BASURA") == vehicleid)
		{
			DeletePVar(i,"TerminoBasura");
			DeletePVar(i,"CAMION_BASURA");
			DeletePVar(i,"B_ParteLimpieza");
			return 1;
		}
	}

	Loop(i, 20, 0)
	{
	    if(VehPrueba[i] != INVALID_VEHICLE_ID)
	    {
		    if(VehPrueba[i] == vehicleid)
		    {
	        	veh_destroy(vehicleid);
				VehPrueba[i] = INVALID_VEHICLE_ID;
				foreach(Player,p)
				{
					if(GetPVarInt(p, "ESTADIO_VEHID") == vehicleid)
					{
						DeletePVar(p, "ESTADIO_VEHID");
						break;
					}
				}
	            break;
			}
		}
	}

	foreach (Player, i)
	{
	    if (PlayerBools [i] & e_LICENCIA)
	    {
	        if (PlayerTempData [i][e_VEH_LICENCIA] == vehicleid)
	        {
	            CancelLicense (i);
			}
		}
	}

	return 1;
}

// MENSAJES
#define BYTES_PER_CELL              4

//STATIC
stock MensajeTodos (color, const string[])
{
	foreach (Player, i)
	{
	    if (LoginTime [i])
	    {
	        Mensaje (i, color, string);
		}
	}
	return 1;
}

stock MensajeAdmin (color, const message[], nivel)
{
	foreach(Player, i)
	{
		if (LoginTime [i])
		{
			if (InfoJugador[i][jAdmin] >= nivel && !(PlayerBools [i] & e_NOAC))
			{
				Mensaje (i, color, message);
			}
		}
	}
}

stock MensajeFaccion (facid, const message[])
{
	foreach(Player,i)
	{
		if (LoginTime [i])
		{
		    if (InfoJugador[i][jLider] == facid || InfoJugador[i][jMiembro] == facid)
			{
		    	Mensaje (i, -1, message);
			}
		}
	}
}

stock MensajeFamilia (famid, const message[])
{
	foreach(Player,i)
	{
		if (LoginTime [i])
		{
		    if (InfoJugador[i][jLiderFam] == famid || InfoJugador[i][jMiembroFam] == famid)
			{
		    	Mensaje (i, -1, message);
			}
		}
	}
}

stock MensajeFrecuencia (frequence, message[], playerid, exceptplayer = true)
{
	new
	    string_freq[140],
		inv_wt = GOAT(INV_WALKIETALKIE);

	A_Format(string_freq, "[Frecuencia %d] "#CBLANCO"%s: %s", frequence, NombreJugador_(playerid), message);

	foreach(Player, i)
	{
	    if(GetObject(i) == inv_wt)
	    {
	        if(GetObjectData(i) == frequence)
	        {
	            if(exceptplayer && playerid != i)
					Mensaje(i, C_WALKIETALKIE, string_freq);

				else
					Mensaje(i, C_WALKIETALKIE, string_freq);

				continue;
			}
		}
	    if(InfoJugador[i][jObjetoColgado] == inv_wt)
	    {
	        if(InfoJugador[i][jObjetoColgadoData] == frequence)
	        {
	            if(exceptplayer && playerid != i)
					Mensaje(i, C_WALKIETALKIE, string_freq);

				else
					Mensaje(i, C_WALKIETALKIE, string_freq);

				continue;
			}
		}
	}
	return 1;
}

stock ReportBug2(const description[])
{
	new
	    File: Arch = fopen ("Bugs.txt", io_append),
		string [144],
		date [3],
		time [3];
		
	getdate(date [0], date [1], date [2]);
	gettime(time [0], time [1], time [2]);
	
	format(string, sizeof(string), "[%d/%d/%d - %d:%d:%d] %s\r\n", date [2], date [1], date [0], time [0], time [1], time [2], description);
	fwrite (Arch, string);
	
	fclose (Arch);
	
	MensajeAdmin (-1, description, Dueno);
	return 1;
}

//DYNAMIC
stock ReportBug(fstring[], {Float, _}:...)
{
	// by Y_Less
    static const STATIC_ARGS = 1;
    new n = (numargs() - STATIC_ARGS) * BYTES_PER_CELL;
    if(n)
    {
        new message[144],arg_start,arg_end;
        #emit CONST.alt        fstring
        #emit LCTRL          5
        #emit ADD
        #emit STOR.S.pri        arg_start

        #emit LOAD.S.alt        n
        #emit ADD
        #emit STOR.S.pri        arg_end
        do
        {
            #emit LOAD.I
            #emit PUSH.pri
            arg_end -= BYTES_PER_CELL;
            #emit LOAD.S.pri      arg_end
        }
        while(arg_end > arg_start);

        #emit PUSH.S          fstring
        #emit PUSH.C          144
        #emit PUSH.ADR         message

        n += BYTES_PER_CELL * 3;
        #emit PUSH.S          n
        #emit SYSREQ.C         format

        n += BYTES_PER_CELL;
        #emit LCTRL          4
        #emit LOAD.S.alt        n
        #emit ADD
        #emit SCTRL          4

		ReportBug2 (message);
    }
	else
	{
		ReportBug2 (fstring);
    }
    return 1;
}

stock MensajeFamiliaF(famid, fstring[], {Float, _}:...)
{
	// by Y_Less
    static const STATIC_ARGS = 2;
    new n = (numargs() - STATIC_ARGS) * BYTES_PER_CELL;
    if(n)
    {
        new message[144],arg_start,arg_end;
        #emit CONST.alt        fstring
        #emit LCTRL          5
        #emit ADD
        #emit STOR.S.pri        arg_start

        #emit LOAD.S.alt        n
        #emit ADD
        #emit STOR.S.pri        arg_end
        do
        {
            #emit LOAD.I
            #emit PUSH.pri
            arg_end -= BYTES_PER_CELL;
            #emit LOAD.S.pri      arg_end
        }
        while(arg_end > arg_start);

        #emit PUSH.S          fstring
        #emit PUSH.C          144
        #emit PUSH.ADR         message

        n += BYTES_PER_CELL * 3;
        #emit PUSH.S          n
        #emit SYSREQ.C         format

        n += BYTES_PER_CELL;
        #emit LCTRL          4
        #emit LOAD.S.alt        n
        #emit ADD
        #emit SCTRL          4

		MensajeFamilia (famid, message);
    }
	else
	{
		MensajeFamilia (famid, fstring);
    }
    return 1;
}

stock MensajeTodosF(color, fstring[], {Float, _}:...)
{
	// by Y_Less
    static const STATIC_ARGS = 2;
    new n = (numargs() - STATIC_ARGS) * BYTES_PER_CELL;
    if(n)
    {
        new message[144],arg_start,arg_end;
        #emit CONST.alt        fstring
        #emit LCTRL          5
        #emit ADD
        #emit STOR.S.pri        arg_start

        #emit LOAD.S.alt        n
        #emit ADD
        #emit STOR.S.pri        arg_end
        do
        {
            #emit LOAD.I
            #emit PUSH.pri
            arg_end -= BYTES_PER_CELL;
            #emit LOAD.S.pri      arg_end
        }
        while(arg_end > arg_start);

        #emit PUSH.S          fstring
        #emit PUSH.C          144
        #emit PUSH.ADR         message

        n += BYTES_PER_CELL * 3;
        #emit PUSH.S          n
        #emit SYSREQ.C         format

        n += BYTES_PER_CELL;
        #emit LCTRL          4
        #emit LOAD.S.alt        n
        #emit ADD
        #emit SCTRL          4

		MensajeTodos (color, message);
    }
	else
	{
		MensajeTodos (color, fstring);
    }
    return 1;
}

stock MensajeFaccionF(facid, fstring[], {Float, _}:...)
{
	// by Y_Less
    static const STATIC_ARGS = 2;
    new n = (numargs() - STATIC_ARGS) * BYTES_PER_CELL;
    if(n)
    {
        new message[144],arg_start,arg_end;
        #emit CONST.alt        fstring
        #emit LCTRL          5
        #emit ADD
        #emit STOR.S.pri        arg_start

        #emit LOAD.S.alt        n
        #emit ADD
        #emit STOR.S.pri        arg_end
        do
        {
            #emit LOAD.I
            #emit PUSH.pri
            arg_end -= BYTES_PER_CELL;
            #emit LOAD.S.pri      arg_end
        }
        while(arg_end > arg_start);

        #emit PUSH.S          fstring
        #emit PUSH.C          144
        #emit PUSH.ADR         message

        n += BYTES_PER_CELL * 3;
        #emit PUSH.S          n
        #emit SYSREQ.C         format

        n += BYTES_PER_CELL;
        #emit LCTRL          4
        #emit LOAD.S.alt        n
        #emit ADD
        #emit SCTRL          4

		MensajeFaccion (facid, message);
    }
	else
	{
		MensajeFaccion (facid, fstring);
    }
    return 1;
}

stock logF(color[], fstring[], {Float, _}:...)
{
    static const STATIC_ARGS = 2;
    new n = (numargs() - STATIC_ARGS) * BYTES_PER_CELL;
    if(n)
    {
        new message[144],arg_start,arg_end;
        #emit CONST.alt        fstring
        #emit LCTRL          5
        #emit ADD
        #emit STOR.S.pri        arg_start

        #emit LOAD.S.alt        n
        #emit ADD
        #emit STOR.S.pri        arg_end
        do
        {
            #emit LOAD.I
            #emit PUSH.pri
            arg_end -= BYTES_PER_CELL;
            #emit LOAD.S.pri      arg_end
        }
        while(arg_end > arg_start);

        #emit PUSH.S          fstring
        #emit PUSH.C          144
        #emit PUSH.ADR         message

        n += BYTES_PER_CELL * 3;
        #emit PUSH.S          n
        #emit SYSREQ.C         format

        n += BYTES_PER_CELL;
        #emit LCTRL          4
        #emit LOAD.S.alt        n
        #emit ADD
        #emit SCTRL          4

		Log(color, message);
    }
	else
	{
		Log(color, fstring);
    }
    return 1;
}
stock MensajeAdminF2(color, rank, fstring[], {Float, _}:...)
{
	// by Y_Less
    static const STATIC_ARGS = 3;
    new n = (numargs() - STATIC_ARGS) * BYTES_PER_CELL;
    if(n)
    {
        new message[144],arg_start,arg_end;
        #emit CONST.alt        fstring
        #emit LCTRL          5
        #emit ADD
        #emit STOR.S.pri        arg_start

        #emit LOAD.S.alt        n
        #emit ADD
        #emit STOR.S.pri        arg_end
        do
        {
            #emit LOAD.I
            #emit PUSH.pri
            arg_end -= BYTES_PER_CELL;
            #emit LOAD.S.pri      arg_end
        }
        while(arg_end > arg_start);

        #emit PUSH.S          fstring
        #emit PUSH.C          144
        #emit PUSH.ADR         message

        n += BYTES_PER_CELL * 3;
        #emit PUSH.S          n
        #emit SYSREQ.C         format

        n += BYTES_PER_CELL;
        #emit LCTRL          4
        #emit LOAD.S.alt        n
        #emit ADD
        #emit SCTRL          4

        MensajeAdmin(color, message, rank);
    }
	else
	{
        MensajeAdmin(color, fstring, rank);
    }
    return 1;
}

stock MensajeF(playerid, color, fstring[], {Float, _}:...)
{
	// by Y_Less
    static const STATIC_ARGS = 3;
    new n = (numargs() - STATIC_ARGS) * BYTES_PER_CELL;
    if(n)
    {
        new message[144],arg_start,arg_end;
        #emit CONST.alt        fstring
        #emit LCTRL          5
        #emit ADD
        #emit STOR.S.pri        arg_start

        #emit LOAD.S.alt        n
        #emit ADD
        #emit STOR.S.pri        arg_end
        do
        {
            #emit LOAD.I
            #emit PUSH.pri
            arg_end -= BYTES_PER_CELL;
            #emit LOAD.S.pri      arg_end
        }
        while(arg_end > arg_start);

        #emit PUSH.S          fstring
        #emit PUSH.C          144
        #emit PUSH.ADR         message

        n += BYTES_PER_CELL * 3;
        #emit PUSH.S          n
        #emit SYSREQ.C         format

        n += BYTES_PER_CELL;
        #emit LCTRL          4
        #emit LOAD.S.alt        n
        #emit ADD
        #emit SCTRL          4

        SendClientMessage(playerid, color, message);
    }
	else
	{
 		SendClientMessage(playerid, color, fstring);
    }
    return 1;
}

stock MensajeF_test(playerid, color, fstring[], {Float, _}:...)
{
	// by Y_Less
    static const STATIC_ARGS = 3;
    new n = (numargs() - STATIC_ARGS) * BYTES_PER_CELL;
    if(n)
    {
        static message[144],arg_start,arg_end;
        message[0] = '\0';
        #emit CONST.alt        fstring
        #emit LCTRL          5
        #emit ADD
        #emit STOR.S.pri        arg_start

        #emit LOAD.S.alt        n
        #emit ADD
        #emit STOR.S.pri        arg_end
        do
        {
            #emit LOAD.I
            #emit PUSH.pri
            arg_end -= BYTES_PER_CELL;
            #emit LOAD.S.pri      arg_end
        }
        while(arg_end > arg_start);

        #emit PUSH.S          fstring
        #emit PUSH.C          144
        #emit PUSH.ADR         message

        n += BYTES_PER_CELL * 3;
        #emit PUSH.S          n
        #emit SYSREQ.C         format

        n += BYTES_PER_CELL;
        #emit LCTRL          4
        #emit LOAD.S.alt        n
        #emit ADD
        #emit SCTRL          4

        SendClientMessage(playerid, color, message);
    }
	else
	{
 		SendClientMessage(playerid, color, fstring);
    }
    return 1;
}

// ----==== [ Miembros/Lideres Facciones ] ===--- //

stock EsLSPD(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(InfoJugador[playerid][jMiembro] | InfoJugador[playerid][jLider] == IDLSPD)
		{
		    return 1;
		}
	}
	return 0;
}

stock EsMilitar(playerid)
{
	if(InfoJugador[playerid][jMiembro] | InfoJugador[playerid][jLider] == IDLSEM)
	{
  		return 1;
	}
	return 0;
}

stock EsMedico(playerid)
{
	if(InfoJugador[playerid][jMiembro] | InfoJugador[playerid][jLider] == IDLSMD)
	{
 		return 1;
	}
	return 0;
}

stock EsReportero(playerid)
{
	if(InfoJugador[playerid][jMiembro] | InfoJugador[playerid][jLider] == IDLSTV)
	{
 		return 1;
	}
	return 0;
}

stock EsMecanico(playerid)
{
	if(InfoJugador[playerid][jMiembro] | InfoJugador[playerid][jLider] == IDMECANICOS)
	{
 		return 1;
	}
	return 0;
}

stock EsDelGobierno(playerid)
{
	if(InfoJugador[playerid][jMiembro] | InfoJugador[playerid][jLider] == IDGOBIERNO)
	{
 		return 1;
	}
	return 0;
}

stock EsPresidente(playerid)
{
	if(InfoJugador[playerid][jLider] == IDGOBIERNO)
	{
 		return 1;
	}
	return 0;
}

stock EsCamionero(playerid)
{
	if(InfoJugador[playerid][jTrabajo] == ID_Camionero) return 1;
	return 0;
}

stock EsCosechador(playerid)
{
	if(InfoJugador[playerid][jTrabajo] == ID_Cosechador) return 1;
	return 0;
}

stock EsBasurero(playerid)
{
	if(InfoJugador[playerid][jTrabajo] == ID_Basurero) return 1;
	return 0;
}

stock EsLadron(playerid)
{
	if(InfoJugador[playerid][jTrabajo] == ID_Ladron) return 1;
	return 0;
}

stock EsHitman(playerid)
{
	if(InfoJugador[playerid][jMiembro] | InfoJugador[playerid][jLider] == IDHITMAN)
	{
 		return 1;
	}
	return 0;
}

stock EsVehRenta(vehid)
	return (vehid >= MIN_VEH_RENTA && vehid <= MAX_VEH_RENTA);

stock EsVehLSPD(vehid)
	return (veh_getFaction(vehid) == IDLSPD);

stock EsVehLSEM(vehid)
	return (veh_getFaction(vehid) == IDLSEM);

stock EsVehLSMD(vehid)
	return (veh_getFaction(vehid) == IDLSMD);

stock EsCamion(vehid)
	return (veh_getJob(vehid) == ID_Camionero);

stock EsTaxi(vehid)
	return (veh_getJob(vehid) == ID_Taxista);

stock EsCosechadora(vehid)
	return (veh_getJob(vehid) == ID_Cosechador);

stock EsVehLSTV(vehid)
	return (veh_getFaction(vehid) == IDLSTV);

stock EsVehMecanicos(vehid)
	return (veh_getFaction(vehid) == IDMECANICOS);

stock EsBiciRepartidora(vehid)
	return (veh_getJob(vehid) == ID_RepartidorB);

stock EsVehBasurero(vehid)
	return (veh_getJob(vehid) == ID_Basurero);

stock EsVehGob(vehid)
	return (veh_getFaction(vehid) == IDGOBIERNO);

stock EsVehHIT(vehid)
	return (veh_getFaction(vehid) == IDHITMAN);

// -----------==============[ Nombre faccion ]============--------- //

stock NombreFaccion(idfaccion)
{
	new NFaccion[11];
	switch(idfaccion)
	{
		case IDLSPD: 		NFaccion = "Policia";
		case IDLSEM: 		NFaccion = "Ejército";
		case IDLSMD: 		NFaccion = "Hospital";
		case IDLSTV: 		NFaccion = "Televisión";
		case IDMECANICOS:	NFaccion = "Mecánicos";
		case IDGOBIERNO: 	NFaccion = "Gobierno";
		case IDHITMAN:      NFaccion = "Hitman";
		case IDCAMIONEROS:  NFaccion = "Camioneros";
	}
	return NFaccion;
}

stock NombreCarga(carga)
{
	new cargan[18];
	switch(carga)
	{
	    case 0: cargan = "Nada";
	    case CAR_ROPA: cargan = "Ropa";
	    case CAR_PRODUCTOS: cargan = "Productos varios";
	    case CAR_COMIDA: cargan = "Comida y bebida";
	    case 435: cargan = "Comida";
	    case 450: cargan = "Tierra";
	    case 591: cargan = "Granos";
	}
	return cargan;
}

// -----------==============[ Otras funciones ]============--------- //

GetWeekDay(day=0, month=0, year=0)
{
	if (!day)
		getdate(year, month, day);

	new
		j,
		e;

	if (month <= 2)
	{
		month += 12;
		--year;
	}

	j = year % 100;
	e = year / 100;

	//Sábado (Empieza)

	return ((day + (month+1)*26/10 + j + j/4 + e/4 - 2*e) % 7) +1;
}

stock ActualizarHora()
{
    gettime(Hora, Minuto);

	new
		year_,
		month_,
		day_;

	getdate(year_,month_,day_);

	CEL.UpdateHour(Hora, Minuto);

	new
	    Day = GetWeekDay(day_, month_, year_);

	new
	    string[20];

	A_Format(string, "worldtime %02d:%02d", Hora, Minuto);
	SendRconCommand(string);

	foreach(Player, x)
	{
	    if(PlayerTime[x] == -1)
	    {
 			SetPlayerTime(x, Hora, Minuto);
		}
	}

	A_Format(string, "~b~~h~~h~%02d:%02d", Hora, Minuto);
	TextDrawSetString(TDHora, string);

	if(Hora == 0 && Minuto == 0) // OP:PC
	{
	    Loop(i, MAX_NEGOCIOS, 0)
	    {
	        Loop(stocke, MAX_STOCK_NEGOCIO, 0)
	        {
	            InfoNegocio[i][nVentaStock][stocke] = 0;
			}
		}
	}

	switch(Hora)
	{
	    case 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24:
		{
		    if(!PuedenRecibirSubsidio)
		    {
				AnuncioGobernamental("Ya se comenzaron a entregar los subsidios, porfavor presentarse en el banco entre los próximos 20 minutos.");
				PuedenRecibirSubsidio = true;

				// Borrar registros de subsidios
				opmysql_pquery("DELETE FROM Subsidios", "", "");
			}
		}
		default:
		{
			PuedenRecibirSubsidio = false;
		}
	}
	
	if(Day == 1 && Hora == 17)
	{
		if(!IsValidObject(ObjetosBarco[0]))
		{
		    ImportarArmas();
		}
	}

	return 1;
}

stock IsPayTime()
{
	new
	    Hora_, Min;

	gettime(Hora_, Min);

	if( !EsHoraPar(Hora_) || (Min > 20))
		return 0;

	return 1;
}

stock EsHoraPar(hora)
{
	for(new i; i < 24; i+=2)
	{
	    if(i == hora)
	        return 1;
	}
	return 0;
}

stock CrearCamilla(Float:x, Float:y, Float:z, Float:rz)
{
	static
	    i;

	InfoCamilla[i][camiObjID] = CreateObject(2146, x, y, z, 0.0, 0.0, rz);
	InfoCamilla[i][camiUsadaPor] = INVALID_PLAYER_ID;

	i++;
	return 1;
}

stock HabilitarBarco()
{
	MensajeFaccion(IDLSEM, ""#CVERDE"[Puerto de Liberty City] "#CBLANCO"El bunque Tucanic llegó al puerto de Ocean Docks con la mercancía.");
	MensajeFaccion(IDLSEM, ""#CVERDE"[Puerto de Liberty City] "#CBLANCO"La embarcación se retirará en dos horas aproximadamente.");
	BarcoImportaciones(5);
	BarcoImportaciones(4);
	SetTimer("AjustarBarco", 10000, false);
	SetTimerEx("VolverBarco", (1000 * 60 * 60) * 2, false, "i", 0);
	return 1;
}

CALLBACK: AjustarBarco()
{
	BarcoImportaciones(6);
}

CALLBACK: VolverBarco(type)
{
	if(type == 0)
	{
		MensajeFaccion(IDLSEM, ""#CVERDE"[Puerto de Liberty City] "#CBLANCO"La embarcación se retirará en 15 minutos.");
		SetTimerEx("VolverBarco", (1000 * 60) * 15, false, "i", 1);
	}
	else if(type == 1)
	{
		MensajeFaccion(IDLSEM, ""#CVERDE"[Puerto de Liberty City] "#CBLANCO"La embarcación se retirará en 10 minutos.");
		SetTimerEx("VolverBarco", (1000 * 60) * 5, false, "i", 2);
	}
	else if(type == 2)
	{
		MensajeFaccion(IDLSEM, ""#CVERDE"[Puerto de Liberty City] "#CBLANCO"La embarcación se retirará en 5 minutos.");
		SetTimerEx("VolverBarco", (1000 * 60) * 2, false, "i", 3);
	}
	else if(type == 3)
	{
		MensajeFaccion(IDLSEM, ""#CVERDE"[Puerto de Liberty City] "#CBLANCO"La embarcación se retirará en 3 minutos.");
		SetTimerEx("VolverBarco", (1000 * 60) * 2, false, "i", 4);
	}
	else if(type == 4)
	{
		MensajeFaccion(IDLSEM, ""#CVERDE"[Puerto de Liberty City] "#CBLANCO"La embarcación se retirará en 1 minuto.");
		SetTimerEx("VolverBarco", (1000 * 30), false, "i", 5);
	}
	else if(type == 5)
	{
		MensajeFaccion(IDLSEM, ""#CVERDE"[Puerto de Liberty City] "#CBLANCO"La embarcación se retirará en 30 segundos.");
		SetTimerEx("VolverBarco", (1000 * 25), false, "i", 6);
	}
	else if(type == 6)
	{
		MensajeFaccion(IDLSEM, ""#CVERDE"[Puerto de Liberty City] "#CBLANCO"La embarcación se retirará en 5 segundos.");
		SetTimerEx("VolverBarco", (1000 * 5), false, "i", 7);
	}
	else if(type == 7)
	{
		MensajeFaccion(IDLSEM, ""#CVERDE"[Puerto de Liberty City] "#CBLANCO"El buque Tucanic se está retirando.");
		BarcoImportaciones(5);
		BarcoImportaciones(2);
	}
	return 1;
}

public OnObjectMoved(objectid)
{
	if(objectid == ObjetosBarco[0])
	{
	    new
	        Float:x, Float:y, Float:z;

		GetObjectPos(ObjetosBarco[0], x, y, z);
		if(x == 2842.54443 && y == -2427.86426 && z == 15.64320) // Llegó al puerto
		{
			HabilitarBarco();
			return 1;
		}
		else
		{
			BarcoImportaciones(3);
			// Hitman
			LlenarDepositoHitman();
			return 1;
		}
	}
	return 1;
}

stock LlenarDepositoHitman()
{
	HIT_AWP = 18;
	HIT_C_AWP = 24;
	HIT_SILENCED = 16;
	HIT_C_SILENCED = 32;
	ActualizarArmeriaHitman();
	MensajeFaccion (IDHITMAN, ""#CNARANJA"[Facción] "#CBLANCO"La armería fue rellenada con armas.");
	return 1;
}

stock ImportarArmas()
{
	BarcoImportaciones(0);
	BarcoImportaciones(1);
	MensajeFaccion(IDLSEM, ""#CVERDE"[Puerto de Liberty City] "#CBLANCO"El buque "#CROJO"Tucanic "#CBLANCO"se dirige al puerto de "#CNARANJA"Ocean Docks "#CBLANCO"cargado con armas.");
	return 1;
}

stock BarcoImportaciones(toggle, Float:speed = 5.0)
{
	new
	    Float: distancia_barco = 1300.0;

	if(toggle == 0) // crear barco (En quien sabe donde)
	{
	    if(ObjetosBarco[0] != INVALID_OBJECT_ID)
	        BarcoImportaciones(3);

	    // Objeto General
		ObjetosBarco[0] = CreateObject(3624, 2842.54443, -2427.86426 - (distancia_barco), 15.64320,   0.00000, 0.00000, 180.00000, 1000.0);
		ObjetosBarco[1] = CreateObject(5156, 2839.85938, -2424.50830 - (distancia_barco), 10.96090,   0.00000, 0.00000, 270.00000, 1000.0);
		ObjetosBarco[2] = CreateObject(5160, 2831.76685, -2480.19312 - (distancia_barco), 5.26560,  0.00000, 0.00000, 270.00000, 1000.0);
		ObjetosBarco[3] = CreateObject(5166, 2831.77612, -2480.19092 - (distancia_barco), 5.26560,   0.00000, 0.00000, 270.00000, 1000.0);
		ObjetosBarco[4] = CreateObject(5157, 2839.87231, -2533.39624 - (distancia_barco), 17.02340,   0.00000, 0.00000, 270.00919, 1000.0);
		ObjetosBarco[5] = CreateObject(5167, 2839.84155, -2372.59619 - (distancia_barco), 7.29690,   0.00000, 0.00000, 270.00000, 1000.0);
		ObjetosBarco[6] = CreateObject(5155, 2839.8569, -2348.1560 - (distancia_barco), 21.31250,   0.00000, 0.00000, 270.00000, 1000.0);
		ObjetosBarco[7] = CreateObject(5154, 2840.01416, -2448.29932 - (distancia_barco), 15.75000,   0.00000, 0.00000, 90.00001, 1000.0);
		ObjetosBarco[8] = CreateObject(3574, 2832.84204, -2375.42676 - (distancia_barco), 13.43290,   0.00000, 0.00000, 0.00000, 1000.0);
		ObjetosBarco[9] = CreateObject(3574, 2845.99219, -2372.84253 - (distancia_barco), 13.43290,   0.00000, 0.00000, 0.00000, 1000.0);
		ObjetosBarco[10] = CreateObject(3574, 2843.22485, -2427.96606 - (distancia_barco), 13.43290,   0.00000, 0.00000, 0.00000, 1000.0);
		ObjetosBarco[11] = CreateObject(3574, 2831.6174, -2389.8313 - (distancia_barco), 13.43290,   0.00000, 0.00000, 90.00000, 1000.0);
		ObjetosBarco[12] = CreateObject(3574, 2849.5747, -2393.8306 - (distancia_barco), 13.43290,   0.00000, 0.00000, 90.00000, 1000.0);
	}
	else if(toggle == 1) // mover barco
	{
		for(new i; i < sizeof(ObjetosBarco); i++)
		{
		    new
		        Float:x, Float:y, Float:z;

			GetObjectPos(ObjetosBarco[i], x, y, z);
			y += distancia_barco;
			MoveObject(ObjetosBarco[i], x, y, z, speed);
		}
	}
	else if(toggle == 2) // volver barco
	{
		for(new i; i < sizeof(ObjetosBarco); i++)
		{
		    new
		        Float:x, Float:y, Float:z;

			GetObjectPos(ObjetosBarco[i], x, y, z);
			y -= distancia_barco;
			MoveObject(ObjetosBarco[i], x, y, z, speed);
		}
	}
	else if(toggle == 3) // borrar barco
	{
	    for(new i; i < sizeof(ObjetosBarco); i++)
	    {
	        DestroyObject(ObjetosBarco[i]);
	        ObjetosBarco[i] = INVALID_OBJECT_ID;
		}
	}
	else if(toggle == 4) // crear armas
	{
	    // Cachiporra
		CrearObjetoTirado(CajaDeArmas(3), 32, 2834.7576, -2385.4146, 11.3776, 0.0, 0.0, 0.0, 0);

		// Chalecos
		//CrearObjetoTirado(CajaDeArmas(22), 14, 2834.7449, -2384.6501, 11.3776, 0.0, 0.0, 0.0, 0, 0);

	    // Silenciadora
		CrearObjetoTirado(CajaDeArmas(23), 18, 2834.7708, -2381.1243, 11.3776, 0.0000, 0.0000, -88.7400, 0);
		CrearObjetoTirado(CajaDeArmas(23), 18, 2835.5298, -2381.1067, 11.3776, 0.0000, 0.0000, -88.7400, 0);

		CrearObjetoTirado(CajaDeCargador(23), 38, 2834.75269, -2381.21484, 11.83770,   0.00000, 0.00000, 21.1200, 0);
		CrearObjetoTirado(CajaDeCargador(23), 38, 2835.50293, -2381.16821, 11.83770,   0.00000, 0.00000, 9.96000, 0);

	    // Escopeta
		CrearObjetoTirado(CajaDeArmas(25), 16, 2837.8545, -2378.4451, 11.3776, 0.0000, 0.0000, 0.0, 0);
		CrearObjetoTirado(CajaDeArmas(25), 16, 2838.5608, -2378.4458, 11.3776, 0.0000, 0.0000, 0.0, 0);

		CrearObjetoTirado(CajaDeCargador(25), 38, 2837.8757, -2378.5122, 11.8177, 0.0, 0.0, 12.7200, 0);
		CrearObjetoTirado(CajaDeCargador(25), 38, 2838.6230, -2378.5232, 11.8177, 0.0, 0.0, 12.7200, 0);

	    // SPAS 12
		CrearObjetoTirado(CajaDeArmas(27), 6, 2837.0762, -2379.6479, 11.3776, 0.0000, 0.0000, 0.0, 0);

		CrearObjetoTirado(CajaDeCargador(27), 14, 2837.1492, -2379.6418, 11.8377, 0.0, 0.0, 87.9000, 0);

	    // M4
		CrearObjetoTirado(CajaDeArmas(31), 16, 2837.2656, -2386.7449, 11.3776, 0.0000, 0.0000, 0.0, 0);

		CrearObjetoTirado(CajaDeCargador(31), 30, 2837.3123, -2386.7727, 11.8377, 0.0, 0.0, -64.9000, 0);

	    // MP5
		CrearObjetoTirado(CajaDeArmas(29), 16, 2839.0815, -2382.9575, 11.3776, 0.0000, 0.0000, 0.0, 0);
		CrearObjetoTirado(CajaDeArmas(29), 16, 2839.0752, -2382.1724, 11.3776, 0.0000, 0.0000, 0.0, 0);

		CrearObjetoTirado(CajaDeCargador(29), 36, 2839.0750, -2383.0393, 11.8377, 0.0, 0.0, 293.1, 0);
		CrearObjetoTirado(CajaDeCargador(29), 36, 2839.0425, -2382.1746, 11.8377, 0.0, 0.0, 272.7200, 0);

	    // Deagle
		CrearObjetoTirado(CajaDeArmas(24), 14, 2843.8545, -2385.5894, 11.3776, 0.0000, 0.0000, 0.0, 0);

		CrearObjetoTirado(CajaDeCargador(24), 32, 2843.8157, -2385.6045, 11.8377, 0.0, 0.0, 293.1600, 0);

	    // Sniper
		CrearObjetoTirado(CajaDeArmas(34), 10, 2843.8467, -2387.3130, 11.3776, 0.0000, 0.0000, 0.0, 0);

		CrearObjetoTirado(CajaDeCargador(34), 15, 2843.7603, -2387.3723, 11.8377, 0.0, 0.0, 276.6, 0);

		// Esposas
		CrearObjetoTirado(GOAT(INV_CAJAESPOSA), 64, 2834.776855, -2383.653320, 11.411259, 0.000000, 0.000000, -91.212959, 0);
		CrearObjetoTirado(GOAT(INV_CAJAESPOSA), 64, 2834.776855, -2383.653320, 12.091259, 0.000000, 0.000000, -91.212959, 0);

		// Chalecos
		CrearObjetoTirado(GOAT(INV_CAJACHALECO), 24, 2843.245605, -2378.650878, 11.410277, 0.000000, 0.000000, -178.94741, 0);
		CrearObjetoTirado(GOAT(INV_CAJACHALECO), 24, 2843.245361, -2378.597167, 12.090264, 0.000000, 0.000000, -178.94741, 0);

		CrearObjetoTirado(GOAT(INV_CAJACHALECO)+1, 24, 2841.245605, -2378.650878, 11.410277, 0.000000, 0.000000, -178.94741, 0);
		CrearObjetoTirado(GOAT(INV_CAJACHALECO)+1, 24, 2843.245361, -2378.597167, 12.090264, 0.000000, 0.000000, -178.94741, 0);
	}
	else if(toggle == 5) // borrar cajas y objetos tirados en el barco
	{
		Loop(i, MAX_OBJETOS_T, 0)
		{
		    if(ObjetoTirado[i][obj_t_Type])
		    {
				/*
					Minx: 2862.2449      Maxx:  2813.6599
					Miny: -2552.5432     Maxy: -2321.314
				*/

		     	if((2813.6599 < ObjetoTirado[i][obj_t_x] < 2862.2449) && (-2552.5432 < ObjetoTirado[i][obj_t_y] < -2321.314))
				{
				    BorrarObjetoTirado(i);
				}
			}
		}
	}
	else if(toggle == 6)
	{
		SetObjectPos(ObjetosBarco[0], 2842.54443, -2427.86426, 15.64320);
		SetObjectPos(ObjetosBarco[1], 2839.85938, -2424.50830, 10.96090);
		SetObjectPos(ObjetosBarco[2], 2831.76685, -2480.19312, 5.26560);
		SetObjectPos(ObjetosBarco[3], 2831.77612, -2480.19092, 5.26560);
		SetObjectPos(ObjetosBarco[4], 2839.87231, -2533.39624, 17.02340);
		SetObjectPos(ObjetosBarco[5], 2839.84155, -2372.59619, 7.29690);
		SetObjectPos(ObjetosBarco[6], 2839.8569, -2348.1560, 21.31250);
		SetObjectPos(ObjetosBarco[7], 2840.01416, -2448.29932, 15.75000);
		SetObjectPos(ObjetosBarco[8], 2832.84204, -2375.42676, 13.43290);
		SetObjectPos(ObjetosBarco[9], 2845.99219, -2372.84253, 13.43290);
		SetObjectPos(ObjetosBarco[10], 2843.22485, -2427.96606, 13.43290);
		SetObjectPos(ObjetosBarco[11], 2831.6174, -2389.8313, 13.43290);
		SetObjectPos(ObjetosBarco[12], 2849.5747, -2393.8306, 13.43290);
	}
	return 1;
}

stock CajaDeArmas(weaponid)
{
	for(new index; index < sizeof(ObjectData); index++)
	{
	    if(ObjectData[index][invType] == INV_CAJAARMA)
		{
			if(ObjectData[index][invData] == weaponid)
			{
			    return index;
			}
		}
	}
	return -1;
}

stock CajaDeCargador(weaponid)
{
	for(new index; index < sizeof(ObjectData); index++)
	{
	    if(ObjectData[index][invType] == INV_CAJACARGADOR)
		{
			if(ObjectData[index][invData] == weaponid)
			{
			    return index;
			}
		}
	}
	return -1;
}

CALLBACK: ActualizarCamilla(playerid, objid)
{
	new
	    Float:Pos[3],
		Float:Ang,
		Float:SPD,
		Float:vx,
		Float:vy,
		Float:vz,
		Float:Speed = 15.0,
		Float:Distance = 1.7
	;

	GetPlayerFacingAngle(playerid, Ang);
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	GetPlayerVelocity(playerid, vx,vy,vz);

	SPD = VectorSize (vx, vy, vz) *100;

	if(GetPlayerAnimationIndex(playerid) == 1231)
	{
		if(SPD < 3.99)
		{
		    Distance = 2.5;
		    Speed = 2.0;
		}
		else
		{
		    Distance = 3.0;
		    Speed = 5.0;
		}
	}

	new
	    Float:ObjPos[3];

	GetObjectPos(objid, ObjPos[0], ObjPos[1], ObjPos[2]);

	if(GetPlayerDistanceFromPoint(playerid, ObjPos[0], ObjPos[1], ObjPos[2]) > 30.0)
	{
		GetPosInFrontOfPlayer(playerid, Pos[0], Pos[1], Distance);
		SetObjectPos(objid, Pos[0], Pos[1], Pos[2]-0.5);

		new
		    Float: x, Float: y;

		GetPosInFrontOfPlayer (playerid, x, y, 2.0);

	    foreach(Player,i)
	    {
		    if(GetPlayerSurfingObjectID(i) == objid)
		    {
		        SetPlayerPos (i, Pos[0], Pos[1], Pos[2]+0.5);

		        if (!Freezed[i])
		        	CongelarEx (i, 4);

		        SetPlayerInterior(i, GetPlayerInterior(playerid));
		        SetPlayerVirtualWorld(i, GetPlayerVirtualWorld(playerid));
		        cmd_crack(i, "");
			}
		}
		if (!Freezed[playerid])
		{
		    CongelarEx (playerid, 4);
		}
		return 1;
	}

	GetObjectRot(objid,  ObjPos[0], ObjPos[1], ObjPos[2]);

	#define ROT_FOR_DETTACH     60.0

	if(GetPlayerSurfingObjectID(playerid) == objid)
	{
		Loop(i, sizeof(Camillas), 0)
		{
			if(InfoCamilla[i][camiObjID] == objid)
			{
			    new
			        Float:Pos_[4];

				GetPlayerFacingAngle(playerid, Pos_[3]);
				GetPlayerPos(playerid, Pos_[0], Pos_[1], Pos_[2]);
				GetPosInFrontOfPlayer(playerid, Pos_[0], Pos_[1], 2.0);

			    InfoCamilla[i][camiUsadaPor] = INVALID_PLAYER_ID;
			    Camillas[i][0] = Pos_[0];
			    Camillas[i][1] = Pos_[1];
			    Camillas[i][2] = Pos_[2];
			    Camillas[i][3] = Pos_[3];
		        KillTimer2(playerid, TIMER_CAMILLA);
                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		        return 1;
			}
		}
	}

	GetPosInFrontOfPlayer(playerid, Pos[0], Pos[1], Distance);
	MoveObject(objid, Pos[0], Pos[1], Pos[2]-0.5, Speed, 0, 0, Ang);

	return 1;
}


timer ChequearVida[8000]()
{
	foreach(Player,i)
	{
	    if(gettime() < LoginTime[i]) continue;

        new
			Float:Vida;

        GetPlayerHealth(i,Vida);

        if(Vida < 20.0)
        {
            if(GetPVarInt(i,"Efecto_ibupirac"))
            {
                SetPVarInt(i, "Efecto_ibupirac", GetPVarInt(i,"Efecto_ibupirac") -1);
			}
			else
			{
			    if(GetPlayerDrunkLevel(i) < 2000 && HospitalData [i] == -1)
			    {
					SetPlayerDrunkLevel(i, GetPlayerDrunkLevel (i) + 3000);
				}
			}
		}
	}
	return 1;
}

stock _TD(text[])
{
	new
		TextoES[130];

    Loop(i,strlen(text),0)
    {
        switch(text[i])
        {
            case 'Á', 'á': TextoES[i] = '˜';
            case 'É', 'é': TextoES[i] = 'ž';
            case 'Í', 'í': TextoES[i] = '¢';
            case 'Ó', 'ó': TextoES[i] = '¦';
            case 'Ú', 'ú': TextoES[i] = 'ª';
            case 'Ñ', 'ñ': TextoES[i] = '®';
            case '¿': TextoES[i] = '¯';
            case '¡': TextoES[i] = '^';
            default: TextoES[i] = text[i];
        }
    }
    return TextoES;
}

timer ClimaAleatorio[60000 * 30]()
{
	new
		NombreClima[60],
		rand = random(15),
		clima;

	switch(rand)
	{
		case 0:
		{
			NombreClima = "con algo de viento";
			clima = 4;
		}
		case 5:
		{
			NombreClima = "con tormenta, fuertes lluvias";
			clima = 8;
		}
 		default:
   		{
			NombreClima = "despejado";
			clima = 10;
		}
	}
	MensajeTodosF(C_AZUL2,"(LSTV) Vamos con el pronostico: "#CBLANCO"Se espera un clima %s",NombreClima);
	SetTimerEx("CambiarClima",10000,false,"i",clima);
	return 1;
}

CALLBACK: CambiarClima(weatherid)
{
	ServerWeather = weatherid;
	foreach(Player, i)
	{
	    if(PlayerWeather[i] == -1)
	    {
	        SetPlayerWeather(i, weatherid);
		}
	}
	return 1;
}

stock GetPlayerDialogID(playerid)
{
	return GetPVarInt(playerid, "antic_DialogID");
}

// OP:CEL
stock CEL.EnviarSMS(playerid, number_to)
{
	DeletePVar(playerid, "CEL.MARCADO");
	SetPVarInt(playerid, "CEL.MANDARSMS", number_to);
	Dialog(playerid, dMandarSMS, DIALOG_STYLE_INPUT, ""#CROJO"Enviar un SMS", "\n\n"#CBLANCO"Escribe el mensaje de texto para enviar:\n\n", "Enviar", "Cancelar");
	return 1;
}

stock CEL.Llamar(playerid, number_to)
{
	DeletePVar(playerid, "CEL.MARCADO");

	new
		item_cel = GOAT(INV_CEL),
		id_found = INVALID_PLAYER_ID,
		id_inv = -1;

	foreach(Player, i)
	{
	    if(GetObject(i) == item_cel)
	    {
	        if(GetObjectData(i) == number_to)
	        {
	            id_found = i;
	            break;
			}
		}
		InvLoop(a, i)
		{
		    if(ItemInventario[i][a][invObject] == item_cel && ItemInventario[i][a][invData] == number_to)
		    {
	            id_found = i;
	            id_inv = a;
				break;
			}
		}
	}

	if (id_found == INVALID_PLAYER_ID)
		return Dialog(playerid, dError, DIALOG_STYLE_MSGBOX, ""#CROJO"ERROR", ""#CBLANCO"Falló la llamada: "#CROJO"Número incorrecto.", "Cerrar", "");

	if (GetCallPartner(number_to))
		return Dialog(playerid, dError, DIALOG_STYLE_MSGBOX, ""#CROJO"ERROR", ""#CBLANCO"Número "#CROJO"ocupado.", "Cerrar", "");

	CEL.Toggle(playerid, false);
	Dialog(playerid, dError, DIALOG_STYLE_MSGBOX, ""#CVERDE"Celular", ""#CBLANCO"\n\nLlamando..\n\n", "Cerrar", "");
	PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

	new
	    contact[CEL_MAX_LEN],
		contactnum[CEL_MAX_CONTACT],
		contactname[CEL_MAX_CONTACT][CEL_MAX_LEN];

	format(contact, CEL_MAX_LEN, "%d", GetCelNumber(playerid));

	CEL.GetContactList(number_to, contactnum, contactname);

	for (new i; i < CEL_MAX_CONTACT; i++)
	{
	    if(contactnum[i] == GetCelNumber(playerid))
	    {
	        format(contact, CEL_MAX_LEN, contactname[i]);
	        break;
		}
	}

	if (id_inv == -1) //Cel en mano
	{
	    MensajeF(id_found, C_VERDE, "(Núm: %d) "#CBLANCO"Llamada entrante de "#CAZULRARO"%s. "#CBLANCO"Usa "#CINFO"/atender "#CBLANCO"para contestar la llamada.", number_to, contact);
	}
	else
	{
	    MensajeF(id_found, C_VERDE, "(Núm: %d) "#CBLANCO"Llamada entrante de "#CAZULRARO"%s. "#CBLANCO"Usa "#CINFO"/sacar %d"#CBLANCO" y "#CINFO"/atender "#CBLANCO"para contestar.", number_to, contact, id_inv+1);
	}

	new
	    str[15];

	A_Format(str, "C%dR", number_to);
	SetGVarInt(str, GetCelNumber(playerid));

	A_Format(str, "C%dRC", GetCelNumber(playerid));
	SetGVarInt(str, true);

	new
		Float:x, Float:y, Float:z;

	GetPlayerPos(id_found, x, y, z);

	KillTimer2(id_found, TIMER_LLAMADA);
	Timer_Jugador[id_found][TIMER_LLAMADA] = SetTimerEx("SonarCelular", 3500, true, "i", id_found);

	PlaySoundInArea(20804, 5.0, x, y, z);

	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
	return 1;
}

CALLBACK: SonarCelular(playerid)
{
	new
		Float:x, Float:y, Float:z;

	GetPlayerPos(playerid, x, y, z);
	PlaySoundInArea(20804, 5.0, x, y, z);
	return 1;
}

stock EndCallSound(playerid)
{
	if(Timer_Jugador[playerid][TIMER_LLAMADA] != INVALID_TIMER_ID)
	{
		new
			Float:x, Float:y, Float:z;

		GetPlayerPos(playerid, x, y, z);
		StopSoundInArea(5.0, x, y, z);
		KillTimer2(playerid, TIMER_LLAMADA);
	}
	return 1;
}

stock PlaySoundInArea(soundid, Float:radi, Float:x, Float:y, Float:z)
{
	foreach(Player, i)
	{
	    if(IsPlayerInRangeOfPoint(i, radi, x, y, z))
	    {
	        PlayerPlaySound(i, soundid, 0.0, 0.0, 0.0);
		}
	}
	return 1;
}

stock StopSound(playerid)
{
	return PlayerPlaySound(playerid, 0, 0.0, 0.0, 0.0);
}

stock StopSoundInArea(Float:radi, Float:x, Float:y, Float:z)
{
	return PlaySoundInArea(0, radi, x, y, z);
}

stock CreateCall(number1, number2)
{
	new
		str[15];

	A_Format(str, "C%dP", number1);
	SetGVarInt(str, number2);

	A_Format(str, "C%dP", number2);
	SetGVarInt(str, number1);
	return 1;
}

stock GetPlayerAtNumber(number)
{
	new
	    cel = GOAT(INV_CEL);

	foreach(Player, i)
	{
	    if (GetObject(i) == cel && GetObjectData(i) == number)
	    {
	        return i;
		}
	}
	return INVALID_PLAYER_ID;
}

stock GetCallPartner(number)
{
	new
	    str[15];

	A_Format(str, "C%dP", number);
	return GetGVarInt(str);
}

stock CEL.ConfirmarSMS(giverid, numero, numero_enviar, playerid, sms[])
{
	if(numero == 0 || numero_enviar == 0)
	    return 1;

	new
	    contact[CEL_MAX_LEN],
		contactnum[CEL_MAX_CONTACT],
		contactname[CEL_MAX_CONTACT][CEL_MAX_LEN];

	format(contact, CEL_MAX_LEN, "%d", numero);

	CEL.GetContactList(numero_enviar, contactnum, contactname);

	for (new i; i < CEL_MAX_CONTACT; i++)
	{
	    if(contactnum[i] == numero)
	    {
	        format(contact, CEL_MAX_LEN, contactname[i]);
	        break;
		}
	}
	MandarSMS(playerid, contact, sms);
	CEL.AddSMS(numero_enviar, contact, sms);

	if(CEL.State[playerid] == CEL_STATE_SMS) // Actualizar bandeja de entrada
	{
	    CEL.ToggleSMS(playerid, false);
	    CEL.ToggleSMS(playerid, true, numero_enviar);
	}

	new
	    Float:x, Float:y, Float:z;

	GetPlayerPos(playerid, x, y, z);

	PlaySoundInArea(20600, 5.0, x, y, z);
	Dialog(giverid, dError, DIALOG_STYLE_MSGBOX, ""#CVERDE"ENVIADO", ""#CBLANCO"El mensaje fue enviado "#CVERDE"exitosamente.", "Cerrar", "");
	return 1;
}

stock CEL.Toggle(playerid, bool:toggle)
{
	if(toggle)
	{
		if(CEL.State[playerid] == CEL_STATE_NONE)
		{
			CEL.ToggleBasic(playerid, true);
		    CEL.ToggleMenu(playerid, true);
		    CEL.State[playerid] = CEL_STATE_MENU;
		    SelectTextDraw(playerid, CEL_COLOR);
		    return 1;
		}
		return 0;
	}
	else
	{
		if(CEL.State[playerid] == CEL_STATE_MENU)
		{
		    CEL.ToggleMenu(playerid, false);
		}
		else if(CEL.State[playerid] == CEL_STATE_MARCAR)
		{
        	CEL.ToggleMarcar(playerid, false);
		}
		else if(CEL.State[playerid] == CEL_STATE_SMS)
		{
        	CEL.ToggleSMS(playerid, false);
		}
		else if(CEL.State[playerid] == CEL_STATE_CONTACT)
		{
        	CEL.ToggleContactos(playerid, false);
		}
		else if(CEL.State[playerid] == CEL_STATE_SERVICIOS)
		{
        	CEL.ToggleServicios(playerid, false);
		}
		CEL.ToggleBasic(playerid, false);
		CEL.State[playerid] = CEL_STATE_NONE;
		CancelSelectTextDraw(playerid);
	}
	return 1;
}

stock CEL.UpdateHour(hour, min)
{
	new
	    string[32];

	format(string, sizeof(string), "%02d:%02d              lllll", hour, min);
	TextDrawSetString(CEL.Hora, string);
}

stock CEL.ToggleBasic(playerid, bool:toggle)
{
	if(toggle)
	{
	    for(new i; i < sizeof(CEL.Fondo); i++)
			TextDrawShowForPlayer(playerid, CEL.Fondo[i]);

		TextDrawShowForPlayer(playerid, CEL.ImagenFondo);
		TextDrawShowForPlayer(playerid, CEL.Hora);
	}
	else
	{
	    for(new i; i < sizeof(CEL.Fondo); i++)
			TextDrawHideForPlayer(playerid, CEL.Fondo[i]);

		TextDrawHideForPlayer(playerid, CEL.ImagenFondo);
		TextDrawHideForPlayer(playerid, CEL.Hora);
	}
	return 1;
}

stock CEL.ToggleMenu(playerid, bool:toggle)
{
	if(toggle)
	{
		TextDrawShowForPlayer(playerid, CEL.MenuMarcar[0]);
		TextDrawShowForPlayer(playerid, CEL.MenuMarcar[1]);

		TextDrawShowForPlayer(playerid, CEL.MenuMensajes[0]);
		TextDrawShowForPlayer(playerid, CEL.MenuMensajes[1]);

		TextDrawShowForPlayer(playerid, CEL.MenuContactos[0]);
		TextDrawShowForPlayer(playerid, CEL.MenuContactos[1]);

		TextDrawShowForPlayer(playerid, CEL.MenuServicios[0]);
		TextDrawShowForPlayer(playerid, CEL.MenuServicios[1]);
	}
	else
	{
		TextDrawHideForPlayer(playerid, CEL.MenuMarcar[0]);
		TextDrawHideForPlayer(playerid, CEL.MenuMarcar[1]);

		TextDrawHideForPlayer(playerid, CEL.MenuMensajes[0]);
		TextDrawHideForPlayer(playerid, CEL.MenuMensajes[1]);

		TextDrawHideForPlayer(playerid, CEL.MenuContactos[0]);
		TextDrawHideForPlayer(playerid, CEL.MenuContactos[1]);

		TextDrawHideForPlayer(playerid, CEL.MenuServicios[0]);
		TextDrawHideForPlayer(playerid, CEL.MenuServicios[1]);
	}
	return 1;
}

stock CEL.ToggleMarcar(playerid, bool:toggle)
{
	if(toggle)
	{
	    for(new i; i < sizeof(CEL.MarcarNumero); i++)
	    {
	        TextDrawShowForPlayer(playerid, CEL.MarcarNumero[i]);
	    }
	    TextDrawShowForPlayer(playerid, CEL.MarcarM);
	    TextDrawShowForPlayer(playerid, CEL.MarcarX);

	    if(CEL.MarcarTexto[playerid] == PlayerText:INVALID_TEXT_DRAW)
	    {
			CEL.MarcarTexto[playerid] = CreatePlayerTextDraw(playerid, 268.799957, 196.373306, "_");
			PlayerTextDrawLetterSize(playerid, CEL.MarcarTexto[playerid], 0.485200, 2.159999);
			PlayerTextDrawTextSize(playerid, CEL.MarcarTexto[playerid], 366.400115, -23.146663);
			PlayerTextDrawAlignment(playerid, CEL.MarcarTexto[playerid], 1);
			PlayerTextDrawColor(playerid, CEL.MarcarTexto[playerid], -1061109505);
			PlayerTextDrawUseBox(playerid, CEL.MarcarTexto[playerid], true);
			PlayerTextDrawBoxColor(playerid, CEL.MarcarTexto[playerid], -16776961);
			PlayerTextDrawSetShadow(playerid, CEL.MarcarTexto[playerid], 0);
			PlayerTextDrawSetOutline(playerid, CEL.MarcarTexto[playerid], 1);
			PlayerTextDrawBackgroundColor(playerid, CEL.MarcarTexto[playerid], 51);
			PlayerTextDrawFont(playerid, CEL.MarcarTexto[playerid], 3);
			PlayerTextDrawSetProportional(playerid, CEL.MarcarTexto[playerid], 1);
		}
		PlayerTextDrawShow(playerid, CEL.MarcarTexto[playerid]);
		strclr(CEL.Text[playerid]);
		TextDrawShowForPlayer(playerid, CEL.MenuVolver);
	}
	else
	{
	    for(new i; i < sizeof(CEL.MarcarNumero); i++)
	    {
	        TextDrawHideForPlayer(playerid, CEL.MarcarNumero[i]);
	    }
	    TextDrawHideForPlayer(playerid, CEL.MarcarM);
	    TextDrawHideForPlayer(playerid, CEL.MarcarX);

	    if(CEL.MarcarTexto[playerid] != PlayerText:INVALID_TEXT_DRAW)
	    {
	        PlayerTextDrawDestroy(playerid, CEL.MarcarTexto[playerid]);
	        CEL.MarcarTexto[playerid] = PlayerText:INVALID_TEXT_DRAW;
		}
		strclr(CEL.Text[playerid]);
		TextDrawHideForPlayer(playerid, CEL.MenuVolver);
	}
	return 1;
}

stock CEL.ToggleSMS(playerid, bool:toggle, number = 0)
{
	if (toggle && number != 0)
	{
		new
		    sms[CEL_MAX_SMS][128],
		    num[CEL_MAX_SMS][CEL_MAX_LEN],
			str[23];

		TextDrawShowForPlayer(playerid, CEL.SMSBox);
		CEL.GetSMS(number, num, sms);
		for (new i; i < CEL_MAX_SMS; i++)
		{
			format(str, sizeof(str), "%dSMS", i);
			SetPVarString(playerid, str, sms[i]);

			format(str, sizeof(str), "%dNUM", i);
			SetPVarString(playerid, str, num[i]);

			//CONTACTO
			format(str, sizeof(str), "~>~ %s", num[i]);
			if (CEL.SMSContacto[playerid][i] == PlayerText:INVALID_TEXT_DRAW)
			{
				CEL.SMSContacto[playerid][i] = CreatePlayerTextDraw(playerid, 263.719757, 191.101379 + (float(i) * 26.0), str);
				PlayerTextDrawLetterSize(playerid, CEL.SMSContacto[playerid][i], 0.237999, 1.166929);
				PlayerTextDrawTextSize(playerid, CEL.SMSContacto[playerid][i], 368.800140, -22.399999);
				PlayerTextDrawAlignment(playerid, CEL.SMSContacto[playerid][i], 1);
				PlayerTextDrawColor(playerid, CEL.SMSContacto[playerid][i], -1);
				PlayerTextDrawSetShadow(playerid, CEL.SMSContacto[playerid][i], 0);
				PlayerTextDrawSetOutline(playerid, CEL.SMSContacto[playerid][i], 0);
				PlayerTextDrawBackgroundColor(playerid, CEL.SMSContacto[playerid][i], 255);
				PlayerTextDrawFont(playerid, CEL.SMSContacto[playerid][i], 2);
				PlayerTextDrawSetProportional(playerid, CEL.SMSContacto[playerid][i], 1);
			}
			else
			{
			    PlayerTextDrawSetString(playerid, CEL.SMSContacto[playerid][i], str);
			}
			PlayerTextDrawShow(playerid, CEL.SMSContacto[playerid][i]);

			//SMS
			format(str, 15, "%s", sms[i]);

			if (strlen(sms[i]) > 15)
			{
				strcat(str, "[...]");
			}

			if (CEL.SMSTexto[playerid][i] == PlayerText:INVALID_TEXT_DRAW)
			{
				CEL.SMSTexto[playerid][i] = CreatePlayerTextDraw(playerid, 264.639770, 202.330764 + (float(i) * 26.0), str);
				PlayerTextDrawLetterSize(playerid, CEL.SMSTexto[playerid][i], 0.237999, 1.166929);
				PlayerTextDrawTextSize(playerid, CEL.SMSTexto[playerid][i], 499.199981, 15.0);
				PlayerTextDrawAlignment(playerid, CEL.SMSTexto[playerid][i], 1);
				PlayerTextDrawColor(playerid, CEL.SMSTexto[playerid][i], -1378294017);
				PlayerTextDrawSetShadow(playerid, CEL.SMSTexto[playerid][i], 0);
				PlayerTextDrawSetOutline(playerid, CEL.SMSTexto[playerid][i], 0);
				PlayerTextDrawBackgroundColor(playerid, CEL.SMSTexto[playerid][i], 255);
				PlayerTextDrawFont(playerid, CEL.SMSTexto[playerid][i], 1);
				PlayerTextDrawSetProportional(playerid, CEL.SMSTexto[playerid][i], 1);
				PlayerTextDrawSetSelectable(playerid, CEL.SMSTexto[playerid][i], true);
			}
			else
			{
			    PlayerTextDrawSetString(playerid, CEL.SMSTexto[playerid][i], str);
			}
			PlayerTextDrawShow(playerid, CEL.SMSTexto[playerid][i]);
		}
		TextDrawShowForPlayer(playerid, CEL.MenuVolver);
	}
	else
	{
	    TextDrawHideForPlayer(playerid, CEL.SMSBox);
	    new
	        str[20];

		for (new i; i < CEL_MAX_SMS; i++)
		{
			if (CEL.SMSContacto[playerid][i] != PlayerText:INVALID_TEXT_DRAW)
			{
				format(str, sizeof(str), "%dNUM", i);
				DeletePVar(playerid, str);

			    PlayerTextDrawDestroy(playerid, CEL.SMSContacto[playerid][i]);
			    CEL.SMSContacto[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
			}
			if (CEL.SMSTexto[playerid][i] != PlayerText:INVALID_TEXT_DRAW)
			{
				format(str, sizeof(str), "%dSMS", i);
				DeletePVar(playerid, str);

			    PlayerTextDrawDestroy(playerid, CEL.SMSTexto[playerid][i]);
			    CEL.SMSTexto[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
			}
		}
		TextDrawHideForPlayer(playerid, CEL.MenuVolver);
	}
}

stock CEL.ToggleServicios(playerid, bool:toggle)
{
	if (toggle)
	{
	    TextDrawShowForPlayer(playerid, CEL.SMSBox);
	    TextDrawShowForPlayer(playerid, CEL.ServiciosLlamarA);
	    TextDrawShowForPlayer(playerid, CEL.ServiciosPolicia);
	    TextDrawShowForPlayer(playerid, CEL.ServiciosHospital);
	    TextDrawShowForPlayer(playerid, CEL.ServiciosTaxis);
	    TextDrawShowForPlayer(playerid, CEL.ServiciosTaller);
	    TextDrawShowForPlayer(playerid, CEL.MenuVolver);
	}
	else
	{
	    TextDrawHideForPlayer(playerid, CEL.SMSBox);
	    TextDrawHideForPlayer(playerid, CEL.ServiciosLlamarA);
	    TextDrawHideForPlayer(playerid, CEL.ServiciosPolicia);
	    TextDrawHideForPlayer(playerid, CEL.ServiciosHospital);
	    TextDrawHideForPlayer(playerid, CEL.ServiciosTaxis);
	    TextDrawHideForPlayer(playerid, CEL.ServiciosTaller);
	    TextDrawHideForPlayer(playerid, CEL.MenuVolver);
	}
}

stock CEL.ToggleContactos(playerid, bool:toggle, number = 0)
{
	if (toggle && number != 0)
	{
		new
		    num[CEL_MAX_CONTACT],
		    ctc[CEL_MAX_CONTACT][CEL_MAX_LEN],
		    count = CEL.GetContactList(number, num, ctc),
			str[23];

		TextDrawShowForPlayer(playerid, CEL.SMSBox);

		for (new i; i < count && i < CEL_MAX_CONTACT; i++)
		{
			format(str, sizeof(str), "%dCNUM", i);
			SetPVarInt(playerid, str, num[i]);

			format(str, sizeof(str), "%dCTXT", i);
			SetPVarString(playerid, str, ctc[i]);

			if (CEL.ContactoNombre[playerid][i] == PlayerText:INVALID_TEXT_DRAW)
			{
				CEL.ContactoNombre[playerid][i] = CreatePlayerTextDraw(playerid, 263.439880, 190.7 + (float(i) * 16.0), ctc[i]);
				PlayerTextDrawLetterSize(playerid, CEL.ContactoNombre[playerid][i], 0.214799, 0.913062);
				PlayerTextDrawTextSize(playerid, CEL.ContactoNombre[playerid][i], 370.400085, 8.266651);
				PlayerTextDrawAlignment(playerid, CEL.ContactoNombre[playerid][i], 1);
				PlayerTextDrawColor(playerid, CEL.ContactoNombre[playerid][i], 255);
				PlayerTextDrawUseBox(playerid, CEL.ContactoNombre[playerid][i], true);
				PlayerTextDrawBoxColor(playerid, CEL.ContactoNombre[playerid][i], -1378294017);
				PlayerTextDrawSetShadow(playerid, CEL.ContactoNombre[playerid][i], 0);
				PlayerTextDrawSetOutline(playerid, CEL.ContactoNombre[playerid][i], 0);
				PlayerTextDrawBackgroundColor(playerid, CEL.ContactoNombre[playerid][i], 255);
				PlayerTextDrawFont(playerid, CEL.ContactoNombre[playerid][i], 2);
				PlayerTextDrawSetProportional(playerid, CEL.ContactoNombre[playerid][i], 1);
				PlayerTextDrawSetSelectable(playerid, CEL.ContactoNombre[playerid][i], true);
			}
			else
			{
			    PlayerTextDrawSetString(playerid, CEL.ContactoNombre[playerid][i], ctc[i]);
			}
			PlayerTextDrawShow(playerid, CEL.ContactoNombre[playerid][i]);
		}
		TextDrawShowForPlayer(playerid, CEL.MenuVolver);
	}
	else
	{
	    TextDrawHideForPlayer(playerid, CEL.SMSBox);

	    new
	        str[20];

		for (new i; i < CEL_MAX_CONTACT; i++)
		{
			if (CEL.ContactoNombre[playerid][i] != PlayerText:INVALID_TEXT_DRAW)
			{
				format(str, sizeof(str), "%dCNUM", i);
				DeletePVar(playerid, str);

				format(str, sizeof(str), "%dCTXT", i);
				DeletePVar(playerid, str);

			    PlayerTextDrawDestroy(playerid, CEL.ContactoNombre[playerid][i]);
			    CEL.ContactoNombre[playerid][i] = PlayerText:INVALID_TEXT_DRAW;
			}
		}
		TextDrawHideForPlayer(playerid, CEL.MenuVolver);
	}
}

//08008002299 9-21 hs

stock CEL.GetSMS(number, number_from[][], sms[][])
{
	new
	    str[140],
	    File: Arch;

	format(str, 40, "Celulares/%d.sms", number);
	if (!fexist(str))
	{
	    for (new i; i < CEL_MAX_SMS; i++)
	    {
			format(number_from[i], 2, "-");
			format(sms[i], 8, "Vacio");
		}
		return 0;
	}
	else
	{
	    Arch = fopen(str, io_read);

		new
		    i;

		while (fread(Arch, str) && i < CEL_MAX_SMS)
		{
		    new
		        read_len = strlen(str);

		    strdel(str, read_len-1, read_len);
			unformat(str, "p<|>s["#CEL_MAX_LEN"]s[128]", number_from[i], sms[i]);
			i++;
		}
		fclose(Arch);
		return 1;
	}
}

stock CEL.AddSMS(number, contact[], sms[])
{
	new
	    numget[CEL_MAX_SMS][CEL_MAX_LEN],
	    smsget[CEL_MAX_SMS][128],
		suc = CEL.GetSMS(number, numget, smsget);

	if (!suc)
	{
		format(numget[0], CEL_MAX_LEN, contact);
		format(smsget[0], 128, sms);
		CEL.UpdateSMS(number, numget, smsget);
		return;
	}

	suc = 0;

	for (new i; i < CEL_MAX_SMS; i++)
	{
	    if (numget[i][0] == '-')
	    {
			format(numget[i], CEL_MAX_LEN, contact);
			format(smsget[i], 128, sms);
			suc = 1;
			break;
		}
	}

	if (suc == 0)
	{
		format(numget[0], CEL_MAX_LEN, contact);
		format(smsget[0], 128, sms);
	}
	CEL.UpdateSMS(number, numget, smsget);
}

stock CEL.UpdateSMS(number, contact[][], sms[][])
{
	new
	    string[128 + CEL_MAX_LEN + 6],
	    File: Arch;

	format(string, 30, "Celulares/%d.sms", number);

	Arch = fopen(string, io_write);

	for (new i; i < CEL_MAX_SMS; i++)
	{
	    format(string, sizeof(string), "%s|%s\n", contact[i], sms[i]);
	    fwrite(Arch, string);
	}
	fclose(Arch);
}

stock CEL.AddContact(number, contactnumber, contactname[])
{
	new
	    string[60];

	format(string, 30, "Celulares/%d.ctc", number);

	new
		File: Arch = fopen(string, io_append);

	format(string, 60, "%d|%s\n", contactnumber, contactname);
	fwrite(Arch, string);
	fclose(Arch);
	return 1;
}

stock CEL.GetContactList(number, contactnumber[], contactname[][])
{
	new
	    string[60],
		i;

	format(string, 30, "Celulares/%d.ctc", number);
	if (fexist(string))
	{
		new
			File: Arch = fopen(string, io_read);

		while (fread(Arch, string) && i < CEL_MAX_CONTACT)
		{
		    new
		        read_len = strlen(string);

		    strdel(string, read_len-1, read_len);

		    unformat(string, "p<|>ds["#CEL_MAX_LEN"]", contactnumber[i], contactname[i]);
		    i++;
		}
		fclose(Arch);
	}
	return i;
}

stock CEL.CountContacts(number)
{
	new
	    string[30],
		i;

	format(string, 30, "Celulares/%d.ctc", number);
	if (fexist(string))
	{
		new
			File: Arch = fopen(string, io_read);

		while (fread(Arch, string))
		{
		    i++;
		}
		fclose(Arch);
	}
	return i;
}

stock CEL.DeleteContact(number, contactname[])
{
	new
		number_[CEL_MAX_CONTACT],
	    contact_[CEL_MAX_CONTACT][CEL_MAX_LEN],
		str[60],
		File: Arch,
		ccount;

	ccount = CEL.GetContactList(number, number_, contact_);

	if (!ccount)
	    return;

	format(str, 30, "Celulares/%d.ctc", number);
	Arch = fopen(str, io_write);

	for (new i; i < ccount; i++)
	{
	    if(strcmp(contact_[i], contactname, true))
	    {
			format(str, sizeof(str), "%d|%s\n", number_[i], contact_[i]);
			fwrite(Arch, str);
	    }
	}
	fclose(Arch);
}

stock PC.ToggleMenu(playerid, bool:toggle)
{
	if(toggle)
	{
		TextDrawShowForPlayer(playerid, Text:PCNEG_Box);
		TextDrawShowForPlayer(playerid, Text:PCNEG_Fondo);
		TextDrawShowForPlayer(playerid, Text:PCNEG_Inicio);
		TextDrawShowForPlayer(playerid, Text:PCNEG_Start);
		TextDrawShowForPlayer(playerid, Text:PCNEG_Decorado);
		SelectTextDraw(playerid, 0xFF0000FF);
	}
	else
	{
		TextDrawHideForPlayer(playerid, Text:PCNEG_Box);
		TextDrawHideForPlayer(playerid, Text:PCNEG_Fondo);
		TextDrawHideForPlayer(playerid, Text:PCNEG_Inicio);
		TextDrawHideForPlayer(playerid, Text:PCNEG_Start);
		TextDrawHideForPlayer(playerid, Text:PCNEG_Decorado);
		CancelSelectTextDraw(playerid);
	}
	return 1;
}

stock PC.ToggleMenuInicio(playerid, bool:toggle)
{
	if(toggle)
	{
		SetPVarInt(playerid, "PC.INICIO", true);
		TextDrawShowForPlayer(playerid, Text:PCNEG_S_Fondo);
		TextDrawShowForPlayer(playerid, Text:PCNEG_S_Productos);
		TextDrawShowForPlayer(playerid, Text:PCNEG_S_Ganancias);
		TextDrawShowForPlayer(playerid, Text:PCNEG_S_Configurar);
		TextDrawShowForPlayer(playerid, Text:PCNEG_S_Apagar);
	}
	else
	{
		DeletePVar(playerid, "PC.INICIO");
		TextDrawHideForPlayer(playerid, Text:PCNEG_S_Fondo);
		TextDrawHideForPlayer(playerid, Text:PCNEG_S_Productos);
		TextDrawHideForPlayer(playerid, Text:PCNEG_S_Ganancias);
		TextDrawHideForPlayer(playerid, Text:PCNEG_S_Configurar);
		TextDrawHideForPlayer(playerid, Text:PCNEG_S_Apagar);
	}
	return 1;
}

stock PC.ToggleMenuProductos(playerid, bool:toggle)
{
	if(toggle)
	{
	    if(GetPVarInt(playerid, "PC.MenuGanancias"))
	    {
	    	PC.ToggleMenuGanancias(playerid, false);
		}
		SetPVarInt(playerid, "PC.MenuProductos", true);

		TextDrawShowForPlayer(playerid, Text:PCNEG_P_Box);
		TextDrawShowForPlayer(playerid, Text:PCNEG_P_Cerrar);
		TextDrawShowForPlayer(playerid, Text:PCNEG_P_Fondo);
		TextDrawShowForPlayer(playerid, Text:PCNEG_P_Productos);
		TextDrawShowForPlayer(playerid, Text:PCNEG_P_ComprarProductos);
		TextDrawShowForPlayer(playerid, Text:PCNEG_P_ProductoStock);

		if(PCNEG_P_Nombre[playerid] == PlayerText:INVALID_TEXT_DRAW)
		{
			new
				type = InfoNegocio[ID_Negocio(playerid)][nTipo],
			    str[MAX_STOCK_LEN+4],
			    str2[sizeof(str) * MAX_STOCK_TYPE],
				max2 = GetProductsAmmount(type);

			for(new i; i < max2; i++)
			{
			    format(str, sizeof(str), "%s~n~", ProductInfo[type][i][productName]);
			    strcat(str2, str);
			}
			PCNEG_P_Nombre[playerid] = CreatePlayerTextDraw(playerid, 123.199996, 218.026672, str2);
			PlayerTextDrawLetterSize(playerid, PCNEG_P_Nombre[playerid], 0.3, 1.174399);
			PlayerTextDrawTextSize(playerid, PCNEG_P_Nombre[playerid], 288.0, -23.893331);
			PlayerTextDrawAlignment(playerid, PCNEG_P_Nombre[playerid], 1);
			PlayerTextDrawColor(playerid, PCNEG_P_Nombre[playerid], -1);
			PlayerTextDrawUseBox(playerid, PCNEG_P_Nombre[playerid], true);
			PlayerTextDrawBoxColor(playerid, PCNEG_P_Nombre[playerid], -16777116);
			PlayerTextDrawSetShadow(playerid, PCNEG_P_Nombre[playerid], 0);
			PlayerTextDrawSetOutline(playerid, PCNEG_P_Nombre[playerid], 1);
			PlayerTextDrawBackgroundColor(playerid, PCNEG_P_Nombre[playerid], 51);
			PlayerTextDrawFont(playerid, PCNEG_P_Nombre[playerid], 1);
			PlayerTextDrawSetProportional(playerid, PCNEG_P_Nombre[playerid], 1);
			PlayerTextDrawShow(playerid, PCNEG_P_Nombre[playerid]);
		}
		if(PCNEG_P_Stock[playerid] == PlayerText:INVALID_TEXT_DRAW)
		{
			new
				NegID = ID_Negocio(playerid),
				type = InfoNegocio[NegID][nTipo],
			    str[MAX_STOCK_LEN+4],
			    str2[sizeof(str) * MAX_STOCK_TYPE],
				max2 = GetProductsAmmount(type);

			for(new i; i < max2; i++)
			{
			    format(str, sizeof(str), "%d~n~", InfoNegocio[NegID][nStock][i]);
			    strcat(str2, str);
			}
			PCNEG_P_Stock[playerid] = CreatePlayerTextDraw(playerid, 255.400070, 217.533264, str2);
			PlayerTextDrawLetterSize(playerid, PCNEG_P_Stock[playerid], 0.381199, 1.174399);
			PlayerTextDrawAlignment(playerid, PCNEG_P_Stock[playerid], 1);
			PlayerTextDrawColor(playerid, PCNEG_P_Stock[playerid], -2139062017);
			PlayerTextDrawSetShadow(playerid, PCNEG_P_Stock[playerid], 0);
			PlayerTextDrawSetOutline(playerid, PCNEG_P_Stock[playerid], 1);
			PlayerTextDrawBackgroundColor(playerid, PCNEG_P_Stock[playerid], 51);
			PlayerTextDrawFont(playerid, PCNEG_P_Stock[playerid], 1);
			PlayerTextDrawSetProportional(playerid, PCNEG_P_Stock[playerid], 1);
			PlayerTextDrawShow(playerid, PCNEG_P_Stock[playerid]);
		}
	}
	else
	{
		TextDrawHideForPlayer(playerid, Text:PCNEG_P_Box);
		TextDrawHideForPlayer(playerid, Text:PCNEG_P_Cerrar);
		TextDrawHideForPlayer(playerid, Text:PCNEG_P_Fondo);
		TextDrawHideForPlayer(playerid, Text:PCNEG_P_Productos);
		TextDrawHideForPlayer(playerid, Text:PCNEG_P_ComprarProductos);
		TextDrawHideForPlayer(playerid, Text:PCNEG_P_ProductoStock);
		if(PCNEG_P_Nombre[playerid] != PlayerText:INVALID_TEXT_DRAW)
		{
		    PlayerTextDrawDestroy(playerid, PCNEG_P_Nombre[playerid]);
		    PCNEG_P_Nombre[playerid] = PlayerText:INVALID_TEXT_DRAW;
		}
		if(PCNEG_P_Stock[playerid] != PlayerText:INVALID_TEXT_DRAW)
		{
		    PlayerTextDrawDestroy(playerid, PCNEG_P_Stock[playerid]);
		    PCNEG_P_Stock[playerid] = PlayerText:INVALID_TEXT_DRAW;
		}
		DeletePVar(playerid, "PC.MenuProductos");
	}
	return 1;
}

stock PC.ToggleMenuProductosComprar(playerid, bool:toggle)
{
	if(toggle)
	{
		TextDrawShowForPlayer(playerid, Text:PCNEG_PS_Box);
		TextDrawShowForPlayer(playerid, Text:PCNEG_PS_NPC);
		TextDrawShowForPlayer(playerid, Text:PCNEG_PS_Cerrar);
		TextDrawShowForPlayer(playerid, Text:PCNEG_PS_Fondo);
		TextDrawShowForPlayer(playerid, Text:PCNEG_PS_ConfirmarComprar);

		new
			NegID = ID_Negocio(playerid),
			type = InfoNegocio[NegID][nTipo],
		    str[MAX_STOCK_LEN+4],
		    str2[sizeof(str) * MAX_STOCK_TYPE],
			max2 = GetProductsAmmount(type);

		if(PCNEG_PS_Nombre[playerid] == PlayerText:INVALID_TEXT_DRAW)
		{
			for(new i; i < max2; i++)
			{
			    TextDrawShowForPlayer(playerid, PCNEG_PS_Flecha[NEG_FLECHA_IZQUIERDA][i]);
			    TextDrawShowForPlayer(playerid, PCNEG_PS_Flecha[NEG_FLECHA_DERECHA][i]);
			    format(str, sizeof(str), "%s~n~", ProductInfo[type][i][productName]);
			    strcat(str2, str);
			}
			PCNEG_PS_Nombre[playerid] = CreatePlayerTextDraw(playerid, 322.400115, 170.986694, str2);
			PlayerTextDrawLetterSize(playerid, PCNEG_PS_Nombre[playerid], 0.333999, 1.152000);
			PlayerTextDrawAlignment(playerid, PCNEG_PS_Nombre[playerid], 1);
			PlayerTextDrawColor(playerid, PCNEG_PS_Nombre[playerid], -1378294017);
			PlayerTextDrawSetShadow(playerid, PCNEG_PS_Nombre[playerid], 0);
			PlayerTextDrawSetOutline(playerid, PCNEG_PS_Nombre[playerid], 1);
			PlayerTextDrawBackgroundColor(playerid, PCNEG_PS_Nombre[playerid], 51);
			PlayerTextDrawFont(playerid, PCNEG_PS_Nombre[playerid], 1);
			PlayerTextDrawSetProportional(playerid, PCNEG_PS_Nombre[playerid], 1);
			PlayerTextDrawShow(playerid, PCNEG_PS_Nombre[playerid]);
		}
		if(PCNEG_PS_Precio[playerid] == PlayerText:INVALID_TEXT_DRAW)
		{
		    str2 = "";
			for(new i; i < max2; i++)
			{
			    format(str, sizeof(str), "$%d~n~", ProductInfo[type][i][productFabPrice]);
			    strcat(str2, str);
			}
			PCNEG_PS_Precio[playerid] = CreatePlayerTextDraw(playerid, 450.240234, 171.090759, str2);
			PlayerTextDrawLetterSize(playerid, PCNEG_PS_Precio[playerid], 0.333999, 1.152000);
			PlayerTextDrawAlignment(playerid, PCNEG_PS_Precio[playerid], 1);
			PlayerTextDrawColor(playerid, PCNEG_PS_Precio[playerid], 8388863);
			PlayerTextDrawSetShadow(playerid, PCNEG_PS_Precio[playerid], 0);
			PlayerTextDrawSetOutline(playerid, PCNEG_PS_Precio[playerid], 1);
			PlayerTextDrawBackgroundColor(playerid, PCNEG_PS_Precio[playerid], 51);
			PlayerTextDrawFont(playerid, PCNEG_PS_Precio[playerid], 1);
			PlayerTextDrawSetProportional(playerid, PCNEG_PS_Precio[playerid], 1);
			PlayerTextDrawShow(playerid, PCNEG_PS_Precio[playerid]);
		}
		if(PCNEG_PS_Costo[playerid] == PlayerText:INVALID_TEXT_DRAW)
		{
			PCNEG_PS_Costo[playerid] = CreatePlayerTextDraw(playerid, 404.479797, 313.749298, "COSTO TOTAL: ~g~...");
			PlayerTextDrawLetterSize(playerid, PCNEG_PS_Costo[playerid], 0.309, 2.122664);
			PlayerTextDrawTextSize(playerid, PCNEG_PS_Costo[playerid], 475.920166, 164.341339);
			PlayerTextDrawAlignment(playerid, PCNEG_PS_Costo[playerid], 2);
			PlayerTextDrawColor(playerid, PCNEG_PS_Costo[playerid], -1);
			PlayerTextDrawUseBox(playerid, PCNEG_PS_Costo[playerid], true);
			PlayerTextDrawBoxColor(playerid, PCNEG_PS_Costo[playerid], -1378294017);
			PlayerTextDrawSetShadow(playerid, PCNEG_PS_Costo[playerid], 0);
			PlayerTextDrawSetOutline(playerid, PCNEG_PS_Costo[playerid], 1);
			PlayerTextDrawBackgroundColor(playerid, PCNEG_PS_Costo[playerid], 51);
			PlayerTextDrawFont(playerid, PCNEG_PS_Costo[playerid], 2);
			PlayerTextDrawSetProportional(playerid, PCNEG_PS_Costo[playerid], 1);
			PlayerTextDrawShow(playerid, PCNEG_PS_Costo[playerid]);
		}
		if(PCNEG_PS_Cantidad[playerid] == PlayerText:INVALID_TEXT_DRAW)
		{
			for(new i; i < max2; i++)
			{
				format(str, sizeof(str), "P_STOCK%d", i);
				SetPVarInt(playerid, str, 10);
			}
			PCNEG_PS_Cantidad[playerid] = CreatePlayerTextDraw(playerid, 407.680328, 171.045425, "10~n~10~n~10~n~10~n~10");
			PlayerTextDrawLetterSize(playerid, PCNEG_PS_Cantidad[playerid], 0.333999, 1.151998);
			PlayerTextDrawAlignment(playerid, PCNEG_PS_Cantidad[playerid], 2);
			PlayerTextDrawColor(playerid, PCNEG_PS_Cantidad[playerid], -1);
			PlayerTextDrawSetShadow(playerid, PCNEG_PS_Cantidad[playerid], 0);
			PlayerTextDrawSetOutline(playerid, PCNEG_PS_Cantidad[playerid], 1);
			PlayerTextDrawBackgroundColor(playerid, PCNEG_PS_Cantidad[playerid], 51);
			PlayerTextDrawFont(playerid, PCNEG_PS_Cantidad[playerid], 1);
			PlayerTextDrawSetProportional(playerid, PCNEG_PS_Cantidad[playerid], 1);
			PC.ActualizarPedido(playerid, NegID);
			PlayerTextDrawShow(playerid, PCNEG_PS_Cantidad[playerid]);
		}
	}
	else
	{
		TextDrawHideForPlayer(playerid, Text:PCNEG_PS_Box);
		TextDrawHideForPlayer(playerid, Text:PCNEG_PS_NPC);
		TextDrawHideForPlayer(playerid, Text:PCNEG_PS_Cerrar);
		TextDrawHideForPlayer(playerid, Text:PCNEG_PS_Fondo);
		TextDrawHideForPlayer(playerid, Text:PCNEG_PS_ConfirmarComprar);
		if(PCNEG_PS_Nombre[playerid] != PlayerText:INVALID_TEXT_DRAW)
		{
		    PlayerTextDrawDestroy(playerid, PCNEG_PS_Nombre[playerid]);
		    PCNEG_PS_Nombre[playerid] = PlayerText:INVALID_TEXT_DRAW;
		}
		if(PCNEG_PS_Precio[playerid] != PlayerText:INVALID_TEXT_DRAW)
		{
		    PlayerTextDrawDestroy(playerid, PCNEG_PS_Precio[playerid]);
		    PCNEG_PS_Precio[playerid] = PlayerText:INVALID_TEXT_DRAW;
		}
		if(PCNEG_PS_Cantidad[playerid] != PlayerText:INVALID_TEXT_DRAW)
		{
		    PlayerTextDrawDestroy(playerid, PCNEG_PS_Cantidad[playerid]);
		    PCNEG_PS_Cantidad[playerid] = PlayerText:INVALID_TEXT_DRAW;
		}
		if(PCNEG_PS_Costo[playerid] != PlayerText:INVALID_TEXT_DRAW)
		{
		    PlayerTextDrawDestroy(playerid, PCNEG_PS_Costo[playerid]);
		    PCNEG_PS_Costo[playerid] = PlayerText:INVALID_TEXT_DRAW;
		}
		for(new i; i < MAX_STOCK_TYPE; i++)
		{
		    TextDrawHideForPlayer(playerid, PCNEG_PS_Flecha[0][i]);
		    TextDrawHideForPlayer(playerid, PCNEG_PS_Flecha[1][i]);
		}
	}
	return 1;
}

stock PC.ToggleMenuGanancias(playerid, bool:toggle)
{
	if(toggle)
	{
	    if(GetPVarInt(playerid, "PC.MenuProductos"))
	    {
	    	PC.ToggleMenuProductos(playerid, false);
		}
		SetPVarInt(playerid, "PC.MenuGanancias", true);

		TextDrawShowForPlayer(playerid, Text:PCNEG_P_Box);
		TextDrawShowForPlayer(playerid, Text:PCNEG_P_Cerrar);
		TextDrawShowForPlayer(playerid, Text:PCNEG_P_Fondo);
		TextDrawShowForPlayer(playerid, Text:PCNEG_G_Ganancias);
		TextDrawShowForPlayer(playerid, Text:PCNEG_G_ProductoVendido);

		if(PCNEG_P_Nombre[playerid] == PlayerText:INVALID_TEXT_DRAW)
		{
			new
				type = InfoNegocio[ID_Negocio(playerid)][nTipo],
			    str[MAX_STOCK_LEN+4],
			    str2[sizeof(str) * MAX_STOCK_TYPE],
				max2 = GetProductsAmmount(type);

			for(new i; i < max2; i++)
			{
			    format(str, sizeof(str), "%s~n~", ProductInfo[type][i][productName]);
			    strcat(str2, str);
			}
			PCNEG_P_Nombre[playerid] = CreatePlayerTextDraw(playerid, 123.199996, 218.026672, str2);
			PlayerTextDrawLetterSize(playerid, PCNEG_P_Nombre[playerid], 0.3, 1.174399);
			PlayerTextDrawTextSize(playerid, PCNEG_P_Nombre[playerid], 288.0, -23.893331);
			PlayerTextDrawAlignment(playerid, PCNEG_P_Nombre[playerid], 1);
			PlayerTextDrawColor(playerid, PCNEG_P_Nombre[playerid], -1);
			PlayerTextDrawUseBox(playerid, PCNEG_P_Nombre[playerid], true);
			PlayerTextDrawBoxColor(playerid, PCNEG_P_Nombre[playerid], -16777116);
			PlayerTextDrawSetShadow(playerid, PCNEG_P_Nombre[playerid], 0);
			PlayerTextDrawSetOutline(playerid, PCNEG_P_Nombre[playerid], 1);
			PlayerTextDrawBackgroundColor(playerid, PCNEG_P_Nombre[playerid], 51);
			PlayerTextDrawFont(playerid, PCNEG_P_Nombre[playerid], 1);
			PlayerTextDrawSetProportional(playerid, PCNEG_P_Nombre[playerid], 1);
			PlayerTextDrawShow(playerid, PCNEG_P_Nombre[playerid]);
		}
		if(PCNEG_P_Stock[playerid] == PlayerText:INVALID_TEXT_DRAW)
		{
			new
				NegID = ID_Negocio(playerid),
				type = InfoNegocio[NegID][nTipo],
			    str[MAX_STOCK_LEN+4],
			    str2[sizeof(str) * MAX_STOCK_TYPE],
				max2 = GetProductsAmmount(type),
				GananciaTotal;

			for(new i; i < max2; i++)
			{
			    format(str, sizeof(str), "%d~n~", InfoNegocio[NegID][nVentaStock][i]);
			    strcat(str2, str);
			    GananciaTotal += (InfoNegocio[NegID][nVentaStock][i] * ProductInfo[type][i][productPrice]);
			}
			PCNEG_P_Stock[playerid] = CreatePlayerTextDraw(playerid, 255.400070, 217.533264, str2);
			PlayerTextDrawLetterSize(playerid, PCNEG_P_Stock[playerid], 0.381199, 1.174399);
			PlayerTextDrawAlignment(playerid, PCNEG_P_Stock[playerid], 1);
			PlayerTextDrawColor(playerid, PCNEG_P_Stock[playerid], -2139062017);
			PlayerTextDrawSetShadow(playerid, PCNEG_P_Stock[playerid], 0);
			PlayerTextDrawSetOutline(playerid, PCNEG_P_Stock[playerid], 1);
			PlayerTextDrawBackgroundColor(playerid, PCNEG_P_Stock[playerid], 51);
			PlayerTextDrawFont(playerid, PCNEG_P_Stock[playerid], 1);
			PlayerTextDrawSetProportional(playerid, PCNEG_P_Stock[playerid], 1);
			PlayerTextDrawShow(playerid, PCNEG_P_Stock[playerid]);

			format(str, sizeof(str), "GANANCIA: ~g~$%d", GananciaTotal);

			PCNEG_G_Total[playerid] = CreatePlayerTextDraw(playerid, 437.199890, 331.445281, str);
			PlayerTextDrawLetterSize(playerid, PCNEG_G_Total[playerid], 0.449999, 1.600000);
			PlayerTextDrawTextSize(playerid, PCNEG_G_Total[playerid], 519.199951, 173.226669);
			PlayerTextDrawAlignment(playerid, PCNEG_G_Total[playerid], 2);
			PlayerTextDrawColor(playerid, PCNEG_G_Total[playerid], -1378294017);
			PlayerTextDrawUseBox(playerid, PCNEG_G_Total[playerid], true);
			PlayerTextDrawBoxColor(playerid, PCNEG_G_Total[playerid], 200);
			PlayerTextDrawSetShadow(playerid, PCNEG_G_Total[playerid], 0);
			PlayerTextDrawSetOutline(playerid, PCNEG_G_Total[playerid], 1);
			PlayerTextDrawBackgroundColor(playerid, PCNEG_G_Total[playerid], 51);
			PlayerTextDrawFont(playerid, PCNEG_G_Total[playerid], 1);
			PlayerTextDrawSetProportional(playerid, PCNEG_G_Total[playerid], 1);
			PlayerTextDrawShow(playerid, PCNEG_G_Total[playerid]);
		}
	}
	else
	{
		TextDrawHideForPlayer(playerid, Text:PCNEG_P_Box);
		TextDrawHideForPlayer(playerid, Text:PCNEG_P_Cerrar);
		TextDrawHideForPlayer(playerid, Text:PCNEG_P_Fondo);
		TextDrawHideForPlayer(playerid, Text:PCNEG_G_Ganancias);
		TextDrawHideForPlayer(playerid, Text:PCNEG_G_ProductoVendido);
		if(PCNEG_P_Nombre[playerid] != PlayerText:INVALID_TEXT_DRAW)
		{
		    PlayerTextDrawDestroy(playerid, PCNEG_P_Nombre[playerid]);
		    PCNEG_P_Nombre[playerid] = PlayerText:INVALID_TEXT_DRAW;
		}
		if(PCNEG_P_Stock[playerid] != PlayerText:INVALID_TEXT_DRAW)
		{
		    PlayerTextDrawDestroy(playerid, PCNEG_P_Stock[playerid]);
		    PCNEG_P_Stock[playerid] = PlayerText:INVALID_TEXT_DRAW;
		}
		if(PCNEG_G_Total[playerid] != PlayerText:INVALID_TEXT_DRAW)
		{
		    PlayerTextDrawDestroy(playerid, PCNEG_G_Total[playerid]);
		    PCNEG_G_Total[playerid] = PlayerText:INVALID_TEXT_DRAW;
		}
		DeletePVar(playerid, "PC.MenuGanancias");
	}
	return 1;
}

stock GetProductsAmmount(type)
{
	for (new i; i < MAX_STOCK_TYPE; i++)
	{
		if (!strcmp(ProductInfo[type][i][productName], "null"))
		    return i;
	}
	return MAX_STOCK_TYPE;
}

stock PC.ActualizarPedido(playerid, NegID)
{
	new
		type = InfoNegocio[NegID][nTipo],
	    str[MAX_STOCK_LEN+4],
	    str2[sizeof(str) * MAX_STOCK_TYPE],
		max_ = GetProductsAmmount(type),
		total_price,
		pvar_val;

	for(new i; i < max_; i++)
	{
	    format(str, 12, "P_STOCK%d", i);

	    pvar_val = GetPVarInt(playerid, str);

	    format(str, sizeof(str), "%d~n~", pvar_val);
	    strcat(str2, str);

	    total_price += ProductInfo[type][i][productFabPrice] * pvar_val;
	}
	PlayerTextDrawSetString(playerid, PCNEG_PS_Cantidad[playerid], str2);
	format(str, sizeof(str), "COSTO TOTAL: ~g~$%d", total_price);
	PlayerTextDrawSetString(playerid, PCNEG_PS_Costo[playerid], str);
	return 1;
}

stock RequestBuyProducts(playerid, negid, stock_a[])
{
	new
		type = InfoNegocio[negid][nTipo],
		max_ = GetProductsAmmount(type),
		total_price = PRECIO_ENTREGACAMIONEROS,
		str[160];

	for(new i; i < max_; i++)
	{
	    total_price += ProductInfo[type][i][productFabPrice] * stock_a[i];
	    format(str, 15, "bS%d", i);
	    SetPVarInt(playerid, str, stock_a[i]);
	}
	if(total_price < PC_MIN_COMPRA)
	{
		for(new i; i < max_; i++)
		{
		    format(str, 15, "bS%d", i);
		    DeletePVar(playerid, str);
		}

		Dialog(playerid, dError, DIALOG_STYLE_MSGBOX, ""#CROJO"ERROR", ""#CBLANCO"\n\nLa compra debe ser mayor o igual al mínimo de dinero: "#CVERDE"$"#PC_MIN_COMPRA"\n\n", "Cerrar", "");
		PC.ToggleMenuProductosComprar(playerid, false);
		return 1;
	}

	if(total_price > InfoNegocio[negid][nDinero])
	{
		for(new i; i < max_; i++)
		{
		    format(str, 15, "bS%d", i);
		    DeletePVar(playerid, str);
		}

		A_Format(str, "\n"#CBLANCO"Los fondos del negocio son insuficientes.\n\nFondos disponibles: "#CVERDE"$%d\n[Costo de camión: $%d]", InfoNegocio[negid][nDinero], PRECIO_ENTREGACAMIONEROS);
		Dialog(playerid, dError, DIALOG_STYLE_MSGBOX, ""#CROJO"ERROR EN LA COMPRA", str, "Cerrar", "");
		PC.ToggleMenuProductosComprar(playerid, false);
		PC.ToggleMenuProductos(playerid, true);
		return 0;
	}
	SetPVarInt(playerid, "bTotalC", total_price);
	A_Format(str, ""#CBLANCO"Costo de productos: "#CVERDE"$%d\n"#CBLANCO"Costo en camioneros: "#CVERDE"$%d\n"#CBLANCO"Costo total: "#CVERDE"$%d\n\n"#CBLANCO"Fondos: "#CVERDE"$%d", total_price-PRECIO_ENTREGACAMIONEROS, PRECIO_ENTREGACAMIONEROS, total_price, InfoNegocio[negid][nDinero]);
	Dialog(playerid, dComprarAFab, DIALOG_STYLE_MSGBOX, ""#CVERDE"PC - Confirmar compra", str, "Comprar", "Volver");
	PC.ToggleMenuProductosComprar(playerid, false);
	return 1;
}

stock PC.LoadTextDraws()
{
	PCNEG_Box = TextDrawCreate(590.400024, 121.706695, "_~n~_");
	TextDrawLetterSize(PCNEG_Box, 3.663598, 16.854402);
	TextDrawTextSize(PCNEG_Box, 47.999984, 0.000000);
	TextDrawAlignment(PCNEG_Box, 1);
	TextDrawColor(PCNEG_Box, -1);
	TextDrawUseBox(PCNEG_Box, true);
	TextDrawBoxColor(PCNEG_Box, 255);
	TextDrawSetShadow(PCNEG_Box, 0);
	TextDrawSetOutline(PCNEG_Box, 1);
	TextDrawBackgroundColor(PCNEG_Box, 51);
	TextDrawFont(PCNEG_Box, 1);
	TextDrawSetProportional(PCNEG_Box, 1);

	PCNEG_Fondo = TextDrawCreate(58.400024, 129.919982, PC_SPRITE);
	TextDrawLetterSize(PCNEG_Fondo, 0.000000, 0.000000);
	TextDrawTextSize(PCNEG_Fondo, 519.199951, 269.546844);
	TextDrawAlignment(PCNEG_Fondo, 1);
	TextDrawColor(PCNEG_Fondo, -1);
	TextDrawSetShadow(PCNEG_Fondo, 0);
	TextDrawSetOutline(PCNEG_Fondo, 0);
	TextDrawFont(PCNEG_Fondo, 4);

	PCNEG_Inicio = TextDrawCreate(61.679950, 382.517517, "Inicio");
	TextDrawLetterSize(PCNEG_Inicio, 0.449999, 1.600000);
	TextDrawTextSize(PCNEG_Inicio, 573.599975, 12.693327);
	TextDrawAlignment(PCNEG_Inicio, 1);
	TextDrawColor(PCNEG_Inicio, -1);
	TextDrawUseBox(PCNEG_Inicio, true);
	TextDrawBoxColor(PCNEG_Inicio, -1983319867);
	TextDrawSetShadow(PCNEG_Inicio, 0);
	TextDrawSetOutline(PCNEG_Inicio, 1);
	TextDrawBackgroundColor(PCNEG_Inicio, 51);
	TextDrawFont(PCNEG_Inicio, 1);
	TextDrawSetProportional(PCNEG_Inicio, 1);
	TextDrawSetSelectable(PCNEG_Inicio, true);

	PCNEG_Start = TextDrawCreate(552.799926, 390.506683, "o");
	TextDrawLetterSize(PCNEG_Start, 1.023599, 3.869863);
	TextDrawAlignment(PCNEG_Start, 1);
	TextDrawColor(PCNEG_Start, -1061109505);
	TextDrawSetShadow(PCNEG_Start, 8);
	TextDrawSetOutline(PCNEG_Start, 0);
	TextDrawBackgroundColor(PCNEG_Start, 51);
	TextDrawFont(PCNEG_Start, 1);
	TextDrawSetProportional(PCNEG_Start, 1);

	PCNEG_Decorado = TextDrawCreate(266.399963, 406.186676, "CR PC");
	TextDrawLetterSize(PCNEG_Decorado, 0.449999, 1.600000);
	TextDrawAlignment(PCNEG_Decorado, 1);
	TextDrawColor(PCNEG_Decorado, -1);
	TextDrawSetShadow(PCNEG_Decorado, 0);
	TextDrawSetOutline(PCNEG_Decorado, 1);
	TextDrawBackgroundColor(PCNEG_Decorado, 51);
	TextDrawFont(PCNEG_Decorado, 1);
	TextDrawSetProportional(PCNEG_Decorado, 1);

	PCNEG_P_Box = TextDrawCreate(544.239929, 366.604003, "usebox");
	TextDrawLetterSize(PCNEG_P_Box, -0.040798, -23.853950);
	TextDrawTextSize(PCNEG_P_Box, 103.039833, -63.466670);
	TextDrawAlignment(PCNEG_P_Box, 1);
	TextDrawColor(PCNEG_P_Box, 0);
	TextDrawUseBox(PCNEG_P_Box, true);
	TextDrawBoxColor(PCNEG_P_Box, 150);
	TextDrawSetShadow(PCNEG_P_Box, 0);
	TextDrawSetOutline(PCNEG_P_Box, 0);
	TextDrawFont(PCNEG_P_Box, 0);

	PCNEG_P_Cerrar = TextDrawCreate(525.600036, 154.559982, "x");
	TextDrawLetterSize(PCNEG_P_Cerrar, 0.449999, 1.600000);
	TextDrawTextSize(PCNEG_P_Cerrar, 540.999877, 20.0);
	TextDrawAlignment(PCNEG_P_Cerrar, 1);
	TextDrawColor(PCNEG_P_Cerrar, -1);
	TextDrawSetShadow(PCNEG_P_Cerrar, 0);
	TextDrawSetOutline(PCNEG_P_Cerrar, 1);
	TextDrawBackgroundColor(PCNEG_P_Cerrar, 51);
	TextDrawFont(PCNEG_P_Cerrar, 1);
	TextDrawSetProportional(PCNEG_P_Cerrar, 1);
	TextDrawSetSelectable(PCNEG_P_Cerrar, true);

	PCNEG_P_Fondo = TextDrawCreate(119.119865, 194.042633, "_");
	TextDrawLetterSize(PCNEG_P_Fondo, 0.677999, 17.205329);
	TextDrawTextSize(PCNEG_P_Fondo, 527.999877, -19.413330);
	TextDrawAlignment(PCNEG_P_Fondo, 1);
	TextDrawColor(PCNEG_P_Fondo, -5963521);
	TextDrawUseBox(PCNEG_P_Fondo, true);
	TextDrawBoxColor(PCNEG_P_Fondo, -926365616);
	TextDrawSetShadow(PCNEG_P_Fondo, 0);
	TextDrawSetOutline(PCNEG_P_Fondo, 1);
	TextDrawBackgroundColor(PCNEG_P_Fondo, 51);
	TextDrawFont(PCNEG_P_Fondo, 1);
	TextDrawSetProportional(PCNEG_P_Fondo, 1);

	PCNEG_P_Productos = TextDrawCreate(145.440063, 173.600006, "PRODUCTOS");
	TextDrawLetterSize(PCNEG_P_Productos, 0.449999, 1.600000);
	TextDrawAlignment(PCNEG_P_Productos, 1);
	TextDrawColor(PCNEG_P_Productos, -1);
	TextDrawSetShadow(PCNEG_P_Productos, 0);
	TextDrawSetOutline(PCNEG_P_Productos, 1);
	TextDrawBackgroundColor(PCNEG_P_Productos, 51);
	TextDrawFont(PCNEG_P_Productos, 1);
	TextDrawSetProportional(PCNEG_P_Productos, 1);

	PCNEG_G_Ganancias = TextDrawCreate(145.440063, 173.600006, "GANANCIAS DE HOY");
	TextDrawLetterSize(PCNEG_G_Ganancias, 0.449999, 1.600000);
	TextDrawAlignment(PCNEG_G_Ganancias, 1);
	TextDrawColor(PCNEG_G_Ganancias, -1);
	TextDrawSetShadow(PCNEG_G_Ganancias, 0);
	TextDrawSetOutline(PCNEG_G_Ganancias, 1);
	TextDrawBackgroundColor(PCNEG_G_Ganancias, 51);
	TextDrawFont(PCNEG_G_Ganancias, 1);
	TextDrawSetProportional(PCNEG_G_Ganancias, 1);

	PCNEG_P_ComprarProductos = TextDrawCreate(351.200012, 331.519958, "COMPRAR PRODUCTOS");
	TextDrawLetterSize(PCNEG_P_ComprarProductos, 0.449999, 1.600000);
	TextDrawTextSize(PCNEG_P_ComprarProductos, 523.199951, 16.426668);
	TextDrawAlignment(PCNEG_P_ComprarProductos, 1);
	TextDrawColor(PCNEG_P_ComprarProductos, -5963521);
	TextDrawUseBox(PCNEG_P_ComprarProductos, true);
	TextDrawBoxColor(PCNEG_P_ComprarProductos, 200);
	TextDrawSetShadow(PCNEG_P_ComprarProductos, 0);
	TextDrawSetOutline(PCNEG_P_ComprarProductos, 1);
	TextDrawBackgroundColor(PCNEG_P_ComprarProductos, 51);
	TextDrawFont(PCNEG_P_ComprarProductos, 1);
	TextDrawSetProportional(PCNEG_P_ComprarProductos, 1);
	TextDrawSetSelectable(PCNEG_P_ComprarProductos, true);

	PCNEG_P_ProductoStock = TextDrawCreate(125.679931, 194.581390, "Producto               Stock");
	TextDrawLetterSize(PCNEG_P_ProductoStock, 0.363599, 1.928532);
	TextDrawAlignment(PCNEG_P_ProductoStock, 1);
	TextDrawColor(PCNEG_P_ProductoStock, -5963521);
	TextDrawSetShadow(PCNEG_P_ProductoStock, 0);
	TextDrawSetOutline(PCNEG_P_ProductoStock, -1);
	TextDrawBackgroundColor(PCNEG_P_ProductoStock, 51);
	TextDrawFont(PCNEG_P_ProductoStock, 1);
	TextDrawSetProportional(PCNEG_P_ProductoStock, 1);

	PCNEG_PS_Box = TextDrawCreate(499.640258, 370.591369, "usebox");
	TextDrawLetterSize(PCNEG_PS_Box, -0.039997, -26.668876);
	TextDrawTextSize(PCNEG_PS_Box, 307.839874, -79.146659);
	TextDrawAlignment(PCNEG_PS_Box, 1);
	TextDrawColor(PCNEG_PS_Box, 0);
	TextDrawUseBox(PCNEG_PS_Box, true);
	TextDrawBoxColor(PCNEG_PS_Box, 150);
	TextDrawSetShadow(PCNEG_PS_Box, 0);
	TextDrawSetOutline(PCNEG_PS_Box, 0);
	TextDrawFont(PCNEG_PS_Box, 0);

	PCNEG_PS_NPC = TextDrawCreate(320.000000, 151.573348, "Nombre   Cantidad   Precio");
	TextDrawLetterSize(PCNEG_PS_NPC, 0.277999, 1.629866);
	TextDrawAlignment(PCNEG_PS_NPC, 1);
	TextDrawColor(PCNEG_PS_NPC, -1);
	TextDrawSetShadow(PCNEG_PS_NPC, 0);
	TextDrawSetOutline(PCNEG_PS_NPC, 1);
	TextDrawBackgroundColor(PCNEG_PS_NPC, 51);
	TextDrawFont(PCNEG_PS_NPC, 2);
	TextDrawSetProportional(PCNEG_PS_NPC, 1);

	PCNEG_PS_Cerrar = TextDrawCreate(482.600189, 130.919830, "x");
	TextDrawLetterSize(PCNEG_PS_Cerrar, 0.449999, 1.600000);
	TextDrawTextSize(PCNEG_PS_Cerrar, 492.000000, 354.666748);
	TextDrawAlignment(PCNEG_PS_Cerrar, 1);
	TextDrawColor(PCNEG_PS_Cerrar, -1);
	TextDrawSetShadow(PCNEG_PS_Cerrar, 0);
	TextDrawSetOutline(PCNEG_PS_Cerrar, 1);
	TextDrawBackgroundColor(PCNEG_PS_Cerrar, 51);
	TextDrawFont(PCNEG_PS_Cerrar, 1);
	TextDrawSetProportional(PCNEG_PS_Cerrar, 1);
	TextDrawSetSelectable(PCNEG_PS_Cerrar, true);

	PCNEG_PS_Fondo = TextDrawCreate(321.719848, 171.895904, "_");
	TextDrawLetterSize(PCNEG_PS_Fondo, 0.648397, 14.621865);
	TextDrawTextSize(PCNEG_PS_Fondo, 488.000030, -17.919998);
	TextDrawAlignment(PCNEG_PS_Fondo, 1);
	TextDrawColor(PCNEG_PS_Fondo, -5963521);
	TextDrawUseBox(PCNEG_PS_Fondo, true);
	TextDrawBoxColor(PCNEG_PS_Fondo, -926365616);
	TextDrawSetShadow(PCNEG_PS_Fondo, 0);
	TextDrawSetOutline(PCNEG_PS_Fondo, 1);
	TextDrawBackgroundColor(PCNEG_PS_Fondo, 51);
	TextDrawFont(PCNEG_PS_Fondo, 1);
	TextDrawSetProportional(PCNEG_PS_Fondo, 1);

	PCNEG_G_ProductoVendido = TextDrawCreate(125.679931, 194.581390, "Producto               Vendidos hoy");
	TextDrawLetterSize(PCNEG_G_ProductoVendido, 0.363599, 1.928532);
	TextDrawAlignment(PCNEG_G_ProductoVendido, 1);
	TextDrawColor(PCNEG_G_ProductoVendido, -5963521);
	TextDrawSetShadow(PCNEG_G_ProductoVendido, 0);
	TextDrawSetOutline(PCNEG_G_ProductoVendido, -1);
	TextDrawBackgroundColor(PCNEG_G_ProductoVendido, 51);
	TextDrawFont(PCNEG_G_ProductoVendido, 1);
	TextDrawSetProportional(PCNEG_G_ProductoVendido, 1);

	for(new i; i < MAX_STOCK_TYPE; i++)
	{
	    //Flecha Izquierda
		PCNEG_PS_Flecha[NEG_FLECHA_IZQUIERDA][i] = TextDrawCreate(388.0, 171.253570 + ( floatmul( 10.4, float(i) ) ), "~<~");
		TextDrawLetterSize(PCNEG_PS_Flecha[NEG_FLECHA_IZQUIERDA][i], 0.333999, 1.152000);
		TextDrawTextSize(PCNEG_PS_Flecha[NEG_FLECHA_IZQUIERDA][i], 400.0, 10.0);
		TextDrawAlignment(PCNEG_PS_Flecha[NEG_FLECHA_IZQUIERDA][i], 1);
		TextDrawColor(PCNEG_PS_Flecha[NEG_FLECHA_IZQUIERDA][i], -1378294017);
		TextDrawSetShadow(PCNEG_PS_Flecha[NEG_FLECHA_IZQUIERDA][i], 0);
		TextDrawSetOutline(PCNEG_PS_Flecha[NEG_FLECHA_IZQUIERDA][i], 1);
		TextDrawBackgroundColor(PCNEG_PS_Flecha[NEG_FLECHA_IZQUIERDA][i], 51);
		TextDrawFont(PCNEG_PS_Flecha[NEG_FLECHA_IZQUIERDA][i], 1);
		TextDrawSetProportional(PCNEG_PS_Flecha[NEG_FLECHA_IZQUIERDA][i], 1);
		TextDrawSetSelectable(PCNEG_PS_Flecha[NEG_FLECHA_IZQUIERDA][i], true);

		//Flecha derecha
		PCNEG_PS_Flecha[NEG_FLECHA_DERECHA][i] = TextDrawCreate(414.120178, 171.253570 + ( floatmul( 10.4, float(i) ) ), "~>~");
		TextDrawLetterSize(PCNEG_PS_Flecha[NEG_FLECHA_DERECHA][i], 0.333999, 1.152000);
		TextDrawTextSize(PCNEG_PS_Flecha[NEG_FLECHA_DERECHA][i], 427.0, 10.0);
		TextDrawAlignment(PCNEG_PS_Flecha[NEG_FLECHA_DERECHA][i], 1);
		TextDrawColor(PCNEG_PS_Flecha[NEG_FLECHA_DERECHA][i], -1378294017);
		TextDrawSetShadow(PCNEG_PS_Flecha[NEG_FLECHA_DERECHA][i], 0);
		TextDrawSetOutline(PCNEG_PS_Flecha[NEG_FLECHA_DERECHA][i], 1);
		TextDrawBackgroundColor(PCNEG_PS_Flecha[NEG_FLECHA_DERECHA][i], 51);
		TextDrawFont(PCNEG_PS_Flecha[NEG_FLECHA_DERECHA][i], 1);
		TextDrawSetProportional(PCNEG_PS_Flecha[NEG_FLECHA_DERECHA][i], 1);
		TextDrawSetSelectable(PCNEG_PS_Flecha[NEG_FLECHA_DERECHA][i], true);
	}

	PCNEG_PS_ConfirmarComprar = TextDrawCreate(404.519927, 342.674804, "CONFIRMAR Y COMPRAR");
	TextDrawLetterSize(PCNEG_PS_ConfirmarComprar, 0.330798, 2.070399);
	TextDrawTextSize(PCNEG_PS_ConfirmarComprar, 537.600036, 166.685424);
	TextDrawAlignment(PCNEG_PS_ConfirmarComprar, 2);
	TextDrawColor(PCNEG_PS_ConfirmarComprar, -5963521);
	TextDrawUseBox(PCNEG_PS_ConfirmarComprar, true);
	TextDrawBoxColor(PCNEG_PS_ConfirmarComprar, -1378294017);
	TextDrawSetShadow(PCNEG_PS_ConfirmarComprar, 0);
	TextDrawSetOutline(PCNEG_PS_ConfirmarComprar, -1);
	TextDrawBackgroundColor(PCNEG_PS_ConfirmarComprar, 51);
	TextDrawFont(PCNEG_PS_ConfirmarComprar, 2);
	TextDrawSetProportional(PCNEG_PS_ConfirmarComprar, 1);
	TextDrawSetSelectable(PCNEG_PS_ConfirmarComprar, true);

	PCNEG_S_Fondo = TextDrawCreate(183.800170, 381.806579, "usebox");
	TextDrawLetterSize(PCNEG_S_Fondo, 0.000000, -17.487018);
	TextDrawTextSize(PCNEG_S_Fondo, 53.999958, 0.000000);
	TextDrawAlignment(PCNEG_S_Fondo, 1);
	TextDrawColor(PCNEG_S_Fondo, 0);
	TextDrawUseBox(PCNEG_S_Fondo, true);
	TextDrawBoxColor(PCNEG_S_Fondo, 150);
	TextDrawSetShadow(PCNEG_S_Fondo, 0);
	TextDrawSetOutline(PCNEG_S_Fondo, 0);
	TextDrawFont(PCNEG_S_Fondo, 0);

	PCNEG_S_Productos = TextDrawCreate(64.799964, 239.680023, "Productos");
	TextDrawLetterSize(PCNEG_S_Productos, 0.449999, 1.600000);
	TextDrawTextSize(PCNEG_S_Productos, 172.000000, 11.199995);
	TextDrawAlignment(PCNEG_S_Productos, 1);
	TextDrawColor(PCNEG_S_Productos, -5963521);
	TextDrawUseBox(PCNEG_S_Productos, true);
	TextDrawBoxColor(PCNEG_S_Productos, -926365616);
	TextDrawSetShadow(PCNEG_S_Productos, 0);
	TextDrawSetOutline(PCNEG_S_Productos, 1);
	TextDrawBackgroundColor(PCNEG_S_Productos, 51);
	TextDrawFont(PCNEG_S_Productos, 1);
	TextDrawSetProportional(PCNEG_S_Productos, 1);
	TextDrawSetSelectable(PCNEG_S_Productos, true);

	PCNEG_S_Ganancias = TextDrawCreate(64.519935, 266.215972, "Ganancias");
	TextDrawLetterSize(PCNEG_S_Ganancias, 0.449999, 1.600000);
	TextDrawTextSize(PCNEG_S_Ganancias, 172.000000, 11.199995);
	TextDrawAlignment(PCNEG_S_Ganancias, 1);
	TextDrawColor(PCNEG_S_Ganancias, -5963521);
	TextDrawUseBox(PCNEG_S_Ganancias, true);
	TextDrawBoxColor(PCNEG_S_Ganancias, -926365616);
	TextDrawSetShadow(PCNEG_S_Ganancias, 0);
	TextDrawSetOutline(PCNEG_S_Ganancias, 1);
	TextDrawBackgroundColor(PCNEG_S_Ganancias, 51);
	TextDrawFont(PCNEG_S_Ganancias, 1);
	TextDrawSetProportional(PCNEG_S_Ganancias, 1);
	TextDrawSetSelectable(PCNEG_S_Ganancias, true);

	PCNEG_S_Configurar = TextDrawCreate(64.239868, 291.930725, "Configurar");
	TextDrawLetterSize(PCNEG_S_Configurar, 0.449999, 1.600000);
	TextDrawTextSize(PCNEG_S_Configurar, 172.000000, 11.199995);
	TextDrawAlignment(PCNEG_S_Configurar, 1);
	TextDrawColor(PCNEG_S_Configurar, -5963521);
	TextDrawUseBox(PCNEG_S_Configurar, true);
	TextDrawBoxColor(PCNEG_S_Configurar, -926365616);
	TextDrawSetShadow(PCNEG_S_Configurar, 0);
	TextDrawSetOutline(PCNEG_S_Configurar, 1);
	TextDrawBackgroundColor(PCNEG_S_Configurar, 51);
	TextDrawFont(PCNEG_S_Configurar, 1);
	TextDrawSetProportional(PCNEG_S_Configurar, 1);
	TextDrawSetSelectable(PCNEG_S_Configurar, true);

	PCNEG_S_Apagar = TextDrawCreate(64.759841, 357.069519, "~r~APAGAR");
	TextDrawLetterSize(PCNEG_S_Apagar, 0.449999, 1.600000);
	TextDrawTextSize(PCNEG_S_Apagar, 172.000000, 11.199995);
	TextDrawAlignment(PCNEG_S_Apagar, 1);
	TextDrawColor(PCNEG_S_Apagar, -5963521);
	TextDrawUseBox(PCNEG_S_Apagar, true);
	TextDrawBoxColor(PCNEG_S_Apagar, -926365616);
	TextDrawSetShadow(PCNEG_S_Apagar, 0);
	TextDrawSetOutline(PCNEG_S_Apagar, 1);
	TextDrawBackgroundColor(PCNEG_S_Apagar, 51);
	TextDrawFont(PCNEG_S_Apagar, 1);
	TextDrawSetProportional(PCNEG_S_Apagar, 1);
	TextDrawSetSelectable(PCNEG_S_Apagar, true);
	return 1;
}

stock CEL.LoadTextDraws()
{
	CEL.Fondo[0] = TextDrawCreate(382.800018, 171.739990, "usebox");
	TextDrawLetterSize(CEL.Fondo[0], 0.000000, 18.267040);
	TextDrawTextSize(CEL.Fondo[0], 251.600006, 0.000000);
	TextDrawAlignment(CEL.Fondo[0], 1);
	TextDrawColor(CEL.Fondo[0], 0);
	TextDrawUseBox(CEL.Fondo[0], true);
	TextDrawBoxColor(CEL.Fondo[0], CEL_COLOR);
	TextDrawSetShadow(CEL.Fondo[0], 0);
	TextDrawSetOutline(CEL.Fondo[0], 0);
	TextDrawFont(CEL.Fondo[0], 0);

	CEL.Fondo[1] = TextDrawCreate(249.760025, 157.471939, "|");
	TextDrawLetterSize(CEL.Fondo[1], 1.268399, 5.579730);
	TextDrawAlignment(CEL.Fondo[1], 1);
	TextDrawColor(CEL.Fondo[1], CEL_COLOR);
	TextDrawSetShadow(CEL.Fondo[1], 0);
	TextDrawSetOutline(CEL.Fondo[1], 1);
	TextDrawBackgroundColor(CEL.Fondo[1], CEL_COLOR);
	TextDrawFont(CEL.Fondo[1], 1);
	TextDrawSetProportional(CEL.Fondo[1], 1);

	CEL.Fondo[2] = TextDrawCreate(366.280120, 321.245391, "|");
	TextDrawLetterSize(CEL.Fondo[2], 1.268399, 5.579730);
	TextDrawAlignment(CEL.Fondo[2], 1);
	TextDrawColor(CEL.Fondo[2], CEL_COLOR);
	TextDrawSetShadow(CEL.Fondo[2], 0);
	TextDrawSetOutline(CEL.Fondo[2], 1);
	TextDrawBackgroundColor(CEL.Fondo[2], CEL_COLOR);
	TextDrawFont(CEL.Fondo[2], 1);
	TextDrawSetProportional(CEL.Fondo[2], 1);

	CEL.Fondo[3] = TextDrawCreate(361.999908, 158.053421, "|");
	TextDrawLetterSize(CEL.Fondo[3], 1.586799, 5.303456);
	TextDrawAlignment(CEL.Fondo[3], 1);
	TextDrawColor(CEL.Fondo[3], CEL_COLOR);
	TextDrawSetShadow(CEL.Fondo[3], 0);
	TextDrawSetOutline(CEL.Fondo[3], 1);
	TextDrawBackgroundColor(CEL.Fondo[3], CEL_COLOR);
	TextDrawFont(CEL.Fondo[3], 3);
	TextDrawSetProportional(CEL.Fondo[3], 1);

	CEL.Fondo[4] = TextDrawCreate(250.040069, 321.453308, "|");
	TextDrawLetterSize(CEL.Fondo[4], 1.268399, 5.579730);
	TextDrawAlignment(CEL.Fondo[4], 1);
	TextDrawColor(CEL.Fondo[4], CEL_COLOR);
	TextDrawSetShadow(CEL.Fondo[4], 0);
	TextDrawSetOutline(CEL.Fondo[4], 1);
	TextDrawBackgroundColor(CEL.Fondo[4], CEL_COLOR);
	TextDrawFont(CEL.Fondo[4], 1);
	TextDrawSetProportional(CEL.Fondo[4], 1);

	CEL.Fondo[5] = TextDrawCreate(378.999816, 167.513275, "usebox");
	TextDrawLetterSize(CEL.Fondo[5], 0.000000, -0.132955);
	TextDrawTextSize(CEL.Fondo[5], 254.000045, 0.000000);
	TextDrawAlignment(CEL.Fondo[5], 1);
	TextDrawColor(CEL.Fondo[5], 0);
	TextDrawUseBox(CEL.Fondo[5], true);
	TextDrawBoxColor(CEL.Fondo[5], CEL_COLOR);
	TextDrawSetShadow(CEL.Fondo[5], 0);
	TextDrawSetOutline(CEL.Fondo[5], 0);
	TextDrawFont(CEL.Fondo[5], 0);

	CEL.Fondo[6] = TextDrawCreate(380.799774, 342.486724, "usebox");
	TextDrawLetterSize(CEL.Fondo[6], 0.000000, -0.132955);
	TextDrawTextSize(CEL.Fondo[6], 254.800018, 0.000000);
	TextDrawAlignment(CEL.Fondo[6], 1);
	TextDrawColor(CEL.Fondo[6], 0);
	TextDrawUseBox(CEL.Fondo[6], true);
	TextDrawBoxColor(CEL.Fondo[6], CEL_COLOR);
	TextDrawSetShadow(CEL.Fondo[6], 0);
	TextDrawSetOutline(CEL.Fondo[6], 0);
	TextDrawFont(CEL.Fondo[6], 0);

	CEL.Fondo[7] = TextDrawCreate(261.000091, 174.740036, "usebox");
	TextDrawLetterSize(CEL.Fondo[7], 0.000000, 18.187040);
	TextDrawTextSize(CEL.Fondo[7], 249.200149, 0.000000);
	TextDrawAlignment(CEL.Fondo[7], 1);
	TextDrawColor(CEL.Fondo[7], 0);
	TextDrawUseBox(CEL.Fondo[7], true);
	TextDrawBoxColor(CEL.Fondo[7], CEL_COLOR);
	TextDrawSetShadow(CEL.Fondo[7], 0);
	TextDrawSetOutline(CEL.Fondo[7], 0);
	TextDrawFont(CEL.Fondo[7], 0);

	CEL.Fondo[8] = TextDrawCreate(386.000030, 172.006683, "usebox");
	TextDrawLetterSize(CEL.Fondo[8], 0.000000, 18.187040);
	TextDrawTextSize(CEL.Fondo[8], 373.200073, 0.000000);
	TextDrawAlignment(CEL.Fondo[8], 1);
	TextDrawColor(CEL.Fondo[8], 0);
	TextDrawUseBox(CEL.Fondo[8], true);
	TextDrawBoxColor(CEL.Fondo[8], CEL_COLOR);
	TextDrawSetShadow(CEL.Fondo[8], 0);
	TextDrawSetOutline(CEL.Fondo[8], 0);
	TextDrawFont(CEL.Fondo[8], 0);

	CEL.Fondo[9] = TextDrawCreate(343.600006, 336.006652, "usebox");
	TextDrawLetterSize(CEL.Fondo[9], 0.000000, -0.067775);
	TextDrawTextSize(CEL.Fondo[9], 286.000000, 0.000000);
	TextDrawAlignment(CEL.Fondo[9], 1);
	TextDrawColor(CEL.Fondo[9], 0);
	TextDrawUseBox(CEL.Fondo[9], true);
	TextDrawBoxColor(CEL.Fondo[9], 0x000000FF);
	TextDrawSetShadow(CEL.Fondo[9], 0);
	TextDrawSetOutline(CEL.Fondo[9], 0);
	TextDrawFont(CEL.Fondo[9], 0);

	CEL.ImagenFondo = TextDrawCreate(256.639923, 172.853347, CEL_SPRITE);
	TextDrawLetterSize(CEL.ImagenFondo, 0.000000, 0.000000);
	TextDrawTextSize(CEL.ImagenFondo, 120.799987, 156.800018);
	TextDrawAlignment(CEL.ImagenFondo, 1);
	TextDrawColor(CEL.ImagenFondo, -1);
	TextDrawSetShadow(CEL.ImagenFondo, 0);
	TextDrawSetOutline(CEL.ImagenFondo, 0);
	TextDrawFont(CEL.ImagenFondo, 4);

	CEL.Hora = TextDrawCreate(260.000152, 175.466629, "CARGANDO...");
	TextDrawLetterSize(CEL.Hora, 0.295599, 0.674133);
	TextDrawTextSize(CEL.Hora, 373.600036, -26.133335);
	TextDrawAlignment(CEL.Hora, 1);
	TextDrawColor(CEL.Hora, -1);
	TextDrawUseBox(CEL.Hora, true);
	TextDrawBoxColor(CEL.Hora, -1378294017);
	TextDrawSetShadow(CEL.Hora, 0);
	TextDrawSetOutline(CEL.Hora, 1);
	TextDrawBackgroundColor(CEL.Hora, 51);
	TextDrawFont(CEL.Hora, 1);
	TextDrawSetProportional(CEL.Hora, 1);

	//Menu
	CEL.MenuMarcar[0] = TextDrawCreate(267.199981, 195.626724, "hud:arrow");
	TextDrawLetterSize(CEL.MenuMarcar[0], 0.000000, 0.000000);
	TextDrawTextSize(CEL.MenuMarcar[0], 38.400009, 29.119995);
	TextDrawAlignment(CEL.MenuMarcar[0], 1);
	TextDrawColor(CEL.MenuMarcar[0], -1);
	TextDrawSetShadow(CEL.MenuMarcar[0], 0);
	TextDrawSetOutline(CEL.MenuMarcar[0], 0);
	TextDrawBackgroundColor(CEL.MenuMarcar[0], 16777215);
	TextDrawFont(CEL.MenuMarcar[0], 4);
	TextDrawSetSelectable(CEL.MenuMarcar[0], true);

	CEL.MenuMarcar[1] = TextDrawCreate(268.000030, 223.253387, "Marcar");
	TextDrawLetterSize(CEL.MenuMarcar[1], 0.325998, 1.114665);
	TextDrawAlignment(CEL.MenuMarcar[1], 1);
	TextDrawColor(CEL.MenuMarcar[1], -1);
	TextDrawSetShadow(CEL.MenuMarcar[1], 0);
	TextDrawSetOutline(CEL.MenuMarcar[1], 1);
	TextDrawBackgroundColor(CEL.MenuMarcar[1], 51);
	TextDrawFont(CEL.MenuMarcar[1], 1);
	TextDrawSetProportional(CEL.MenuMarcar[1], 1);

	CEL.MenuServicios[0] = TextDrawCreate(333.149688, 266.510070, "hud:radar_hostpital");
	TextDrawLetterSize(CEL.MenuServicios[0], 0.000000, 0.000000);
	TextDrawTextSize(CEL.MenuServicios[0], 34.400028, 29.866674);
	TextDrawAlignment(CEL.MenuServicios[0], 1);
	TextDrawColor(CEL.MenuServicios[0], -1);
	TextDrawSetShadow(CEL.MenuServicios[0], 0);
	TextDrawSetOutline(CEL.MenuServicios[0], 0);
	TextDrawBackgroundColor(CEL.MenuServicios[0], 16777215);
	TextDrawFont(CEL.MenuServicios[0], 4);
	TextDrawSetSelectable(CEL.MenuServicios[0], true);

	CEL.MenuServicios[1] = TextDrawCreate(325.919738, 297.530639, "Servicios");
	TextDrawLetterSize(CEL.MenuServicios[1], 0.325998, 1.114665);
	TextDrawAlignment(CEL.MenuServicios[1], 1);
	TextDrawColor(CEL.MenuServicios[1], -1);
	TextDrawSetShadow(CEL.MenuServicios[1], 0);
	TextDrawSetOutline(CEL.MenuServicios[1], 1);
	TextDrawBackgroundColor(CEL.MenuServicios[1], 51);
	TextDrawFont(CEL.MenuServicios[1], 1);
	TextDrawSetProportional(CEL.MenuServicios[1], 1);

	CEL.MenuMensajes[0] = TextDrawCreate(330.050079, 196.966567, "hud:radar_gangn");
	TextDrawLetterSize(CEL.MenuMensajes[0], 0.000000, 0.000000);
	TextDrawTextSize(CEL.MenuMensajes[0], 38.400009, 29.119995);
	TextDrawAlignment(CEL.MenuMensajes[0], 1);
	TextDrawColor(CEL.MenuMensajes[0], -1);
	TextDrawSetShadow(CEL.MenuMensajes[0], 0);
	TextDrawSetOutline(CEL.MenuMensajes[0], 0);
	TextDrawBackgroundColor(CEL.MenuMensajes[0], 16777215);
	TextDrawFont(CEL.MenuMensajes[0], 4);
	TextDrawSetSelectable(CEL.MenuMensajes[0], true);

	CEL.MenuMensajes[1] = TextDrawCreate(325.839843, 224.655914, "Mensajes");
	TextDrawLetterSize(CEL.MenuMensajes[1], 0.325998, 1.114665);
	TextDrawAlignment(CEL.MenuMensajes[1], 1);
	TextDrawColor(CEL.MenuMensajes[1], -1);
	TextDrawSetShadow(CEL.MenuMensajes[1], 0);
	TextDrawSetOutline(CEL.MenuMensajes[1], 1);
	TextDrawBackgroundColor(CEL.MenuMensajes[1], 51);
	TextDrawFont(CEL.MenuMensajes[1], 1);
	TextDrawSetProportional(CEL.MenuMensajes[1], 1);

	CEL.MenuContactos[0] = TextDrawCreate(270.449981, 267.393310, "hud:radar_savegame");
	TextDrawLetterSize(CEL.MenuContactos[0], 0.000000, 0.000000);
	TextDrawTextSize(CEL.MenuContactos[0], 30.400011, 25.386661);
	TextDrawAlignment(CEL.MenuContactos[0], 1);
	TextDrawColor(CEL.MenuContactos[0], -1);
	TextDrawSetShadow(CEL.MenuContactos[0], 0);
	TextDrawSetOutline(CEL.MenuContactos[0], 0);
	TextDrawBackgroundColor(CEL.MenuContactos[0], 16777215);
	TextDrawFont(CEL.MenuContactos[0], 4);
	TextDrawSetSelectable(CEL.MenuContactos[0], true);

	CEL.MenuContactos[1] = TextDrawCreate(261.079772, 297.725372, "Contactos");
	TextDrawLetterSize(CEL.MenuContactos[1], 0.325998, 1.114665);
	TextDrawAlignment(CEL.MenuContactos[1], 1);
	TextDrawColor(CEL.MenuContactos[1], -1);
	TextDrawSetShadow(CEL.MenuContactos[1], 0);
	TextDrawSetOutline(CEL.MenuContactos[1], 1);
	TextDrawBackgroundColor(CEL.MenuContactos[1], 51);
	TextDrawFont(CEL.MenuContactos[1], 1);
	TextDrawSetProportional(CEL.MenuContactos[1], 1);

	CEL.MenuVolver = TextDrawCreate(270.359466, 330.338623, "~<~");
	TextDrawLetterSize(CEL.MenuVolver, 0.325998, 1.114665);
	TextDrawTextSize(CEL.MenuVolver, 284.720245, 13.066666);
	TextDrawAlignment(CEL.MenuVolver, 1);
	TextDrawColor(CEL.MenuVolver, -1);
	TextDrawSetShadow(CEL.MenuVolver, 0);
	TextDrawSetOutline(CEL.MenuVolver, 1);
	TextDrawBackgroundColor(CEL.MenuVolver, 51);
	TextDrawFont(CEL.MenuVolver, 1);
	TextDrawSetProportional(CEL.MenuVolver, 1);
	TextDrawSetSelectable(CEL.MenuVolver, true);

	//Marcar
	CEL.MarcarNumero[0] = TextDrawCreate(303.799926, 298.696075, " 0");
	TextDrawLetterSize(CEL.MarcarNumero[0], 0.449999, 1.600000);
	TextDrawTextSize(CEL.MarcarNumero[0], 330.319549, 15.474664);
	TextDrawAlignment(CEL.MarcarNumero[0], 1);
	TextDrawColor(CEL.MarcarNumero[0], -1);
	TextDrawUseBox(CEL.MarcarNumero[0], true);
	TextDrawBoxColor(CEL.MarcarNumero[0], -1378294017);
	TextDrawSetShadow(CEL.MarcarNumero[0], 0);
	TextDrawSetOutline(CEL.MarcarNumero[0], 1);
	TextDrawBackgroundColor(CEL.MarcarNumero[0], 51);
	TextDrawFont(CEL.MarcarNumero[0], 2);
	TextDrawSetProportional(CEL.MarcarNumero[0], 1);
	TextDrawSetSelectable(CEL.MarcarNumero[0], true);

	CEL.MarcarNumero[1] = TextDrawCreate(269.600036, 229.226593, " 1");
	TextDrawLetterSize(CEL.MarcarNumero[1], 0.449999, 1.600000);
	TextDrawTextSize(CEL.MarcarNumero[1], 294.399810, 15.226665);
	TextDrawAlignment(CEL.MarcarNumero[1], 1);
	TextDrawColor(CEL.MarcarNumero[1], -1);
	TextDrawUseBox(CEL.MarcarNumero[1], true);
	TextDrawBoxColor(CEL.MarcarNumero[1], -1378294017);
	TextDrawSetShadow(CEL.MarcarNumero[1], 0);
	TextDrawSetOutline(CEL.MarcarNumero[1], 1);
	TextDrawBackgroundColor(CEL.MarcarNumero[1], 51);
	TextDrawFont(CEL.MarcarNumero[1], 2);
	TextDrawSetProportional(CEL.MarcarNumero[1], 1);
	TextDrawSetSelectable(CEL.MarcarNumero[1], true);

	CEL.MarcarNumero[2] = TextDrawCreate(304.360290, 229.165237, " 2");
	TextDrawLetterSize(CEL.MarcarNumero[2], 0.449999, 1.600000);
	TextDrawTextSize(CEL.MarcarNumero[2], 330.399688, 15.399997);
	TextDrawAlignment(CEL.MarcarNumero[2], 1);
	TextDrawColor(CEL.MarcarNumero[2], -1);
	TextDrawUseBox(CEL.MarcarNumero[2], true);
	TextDrawBoxColor(CEL.MarcarNumero[2], -1378294017);
	TextDrawSetShadow(CEL.MarcarNumero[2], 0);
	TextDrawSetOutline(CEL.MarcarNumero[2], 1);
	TextDrawBackgroundColor(CEL.MarcarNumero[2], 51);
	TextDrawFont(CEL.MarcarNumero[2], 2);
	TextDrawSetProportional(CEL.MarcarNumero[2], 1);
	TextDrawSetSelectable(CEL.MarcarNumero[2], true);

	CEL.MarcarNumero[3] = TextDrawCreate(340.219757, 229.059875, " 3");
	TextDrawLetterSize(CEL.MarcarNumero[3], 0.449999, 1.600000);
	TextDrawTextSize(CEL.MarcarNumero[3], 368.799743, 15.653331);
	TextDrawAlignment(CEL.MarcarNumero[3], 1);
	TextDrawColor(CEL.MarcarNumero[3], -1);
	TextDrawUseBox(CEL.MarcarNumero[3], true);
	TextDrawBoxColor(CEL.MarcarNumero[3], -1378294017);
	TextDrawSetShadow(CEL.MarcarNumero[3], 0);
	TextDrawSetOutline(CEL.MarcarNumero[3], 1);
	TextDrawBackgroundColor(CEL.MarcarNumero[3], 51);
	TextDrawFont(CEL.MarcarNumero[3], 2);
	TextDrawSetProportional(CEL.MarcarNumero[3], 1);
	TextDrawSetSelectable(CEL.MarcarNumero[3], true);

	CEL.MarcarNumero[4] = TextDrawCreate(269.000122, 252.626678, " 4");
	TextDrawLetterSize(CEL.MarcarNumero[4], 0.449999, 1.600000);
	TextDrawTextSize(CEL.MarcarNumero[4], 293.599822, 15.226666);
	TextDrawAlignment(CEL.MarcarNumero[4], 1);
	TextDrawColor(CEL.MarcarNumero[4], -1);
	TextDrawUseBox(CEL.MarcarNumero[4], true);
	TextDrawBoxColor(CEL.MarcarNumero[4], -1378294017);
	TextDrawSetShadow(CEL.MarcarNumero[4], 0);
	TextDrawSetOutline(CEL.MarcarNumero[4], 1);
	TextDrawBackgroundColor(CEL.MarcarNumero[4], 51);
	TextDrawFont(CEL.MarcarNumero[4], 2);
	TextDrawSetProportional(CEL.MarcarNumero[4], 1);
	TextDrawSetSelectable(CEL.MarcarNumero[4], true);

	CEL.MarcarNumero[5] = TextDrawCreate(304.159912, 252.639999, " 5");
	TextDrawLetterSize(CEL.MarcarNumero[5], 0.449999, 1.600000);
	TextDrawTextSize(CEL.MarcarNumero[5], 330.399688, 15.399997);
	TextDrawAlignment(CEL.MarcarNumero[5], 1);
	TextDrawColor(CEL.MarcarNumero[5], -1);
	TextDrawUseBox(CEL.MarcarNumero[5], true);
	TextDrawBoxColor(CEL.MarcarNumero[5], -1378294017);
	TextDrawSetShadow(CEL.MarcarNumero[5], 0);
	TextDrawSetOutline(CEL.MarcarNumero[5], 1);
	TextDrawBackgroundColor(CEL.MarcarNumero[5], 51);
	TextDrawFont(CEL.MarcarNumero[5], 2);
	TextDrawSetProportional(CEL.MarcarNumero[5], 1);
	TextDrawSetSelectable(CEL.MarcarNumero[5], true);

	CEL.MarcarNumero[6] = TextDrawCreate(340.499725, 252.385238, " 6");
	TextDrawLetterSize(CEL.MarcarNumero[6], 0.449999, 1.600000);
	TextDrawTextSize(CEL.MarcarNumero[6], 368.799743, 15.653331);
	TextDrawAlignment(CEL.MarcarNumero[6], 1);
	TextDrawColor(CEL.MarcarNumero[6], -1);
	TextDrawUseBox(CEL.MarcarNumero[6], true);
	TextDrawBoxColor(CEL.MarcarNumero[6], -1378294017);
	TextDrawSetShadow(CEL.MarcarNumero[6], 0);
	TextDrawSetOutline(CEL.MarcarNumero[6], 1);
	TextDrawBackgroundColor(CEL.MarcarNumero[6], 51);
	TextDrawFont(CEL.MarcarNumero[6], 2);
	TextDrawSetProportional(CEL.MarcarNumero[6], 1);
	TextDrawSetSelectable(CEL.MarcarNumero[6], true);

	CEL.MarcarNumero[7] = TextDrawCreate(268.880126, 276.026763, " 7");
	TextDrawLetterSize(CEL.MarcarNumero[7], 0.449999, 1.600000);
	TextDrawTextSize(CEL.MarcarNumero[7], 293.599792, 15.719999);
	TextDrawAlignment(CEL.MarcarNumero[7], 1);
	TextDrawColor(CEL.MarcarNumero[7], -1);
	TextDrawUseBox(CEL.MarcarNumero[7], true);
	TextDrawBoxColor(CEL.MarcarNumero[7], -1378294017);
	TextDrawSetShadow(CEL.MarcarNumero[7], 0);
	TextDrawSetOutline(CEL.MarcarNumero[7], 1);
	TextDrawBackgroundColor(CEL.MarcarNumero[7], 51);
	TextDrawFont(CEL.MarcarNumero[7], 2);
	TextDrawSetProportional(CEL.MarcarNumero[7], 1);
	TextDrawSetSelectable(CEL.MarcarNumero[7], true);

	CEL.MarcarNumero[8] = TextDrawCreate(303.599914, 275.818603, " 8");
	TextDrawLetterSize(CEL.MarcarNumero[8], 0.449999, 1.600000);
	TextDrawTextSize(CEL.MarcarNumero[8], 330.319549, 15.474664);
	TextDrawAlignment(CEL.MarcarNumero[8], 1);
	TextDrawColor(CEL.MarcarNumero[8], -1);
	TextDrawUseBox(CEL.MarcarNumero[8], true);
	TextDrawBoxColor(CEL.MarcarNumero[8], -1378294017);
	TextDrawSetShadow(CEL.MarcarNumero[8], 0);
	TextDrawSetOutline(CEL.MarcarNumero[8], 1);
	TextDrawBackgroundColor(CEL.MarcarNumero[8], 51);
	TextDrawFont(CEL.MarcarNumero[8], 2);
	TextDrawSetProportional(CEL.MarcarNumero[8], 1);
	TextDrawSetSelectable(CEL.MarcarNumero[8], true);

	CEL.MarcarNumero[9] = TextDrawCreate(340.379821, 275.859954, " 9");
	TextDrawLetterSize(CEL.MarcarNumero[9], 0.449999, 1.600000);
	TextDrawTextSize(CEL.MarcarNumero[9], 368.799743, 15.653331);
	TextDrawAlignment(CEL.MarcarNumero[9], 1);
	TextDrawColor(CEL.MarcarNumero[9], -1);
	TextDrawUseBox(CEL.MarcarNumero[9], true);
	TextDrawBoxColor(CEL.MarcarNumero[9], -1378294017);
	TextDrawSetShadow(CEL.MarcarNumero[9], 0);
	TextDrawSetOutline(CEL.MarcarNumero[9], 1);
	TextDrawBackgroundColor(CEL.MarcarNumero[9], 51);
	TextDrawFont(CEL.MarcarNumero[9], 2);
	TextDrawSetProportional(CEL.MarcarNumero[9], 1);
	TextDrawSetSelectable(CEL.MarcarNumero[9], true);

	CEL.MarcarM = TextDrawCreate(269.599853, 298.949523, " +");
	TextDrawLetterSize(CEL.MarcarM, 0.449999, 1.600000);
	TextDrawTextSize(CEL.MarcarM, 293.519531, 15.474664);
	TextDrawAlignment(CEL.MarcarM, 1);
	TextDrawColor(CEL.MarcarM, -1);
	TextDrawUseBox(CEL.MarcarM, true);
	TextDrawBoxColor(CEL.MarcarM, -1378294017);
	TextDrawSetShadow(CEL.MarcarM, 0);
	TextDrawSetOutline(CEL.MarcarM, 1);
	TextDrawBackgroundColor(CEL.MarcarM, 51);
	TextDrawFont(CEL.MarcarM, 2);
	TextDrawSetProportional(CEL.MarcarM, 1);
	TextDrawSetSelectable(CEL.MarcarM, true);

	CEL.MarcarX = TextDrawCreate(339.479797, 299.053497, " X");
	TextDrawLetterSize(CEL.MarcarX, 0.449999, 1.600000);
	TextDrawTextSize(CEL.MarcarX, 368.719573, 15.727998);
	TextDrawAlignment(CEL.MarcarX, 1);
	TextDrawColor(CEL.MarcarX, -1);
	TextDrawUseBox(CEL.MarcarX, true);
	TextDrawBoxColor(CEL.MarcarX, -1378294017);
	TextDrawSetShadow(CEL.MarcarX, 0);
	TextDrawSetOutline(CEL.MarcarX, 1);
	TextDrawBackgroundColor(CEL.MarcarX, 51);
	TextDrawFont(CEL.MarcarX, 2);
	TextDrawSetProportional(CEL.MarcarX, 1);
	TextDrawSetSelectable(CEL.MarcarX, true);

	CEL.SMSBox = TextDrawCreate(380.239959, 185.926605, "usebox");
	TextDrawLetterSize(CEL.SMSBox, 0.000000, 15.604229);
	TextDrawTextSize(CEL.SMSBox, 253.520034, 0.000000);
	TextDrawAlignment(CEL.SMSBox, 1);
	TextDrawColor(CEL.SMSBox, 0);
	TextDrawUseBox(CEL.SMSBox, true);
	TextDrawBoxColor(CEL.SMSBox, 336860415);
	TextDrawSetShadow(CEL.SMSBox, 0);
	TextDrawSetOutline(CEL.SMSBox, 0);
	TextDrawFont(CEL.SMSBox, 0);

	CEL.ServiciosLlamarA = TextDrawCreate(260.160125, 189.503906, "Llamar a...");
	TextDrawLetterSize(CEL.ServiciosLlamarA, 0.449999, 1.600000);
	TextDrawTextSize(CEL.ServiciosLlamarA, 374.399963, 20.186667);
	TextDrawAlignment(CEL.ServiciosLlamarA, 1);
	TextDrawColor(CEL.ServiciosLlamarA, -1);
	TextDrawUseBox(CEL.ServiciosLlamarA, true);
	TextDrawBoxColor(CEL.ServiciosLlamarA, 255);
	TextDrawSetShadow(CEL.ServiciosLlamarA, 0);
	TextDrawSetOutline(CEL.ServiciosLlamarA, 1);
	TextDrawBackgroundColor(CEL.ServiciosLlamarA, 51);
	TextDrawFont(CEL.ServiciosLlamarA, 3);
	TextDrawSetProportional(CEL.ServiciosLlamarA, 1);

	CEL.ServiciosPolicia = TextDrawCreate(261.565002, 213.290664, "~b~~h~Policia");
	TextDrawLetterSize(CEL.ServiciosPolicia, 0.415148, 1.192827);
	TextDrawTextSize(CEL.ServiciosPolicia, 373.519836, 20.116508);
	TextDrawAlignment(CEL.ServiciosPolicia, 1);
	TextDrawColor(CEL.ServiciosPolicia, -1);
	TextDrawUseBox(CEL.ServiciosPolicia, true);
	TextDrawBoxColor(CEL.ServiciosPolicia, -1378294017);
	TextDrawSetShadow(CEL.ServiciosPolicia, 0);
	TextDrawSetOutline(CEL.ServiciosPolicia, 1);
	TextDrawBackgroundColor(CEL.ServiciosPolicia, 255);
	TextDrawFont(CEL.ServiciosPolicia, 2);
	TextDrawSetProportional(CEL.ServiciosPolicia, 1);
	TextDrawSetSelectable(CEL.ServiciosPolicia, true);

	CEL.ServiciosHospital = TextDrawCreate(260.965026, 232.210708, "~r~~h~Hospital");
	TextDrawLetterSize(CEL.ServiciosHospital, 0.415148, 1.192827);
	TextDrawTextSize(CEL.ServiciosHospital, 373.519836, 20.116508);
	TextDrawAlignment(CEL.ServiciosHospital, 1);
	TextDrawColor(CEL.ServiciosHospital, -1);
	TextDrawUseBox(CEL.ServiciosHospital, true);
	TextDrawBoxColor(CEL.ServiciosHospital, -1378294017);
	TextDrawSetShadow(CEL.ServiciosHospital, 0);
	TextDrawSetOutline(CEL.ServiciosHospital, 1);
	TextDrawBackgroundColor(CEL.ServiciosHospital, 255);
	TextDrawFont(CEL.ServiciosHospital, 2);
	TextDrawSetProportional(CEL.ServiciosHospital, 1);
	TextDrawSetSelectable(CEL.ServiciosHospital, true);

	CEL.ServiciosTaxis = TextDrawCreate(260.845153, 250.682754, "~y~Taxis");
	TextDrawLetterSize(CEL.ServiciosTaxis, 0.415148, 1.192827);
	TextDrawTextSize(CEL.ServiciosTaxis, 373.519836, 20.116508);
	TextDrawAlignment(CEL.ServiciosTaxis, 1);
	TextDrawColor(CEL.ServiciosTaxis, -1);
	TextDrawUseBox(CEL.ServiciosTaxis, true);
	TextDrawBoxColor(CEL.ServiciosTaxis, -1378294017);
	TextDrawSetShadow(CEL.ServiciosTaxis, 0);
	TextDrawSetOutline(CEL.ServiciosTaxis, 1);
	TextDrawBackgroundColor(CEL.ServiciosTaxis, 255);
	TextDrawFont(CEL.ServiciosTaxis, 2);
	TextDrawSetProportional(CEL.ServiciosTaxis, 1);
	TextDrawSetSelectable(CEL.ServiciosTaxis, true);

	CEL.ServiciosTaller = TextDrawCreate(261.045166, 268.856140, "~b~Taller");
	TextDrawLetterSize(CEL.ServiciosTaller, 0.415148, 1.192827);
	TextDrawTextSize(CEL.ServiciosTaller, 373.519836, 20.116508);
	TextDrawAlignment(CEL.ServiciosTaller, 1);
	TextDrawColor(CEL.ServiciosTaller, -1);
	TextDrawUseBox(CEL.ServiciosTaller, true);
	TextDrawBoxColor(CEL.ServiciosTaller, -1378294017);
	TextDrawSetShadow(CEL.ServiciosTaller, 0);
	TextDrawSetOutline(CEL.ServiciosTaller, 1);
	TextDrawBackgroundColor(CEL.ServiciosTaller, 255);
	TextDrawFont(CEL.ServiciosTaller, 2);
	TextDrawSetProportional(CEL.ServiciosTaller, 1);
	TextDrawSetSelectable(CEL.ServiciosTaller, true);
	return 1;
}

CALLBACK: Update_Streamer_(playerid)
{
	return Streamer_Update(playerid);
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
		for(new i; i < sizeof(PinchaRuedas); i++)
		{
			if(PICK_PinchaRuedas[i][0] == pickupid || PICK_PinchaRuedas[i][1] == pickupid)
			{
				new
					Damage[4],
					vehID = GetPlayerVehicleID(playerid);

				GetVehicleDamageStatus(vehID, Damage[0], Damage[1], Damage[2], Damage[3]);
				Damage[3] = 0b1111;
				UpdateVehicleDamageStatus(vehID, Damage[0], Damage[1], Damage[2], Damage[3]);
				SetTimerEx("Update_Streamer_", 1000, false, "i", playerid);
				return 1;
			}
		}
	}
	static
	    UltimoPickup[MAX_PLAYERS];

	if(GetTickCount() - UltimoPickup[playerid] < 3000) return 0;
	UltimoPickup[playerid] = GetTickCount();

	if(pickupid == PElevadorLSPD)
	{
		PlayerPlaySound(playerid, 1138,0,0,0);
		AutoRol (playerid, "observa los botones del ascensor.");
		ShowPlayerDialog(playerid,dAscensorLSPD,DIALOG_STYLE_LIST,""#CBLANCO"Ascensor",""#CAZULCLARO"SubSuelo "#CBLANCO"- "#CPOSITIVO"Estacionamiento\n"#CAZULCLARO"Segunda planta "#CBLANCO"- "#CPOSITIVO"Terraza","Ir","Cancelar");
	}
	else if(pickupid == PEstadio)
	{
	    Dialog(playerid, dEstadio, DIALOG_STYLE_LIST, "Estadio de Los Santos" ,""#CAZUL2"> "#CBLANCO"Estadio: "#CVERDE"MotoCross\n"#CAZUL2"> "#CBLANCO"Estadio: "#CVERDE"Rally\n"#CAZUL2"> "#CBLANCO"Estadio: "#CVERDE"CrashArena (CHOQUES)\n"#CAZUL2"> "#CBLANCO"Estadio: "#CVERDE"TC-2000","Aceptar","Cancelar");
	}
	return 1;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		foreach(Camaras, i)
		{
		    if(areaid == CamaraVelocidad[i][camZoneID])
		    {
		        new
		            speed = GetVehicleSpeed(GetPlayerVehicleID(playerid));

				if(speed > CamaraVelocidad[i][camSpeed])
				{
				    TextDrawShowForPlayer(playerid, flash);
				    SetTimerEx("HideFlash", 1400, false, "i", playerid);
					PlayerPlaySound(playerid, 1132, 0.0, 0.0, 0.0);
		        	return OnCameraDetectPlayer(playerid, i, GetPlayerVehicleID(playerid), speed, CamaraVelocidad[i][camSpeed]);
				}
			}
		}
	}
	return 1;
}

CALLBACK: HideFlash(playerid)
{
	return TextDrawHideForPlayer(playerid, flash);
}

stock OnCameraDetectPlayer(playerid, cameraid, vehicleid, speedplayer, speedlimit)
{
	if(veh_getJob(vehicleid)) //Multa automática
	{
	    Mensaje (playerid, -1, "--------------------------------------------------");
		MensajeF(playerid, -1, "¡Límite de velocidad excedido! Fuiste detectado por un Radar de Velocidad.", speedplayer, speedlimit);
		MensajeF(playerid, -1, "Su velocidad es "#CROJO"%d KM/H, "#CBLANCO"cuando el máximo aquí es "#CVERDE"%d KM/H", speedplayer, speedlimit);
		MensajeF(playerid, -1, "El precio de la multa, es "#CVERDE"$%d.", CamaraVelocidad[cameraid][camMulta]);
	    Mensaje (playerid, -1, "--------------------------------------------------");
		QuitarDinero(playerid, CamaraVelocidad[cameraid][camMulta]);
		return 1;
	}
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
    if(!success) {
        BlockIpAddress(ip, 60 * 1000 * 2); // block the connections from this ip for one minute
    }
	else {
	
		new PJ_IP[25];
		foreach(Player,i) {
		
		    GetPlayerIp(i, PJ_IP, sizeof(PJ_IP));
			if(strlen(PJ_IP) && !strcmp(ip,PJ_IP) && !EsDueno(i)) {
			
			    Error(i,"¡Lo sentimos, no puedes loguearte! ~r~~n~Expulsado");
				return Kick(i);
			}
		}
	}
	return 1;
}

stock AttachObject(playerid,index,modelid,bone,Float:x,Float:y,Float:z,Float:x2,Float:y2,Float:z2,Float:x3=1.0,Float:y3=1.0,Float:z3=1.0)
{
    SetPlayerAttachedObject(playerid,index,modelid,bone,x,y,z,x2,y2,z2,x3,y3,z3);
	InfoJugador[playerid][jAttachModel][index] = modelid;
	InfoJugador[playerid][jAttachBone][index] = bone;
	InfoJugador[playerid][jAttachPosx][index] = x;
	InfoJugador[playerid][jAttachPosy][index] = y;
	InfoJugador[playerid][jAttachPosz][index] = z;
	InfoJugador[playerid][jAttachAngx][index] = x2;
	InfoJugador[playerid][jAttachAngy][index] = y2;
	InfoJugador[playerid][jAttachAngz][index] = z2;
	InfoJugador[playerid][jAttachEscx][index] = x3;
	InfoJugador[playerid][jAttachEscy][index] = y3;
	InfoJugador[playerid][jAttachEscz][index] = z3;
	ActualizarAccesorios(playerid,index);
	return 1;
}

stock AnuncioGobernamental(Anuncio[])
{
	MensajeTodos(C_NEGRO,"___________________________ "#CBLANCO"Atención - Anuncio del gobierno "#CNEGRO"___________________________");
	MensajeTodos(C_GOBIERNO,Anuncio);
}

stock QuitarDinero(playerid,ddinero)
{
	if(ddinero < 0)
	{
		ddinero = -ddinero;
	}
	if((GetPlayerMoney(playerid) - ddinero) < 0)
	{
	    new str[140];

	    A_Format(str, "[BUG] El jugador %s(%d) pretende tener dinero negativo (Tenia %d | Se quitaron: %d | ahora le quedan $%d",
	    pName(playerid), playerid,
	    GetPlayerMoney(playerid),
	    ddinero,
	    GetPlayerMoney(playerid) - ddinero);
	    print(str);
	    MensajeAdmin(C_ROJO, str, Destacado);
	}

	new a[16];
	format(a,sizeof(a),"~r~ -%d$",ddinero);
	GameTextForPlayer(playerid, a, 5000, 1);
	GivePlayerMoney(playerid, -ddinero);
	PlayerPlaySound(playerid, 1084, 0.0, 0.0, 0.0);
	return 1;
}

stock Log (const type[], const data[])
{
	static
	    string [300];
	    
	opmysql_format(string, sizeof (string), "INSERT INTO log_%s (log) VALUES ('%e')", type, data);
	opmysql_pquery( string, query_none);
}

CALLBACK: RotarObjeto(playerid)
{
	new Float:p2[3];
	GetPlayerObjectRot(playerid,Accesorio_Obj[playerid],p2[0],p2[1],p2[2]);
	SetPlayerObjectRot(playerid,Accesorio_Obj[playerid],p2[0],p2[1],p2[2]+1);
	return 1;
}

stock CrearArbolito(Float:x, Float:y, Float:z)
{
	CreateDynamicObject(19076, x, y, z-1.0,0,0,300);//xmas tree
	CreateDynamicObject(19054, x, y+1.0, z-0.4,0,0,300);//XmasBox1
    CreateDynamicObject(19058, x+1.0, y, z-0.4,0,0,300);//XmasBox5
    CreateDynamicObject(19056, x, y-1.0, z-0.4,0,0,300);//XmasBox3
	CreateDynamicObject(19057, x-1.0, y, z-0.4,0,0,300);//XmasBox4
    CreateDynamicObject(19058, x-1.5, y+1.5, z-1.0,0,0,300);//XmasBox5
    CreateDynamicObject(19055, x+1.5, y-1.5, z-1.0,0,0,300);//XmasBox2
    CreateDynamicObject(19057, x+1.5, y+1.5, z-1.0,0,0,300);//XmasBox4
    CreateDynamicObject(19054, x-1.5, y-1.5, z-1.0,0,0,300);//XmasBox1
    CreateDynamicObject(3526, x, y, z-1.0,0,0,300);//Airportlight - for flashing affect
}

stock _CrearArbolito(Float:X, Float:Y, Float:Z)
{
   CreateDynamicObject(3472,X+0.28564453,Y+0.23718262,Z+27.00000000,0.00000000,0.00000000,230.48021);
   CreateDynamicObject(664,X+0.20312500,Y+0.01171875,Z+-3.00000000,0.00000000,0.00000000,0.00000000);
   CreateDynamicObject(3472,X+0.45312500,Y+0.51562500,Z+4.00000000,0.00000000,0.00000000,69.7851562);
   CreateDynamicObject(3472,X+0.65136719,Y+1.84570312,Z+17.00000000,0.00000000,0.00000000,41.863403);
   CreateDynamicObject(7666,X+0.34130859,Y+0.16845703,Z+45.00000000,0.00000000,0.00000000,298.12524);
   CreateDynamicObject(7666,X+0.34082031,Y+0.16796875,Z+45.00000000,0.00000000,0.00000000,27.850342);
   CreateDynamicObject(3472,X+0.45312500,Y+0.51562500,Z+12.00000000,0.00000000,0.00000000,350.02441);
   CreateDynamicObject(3472,X+0.45312500,Y+0.51562500,Z+7.00000000,0.00000000,0.00000000,30.0805664);
   CreateDynamicObject(3472,X+0.45312500,Y+0.51562500,Z+22.00000000,0.00000000,0.00000000,230.47119);
   CreateDynamicObject(1262,X+0.15039062,Y+0.57128906,Z+29.45285416,0.00000000,0.00000000,162.90527);
}

stock EditarAccesorio(playerid,id_accesorio)
{
	new Str[140];
	A_Format(Str,"Editar personalizadamente\nElejir parte "#CINFO"(%s)\nAjustar posición\nOcultar/Mostrar\nEliminar accesorio",AttachmentBones[InfoJugador[playerid][jAttachBone][id_accesorio]-1]);
	Dialog(playerid,dEAccesorios_1,DIALOG_STYLE_LIST,""#CAZUL2"Editar accesorio",Str,"Aceptar","Cancelar");
	return 1;
}

stock IsPlayerInArea (playerid, Float: min_x, Float: min_y, Float: max_x, Float: max_y)
{
    new
		Float: x,
		Float: y,
		Float: z,
		
		Float: minx = (min_x < max_x) ? min_x : max_x,
		Float: maxx = (max_x > min_x) ? max_x : min_x,

		Float: miny = (min_y < max_y) ? min_y : max_y,
		Float: maxy = (max_y > min_y) ? max_y : min_y;

    GetPlayerPos(playerid, x, y, z);
    return ((minx <= x <= maxx) && (miny <= y <= maxy));
}

stock GetPlayerGangZone(playerid)
{
	Loop(i, MAX_GZS, 0)
	{
	    if(IsValidGangZone(i))
		{
		    if(IsPlayerInArea(
				playerid,
				InfoGZ[i][gzMin][0],
				InfoGZ[i][gzMin][1],
				InfoGZ[i][gzMax][0],
				InfoGZ[i][gzMax][1]))
			{
				return i;
			}
		}
	}
	return (-1);
}

stock ProxDetectorS(Float:radi, playerid, targetid)
{
    if(IsPlayerConnected(playerid) && IsPlayerConnected(targetid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		GetPlayerPos(targetid, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		tempposz = (oldposz -posz);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
			return 1;
		}
	}
	return 0;
}

stock CrecerPlantas()
{
	new
	    time_unix = gettime();

	Loop(i, MAX_PLANTAS, 0)
	{
	    if(InfoPlanta[i][plantaX] == 0.0)
			continue;

		if(InfoPlanta[i][plantaTipo] == PLANTA_MARIHUANA)
		{
			if(InfoPlanta[i][plantaRegada] > time_unix) //Permanece el efecto de riego
			{
			    CrecerPlanta(i);
			}
		}
		else if(InfoPlanta[i][plantaTipo] == PLANTA_COCA)
		{
			CrecerPlanta(i);
		}
	}
	return 1;
}


// ============================== Por Hora ================================== //
CALLBACK: OnHourPassed()
{
	//- Plantas de marihuana
	CrecerPlantas();
}

// ============================== Por Minuto ================================ //
timer SubeExperiencia[60000]()
{
	new
		TicksC = GetTickCount(),
		curr_time = gettime(),
		CuentJugadores;

	new
	    bool:shownec;

	static
	    aa;

	aa++;
	if(aa >= 15)
	{
	    aa = 0;
	    shownec = true;
	}

	ActualizarGraffitis();
	ActualizarHora();

	//Por hora
	static
		Min_state;

	Min_state++;
	if(Min_state > 59)
	{
		OnHourPassed();
		Min_state = 0;
	}


	//Borrar objetos tirados viejos.
	Loop(i, MAX_OBJETOS_T, 0)
	{
	    if(ObjetoTirado[i][obj_t_Type])
	    {
	        new
	            obj_id = ObjetoTirado[i][obj_t_Type];

	        // Cajas permanecen (Excepto cuando tienen 0 unidades)
	        if (ObjectData[obj_id][invSize] >= MAX_SIZE_TO_CARRY)
	        {
	            if(ObjetoTirado[i][obj_t_Data] <= 0)
	            {
			        if((curr_time - ObjetoTirado[i][obj_t_time]) > (60 * MINS_BORRAR_OBJ_GRANDE))
			        {
			            BorrarObjetoTirado(i);
					}
				}
				continue;
			}

			// Other Items
	        switch (ObjectData[obj_id][invType])
	        {
	            case INV_ARMA, INV_CHALECOPOLICIA, INV_CHALECO:
	            {
			        if((curr_time - ObjetoTirado[i][obj_t_time]) > (60 * MINS_BORRAR_ARMA_TIRADA))
			        {
			            BorrarObjetoTirado(i);
					}
				}
				default:
				{
			        if(curr_time - ObjetoTirado[i][obj_t_time] > (60 * MINS_BORRAR_OTRO))
			        {
		            	BorrarObjetoTirado(i);
					}
				}
			}
		}
	}

	foreach(Player,i)
	{
	    if(LoginTime[i] && InfoJugador[i][jRegistrado])
	    {
			if (PasoTruth [i] == 3)
			{
			    if (!IsPlayerInRangeOfPoint (i, 300.0, -1109.1027,-1638.6119,76.3672) && GetPlayerVehicleID (i) == Truth_VehID)
			    {
			        veh_respawn (Truth_VehID);
			        Error (i, "~r~Fallaste la misión de Truth por salir de la granja con su cosechadora");
			        Truth_ClientID = INVALID_PLAYER_ID;
			        PasoTruth [i] = 0;
				}
			}
	        if(IsPlayerPaused(i)) continue;
	        CuentJugadores++;
	        if(!DobleExp)
	        {
				InfoJugador[i][jExperiencia] += 1.0;
			}
			else
			{
				InfoJugador[i][jExperiencia] += 2.0;
			}
			InfoJugador[i][jMinutos] ++;

			//Necesidades (v3)
			if (!GetPVarInt (i, "ADMIN_ONDUTY") && InfoJugador[i][jEncarcelado] != 2)
			{
				ActualizarNecesidades(i);
			}
			if(InfoJugador[i][jNecesidades] == 0) // Necesidades permanente
			{
			    MostrarNecesidades(i, -1);
			}
			else if(InfoJugador[i][jNecesidades] == 1) // Cada 15 min
			{
			    if (shownec)
			    {
					PlayerPlaySound(i, 1083, 0.0, 0.0, 0.0);
					MostrarNecesidades(i, 6);
				}
			}

			if(InfoJugador[i][jMinutos] >= 60)
			{
				InfoJugador[i][jMinutos] = 0;
				InfoJugador[i][jHoras] ++;
			}
			if(InfoJugador[i][jExperiencia] >= ((InfoJugador[i][jNivel]+1)*3)*60)
			{
				SetPlayerScore(i,GetPlayerScore(i)+1);
				InfoJugador[i][jNivel] ++;
				if(InfoJugador[i][jNivel] == 2)
				{
				    InfoJugador[i][jBlockDudas] = true;
				    Mensaje(i, -1, "El canal de dudas fue desactivado automáticamente. Puedes usar /canal ayuda nuevamente si necesitas ayuda.");
				}
				new D_String[450];
				format(D_String,sizeof(D_String),"\t"#CAMARILLO"* "#CBLANCO"Felicitaciones, ¡jugaste "#CROJO"%d "#CBLANCO"horas y subiste de nivel!\n\t"#CAMARILLO"* "#CBLANCO"Obtienes beneficios que los deverás averiguar por vos mismo\n\t"#CAMARILLO"* "#CBLANCO"Tu nivel anterior es "#CROJO"%d"#CBLANCO", y tu nuevo nivel es "#CROJO"%d.\n\n\t"#CBLANCO"- Ahora, para alcanzar el nivel %d deverás jugar %d horas "#CROJO"(%d minutos)",
				((((InfoJugador[i][jNivel])*3)*60)/60),//
				(InfoJugador[i][jNivel]-1),//
				(InfoJugador[i][jNivel]),//
				(InfoJugador[i][jNivel]+1),//
				(((InfoJugador[i][jNivel]+1)*3)),
				(((InfoJugador[i][jNivel]+1)*3)*60));
				Dialog(i,dError,DIALOG_STYLE_MSGBOX,""#CPOSITIVO"INFORMACIÓN SOBRE SU NIVEL",D_String,"Cerrar","");
				InfoJugador[i][jExperiencia] = 0;
				printf("- %s subió de nivel [ NIVEL: %d ]" , NombreJugador_(i), InfoJugador[i][jNivel] );
				switch(InfoJugador[i][jNivel])
				{
				    case 4, 7, 10, 13:
				    {
				        Mensaje(i, -1, "¡Felicidades, se desbloqueó un "#CVERDE"nuevo "#CBLANCO"lugar en tu inventario!");
					}
				}
			}
	        ActualizarCuenta(i);
		}
	}
	if(CuentJugadores)
	{
		printf("- Cuentas actualizadas: [%d CUENTAS | TIEMPO: %d MS | %d JUGADORES]",CuentJugadores,GetTickCount() - TicksC,Iter_Count(Player));
	}
	#if defined FILE_DEBUG_MODE
	new
	    result = GetTickCount() - TicksC;

	time_elapsed_minute = result;
	#endif

	return 1;
}

stock ActualizarNecesidades(playerid)
{
	new
	    Float: Hambre = InfoJugador[playerid][jHambre],
		Float: Estado = InfoJugador[playerid][jCansancio],
		Float: Orina = InfoJugador[playerid][jOrina];

	if(Hambre < 10.0)
	{
		new
		    Float: hp;

		GetPlayerHealth(playerid, hp);
		if(hp > 5.0)
		{
		    hp -= 5.0;
			SetPlayerHealth(playerid, hp);
		}
		Mensaje(playerid, -1, "Comienzas a perder estado y energía por el hambre, Debes comer algo.");
		PlayerPlaySound(playerid, 19602, 0.0, 0.0, 0.0);
		Estado -= 0.2;
	}

	Hambre -= 0.3;

	if(Hambre < 0.0)
	    Hambre = 0.0;

	Estado -= 0.16;

	if(Estado < 6.0)
	{
		ToggleSueno(playerid, true);
	}
	else
	{
		ToggleSueno(playerid, false);
	}

	if(Estado < 0.0)
	    Estado = 0.0;

	Orina += 0.40;

	if(Orina > 92.0)
	{
	    ToggleOrina(playerid, true);
	}
	else
	{
	    ToggleOrina(playerid, false);
	}

	if(Orina > 100.0)
	    Orina = 100.0;

	InfoJugador[playerid][jHambre] = Hambre;
	InfoJugador[playerid][jCansancio] = Estado;
	InfoJugador[playerid][jOrina] = Orina;
	return 1;
}

stock ToggleOrina(playerid, bool: toggle)
{
	if (toggle)
	{
		if(TDOrina[playerid] == PlayerText:INVALID_TEXT_DRAW)
		{
			TDOrina[playerid] = CreatePlayerTextDraw(playerid, -80.399902, 1.500000, "usebox");
			PlayerTextDrawLetterSize(playerid, TDOrina[playerid], 0.000000, 84.498229);
			PlayerTextDrawTextSize(playerid, TDOrina[playerid], 637.199951, 0.000000);
			PlayerTextDrawAlignment(playerid, TDOrina[playerid], 1);
			PlayerTextDrawColor(playerid, TDOrina[playerid], 0);
			PlayerTextDrawUseBox(playerid, TDOrina[playerid], true);
			PlayerTextDrawBoxColor(playerid, TDOrina[playerid], -65506);
			PlayerTextDrawSetShadow(playerid, TDOrina[playerid], 0);
			PlayerTextDrawSetOutline(playerid, TDOrina[playerid], 0);
			PlayerTextDrawFont(playerid, TDOrina[playerid], 0);
			PlayerTextDrawShow(playerid, TDOrina[playerid]);
			GameTextForPlayer(playerid, _TD("~y~tienes ganas de orinar~n~~n~~w~busca un baño, y usa ~b~/orinar"), 10000, 3);
		}
	}
	else
	{
		if(TDOrina[playerid] != PlayerText:INVALID_TEXT_DRAW)
		{
	        PlayerTextDrawDestroy(playerid, TDOrina[playerid]);
            TDOrina[playerid] = PlayerText:INVALID_TEXT_DRAW;
		}
	}
	return 1;
}

stock ToggleSueno(playerid, bool: toggle)
{
	if (toggle)
	{
		if(TDSueno[playerid] == PlayerText:INVALID_TEXT_DRAW)
		{
			TDSueno[playerid] = CreatePlayerTextDraw(playerid, -80.399902, 1.500000, "usebox");
			PlayerTextDrawLetterSize(playerid, TDSueno[playerid], 0.000000, 84.498229);
			PlayerTextDrawTextSize(playerid, TDSueno[playerid], 637.199951, 0.000000);
			PlayerTextDrawAlignment(playerid, TDSueno[playerid], 1);
			PlayerTextDrawColor(playerid, TDSueno[playerid], 0);
			PlayerTextDrawUseBox(playerid, TDSueno[playerid], true);
			PlayerTextDrawBoxColor(playerid, TDSueno[playerid], 100);
			PlayerTextDrawSetShadow(playerid, TDSueno[playerid], 0);
			PlayerTextDrawSetOutline(playerid, TDSueno[playerid], 0);
			PlayerTextDrawFont(playerid, TDSueno[playerid], 0);
			PlayerTextDrawShow(playerid, TDSueno[playerid]);
			GameTextForPlayer(playerid, "~r~cansado~n~~n~~w~Necesitas descansar para reponer tu estado", 6000, 3);
		}
	}
	else
	{
		if(TDSueno[playerid] != PlayerText:INVALID_TEXT_DRAW)
		{
	        PlayerTextDrawDestroy(playerid, TDSueno[playerid]);
            TDSueno[playerid] = PlayerText:INVALID_TEXT_DRAW;
		}
	}
	return 1;
}

stock ToggleSkillLevel(i)
{
	SetPlayerSkillLevel(i, WEAPONSKILL_MICRO_UZI, 800);
	SetPlayerSkillLevel(i, WEAPONSKILL_PISTOL, 800);
	return 1;
}

stock EsRopaMujer(id)
{
	switch(id)
	{
	    case 9,10..13,31,38,39,40,41,53..56,65,69,76,77,85,88,89,91,93,129..131,138,139,140,141:
	    {
	        return 1;
		}
		case 148,150,151,152,157,169,172,190..199,201,214..216,219,224,225,226,232,233,251,298:
		{
		    return 1;
		}
	}
	return 0;
}

stock EsRopaProhibida(id)
{
	switch(id)
	{
	    case 63,64,71,75,87,90,92,138,145,162..166,178,207,205,237,238,243,244,245,246,256,257,263,265..267,274..288:
		{
		    return 1;
		}
	}
	return 0;
}

stock RopaPandilla(pandilla, skin)
{
	switch(skin)
	{
	    case 102..104://Ballas
		{
			if(pandilla == 2) return true;
		}
		case 105..107://Groove
		{
			if(pandilla == 1) return true;
		}
		case 114..116://Sureños
		{
			if(pandilla == 3) return true;
		}
		default: return true;
	}
	return false;
}

CALLBACK: ActualizarFacciones()
{
	new
		i,
		ArchU[20*MAX_FACCIONES];

	while(i++ != MAX_FACCIONES-1)
	{
	    format(ArchU,sizeof(ArchU),"Facciones/%i.ini",i);
	    new INI:Arch = INI_Open(ArchU);
		if(!fexist(ArchU))
		{
		    INI_Create(ArchU);
		}
		INI_SetTag(Arch,"data");
	   	INI_WriteInt(Arch,"Dinero",InfoFaccion[i][fDinero]);

	    INI_WriteString(Arch,"Contraseña",InfoFaccion[i][fContra]);
	    INI_WriteInt(Arch,"Miembros",InfoFaccion[i][fMiembros]);
	    INI_WriteString(Arch,"Lider",InfoFaccion[i][fLider]);
		INI_Close(Arch);
	}
	return 1;
}

CALLBACK: CargarFacciones()
{
	new
		i,
		ArchU[16*MAX_FACCIONES];

	while(i++ < MAX_FACCIONES+1)
	{
	    format(ArchU,sizeof(ArchU),"Facciones/%i.ini",i);
		INI_ParseFile(ArchU, "CargarFaccion_data", .bExtra = true, .extra = i);
	}
	return 1;
}

CALLBACK: CargarFaccion_data(fid,name[],value[])
{
	INI_Int("Dinero",InfoFaccion[fid][fDinero]);
	INI_String("Contraseña",InfoFaccion[fid][fContra],32);
	INI_String("Lider",InfoFaccion[fid][fLider],MAX_PLAYER_NAME);
	INI_Int("Miembros",InfoFaccion[fid][fMiembros]);
	INI_Int("Rangos",InfoFaccion[fid][fRangos]);
	INI_String("RangoL",InfoFaccion[fid][fRLider], MAX_RANGO_LEN);

	new
		str[9];

	Loop(i, MAX_RANGOS_FAC, 0)
	{
		A_Format(str, "Rango%d", i);
	    INI_String(str, InfoRango[fid][i], MAX_RANGO_LEN);
	}
	return 1;
}

// INI and file reading/writing custom functions
//                              - Spell.

stock INI_Create(filename[])
{
	if (fexist(filename)) return 0;

	new
		File:hndle = fopen(filename,io_write);

	fclose(hndle);
	return 1;
}

CALLBACK: Float: INI_GetLineFloat (filename[], line[])
{
	new
	    Float: result;

	if (fexist (filename))
	{
	    new
			File: hndle = fopen (filename, io_read),
			str_r[255],
			name[20],
			Float: value,
			line_len = strlen (line);

		while (fread (hndle, str_r))
		{
		    if (!sscanf (str_r, "p<=>s[20]f", name, value))
		    {
		    	if (!strcmp (line, name, false, line_len))
		    	{
		        	result = value;
				}
			}
		}
		fclose (hndle);
	}
	return result;
}

CALLBACK: INI_GetLineInt (filename[], line[])
{
	new
	    result;

	if (fexist (filename))
	{
	    new
			File: hndle = fopen (filename, io_read),
			str_r[255],
			name[20],
			value,
			line_len = strlen (line);

		while (fread (hndle, str_r))
		{
		    if (!sscanf (str_r, "p<=>s[20]i", name, value))
		    {
		    	if (!strcmp (line, name, false, line_len))
		    	{
		        	result = value;
				}
			}
		}
		fclose (hndle);
	}
	return result;
}

CALLBACK: INI_GetLineString (filename[], line[], result[])
{
	if (fexist (filename))
	{
	    new
			File: hndle = fopen (filename, io_read),
			str_r[255],
			name[20],
			value[128],
			line_len = strlen (line);

		while (fread (hndle, str_r))
		{
		    if (!sscanf (str_r, "p<=>s[20]s[128]", name, value))
		    {
		    	if (!strcmp (line, name, false, line_len))
		    	{
		        	alm (result, value);
				}
			}
		}
		fclose (hndle);
	}
}

stock MostrarGPS(playerid)
{
	if(!InfoJugador [playerid][jBuscadorVeh])
		Dialog(playerid,dGPS_0,DIALOG_STYLE_LIST,""#CAZUL2"GPS - menú principal","> Negocios\n> Trabajos\n> Lugares públicos\n> Concesionarios","Aceptar","Cancelar");
	else
		Dialog(playerid,dGPS_0,DIALOG_STYLE_LIST,""#CAZUL2"GPS - menú principal","> Negocios\n> Trabajos\n> Lugares públicos\n> Concesionarios\n> Buscar un vehículo","Aceptar","Cancelar");

	return 1;
}

CALLBACK: ActualizarTiempoCarcel(playerid)
{
	if(IsPlayerPaused(playerid)) return 1;
	if(InfoJugador[playerid][jEncarcelado] == 0)
	{
	    KillTimer2(playerid,TIMER_CARCEL);
		return 1;
	}
	InfoJugador[playerid][jTiempoCarcel] --;
	if(InfoJugador[playerid][jEncarcelado] == 1)
	{
	    static
	        string [144];
	        
		string = "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~                          ";
		
		if (InfoJugador [playerid][jTiempoCarcel] > 3600)
			format (string, sizeof (string), "%s%d ~b~~h~~h~horas", string, InfoJugador [playerid][jTiempoCarcel] / 3600);

		else if (InfoJugador [playerid][jTiempoCarcel] > 60)
			format (string, sizeof (string), "%s%d ~b~~h~~h~minutos", string, InfoJugador [playerid][jTiempoCarcel] / 60);

		else
			format (string, sizeof (string), "%s%d ~b~~h~~h~seg", string, InfoJugador [playerid][jTiempoCarcel] / 3600);

		GameTextForPlayer (playerid, string, 3000, 3);
	}
	else if(InfoJugador[playerid][jEncarcelado] == 2)
	{
		new
			LabelString[350],
			OtherStr[38],
			hour_ = InfoJugador[playerid][jTiempoCarcel]/3600,
			min_ = (InfoJugador[playerid][jTiempoCarcel] % 3600) / 60,
			seg_ = (InfoJugador[playerid][jTiempoCarcel] % 60) % 60;

		A_Format(OtherStr, ""#CAZULRARO"Falta: "#CROJO"%dh %dm %ds", hour_, min_, seg_);

		strcat(LabelString, TextoDeCarcel);
		strcat(LabelString, OtherStr);

		UpdatePlayer3DTextLabelText(playerid, TextoCarcel[playerid], C_ROJO, LabelString);
	}

	if(InfoJugador[playerid][jTiempoCarcel] <= 0)
	{
	    DeletePlayer3DTextLabel(playerid, TextoCarcel[playerid]);
	    TextoCarcel[playerid] = PlayerText3D:INVALID_3DTEXT_ID;
		if(InfoJugador[playerid][jEncarcelado] == 1)
		{
			GameTextForPlayer (playerid, "~g~^LIBERTAD!", 5000, 0);
			SetPlayerPos (playerid, 1519.3170,-1674.8177,13.5529);
			SetPlayerFacingAngle (playerid, 270.0);
			SetPlayerInterior (playerid, 0);
			SetPlayerVirtualWorld (playerid, 0);
			Mensaje(playerid,-1,"Tu condena finalizó. Tus antecedentes quedaron registrados a la "#CAZUL"policía"#CBLANCO", ¡ten más cuidado!");
		}
		else
		{
			GameTextForPlayer(playerid,"~g~~h~condena finalizada",5000,3);
			Mensaje(playerid,-1,"Tu condena terminó. La próxima vez, piensalo dos veces antes de cometer una infracción");
		    SetPlayerPos (playerid, 1482.6365,-1742.8387,13.5469);
		    SetPlayerVirtualWorld (playerid, 0);
			SetPlayerInterior (playerid, 0);
		}
		KillTimer2(playerid,TIMER_CARCEL);
		CongelarEx(playerid, 3);
		InfoJugador[playerid][jEncarcelado] = 0;
		InfoJugador[playerid][jTiempoCarcel] = 0;
		return 1;
	}
	return 1;
}

CALLBACK: MantenerPosicionEx(playerid,Float:X,Float:Y,Float:Z) return SetPlayerPos(playerid,X,Y,Z),1;

stock CheckRangoADM(playerid)
{
	new rango[60];
	if(InfoJugador[playerid][jAdmin])
	{
		switch(InfoJugador[playerid][jAdmin])
		{
			case Destacado: 		rango = ""#CDESTACADO"Usuario Destacado";
			case Ayudante: 			rango = ""#CAYUDANTE"Ayudante";
			case Moderador: 		rango = ""#CMODERADOR"Moderador";
			case Mod.Superior: 		rango = ""#CMOD.SUPERIOR"Administrador";
			case Administrador:		rango = ""#CADMINISTRADOR"Adm. superior";
			case AdministradorSup:	rango = ""#CADMINISTRADOR"Adm. general";
			case SubDueno:			rango = ""#CSUBDUENO"Adm. encargado";
			case Dueno:				rango = ""#CDUENO"Director";
		}
	}
	return rango;
}

stock DialogGPS(playerid)
{
	return 1;
}

stock CambiarRopa(playerid,skinid,slot)
{
	switch(InfoJugador[playerid][jSexo])
	{
	    case 1: SetPlayerSkin(playerid,252);
	    case 2: SetPlayerSkin(playerid,140);
	}
	AutoRol(playerid,"se está cambiando");
	SetTimerEx("CambiarEx",4000,false,"ii",playerid,skinid);
	InfoJugador[playerid][jRopa][slot] = skinid;
	GameTextForPlayer(playerid,"~w~Cambiando ropa...",4000,3);
	InfoJugador[playerid][jCurrentSkin] = slot;
	CongelarEx(playerid,4);
	return 1;
}

CALLBACK: CambiarEx(playerid,skinid)
{
	SetPlayerSkin(playerid,skinid);
	cmd_do(playerid, "Cambiado");
	return 1;
}

stock MostrarVelocimetro(playerid)
{
	new
	    VehID = GetPlayerVehicleID(playerid);

	if(VehID == 0) return;

	new
	    MaxSpeed = veh_getMaxSpeed(VehID),
		VehType = GetVehType(VehID);

	if(BVelocimetro[playerid] == INVALID_PLAYER_BAR_ID)
	{
	    BVelocimetro[playerid] = CreatePlayerProgressBar(playerid, 535.00, 381.00, 79.50, 1.50, C_BARRA_VELOCIMETRO, MaxSpeed);
	}
	else
	{
		SetPlayerProgressBarMaxValue(playerid, BVelocimetro[playerid], MaxSpeed);
	}

	SetPlayerProgressBarValue(playerid, BVelocimetro[playerid], 0.0);
	ShowPlayerProgressBar(playerid, BVelocimetro[playerid]);

	if(TDVelocimetro[playerid] == PlayerText:INVALID_TEXT_DRAW)
	{
		TDVelocimetro[playerid] = CreatePlayerTextDraw(playerid, 535.718994, 362.983856, "0 KM/H");
		PlayerTextDrawLetterSize(playerid, TDVelocimetro[playerid], 0.413199, 1.301331);
		PlayerTextDrawAlignment(playerid, TDVelocimetro[playerid], 1);
		PlayerTextDrawColor(playerid, TDVelocimetro[playerid], -1);
		PlayerTextDrawSetShadow(playerid, TDVelocimetro[playerid], 0);
		PlayerTextDrawSetOutline(playerid, TDVelocimetro[playerid], 0);
		PlayerTextDrawBackgroundColor(playerid, TDVelocimetro[playerid], 51);
		PlayerTextDrawFont(playerid, TDVelocimetro[playerid], 1);
		PlayerTextDrawSetProportional(playerid, TDVelocimetro[playerid], 1);
	}

	PlayerTextDrawShow(playerid, TDVelocimetro[playerid]);

	TextDrawShowForPlayer(playerid, TDVelocimetroBOX);
	TextDrawShowForPlayer(playerid, TDVelocimetroTXT);
	TextDrawShowForPlayer(playerid, TDVelocimetroFondo);

	if(VehType != VEHICLE_TYPE_BICYCLE) // Gasolina
	{
		new
		    str[10],
		    MaxFuel = veh_getMaxFuel(VehID);

	    // Barras de progreso
		if(BGasolimetro[playerid] == INVALID_PLAYER_BAR_ID)
		{
		    BGasolimetro[playerid] = CreatePlayerProgressBar(playerid, 536.00, 429.00, 78.50, 1.50, C_BARRA_GASOLIMETRO, MaxFuel);
		}
		else
		{
			SetPlayerProgressBarMaxValue(playerid, BGasolimetro[playerid], MaxFuel);
		}

		A_Format(str, "%d/%d", int(veh_getFuel(VehID)), MaxFuel);

		SetPlayerProgressBarValue(playerid, BGasolimetro[playerid], int(veh_getFuel(VehID)));
		ShowPlayerProgressBar(playerid, BGasolimetro[playerid]);

		if(TDGasolimetro[playerid] == PlayerText:INVALID_TEXT_DRAW)
		{
			TDGasolimetro[playerid] = CreatePlayerTextDraw(playerid, 552.999023, 410.919982, str);
			PlayerTextDrawLetterSize(playerid, TDGasolimetro[playerid], 0.413199, 1.301331);
			PlayerTextDrawAlignment(playerid, TDGasolimetro[playerid], 1);
			PlayerTextDrawColor(playerid, TDGasolimetro[playerid], -1);
			PlayerTextDrawSetShadow(playerid, TDGasolimetro[playerid], 0);
			PlayerTextDrawSetOutline(playerid, TDGasolimetro[playerid], 0);
			PlayerTextDrawBackgroundColor(playerid, TDGasolimetro[playerid], 51);
			PlayerTextDrawFont(playerid, TDGasolimetro[playerid], 1);
			PlayerTextDrawSetProportional(playerid, TDGasolimetro[playerid], 1);
		}

		PlayerTextDrawShow(playerid, TDGasolimetro[playerid]);

		TextDrawShowForPlayer(playerid, TDGasolimetroBOX);
		TextDrawShowForPlayer(playerid, TDGasolimetroTXT);
		TextDrawShowForPlayer(playerid, TDGasolimetroFondo);
	}

	if(veh_isOwnVeh(VehID))
	{
		if(TDContadorKM[playerid] == PlayerText:INVALID_TEXT_DRAW)
		{
		    new
		        str[30];
		    A_Format(str, "%d ~b~~h~km", floatround(Veh[VehID][vehMetros]) / 1000);
			TDContadorKM[playerid] = CreatePlayerTextDraw(playerid, 571.839538, 385.099060, str);
			PlayerTextDrawLetterSize(playerid, TDContadorKM[playerid], 0.229996, 0.860794);
			PlayerTextDrawTextSize(playerid, TDContadorKM[playerid], 665.599609, 88.853279);
			PlayerTextDrawAlignment(playerid, TDContadorKM[playerid], 2);
			PlayerTextDrawColor(playerid, TDContadorKM[playerid], -1);
			PlayerTextDrawSetShadow(playerid, TDContadorKM[playerid], 0);
			PlayerTextDrawSetOutline(playerid, TDContadorKM[playerid], 1);
			PlayerTextDrawBackgroundColor(playerid, TDContadorKM[playerid], 255);
			PlayerTextDrawFont(playerid, TDContadorKM[playerid], 2);
			PlayerTextDrawSetProportional(playerid, TDContadorKM[playerid], 1);
		}
		TextDrawShowForPlayer(playerid, BOXContadorKM);
		PlayerTextDrawShow(playerid, TDContadorKM[playerid]);
	}
	PlayerBools [playerid] |= e_MOSTROVEL;
}

stock SacarVelocimetro (playerid)
{
	//Velocimetro
	if(BVelocimetro[playerid] != INVALID_PLAYER_BAR_ID)
	{
	    DestroyPlayerProgressBar(playerid, BVelocimetro[playerid]);
	    BVelocimetro[playerid] = INVALID_PLAYER_BAR_ID;
	}
	TextDrawHideForPlayer(playerid, TDVelocimetroBOX);
	TextDrawHideForPlayer(playerid, TDVelocimetroTXT);
	TextDrawHideForPlayer(playerid, TDVelocimetroFondo);
	if(TDVelocimetro[playerid] != PlayerText:INVALID_TEXT_DRAW)
	{
	    PlayerTextDrawDestroy(playerid, TDVelocimetro[playerid]);
        TDVelocimetro[playerid] = PlayerText:INVALID_TEXT_DRAW;
	}

	//Gasolimetro
	if(BGasolimetro[playerid] != INVALID_PLAYER_BAR_ID)
	{
	    DestroyPlayerProgressBar(playerid, BGasolimetro[playerid]);
	    BGasolimetro[playerid] = INVALID_PLAYER_BAR_ID;
	}
	TextDrawHideForPlayer(playerid, TDGasolimetroBOX);
	TextDrawHideForPlayer(playerid, TDGasolimetroTXT);
	TextDrawHideForPlayer(playerid, TDGasolimetroFondo);
	if(TDGasolimetro[playerid] != PlayerText:INVALID_TEXT_DRAW)
	{
		PlayerTextDrawDestroy(playerid, TDGasolimetro[playerid]);
		TDGasolimetro[playerid] = PlayerText:INVALID_TEXT_DRAW;
	}
	if(TDContadorKM[playerid] != PlayerText:INVALID_TEXT_DRAW)
	{
		PlayerTextDrawDestroy(playerid, TDContadorKM[playerid]);
		TDContadorKM[playerid] = PlayerText:INVALID_TEXT_DRAW;
	}
	TextDrawHideForPlayer(playerid, BOXContadorKM);
	PlayerBools [playerid] &= ~e_MOSTROVEL;
}

stock NPCTalk(npcid, text[])
{
	new
	    Time = strlen(text) * 150;

	SetPlayerChatBubble(npcid, text, C_INFO, 10.0, Time);
	return Time;
}

stock BuscarAntecedente(playerid, where[], time[], index)
{
	if( !(0 <= index <= MAX_ANTECEDENTES) ) return 0;

	new
	    String[30],
		Path[60];

	A_Format(Path, "Facciones/LSPD/Antecedentes/%d.ini", InfoJugador[playerid][jDNI]);
	if(!fexist(Path))
	{
	    return 2;
	}

	SetPVarInt(playerid, "Cargar_Antecedente", index);
	// Extraccion
	INI_ParseFile(Path, "Ant_%s", .bExtra = true, .extra = playerid);
	//Terminada extraccion, comienza a almacenar
	DeletePVar(playerid, "Cargar_Antecedente");

	A_Format(String, "Antecedente%d", index);
	GetPVarString(playerid, String, where, MAX_CARACTERES_ANTECEDENTE);
	DeletePVar(playerid, String);

	A_Format(String, "AFecha%d", index);
	GetPVarString(playerid, String, time, 30);
	DeletePVar(playerid, String);
	return 1;
}

CALLBACK: Ant_antecedentes(playerid, name[], value[])
{
	new
	    i = GetPVarInt(playerid, "Cargar_Antecedente"),
	    Str[30];

	A_Format(Str, "Antecedente%d", i);
	if(!strcmp(name, Str))
	{
	    if(strlen(value) >= MAX_CARACTERES_ANTECEDENTE)
	    {
	        strdel(value, MAX_CARACTERES_ANTECEDENTE-1, strlen(value));
		}

	    SetPVarString(playerid, Str, value);
	    return 1;
	}
	A_Format(Str, "AFecha%d", i);
	if(!strcmp(name, Str))
	{
	    SetPVarString(playerid, Str, value);
	}

	return 1;
}

stock AgregarAntecedente(playerid, antecedente[], index=-1)
{
	if((index >= MAX_ANTECEDENTES) || strlen(antecedente) > MAX_CARACTERES_ANTECEDENTE) return 0;

	new
	    String[30], String2[30],
		Path[60],
		INI: Arch,
		Date[3];

	A_Format(Path, "Facciones/LSPD/Antecedentes/%d.ini", InfoJugador[playerid][jDNI]);

	if(index < 0)
	{
	    if(fexist(Path))
	    {
			new
			    File: LinesC = fopen(Path, io_read),
			    Lines, Store[MAX_CARACTERES_ANTECEDENTE];

			while(fread(LinesC, Store))//Total de lineas.
			    Lines++;

			fclose(LinesC);

			Lines -= 1;//Tag
			Lines /= 2;//Lineas, cada ant tine dos lineas.

			index = Lines;
			if(index >= MAX_ANTECEDENTES) //Si no hay mas espacio, se sobreescribe el PRIMER antecedente
			    index = 0;
		}
		else index = 0;
	}
	Arch = INI_Open(Path);
	INI_SetTag(Arch, "antecedentes");

	A_Format(String, "Antecedente%d", index);
	INI_WriteString(Arch, String, antecedente);

	getdate(Date[0], Date[1], Date[2]);
	A_Format(String, "%02d/%02d/%02d", Date[2], Date[1], Date[0]);
	A_Format(String2,"AFecha%d", index);
	INI_WriteString(Arch, String2, String);

	INI_Close(Arch);
	return 1;
}


// ----=======[ COMANDOS GENERALES ]=====-------- //

	CMD:llenargasolinera (playerid, params[])
	{
		if(Staff(playerid, Dueno))
		    return 1;

		new
		    gasol = strval(params);

		if (0 <= gasol < MAX_ESTACIONES)
		{
		    InfoEstacion[gasol][estLitros] = 5000;
		    ActualizarLabelEstacion(gasol);
		    ActualizarEstacion(gasol);
		    MensajeF (playerid, -1, "Gasolinera id %d llenada.", gasol);
		}
		return 1;
	}

	CMD:llenarhitdep(playerid, params[])
	{
		if (Staff (playerid, Dueno))
		    return 1;

		LlenarDepositoHitman();
		return 1;
	}

	CMD:llenarnegocio(playerid, params[])
	{
		if(Staff(playerid, Dueno))
		    return 1;

		if(sscanf(params, "iii", params[0], params[1], params[2]))
		    return ParamsINC(playerid, "/llenarnegocio [negocio] [n de stock] [stock]");

		SetNegStock(params[0], params[1], params[2]);
		ActualizarStockNegocio(params[0]);
		return 1;
	}

	CMD:traercasa(playerid, params[])
	{
		if(Staff(playerid, Dueno))
		    return 1;

		new
		    casa;

		if(sscanf(params, "i", casa))
		    return ParamsINC(playerid, "/movercasa [casa]");

		GetPlayerPos(playerid, InfoCasa[casa][cEntrada_x], InfoCasa[casa][cEntrada_y], InfoCasa[casa][cEntrada_z]);
		DestroyDynamicPickup(InfoCasa[casa][cPickup]);
		DestroyDynamic3DTextLabel(InfoCasa[casa][cLabelID]);

		ActualizarCasaLabel(casa, true);

		InfoCasa[casa][cPickup] = CreateDynamicPickup(ID_PICKUPCASA,1,InfoCasa[casa][cEntrada_x],InfoCasa[casa][cEntrada_y],InfoCasa[casa][cEntrada_z]);
		ActualizarCasa(casa);
		return 1;
	}

	CMD:cord_int_0(playerid, params[])
	{
		if(Staff(playerid,Dueno)) return 1;
		if(isnull(params)) return ParamsINC(playerid, "/cord_int_0 [nombre]");

		new
		    Float:x, Float:y, Float:z;

		GetPlayerPos(playerid, x, y, z);
		SetPVarFloat(playerid, "CrearInt_x_0", x);
		SetPVarFloat(playerid, "CrearInt_y_0", y);
		SetPVarFloat(playerid, "CrearInt_z_0", z);
		SetPVarString(playerid, "CrearInt_name", params);
		SetPVarInt(playerid, "CrearInt_int_0", GetPlayerInterior(playerid) );

		GetPlayerFacingAngle(playerid, x);
		SetPVarFloat(playerid, "CrearInt_a_0", x);
		Mensaje(playerid, -1, "Ahora, andá al "#CVERDE"interior "#CBLANCO"del lugar y "#CINFO"/cord_int_1");
		return 1;
	}

	CMD:cord_int_1(playerid, params[])
	{
		if(Staff(playerid,Dueno)) return 1;

		new
		    Float:x, Float:y, Float:z, Float:a, interiorid,
			File: file_ints = fopen("Interiores.txt", io_append),
			Str[200], name[30];

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);
		GetPVarString(playerid, "CrearInt_name", name, 30);

		interiorid = GetPVarInt(playerid, "CrearInt_int_0");

		A_Format(Str, "/*%s: CrearInterior(\"%s\",%d,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%d,%d);\r\n",

						name,
						name,

						GetPlayerInterior(playerid),

						GetPVarFloat(playerid, "CrearInt_x_0"),
						GetPVarFloat(playerid, "CrearInt_y_0"),
						GetPVarFloat(playerid, "CrearInt_z_0"),
						GetPVarFloat(playerid, "CrearInt_a_0")-180.0,

						x, y, z, a-180.0,

					    strval(params),
						interiorid);

		fwrite(file_ints, Str);
		fclose(file_ints);

		DeletePVar(playerid, "CrearInt_name");
		DeletePVar(playerid, "CrearInt_x_0");
		DeletePVar(playerid, "CrearInt_y_0");
		DeletePVar(playerid, "CrearInt_z_0");
		DeletePVar(playerid, "CrearInt_a_0");
		DeletePVar(playerid, "CrearInt_int_0");

		Mensaje(playerid, -1, "Exportado a "#CINFO"Interiores.txt");
		return 1;
	}

	CMD:reglas(playerid, params[])
	{
	    new
	        dialog[sizeof(Reglas)*30],
			str[30];

		Loop(i, sizeof(Reglas), 0)
		{
			A_Format(str, "» %s\n", Reglas[i][eTitulo]);
			strcat(dialog, str);
		}
		Dialog(playerid, dReglas, DIALOG_STYLE_LIST, ""#CAZULRARO"Reglas y conceptos", dialog, "Ver", "Cerrar");
		return 1;
	}

	CMD:suicidio(playerid,params[])
	{
	    if(InfoJugador[playerid][jMuerto] == false)
	        return Error(playerid, "¡Debe estar agonizando para usar este comando!");

		if(GetPlayerMoney(playerid) < 6000)
		    return Error(playerid, "Necesitas ~g~$6000 ~w~para los gastos médicos de éste metodo.");

		SetPlayerHealth(playerid, -1.0);
		QuitarDinero(playerid, 6000);
		return 1;
	}

	CMD:verpresos(playerid, params[])
	{
	    if(Staff(playerid,Moderador)) return 1;
	    Para_Admin_Servicio
	    new
			str[MAX_PLAYER_NAME*2 + 20],
			str2[sizeof(str)*30];

		str2 = "{ffffff}";

	    foreach(Player, i)
	    {
	        if(InfoJugador[i][jEncarcelado])
	        {
	            A_Format(str, "[%s] %s - %02dh %02dm - %s\n",
					(InfoJugador[i][jEncarcelado] == 2) ? ("OOC") : ("IC"),
					NombreJugador_(i),
					InfoJugador[i][jTiempoCarcel] / 3600,
					InfoJugador[i][jTiempoCarcel] / 60 % 60,
					InfoJugador[i][jAdminJail]);

	            strcat(str2, str);
	        }
		}
		Dialog(playerid, dError, DIALOG_STYLE_MSGBOX, ""#CNARANJA"Presos", str2, "Cerrar", "");
		return 1;
	}

	CMD:desbug(playerid, params[])
	{
	    if(InfoJugador[playerid][jEncarcelado])
	        return Error(playerid, "No puedes utilizar este comando en la cárcel.");

	    new
	        Float:x, Float:z;
		GetPlayerPos(playerid, x, x, z);
		if(z < 400.0)
		{
		    SetPlayerVirtualWorld(playerid, 0);
		    SetPlayerInterior(playerid, 0);
			Mensaje(playerid, -1, "Fuiste desbugueado.");
		}
		else
		{
		    Mensaje(playerid, -1, "No se encontro una solución al problema.");
		}
		return 1;
	}

	CMD:empujar(playerid, params[])
	{
	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	        return Error(playerid, "Necesitas ser el conductor de un vehículo para utilizar este comando.");

		if(sscanf(params, "u", params[0]))
		    return ParamsINC(playerid, "/empujar [ID/Nombre]");

		if(params[0] == INVALID_PLAYER_ID)
		    return Error(playerid, "El jugador está desconectado.");

		if(params[0] == playerid)
		    return Error(playerid, "¡No te puedes expulsar a tí mismo!");

		if(GetPlayerVehicleID(params[0]) != GetPlayerVehicleID(playerid)) return Error(playerid, "Ese jugador no está en tu vehículo.");

		RemovePlayerFromVehicle(params[0]);

		new
			str[70];

		A_Format(str, "expulsa del vehículo a %s", NombreJugador(params[0]) );
		AutoRol(playerid, str);

		return 1;
	}

	CMD:radio(playerid, params[])
	{
	    if(Cracked[playerid]) return Error(playerid, "¡No puedes pedir refuerzos estando en este estado!");

	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	        return Error(playerid, "Necesitas ser el conductor de un vehículo para utilizar este comando.");

		if(GetVehType(GetPlayerVehicleID(playerid)) != VEHICLE_TYPE_CAR)
		    return Error(playerid, "¡Este vehículo no tiene radio!");

		Dialog(playerid, dRadio, DIALOG_STYLE_LIST, ""#CNARANJA"RADIO - ELEGIR ESTACIÓN", "Radio LSTV\t"#CINFO"[AM/FM]\nReggae\t\t"#CINFO"[FM]\nRap\t\t"#CINFO"[FM]\n"#CROJO">> Apagar radio.", "Aceptar", "Cancelar");
		return 1;
	}

	CMD:picar(playerid, params[])
	{
	    if(isnull(params)) return ParamsINC(playerid, "/picar mineral");
	    if(!strcmp(params, "mineral", true))
	    {
	        if(InfoJugador[playerid][jTrabajo] != ID_Minero) return Error(playerid, "Necesita tener el trabajo de minero para usar este comando.");
	        if(GetPlayerWeapon(playerid) != 6) return Error(playerid, "¡Necesitas una ~b~pala!");
			if(IsPlayerWhitSpecialBar(playerid)) return Error(playerid, "Debes terminar tu actividad actual antes de comenzar.");
			if(PicandoMineral[playerid]) return Error(playerid, "¡Ya estás picando un mineral!");

	        new
	            Float:x, Float:y, Float:z;

			GetPlayerPos(playerid, x, y, z);

			Loop(i, sizeof PosMinerales, 0) if(Bit_Get(ValidMineral, i))
			{
			    if(IsPlayerInRangeOfPoint(playerid, 2.0, PosMinerales[i][0], PosMinerales[i][1], PosMinerales[i][2]))
			    {
					foreach(Player, p)
					    if(GetPVarInt(p, "MINERO_MIN_ID") == i)
					        return Error(playerid, "¡Alguien más está picando este mineral!");

			        SetPlayerFacingAngle(playerid, 180.0+floatabs(360.0-atan2(x-PosMinerales[i][0], y-PosMinerales[i][1])));

					SetPVarInt(playerid, "MINERO_MIN_ID", i);
					CongelarEx(playerid);
					PicandoMineral[playerid] = 1;
					Error(playerid, "Presiona reiteradas veces ~b~BIR ~w~para picar el mineral.");
					SetTimerEx("empezarPicar", 100, false, "i", playerid);
					Mensaje(playerid, -1, "Puede "#CINFO"/terminar extraccion "#CBLANCO"para cancelar.");
					new
					    BarColor = C_BLANCO,
						MinType = InfoMineral[i][minType];

					BarColor = ARGBToRGBA(DataMineral[MinType][mindataCol]);

					CreatePlayerSpecialBar(playerid, "TRABAJO", "Mineral picado", DurezaMineral(i), BarColor);
					return 1;
				}
			}
			return Error(playerid, "¡No estás cerca de ningún ~b~mineral!");
		}
		return ParamsINC(playerid, "/picar mineral");
	}

CALLBACK: empezarPicar (i)
{
	ApplyAnimation(i, "BASEBALL", "BAT_4", 4.0, 1, 1, 1, 1, 0);
}

	CMD:dialogar(playerid, params[])
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, 295.3074,1244.4556,1566.0165))
	    {
		    if(!EsLSPD(playerid))
		    {
		        NPCTalk(NPC_CLAUDIA, "Esta es información confidencial, no publica. Lo siento!");
		        return 1;
			}
			NPCTalk(NPC_CLAUDIA, "En que le puedo servir?");
			Dialog(playerid, dInfoLSPD, DIALOG_STYLE_LIST, ""#CVERDE"Claudia: "#CBLANCO"En que le puedo servir?", "Deseo buscar información sobre una persona\nDeseo agregarle antecedentes a una persona", "Hablar", "Cancelar");
			return 1;
		}
	    else if (IsPlayerInRangeOfPoint(playerid, 3.0, -1109.1027,-1638.6119,76.3672))
	    {
			if (PasoTruth[playerid] == 0)
			{
				static
				    oldclienttime;

				if (Truth_ClientID != INVALID_PLAYER_ID)
				{
					if ((gettime() - oldclienttime) > (5*60))
					{
					    Truth_ClientID = INVALID_PLAYER_ID;
						veh_respawn(Truth_VehID);
						NPCTalk(NPC_TRUTH, "¡Que se valla a la mierda el boludo ese! Decime que necesitas.");
						Error(playerid, "Dialoga nuevamente con ~b~Truth.");
						return 1;
					}
					else
					{
						NPCTalk(NPC_TRUTH, "Ahora estoy ocupado, hermano. ¡Vuelve luego!");
						Error(playerid, "~b~Truth ~w~está ocupado, todavia no puede hablar contigo. Vuelve en 5 minutos");
						return 1;
					}
				}

				new
				    len_name = strlen(pName(playerid));

				foreach(Planta, i)
				{
				    if ((!strcmp(InfoPlanta[i][plantaOwner], pName(playerid))) && (len_name == strlen(InfoPlanta[i][plantaOwner])))
				    {
			            return Error(playerid, "Ya tienes una ~b~Planta de Marihuana.");
					}
				}
				oldclienttime = gettime();
				Truth_ClientID = playerid;
				Truth_BuscarSemilla(3);
				PasoTruth[playerid] = 1;
				return 1;
			}
			if(PasoTruth[playerid] == 4) //Terminó de cosechar.
			{
			    if(GetPlayerMoney(playerid) < 8000)
			    {
					return Truth_BuscarSemilla(7);
				}
				Truth_BuscarSemilla(0);
				return 1;
			}
			return 1;
		}
		return Error(playerid, "¡Aquí no hay nadie para dialogar!");
	}

	CMD:graffdata(playerid, params[])
	{
 		Para_Admin_Servicio
 		if(Staff(playerid, Mod.Superior)) return 1;

		new
 			curr_time = gettime();

		foreach(Graffiti, i)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 2.0, InfoGraffiti[i][grafX], InfoGraffiti[i][grafY], InfoGraffiti[i][grafZ]))
		    {
		        new
					Dif = (curr_time - InfoGraffiti[i][grafTime]),
					dias,
					horas,
					minutos,
					segundos;

				SecondsToDHMS(Dif, dias, horas, minutos, segundos);
				MensajeF(playerid, -1, "ID: %d | Texto: %s | Dueño: %s | Puesto hace: %ddias %dhoras %dmin %dseg", i, InfoGraffiti[i][grafTexto], InfoGraffiti[i][grafOwner], dias, horas, minutos, segundos);
			}
		}
		return 1;
	}

	CMD:borrargraffiti(playerid, params[])
	{
	    if(Staff(playerid, Administrador)) return 1;
		Para_Admin_Servicio
		if(sscanf(params, "i", params[0])) return Error(playerid, "/borrargraffiti [id]");
		if(!(0 <= params[0] < MAX_GRAFFITIS)) return Error(playerid, "ID de graffiti incorrecto.");
		if(InfoGraffiti[params[0]][grafTime] == 0) return Error(playerid, "ID de graffiti incorrecto.");
		MensajeAdminF(C_ROJO, "[ADMINISTRACIÓN] "#CBLANCO"%s borró el graffiti ID %d.", Ayudante, NombreJugador_(playerid), params[0]);
		DestroyGraffiti(params[0]);
		return 1;
	}

	CMD:borrarplanta(playerid, params[])
	{
	    if(Staff(playerid, Administrador)) return 1;
	    Para_Admin_Servicio
		if(sscanf(params, "i", params[0])) return Error(playerid, "/borrarplanta [id]");
		if(!(0 <= params[0] < MAX_PLANTAS)) return Error(playerid, "ID de planta incorrecto.");
		if(!InfoPlanta[params[0]][plantaObjID]) return Error(playerid, "ID de planta incorrecto.");
		BorrarPlantaMarihuana(params[0]);
		MensajeAdminF(C_ROJO, "[ADMINISTRACIÓN] "#CBLANCO"%s eliminó la planta ID: "#CINFO"%d.", Ayudante, NombreJugador_(playerid), params[0]);
	    return 1;
	}

	CMD:editargraffiti(playerid, params[])
	{
	    if(Staff(playerid, Administrador)) return 1;
		Para_Admin_Servicio
		if(sscanf(params, "i", params[0])) return ParamsINC(playerid, "/editargraffiti [id]");
		if(!(0 <= params[0] < MAX_GRAFFITIS)) return Error(playerid, "ID de graffiti incorrecto.");
		if(InfoGraffiti[params[0]][grafTime] == 0) return Error(playerid, "ID de graffiti incorrecto.");
		EditDynamicObject(playerid, InfoGraffiti[params[0]][grafObjID]);
		SetPVarInt(playerid, "ADMIN_EDIT_GRAFFITI", true);
		SetPVarInt(playerid, "ADMIN_GRAFF_ID", params[0]);
		return 1;
	}

	CMD:acento(playerid, params[])
	{
	    new
	        String[(sizeof(Acentos) * 15)+40];

		Loop(i, sizeof(Acentos), 0)
		{
		    strcat(String, Acentos[i]);
		    strcat(String, "\n");
		}
		strcat(String, ""#CROJO">> Borrar acento.");
		Dialog(playerid, dElegirAcento, DIALOG_STYLE_LIST, ""#CNARANJA"Elige tu acento", String, "Aceptar", "Cancelar");
		return 1;
	}

	CMD:armario(playerid, params[])
	{
	    if(EstaEnSuCasa(playerid))
	    {
	        if(isnull(params))
	        {
		        Mensaje(playerid, -1, "Para ver o sacar un objeto del armario, usa "#CINFO"/armario ver");
		        Mensaje(playerid, -1, "Para guardar objetos en el armario, usa "#CINFO"/armario guardar [Opcional: lugar]");
				return 1;
			}
			if(!strcmp(params, "ver", true, 3))
			{
				MostrarArmarioCasa(playerid, ID_Casa(playerid));
				return 1;
			}
			else if(!strcmp(params, "guardar", true, 7))
			{
			    if(GetObject(playerid) == -1)
			        return Error(playerid, "No tienes un objeto en las manos.");

				new
					slot,
					Casa = ID_Casa(playerid);

				if(sscanf(params[8], "I(-1)", slot)) return ParamsINC(playerid, "/armario guardar [Opcional: nº de lugar]");
				if(slot == -1)
				{
					Loop(i, MAX_LUGARES_CASA, 0)
					{
					    if(InfoCasa[Casa][cArmarioObjeto][i] == 0)
					    {
					        slot = i;
					        break;
						}
					}
					if(slot == -1)
					{
					    return Error(playerid, "No tienes más espacio en el armario.");
					}
				}
				else
				{
				    if(1 <= slot <= MAX_LUGARES_CASA)
				    {
				        slot--;
					}
					else
					{
					    return Error(playerid, "El lugar especificado, no existe.");
					}
				}
				InfoCasa[Casa][cArmarioObjeto][slot] = GetObject(playerid);
				InfoCasa[Casa][cArmarioData][slot] = GetObjectData(playerid);

				new
				    str[65];
				A_Format(str, "guarda un/a %s en el armario (Estante: %d).", ObjectData[GetObject(playerid)][invName], slot+1);
				AutoRol(playerid, str);
				RemoveObject(playerid);
				ActualizarCasa(Casa, false, -1, slot);
				return 1;
			}
			else
			    return ParamsINC(playerid, "/armario [opcion]");
		}
		return Error(playerid, "No estás en tu casa.");
	}

stock ObjetoColgado (playerid, &item, &data)
{
	item = InfoJugador [playerid][jObjetoColgado];
	data = InfoJugador [playerid][jObjetoColgadoData];

	if (item < 1)
	    return 0;
	    
	return ObjectData [item][invType];
}

	CMD:maletero(playerid, params[])
	{
	    if(isnull(params))
		{
		    Mensaje(playerid, C_AZULRARO, "• "#CBLANCO"Si quieres ver o retirar un objeto del maletero, usa "#CINFO"/maletero ver.");
		    Mensaje(playerid, C_AZULRARO, "• "#CBLANCO"Si quieres guardar un objeto, usa "#CINFO"/maletero guardar [Opcional: lugar]");
			return 1;
		}

		if(Esposado(playerid))
		{
		    return Error(playerid, "~r~No puedes hacer esto, estás esposado.");
		}

		if(!strcmp(params, "ver", true, 3))
		{
			new
				VehID = VehMasCercano(playerid, false, 8.0);

	 		if(VehID == INVALID_VEHICLE_ID)
			{
			    return Error(playerid,"Debes estar en frente del maletero de algún vehículo.");
			}

			if(veh_getMalSlots(VehID) == 0)
			    return Error(playerid, "Este vehículo no tiene maletero.");

  			new
				Baul,
				Unused,
				Float: Ang,
				Float: x,
			    Float: y,
			    Float: z,
				Float: distance;

			GetVehicleZAngle(VehID, Ang);
			GetVehiclePos(VehID, x, y, z);

			Ang += 180.0;

			new
				Float:X_,
				Float:Y_,
				Float:Z_;

			GetVehicleModelInfo(GetVehicleModel(VehID), VEHICLE_MODEL_INFO_SIZE, X_, Y_, Z_);

			distance = (Y_ / 2);

			x += (distance * floatsin(-Ang, degrees));
			y += (distance * floatcos(-Ang, degrees));

			if(!IsPlayerInRangeOfPoint(playerid, 2.0, x, y, z))
			{
				return Error(playerid,"¡No estás en frente del maletero del auto!");
			}

			GetVehicleParamsEx(VehID, Unused, Unused, Unused, Unused, Unused, Baul, Unused);

			if(!IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z))
			{
			    return Error(playerid,"¡Debes estar en frente del maletero!");
			}

			if(Baul != 1)
			{
			    return Mensaje(playerid, -1, "Debes "#CINFO"/abrir maletero "#CBLANCO"para poder ver o sacar.");
			}

			MostrarMaletero(playerid, VehID);
			AutoRol(playerid, "mira hacia el interior del maletero");
			return 1;
		}
		else if(!strcmp(params, "guardar", true, 7))
		{
		    if(GetObject(playerid) == -1)
		        return Error(playerid, "No tienes un objeto en las manos.");

			new
				VehID = VehMasCercano(playerid, false, 8.0);

	 		if(VehID == INVALID_VEHICLE_ID)
			{
			    return Error(playerid,"Debes estar en frente del maletero de algún vehículo.");
			}

			if(veh_getMalSlots(VehID) == 0)
			    return Error(playerid, "Este vehículo no tiene maletero.");

  			new
				Baul,
				Unused,
				Float: Ang,
				Float: x,
			    Float: y,
			    Float: z,
				Float: distance;

			GetVehicleZAngle(VehID, Ang);
			GetVehiclePos(VehID, x, y, z);

			Ang += 180.0;

			new
				Float:X_,
				Float:Y_,
				Float:Z_;

			GetVehicleModelInfo(GetVehicleModel(VehID), VEHICLE_MODEL_INFO_SIZE, X_, Y_, Z_);

			distance = (Y_ / 2);

			x += (distance * floatsin(-Ang, degrees));
			y += (distance * floatcos(-Ang, degrees));

			if(!IsPlayerInRangeOfPoint(playerid, 2.0, x, y, z))
			{
				return Error(playerid,"¡No estás en frente del maletero del auto!");
			}

			GetVehicleParamsEx(VehID, Unused, Unused, Unused, Unused, Unused, Baul, Unused);

			if(!IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z))
			{
			    return Error(playerid,"¡Debes estar en frente del maletero!");
			}

			if(Baul != 1)
			{
			    return Mensaje(playerid, -1, "Debes "#CINFO"/abrir maletero "#CBLANCO"para poder ver o sacar.");
			}

			new
				slot;

			if(sscanf(params[8], "I(-1)", slot)) return ParamsINC(playerid, "/maletero guardar [Opcional: nº de lugar]");
			if(slot == -1)
			{
				for(new i, items = veh_getMalSlots(VehID); i < items; i++)
				{
				    if(ItemMaletero[VehID][i][invObject] == 0)
				    {
				        slot = i;
				        break;
					}
				}
				if(slot == -1)
				{
				    return Error(playerid, "No tienes más espacio en el maletero.");
				}
			}
			else
			{
			    if(1 <= slot <= veh_getMalSlots(VehID))
			    {
			        slot--;
			        if (ItemMaletero [VehID][slot][invObject])
			        {
			            return Error (playerid, "En el lugar introducido, ya tiene otro objeto guardado.");
					}
				}
				else
				{
				    return Error(playerid, "El lugar especificado, no existe.");
				}
			}
			ItemMaletero[VehID][slot][invObject] = GetObject(playerid);
			ItemMaletero[VehID][slot][invData] = GetObjectData(playerid);

			new
			    str[65];
			A_Format(str, "guarda un/a %s en el maletero (Lugar: %d).", ObjectData[GetObject(playerid)][invName], slot+1);
			AutoRol(playerid, str);
			RemoveObject(playerid);

			ActualizarMaletero(VehID);
			return 1;
		}
		return 1;
	}

	CMD:mapa(playerid,params[])
	{
		Loop(i,sizeof PosMapas, 0)
		{
			if(IsPlayerInRangeOfPoint(playerid,2,PosMapas[i][0],PosMapas[i][1],PosMapas[i][2]))
			{
			    MostrarGPS(playerid);
			    return 1;
			}
		}
		return Error(playerid,"¡Aquí no hay un mapa!");
	}

	CMD:salir(playerid,params[])
	{
	    if(isnull(params))
	    {
	        ParamsINC(playerid, "/salir [Lugar]");
	        return Mensaje(playerid, C_AZULRARO, "• "#CBLANCO"Recuerde, en la mayoría de los casos se sale de los lugares con la tecla "#CVERDE"Y.");
		}

	    if(!strcmp(params, "estadio", true))
	    {
		    if(!GetPVarInt(playerid,"EN_ESTADIO")) return Error(playerid, "¡No estás dentro del estadio!");
		    if(GetPVarInt(playerid,"ESTADIO_VEHID"))
			{
				veh_respawn(GetPVarInt(playerid,"ESTADIO_VEHID"));
			}
			DeletePVar(playerid,"EN_ESTADIO");
			PosEx(playerid,2695.5884,-1704.5596,11.8438, 0);
			return 1;
		}
		else if(!strcmp(params, "deposito", true))
		{
			new
			    VehID = GetPlayerVehicleID(playerid);

			if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
			    return Error(playerid, "No puedes usar este comando de pasajero!");

			if(VehID == 0)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 3.0, 1958.5638,-867.0821,1292.4653)) // dep policial
			    {
			        if(!EsLSPD(playerid))
			            return Error(playerid, "Sólo policias pueden salir.");

					SetPlayerPos(playerid, 2064.5808,-2075.9402,13.5469);
					SetPlayerFacingAngle(playerid, 90.0);
					SetPlayerInterior(playerid, 0);
					CongelarEx(playerid, 3);
					return 1;
				}
			}
			else
			{
				if(IsPlayerInRangeOfPoint(playerid, 10.0, 1958.5638,-867.0821,1292.4653)) // Depósito policial
				{
					if(!EsLSPD(playerid))
					    return Error(playerid, "Sólo policias pueden salir de aquí.");

					if(IsPlayerInAnyVehicle(playerid))
					{
						if(GetVehicleModel(VehID) != 525) return Error(playerid, "No puedes salir del depósito con vehículos. Sólo a pie, o con ~b~grúa");
						if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return Error(playerid, "Debes ser el conductor.");

						if(GetVehicleTrailer(VehID))
						{
							Mensaje(playerid, -1, "El vehículo remolcado quedó en el depósito (Su dueño deberá pagar el embargo para retirarlo)");
						}

						CongelarEx(playerid);
						TextDrawShowForPlayer(playerid, Vendado);
						
						SetVehiclePos(VehID, 2059.6292,-2075.9172,13.2522);
						SetVehicleZAngle(VehID, 90.0);
						veh_setInterior(VehID, 0);
		    			
						SetTimerEx("_AttachTrailerToVehicle", 2000, false, "iiii", playerid, INVALID_VEHICLE_ID, VehID, 3);
						return 1;
					}
				}
			}
			return 1;
		}
		return ParamsINC(playerid, "/salir [Lugar]");
	}

	CMD:entrar(playerid, params[])
	{
	    if(isnull(params))
	    {
     		ParamsINC(playerid, "/entrar [Lugar]");
     		MensajeF(playerid, C_AZULRARO, "• "#CBLANCO"Si quieres entrar a una casa, negocio, u otros presiona la "#CINFO"Y.");
			return 1;
		}
		if(!strcmp(params, "deposito", true))
		{
		    if(IsPlayerInRangeOfPoint(playerid, 5.0, 1674.5366,-1699.9175,14.5416)) // Depósito municipal
		    {
				if(IsPlayerInAnyVehicle(playerid))
				{
					return Error(playerid, "No puedes ingresar al depósito con vehículos.");
				}
				if(GetPlayerMoney(playerid) < 800)
				{
				    Mensaje(playerid, -1, "Necesitas tener "#CVERDE"$800 "#CBLANCO"para poder ingresar al depósito.");
				    return 1;
				}
				QuitarDinero(playerid, 800);
			    SetPlayerPos(playerid, 2318.6609,2446.1277,3.2734);
			    SetPlayerInterior(playerid, 3);
			    SetPlayerVirtualWorld(playerid, 0);
			    CongelarEx(playerid, 3);
				return 1;
			}
		    else if(IsPlayerInRangeOfPoint(playerid, 10.0, 2064.5808, -2075.9402, 13.5469)) // Depósito policial
		    {
				if(!EsLSPD(playerid))
				    return Error(playerid, "Sólo policias pueden ingresar aquí.");

				if(IsPlayerInAnyVehicle(playerid))
				{
				    new
				        VehID = GetPlayerVehicleID(playerid);

					if(GetVehicleModel(VehID) != 525) return Error(playerid, "No puedes ingresar al depósito con vehículos. Sólo a pie, o con ~b~grúa");
					if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return Error(playerid, "Debes ser el conductor.");
					new
					    Trailer = GetVehicleTrailer(VehID);

					if(IsValidVehicle(Trailer))
					    return Error(playerid, "Si quieres embargar un vehículo, usa /embargar.");

					SetPlayerInterior(playerid, 3);

				    SetVehiclePos(VehID, 1962.2258,-867.3160,1292.3502);
				    SetVehicleZAngle(VehID, 270.0);
	    			veh_setInterior(VehID, 3);
					return 1;
				}
				SetPlayerPos(playerid, 1958.5638,-867.0821,1292.4653);
				SetPlayerFacingAngle(playerid, 90.0);
				SetPlayerInterior(playerid, 3);
				return 1;
			}
		}
		return ParamsINC(playerid, "/entrar [Lugar]");
	}

	CMD:embargar(playerid, params[])
	{
	    if(!EsLSPD(playerid))
	        return Error(playerid, "Sólo ~b~policias ~w~pueden embargar vehículos.");

        if(IsPlayerInRangeOfPoint(playerid, 10.0, 2064.5808,-2075.9402,13.5469)) // Depósito policial
 		{
			if(IsPlayerInAnyVehicle(playerid))
			{
			    new
			        VehID = GetPlayerVehicleID(playerid);

				if(GetVehicleModel(VehID) != 525) return Error(playerid, "Debes tener una ~b~grúa.");
				if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return Error(playerid, "Debes ser el conductor.");
				new
				    Trailer = GetVehicleTrailer(VehID);

				if(IsValidVehicle(Trailer))
				{
				    if(!veh_isOwnVeh(Trailer)) return Error(playerid, "¡No puedes embargar este vehículo!");

				    new
				        Multas,
						Path[45];
					Loop(i, MAX_MULTAS_VEH, 0)
					{
					    A_Format(Path, "Facciones/LSPD/Multas/%s_%d.ini", veh_getPlateAsString(Trailer), i);
					    if(fexist(Path))
					    {
					        Multas ++;
						}
					}
					if(Multas < MAX_MULTAS_VEH)
					{
					    return MensajeF(playerid, -1, "Este vehículo, tiene "#CROJO"%d "#CBLANCO"multas. El vehículo necesita tener "#CVERDE"%d "#CBLANCO"multas para embargarlo.", Multas, MAX_MULTAS_VEH);
					}

					CongelarEx (playerid);
					TextDrawShowForPlayer (playerid, Vendado);

				    veh_setInterior(VehID, 3);
				    SetVehiclePos(VehID, 1968.0773,-867.0561,1292.3419);
				    SetVehicleZAngle(VehID, 270.0);
					
				    SetTimerEx("_AttachTrailerToVehicle", 800, false, "iiii", playerid, Trailer, VehID, 1);
				    MensajeF(playerid, -1, "El vehículo fue "#CROJO"embargado. "#CBLANCO"Para ubicarlo en el depósito, sólo use "#CINFO"/remolcar "#CBLANCO"en una posición adecuada.");
				    return 1;
				}
			}
			return Mensaje(playerid, -1, "Debes tener remolcado un vehículo para embargar. Use "#CINFO"/remolcar.");
		}
		return Error(playerid, "Para ~g~embargar ~w~debes estar en la ~r~Central nº 2 (Depósito)");
	}

stock VehEmbargado(vehicleid)
{
	return (GetVehicleDistanceFromPoint(vehicleid, 1993.5305,-858.4294,1292.723) < 75.0);
}

stock VehEnDepMunicipal(vehicleid)
{
	return (GetVehicleDistanceFromPoint(vehicleid, 2275.9963,2457.3691,-0.4191) < 75.0);
}

CALLBACK: _AttachTrailerToVehicle(playerid, trailerid, vehicleid, fase)
{
	/*

	COORDS:

	Vehiculo:

		Solo:
			2059.6292,-2075.9172,13.2522,268.0190

		cn Attach:
			2054.1143,-2076.2532,13.2519,89.5577

		Attach:
			2061.9934,-2076.3142,13.2523,89.5576

	Pie:

		2064.5808,-2075.9402,13.5469,265.6915

	*/
	if (fase == 1)
	{
		if (!IsPlayerConnected(playerid)) return 1;

		// Posicion sincronizada
		if (!IsVehicleStreamedIn(trailerid, playerid)) 
		{
			veh_setInterior(trailerid, 3);
			SetVehiclePos(trailerid, 1961.8307,-867.0832,1292.1703);
			SetVehicleZAngle(trailerid, 270.0);
					
			// Mover el vehiculo, y chequear si en la tercer fase ya se cargó al jugador.
			SetTimerEx("_AttachTrailerToVehicle", 1000, false, "iiii", playerid, trailerid, vehicleid, 3);
		}
		else {

			// Posicion no sincronizada todavía, volver a chequear.
			SetTimerEx("_AttachTrailerToVehicle", 800, false, "iiii", playerid, trailerid, vehicleid, 1);
		}
		return 1;
	}
	else if (fase == 2)
	{
		// Chequear si el vehículo ya se cargó.
		if (IsVehicleStreamedIn(trailerid, playerid)) // Posicion sincronizada
		{
			AttachTrailerToVehicle (trailerid, vehicleid);
			SetTimerEx("_AttachTrailerToVehicle", 800, false, "iiii", playerid, trailerid, vehicleid, 3);
		}
		else { // Todavía el vehículo no se cargó, volver a esperar sincronización.
			SetTimerEx("_AttachTrailerToVehicle", 800, false, "iiii", playerid, trailerid, vehicleid, 2);
		}
	}
	else if (fase == 3)
	{
		Descongelar(playerid);
		TextDrawHideForPlayer(playerid, Vendado);
		AttachTrailerToVehicle(trailerid, vehicleid);
	}
	return 1;
}

	CMD:mp(playerid,params[])
	{
		if(EsIP(params))
		{
			MensajeAdminF(C_ROJO, "[Anti-SPAM] "#CBLANCO"%s(%d): "#CINFO"/mp %s", Destacado, NombreJugador_(playerid), playerid, params);
			antic_Kick(playerid, "SPAM");
			return 0;
		}
	    if(sscanf(params,"us[126]",params[0],params[1]))
			return ParamsINC(playerid,"/mp [ID/Nombre] [Mensaje]");

		if(params[0] == playerid) return Error(playerid,"¡No puedes mandarte mps a tí mismo!");

		if(params[0] == INVALID_PLAYER_ID)
			return Error(playerid,"¡Jugador desconectado!");

		if(!InfoJugador[playerid][jAdmin] && !GetPVarInt (params[0], "ADMIN_ONDUTY"))
			return Mensaje (playerid, -1, "Podrás mandarle mensajes privados unicamente a miembros del staff que se encuentren "#CVERDE"en servicio.");

		if(Ayudante <= InfoJugador[playerid][jAdmin] <= Administrador && !GetPVarInt (playerid, "ADMIN_ONDUTY"))
			return Error (playerid, "Debes estar en servicio administrativo para mandar o recibir mensajes privados.");

		if(GetPVarInt(params[0],"MPSBloqueados") == 1 && InfoJugador[playerid][jAdmin] <= Administrador)
			return Error(playerid,"¡Este jugador tiene los mensajes privados bloqueados!");

		MensajeF(params[0], C_MPS, "(( MP de %s(%d): "#CBLANCO"%s "#CMPS"))", NombreJugador_(playerid), playerid, params[1]);
		MensajeF(playerid,  C_MPS, "- (( MP para %s(%d): "#CBLANCO"%s "#CMPS"))", NombreJugador_(params[0]), params[0], params[1]);

		new
		    str_to_vmp[144];

		A_Format(str_to_vmp, "• MP de %s a %s: "#CBLANCO"%s", NombreJugador_(playerid), NombreJugador_(params[0]), params[1]);

		if(IsPlayerPaused(params[0]))
		    Error(playerid, "El ~p~jugador ~w~se encuentra en pausa, es posible que no conteste.");

		foreach(Player,i)
		{
		    if(InfoJugador[i][jAdmin] > Ayudante)
		    {
			    if(GetPVarInt(i,"ViendoMPS") == 1)
			    {
					Mensaje(i, C_MPS, str_to_vmp);
				}
			}
		}
		return 1;
	}

	CMD:vermps(playerid,params[])
	{
	    if(Staff(playerid,Ayudante)) return 1;
        SetPVarInt(playerid,"ViendoMPS",1);
        new Str[80];
        Mensaje(playerid,-1,"> Estás viendo los mensajes privados.");
        A_Format(Str,"[ADMINISTRACIÓN] > "#CBLANCO"%s está viendo los mensajes privados",NombreJugador_(playerid));
        MensajeAdmin(C_ROJO,Str,InfoJugador[playerid][jAdmin]+1);
        return 1;
	}

 	CMD:novermps(playerid,params[])
	{
	    if(Staff(playerid,Ayudante)) return 1;
        DeletePVar(playerid,"ViendoMPS");
        new Str[80];
        Mensaje(playerid,-1,"> Ya no estás viendo los mensajes privados.");
        A_Format(Str,"[ADMINISTRACIÓN] > "#CBLANCO"%s ya no está viendo los mensajes privados", NombreJugador_(playerid));
        MensajeAdmin(C_ROJO,Str,InfoJugador[playerid][jAdmin]+1);
        return 1;
	}


	CMD:cmp(playerid,params[])
	{
	    if(Staff(playerid,Ayudante)) return 1;
		SetPVarInt(playerid,"MPSBloqueados",1);
		Mensaje(playerid,-1,"> Bloqueaste los mensajes privados "#CINFO"(/amp para abrirlos)");
		return 1;
	}

	CMD:amp(playerid,params[])
	{
	    if(Staff(playerid,Ayudante)) return 1;
		DeletePVar(playerid,"MPSBloqueados");
		Mensaje(playerid,-1,"> Desbloqueaste los mensajes privados "#CINFO"(/cmp para cerrarlos)");
		return 1;
	}

	CMD:cambios (playerid, params[])
	{
		static
		    strb[1800];

		if (isnull (strb))
		{
			strcat (strb, "\n"#CAMARILLO"13/01/2019 "#CROJO"[V3.2]:"#CBLANCO"\n\n");
			strcat (strb, "\t+ Se ha cambiado la posicion de la caja fuerte del gobierno.\n");
			strcat (strb, "\t+ Se han reparado los vehiculos de renta.\n");
			strcat (strb, "\t+ Ya se puede usar el /veh para las familias.\n");
			strcat (strb, "\t+ Bajado el nivel que otorga el /recibirstats (5 -> 2)\n");
			strcat (strb, "\t+ Bajado subido el dinero que da el /recibirstats (80k -> 100k)\n");
			strcat (strb, "\t+ Ahora puedes enviar una duda cada 60 segundos en lugar de 10 segundos\n");
			strcat (strb, "\n\nInformación detallada en "#CAMARILLO"ciudadrealrp.x10.bz");
		}

		Dialog (playerid, dError, DIALOG_STYLE_MSGBOX, ""#CINFO"CAMBIOS", strb, "Cerrar", "");
		return 1;
	}

	CMD:duda(playerid,params[])
	{
	    if(isnull(params)) return ParamsINC(playerid, "/duda [Texto]");

		if(EsIP(params))
		{
			MensajeAdminF(C_ROJO, "[Anti-SPAM] "#CBLANCO"%s(%d): "#CINFO"/duda %s", Destacado, NombreJugador_(playerid), playerid, params);
			antic_Kick(playerid, "SPAM");
			return 0;
		}

		if(!InfoJugador[playerid][jRegistrado])
		    return Error(playerid, "No puedes usar este comando en el tutorial");

		if(InfoJugador[playerid][jBlockDudas] == true)
		    return Mensaje(playerid, -1, "Tienes el canal de ayuda "#CROJO"bloqueado"#CBLANCO". Utiliza "#CINFO"/canal ayuda "#CBLANCO"para ingresar.");

		new
		    str[170],
		    rango[20] = "Usuario",
			i = 0;

		if(InfoJugador[playerid][jTiempoDudas] && InfoJugador[playerid][jAdmin] < Ayudante)
		{
		    if(InfoJugador[playerid][jTiempoDudas] <= 60)
		    {
				MensajeF(playerid, -1, "Puedes enviar una duda cada "#CROJO"60"#CBLANCO" segundos. Faltan: "#CVERDE"%d"#CBLANCO" segundos.", InfoJugador[playerid][jTiempoDudas]);
			}
		    else
		    {
				MensajeF(playerid, -1, "Estas "#CROJO"Muteado"#CBLANCO" del canal de dudas. Podrás hablar en: "#CVERDE"%d"#CBLANCO" segundos.", InfoJugador[playerid][jTiempoDudas]);
			}
		    return 1;
		}

		for(new j = strlen(params); i < j; i++)
		{
		    params[i] = tolower(params[i]);
		}

		for(i = 0; i < sizeof(MalasPalabras); i++)
		{
		    if(strfind(params, MalasPalabras[i]) != -1)
		    {
		        InfoJugador[playerid][jTiempoDudas] = 15*60;
		        Mensaje(playerid, -1, "Fuiste silenciado del chat de ayuda por 15 minutos "#CROJO"[Insultos].");
				MensajeAdminF(C_ROJO, "[Anti-SPAM] "#CBLANCO"%s(%d): "#CINFO"/duda %s", Destacado, NombreJugador_(playerid), playerid, params);
		        return 1;
			}
		}

		if(InfoJugador[playerid][jAdmin] == Ayudante)
		    rango = "Ayudante";

		else if(InfoJugador[playerid][jAdmin] == Moderador || InfoJugador[playerid][jAdmin] == Mod.Superior)
		    rango = "Moderador";

		else if(InfoJugador[playerid][jAdmin] > Mod.Superior)
			rango = "Admin";

		A_Format(str, "(( [Dudas] %s %s(%d): %s ))", rango, NombreJugador_(playerid), playerid, params);

		foreach(Player, p)
		{
		    if(InfoJugador[p][jBlockDudas] == false)
		    {
		        Mensaje(p, C_DUDAS, str);
			}
		}
		SetPVarInt(playerid, "Ultima_Duda", gettime() );
		InfoJugador[playerid][jTiempoDudas] = 10;
		return 1;
	}

	CALLBACK: DeshabilitarDudas(playerid, pname[])
	{
		if(!strcmp(pName(playerid), pname))
		{
		    if(!InfoJugador[playerid][jBlockDudas])
		    {
		        if(gettime() - GetPVarInt(playerid, "Ultima_Duda") < 60)
		        {
		            SetTimerEx("DeshabilitarDudas", 1000*60, false, "is", playerid, pName(playerid) );
				}
				else
				{
			        InfoJugador[playerid][jBlockDudas] = true;
					Mensaje(playerid, -1, "Fuiste expulsado automáticamente del canal de dudas por inactividad. Puede re-ingresar usando "#CINFO"/canal ayuda");
					DeletePVar(playerid, "Ultima_Duda");
				}
			}
		}
		return 1;
	}

	CMD:canal(playerid, params[])
	{
	    if(isnull(params))
			return ParamsINC(playerid, "/canal [ayuda/familia/faccion]");

	    if(!strcmp(params, "ayuda", true))
	    {
		    if(InfoJugador[playerid][jBlockDudas] == false)
		    {
		        InfoJugador[playerid][jBlockDudas] = true;
		        Mensaje(playerid, C_ROJO, "Canal Bloqueado "#CBLANCO"| Utiliza "#CINFO"/canal ayuda "#CBLANCO"para ingresar nuevamente.");
			}
			else
		    {
		        InfoJugador[playerid][jBlockDudas] = false;
		        if(InfoJugador[playerid][jNivel] >= 2)
		        {
			        Mensaje(playerid, C_VERDE, "Canal Desbloqueado "#CBLANCO"| Utiliza "#CINFO"/canal ayuda "#CBLANCO"para salir.");
					if(!InfoJugador[playerid][jAdmin])
					{
					    SetTimerEx("DeshabilitarDudas", 1000*60, false, "is", playerid, pName(playerid) );
					}
				}
			}
	        return 1;
		}
	    else if(!strcmp(params, "familia", true))
	    {
		    if(InfoJugador[playerid][jBlockFam] == false)
		    {
		        InfoJugador[playerid][jBlockFam] = true;
		        Mensaje(playerid, C_ROJO, "Canal Bloqueado "#CBLANCO"| Utiliza "#CINFO"/canal familia "#CBLANCO"para activarlo nuevamente.");
			}
			else
		    {
		        InfoJugador[playerid][jBlockFam] = false;
		        Mensaje(playerid, C_VERDE, "Canal Desbloqueado "#CBLANCO"| Utiliza "#CINFO"/canal familia "#CBLANCO"para desactivarlo nuevamente.");
			}
	        return 1;
		}
	    else if(!strcmp(params, "faccion", true))
	    {
		    if(InfoJugador[playerid][jBlockFac] == false)
		    {
		        InfoJugador[playerid][jBlockFac] = true;
		        Mensaje(playerid, C_ROJO, "Canal Bloqueado "#CBLANCO"| Utiliza "#CINFO"/canal faccion "#CBLANCO"para activarlo nuevamente.");
			}
			else
		    {
		        InfoJugador[playerid][jBlockFac] = false;
		        Mensaje(playerid, C_VERDE, "Canal Desbloqueado "#CBLANCO"| Utiliza "#CINFO"/canal faccion "#CBLANCO"para desactivarlo nuevamente.");
			}
	        return 1;
		}
		return ParamsINC(playerid, "/canal [ayuda/familia/faccion]");
	}

	CMD:reportar(playerid,params[])
	{
	    if(sscanf(params,"us[122]",params[0],params[1])) return ParamsINC(playerid,"/reportar [ID/NOMBRE] [RAZÓN]");
		if(params[0] == playerid) return Error(playerid,"¡No puedes reportarte a tí mismo!");
		if(!IsPlayerConnected(params[0])) return Error(playerid,"¡Jugador desconectado!");
		if(GetPVarInt(playerid,"PideREPORTE")) return Error(playerid,"¡Ya tienes un reporte pendiente!");
	    MensajeAdminF(C_ROJO,"[REPORTE] "#CBLANCO"%s(%d) a %s(%d) "#CROJO"[%s]"#CVERDE"(/ar %d)",Moderador,NombreJugador_(playerid), playerid, NombreJugador_(params[0]),params[0],params[1],playerid);

		SetPVarInt(playerid,"PideREPORTE",1);
		SetTimerEx("SacarReporte", 60000, false, "i", playerid);

		SetPVarInt(playerid,"REPORTADO_ID", params[0]);
		MensajeF(playerid,-1,"Reportaste a %s "#CROJO"[%s]"#CBLANCO". El reporte será evaluado.",NombreJugador_(params[0]),params[1]);
		return 1;
	}

	CALLBACK: SacarReporte(playerid)
	{
	    return DeletePVar(playerid,"PideREPORTE");
	}

	CMD:ar(playerid,params[])
	{
	    if(Staff(playerid,Moderador)) return 1;
	    if(sscanf(params,"u",params[0])) return ParamsINC(playerid,"/ar [ID/NOMBRE]");
		if(params[0] == playerid) return Error(playerid,"¡No puedes aceptar tu propio reporte!");
	    if(!GetPVarInt(params[0],"PideREPORTE")) return Error(playerid,"¡Ese jugador no reportó nada, o quizá otro administrador la atendió!");

		MensajeAdminF(C_ROJO,"[ADMINISTRACIÓN] > "#CBLANCO"%s aceptó el reporte de %s",Ayudante,NombreJugador_(playerid),NombreJugador_(params[0]));
		MensajeF(params[0],C_INFO,"> "#CBLANCO"%s aceptó tu reporte, te responderá en un momento.",NombreJugador_(playerid));

		SetPVarInt(playerid, "REPORT_IDSPEC", GetPVarInt(params[0], "REPORTADO_ID") );
		// Report ID spec
		DeletePVar(params[0],"REPORTADO_ID");
		DeletePVar(params[0],"PideREPORTE");

		Dialog(playerid, dSpecReport, DIALOG_STYLE_MSGBOX, ""#CAZUL2"Reporte", ""#CBLANCO"¿Desea spectear al jugador reportado?", "Si", "No");
		return 1;
	}

	CMD:as(playerid,params[])
	{
		if(Staff(playerid, Ayudante)) return 1;
		Para_Admin_Servicio
	    if(sscanf(params,"u",params[0])) return ParamsINC(playerid,"/as [ID/NOMBRE]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid,"Jugador desconectado");
		if(GetPVarInt(playerid, "AceptoAyuda")) return Error(playerid, "Primero debes terminar la ayuda actual.");
		if(!GetPVarInt(params[0], "SolicitaADM")) return Error(playerid, "Ese jugador no solicitó/otro admin ya lo aceptó.");
		new
		    Float:x, Float:y, Float:z;

		GetPlayerPos(playerid, x, y, z);
		SetPVarFloat(playerid, "SOLICITUD_PX" , x);
		SetPVarFloat(playerid, "SOLICITUD_PY" , y);
		SetPVarFloat(playerid, "SOLICITUD_PZ" , z);
		SetPVarInt  (playerid, "SOLICITUD_INT", GetPlayerInterior(playerid)    );
		SetPVarInt  (playerid, "SOLICITUD_VW" , GetPlayerVirtualWorld(playerid));

		//PlayerReported[0] = I_P_ID;
		GetPlayerPos(params[0], x, y  , z);
		SetPlayerPos(playerid , x, y+1, z);
		SetPlayerInterior(playerid,     GetPlayerInterior(params[0]));
		SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(params[0]));
		MensajeF(params[0], -1, "%s aceptó tu solicitud. Puedes hablar utilizando {12D68F}/b [Texto]", NombreJugador(playerid));
		MensajeAdminF(-1, "%s aceptó la solicitud de "#CINFO"%s", Ayudante, NombreJugador_(playerid), NombreJugador_(params[0]));
		MensajeF(playerid, -1, "Aceptaste la solicitud de "#CINFO"%s. "#CBLANCO"Utiliza "#CVERDE"/terminarayuda "#CBLANCO"cuando termines tu labor.", NombreJugador_(params[0]) );
		SetPVarInt(playerid, "AceptoAyuda", true);
		DeletePVar(params[0], "SolicitaADM");
		CongelarEx(playerid, 3);
		return 1;
	}

	CMD:terminarayuda(playerid, params[])
	{
		if(Staff(playerid, Ayudante)) return 1;
		if(!GetPVarInt(playerid, "AceptoAyuda")) return Error(playerid, "No estás ayudando a nadie.");

		new
		    Float:x, Float:y, Float:z, intid, vw;

		x = GetPVarFloat(playerid, "SOLICITUD_PX");
		y = GetPVarFloat(playerid, "SOLICITUD_PY");
		z = GetPVarFloat(playerid, "SOLICITUD_PZ");
		intid = GetPVarInt(playerid, "SOLICITUD_INT");
		vw = GetPVarInt(playerid, "SOLICITUD_VW");

		DeletePVar(playerid, "SOLICITUD_PX");
		DeletePVar(playerid, "SOLICITUD_PY");
		DeletePVar(playerid, "SOLICITUD_PZ");
		DeletePVar(playerid, "SOLICITUD_INT");
		DeletePVar(playerid, "SOLICITUD_VW");

		SetPlayerPos(playerid, x, y, z);
		SetPlayerInterior(playerid, intid);
		SetPlayerVirtualWorld(playerid, vw);
		CongelarEx(playerid, 3);

		DeletePVar(playerid, "AceptoAyuda");
		return 1;
	}

	CMD:rr(playerid,params[])
	{
	    if(Staff(playerid,Moderador)) return 1;
	    if(sscanf(params,"u",params[0])) return ParamsINC(playerid,"/rr [ID/NOMBRE]");
	    if(!GetPVarInt(params[0],"PideREPORTE")) return Error(playerid,"¡Ese jugador no reportó nada!");
		MensajeAdminF(C_ROJO,"[ADMINISTRACIÓN] > "#CBLANCO"%s rechazó el reporte de %s",Ayudante,NombreJugador_(playerid),NombreJugador_(params[0]));
		MensajeF(params[0],C_INFO,"> "#CBLANCO"%s rechazó tu reporte.",NombreJugador_(playerid));
		DeletePVar(params[0],"PideREPORTE");
		return 1;
	}

	CMD:destrellas(playerid,params[])
	{
	    if(Staff(playerid,Mod.Superior)) return 1;
	    if(sscanf(params,"ui",params[0],params[1])) return ParamsINC(playerid,"/destrellas [ID/NOMBRE] [ESTRELLAS]");
		if(!IsPlayerConnected(params[0])) return Error(playerid,"¡Jugador desconectado!");
		InfoJugador[params[0]][jEstrellas] += params[1];
		MensajeAdminF(C_ROJO,"[ADMINISTRACIÓN] > "#CBLANCO"%s le dió a %s "#CVERDE"%d "#CBLANCO"estrellas.",Colaborador,NombreJugador_(playerid),NombreJugador_(params[0]),params[1]);
		MensajeF(params[0],C_VERDE,"%s "#CBLANCO"te dió "#CINFO"%d "#CBLANCO"estrellas de rol.",NombreJugador_(playerid),params[1]);
		return 1;
	}

	CMD:sestrellas(playerid,params[])
	{
	    if(Staff(playerid,Mod.Superior)) return 1;
	    if(sscanf(params,"ui",params[0],params[1])) return ParamsINC(playerid,"/sestrellas [ID/NOMBRE] [ESTRELLAS]");
		if(!IsPlayerConnected(params[0])) return Error(playerid,"¡Jugador desconectado!");
		InfoJugador[params[0]][jEstrellas] -= params[1];
		MensajeAdminF(C_ROJO,"[ADMINISTRACIÓN] > "#CBLANCO"%s le quitó a %s "#CAZUL2"%d "#CBLANCO"estrellas.",Colaborador,NombreJugador_(playerid),NombreJugador_(params[0]),params[1]);
		MensajeF(params[0],C_VERDE,"%s "#CBLANCO"te quitó "#CINFO"%d "#CBLANCO"estrellas de rol.",NombreJugador_(playerid),params[1]);
		return 1;
	}

	CMD:miembros(playerid,params[])
	{
		if(isnull(params)) return ParamsINC(playerid,"/miembros <familia/faccion>");
  		new
		  	Str2[MAX_PLAYER_NAME + 8],
		  	Str[sizeof(Str2)*20],
		  	Count,
			FAMPJ;

		if(!strcmp(params,"familia",true))
		{
			if(!InfoJugador[playerid][jLiderFam] && !InfoJugador[playerid][jMiembroFam]) return Error(playerid,"¡No perteneces a una familia!");
		    if(InfoJugador[playerid][jMiembroFam]) FAMPJ = InfoJugador[playerid][jMiembroFam];
		    else FAMPJ = InfoJugador[playerid][jLiderFam];
		    if(!FAMPJ) return Error(playerid,"¡No perteneces a una familia!");
		    strcat(Str,""#CBLANCO"");
			foreach(Player,i)
			{
		        if(InfoJugador[i][jMiembroFam] == FAMPJ)
		        {
					A_Format(Str2,">> %s (RANGO: %d)\n",NombreJugador_(i),InfoJugador[i][jRangoFam]);
					strcat(Str,Str2);
					Count++;
					continue;
				}
				if(InfoJugador[i][jLiderFam] == FAMPJ)
				{
					Count++;
					A_Format(Str2,">> %s (LIDER)\n",NombreJugador_(i));
					strcat(Str,Str2);
					continue;
				}
			}
			A_Format(Str2,""#CNARANJA"Conectados:"#CBLANCO" %d",Count);
			Dialog(playerid,dError,DIALOG_STYLE_MSGBOX,Str2,Str,"Cerrar","");
			return 1;
		}
		else if(!strcmp(params,"faccion",true))
		{
			if(!InfoJugador[playerid][jLider] && !InfoJugador[playerid][jMiembro]) return Error(playerid,"¡No perteneces a una facción!");
		    if(InfoJugador[playerid][jMiembro]) FAMPJ = InfoJugador[playerid][jMiembro];
		    else FAMPJ = InfoJugador[playerid][jLider];
		    if(!FAMPJ) return Error(playerid,"¡No perteneces a una facción!");
		    strcat(Str,""#CBLANCO"");
			foreach(Player,i)
			{
		        if(InfoJugador[i][jMiembro] == FAMPJ)
		        {
					A_Format(Str2,">> %s (RANGO: %d)\n",NombreJugador_(i),InfoJugador[i][jRango]);
					strcat(Str,Str2);
					Count++;
					continue;
				}
				if(InfoJugador[i][jLider] == FAMPJ)
				{
					Count++;
					A_Format(Str2,">> %s (LIDER)\n",NombreJugador_(i));
					strcat(Str,Str2);
					continue;
				}
			}
			A_Format(Str2,""#CNARANJA"Conectados:"#CBLANCO" %d",Count);
			Dialog(playerid,dError,DIALOG_STYLE_MSGBOX,Str2,Str,"Cerrar","");
			return 1;
		}
		return ParamsINC(playerid,"/miembros <familia/faccion>");
	}

	CMD:vermiembros(playerid,params[])
	{
		if(Staff(playerid,Moderador)) return 1;

  		new
  		    FamorFac[20],
  		    F_ID,
		  	Str[24*15],
		  	Str2[MAX_PLAYER_NAME + 20],
		  	Count;

		if(sscanf(params, "p< >s[20]i", FamorFac, F_ID)) return ParamsINC(playerid, "/vermiembros [familia/faccion] [ID de fam/fac]");

		if(!strcmp(FamorFac,"familia",true))
		{
		    strcat(Str,""#CBLANCO"");
			foreach(Player,i)
			{
		        if(InfoJugador[i][jMiembroFam] == F_ID)
		        {
					A_Format(Str2,">> %s (RANGO: %d)\n",NombreJugador_(i),InfoJugador[i][jRangoFam]);
					strcat(Str,Str2);
					Count++;
					continue;
				}
				if(InfoJugador[i][jLiderFam] == F_ID)
				{
					Count++;
					A_Format(Str2,">> %s (LIDER)\n",NombreJugador_(i));
					strcat(Str,Str2);
					continue;
				}
			}
			A_Format(Str2,""#CNARANJA"Miembros conectados:"#CBLANCO" %d",Count);
			Dialog(playerid,dError,DIALOG_STYLE_MSGBOX,Str2,Str,"Cerrar","");
			return 1;
		}
		else if(!strcmp(FamorFac,"faccion",true))
		{
		    strcat(Str,""#CBLANCO"");
			foreach(Player,i)
			{
		        if(InfoJugador[i][jMiembro] == F_ID)
		        {
					A_Format(Str2,">> %s (RANGO: %d)\n",NombreJugador_(i),InfoJugador[i][jRango]);
					strcat(Str,Str2);
					Count++;
					continue;
				}
				if(InfoJugador[i][jLider] == F_ID)
				{
					Count++;
					A_Format(Str2,">> %s (LIDER)\n",NombreJugador_(i));
					strcat(Str,Str2);
					continue;
				}
			}
			A_Format(Str2,""#CNARANJA"Miembros conectados:"#CBLANCO" %d",Count);
			Dialog(playerid,dError,DIALOG_STYLE_MSGBOX,Str2,Str,"Cerrar","");
			return 1;
		}
		return ParamsINC(playerid,"/miembros [familia/faccion] [ID de fam/fac]");
	}

	CMD:vercajasfuertes(playerid, params[])
	{
		if(Staff(playerid,Administrador)) return 1;

		new
		    Str[20],
		    Str2[sizeof(Str)*MAX_FACCIONES];

		Loop(i, MAX_FACCIONES, 1)
		{
		    A_Format(Str, "%s [$%d]\n", NombreFaccion(i), InfoFaccion[i][fDinero] );
		    strcat(Str2, Str);
		}
		Dialog(playerid, dError, DIALOG_STYLE_MSGBOX, "Cajas fuertes:", Str2, "Cerrar", "");
		return 1;
	}

	CMD:cajafuertecasa(playerid, params[])
	{
		if(Staff(playerid,Administrador)) return 1;

		new
			house = strval(params);

		if(0 < house < MAX_CASAS)
			MensajeF(playerid, -1, "La casa "#CINFO"%s(%d) "#CBLANCO"tiene: "#CVERDE"$%d", InfoCasa[house][cNombre], house, InfoCasa[house][cDinero]);

		else
		    return Error(playerid, "ID de casa inválido.");

		return 1;
	}

	CMD:vendar(playerid,params[])
	{
	    NeedObject(playerid)<INV_VENDA>;
	    if(sscanf(params,"u",params[0])) return ParamsINC(playerid,"/vendar [ID/NOMBRE]");
		if(!IsPlayerConnected(params[0])) return Error(playerid,"¡Jugador desconectado!");
	    if(!GetPVarInt(params[0],"ESTA_ATADO")) return Error(playerid,"Antes de vendarlo, ¡debes atarlo!");
		if(GetPVarInt(params[0],"ESTA_VENDADO")) return Error(playerid,"¡Ese jugador ya está vendado!");
		if(!ProxDetectorS(3,playerid,params[0])) return Error(playerid,"¡Estas muy lejos de ese jugador!");
		TextDrawShowForPlayer(params[0],Vendado);
		GameTextForPlayer(params[0],"~n~~n~~n~~r~vendado",25000,3);
		SetPVarInt(params[0],"ESTA_VENDADO",1);
		RemoveObject(playerid);
		new Str[80];
		A_Format(Str,"saca una venda, y se la ata a %s",NombreJugador(params[0]));
		AutoRol(playerid,Str);
		Mensaje(playerid,-1,"para sacarle la venda, usa "#CINFO"(/desvendar)");
		return 1;
	}

	CMD:desvendar(playerid,params[])
	{
	    if(sscanf(params,"u",params[0])) return ParamsINC(playerid,"/desvendar [ID/NOMBRE]");
		if(!IsPlayerConnected(params[0])) return Error(playerid,"¡Jugador desconectado!");
	    if(!GetPVarInt(params[0],"ESTA_VENDADO")) return Error(playerid,"¡Ese jugador no está vendado!");
		if(GetPVarInt(playerid,"ESTA_ATADO")) return Error(playerid,"¡No puedes sacarle la venda, estas atado!");
		if(!ProxDetectorS(3,playerid,params[0])) return Error(playerid,"¡Estas muy lejos de ese jugador!");
		DeletePVar(params[0],"ESTA_VENDADO");
		TextDrawHideForPlayer(params[0],Vendado);
		GameTextForPlayer(params[0],"~g~desvendado",3000,3);
		new Str[50];
		A_Format(Str,"le saca la venda a %s",NombreJugador(params[0]));
		AutoRol(playerid,Str);
		return 1;
	}


	CMD:desatar(playerid,params[])
	{
	    if(sscanf(params,"u",params[0])) return ParamsINC(playerid,"/desatar [ID/NOMBRE]");
		if(!IsPlayerConnected(params[0])) return Error(playerid,"¡Jugador desconectado!");
	    if(!GetPVarInt(params[0],"ESTA_ATADO")) return Error(playerid,"¡Ese jugador no está atado!");
		if(GetPVarInt(playerid,"ESTA_ATADO")) return Error(playerid,"¡No puedes sacarle la soga, estas atado!");
		if(!ProxDetectorS(3,playerid,params[0])) return Error(playerid,"¡Estas muy lejos de ese jugador!");
		DeletePVar(params[0],"ESTA_ATADO");
		GameTextForPlayer(params[0],"~g~desatado",3000,3);
		new Str[30];
		A_Format(Str,"desata a %s",NombreJugador(params[0]));
		AutoRol(playerid,Str);
		return 1;
	}

	CMD:dinamita(playerid, params[])
	{
	    NeedObject(playerid)<INV_DINAMITA>;
		if(IsPlayerInAnyVehicle(playerid)) return Error(playerid,"¡No puedes poner dinamita estando en un vehículo!");

	    RemoveObject(playerid);

	    new
	        Float:x, Float:y, Float:z,
			bool: EnBanco;

		GetPlayerPos(playerid, x, y, z);
		GetPosInFrontOfPlayer(playerid, x, y, 0.6);
	    OBJ_Dinamita[playerid] = CreateDynamicObject(ID_OBJDINAMITA, x, y, z-0.8, 0, 0, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid) );
		if(IsPlayerInRangeOfPoint(playerid, 10.0, 2160.5000000,1601.9000244,1001.0000000 ))
		{
		    EnBanco = true;
		}
		SetTimerEx("DetonarDinamita", 5000, false, "ifffi", OBJ_Dinamita[playerid], x, y, z, EnBanco);
		AutoRol(playerid,"coloca dinamita en el suelo");
		ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);
		Mensaje(playerid, -1, "La dinamita explotará en 5 segundos.");
		return 1;
	}

	CMD:plantar(playerid,params[])
	{
		if(!strcmp(params,"bomba",true))
		{
			if(!InfoJugador[playerid][jBomba]) return Error(playerid,"¡No tienes una bomba!");
			if(IsValidDynamicObject(OBJ_Bomba[playerid])) return Error(playerid,"¡La bomba ya está plantada! Para detonarla, "#CINFO"(/detonar bomba)");
			if(IsPlayerInAnyVehicle(playerid)) return Error(playerid,"¡No puedes plantar una bomba estando en un vehículo!");
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);
			SetTimerEx("PlantandoBomba",2300,false,"i",playerid);
			new Float: x, Float: y, Float: z;
			GetPlayerPos(playerid, x, y, z);
			GetPosInFrontOfPlayer(playerid, x, y, 0.6);
			OBJ_Bomba[playerid] = (OBJ_Bomba[playerid] == INVALID_OBJECT_ID) ? CreateDynamicObject(1252, x, y, z-0.5, 0,0,0,0) : INVALID_OBJECT_ID;
			return 1;
		}
		else if(!strcmp(params,"marihuana",true))
		{
			NeedObject(playerid)<INV_SEMILLAMARI>;

			new
				suc = INVALID_HOUSE_ID,
				name_len = strlen(pName(playerid));

			foreach(Planta, i)
			{
			    if(!strcmp(InfoPlanta[i][plantaOwner], pName(playerid)) && (name_len == strlen(InfoPlanta[i][plantaOwner])))
			    {
       				return Error(playerid, "~r~Ya tienes una planta de marihuana.");
				}
			}
			foreach(Casas, i)
			{
			    if(EsDuenoCasa(playerid, i))
			    {
			        new
			            Float: Dist = GetPlayerDistanceFromPoint(playerid, InfoCasa[i][cEntrada_x], InfoCasa[i][cEntrada_y], InfoCasa[i][cEntrada_z]);

					if(Dist < 30.0)
					{
					    suc = i;
					    break;
					}
				}
			}
			if(suc == INVALID_HOUSE_ID)
   			{
		   		Mensaje(playerid, -1, "Para plantar marihuana, deberás tener una casa.");
		   		Mensaje(playerid, -1, "El comando, se debe colocar en un radio de 30 metros de la puerta de tu casa.");
				return 1;
			}
			new
				Float:x, Float:y, Float:z;

			GetPlayerPos(playerid, x, y, z);
			GetPosInFrontOfPlayer(playerid, x, y, 0.7);

			new
				ID_Planta = CrearPlantaMarihuana(suc, x, y, z, pName(playerid) );

			if(ID_Planta == -1)
			{
			    Mensaje(playerid, -1, "¡No se pueden crear más plantas! El servidor excedió el máximo de plantaciones.");
				return 1;
			}

			RemoveObject(playerid);
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0, 0);
			Mensaje(playerid, -1, "¡Recuerda mantener cuidada tu planta! Se recomienda "#CINFO"/regar planta "#CBLANCO"cada un dia aproximadamente, para evitar que esta se seque y hacerla crecer.");
			return 1;
		}
		return ParamsINC(playerid,"/plantar <ITEM>");
	}

	CMD:regar(playerid, params[])
	{
 		if(!strcmp(params,"planta",true))
		{
			new
				i = PlantaMasCercana(playerid);

			if(i == -1) return Error(playerid, "Debes estar cerca de una planta.");
			if(InfoPlanta[i][plantaTipo] != PLANTA_MARIHUANA) return Error(playerid, "~r~Sólo puedes regar plantas de marihuana.");
   			if(!strcmp(InfoPlanta[i][plantaOwner], pName(playerid)))
 			{
				AutoRol(playerid, "riega una planta de marihuana.");

				new
				    Float:x, Float:y, Float:z;

				GetPlayerPos(playerid, x, y, z);
				SetPlayerFacingAngle(playerid, AnglePoint(x, y, InfoPlanta[i][plantaX], InfoPlanta[i][plantaY]));

				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0, 0);

				RegarPlanta(i);
				return 1;
			}
			return Error(playerid, "Sólo el que plantó puede regarla.");
		}
		return ParamsINC(playerid,"/regar planta");
	}

	CMD:quemar(playerid, params[])
	{
		if(!strcmp(params,"planta",true))
		{
		    NeedObject(playerid)<INV_ENCENDEDOR>;

		    new
		        objectdata = GetObjectData(playerid);

			if(objectdata < 8)
			    return Error(playerid, "El ~b~encendedor ~w~no tiene gas suficiente.");

			new
				i = PlantaMasCercana(playerid);

			if(i == -1) return Error(playerid, "Debes estar cerca de una planta para quemarla.");
   			if(!strcmp(InfoPlanta[i][plantaOwner], pName(playerid)) && (strlen(pName(playerid)) == strlen(InfoPlanta[i][plantaOwner])))
 			{
 			    CurrentObjectData[playerid] -= 8;

 			    if(InfoPlanta[i][plantaTipo] == PLANTA_MARIHUANA)
					QuemarPlantaMarihuana(i);

				return 1;
			}
			return Error(playerid, "Sólo el que plantó puede quemarla.");
		}
		return ParamsINC(playerid, "/quemar [planta]");
	}

stock QuemarPlantaMarihuana(i)
{
	new
	    ID = CreateDynamicObject(18690, InfoPlanta[i][plantaX], InfoPlanta[i][plantaY], InfoPlanta[i][plantaZ]-2.5, 0.0, 0.0, 0.0);

	SetDynamicObjectMaterial(InfoPlanta[i][plantaObjID], 0, ID_OBJPLANTA, "none", "none", 0xFF2A2725);

	UpdateDynamic3DTextLabelText(InfoPlanta[i][plantaLabelID], C_ROJO, "Planta quemandose");
	PlantaQuemandose[i] = true;

	SetTimerEx("TerminarQuemarPlanta", InfoPlanta[i][plantaGramos] * 5000, false, "ii", ID, i);
	return 1;
}

/*

*/

CALLBACK: TerminarQuemarPlanta(objectid, i)
{
	PlantaQuemandose[i] = false;
	BorrarPlantaMarihuana(i);
	DestroyDynamicObject(objectid);
	return 1;
}

	CMD:guardar(playerid, params[])
	{
		if(Esposado(playerid))
		{
		    return Error(playerid, "~r~No puedes hacer esto, estás esposado.");
		}

		if (CurrentObject[playerid] != -1)
		{
		    new
		        slot;

		    if(sscanf(params, "i", slot))
		    {
		        new
		            response = GuardarObjetoInventario(playerid, GetObject(playerid), -1, GetObjectData(playerid));

			    if (response == INV_ERR_BIG)
			        return Error(playerid, "El ~r~objeto ~w~es demaciado grande.");

			    if (response == INV_ERR_NO_SIZE)
			        return Error(playerid, "No tienes un lugar ~g~vacío.");
			}
			else
			{
			    if(1 <= slot <= MAX_ITEMS_INVENTARIO)
			    {
			        if(slot > GetInvItemPlayer(playerid))
			            return Error(playerid, "Ese lugar aún lo tienes bloqueado.");

			        slot--;

				    if (GuardarObjetoInventario(playerid, GetObject(playerid), slot, GetObjectData(playerid)) == INV_ERR_USED)
				        return Error(playerid, "Ese espacio ya está ocupado.");
				}
				else
				{
				    return Error(playerid, "El lugar especificado, está fuera de los límites del inventario.");
				}
			}
		}
		return 1;
	}

	CMD:borrar(playerid, params[])
	{
	    new
	        obj = GetObject(playerid);

		if(obj == -1)
		    return Error(playerid, "No tienes un objeto en la mano.");

		new
		    str[150];

		A_Format(str, ""#CBLANCO"¿Estás seguro que quieres borrar tu "#CAMARILLO"%s"#CBLANCO"?", ObjectData[obj][invName]);
		Dialog(playerid, dBorrarObjeto, DIALOG_STYLE_MSGBOX, ""#CROJO"ATENCIÓN", str, "Borrar", "Cancelar");
		return 1;
	}


	CMD:sacar(playerid, params[])
	{
		if(!strcmp(params, "cigarrillo", true))
		{
		    NeedObject(playerid)<INV_CAJACIGARRILLO>;

		    new
		        dat = GetObjectData(playerid);

			if (!dat)
			    return Error(playerid, "~r~No tienes más cigarrillos en la caja.");

		    new
		        response = GuardarObjetoInventario(playerid, GetObject(playerid), -1, dat-1);

			if (response != 0)
			    return Error(playerid, "No se pudo guardar la caja en el inventario.");

			GiveObject(playerid, GOAT(INV_CIGARRILLO), 8);
			Mensaje(playerid, -1, "Sacaste un cigarrillo de la caja, usa "#CINFO"/encender cigarrillo.");
		    return 1;
		}

		if(GetObject(playerid) != -1)
	 		return Error(playerid, "Debes guardar el objeto que tienes en la mano.");

		new
		    slot;

		if(sscanf(params, "i", slot)) return ParamsINC(playerid, "/sacar [Número de lugar]");

		if(slot < 1 || slot > GetInvItemPlayer(playerid))
			return Error(playerid,"El lugar especificado, está fuera de los límites del inventario.");

		slot--;

		new
			item = ItemInventario[playerid][slot][invObject];

		if(item == 0)
			return Error(playerid, "En ese espacio no tiene un objeto.");

	    OnPlayerSelectInvObject(playerid, item, slot);
	    return 1;
	}

	CMD:dar(playerid, params[])
	{
		if(sscanf(params, "u", params[0])) return ParamsINC(playerid, "/dar [ID/Nombre] "#CROJO"(Para pagar usa /pagar)");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "El jugador está desconectado.");
	    if(!ProxDetectorS(4.0,playerid,params[0])) return Error(playerid, "¡Muy lejos de ese jugador!");

		if(GetObject(playerid) == -1)
		    return Error(playerid, "No tienes un objeto en la mano.");

		if(GetObject(params[0]) != -1)
		    return Error(playerid, "El jugador tiene un objeto en la mano.");

		PlayerWatchPlayer(params[0], playerid);
		PlayerWatchPlayer(playerid, params[0]);

		MensajeF(playerid, -1, "Le diste a "#CINFO"%s "#CBLANCO"un/a "#CVERDE"%s.", NombreJugador(params[0]), GetObjectName( GetObject(playerid), GetObjectData(playerid) ) );
		MensajeF(params[0], C_INFO, "%s "#CBLANCO"te dió un/a "#CVERDE"%s.", NombreJugador(playerid), GetObjectName( GetObject(playerid), GetObjectData(playerid) ) );

		GiveObject(params[0], GetObject(playerid), GetObjectData(playerid));
		RemoveObject(playerid);
		return 1;
	}

	CMD:asignarllave(playerid, params[])
	{
	    new
	        jNombre,
	        Cant;

	    if(sscanf(params, "ui", jNombre, Cant))
			return ParamsINC(playerid,"/asignarllave [ID] "#CROJO"[Nº LLAVE]");

		if(jNombre == INVALID_PLAYER_ID)
		    return Error(playerid, "¡Jugador desconectado!");

		if(jNombre == playerid)
		    return Error(playerid, "No puedes darte algo a tí mismo.");

	    if(!ProxDetectorS(4.0,playerid,jNombre)) return Error(playerid, "¡Muy lejos de ese jugador!");

		if(Cant < 1)
			return Error(playerid,"¡Debe ser un número positivo!");

		if(InfoJugador[playerid][jLider] == 0)
			return Error(playerid,"¡Este comando se utiliza únicamente para los lideres!");

		new
		    Leader = InfoJugador[playerid][jLider],
			ClientFac = ID_Faccion(jNombre);

		if(Leader != ClientFac)
			return Error(playerid, "El jugador no pertenece a tu facción.");

		if(!Bit_Get(Llave_veh[playerid], Cant))
			return Error(playerid,"¡No tienes esa llave!");

		Bit_Set(Llave_veh[jNombre], Cant, true);

		new
			Rol[130];
		A_Format(Rol,"le da a %s una copia de la llave nº %d",NombreJugador(jNombre),Cant);
		AutoRol(playerid, Rol);
		GuardarLlaves(jNombre);
		return 1;
  	}

	CMD:recargar(playerid, params[])
	{
	    if (!Cargadores[playerid])
 			return 1;

		new
			Animdata[2][25],
			weaponid = ArmaActual[playerid];

		if (!ArmaConCargador(weaponid))
 			return SendClientMessage(playerid, -1, "Este arma no tiene cargadores.");

		if(INV_GetPlayerAmmo(playerid) >= GetWeaponAmmo(weaponid))
		    return Error(playerid, "Ya tienes un cargador completo, no hay necesidad de ~r~/recargar");

		switch (weaponid)
		{
			case 22://9MM
			{
	    		Animdata[0] = "COLT45";
		        if( GetPlayerSpecialAction(playerid) & SPECIAL_ACTION_DUCK )
		        {
					Animdata[1] = "colt45_crouchreload";
				}
				else
				{
					Animdata[1] = "colt45_reload";
				}
			}
			case 23://SP
			{
	    		Animdata[0] = "SILENCED";
		        if( GetPlayerSpecialAction(playerid) & SPECIAL_ACTION_DUCK )
		        {
					Animdata[1] = "CrouchReload";
				}
				else
				{
					Animdata[1] = "Silence_reload";
				}
			}
			case 24://DK
		    {
	    		Animdata[0] = "PYTHON";
		        if( GetPlayerSpecialAction(playerid) & SPECIAL_ACTION_DUCK )
		        {
					Animdata[1] = "python_crouchreload";
				}
				else
				{
					Animdata[1] = "python_reload";
				}
			}
			case 25, 33, 34: //Shotgun, rifle
			{
	    		Animdata[0] = "BUDDY";
		        if( GetPlayerSpecialAction(playerid) & SPECIAL_ACTION_DUCK )
		        {
					Animdata[1] = "buddy_crouchreload";
				}
				else
				{
					Animdata[1] = "buddy_reload";
				}
			}
			case 26: //Sawnoff
			{
	    		Animdata[0] = "COLT45";
				Animdata[1] = "sawnoff_reload";
			}
			case 27: //Shotgun
			{
	    		Animdata[0] = "BUDDY";
		        if( GetPlayerSpecialAction(playerid) & SPECIAL_ACTION_DUCK )
		        {
					Animdata[1] = "buddy_crouchreload";
				}
				else
				{
					Animdata[1] = "buddy_reload";
				}
			}
			case 28, 29: //UZI & MP5
			{
	    		Animdata[0] = "UZI";
		        if( GetPlayerSpecialAction(playerid) & SPECIAL_ACTION_DUCK )
		        {
					Animdata[1] = "UZI_crouchreload";
				}
				else
				{
					Animdata[1] = "UZI_reload";
				}
			}
			case 30, 31: //AK & M4
			{
	    		Animdata[0] = "RIFLE";

		        if( GetPlayerSpecialAction(playerid) & SPECIAL_ACTION_DUCK )
		        {
					Animdata[1] = "RIFLE_crouchload";
				}
				else
				{
					Animdata[1] = "RIFLE_load";
				}
			}
			case 32: //TEC
			{
	    		Animdata[0] = "TEC";
		        if( GetPlayerSpecialAction(playerid) & SPECIAL_ACTION_DUCK )
		        {
					Animdata[1] = "TEC_crouchreload";
				}
				else
				{
					Animdata[1] = "TEC_reload";
				}
			}
			default:
			    return 1;
		}

		ApplyAnimation(playerid, Animdata[0], Animdata[1], 4.0, 0, 0, 0, 0, 0, true);

		Cargadores[playerid]--;

		InvLoop(i,playerid)
		{
		    new
		        item2 = ItemInventario[playerid][i][invObject];

			if(ObjectData[item2][invType] == INV_CARGADOR)
			{
				if(ObjectData[item2][invData] == weaponid)
				{
				    ItemInventario[playerid][i][invObject] = 0;
				    break;
				}
			}
		}

		new
			ammo = GetWeaponAmmo(weaponid);

		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid, weaponid, ammo);
		ActualizarTDCargador(playerid);
		INV_Ammo [playerid] = ammo;
		return 1;
	}

	CMD:inventario(playerid, params[])
	{
		MostrarInventario(playerid);
		return 1;
	}

	CMD:verinv(playerid, params[])
	{
	    if(Staff(playerid, Moderador)) return 1;
	    if(sscanf(params, "u", params[0])) return ParamsINC(playerid, "/verinv [ID/Nombre]");
	    if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "Jugador desconectado.");
	    MostrarInventario(params[0], playerid, false);
	    return 1;
	}

	CMD:vermal(playerid, params[])
	{
	    if(Staff(playerid, Dueno)) return 1;

		if(sscanf(params, "i", params[0]))
		    return ParamsINC(playerid, "/vermal [Vehículo]");

		if(!IsValidVehicle(params[0])) return Error(playerid, "Vehículo inválido");

		MostrarMaletero(playerid, params[0]);
		return 1;
	}

	CMD:verarm(playerid, params[])
	{
	    if(Staff(playerid, Dueno)) return 1;

		if(sscanf(params, "i", params[0]))
		    return ParamsINC(playerid, "/verarm [Casa]");

		if(!IsValidHouse(params[0])) return Error(playerid, "Casa inválida");

		MostrarArmarioCasa(playerid, params[0]);
		return 1;
	}

	CMD:tirar(playerid,params[])
	{
		if(GetObject(playerid) == -1)
		    return Error(playerid, "No tienes un objeto en la mano.");

		if(EstaEnFabricaBigFoot(playerid))
		{
			new
			    hi = HornoMasCercano(playerid);

			if(hi == -1)
			    goto start_general;

			new
			    Typee = ObjectData[GetObject(playerid)][invType];

			if(Typee == INV_MINERAL && ObjectData[GetObject(playerid)][invData] == M_TYPE_CARBON)
			{
				InfoHornoBigFoot[hi][hornoCarbon] ++;
				RemoveObject(playerid);
				ApplyAnimation(playerid, "CARRY", "putdwn", 4.0, 0, 1, 1, 0, 0);

			    new
			        Float:x, Float:y, Float:z;

				GetPlayerPos(playerid, x, y, z);
				SetPlayerFacingAngle(playerid, AnglePoint(x, y, HornosBigFoot[hi][0], HornosBigFoot[hi][1]));
				ActualizarLabelHornoBigFoot(hi);
				return 1;
			}
			if(Typee == INV_BIDONQUEROSEN)
			{
				InfoHornoBigFoot[hi][hornoQuerosen] += float(GetObjectData(playerid));
				RemoveObject(playerid);
				GiveObject(playerid, GOAT(INV_BIDON));
				ApplyAnimation(playerid, "CARRY", "putdwn", 4.0, 0, 1, 1, 0, 0);

			    new
			        Float:x, Float:y, Float:z;

				GetPlayerPos(playerid, x, y, z);
				SetPlayerFacingAngle(playerid, AnglePoint(x, y, HornosBigFoot[hi][0], HornosBigFoot[hi][1]));
				ActualizarLabelHornoBigFoot(hi);
				return 1;
			}
			else if(Typee == INV_HOJACOCA)
			{
				InfoHornoBigFoot[hi][hornoCantidad] += float(GetObjectData(playerid));
				RemoveObject(playerid);

				ApplyAnimation(playerid, "CARRY", "putdwn", 4.0, 0, 1, 1, 0, 0);

			    new
			        Float:x, Float:y, Float:z;

				GetPlayerPos(playerid, x, y, z);
				SetPlayerFacingAngle(playerid, AnglePoint(x, y, HornosBigFoot[hi][0], HornosBigFoot[hi][1]));
				ActualizarLabelHornoBigFoot(hi);
				return 1;
			}
			return Error(playerid, "No puedes meter este objeto al horno.");
		}
		if(EstaEnFabricaBlackAso(playerid))
		{
			new
			    hi = HornoMasCercano(playerid, 1);

			if(hi == -1)
			    goto start_general;

			new
			    Typee = ObjectData[GetObject(playerid)][invType];

			if(Typee == INV_MINERAL && ObjectData[GetObject(playerid)][invData] == M_TYPE_CARBON)
			{
				InfoHornoBlackAso[hi][hornoCarbon] ++;
				RemoveObject(playerid);
				ApplyAnimation(playerid, "CARRY", "putdwn", 4.0, 0, 1, 1, 0, 0);

			    new
			        Float:x, Float:y, Float:z;

				GetPlayerPos(playerid, x, y, z);
				SetPlayerFacingAngle(playerid, AnglePoint(x, y, HornosBlackAso[hi][0], HornosBlackAso[hi][1]));
				ActualizarLabelHornoBlackAso(hi);
				return 1;
			}
			if(Typee == INV_MINERAL && ObjectData[GetObject(playerid)][invData] == M_TYPE_HIERRO)
			{
				InfoHornoBlackAso[hi][hornoMetal] ++;
				RemoveObject(playerid);
				ApplyAnimation(playerid, "CARRY", "putdwn", 4.0, 0, 1, 1, 0, 0);

			    new
			        Float:x, Float:y, Float:z;

				GetPlayerPos(playerid, x, y, z);
				SetPlayerFacingAngle(playerid, AnglePoint(x, y, HornosBlackAso[hi][0], HornosBlackAso[hi][1]));
				ActualizarLabelHornoBlackAso(hi);
				return 1;
			}
			return Error(playerid, "No puedes meter este objeto al horno.");
		}

		start_general:

	    new
	        Float:x, Float:y, Float:z,
			type = ObjectData[GetObject(playerid)][invType];

		GetPlayerPos(playerid, x, y, z);
		GetPosInFrontOfPlayer(playerid, x, y, 1.0);

		if(type == INV_PORRO || type == INV_PORROON)
		{
		    RemoveObject(playerid);
		    AutoRol(playerid, "tira un porro al suelo, y seguidamente lo pisa.");
		    return 1;
		}
		else if(type == INV_CIGARRILLO || type == INV_CIGARRILLOON)
		{
		    RemoveObject(playerid);
		    AutoRol(playerid, "tira un cigarrillo al suelo, y seguidamente lo pisa.");
		    return 1;
		}
		else if(type == INV_ARMA)
		{
			z -= GetObjectTypeDif(type);

			if(!GetObjectCorrectZ(x, y, z))
			    return Error(playerid, "~r~No puedes apilar más. ~n~~w~Deja el objeto en otro lugar");

			new
				response = CrearObjetoTirado(GetObject(playerid), GetObjectData(playerid), x, y, z, -97.800048, -93.399887, -5.000010, GetPlayerVirtualWorld(playerid));

			if(response == -2)
			    return Error(playerid, "Se produció un error. ¡Intente más tarde!");

		    new
		        Str[80];

			A_Format(Str, "tira una %s al suelo.", ObjectData[GetObject(playerid)][invName]);
			AutoRol(playerid, Str);
			RemoveObject(playerid);
		}
		else if(type == INV_CAJACARGADOR || type == INV_CAJAARMA || type == INV_PAQUETECOCA || type == INV_PAQUETEMARI || type == INV_CAJACHALECO || type == INV_CAJAESPOSA || type == INV_CHALECO || type == INV_CHALECOPOLICIA)  // dif entre cajas (armas) = 0.6691 | Dif jugador/arma 0.5996
		{
		    new
		        Float: FacingAngle;

			GetPlayerFacingAngle(playerid, FacingAngle);

			FacingAngle -= 180.0;

			z -= GetObjectTypeDif(type);

			if(!GetObjectCorrectZ(x, y, z))
			    return Error(playerid, "~r~No puedes apilar más. ~n~~w~Deja el objeto en otro lugar");

			ApplyAnimation(playerid, "CARRY", "putdwn", 4.0, 0, 1, 1, 0, 0);

			new
				response;

			if(type == INV_CHALECO || type == INV_CHALECOPOLICIA)
			{
				response = CrearObjetoTirado(GetObject(playerid), GetObjectData(playerid), x, y, z, 0.0, -90.0, FacingAngle, GetPlayerVirtualWorld(playerid));
			}
			else
			{
				response = CrearObjetoTirado(GetObject(playerid), GetObjectData(playerid), x, y, z, 0.0, 0.0, FacingAngle, GetPlayerVirtualWorld(playerid));
			}
		    new
		        Str[80];

			A_Format(Str, "tira un %s al suelo.", ObjectData[GetObject(playerid)][invName]);
			AutoRol(playerid, Str);
			RemoveObject(playerid);
			if(response == -2)
			    return Error(playerid, "Se produció un error. ¡Intente más tarde!");
		}
		else
		    return Error(playerid, "No puedes tirar este objeto.");
		return 1;
	}

	CMD:ultimaconexion(playerid, params[])
	{
	    if(Staff(playerid, Moderador))
	        return 1;

		if(isnull(params))
		    return ParamsINC(playerid, "/ultimaconexion [Nombre_Apellido]");

		foreach(Player, i)
		{
		    if (!strcmp(pName(i), params, true))
		    {
		        return MensajeF(playerid, C_INFO, "%s "#CBLANCO"está conectado actualmente.", params);
			}
		}

		new
			querystr [80];

		opmysql_format(querystr, sizeof (querystr), "SELECT `UltimaConexion` FROM `Usuarios` WHERE `Nombre` = '%e'", params);
		opmysql_tquery( querystr, "OnMemberDataReceived", "isi", playerid, params, 1);
		return 1;
	}

	CMD:sethn(playerid, params[])
	{
		if(Staff(playerid, Dueno))
			return 1;

		if(isnull(params))
			return ParamsINC(playerid, "/sethn [nombre]");
		new
			str[150];
		A_Format(str, "hostname %s", params);
		SendRconCommand(str);
		return 1;
	}

	CMD:setpw(playerid, params[])
	{
		if(Staff(playerid, Dueno))
			return 1;

		if(isnull(params))
			return ParamsINC(playerid, "/setpw [contraseña] | /setpw 0 para quitarla");
		new
			str[150];
		A_Format(str, "password %s", params);
		SendRconCommand(str);
		return 1;
	}

	CMD:recojer(playerid, params[])
	{
	    return Mensaje(playerid, -1, "Quizá quiso decir "#CINFO"/reco"#CBLANCO"g"#CINFO"er");
	}

	CMD:destilar(playerid, params[])
	{
	    new
	        i = DestiladorMasCercano(playerid);

		if(i == -1 && GetPlayerVirtualWorld(playerid) != VW_BIGFOOT)
		    return Error(playerid, "No estás en un destilador.");

		NeedObject(playerid)<INV_BIDONCOMBUSTIBLE>;

		new
		    Litros = GetObjectData(playerid);

		if(!Litros)
		    return Error(playerid, "~r~No tienes más combustible en ese bidón.");

		if((InfoDestiladorBigFoot[i][destPorDestilar] + Litros) > 100)
			return Error(playerid, "~r~No entra más combustible en el destilador.");

        InfoDestiladorBigFoot[i][destPorDestilar] += Litros;
		ActualizarLabDestiladorBigFoot(i);

		RemoveObject(playerid);
		GiveObject(playerid, GOAT(INV_BIDON));
		AutoRol(playerid, "agrega combustible a un destilador.");
		return 1;
	}

	CMD:fabricar(playerid, params[])
	{
	    if(!strcmp(params, "arma", true))
	    {
	        if(EstaEnFabricaBlackAso(playerid))
	        {
		        new
		            h = HornoMasCercano(playerid, 1),
		            obj = GetObject(playerid);

				if(h == -1)
				    return Error(playerid, "No estás cerca de un horno.");

				if(InfoHornoBlackAso[h][hornoObj])
				    return Error(playerid, "Ya tiene un objeto fabricándose.");

				if(obj == -1)
				    return Error(playerid, "No tienes un molde en la mano.");

				if(ObjectData[obj][invType] == INV_MOLDEARMA)
				{
				    new
						weap = ObjectData[obj][invData];

					new
					    Obj_to_make = GetObjectAtWeapon(weap);

					InfoHornoBlackAso[h][hornoMolde] = GetObject(playerid);
					RemoveObject(playerid);
					InfoHornoBlackAso[h][hornoObj] = Obj_to_make;
					InfoHornoBlackAso[h][hornoPorHacer] = (ObjectData[obj][invSize] * 80);
					ActualizarLabelHornoBlackAso(h);
					Mensaje(playerid, -1, "Usa "#CINFO"/recoger arma "#CBLANCO"cuando se termine de fabricar.");
				    return 1;
				}
				return Error(playerid, "No tienes un molde.");
			}
			return Error(playerid, "No está en una fábrica");
		}
	    else if(!strcmp(params, "cargador", true))
	    {
	        if(EstaEnFabricaBlackAso(playerid))
	        {
		        new
		            h = HornoMasCercano(playerid, 1),
		            obj = GetObject(playerid);

				if(h == -1)
				    return Error(playerid, "No estás cerca de un horno.");

				if(InfoHornoBlackAso[h][hornoObj])
				    return Error(playerid, "Ya tiene un objeto fabricándose.");

				if(obj == -1)
				    return Error(playerid, "No tienes un molde en la mano.");

				if(ObjectData[obj][invType] == INV_MOLDEARMA)
				{
					new
						weap = ObjectData[obj][invData];

					new
						Obj_to_make = GetReloaderAtWeapon(weap);

					if(Obj_to_make == -1)
					    return Error(playerid, "Éste molde, no tiene cabidad para fabricar cargador.");

					InfoHornoBlackAso[h][hornoMolde] = GetObject(playerid);
					RemoveObject(playerid);
					InfoHornoBlackAso[h][hornoObj] = Obj_to_make;
					InfoHornoBlackAso[h][hornoPorHacer] = 40;
					InfoHornoBlackAso[h][hornoEncendido] = true;
					ActualizarLabelHornoBlackAso(h);
					Mensaje(playerid, -1, "Usa "#CINFO"/recoger cargador "#CBLANCO"cuando se termine de fabricar.");
					return 1;
				}
				return Error(playerid, "No tienes un molde.");
			}
			return Error(playerid, "No está en una fábrica");
		}
	    else if(!strcmp(params, "molde", true, 5))
	    {
	        if(EstaEnFabricaBlackAso(playerid))
	        {
	            if(InfoJugador[playerid][jLiderFam] != FabricaBlackAso[fabFamDominante])
	                return Error(playerid, "Sólo el lider tiene privilegios para hacer moldes.");

				if(strlen(params) < 7)
				    return ParamsINC(playerid, "/fabricar molde [Nombre del arma]");

		        new
					h = HornoMasCercano(playerid, 1);

				if(h == -1)
				    return Error(playerid, "No estás cerca de un horno.");

				if(InfoHornoBlackAso[h][hornoObj])
				    return Error(playerid, "Ya tiene un objeto fabricándose.");

				new
					Obj_to_make = -1,
					weap = -1;

				// Armas para fabricar
				if(!strcmp(params[6], "9mm", true))
				    weap = 22;

				else if(!strcmp(params[6], "9mm (silenciador)", true))
				    weap = 23;

				else if(!strcmp(params[6], "Desert Eagle", true))
				    weap = 24;

				else if(!strcmp(params[6], "Escopeta", true))
				    weap = 25;

				else if(!strcmp(params[6], "Uzi", true))
				    weap = 28;

				else if(!strcmp(params[6], "TEC-9", true))
				    weap = 32;

				else if(!strcmp(params[6], "Sniper", true))
				    weap = 34;

				else if(!strcmp(params[6], "MP5", true))
				    weap = 29;

				else if(!strcmp(params[6], "m4", true))
				    weap = 31;

				else if(!strcmp(params[6], "ak-47", true))
				    weap = 30;

				else if(!strcmp(params[6], "rifle", true))
				    weap = 33;

				else if(!strcmp(params[6], "bate", true))
				    weap = 5;

				//

				if(weap == -1)
				    return Error(playerid, "Nombre de arma incorrecto, o molde que no puede ser fabricado aquí (Katana, Granadas, SPAS 12, etc..)");

				Loop(i, sizeof(ObjectData), 0)
				{
				    if(ObjectData[i][invType] == INV_MOLDEARMA)
				    {
				        if(ObjectData[i][invData] == weap)
				        {
				    		Obj_to_make = i;
				    		break;
						}
					}
				}

				if(Obj_to_make == -1)
				    return Error(playerid, "Nombre de arma incorrecto.");

				InfoHornoBlackAso[h][hornoObj] = Obj_to_make;
				InfoHornoBlackAso[h][hornoPorHacer] = (ObjectData[Obj_to_make][invSize] * 120) * 2;
				InfoHornoBlackAso[h][hornoEncendido] = true;
				ActualizarLabelHornoBlackAso(h);
				Mensaje(playerid, -1, "Usa "#CINFO"/recoger molde "#CBLANCO"cuando se termine de fabricar.");
				return 1;
			}
			return Error(playerid, "No está en una fábrica");
		}
		return ParamsINC(playerid, "/fabricar [producto]");
	}

	CMD:recoger(playerid, params[])
	{
		Manos_Desocupadas

		if(Esposado(playerid))
		{
		    return Error(playerid, "~r~No puedes hacer esto, estás esposado.");
		}

		if(!strcmp(params, "pala", true))
		{
			if(!IsPlayerInRangeOfPoint(playerid, 2.0, -39.6190,-1781.3674,743.9971))
			    return Error(playerid, "Aquí no puedes recoger una pala.");

			if(InfoJugador[playerid][jTrabajo] != ID_Minero)
			    return Error(playerid, "~r~No eres minero.");

			GiveObject(playerid, GetObjectAtWeapon(6), 1);
			return 1;
		}
		else if(!strcmp(params, "paquete", true))
		{
			if(EstaEnFabricaBigFoot(playerid))
			{
				new
				    hi = HornoMasCercano(playerid);

				if(hi == -1)
				    return Error(playerid, "No estás cerca de un horno.");

				if(InfoHornoBigFoot[hi][hornoEncendido] == true)
				    return Error(playerid, "Debes ~b~/apagar horno ~w~para empaquetar la producción.");

				new
					GramosProducidos = floatround(InfoHornoBigFoot[hi][hornoProducto], floatround_ceil);

				if(GramosProducidos < 10)
				    return Error(playerid, "Se puede empaquetar mínimo ~r~10 ~w~gramos.");

			    new
			        Float:x, Float:y, Float:z;

				GetPlayerPos(playerid, x, y, z);
				SetPlayerFacingAngle(playerid, AnglePoint(x, y, HornosBigFoot[hi][0], HornosBigFoot[hi][1]));

				ApplyAnimation(playerid, "CARRY", "liftup", 4.0, 0, 1, 1, 0, 0);

				InfoHornoBigFoot[hi][hornoProducto] = 0;
				ActualizarLabelHornoBigFoot(hi);

				GiveObject(playerid, GOAT(INV_PAQUETECOCA), GramosProducidos);
				return 1;
			}
		}

		else if(!strcmp(params, "arma", true))
		{
			if(!EstaEnFabricaBlackAso(playerid))
				return Error(playerid, "No estás en una fábrica de armas.");

			Manos_Desocupadas

		    new
		        i = HornoMasCercano(playerid, 1);

			if (i == -1)
			    return Error(playerid, "No estás cerca de un horno.");

			if (ObjectData[InfoHornoBlackAso[i][hornoObj]][invType] != INV_ARMA)
			    return Error(playerid, "En éste horno no hay un arma fabricándos.");

			if (InfoHornoBlackAso[i][hornoHecho] < InfoHornoBlackAso[i][hornoPorHacer])
			{
			    return Error(playerid, "El producto no está terminado. Debes esperar a que termine de fabricarse.");
			}

			//Dar fabricado
			if (ArmaConCargador(ObjectData[InfoHornoBlackAso[i][hornoObj]][invData]))
			{
				GiveObject(playerid, InfoHornoBlackAso[i][hornoObj]);
			}
			else
			{
				GiveObject(playerid, InfoHornoBlackAso[i][hornoObj], 1);
			}

			InfoHornoBlackAso[i][hornoHecho] = 0.0;
			InfoHornoBlackAso[i][hornoPorHacer] = 0.0;
			InfoHornoBlackAso[i][hornoObj] = 0;
			AutoRol(playerid, "retira lo fabricado de un horno.");
			ActualizarLabelHornoBlackAso(i);

			new
   				Float:x, Float:y, Float:z;

			GetPlayerPos(playerid, x, y, z);
			SetPlayerFacingAngle(playerid, AnglePoint(x, y, HornosBlackAso[i][0], HornosBlackAso[i][1]));

			ApplyAnimation(playerid, "CARRY", "liftup", 4.0, 0, 1, 1, 0, 0);
			return 1;
		}
		else if(!strcmp(params, "cargador", true))
		{
			if(!EstaEnFabricaBlackAso(playerid))
				return Error(playerid, "No estás en una fábrica de armas.");

			Manos_Desocupadas

		    new
		        i = HornoMasCercano(playerid, 1);

			if (i == -1)
			    return Error(playerid, "No estás cerca de un horno.");

			if (ObjectData[InfoHornoBlackAso[i][hornoObj]][invType] != INV_CARGADOR)
			    return Error(playerid, "En éste horno no hay un arma fabricándos.");

			if (InfoHornoBlackAso[i][hornoHecho] < InfoHornoBlackAso[i][hornoPorHacer])
			{
			    return Error(playerid, "El producto no está terminado. Debes esperar a que termine de fabricarse.");
			}
			//Dar fabricado
			GiveObject(playerid, InfoHornoBlackAso[i][hornoObj]);
			InfoHornoBlackAso[i][hornoHecho] = 0.0;
			InfoHornoBlackAso[i][hornoPorHacer] = 0.0;
			InfoHornoBlackAso[i][hornoObj] = 0;
			AutoRol(playerid, "retira lo fabricado de un horno.");
			ActualizarLabelHornoBlackAso(i);

			new
   				Float:x, Float:y, Float:z;

			GetPlayerPos(playerid, x, y, z);
			SetPlayerFacingAngle(playerid, AnglePoint(x, y, HornosBlackAso[i][0], HornosBlackAso[i][1]));

			ApplyAnimation(playerid, "CARRY", "liftup", 4.0, 0, 1, 1, 0, 0);
			return 1;
		}
		else if(!strcmp(params, "molde", true))
		{
			if(!EstaEnFabricaBlackAso(playerid))
				return Error(playerid, "No estás en una fábrica de armas.");

			Manos_Desocupadas

		    new
		        i = HornoMasCercano(playerid, 1);

			if (i == -1)
			    return Error(playerid, "No estás cerca de un horno.");

			if (InfoHornoBlackAso[i][hornoMolde])
			{
				if (InfoHornoBlackAso[i][hornoObj])
					return Error(playerid, "No puedes retirar el molde mientras se fabrica.");

			    GiveObject(playerid, InfoHornoBlackAso[i][hornoMolde]);
			    InfoHornoBlackAso[i][hornoMolde] = 0;
				AutoRol(playerid, "retira un molde del horno.");
				ActualizarLabelHornoBlackAso(i);
			    return 1;
			}

			if (!InfoHornoBlackAso[i][hornoObj])
			{
			    return Error(playerid, "En éste horno no hay un arma fabricándos.");
			}

			if (ObjectData[InfoHornoBlackAso[i][hornoObj]][invType] != INV_MOLDEARMA)
			    return Error(playerid, "En éste horno no hay un arma fabricándos.");

			if (InfoHornoBlackAso[i][hornoHecho] < InfoHornoBlackAso[i][hornoPorHacer])
			{
			    return Error(playerid, "El producto no está terminado. Debes esperar a que termine de fabricarse.");
			}

			//Dar fabricado
			GiveObject(playerid, InfoHornoBlackAso[i][hornoObj]);
			InfoHornoBlackAso[i][hornoHecho] = 0.0;
			InfoHornoBlackAso[i][hornoPorHacer] = 0.0;
			InfoHornoBlackAso[i][hornoObj] = 0;
			AutoRol(playerid, "retira lo fabricado de un horno.");
			ActualizarLabelHornoBlackAso(i);

			new
   				Float:x, Float:y, Float:z;

			GetPlayerPos(playerid, x, y, z);
			SetPlayerFacingAngle(playerid, AnglePoint(x, y, HornosBlackAso[i][0], HornosBlackAso[i][1]));

			ApplyAnimation(playerid, "CARRY", "liftup", 4.0, 0, 1, 1, 0, 0);
			return 1;
		}

		new
		    i = ObjetoTiradoMasCercano(playerid);

		if(i == -1) return Error(playerid, "Acercate a un objeto para usar ~r~/recoger");

		new
		    type = ObjectData[ObjetoTirado[i][obj_t_Type]][invType];

		new
		    Float:x, Float:y, Float:z;

		GetPlayerPos(playerid, x, y, z);

		if(type == INV_CAJACARGADOR || type == INV_CAJAARMA || type == INV_CAJAESPOSA || type == INV_CAJACHALECO || type == INV_PAQUETECOCA || type == INV_PAQUETEMARI)
		{
			SetPlayerFacingAngle(playerid, AnglePoint(x, y, ObjetoTirado[i][obj_t_x], ObjetoTirado[i][obj_t_y]) );

			ApplyAnimation(playerid, "CARRY", "liftup", 4.0, 0, 1, 1, 0, 0);
			SetTimerEx("RecogerCajaAnim", 700, false, "ii", playerid, i);
		}
		else if(type == INV_ARMA || type == INV_CHALECO || type == INV_CHALECOPOLICIA)
		{
		    if((GetPlayerSpecialAction(playerid) & SPECIAL_ACTION_DUCK) == 0) return Error(playerid,"Presiona ~b~~k~~PED_DUCK~ ~w~para agacharte y poder recoger el objeto");
	        GiveObject(playerid, ObjetoTirado[i][obj_t_Type], ObjetoTirado[i][obj_t_Data]);
	        BorrarObjetoTirado(i);

			new
			    str[60];

			A_Format(str, "recoge un/a %s del suelo.", ObjectData[GetObject(playerid)][invName]);
			AutoRol(playerid, str);
		}
		return 1;
	}

	CMD:caja(playerid, params[])
	{
		if(isnull(params))
		{
			Mensaje(playerid, -1, "Si quieres sacar cargadores o armas de una caja, usa "#CINFO"/caja sacar");
			Mensaje(playerid, -1, "Si quieres guardar cargadores o armas en una caja, usa "#CINFO"/caja guardar");
		}
		if(!strcmp(params, "sacar", true))
		{
		    new
		        i = ObjetoTiradoMasCercano(playerid);

			if(i == -1) return Error(playerid, "Acercate a una caja para usar este comando.");

			Manos_Desocupadas

			new
			    type = ObjectData[ObjetoTirado[i][obj_t_Type]][invType];

			if(type == INV_CAJAARMA)
			{
				new
					stock_ammount = ObjetoTirado[i][obj_t_Data],
					slot = -1,
					weapon_id = ObjectData[ObjetoTirado[i][obj_t_Type]][invData];

				if(stock_ammount < 1)
				{
				    return Error(playerid, "En esta caja no hay más armas.");
				}

				for(new index; index < sizeof(ObjectData); index++)
				{
				    if(ObjectData[index][invType] == INV_ARMA)
				    {
				        if(ObjectData[index][invData] == weapon_id)
				        {
							slot = index;
							break;
						}
				    }
				}

				if(slot == -1)
				    return Error(playerid, "Se produjo un error. Reportar esto en el foro");

				stock_ammount--;
				ObjetoTirado[i][obj_t_Data] = stock_ammount;

				if(GetObjectAtWeapon(3) == slot)
				{
					GiveObject(playerid, slot, 1);
				}
				else
				{
					GiveObject(playerid, slot, 0);
				}
				GuardarObjetoTirado(i);
				ActualizarLabelObjetoTirado(i);
				new
				    str[70];

				A_Format(str, "toma una %s de una caja", ObjectData[slot][invName]);
				AutoRol(playerid, str);

				new
				    Float:x, Float:y, Float:z;

				GetPlayerPos(playerid, x, y, z);

				SetPlayerFacingAngle(playerid, AnglePoint(x, y, ObjetoTirado[i][obj_t_x], ObjetoTirado[i][obj_t_y]) );

				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);
				return 1;
			}
			else if(type == INV_CAJACARGADOR)
			{
				new
					stock_ammount = ObjetoTirado[i][obj_t_Data],
					slot = -1;

				if(stock_ammount < 1)
				{
				    return Error(playerid, "En esta caja no hay nada.");
				}

				for(new index; index < sizeof(ObjectData); index++)
				{
				    if(ObjectData[index][invType] == INV_CARGADOR)
				    {
				        if(ObjectData[index][invData] == ObjectData[ObjetoTirado[i][obj_t_Type]][invData])
				        {
							slot = index;
							break;
						}
				    }
				}

				if(slot == -1)
				    return Error(playerid, "Se produjo un error. Reportar esto en el foro");

				stock_ammount--;
				ObjetoTirado[i][obj_t_Data] = stock_ammount;

				GiveObject(playerid, slot);
				GuardarObjetoTirado(i);
				ActualizarLabelObjetoTirado(i);

				new
				    str[70];

				A_Format(str, "saca un %s de una caja", ObjectData[slot][invName]);
				AutoRol(playerid, str);

				new
				    Float:x, Float:y, Float:z;

				GetPlayerPos(playerid, x, y, z);

				SetPlayerFacingAngle(playerid, AnglePoint(x, y, ObjetoTirado[i][obj_t_x], ObjetoTirado[i][obj_t_y]) );

				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);
				return 1;
			}
			else if(type == INV_CAJACHALECO)
			{
				new
					stock_ammount = ObjetoTirado[i][obj_t_Data];

				if(stock_ammount < 1)
				{
				    return Error(playerid, "En esta caja no hay nada.");
				}

				stock_ammount--;
				ObjetoTirado[i][obj_t_Data] = stock_ammount;

				new
				    obj;

				if(ObjectData[ObjetoTirado[i][obj_t_Type]][invData] == 1)
				{
				    obj = GOAT(INV_CHALECO);
				}
				else
				{
				    obj = GOAT(INV_CHALECOPOLICIA);
				}

				GiveObject(playerid, obj, 100);
				GuardarObjetoTirado(i);
				ActualizarLabelObjetoTirado(i);

				AutoRol(playerid, "saca un chaleco de una caja");

				new
				    Float:x, Float:y, Float:z;

				GetPlayerPos(playerid, x, y, z);
				SetPlayerFacingAngle(playerid, AnglePoint(x, y, ObjetoTirado[i][obj_t_x], ObjetoTirado[i][obj_t_y]) );
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);
				return 1;
			}
			else if(type == INV_CAJAESPOSA)
			{
				new
					stock_ammount = ObjetoTirado[i][obj_t_Data];

				if(stock_ammount < 1)
				{
				    return Error(playerid, "En esta caja no hay nada.");
				}

				stock_ammount--;
				ObjetoTirado[i][obj_t_Data] = stock_ammount;

				GiveObject(playerid, GOAT(INV_ESPOSAS));
				GuardarObjetoTirado(i);
				ActualizarLabelObjetoTirado(i);

				AutoRol(playerid, "saca unas esposas de una caja");

				new
				    Float:x, Float:y, Float:z;

				GetPlayerPos(playerid, x, y, z);

				SetPlayerFacingAngle(playerid, AnglePoint(x, y, ObjetoTirado[i][obj_t_x], ObjetoTirado[i][obj_t_y]) );

				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);
				return 1;
			}
			else
			    return Error(playerid, "Acercate a una caja para usar este comando.");

		}
		else if(!strcmp(params, "guardar", true))
		{
		    if(GetObject(playerid) < 1)
		        return Error(playerid, "No tienes un objeto en la mano.");

		    new
		        i = ObjetoTiradoMasCercano(playerid);

			if(i == -1) return Error(playerid, "Acercate a una caja para usar este comando.");

			new
			    type = ObjectData[ObjetoTirado[i][obj_t_Type]][invType],
				my_obj_type = ObjectData[GetObject(playerid)][invType];

			if(type == INV_CAJAARMA)
			{
			    if(my_obj_type != INV_ARMA)
			        return Error(playerid, "No puedes guardar ese objeto en una caja de armas.");

				new
					stock_ammount = ObjetoTirado[i][obj_t_Data],
					slot = -1;

				if(stock_ammount >= MAX_ARMAS_CAJA)
				    return Error(playerid, "No entran más armas en la caja.");

				for(new index; index < sizeof(ObjectData); index++)
				{
				    if(ObjectData[index][invType] == INV_ARMA)
				    {
				        if(ObjectData[index][invData] == ObjectData[ObjetoTirado[i][obj_t_Type]][invData])
				        {
							slot = index;
							break;
						}
				    }
				}
				if(slot == -1)
				    return Error(playerid, "Se produjo un error.");

				if(ObjectData[GetObject(playerid)][invData] != ObjectData[slot][invData])
				    return MensajeF(playerid, -1, "No puedes meter una "#CVERDE"%s "#CBLANCO"en una "#CINFO"%s.", ObjectData[GetObject(playerid)][invName], ObjectData[ObjetoTirado[i][obj_t_Type]][invName]);

				new
				    str[70];

				A_Format(str, "mete una %s en una caja", ObjectData[GetObject(playerid)][invName]);
				AutoRol(playerid, str);

				stock_ammount++;
				ObjetoTirado[i][obj_t_Data] = stock_ammount;
				GuardarObjetoTirado(i);
				ActualizarLabelObjetoTirado(i);
				RemoveObject(playerid);

				new
				    Float:x, Float:y, Float:z;

				GetPlayerPos(playerid, x, y, z);

				SetPlayerFacingAngle(playerid, AnglePoint(x, y, ObjetoTirado[i][obj_t_x], ObjetoTirado[i][obj_t_y]) );

				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);
				return 1;
			}
			else if(type == INV_CAJACARGADOR)
			{
			    if(my_obj_type != INV_CARGADOR)
			        return Error(playerid, "No puedes guardar ese objeto en una caja de cargadores.");

				new
					stock_ammount = ObjetoTirado[i][obj_t_Data],
					slot = -1;

				if(stock_ammount >= MAX_ARMAS_CAJA)
				    return Error(playerid, "No entran más armas en la caja.");

				for(new index; index < sizeof(ObjectData); index++)
				{
				    if(ObjectData[index][invType] == INV_ARMA)
				    {
				        if(ObjectData[index][invData] == ObjectData[ObjetoTirado[i][obj_t_Type]][invData])
				        {
							slot = index;
							break;
						}
				    }
				}
				if(slot == -1)
				    return Error(playerid, "Se produjo un error.");

				if(ObjectData[GetObject(playerid)][invData] != ObjectData[slot][invData])
				    return MensajeF(playerid, -1, "No puedes meter un "#CVERDE"%s "#CBLANCO"en una caja de "#CINFO"%s.", ObjectData[GetObject(playerid)][invName], ObjectData[ObjetoTirado[i][obj_t_Type]][invName]);


				new
				    str[70];

				A_Format(str, "mete un %s en una caja", ObjectData[GetObject(playerid)][invName]);
				AutoRol(playerid, str);

				stock_ammount++;
				ObjetoTirado[i][obj_t_Data] = stock_ammount;
				GuardarObjetoTirado(i);
				ActualizarLabelObjetoTirado(i);
				RemoveObject(playerid);

				new
				    Float:x, Float:y, Float:z;

				GetPlayerPos(playerid, x, y, z);

				SetPlayerFacingAngle(playerid, AnglePoint(x, y, ObjetoTirado[i][obj_t_x], ObjetoTirado[i][obj_t_y]) );

				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);
				return 1;
			}
			else if(type == INV_CAJAESPOSA)
			{
			    if(my_obj_type != INV_ESPOSAS)
			        return Error(playerid, "No puedes guardar ese objeto en una caja de esposas.");

				new
					stock_ammount = ObjetoTirado[i][obj_t_Data];

				if(stock_ammount >= MAX_ESPOSAS_CAJA)
				    return Error(playerid, "No entran más esposas en la caja.");

				AutoRol(playerid, "mete unas esposas en una caja");

				stock_ammount++;
				ObjetoTirado[i][obj_t_Data] = stock_ammount;
				GuardarObjetoTirado(i);
				ActualizarLabelObjetoTirado(i);
				RemoveObject(playerid);

				new
					Float:x, Float:y, Float:z;

				GetPlayerPos(playerid, x, y, z);

				SetPlayerFacingAngle(playerid, AnglePoint(x, y, ObjetoTirado[i][obj_t_x], ObjetoTirado[i][obj_t_y]) );

				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);
				return 1;
			}
			else
			    return Error(playerid, "Acercate a una caja para usar este comando.");

		}
		return 1;
	}

CALLBACK: RecogerCajaAnim (playerid, i)
{
	Manos_Desocupadas

	if(ObjetoTirado[i][obj_t_Type] == 0)
	    return 1;

 	GiveObject(playerid, ObjetoTirado[i][obj_t_Type], ObjetoTirado[i][obj_t_Data]);
 	BorrarObjetoTirado(i);

	new
		str[60];

	A_Format(str, "recoge una %s del suelo.", ObjectData[GetObject(playerid)][invName]);
	AutoRol(playerid, str);
	return 1;
}

	CMD:detonar(playerid,params[])
	{
		if(!strcmp(params,"bomba",true))
		{
			if(!InfoJugador[playerid][jBomba]) return Error(playerid,"¡No tienes una bomba!");
			if(OBJ_Bomba[playerid] == INVALID_OBJECT_ID) return Error(playerid,"¡La bomba no está plantada! Para plantarla, "#CINFO"(/plantar bomba)");
			new Float:PosOBJ[3];
			GetDynamicObjectPos(OBJ_Bomba[playerid],PosOBJ[0],PosOBJ[1],PosOBJ[2]);
			if(GetPlayerDistanceFromPoint(playerid, PosOBJ[0],PosOBJ[1],PosOBJ[2]) > 100.0) return Error(playerid, "¡La señal del control no llega!");
			CreateExplosion(PosOBJ[0],PosOBJ[1],PosOBJ[2],2,60);
			CreateExplosion(PosOBJ[0]-5.0,PosOBJ[1],PosOBJ[2],6,60);
			CreateExplosion(PosOBJ[0],PosOBJ[1],PosOBJ[2]-5.0,7,60);
			CreateExplosion(PosOBJ[0]+5.0,PosOBJ[1],PosOBJ[2],6,60);
			CreateExplosion(PosOBJ[0],PosOBJ[1],PosOBJ[2]+5.0,6,60);
			InfoJugador[playerid][jBomba] = false;
			DestroyDynamicObject(OBJ_Bomba[playerid]);
			OBJ_Bomba[playerid] = INVALID_OBJECT_ID;
			AutoRol(playerid,"detona la bomba con su control remoto");
			return 1;
		}
		return ParamsINC(playerid,"/detonar <ITEM>");
	}

	CMD:mascara(playerid,params[])
	{
		if(!GetPVarInt(playerid,"USANDO_MASCARA"))
		{
	    	NeedObject(playerid)<INV_MASCARA>;
		    ApplyAnimation(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0);
		    SetTimerEx("PonerMascara", 5000, false, "ii", playerid, true);
			return 1;
		}
		else
		{
		    if(!IsPlayerAttachedObjectSlotUsed(playerid, SLOT_CARA) || !GetPVarInt(playerid, "USANDO_MASCARA")) return Error(playerid, "¡No tenes una máscara puesta!");
		    ApplyAnimation(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0);
		    SetTimerEx("PonerMascara", 5000, false, "ii", playerid, false);
			return 1;
		}
	}

CALLBACK: PonerMascara(playerid, bool: poner)
{
	if(poner)
	{
        if(GetObject(playerid) == GOAT(INV_MASCARA))
        {
	    	SetPVarInt(playerid, "USANDO_MASCARA", true);
	    	AutoRol(playerid,"se coloca su máscara");

	    	new
	    	    S = GetPlayerSkin(playerid);
			SetPlayerAttachedObject(playerid,SLOT_CARA,19036,2,POS_Accesorio_Lentes[S][0],POS_Accesorio_Lentes[S][1],POS_Accesorio_Lentes[S][2],POS_Accesorio_Lentes[S][3],POS_Accesorio_Lentes[S][4],POS_Accesorio_Lentes[S][5],POS_Accesorio_Lentes[S][6],1,1);
			RemoveObject(playerid);
			foreach(Player,i)
			{
				if(!InfoJugador[i][jAdmin])
				{
					ShowPlayerNameTagForPlayer(i, playerid, false);
				}
			}
			new
			    masked[MAX_PLAYER_NAME+4];

			A_Format(masked, "Enmascarado (%d)", playerid);
			if(Enmascarado[playerid] == Text3D:INVALID_3DTEXT_ID)
			{
	  			Enmascarado[playerid] = Create3DTextLabel(masked,0xFFFFFFFF,0,0,0,5.0,true);
			}
			Attach3DTextLabelToPlayer(Enmascarado[playerid], playerid, 0, 0, 0.2 );
		}
	}
	else
	{
		RemovePlayerAttachedObject(playerid, SLOT_CARA);
	    DeletePVar(playerid, "USANDO_MASCARA");
	    AutoRol(playerid, "se quita su máscara");
		foreach(Player,i)
		{
			if(!InfoJugador[i][jAdmin])
			{
				ShowPlayerNameTagForPlayer(i, playerid, true);
			}
		}
		if(Enmascarado[playerid] != Text3D:INVALID_3DTEXT_ID)
		{
		    Delete3DTextLabel(Enmascarado[playerid]);
		    Enmascarado[playerid] = Text3D:INVALID_3DTEXT_ID;
		}
		GiveObject(playerid, GOAT(INV_MASCARA));
	}
	return 0;
}

	// -----======[ ACCIONES ]======------- //

	CMD:rendirme(playerid,params[])
	{
		AnimCMD;

		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
			return 1;
		}
		return 1;
	}

	CMD:reirme(playerid,params[])
	{
		AnimCMD;

		ApplyAnimation(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0,0);
		return 1;
	}

	CMD:amenazar(playerid,params[])
	{
		AnimCMD;

		ApplyAnimation(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 0, 0, 0, 1,500);
		return 1;
	}

	CMD:cruzarbrazos(playerid,params[])
	{
		AnimCMD;

		ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 1, 0, 0, 0, 0);
		return 1;
	}

	CMD:recostarme(playerid,params[])
	{
		AnimCMD;

		ApplyAnimation(playerid,"SUNBATHE", "Lay_Bac_in", 4.0, 0, 0, 0, 1, 0);
		return 1;
	}

	CMD:pararme(playerid,params[])
	{
		AnimCMD;

		ApplyAnimation(playerid,"SUNBATHE", "Lay_Bac_out", 4.0, 0, 0, 0, 0, 0);
		return 1;
	}

	CMD:cubrirme(playerid,params[])
	{
		AnimCMD;

		ApplyAnimation(playerid, "ped", "cower", 4.0, 1, 0, 0, 0, 0);
		return 1;
	}

	CMD:vomitar(playerid,params[])
	{
		AnimCMD;

		ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
		return 1;
	}

	CMD:chau(playerid,params[])
	{
		AnimCMD;

		ApplyAnimation(playerid, "KISSING", "BD_GF_Wave", 3.0, 0, 0, 0, 0, 0);
		return 1;
	}

	CMD:agonizar(playerid,params[])
	{
		AnimCMD;

		ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0);
		return 1;
	}

	CMD:depie(playerid,params[])
	{
		AnimCMD;

		ApplyAnimation(playerid, "ped", "getup_front", 4.000000, 0, 0, 0, 0, 0);
		return 1;
	}

	CMD:besar(playerid,params[])
	{
		AnimCMD;

		ApplyAnimation(playerid, "KISSING", "Playa_Kiss_02", 4.0, 0, 0, 0, 0, 0);
		return 1;
	}

	CMD:crack(playerid,params[])
	{
		AnimCMD;

	    if(IsPlayerInAnyVehicle(playerid)) return 1;

		return ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 0, 0, 0, 1, 0);
	}

	CMD:sentarme(playerid,params[])
	{
		AnimCMD;

	    if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/sentarme [1 - 2]");

		if(params[0] == 1)
		{
			ApplyAnimation(playerid, "SUNBATHE", "ParkSit_M_in", 4.000000, 0, 1, 1, 1, 0);
			return 1;
		}
		else if(params[0] == 2)
		{
		    ApplyAnimation(playerid, "ped", "SEAT_down", 4.000000, 0, 0, 0, 1, 0);
			return 1;
		}
		return ParamsINC(playerid,"/sentarme [1 - 2]");
	}

	CMD:si(playerid,params[])
	{
		AnimCMD;

		ApplyAnimation(playerid, "GANGS", "Invite_Yes", 4.0, 0, 0, 0, 0, 0); // si
		return 1;
	}

	CMD:no(playerid,params[])
	{
		AnimCMD;

		ApplyAnimation(playerid, "GANGS", "Invite_No", 4.0, 0, 0, 0, 0, 0); // no
		return 1;
	}

	CMD:beber(playerid,params[])
	{
		AnimCMD;

	    ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.0, 0, 1, 1, 0, 4000); // beber
		return 1;
	}

	CMD:levantarme(playerid,params[])
	{
		AnimCMD;

		ApplyAnimation(playerid, "ped", "SEAT_up", 4.000000, 0, 0, 1, 0, 0);
		return 1;
	}

	CMD:llorar(playerid,params[])
	{
		AnimCMD;

		ApplyAnimation(playerid,"GRAVEYARD","mrnF_loop",4.1,0,0,0,0,0);
		return 1;
	}

	CMD:echarme(playerid,params[])
	{
		AnimCMD;

 		ApplyAnimation(playerid,"SUNBATHE","SitnWait_in_W",4.000000, 0, 0, 0, 1, 0);
		return 1;
	}

	CMD:danzar(playerid,params[])
	{
		AnimCMD;

	    new
			S;

	    if(sscanf(params,"i",S)) return ParamsINC(playerid,"/danzar [1 - 13]");

		switch(S)
		{
		    case 1:		return  ApplyAnimation(playerid,"DANCING","bd_clap",4.1,7,5,1,1,1);
		    case 2:		return  ApplyAnimation(playerid,"DANCING","bd_clap1",4.1,7,5,1,1,1);
		    case 3: 	return  ApplyAnimation(playerid,"DANCING","dance_loop",4.1,7,5,1,1,1);
		    case 4:		return  ApplyAnimation(playerid,"DANCING","DAN_Down_A",4.1,7,5,1,1,1);
		    case 5: 	return  ApplyAnimation(playerid,"DANCING","DAN_Left_A",4.1,7,5,1,1,1);
		    case 6: 	return  ApplyAnimation(playerid,"DANCING","DAN_Loop_A",4.1,7,5,1,1,1);
		    case 7: 	return  ApplyAnimation(playerid,"DANCING","DAN_Right_A",4.1,7,5,1,1,1);
		    case 8: 	return  ApplyAnimation(playerid,"DANCING","DAN_Up_A",4.1,7,5,1,1,1);
		    case 9: 	return  ApplyAnimation(playerid,"DANCING","dnce_M_a",4.1,7,5,1,1,1);
		    case 10: 	return  ApplyAnimation(playerid,"DANCING","dnce_M_b",4.1,7,5,1,1,1);
		    case 11: 	return  ApplyAnimation(playerid,"DANCING","dnce_M_c",4.1,7,5,1,1,1);
		    case 12: 	return  ApplyAnimation(playerid,"DANCING","dnce_M_d",4.1,7,5,1,1,1);
		    case 13: 	return  ApplyAnimation(playerid,"DANCING","dnce_M_e",4.1,7,5,1,1,1);
			default: 	return  ParamsINC(playerid,"/danzar [1 - 13]");
		}
		return 1;
	}

	CMD:cansarme(playerid,params[])
	{
		AnimCMD;

		ApplyAnimation(playerid,"PED","WOMAN_runfatold",4.1,7,5,1,1,1);
		return 1;
	}

	CMD:detener(playerid,params[])
	{
		AnimCMD;

    	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
		return 1;
	}

	CMD:bailar(playerid,params[])
	{
		AnimCMD;

	    new S;
	    if(sscanf(params,"i",S)) return ParamsINC(playerid,"/bailar [1 - 3]");
		if(S == 1) return SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
		else if(S == 2) return SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
		else if(S == 3) return SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
		else return ParamsINC(playerid,"/bailar [1 - 3]");
	}

	CMD:acciones(playerid,params[])
	{
	    Mensaje(playerid,-1,"> - "#CINFO"Acciones disponibles:");
	    Mensaje(playerid,-1,"/rendirme - /reirme - /amenazar - /cruzarbrasos - /recostarme - /pararme - /cubrirme - /beber");
	    Mensaje(playerid,-1,"/vomitar - /chau - /agonizar - /depie - /besar - /crack - /sentarme - /si - /no");
	    Mensaje(playerid,-1,"/levantarme - /llorar - /saludar - /echarme - /danzar - /cansarme - /bailar - /detener (detener la animación)");
		return 1;
	}

	CMD:ropa(playerid,params[])
	{
	    if(InfoJugador[playerid][jEncarcelado])
			return Error(playerid, "No puedes utilizar este comando en la cárcel.");

		if(Cracked[playerid])
			return Error(playerid, "Estás tirado en el piso, ¡no puedes cambiarte la ropa!");

		if(Freezed[playerid])
		    return Error(playerid, "No puede usar este comando estando congelado.");

		new
		    vw = GetPlayerVirtualWorld (playerid);

		if(GetClothesPosition(playerid) == 0 && vw < 100 && vw > 100+MAX_CASAS)
		{
			Mensaje (playerid, -1, "Para cambiarte la ropa, debes estar en un negocio de ropa, o en una casa.");
			return 1;
		}

		new
			Str[18 * MAX_ROPA],
			Ropa[MAX_ROPA][20],
			strI[20];

		Loop(i,MAX_ROPA,0)
		{
		    if(!InfoJugador[playerid][jRopa][i])
		    {
	         	Ropa[i] = "Nada";
			}
			else
			{
				format(Ropa[i],20,"%d",InfoJugador[playerid][jRopa][i]);
			}
	 		format(strI,sizeof(strI),"Slot %d ( %s )\n",i,Ropa[i]);
	  		strins(Str,strI,strlen(Str));
		}
		SetPVarInt(playerid,"ROPA_EDITAR",0);

		Dialog(playerid,dEditarRopa,DIALOG_STYLE_LIST,""#CBLANCO"Elige el slot para editar",Str,"Aceptar","Cancelar");
		return 1;
	}

	CMD:accesorios(playerid,params[])
	{
		new
			Str2[40],
			Str[sizeof(Str2) * MAX_ACCESORIOS];

		Loop(s, MAX_ACCESORIOS, 0)
		{
  			if(InfoJugador[playerid][jAttachModel][s])
	    	{
      			A_Format(Str2,"(Lugar %d)	%s%s\n",s+1,(InfoJugador[playerid][jAttachOcultado][s]) ? (""#CVERDE"") : (""#CAZUL""), AttachmentObjects[InfoJugador[playerid][jAccesorio][s]][attachname]);
				strcat(Str,Str2);
				continue;
			}
			else
			{
   				A_Format(Str2,"(Lugar %d)	"#CGRIS"Vacío.\n",s+1);
				strcat(Str,Str2);
				continue;
			}
		}
		Dialog(playerid,dEAccesorios_0,DIALOG_STYLE_LIST,""#CAZUL2"SELECCIONAR UN ACCESORIO",Str,"Aceptar","Cancelar");
		return 1;
	}

	CMD:contestar(playerid, params[])
	{
	    return Mensaje(playerid, -1, "Quizá quiso decir: "#CINFO"/atender");
	}

	CMD:atender(playerid,params[])
	{
		NeedObject(playerid)<INV_CEL>;

		new
		    my_number = GetCelNumber(playerid),
			str[15];

		A_Format(str, "C%dR", my_number);

		new
		    other_num = GetGVarInt(str);

		if(other_num == 0)
		{
		    return Error(playerid, "Este celular no tiene una llamada entrante.");
		}

		if(GetCallPartner(my_number) != 0)
		{
		    return Error(playerid, "Este celular ya está en una llamada.");
		}

		new
			contactID = GetPlayerAtNumber(other_num);

		if(contactID == INVALID_PLAYER_ID)
		{
		    return Error(playerid, "ERROR");
		}

        Mensaje(playerid, -1,  "Contestaste el celular. Usa "#CINFO"/c "#CBLANCO"para hablar por celular. Para finalizar la llamada, usa "#CINFO"/colgar celular");
        Mensaje(contactID, -1, "Contestaron. Utilice "#CINFO"/c "#CBLANCO"para hablar por celular. Para finalizar la llamada, usa "#CINFO"/colgar celular");
		CreateCall(my_number, other_num);

		DeleteGVar(str); // delete C%dR

		A_Format(str, "C%dRC", my_number);
		DeleteGVar(str);

		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
		EndCallSound(playerid);
		return 1;
	}

	CMD:celular(playerid,params[])
	{
	    NeedObject(playerid)<INV_CEL>;

		if(CEL.State[playerid] == CEL_STATE_NONE)
		{
		    CEL.Toggle(playerid, true);
		    Mensaje(playerid, -1, "Usa "#CINFO"/cel"#CBLANCO"ular o presiona "#CVERDE"ESC "#CBLANCO"para dejar de ver el celular");
		    AutoRol(playerid, "mira su celular");
		}
		else
		{
		    CEL.Toggle(playerid, false);
		    AutoRol(playerid, "deja de ver su celular");
		}
	    return 1;
	}

	CMD:colgar(playerid,params[])
	{
	    if(!isnull(params))
	    {
		    if(!strcmp(params, "celular", true))
		    {
				NeedObject(playerid)<INV_CEL>;
				new
				    my_num = GetCelNumber(playerid),
				    partner_num = GetCallPartner(my_num);

				if(partner_num == 0)
				{
				    new
				        str[15];

					A_Format(str, "C%dRC", my_num);
					if(GetGVarInt(str)) // Llamando pero no contestaron
					{
					    DeleteGVar(str);

						A_Format(str, "C%dR", my_num);
					    DeleteGVar(str);

						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
						TextoJugador(playerid, "~r~Llamada finalizada.", 4000, 3);
						return 1;
					}
				    return 1;
				}

				new
					partnerID = GetPlayerAtNumber(partner_num);

				if (partnerID == INVALID_PLAYER_ID)
				    return 1;

				TextoJugador(partnerID, "~r~Llamada finalizada.", 4000, 3);
				TextoJugador(playerid, "~r~Llamada finalizada.", 4000, 3);
				SetPlayerSpecialAction(partnerID, SPECIAL_ACTION_STOPUSECELLPHONE);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);

				new
				    str[15];

				A_Format(str, "C%dP", my_num);
				DeleteGVar(str);

				A_Format(str, "C%dP", partner_num);
				DeleteGVar(str);

				EndCallSound(playerid);
				EndCallSound(partnerID);
				return 1;
			}
			else
			{
			    Mensaje(playerid, -1, "Quizá quiso decir: "#CINFO"/colgar celular");
			}
			return 1;
		}
	    if(InfoJugador[playerid][jObjetoColgado] != -1)
	    {
			return Error(playerid, "Ya tienes un objeto colgado.");
		}

  		new
            S = GetPlayerSkin(playerid),
            objectid = GetObject(playerid),
			Float:x, Float:y, Float:z,
			Float:rx, Float:ry, Float:rz,
			Float:ex, Float:ey, Float:ez;

		if(objectid == -1)
		    return Error(playerid, "No tienes nada para colgarte.");

		new
			suc = GetAttachedObjectOffSet(S, objectid, x, y, z, rx, ry, rz, ex, ey, ez);

		if (suc)
		{
			SetPlayerAttachedObject(playerid, SLOT_ESPALDA, ObjectData[objectid][invObjID], 1, x, y, z, rx, ry, rz, ex, ey, ez, ObjectData[objectid][invColor1], ObjectData[objectid][invColor2]);
			MensajeF(playerid, -1, "Colgaste tu "#CVERDE"%s "#CBLANCO". Para usarlo, usa "#CINFO"/descol"#CBLANCO"gar.", ObjectData[objectid][invName]);
			InfoJugador[playerid][jObjetoColgado] = objectid;
			InfoJugador[playerid][jObjetoColgadoData] = GetObjectData(playerid);
			RemoveObject(playerid);
			return 1;
		}
		return Error(playerid, "No puedes colgarte esto.");
	}

	CMD:chaleco(playerid, params[])
	{
 		if(InfoJugador[playerid][jChalecoObj] > 0)
		{
  			Manos_Desocupadas

  			new
  			    Float: Arm;

  			GetPlayerArmour(playerid, Arm);
  			InfoJugador[playerid][jChalecoData] = floatround(Arm);
			GiveObject(playerid, InfoJugador[playerid][jChalecoObj], InfoJugador[playerid][jChalecoData]);
			RemovePlayerAttachedObject(playerid, SLOT_CHALECO);
            InfoJugador[playerid][jChalecoObj] = 0;
            InfoJugador[playerid][jChalecoData] = 0;
            SetPlayerArmour(playerid, 0.0);
			AutoRol(playerid, "se quita su chaleco.");
			return 1;
		}
		else
		{
		    new
		        objectid = GetObject(playerid);

			if(objectid == -1)
			    return Error(playerid, "No tienes un chaleco en la mano.");

			if(InfoJugador[playerid][jChalecoObj] != 0)
			    return Error(playerid, "~r~Ya tienes un chaleco");

			new
			    type = ObjectData[objectid][invType];

			if(type == INV_CHALECO || type == INV_CHALECOPOLICIA)
			{
		  		new
		            S = GetPlayerSkin(playerid),
					Float:x, Float:y, Float:z,
					Float:rx, Float:ry, Float:rz,
					Float:ex, Float:ey, Float:ez;

				if(objectid == -1)
				    return Error(playerid, "No tienes nada para colgarte.");

				new
					suc = GetAttachedObjectOffSet(S, objectid, x, y, z, rx, ry, rz, ex, ey, ez);

				if (suc)
				{
					SetPlayerAttachedObject(playerid, SLOT_CHALECO, ObjectData[objectid][invObjID], 1, x, y, z, rx, ry, rz, ex, ey, ez, ObjectData[objectid][invColor1], ObjectData[objectid][invColor2]);
					MensajeF(playerid, -1, "Te pusiste un "#CVERDE"%s "#CBLANCO". Usa "#CINFO"/chaleco "#CBLANCO"nuevamente para sacartelo.", ObjectData[objectid][invName]);
					InfoJugador[playerid][jChalecoObj] = objectid;
					InfoJugador[playerid][jChalecoData] = GetObjectData(playerid);
					SetPlayerArmour(playerid, float(GetObjectData(playerid)));
					RemoveObject(playerid);
					AutoRol(playerid, "se coloca su chaleco");
					return 1;
				}
			}
			return Error(playerid, "No tienes un chaleco en la mano.");
		}
	}

	CMD:planta(playerid, params[])
	{
	    new
	        p = PlantaMasCercana(playerid);

		if(p == -1)
		    return Error(playerid, "No estás cerca de una planta.");

		if(InfoPlanta[p][plantaTipo] == PLANTA_COCA)
		{
		    if(IsPlayerInDynamicArea(playerid, LaboratorioBigFoot[labZoneID]))
		    {
		        new
					dominante = LaboratorioBigFoot[labFamDominante],
					playerfam = ID_Familia(playerid);

				if(dominante)
				{
				    if(playerfam != dominante)
				        return Error(playerid, "No perteneces a la familia dominante de ~y~Bigfoot.");

					if(LaboratorioBigFoot[labCerrado])
						return Error(playerid, "Si el laboratorio está cerrado, no se podrá usar plantas.");

					if(!strcmp(params, "sacar ", true, 6))
					{
						new
						    Hojas = strval(params[6]);

						if(Hojas < 1)
						    return ParamsINC(playerid, "/planta sacar [hojas]");

						if(Hojas > InfoPlanta[p][plantaGramos])
						    return Error(playerid, "Esta planta no tiene tantas hojas.");

						new
						    obj_mio = GetObject(playerid);

						if(obj_mio != -1)
						{
						    if(ObjectData[obj_mio][invType] != INV_HOJACOCA)
						    {
						        return Error(playerid, "Debes desocuparte las manos, o tener hojas de coca para acumularlas.");
							}
							if((GetObjectData(playerid) + Hojas) > 20)
							    return Error(playerid, "Sólo puedes acumular las hojas de coca de a 20.");

							CurrentObjectData[playerid] = GetObjectData(playerid) + Hojas;
						}
						else
						{
						    GiveObject(playerid, GOAT(INV_HOJACOCA), Hojas);
						}
						InfoPlanta[p][plantaGramos] -= Hojas;
						ActualizarLabelPlanta(p);
						ActualizarPlanta(p);
						new
						    string[80];
						A_Format(string, "arranca %d hoja(s) de una planta", Hojas);
						AutoRol(playerid, string);
						return 1;
					}
					else
					{
					    return ParamsINC(playerid, "/planta sacar [hojas]");
					}
				}
				else
				{
				    return Error(playerid, "No perteneces a la familia que domina ~y~Bigfoot");
				}
			}
		}
		else if(InfoPlanta[p][plantaTipo] == PLANTA_MARIHUANA)
		{
		    if(PlantaQuemandose[p])
		        return Error(playerid, "~r~La planta está quemada.");

			if(strcmp(pName(playerid), InfoPlanta[p][plantaOwner]))
				return Error(playerid, "No eres el dueño de la planta.");

			if(!strcmp(params, "sacar ", true, 6))
			{
				new
				    Hojas = strval(params[6]);

				if(Hojas < 1)
				    return ParamsINC(playerid, "/planta sacar [gramos]");

				if(Hojas > InfoPlanta[p][plantaGramos])
				    return Error(playerid, "Esta planta no tiene tantos gramos.");

				new
				    obj_mio = GetObject(playerid);

				if(obj_mio != -1)
				{
				    if(ObjectData[obj_mio][invType] != INV_BOLSAMARI)
				    {
				        return Error(playerid, "Debes desocuparte las manos, o tener una bolsa de marihuana.");
					}

					if((GetObjectData(playerid) + Hojas) > 30)
					    return Error(playerid, "Sólo puedes guardar 30 gramos en la bolsa.");

					CurrentObjectData[playerid] = GetObjectData(playerid) + Hojas;
				}
				else
				{
				    if(Hojas > 30)
				        return Error(playerid, "Sólo puedes guardar 30 gramos en una bolsa.");

				    GiveObject(playerid, GOAT(INV_BOLSAMARI), Hojas);
				}
				InfoPlanta[p][plantaGramos] -= Hojas;
				ActualizarLabelPlanta(p);
				ActualizarPlanta(p);

				new
				    string[80];

				A_Format(string, "arranca %d gramo(s) de una planta", Hojas);
				AutoRol(playerid, string);
				return 1;
			}
			else
			{
			    return ParamsINC(playerid, "/planta sacar [hojas]");
			}
		}
		return 1;
	}

	CMD:objeto(playerid, params[])
	{
		new
		    obj = GetObject(playerid);

		if (obj == -1)
			return Error (playerid, "No tienes un objeto en la mano.");

		MensajeF (playerid, C_AZULRARO, "%s: "#CBLANCO"%s", ObjectData[obj][invName], GetDescriptionAtType(ObjectData[obj][invType]));
		return 1;
	}

	CMD:descolgar(playerid, params[])
	{
	    if(InfoJugador[playerid][jObjetoColgado] != -1)
	    {
	        Manos_Desocupadas
	        GiveObject(playerid, InfoJugador[playerid][jObjetoColgado], InfoJugador[playerid][jObjetoColgadoData]);
            InfoJugador[playerid][jObjetoColgado] = -1;
            InfoJugador[playerid][jObjetoColgadoData] = 0;
            RemovePlayerAttachedObject(playerid, SLOT_ESPALDA);
            return 1;
		}
		return Error(playerid, "No tienes un objeto para descolgarte.");
	}

	CMD:c(playerid,params[])
	{
	    if (isnull(params)) return ParamsINC(playerid,"/c [Texto]");

		NeedObject(playerid)<INV_CEL>;

		new
		    my_num = GetCelNumber(playerid),
			he_num = GetCallPartner(my_num);

		if (he_num == 0)
		    return Error(playerid, "Este celular no está conectado a una llamada.");

		new
		    partnerID = GetPlayerAtNumber(he_num),
			string[140];

		if (partnerID == INVALID_PLAYER_ID)
		    return 1;

       	A_Format(string, "%s (celular) dice: %s", NombreJugador(playerid), params);
	  	ProxDetector(10.0, playerid, string, -1, Hablar, Hablar2, Hablar3, Hablar4);

		MensajeF(partnerID, -1, "Voz del celular: %s", params);
		return 1;
	}

	CMD:anuncio(playerid,params[])
	{
	    if(EsIP(params))
	    {
			MensajeAdminF(C_ROJO, "[Anti-SPAM] "#CBLANCO"%s(%d): "#CINFO"/anuncio %s", Destacado, NombreJugador_(playerid), playerid, params);
			antic_Kick(playerid, "SPAM");
	        return 1;
		}
	    if(isnull(params)) return ParamsINC(playerid,"/anuncio [ANUNCIO]");

	    NeedObject(playerid)<INV_CEL>;

		if(!IsPlayerInRangeOfPoint(playerid,2,-1976.2544,602.3967,1055.5859)) return Error(playerid,"¡Para poner un anuncio, debes ir a LSTV!");

		static
			DiferenciaAnuncio;

		if((GetTickCount() - DiferenciaAnuncio) < 40000) return Error(playerid,"¡Se puede poner un anuncio cada 40 segundos!");

		DiferenciaAnuncio = GetTickCount();

		new
			PrecioA = strlen(params)*3;

		if(GetPlayerMoney(playerid) < PrecioA) return Error(playerid,"¡No tienes suficiente dinero para pagar esos caractéres! ($3 el caractér)");

		for(new a = 1, len = strlen(params); a < len; a++)
		{
		    params[a] = tolower(params[a]);
		}

		new
			Str[170];

		A_Format(Str, "[ANUNCIO] "#CBLANCO"%s. "#CAZULRARO"(NÚMERO: %d)", params, GetCelNumber(playerid));
		MensajeTodos(C_AZUL2,Str);
		QuitarDinero(playerid,PrecioA);
		InfoFaccion[IDLSTV][fDinero] += PrecioA;
		A_Format(Str, "Anunciante: %s (ID: %d)", pName(playerid),playerid);
		MensajeAdmin(-1, Str, Destacado);
		ActualizarFacciones();
		return 1;
	}

	CMD:gps(playerid,params[])
	{
		NeedObject(playerid)<INV_GPS>;
	    AutoRol(playerid,"mira su GPS");
		MostrarGPS(playerid);
		return 1;
	}

	CMD:cinturon(playerid,params[])
	{
		new
		    VehID = GetPlayerVehicleID(playerid);

		if (VehID == 0)
		    return Error(playerid, "No estás en un vehículo.");

		if (GetVehType(VehID) != VEHICLE_TYPE_CAR)
		{
		    return Error(playerid, "Este vehículo no tiene cinturón de seguridad.");
		}

		if (GetPVarInt(playerid,"TIENE_CINTURON"))
		{
		    AutoRol(playerid,"se saca el cinturón de seguridad");
		    DeletePVar(playerid,"TIENE_CINTURON");
		    return 1;
		}
  		AutoRol(playerid,"se pone el cinturón de seguridad");
    	SetPVarInt(playerid,"TIENE_CINTURON",1);
    	return 1;
	}

	CMD:dni(playerid,params[])
	{
	    new
	        ID = -1;
	    if(sscanf(params, "U(-1)", ID)) return ParamsINC(playerid, "/dni [Opcional: ID/Nombre]");
	    if(ID == -1) Mensaje(playerid, -1, "/dni [ID/Nombre] para mostrarselo a otro jugador.");
	    else
	    {
	        if(!IsPlayerConnected(ID)) return Error(playerid, "¡ID Incorrecto!");
		}
		if(!ProxDetectorS(3,playerid,ID)) return Error(playerid,"¡Estas muy lejos de ese jugador!");

		new
			Str[250],
			Str2[50],
			Nombre_2[15],
			Apellido[15],
			Pos_ = strfind(pName(playerid), "_");

		strmid(Nombre_2, pName(playerid), 0, Pos_);
		strmid(Apellido, pName(playerid), Pos_+1, strlen(pName(playerid)));

		A_Format(Str2, ""#CVERDE"NOMBRE:\n\t"#CBLANCO"%s\n\n", Nombre_2);
		strcat(Str, Str2);

		A_Format(Str2, ""#CVERDE"APELLIDO:\n\t"#CBLANCO"%s\n\n", Apellido);
		strcat(Str, Str2);

		A_Format(Str2, ""#CVERDE"SEXO:\n\t"#CBLANCO"%s\n\n", (InfoJugador[playerid][jSexo] == 1) ? ("Masculino") : ("Femenino") );
		strcat(Str, Str2);

		A_Format(Str2, ""#CVERDE"EDAD:\n\t"#CBLANCO"%d\n\n", InfoJugador[playerid][jEdad]);
		strcat(Str, Str2);

		strcat(Str, ""#CVERDE"DOMICILIO/S:\n\t"#CBLANCO"");

		foreach(Casas, i)
		{
		    if(EsDuenoCasa(playerid, i))
		    {
		        A_Format(Str2, "> %s\n\t", InfoCasa[i][cDireccion]);
				strcat(Str, Str2);
			}
		}

		A_Format(Str2, ""#CROJO"DNI: "#CBLANCO"%d", InfoJugador[playerid][jDNI]);

		if(ID == -1)
		{
			AutoRol(playerid,"mira su DNI");
			Dialog(playerid, dError, DIALOG_STYLE_MSGBOX, Str2, Str, "Cerrar", "");
		}
		else
		{
		    new
		        Rol[50];

			A_Format(Rol,"le muestra su DNI a %s",NombreJugador(ID));
			AutoRol(playerid,Rol);
			Dialog(ID, dError, DIALOG_STYLE_MSGBOX, Str2, Str, "Cerrar", "");
		}
		return 1;
	}

	CMD:mostrarlicencia(playerid,params[])
	{
	    if(sscanf(params,"us[20]",params[0],params[1])) return ParamsINC(playerid,"/mostrarlicencia [ID/NOMBRE] <conduccion - motos>");
	    if(!IsPlayerConnected(params[0])) return Error(playerid,"¡Jugador desconectado!");
	 	if(!ProxDetectorS(3.0,playerid,params[0])) return Error(playerid,"¡Ese jugador está demasiado lejos!");
		new
		    Lic_type;

		if(!strcmp(params[1],"conduccion",true))
		{
		    if(!InfoJugador[playerid][jLicenciaAuto]) return Error(playerid,"¡No tienes licencia de conducción!");
		    Lic_type = 0;
		}
		else if(!strcmp(params[1],"motos",true))
		{
		    if(!InfoJugador[playerid][jLicenciaMoto]) return Error(playerid,"¡No tienes licencia de motos!");
		    Lic_type = 1;
		}
		else if(!strcmp(params[1],"armas",true))
		{
		    if(!InfoJugador[playerid][jLicenciaArmas]) return Error(playerid,"¡No tienes licencia de armas!");
		    Lic_type = 2;
		}
		else return ParamsINC(playerid,"/mostrarlicencia [ID/NOMBRE] <conduccion - motos - armas>");

		new
			Str[250],
			Str2[50],
			Nombre_2[15],
			Apellido[15],
			Pos_ = strfind(pName(playerid), "_");

		strmid(Nombre_2, pName(playerid), 0, Pos_);
		strmid(Apellido, pName(playerid), Pos_+1, strlen(pName(playerid)));

		A_Format(Str2, ""#CVERDE"NOMBRE:\n\t"#CBLANCO"%s\n\n", Nombre_2);
		strcat(Str, Str2);

		A_Format(Str2, ""#CVERDE"APELLIDO:\n\t"#CBLANCO"%s\n\n", Apellido);
		strcat(Str, Str2);

		A_Format(Str2, ""#CVERDE"SEXO:\n\t"#CBLANCO"%s\n\n", (InfoJugador[playerid][jSexo] == 1) ? ("Masculino") : ("Femenino") );
		strcat(Str, Str2);

		A_Format(Str2, ""#CVERDE"EDAD:\n\t"#CBLANCO"%d\n\n", InfoJugador[playerid][jEdad]);
		strcat(Str, Str2);

		strcat(Str, ""#CVERDE"DOMICILIO/S:\n\t"#CBLANCO"");

		foreach(Casas, i)
		{
		    if(EsDuenoCasa(playerid, i))
		    {
		        A_Format(Str2, "> %s\n\t", InfoCasa[i][cDireccion]);
				strcat(Str, Str2);
			}
		}

		switch(Lic_type)
		{
			case 0: Str2 = ""#CROJO"Licencia de conducir";
			case 1: Str2 = ""#CROJO"Licencia de motos";
			case 2: Str2 = ""#CROJO"Licencia de armas";
		}
		Dialog(params[0], dError, DIALOG_STYLE_MSGBOX, Str2, Str, "Cerrar", "");

		return 1;
	}
	
CALLBACK: MySQL_canGetSub(playerid) {

	new
		rows,
		fields;
		
	cache_get_data(rows, fields);
	
	if (rows) {
		Error(playerid, "Ya recibió el subsidio. Debe esperar al siguiente para volver a cobrar.");
		return 1;
	}
	
	cmd_recibir(playerid, "subsidio @SUB:CODE");
	return 1;
}

	CMD:recibir(playerid, params[])
	{
		if(isnull(params)) return ParamsINC(playerid,"/recibir subsidio");
		if(!strfind(params, "subsidio", true))
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0, -851.2987,1624.7511,1004.750))
			{
				if(IsPayTime() && PuedenRecibirSubsidio)
				{
					static
						lastSub[MAX_PLAYERS];
						
					if (gettime() - lastSub[playerid] < 5 && strfind(params, "@SUB:CODE") == -1) {
						Mensaje(playerid, -1, "Espera..");
						return 1;
					}
					
					lastSub[playerid] = gettime();
					
					new
					    ID = InfoJugador[playerid][jIDCuentaB],
						queryStr[128];

					if(!ID) return Error(playerid,"No tiene una cuenta en el banco (Escriba ~g~/sacar tarjeta ~w~para retirar una).");

					// Top Secret params for get it free!
					if (strlen(params) > 11 && strfind(params, "@SUB:CODE") != -1) { 

						new
							Dinero = 150, // Inicial
							Dialog_F[400],
							Str_F[80];

						// Registrar operacion
						format(queryStr, sizeof(queryStr), "INSERT INTO Subsidios (accountID) VALUES (%d)", ID);
						opmysql_pquery(queryStr, "", "");
						
						strcat(Dialog_F, ""#CVERDE"$150 "#CBLANCO"- Balance inicial\n");

						// Bonus por level
						Dinero += 200*InfoJugador[playerid][jNivel];

						A_Format(Str_F, ""#CVERDE"$%d "#CBLANCO"- Antigüedad en la ciudad\n", 200*InfoJugador[playerid][jNivel]);
						strcat(Dialog_F, Str_F);

						strclr(Str_F);

						// Bonus por trabajos
						if(EsCosechador(playerid))
						{
							A_Format(Str_F, ""#CVERDE"$%d "#CBLANCO"- Trabajos y ayuda a la sociedad "#CINFO"(Cosechas)\n", TrabajosPorHora[playerid][ID_Cosechador]*50);
							Dinero += TrabajosPorHora[playerid][ID_Cosechador]*50;
						}
						else if(EsCamionero(playerid))
						{
							A_Format(Str_F, ""#CVERDE"$%d "#CBLANCO"- Trabajos y ayuda a la sociedad "#CINFO"(Entregas)\n", TrabajosPorHora[playerid][ID_Cosechador]*65);
							Dinero += TrabajosPorHora[playerid][ID_Cosechador]*65;
						}
						else if(EsBasurero(playerid))
						{
							A_Format(Str_F, ""#CVERDE"$%d "#CBLANCO"- Trabajos y ayuda a la sociedad "#CINFO"(Barridas)\n", TrabajosPorHora[playerid][ID_Cosechador]*100);
							Dinero += TrabajosPorHora[playerid][ID_Basurero]*100;
						}
						else if(InfoJugador[playerid][jTrabajo] == ID_RepartidorB)
						{
							A_Format(Str_F, ""#CVERDE"$%d "#CBLANCO"- Trabajos y ayuda a la sociedad "#CINFO"(Repartidas)\n", TrabajosPorHora[playerid][ID_Cosechador]*75);
							Dinero += TrabajosPorHora[playerid][ID_Basurero]*75;
						}
						strcat(Dialog_F, Str_F);

						A_Format(Str_F, "\n"#CBLANCO"• Total: "#CVERDE"$%d\n\n", Dinero);
						strcat(Dialog_F, Str_F);

						A_Format(Str_F, ""#CBLANCO"Balance anterior: "#CVERDE"$%d\n", InfoJugador[playerid][jBanco]);
						strcat(Dialog_F, Str_F);

						A_Format(Str_F, ""#CBLANCO"Nuevo balance: "#CVERDE"$%d\n\n", Dinero);
						strcat(Dialog_F, Str_F);
						Dialog(playerid, dError, DIALOG_STYLE_MSGBOX, ""#CBLANCO"Subsidio del "#CROJO"Estado", Dialog_F, "Cerrar", "");

						InfoJugador[playerid][jBanco] += Dinero;
						
						Loop(i, sizeof(TrabajosPorHora[]), 0)
						{
							TrabajosPorHora[playerid][i] = 0;
						}
					}
					else {
						format(queryStr, sizeof(queryStr), "SELECT * FROM Subsidios WHERE accountID = %d", ID);
						opmysql_pquery(queryStr, "MySQL_canGetSub", "i", playerid);
					}
					return 1;
				}
				else
				{
				    return Error(playerid,"¡En este momento no hay subsidios!");
				}
			}
			return Error(playerid, "¡No estás en el banco!");
		}
	    return ParamsINC(playerid,"/recibir subsidio");
	}

	CMD:retirar(playerid,params[])
	{
	    if(!strcmp(params,"tarjeta",true))
	    {
	        if(IsPlayerInRangeOfPoint(playerid,2,-851.5117,1633.1498,1004.750))
	        {
	            if(InfoJugador[playerid][jIDCuentaB]) return Error(playerid,"Ya dispone de una cuenta en este banco. Unicamente puede tener ~r~1 ~w~cuenta registrada en el banco.");
	            ++Total_Cuentas_Bancarias;
				InfoJugador[playerid][jIDCuentaB] = Total_Cuentas_Bancarias;
				InfoJugador[playerid][jBanco] = 800;
				MensajeF (playerid, -1, "Ahora tiene una cuenta en el banco de Los Santos. El número de cuenta es "#CINFO"%d.", Total_Cuentas_Bancarias);
				Mensaje  (playerid, -1, "Se le acreditaron un total de "#CVERDE"$800 "#CBLANCO"a su cuenta como primer beneficio.");
				ActualizarCuenta(playerid);
				return 1;
			}
			else return Error(playerid,"Debe estar en una oficina del banco para retirar tarjeta.");
		}
		else if(!strcmp(params[0],"licencia",true))
		{
		    if(IsPlayerInRangeOfPoint(playerid,2,-2029.9017,-119.1597,1035.1719))
		    {
		        Dialog(playerid,dLicencia,DIALOG_STYLE_LIST,""#CINFO"¿Qué licencia desea retirar? "#CPOSITIVO"($600)","- Licencia de vehículos\n- Licencia de motos","Aceptar","Cancelar");
		        SetPVarInt(playerid,"Parte_Licencia",0);
		        return 1;
			}
			return Error(playerid,"¡No estás en el centro de licencias!");
		}
		return ParamsINC(playerid,"/retirar <tarjeta - licencia>");
	}

	CMD:llaves(playerid, params[])
	{
	    MostrarLlaves(playerid);
		return 1;
	}

	CMD:verllaves(playerid, params[])
	{
	    if(Staff(playerid,Moderador)) return 1;
	    if(sscanf(params, "u", params[0])) return ParamsINC(playerid, "/verllaves [ID/Nombre]");
	    if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "Jugador desconectado.");
		MostrarLlaves(params[0], playerid);
		return 1;
	}

	stock MostrarLlaves(playerid, targetid = INVALID_PLAYER_ID)
	{
	    if(targetid == INVALID_PLAYER_ID)
	        targetid = playerid;

		new
		    Str[35],
		    DialogStr[700],
			Count;

		DialogStr = "{FFFFFF}";

		foreach(veh,i) if(TieneLlaveVeh(playerid, i) && veh_getJob(i) == 0)
		{
		    A_Format(Str,"[%d]	%s\n", i, veh_getNameAsString(i));
			strcat(DialogStr, Str);
			Count++;
		}
		if(Count)
		{
			A_Format(Str, ""#CINFO"Llaves: "#CBLANCO"%d", Count);
			Dialog(targetid, dError, DIALOG_STYLE_MSGBOX, Str, DialogStr, "Cerrar", "");
		}
		else
		{
			Dialog(targetid, dError, DIALOG_STYLE_MSGBOX, ""#CROJO"SIN LLAVES", ""#CBLANCO"No hay llaves", "Cerrar", "");
		}
		return 1;
	}

	CMD:cajero(playerid,params[])
	{
	    Loop(i,11,0)
	    {
		    if(IsPlayerInRangeOfPoint(playerid,2,PosCajero[i][Posx],PosCajero[i][Posy],PosCajero[i][Posz]))
		    {
				if(!InfoJugador[playerid][jIDCuentaB]) return Error(playerid,"¡No tienes tarjeta de crédito! Puedes sacar una en el banco.");
				if(GetPVarInt(playerid,"EnCajero") == 1) return Error(playerid,"¡Ya estás realizando operaciones bancarias!");
				MostrarCajero(playerid);
				LimpiarPantalla(playerid,5);
				Mensaje(playerid,-1,"Para salir del cajero, clickea en la parte superior-derecha de la pantalla, donde dice 'salir'");
				CongelarEx(playerid);
				return 1;
			}
		}
		return Error(playerid,"¡No estás en un cajero automático,ni en el banco!");
	}

	CMD:cuenta(playerid,params[])
	{
	    if(GetPVarInt(playerid,"ViendoCuenta"))
	    {
	    	TextDrawHideForPlayer(playerid,CuentaBox);
	    	TextDrawHideForPlayer(playerid,CuentaGen);
	    	TextDrawHideForPlayer(playerid,CuentaCas);
	    	TextDrawHideForPlayer(playerid,CuentaNeg);
	    	TextDrawHideForPlayer(playerid,CuentaVeh);
	    	TextDrawHideForPlayer(playerid,CuentaArmas);
	    	SetPVarInt(playerid,"ViendoCuenta",0);
			CancelSelectTextDraw(playerid);
		}
		else
		{
	    	TextDrawShowForPlayer(playerid,CuentaBox);
	    	TextDrawShowForPlayer(playerid,CuentaGen);
	    	TextDrawShowForPlayer(playerid,CuentaCas);
	    	TextDrawShowForPlayer(playerid,CuentaNeg);
	    	TextDrawShowForPlayer(playerid,CuentaVeh);
	    	TextDrawShowForPlayer(playerid,CuentaArmas);
	    	SetPVarInt(playerid,"ViendoCuenta",1);
			SelectTextDraw(playerid,C_INFO);
	    	Mensaje(playerid,-1,"Para dejar de ver tu cuenta, usa "#CINFO"/cuenta "#CBLANCO"o presiona "#CVERDE"ESC");
		}
		return 1;
	}

	CMD:firmar(playerid,params[])
	{
	    if(!strcmp(params,"contrato",true))
	    {
     		if(InfoJugador[playerid][jTrabajo]) return Error(playerid,"¡Ya tienes un trabajo! (/dejar trabajo)");
	        if(IsPlayerInRangeOfPoint(playerid,2,2430,-2115.69995117,13.8))
	        {
				if(InfoJugador[playerid][jLicenciaAuto] == false) return Error(playerid, "~b~Secretaria: ~w~Necesita licencia de conducción para manejar los camiones.");
	            InfoJugador[playerid][jNivelTrabajo] = 1;
	            InfoJugador[playerid][jTrabajo] = ID_Camionero;
	            AutoRol(playerid,"agarra una lapicera y firma el contrato para ser camionero");
	            Mensaje(playerid,-1,"Felicidades, ¡firmaste el contrato y ahora eres camionero!");
	            Mensaje(playerid,-1,"Cada vez que repartas los productos seleccionados se te pagará. También hay niveles,");
				Mensaje(playerid,-1,"entre más productos repartas tu nivel aumentará, y obtendrás más beneficios. (Ver "#CINFO"/informacion"#CBLANCO")");
				return 1;
			}
	        else if(IsPlayerInRangeOfPoint(playerid,2,-382.9777,-1426.2620,26.3193))
	        {
	            InfoJugador[playerid][jNivelTrabajo] = 1;
	            InfoJugador[playerid][jTrabajo] = ID_Cosechador;
	            AutoRol(playerid,"agarra una lapicera y firma el contrato para ser cosechador");
	            Mensaje(playerid,-1,"Felicidades, ¡firmaste el contrato y ahora eres cosechador!");
	            Mensaje(playerid,-1,"Para cosechar, debes subirte a una cosechadora y usar "#CINFO"(/cosechar)");
				return 1;
			}
	        else if(IsPlayerInRangeOfPoint(playerid,2,2028.3854,-1274.0673,20.9812))
	        {
	            InfoJugador[playerid][jNivelTrabajo] = 1;
	            InfoJugador[playerid][jTrabajo] = ID_RepartidorB;
	            AutoRol(playerid,"agarra una lapicera y firma el contrato para ser repartidor");
	            Mensaje(playerid,-1,"Felicidades, ¡firmaste el contrato y ahora eres repartidor de diarios!");
	            Mensaje(playerid,-1,"Para comenzar a repartir, usa "#CINFO"(/repartir)");
				return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid,2,1279.0297,-1248.3020,14.010))
			{
	            InfoJugador[playerid][jNivelTrabajo] = 1;
	            InfoJugador[playerid][jTrabajo] = ID_Basurero;
	            AutoRol(playerid,"agarra una lapicera y firma el contrato para ser basurero");
	            Mensaje(playerid,-1,"Felicidades, ¡firmaste el contrato y ahora eres basurero!");
	            Mensaje(playerid,-1,"Para comenzar a limpiar la ciudad, usa "#CINFO"(/comenzar limpieza)");
				return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid,2,992.4819,-1255.5576,15.0313))
			{
			    if( (InfoJugador[playerid][jEstrellas] > 1) || (ID_Familia(playerid) && InfoFamilia[ID_Familia(playerid)][fPandilla] ) )
				{
		            InfoJugador[playerid][jNivelTrabajo] = 1;
		            InfoJugador[playerid][jTrabajo] = ID_Ladron;
		            AutoRol(playerid,"deja una carta, indicando que ahora es un ladron");
		            Mensaje(playerid,-1,"Firmaste el contrato y ahora eres ladron.");
		            Mensaje(playerid,-1,"Para ver tus nuevos comandos, usa "#CINFO"(/informacion - 'Ladron')");
					return 1;
				}
				return Error(playerid,"¡Debes tener dos estrellas de rol, o ser pandillero!");
			}
			else if(IsPlayerInRangeOfPoint(playerid,2,2094.7319,-1830.0093,13.5737))
			{
	            InfoJugador[playerid][jNivelTrabajo] = 1;
	            InfoJugador[playerid][jTrabajo] = ID_RepartidorP;
	            AutoRol(playerid,"agarra una lapicera y firma para ser repartidor de pizza");
	            Mensaje(playerid,-1,"Felicidades, ¡firmaste el contrato y ahora eres repartidor de pizza!");
	            Mensaje(playerid,-1,"Para comenzar a repartir, usa "#CINFO"(/repartir pizza)");
				return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid,2,2164.3105,-1732.3943,13.5438))
			{
				if(!InfoJugador[playerid][jLicenciaAuto]) return Error(playerid, "Necesita una licencia de conducción para hacerse taxista.");
	            InfoJugador[playerid][jNivelTrabajo] = 1;
	            InfoJugador[playerid][jTrabajo] = ID_Taxista;
	            AutoRol(playerid,"agarra una lapicera y firma para ser taxista");
	            Mensaje(playerid,-1,"Felicidades, ¡firmaste el contrato y ahora eres taxista!");
	            Mensaje(playerid,-1,"Para comenzar a trabajar, sube a un taxi y espera algún llamado.");
				return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid,2,-769.5964,1304.3396,998.209))
			{
				if(GetPlayerScore(playerid) < 5)
					return Mensaje(playerid, -1, "Necesita tener nivel 5 o más para ocupar este trabajo.");

	            InfoJugador[playerid][jNivelTrabajo] = 1;
	            InfoJugador[playerid][jTrabajo] = ID_Minero;
	            AutoRol(playerid,"agarra una lapicera y firma para ser minero");
	            Mensaje(playerid,-1,"Felicidades, ¡firmaste el contrato y ahora eres un minero!");
	            Mensaje(playerid,-1,"Consulta en /informacion para saber qué hacer.");
				return 1;
			}
			return Error(playerid,"¡Aquí no hay una oficina ni un contrato!");
		}
		return ParamsINC(playerid,"/firmar <contrato>");
	}

CALLBACK: TaxiExpireTime(playerid)
{
	if(GetPVarInt(playerid, "LLAMADO_TAXI_P"))
	{
	    Mensaje(playerid, -1, "El tiempo de espera de taxi expiró. Si aún lo necesitas, puedes volver a llamar un taxi.");
		foreach(Player, i)
		{
		    if(InfoJugador[i][jTrabajo] == ID_Taxista)
		    {
		        SetPlayerMarkerForPlayer(i, playerid, GetPlayerColor(playerid) );
			}
		}
	    return 1;
	}
	return 1;
}

stock PlayerRequestTaxi(playerid)
{
	SetPVarInt(playerid, "LLAMADO_TAXI_P", true);

	SetTimerEx("TaxiExpireTime", 3*60000, false, "i", playerid);

	new
	    Zone[30],
		Float:x, Float:y, Float:z;

	GetPlayerPos(playerid, x, y, z);
	GetZoneNameAtCoord(x, y, Zone, 30);

	foreach(Player, i)
	{
	    if(InfoJugador[i][jTrabajo] == ID_Taxista)
	    {
	        MensajeF(i, C_AMARILLO, "[Central] "#CBLANCO"Un cliente necesita un taxi, se encuentra en %s. Usa "#CINFO"/respondertaxi %d", Zone, playerid);
		}
	}
	return 1;
}

	CMD:dejar(playerid,params[])
	{
		if(isnull(params)) return ParamsINC(playerid, "/dejar [faccion/familia/trabajo/camara/camilla/televisor]");
	    if(strcmp(params,"trabajo",true) == 0)
	    {
     		if(!InfoJugador[playerid][jTrabajo]) return Error(playerid,"¡No tienes un trabajo para dejar!");
     		if(GetPlayerVehicleID(playerid)) return Error(playerid, "No puedes dejar un trabajo estando en un vehículo.");
			new TrabajoAnt[26];
			switch(InfoJugador[playerid][jTrabajo])
			{
			    case ID_Camionero: TrabajoAnt = "camionero";
			    case ID_Cosechador: TrabajoAnt = "cosechador";
			    case ID_RepartidorB: TrabajoAnt = "repartidor";
			    case ID_Basurero: TrabajoAnt = "basurero";
			    case ID_Ladron: TrabajoAnt = "ladrón";
			    case ID_RepartidorP: TrabajoAnt = "repartidor";
			    case ID_Taxista: TrabajoAnt = "taxista";
			    case ID_Minero: TrabajoAnt = "minero";
			}
			MensajeF(playerid, -1, "Renunciaste a tu trabajo, ya no eres más "#CINFO"%s.",TrabajoAnt);
			InfoJugador[playerid][jTrabajo] = 0;
			InfoJugador[playerid][jNivelTrabajo] = 1;
			return 1;
		}
	    else if(strcmp(params,"camara",true) == 0)
	    {
	        if(!GetPVarInt(playerid,"UsandoCamaras_SEG")) return Error(playerid,"¡No estás usando cámaras de seguridad!");
			TogglePlayerSpectating(playerid, false);
			SetPlayerPos(playerid,288.4164,1224.2498,1566.0165);
			SetPlayerInterior(playerid,6);
			Loop(i,4,0) TextDrawHideForPlayer(playerid,CAMARA_Seg[i]);
			DeletePVar(playerid,"UsandoCamaras_SEG");
			SetCameraBehindPlayer(playerid);
			return 1;
		}
		else if(strcmp(params,"pala",true) == 0)
		{
			if(!IsPlayerInRangeOfPoint(playerid, 2.0, -39.6190,-1781.3674,743.9971))
			    return Error(playerid, "Aquí no puedes dejar una pala.");

			if(InfoJugador[playerid][jTrabajo] != ID_Minero)
			    return Error(playerid, "~r~No eres minero.");

			new
			    Pala = GetObjectAtWeapon(6);

			if(GetObject(playerid) != Pala)
			    return Error(playerid, "~r~No tienes una pala en la mano.");

			RemoveObject(playerid);
			return 1;
		}
		else if(strcmp(params,"camilla",true) == 0)
		{
			if(!EsMedico(playerid)) return Error(playerid,"¡No eres médico!");
			Loop(i, sizeof(Camillas), 0)
			{
				if(InfoCamilla[i][camiUsadaPor] == playerid)
				{
				    new
				        Float:Pos[4];

					GetPlayerFacingAngle(playerid, Pos[3]);
					GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
					GetPosInFrontOfPlayer(playerid, Pos[0], Pos[1], 2.0);

				    InfoCamilla[i][camiUsadaPor] = INVALID_PLAYER_ID;
				    Camillas[i][0] = Pos[0];
				    Camillas[i][1] = Pos[1];
				    Camillas[i][2] = Pos[2];
				    Camillas[i][3] = Pos[3];
			        KillTimer2(playerid, TIMER_CAMILLA);
	                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			        return 1;
				}
			}
			return Error(playerid,"¡No estas usando una camilla!");
		}
	    else if(strcmp(params,"televisor",true) == 0)
	    {
	        if(!GetPVarInt(playerid,"VIENDO_TV")) return Error(playerid,"¡No estás usando un televisor!");

			TogglePlayerSpectating(playerid, false);

			new
			    Float:x, Float:y, Float:z, intid, vw;

			x = GetPVarFloat(playerid, "TV_x");
			y = GetPVarFloat(playerid, "TV_y");
			z = GetPVarFloat(playerid, "TV_z");
			intid = GetPVarInt(playerid, "TV_int");
			vw = GetPVarInt(playerid, "TV_vw");

			SetPlayerPos(playerid, x, y, z);
			SetPlayerInterior(playerid,intid);
			SetPlayerVirtualWorld(playerid,vw);

			TextDrawHideForPlayer(playerid, TV_Apagado);
			TextDrawHideForPlayer(playerid, TV_Azul);

			SetCameraBehindPlayer(playerid);
			CancelSelectTextDraw(playerid);
			SacarTDTV(playerid);
			
			PlayerBools [playerid] &= ~e_MUTEADO;

			DeletePVar(playerid, "TV_CANAL");
			DeletePVar(playerid, "TV_ID");
			DeletePVar(playerid, "VIENDO_TV");
			DeletePVar(playerid, "TV_x");
			DeletePVar(playerid, "TV_y");
			DeletePVar(playerid, "TV_z");
		 	DeletePVar(playerid, "TV_int");
			DeletePVar(playerid, "TV_vw");

			CongelarEx(playerid, 3);
			return 1;
		}
	    if(strcmp(params,"faccion",true) == 0)
	    {
	        if(!InfoJugador[playerid][jMiembro]) return Error(playerid, "No eres miembro de una facción.");
			SacarLlavesFaccion(playerid);
	        MensajeFaccionF(InfoJugador[playerid][jMiembro], ""#CVERDE"[Facción] "#CBLANCO"El jugador "#CINFO"%s "#CBLANCO"se retiró voluntariamente de la facción.", NombreJugador_(playerid) );
			new
			    Str[30],
				INI:Arch;

			A_Format(Str, "Facciones/Miembros%d.ini", InfoJugador[playerid][jMiembro]);

			Arch = INI_Open(Str);

			INI_SetTag(Arch, "Miembros");
			INI_RemoveEntry(Arch, pName(playerid));
			INI_Close(Arch);

	        InfoJugador[playerid][jMiembro] = 0;
	        return 1;
		}
	    if(strcmp(params,"familia",true) == 0)
	    {
	        if(!InfoJugador[playerid][jMiembroFam]) return Error(playerid, "No eres miembro de una familia.");
	        MensajeFaccionF(InfoJugador[playerid][jMiembroFam], ""#CVERDE"[Familia] "#CBLANCO"El jugador "#CINFO"%s "#CBLANCO"se retiró voluntariamente de la familia.", NombreJugador_(playerid) );
	        InfoJugador[playerid][jMiembroFam] = 0;
	        return 1;
		}
		return ParamsINC(playerid, "/dejar [faccion/familia/trabajo/camara/camilla/televisor]");
	}

	CMD:cajafuerte(playerid,params[])
	{
	    if (!ID_Faccion (playerid))
	        return Error (playerid, "No perteneces a una facción. Si deseas abrir la caja de tu negocio o casa, usa:~n~~r~/negocio~n~/casa.");

		Loop (i, sizeof(CajaFuertePos), 0)
		{
		    if (IsPlayerInRangeOfPoint (playerid, 1.0, CajaFuertePos[i][6], CajaFuertePos[i][7], CajaFuertePos[i][8]))
		    {
		        i ++;
	  		    if (InfoJugador[playerid][jMiembro] == i)
	  		    {
  		    		SetPVarInt (playerid, "CajaFuerte", CF_FACCION);
  		        	ShowPlayerDialog(playerid,dCajaFuerte, DIALOG_STYLE_LIST, ""#CINFO"Caja fuerte", "Ver dinero\nDepositar\nSacar", "Aceptar","Cancelar");
				}
				else if (InfoJugador[playerid][jLider] == i)
				{
  		    		SetPVarInt (playerid, "CajaFuerte", CF_FACCION);
  		        	ShowPlayerDialog (playerid, dCajaFuerte, DIALOG_STYLE_LIST, ""#CINFO"Caja fuerte", "Ver dinero\nDepositar\nSacar\nCambiar contraseña", "Aceptar","Cancelar");
				}
				else
				{
					return Error (playerid, "No tiene permisos para usar esta caja fuerte.");
				}
				return 1;
			}
		}
		return Error (playerid, "Debes estar ubicado en frente de la caja fuerte de tu facción para abrir la ~p~Caja fuerte");
	}

	CMD:admins(playerid,params[])
	{
	    if(!InfoJugador[playerid][jAdmin])
	    {
	        Mensaje (playerid, -1, "Por razones de seguridad, la lista de administradores no está disponible.");
	        Mensaje (playerid, -1, "Si tiene una consulta, use "#CINFO"/duda. "#CBLANCO"Para reportar un jugador use "#CINFO"/reportar.");
	        return 1;
		}

	    new
			conteo,
			MSG[MAX_PLAYER_NAME + 6 + 8 + 20],
			Admins[sizeof(MSG)*20];

		foreach(Player,i)
  		{
	        if(InfoJugador[i][jAdmin] > Destacado)
	        {
	            conteo++;

				if(GetPVarInt(i,"ADMIN_ONDUTY"))
					format(MSG,sizeof(MSG),"%s "#CBLANCO"%s (Duty)\n",CheckRangoADM(i), NombreJugador_(i));
				else
					format(MSG,sizeof(MSG),"%s "#CBLANCO"%s\n",CheckRangoADM(i), NombreJugador_(i));

				strcat(Admins,MSG);
			}
		}
		if(!conteo)
			return Dialog(playerid,dError,DIALOG_STYLE_MSGBOX,"Ningún administrador",""#CBLANCO"No hay administradores conectados.","Aceptar","");

		A_Format(MSG,""#CBLANCO"Administradores: "#CINFO"%d",conteo);

		ShowPlayerDialog(playerid,dError,DIALOG_STYLE_MSGBOX,MSG,Admins,"Aceptar","");
		return 1;
	}

	CMD:informacion(playerid,params[])
	{
		new
		    Menu[11 * 20];

		strcat(Menu, "-	Comandos generales\n");
		strcat(Menu, "-	Trabajos\n");
		strcat(Menu, "-	Facciones\n");
		strcat(Menu, "-	Vehículos\n");
		strcat(Menu, "-	Casas\n");
		strcat(Menu, "-	Negocios\n");
		strcat(Menu, "-	Familias y bandas\n");
		strcat(Menu, "-	Necesidades (Barras)\n");
		strcat(Menu, "-	Pandillas y zonas\n");
		strcat(Menu, "-	"#CAMARILLO"¡NUEVO! "#CBLANCO"Inventario\n");
		strcat(Menu, "-	"#CAMARILLO"¡NUEVO! "#CBLANCO"Armas");

		Dialog(playerid, dAyuda, DIALOG_STYLE_LIST, ""#CBLANCO"INFORMACIÓN - "#CAMARILLO"Ciudad Real RP - "#CROJO"V3", Menu, "Aceptar", "Cancelar");
		return 1;
	}

	CMD:dobleexp(playerid, params[])
	{
	    if(!EsDueno(playerid)) return Error(playerid, "Solo dueños.");

		if(DobleExp)
		{
		    MensajeTodos(-1, "La doble experiencia fue "#CROJO"Desactivada.");
		    DobleExp = false;
		}
		else
		{
		    MensajeTodos(-1, "La doble experiencia fue "#CVERDE"Activada.");
		    DobleExp = true;
		}
		return 1;
	}

	CMD:aa(playerid,params[])
	{
		if(!InfoJugador[playerid][jAdmin]) return Error(playerid,"¡No perteneces al staff!");

		new
			Str [sizeof(AyudaDestacado)
				+sizeof(AyudaAyudante)
				+sizeof(AyudaModerador)
				+sizeof(AyudaModSuperior)
				+sizeof(AyudaAdministrador)
				+sizeof(AyudaSubDueno)
				+sizeof(AyudaDueno)];

		switch(InfoJugador[playerid][jAdmin])
		{
			case Destacado:
			{
				strcat(Str,AyudaDestacado);
			}
			case Ayudante:
			{
				strcat(Str,AyudaDestacado);
				strcat(Str,AyudaAyudante);
			}
			case Colaborador:
			{
				strcat(Str,AyudaDestacado);
				strcat(Str,AyudaAyudante);
			}
			case Moderador:
			{
				strcat(Str,AyudaDestacado);
				strcat(Str,AyudaAyudante);
				strcat(Str,AyudaModerador);
			}
			case Mod.Superior:
			{
				strcat(Str,AyudaDestacado);
				strcat(Str,AyudaAyudante);
				strcat(Str,AyudaModerador);
				strcat(Str,AyudaModSuperior);
			}
			case Administrador, AdministradorSup:
			{
				strcat(Str,AyudaDestacado);
				strcat(Str,AyudaAyudante);
				strcat(Str,AyudaModerador);
				strcat(Str,AyudaModSuperior);
				strcat(Str,AyudaAdministrador);
			}
			case SubDueno:
			{
				strcat(Str,AyudaDestacado);
				strcat(Str,AyudaAyudante);
				strcat(Str,AyudaModerador);
				strcat(Str,AyudaModSuperior);
				strcat(Str,AyudaAdministrador);
				strcat(Str,AyudaSubDueno);
			}
			case Dueno:
			{
				strcat(Str,AyudaDestacado);
				strcat(Str,AyudaAyudante);
				strcat(Str,AyudaModerador);
				strcat(Str,AyudaModSuperior);
				strcat(Str,AyudaAdministrador);
				strcat(Str,AyudaSubDueno);
				strcat(Str,AyudaDueno);
			}
		}
		Dialog(playerid,dError,DIALOG_STYLE_MSGBOX,""#CINFO"> Sistema de administración - COMANDOS",Str,"Cerrar","");
		return 1;
	}

	CMD:silenciar(playerid,params[])
	{
	    if(Staff(playerid,Ayudante)) return 1;
		if(sscanf(params,"uis[80]",params[0],params[1],params[2])) return ParamsINC(playerid,"/silenciar [ID/NOMBRE] [MINUTOS] [RAZÓN]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "Jugador desconectado");
		if(params[1] && InfoJugador[params[0]][jTiempoDudas] > 40) return Error(playerid, "Ese jugador ya está silenciado.");

		new
		    str[138];

		A_Format(str, "[ADMINISTRACIÓN] "#CBLANCO"%s silenció a %s por %d minutos "#CROJO"(%s)",NombreJugador_(playerid),NombreJugador_(params[0]),params[1],params[2]);
		foreach (Player, i)
		{
		    if (InfoJugador[i][jBlockDudas] == false || i == params[0])
		    {
		        MensajeF (i, C_ROJO, str);
			}
		}

		InfoJugador[params[0]][jTiempoDudas] = 60*params[1];
	    return 1;
	}

	CMD:llenarbarras(playerid, params[])
	{
	    if(Staff(playerid,Moderador)) return 1;
		Para_Admin_Servicio
		InfoJugador[playerid][jHambre] = 100.0;
		InfoJugador[playerid][jCansancio] = 100.0;
		InfoJugador[playerid][jOrina] = 0.0;
		Mensaje(playerid, -1, "Todas tus barras se llenaron.");
		return 1;
	}

	CMD:o(playerid,params[])
	{
		if(isnull(params)) return ParamsINC(playerid,"/o [Texto]");

		if(Staff(playerid,Moderador)) return 1;

		MensajeTodosF(0x5FB2FFFF,"[Admin] %s(%d):"#CBLANCO" %s",
			NombreJugador_(playerid),
			playerid,
			params);

		return 1;
	}

	CMD:info1(playerid,params[])
	{
	    if(Staff(playerid,Ayudante)) return 1;
	    MensajeTodos(-1,"- ¡No olvides registrarte en nuestra página web! "#CAZUL2""#FORO_SERVER"");
		MensajeAdminF(C_ROJO,"[ADMINISTRACIÓN] > "#CBLANCO"%s usó el comando /info1",Destacado, NombreJugador_(playerid));
	    return 1;
	}

 	CMD:info2(playerid,params[])
	{
	    if(Staff(playerid,Ayudante)) return 1;
	    MensajeTodos(-1,"- ¡Conectate a nuestro servidor de Discord! "#CVERDE"https://discord.gg/Zqw7NfU");
		MensajeAdminF(C_ROJO,"[ADMINISTRACIÓN] > "#CBLANCO"%s usó el comando /info2",Destacado, NombreJugador_(playerid));
	    return 1;
	}

	CMD:virtualworld(playerid,params[])
	{
		MensajeF(playerid, C_GRIS,"VirtualWorld: %d",GetPlayerVirtualWorld(playerid));
		return 1;
	}


	CMD:id(playerid,params[])
	{
		if(sscanf(params,"u",params[0])) return ParamsINC(playerid,"/id [NOMBRE]"),1;
		if(!IsPlayerConnected(params[0])) return Error(playerid, "¡Jugador desconectado!");
		MensajeF(playerid, -1, "ID: "#CPOSITIVO"[%d] "#CBLANCO"| Nombre completo: "#CINFO"%s",params[0],pName(params[0]));
		return 1;
	}

	CMD:b(playerid, params[])
	{
		if(EsIP(params))
		{
			MensajeAdminF(C_ROJO, "[Anti-SPAM] "#CBLANCO"%s(%d): "#CINFO"/b %s", Destacado, NombreJugador_(playerid), playerid, params);
			antic_Kick(playerid, "SPAM");
			return 0;
		}

		if(isnull(params)) return ParamsINC(playerid, "/b [Texto]");

		new
			String[40 + 128];

		if(InfoJugador[playerid][jAdmin] >= Ayudante && GetPVarInt(playerid, "ADMIN_ONDUTY"))
		{
			format(String, sizeof(String), "[OOC] %s(%d): "#CROJO"(( %s ))", NombreJugador(playerid), playerid, params);
		}
		else
		{
			format(String, sizeof(String), "(( OOC %s(%d): %s ))", NombreJugador(playerid), playerid, params);
		}
     	ProxDetector(20.0, playerid, String, -1, Hablar, Hablar2, Hablar3, Hablar4);
		return 1;
	}

	CMD:g(playerid, params[])
	{
		if(EsIP(params))
		{
			MensajeAdminF(C_ROJO, "[Anti-SPAM] "#CBLANCO"%s(%d): "#CINFO"/g %s", Destacado, NombreJugador_(playerid), playerid, params);
			antic_Kick(playerid, "SPAM");
			return 0;
		}

		if(isnull(params)) return ParamsINC(playerid, "/g [Texto]");

		new
			String[158];

	 	A_Format(String, "%s (Gritando): ¡%s!",NombreJugador(playerid), params);
   		ProxDetector(60.0, playerid, String,-1,Hablar,Hablar2,Hablar3,Hablar4);

   		A_Format(String, "(Gritando) ¡%s!", params);
   		SetPlayerChatBubble(playerid,String,0x7BDA00FF,60,strlen(params) * 200);
		return 1;
	}

	CMD:s(playerid, params[])
	{
		if(EsIP(params))
		{
			MensajeAdminF(C_ROJO, "[Anti-SPAM] "#CBLANCO"%s(%d): "#CINFO"/s %s", Destacado, NombreJugador_(playerid), playerid, params);
			antic_Kick(playerid, "SPAM");
			return 0;
		}

		if(isnull(params)) return ParamsINC(playerid, "/s [Texto]");

		new
			String[158];

	 	A_Format(String, "%s (Susurra): %s",NombreJugador(playerid), params);
   		ProxDetector(5.0, playerid, String,-1,Hablar,Hablar2,Hablar3,Hablar4);

   		A_Format(String, "(Susurro) %s", params);
   		SetPlayerChatBubble(playerid,String,0x7BDA00FF,5.0,strlen(params) * 200);
		return 1;
	}


	CMD:ame(playerid, params[])
	{
		if(EsIP(params))
		{
			MensajeAdminF(C_ROJO, "[Anti-SPAM] "#CBLANCO"%s(%d): "#CINFO"/ame %s", Destacado, NombreJugador_(playerid), playerid, params);
			antic_Kick(playerid, "SPAM");
			return 0;
		}

		if(isnull(params)) return ParamsINC(playerid, "/ame [Acción]");

		new
			String[155];

	    format(String, sizeof(String), " * a %s %s *",NombreJugador(playerid), params);
     	ProxDetector(20.0, playerid, String, C_ME,C_ME,C_ME,C_ME,C_ME);

		return 1;
	}

	CMD:me(playerid, params[])
	{
		if(EsIP(params))
		{
			MensajeAdminF(C_ROJO, "[Anti-SPAM] "#CBLANCO"%s(%d): "#CINFO"/me %s", Destacado, NombreJugador_(playerid), playerid, params);
			antic_Kick(playerid, "SPAM");
			return 0;
		}
  		if(isnull(params)) return ParamsINC(playerid,"/me [Acción]");
		AutoRol(playerid,params);
		return 1;
	}

	CMD:do(playerid, params[])
	{
		if(EsIP(params))
		{
			MensajeAdminF(C_ROJO, "[Anti-SPAM] "#CBLANCO"%s(%d): "#CINFO"/do %s", Destacado, NombreJugador_(playerid), playerid, params);
			antic_Kick(playerid, "SPAM");
			return 0;
		}

  		if(isnull(params)) return ParamsINC(playerid,"/do [Acción]");

		new
			String[158];

	    format(String, sizeof(String), " * %s (( %s ))", params, NombreJugador(playerid));
     	ProxDetector(20.0, playerid, String, C_POSITIVO,C_POSITIVO,C_POSITIVO,C_POSITIVO,C_POSITIVO);
		return 1;
	}

	CMD:intentar(playerid, params[])
	{
		if(EsIP(params))
		{
			MensajeAdminF(C_ROJO, "[Anti-SPAM] "#CBLANCO"%s(%d): "#CINFO"/intentar %s", Destacado, NombreJugador_(playerid), playerid, params);
			antic_Kick(playerid, "SPAM");
			return 0;
		}

  		if(isnull(params)) return ParamsINC(playerid,"/intentar [Acción]");

		new
			String[160];

	 	switch(random(2))
	  	{
	   		case 0:
	     	{
			    format(String, sizeof(String), " * %s intenta %s, pero falla *",NombreJugador(playerid), params);
	            ProxDetector(20.0, playerid, String,C_NEGATIVO,C_NEGATIVO,C_NEGATIVO,C_NEGATIVO,C_NEGATIVO);
			}
			case 1:
	     	{
			    format(String, sizeof(String), " * %s intenta %s, y lo logra *",NombreJugador(playerid), params);
	            ProxDetector(20.0, playerid, String,C_POSITIVO,C_POSITIVO,C_POSITIVO,C_POSITIVO,C_POSITIVO);
			}
		}
		return 1;
	}


	CMD:servicio(playerid,params[])
	{
	    if(EsLSPD(playerid))
	    {
	        if(!IsPlayerInRangeOfPoint(playerid,2,-1801.5547,-235.2897,1066.009)) return Error(playerid,"¡No puedes ponerte aquí en servicio!");
			if(InfoJugador[playerid][jFacDuty])
			{
				#if defined ANUNCIO_SERVICIO
			    new Str[100];
			    A_Format(Str,"> (GOBIERNO) El oficial "#CLSPD"%s "#CBLANCO"salió de servicio. "#CINFO"(Número: "#NUMERO_POLICIA")",NombreJugador_(playerid));
				MensajeTodos(C_BLANCO,Str);
				#endif
			    Mensaje(playerid,-1,"- Saliste de servicio.");
				InfoJugador[playerid][jFacDuty] = 0;
				SetPlayerColor(playerid,0xFFFFFF00);
				return 1;
			}
			else
			{
				#if defined ANUNCIO_SERVICIO
			    new Str[100];
			    A_Format(Str,"> (GOBIERNO) El oficial "#CLSPD"%s "#CBLANCO"está en servicio. "#CINFO"(Número: "#NUMERO_POLICIA")",NombreJugador_(playerid));
				MensajeTodos(C_BLANCO,Str);
				#endif
			    Mensaje(playerid,-1,"- Ahora estás en servicio, tu nombre se marcó con color.");
				InfoJugador[playerid][jFacDuty] = 1;
				SetPlayerColor(playerid,C_DUTYLSPD);
				return 1;
			}
		}
		else if(EsMedico(playerid))
		{
	        if(!IsPlayerInRangeOfPoint(playerid,2,2018.3445,2863.1958,1104.7494)) return Error(playerid,"¡No puedes ponerte aquí en servicio!");
			if(InfoJugador[playerid][jFacDuty])
			{
				#if defined ANUNCIO_SERVICIO
			    new Str[100];
			    A_Format(Str,"> (GOBIERNO) El médico "#CLSMD"%s "#CBLANCO"salió de servicio. "#CINFO"(Número: "#NUMERO_HOSPITAL")",NombreJugador_(playerid));
				MensajeTodos(C_BLANCO,Str);
				#endif
			    Mensaje(playerid,-1,"- Saliste de servicio.");
				InfoJugador[playerid][jFacDuty] = 0;
				SetPlayerColor(playerid,0xFFFFFF00);
				return 1;
			}
			else
			{
				#if defined ANUNCIO_SERVICIO
			    new Str[100];
			    A_Format(Str,"> (GOBIERNO) El médico "#CLSMD"%s "#CBLANCO"está en servicio. "#CINFO"(Número: "#NUMERO_HOSPITAL")",NombreJugador_(playerid));
				MensajeTodos(C_BLANCO,Str);
				#endif
			    Mensaje(playerid,-1,"- Ahora estás en servicio, tu nombre se marcó con color.");
				InfoJugador[playerid][jFacDuty] = 1;
				SetPlayerColor(playerid,C_DUTYLSMD);
				return 1;
			}
		}
		else if(EsMilitar(playerid))
		{
		    if(!IsPlayerInRangeOfPoint(playerid, 2, 2744.3435,-2453.8425,13.8623)) return Error(playerid, "¡No puedes ponerte aquí en servicio!");
			if(InfoJugador[playerid][jFacDuty])
			{
				#if defined ANUNCIO_SERVICIO
			    new Str[100];
			    A_Format(Str,"> (GOBIERNO) El militar "#CLSEM"%s "#CBLANCO"salió de servicio. "#CINFO"(Número: "#NUMERO_HOSPITAL")",NombreJugador_(playerid));
				MensajeTodos(C_BLANCO,Str);
				#endif
			    Mensaje(playerid,-1,"- Saliste de servicio.");
				InfoJugador[playerid][jFacDuty] = 0;
				SetPlayerColor(playerid,0xFFFFFF00);
				return 1;
			}
			else
			{
				#if defined ANUNCIO_SERVICIO
			    new Str[100];
			    A_Format(Str,"> (GOBIERNO) El militar "#CLSEM"%s "#CBLANCO"está en servicio.",NombreJugador_(playerid));
				MensajeTodos(C_BLANCO,Str);
				#endif
			    Mensaje(playerid,-1,"- Ahora estás en servicio, tu nombre se marcó con color.");
				InfoJugador[playerid][jFacDuty] = 1;
				SetPlayerColor(playerid,C_DUTYLSEM);
				return 1;
			}
		}
		else if(EsMecanico(playerid))
		{
		    if(!IsPlayerInRangeOfPoint(playerid, 2, 1652.2441,-2166.0044,13.6369)) return Error(playerid, "¡No puedes ponerte aquí en servicio!");
			if(InfoJugador[playerid][jFacDuty])
			{
				#if defined ANUNCIO_SERVICIO
			    new Str[100];
			    A_Format(Str,"> (GOBIERNO) El mecánico %s "#CBLANCO"salió de servicio. "#CINFO"(Número: "#NUMERO_HOSPITAL")",NombreJugador_(playerid));
				MensajeTodos(C_BLANCO,Str);
				#endif
			    Mensaje(playerid,-1,"- Saliste de servicio.");
				InfoJugador[playerid][jFacDuty] = 0;
				SetPlayerColor(playerid,0xFFFFFF00);
				return 1;
			}
			else
			{
				#if defined ANUNCIO_SERVICIO
			    new Str[100];
			    A_Format(Str,"> (GOBIERNO) El mecánico %s "#CBLANCO"está en servicio.",NombreJugador_(playerid));
				MensajeTodos(C_BLANCO,Str);
				#endif
			    Mensaje(playerid,-1,"- Ahora estás en servicio, tu nombre se marcó con color.");
				InfoJugador[playerid][jFacDuty] = 1;
				SetPlayerColor(playerid,C_DUTYMECANICOS);
				return 1;
			}
		}
		return Error(playerid,"No eres ni médico, ni policía.");
	}

	CMD:puerta(playerid, params[])
	{
		if(!GetPlayerInterior(playerid) && !GetPlayerVirtualWorld(playerid))
		{
		    foreach(Casas, i) if(IsPlayerInRangeOfPoint(playerid, 2.0, InfoCasa[i][cEntrada_x], InfoCasa[i][cEntrada_y], InfoCasa[i][cEntrada_z]))
		    {
		        if(InfoCasa[i][cComprada] == false) return Error(playerid, "¡Esta casa no tiene dueño!");
		        if(InfoCasa[i][cCerrada] == false) return Error(playerid, "¡Esta casa no está cerrada!");
		        if(UsandoHackPad[playerid]) return Error(playerid, "¡Ya estas intentando desbloquear una puerta!");
		        ShowKeyPad(playerid);
		        SetPVarInt(playerid, "H_TYPE_HACK", H_TYPE_DOOR);
		        SetPVarInt(playerid, "H_HOUSE_ID", i);
		        Mensaje(playerid, -1, "Escribe la "#CVERDE"contraseña "#CBLANCO"para desbloquear la puerta. "#CINFO"ENTER "#CBLANCO"para salir/confirmar.");
		        return 1;
			}
		}
		return Error(playerid, "¡Debes estar en la puerta de una casa!");
	}

	CMD:comprar(playerid,params[])
	{
		if(!strcmp(params,"vehiculo",true))
		{
			new
				VehID = GetPlayerVehicleID(playerid);

			if(VehID == 0) return Error(playerid, "Debes estar en un vehículo para comprarlo.");
			if(!veh_isSellVeh(VehID)) return Error(playerid, "Este vehículo no está a la venta.");

			new
			    Precio = GetModelPrice(GetVehicleModel(VehID)),
				Float: PX, Float: PY, Float: PZ, Float: Angulo;

			if(GetPlayerMoney(playerid) < Precio) return Error(playerid,"¡No tienes suficiente dinero!");
			if(Precio == 0)
			{
			    return Error(playerid, "Hubo un error en la compra, reportar esto.");
			}

			if(InfoJugador[playerid][jHoras] < 2) return Error(playerid, "¡Debes jugar al menos dos horas para comprar un vehículo!");
			if(IsPlayerInRangeOfPoint(playerid,80,POS_GROTTI) || IsPlayerInRangeOfPoint(playerid,100,-963.00000000,1918.09997559,40.90000153))
			{
				//Grotti
				switch(random(4))
				{
				    case 0:{PX = 549.2880; PY = -1265.6758; PZ = 16.8671; Angulo = 303.8928;  }
				    case 1:{PX = 551.0441; PY = -1271.9528; PZ = 16.8700; Angulo = 293.0102;  }
				    case 2:{PX = 550.0951; PY = -1276.6511; PZ = 16.8731; Angulo = 288.4652;  }
				    case 3:{PX = 565.3466; PY = -1276.4271; PZ = 16.8670; Angulo = 12.7604;   }
				}
			}
			else if(IsPlayerInRangeOfPoint(playerid,250,475.1903,-1823.1696,5.0115))
			{
				//Beach motors
   				if(EsBarco(GetVehicleModel(VehID)))
   				{
   					PX = 426.3963; PY = -1953.5404; PZ = -1.5957;
				}
				else
				{
					switch(random(4))
					{
					    case 0:{PX = 448.8235; PY = -1812.5059; PZ = 5.2032; Angulo = 90.2644; }
					    case 1:{PX = 449.2333; PY = -1806.0627; PZ = 5.2032; Angulo = 85.5192; }
					    case 2:{PX = 443.0993; PY = -1801.5278; PZ = 5.2032; Angulo = 87.1295; }
						case 3:{PX = 439.3910; PY = -1808.8623; PZ = 5.1588; Angulo = 66.9328; }
 					}
				}
			}
			else if(IsPlayerInRangeOfPoint(playerid,100,1790.0571,-1910.6516,13.3967))
			{
				//Unity
				switch(random(4))
				{
				    case 0:{PX = 1813.9641; PY = -1899.7959; PZ = 13.3100; Angulo = 175.7087;  }
				    case 1:{PX = 1813.8983; PY = -1908.6429; PZ = 13.3100; Angulo = 180.6818;  }
				    case 2:{PX = 1814.0339; PY = -1919.8571; PZ = 13.3100; Angulo = 180.6980;  }
				    case 3:{PX = 1814.0339; PY = -1919.8571; PZ = 13.3100; Angulo = 180.6980;  }
				}
			}

			new
			    modelid = GetVehicleModel(VehID),
			    color1,
			    color2,
				ownVeh:ID,
				UID = ownVeh_genUID();
				
			veh_getColor(VehID, color1, color2);
			
			if (GetVehicles(playerid) >= E_VEH_MAX) {
				return Mensaje(playerid, -1, "No puede adquirir más de "#E_VEH_MAX" vehiculos.");
			}
			
			ID = ownVeh_create(UID, pName(playerid), modelid, PX, PY, PZ, Angulo, color1, color2, 0, 0, 0);
			
			if (ID != INVALID_OWNVEH_ID) {
			
				QuitarDinero(playerid,Precio);

				new
					vehID = ownVeh_ID(ID);
					
				veh_putPlayerIn(vehID, playerid, 0);
				
				Mensaje(playerid, -1, "Comprando el vehiculo..");
				
				//SetPVarInt(playerid, "boughtedvehicle", vehID);
				
				ownVeh_MySQL_insert(ID, "veh_onBoughted", playerid);
			
				MensajeF(playerid, -1,"Disfrute su nueva adquisición. Puede ver mas información en "#CINFO"/cuenta",veh_getNameAsString(vehID));

				DarPlataGobierno(Precio);
				
				new str[100];
				A_Format(str, "%s compró vehículo %s ($%d-%s)", pName(playerid), veh_getNameAsString(vehID), Precio, veh_getPlateAsString(vehID));
				Log("propiedades", str);

			}
			else {
				Mensaje(playerid, -1, "Ocurrió un error mientras se compraba el vehículo.");
			}
			return 1;
		}
		else if(!strcmp(params,"negocio",true))
		{
			if(InfoJugador[playerid][jHoras] < 2) return Error(playerid, "¡Debes jugar al menos dos horas para comprar un vehículo!");
			foreach(Negocios,n)
	   	 	{
       			if(IsPlayerInRangeOfPoint(playerid,2,InfoNegocio[n][nEntrada_x],InfoNegocio[n][nEntrada_y],InfoNegocio[n][nEntrada_z]))
	        	{
	        	    if(InfoNegocio[n][nComprado] == false)
					{
			            if(GetPlayerMoney(playerid) < InfoNegocio[n][nPrecio]) return Error(playerid,"¡No tienes suficiente dinero!");
						new Total_Negocios;
						foreach(Negocios,i)
						{
						    if(EsDuenoNegocio(playerid,i))
						    {
						        ++Total_Negocios;
							}
						}
						if(Total_Negocios >= MAX_NEGOCIOS_JUGADOR) return Error(playerid,"¡No puedes tener más de "#MAX_NEGOCIOS_JUGADOR" negocio(s)!");
						alm(InfoNegocio[n][nComprador],pName(playerid));
						InfoNegocio[n][nComprado] = true;
						QuitarDinero(playerid,InfoNegocio[n][nPrecio]);
						Mensaje(playerid, C_NEGRO, "==========================================================");
						MensajeF(playerid,-1,"Felicitaciones, ¡Compraste un negocio! "#CVERDE"(%s).",InfoNegocio[n][nNombre]);
						Mensaje(playerid, -1,"Utilice "#CINFO"/informacion "#CBLANCO" para ver todas las opciones disponibles.");
						Mensaje(playerid, C_NEGRO, "==========================================================");
						ActualizarNegocio(n);
						DarPlataGobierno(InfoNegocio[n][nPrecio]);
						ActualizarNegLabel(n);
						new str[100];
						A_Format(str, "%s compró negocio %s ($%d-ID:%d)", pName(playerid), InfoNegocio[n][nNombre], InfoNegocio[n][nPrecio], n);
						Log("propiedades", str);
					}
					else
					{
						Error(playerid,"¡El negocio no está a la venta!");
					}
				}
			}
			return 1;
		}
		else if(!strcmp(params,"casa",true))
		{
			if(InfoJugador[playerid][jHoras] < 2) return Error(playerid, "¡Debes jugar al menos dos horas para comprar un vehículo!");
		    foreach(Casas,c)
	   	 	{
       			if(IsPlayerInRangeOfPoint(playerid,2,InfoCasa[c][cEntrada_x],InfoCasa[c][cEntrada_y],InfoCasa[c][cEntrada_z]))
	        	{
	        	    if(InfoCasa[c][cComprada] == false)
					{
			            if(GetPlayerMoney(playerid) < InfoCasa[c][cPrecio]) return Error(playerid,"¡No tienes suficiente dinero!");
						new Total_Casas;
						foreach(Casas,i)
						{
						    if(EsDuenoCasa(playerid,i))
						    {
						        ++Total_Casas;
							}
						}
						if(Total_Casas >= MAX_CASAS_JUGADOR) return Error(playerid,"¡No puedes tener más de "#MAX_CASAS_JUGADOR" Casa(s)!");
						alm(InfoCasa[c][cComprador],pName(playerid));
						InfoCasa[c][cComprada] = true;
						QuitarDinero(playerid,InfoCasa[c][cPrecio]);
						Mensaje(playerid, C_NEGRO, "==========================================================");
						MensajeF(playerid, -1,"Felicitaciones, ¡Compraste una casa! "#CVERDE"(%s).",InfoCasa[c][cNombre]);
						Mensaje(playerid, -1, "Utilice "#CINFO"/informacion "#CBLANCO"para ver todas las opciones disponibles.");
						Mensaje(playerid, C_NEGRO, "==========================================================");
						ActualizarCasa(c);
						DarPlataGobierno(InfoCasa[c][cPrecio]);
						ActualizarCasaLabel(c);
						new str[100];
						A_Format(str, "%s compró casa %s ($%d-ID:%d)", pName(playerid), InfoCasa[c][cNombre], InfoCasa[c][cPrecio], c);
						Log("propiedades", str);
					}
					else
					{
						Error(playerid,"¡Esta casa no está a la venta!");
					}
				}
			}
			return 1;
		}
		else if(!strcmp(params,"ropa",true))
		{
			new
			    clothes_id = GetClothesPosition(playerid);

			if(!clothes_id)
			    return Error(playerid, "Debes acercarte al vestidor de una tienda de ropa");

			new Sex = InfoJugador[playerid][jSexo];

   			if(Sex == 1)
			{
			    if(clothes_id == 1) //ZIP
					ShowModelSelectionMenu(playerid, m_ZIP_m, "Ropa de ~b~hombre");

			    else if(clothes_id == 2) //VICTIM
					ShowModelSelectionMenu(playerid, m_Victim_m, "Ropa de ~b~hombre");

			    else if(clothes_id == 3) //SubUrban
					ShowModelSelectionMenu(playerid, m_Binco_m, "Ropa de ~b~hombre");

			    else if(clothes_id == 4) //ProLaps
					ShowModelSelectionMenu(playerid, m_Binco_m, "Ropa de ~b~hombre");

			    else if(clothes_id == 5) //Didler
					ShowModelSelectionMenu(playerid, m_Didlersachs_m, "Ropa de ~b~hombre");

			    else if(clothes_id == 6) //Binco
					ShowModelSelectionMenu(playerid, m_Binco_m, "Ropa de ~b~hombre");

			}
			else if(Sex == 2)
			{
			    if(clothes_id == 1) //ZIP
					ShowModelSelectionMenu(playerid, m_ZIP_f, "Ropa de ~p~mujer");

			    else if(clothes_id == 2) //VICTIM
					ShowModelSelectionMenu(playerid, m_Victim_f, "Ropa de ~p~mujer");

			    else if(clothes_id == 3) //SubUrban
					ShowModelSelectionMenu(playerid, m_Binco_f, "Ropa de ~p~mujer");

			    else if(clothes_id == 4) //ProLaps
					ShowModelSelectionMenu(playerid, m_Binco_f, "Ropa de ~p~mujer");

			    else if(clothes_id == 5) //Didler
					ShowModelSelectionMenu(playerid, m_Didlersachs_f, "Ropa de ~p~mujer");

			    else if(clothes_id == 6) //Binco
					ShowModelSelectionMenu(playerid, m_Binco_f, "Ropa de mujer");
					
			}
			else return Error(playerid, "~p~~h~Bisexual de mierda.");

       		SetPVarInt(playerid,"ComprandoRopa",1);
			LimpiarPantalla(playerid, 10);
		    return 1;
		}
		else if(!strcmp(params[0],"bebida",true))
		{
		    if(IsPlayerInRangeOfPoint(playerid,2,499.7788,-18.8157,1000.67) || IsPlayerInRangeOfPoint(playerid,2,499.6957,-75.4998,998.7578))
		    {
		        MostrarMenuNegocio(playerid, ID_Negocio(playerid));
		        return 1;
			}
		    return Error(playerid,"¡No estás en una barra!");
		}
		else if(!strcmp(params[0],"productos",true))
		{
		    if(IsPlayerInRangeOfPoint(playerid,2,-29.5425,-184.9853,1003.546) || IsPlayerInRangeOfPoint(playerid, 2, -22.2099,-138.2904,1003.5469))
		    {
		        MostrarMenuNegocio(playerid, ID_Negocio(playerid));
		        //Dialog(playerid,dElegirBebida,DIALOG_STYLE_LIST,""#CBLANCO"¿Qué desea comprar?","> Agua mineral\t($"#PRECIO_AGUA")\n> Gaseosa\t($"#PRECIO_GASEOSA")\n> Cerveza\t($"#PRECIO_CERVEZA")\n> Vodka\t($"#PRECIO_VODKA")\n> Cigarrillos\t($5)\n> Encendedor\t($3)\n> Spray\t\t($11)\n> Flores\t($25)\n> Comprar "#CAZUL2"SALDO\n> Seda\t($25)","Comprar","Cancelar");
		        return 1;
			}
		    return Error(playerid,"¡No estás en un 24/7!");
		}
		else if(!strcmp(params,"armas",true))
		{
		    if(IsPlayerInRangeOfPoint(playerid,2,313.8407,-133.2842,999.6016))
		    {
		        if(!InfoJugador[playerid][jHoras]) return Error(playerid,"¡No puedes comprar armas, debes jugar al menos una hora para esto!");
				if(!InfoJugador[playerid][jLicenciaArmas]) return Error(playerid,"¡No tienes liencia de armas!");
		        Dialog(playerid,dElejirArmBal,DIALOG_STYLE_LIST,""#CBLANCO"¿Qué desea comprar?",""#CINFO"> "#CBLANCO"Armas\n"#CINFO"> "#CBLANCO"Balas","Comprar","Cancelar");
		        return 1;
			}
		    return Error(playerid,"¡Aquí no venden armas!");
		}
		else if(!strcmp(params,"accesorios",true))
		{
		    if(GetClothesPosition(playerid))
		    {
		        SetPVarInt(playerid,"ComprandoAccesorios", 1);
				ShowModelSelectionMenu(playerid, m_Accesorios, "Accesorios");
				LimpiarPantalla(playerid, 10);
				return 1;
 			}
		    return Error(playerid,"¡No estás en la tienda de ropa!");
		}
		else if(!strcmp(params,"elementos",true))
		{
			if(IsPlayerInRangeOfPoint(playerid,2,1691.1962,-1949.8903,8.2500))
			{
			    if(InfoJugador[playerid][jNivel] < 2) return Error(playerid, "¡Debes ser nivel 2 para utilizar este comando!");
   			    Dialog(playerid,dMercadoNegro,DIALOG_STYLE_LIST,""#CAZUL2"Mercado negro","Venda\t\t($20)\nSoga\t\t\t($32)\nBomba\t\t($35000)\nMáscara\t\t($30)\nDinamita\t($18000)\nPinza\t\t($160)","Aceptar","Cancelar");
				return 1;
  			}
		    return Error(playerid,"¡No estás en el mercado negro!");
		}
		else if(!strcmp(params,"tecnologia",true))
		{
			if(IsPlayerInRangeOfPoint(playerid,2,-1705.09997559,1887.00000000,1068.80004883))
			{
   				MostrarMenuNegocio(playerid, ID_Negocio(playerid));
		    	//Dialog(playerid,dCTecnologia,DIALOG_STYLE_LIST,""#CAZUL2"Comprar tecnología","> Celular\t\t\t($"#PRECIO_CEL")\n> GPS\t\t\t\t($"#PRECIO_GPS")\n"#CINFO"> "#CBLANCO"Comprar "#CAZUL2"SALDO\n> Cámara\t\t\t($120)\n> Buscador de vehículos\t($"#PRECIO_BUSCADORVEH")","Aceptar","Cancelar");
				return 1;
  			}
		    return Error(playerid,"¡No estás en un lugar que venda tecnología!");
		}
		else if(!strcmp(params,"muebles",true))
		{
			if(IsPlayerInRangeOfPoint(playerid,2,-1705.09997559,1887.00000000,1068.80004883))
			{
		        SetPVarInt(playerid,"ComprandoMuebles", 1);
				ShowModelSelectionMenu(playerid, m_Muebles, "Muebles");
				LimpiarPantalla(playerid, 10);
				SetPVarInt(playerid,"mS_hide_list_off", 1);
				return 1;
  			}
		    return Error(playerid,"¡No estás en un lugar que vendan muebles! (HIPERMERCADO)");
		}
		else if(!strcmp(params,"medicamentos",true))
		{
			if(IsPlayerInRangeOfPoint(playerid,2,176.2873,-73.2911,963.2859))
			{
				MostrarMenuNegocio(playerid, ID_Negocio(playerid));
				return 1;
  			}
		    return Error(playerid,"¡No estás en una farmacia!");
		}
		else if(!strcmp(params,"comida",true))
		{
			if(IsPlayerInRangeOfPoint(playerid,5,373.9077,-119.6210,1001.4922))//pizzeria
			{
				MostrarMenuNegocio(playerid, ID_Negocio(playerid));
			}
			else if(IsPlayerInRangeOfPoint(playerid,5,375.7025,-68.0881,1001.5151))//Burger
			{
				MostrarMenuNegocio(playerid, ID_Negocio(playerid));
			}
			else if(IsPlayerInRangeOfPoint(playerid,5,369.5210,-6.5896,1001.8589))//Polleria
			{
				MostrarMenuNegocio(playerid, ID_Negocio(playerid));
			}
			else
				return Error(playerid,"¡No estás en un lugar que vendan comida!");

			return 1;
		}
	    if(!strcmp(params,"boleto",false))
	    {
	        if(IsPlayerInRangeOfPoint(playerid,3,-1372.0627, 1649.1442, 1052.6855))
	        {
	            Dialog(playerid, dCBoleto, DIALOG_STYLE_MSGBOX,"- Comprar boleto",""#CBLANCO"¿Deseas comprar el boleto, y alquilar una Sanchez por $400?","Aceptar","Cancelar");
				return 1;
			}
	        else if(IsPlayerInRangeOfPoint(playerid,3,-1363.1294, 933.6328, 1036.4626))
	        {
	            Dialog(playerid, dCBoleto, DIALOG_STYLE_MSGBOX,"- Comprar boleto",""#CBLANCO"¿Deseas comprar el boleto, y alquilar una Monster por $500?","Aceptar","Cancelar");
				return 1;
			}
	        else if(IsPlayerInRangeOfPoint(playerid,3,-1424.4020, -664.6694, 1065.5156))
	        {
	            Dialog(playerid, dCBoleto, DIALOG_STYLE_LIST,"- Comprar boleto - Elegir vehículo "#CVERDE"($500)","> Uranus\n> Jester\n> Sultan\n> Stratum\n> Elegy","Aceptar","Cancelar");
				return 1;
			}
	        if(IsPlayerInRangeOfPoint(playerid,3,-1404.4028, -256.3459, 1043.6334))
	        {
	            Dialog(playerid, dCBoleto, DIALOG_STYLE_MSGBOX,"- Comprar boleto",""#CBLANCO"¿Deseas comprar el boleto, y alquilar un Hotring Racer B por $600?","Aceptar","Cancelar");
				return 1;
			}
			return Error(playerid, "¡Aquí no venden boletos!");
		}
		else if(!strcmp(params,"frecuencia",true,10))
		{
		    if(!IsPlayerInRangeOfPoint(playerid, 2.5, -1976.2792,609.8074,1055.5859)) return Error(playerid, "Debes estar en ~b~LSTV ~w~para comprar una frecuencia.");

			if(GetPlayerMoney(playerid) < 6000)
			    return Error(playerid, "Necesitas ~g~%6.000 ~w~para adquirir una frecuencia.");

			new
				Pass;

			if(sscanf(params[11], "i", Pass))
			    return Mensaje(playerid, -1, "Para comprar una frecuencia, usa "#CINFO"/comprar frecuencia [Contraseña]."#CBLANCO" La contraseña debe ser de 4 dígitos, y numérica.");

			if(Pass > 9999 || Pass < 1000)
			    return Error(playerid, "La contraseña debe tener 4 dígitos. Tampoco puede tener el número 0 al comienzo.");

			if(strlen(params[11]) != 4)
			    return Error(playerid, "La contraseña debe tener 4 dígitos.");

			new
				Freq = GetFreeFrequence();

			if(Freq == -1)
				return Error(playerid, "Hubo un error al intentar crear la frecuencia.");

			QuitarDinero(playerid, 6000);
			CreateFrequence(pName(playerid), Freq, Pass);
			Mensaje (playerid,  1, "=======================================================================");
			Mensaje (playerid, -1, "Frecuencia adquirida "#CVERDE"correctamente.");
			Mensaje (playerid,  1, " ");
			MensajeF(playerid, -1, "    • nº de Frecuencia: "#CVERDE"%d", Freq);
			MensajeF(playerid, -1, "    • Contraseña de Frecuencia: "#CINFO"%d", Pass);
			Mensaje (playerid,  1, " ");
			Mensaje (playerid, -1, "Para conectarte con un Walkie-Talkie, usa "#CAZULRARO"/frecuencia [nº de frecuencia] [contraseña].");
			Mensaje (playerid, -1, "Recuerda que deberás renovar la frecuencia cada "#CROJO"7 "#CBLANCO"días, usa "#CAZULRARO"/expiracion");
			Mensaje (playerid,  1, "=======================================================================");
			return 1;
		}
		return ParamsINC(playerid,"/comprar [ITEM]");
	}

CALLBACK:veh_onBoughted(playerid) {
	Mensaje(playerid, -1, "Escriba "#CINFO"/estacionar "#CBLANCO"en el lugar que quiere que aparesca su vehiculo.");
	//veh_putPlayerIn(GetPVarInt(playerid,"boughtedvehicle"), playerid, 0);
	DeletePVar(playerid, "boughtedvehicle");
	return 1;
}
	
CALLBACK:veh_onRespawn(vehicleid) {
	
	if (!veh_isOwnVeh(vehicleid)) return;
	
	new
		time = veh_getLastSpawn(vehicleid);
		
	if (gettime() - time > 25) { // No veh_respawn
		veh_setVirtualWorld(vehicleid, E_VEH_DESTROYED_VW);
		ownVeh_setSpawnTime(veh_ownVehID(vehicleid), 1);
		
		new ownerID = INVALID_PLAYER_ID;
		
		foreach(Player, i) {
			if (TieneLlaveVeh(i, vehicleid) == 2) {	
				ownerID = i;
				break;
			}
		}
		
		if (ownerID != INVALID_PLAYER_ID) {
			Mensaje (ownerID, -1, "");
			MensajeF(ownerID, -1, "Un "#CVERDE"%s (%s) "#CBLANCO"de su pertenencia fué destruido. El vehículo será trasladado al último lugar donde", veh_getNameAsString(vehicleid), veh_getPlateAsString(vehicleid));
			MensajeF(ownerID, -1, "fué estacionado, en aproximadamente "#CVERDE"%d "#CBLANCO"minutos. Escriba "#CINFO"/cuenta "#CBLANCO"para ver más información.", E_VEH_DESTROYED_TIME / 60);
		}
	}
	return;
}

CALLBACK:veh_onLoaded(playerid) {
	new rows, fields;
	
	cache_get_data(rows, fields);
	
	for (new i; i < rows; i++) {
		new
			UID = cache_get_row_int(i, 1),
			modelid = cache_get_row_int(i, 3),
			Float:x = cache_get_row_float(i, 4),
			Float:y = cache_get_row_float(i, 5),
			Float:z = cache_get_row_float(i, 6),
			Float:angle = cache_get_row_float(i, 7),
			intid = cache_get_row_int(i, 8),
			vwid = cache_get_row_int(i, 9),
			color1 = cache_get_row_int(i, 10),
			color2 = cache_get_row_int(i, 11),
			famid = cache_get_row_int(i, 12),
			bools = cache_get_row_int(i, 13),
			paintjob = cache_get_row_int(i, 14),
			
			tunning[E_MAX_COMPONENTS],
			
			bool: preloaded
		;

		for (new j; j < E_MAX_COMPONENTS; j++) {
			tunning[j] = cache_get_row_int(i, 15+j);
		}
		
		foreach(ownVeh, vehicle) {
			if (ownVeh_getUID(ownVeh:vehicle) == UID) {
				ownVeh_setWaitTime(ownVeh:vehicle, 0);
				preloaded = true;
				break;
			}
		}
		
		if (preloaded) {
			continue;
		}
		
		new ownVeh: ID = ownVeh_create(UID, pName(playerid), modelid, x, y, z, angle, color1, color2, intid, vwid, bools);
		
		new vehID = ownVeh_ID(ID);

		veh_setFamily(vehID, famid);
		
		if (paintjob) {
			veh_setPaintjob(vehID, paintjob);
		}
		
		for (new j; j < E_MAX_COMPONENTS; j++) {
			if (tunning[j] >= 1000) {
				veh_addComponent(vehID, tunning[j]);
			}
		}
		
		CargarMaletero(vehID);
		
	}
	return 1;
}
	
CALLBACK:veh_onLoadedCheck(playerid) {
	new rows, fields;
	
	cache_get_data(rows, fields);
	
	if (!rows) {
		return SendClientMessage(playerid, -1, "No se encontraron resultados.");
	}
	
	for (new i; i < rows; i++) {
		new
			UID = cache_get_row_int(i, 1),
			modelid = cache_get_row_int(i, 3)
		;

		MensajeF(playerid, -1, "Vehículo encontrado (Modelo: %s | Patente: %s) - /vcargarpatente %s", model_getNameAsString(modelid), veh_plateToStr(UID), veh_plateToStr(UID));
		
	}
	return 1;
}

CALLBACK:veh_onLoadedUID(playerid) {
	new rows, fields;
	
	cache_get_data(rows, fields);
	
	if (!rows) {
		return Mensaje(playerid, -1, "No se encontró la patente especificada (0 resultados)");
	}
	
	for (new i; i < rows; i++) {
		new
			UID = cache_get_row_int(i, 1),
			ownerName[MAX_PLAYER_NAME],
			modelid = cache_get_row_int(i, 3),
			Float:x = cache_get_row_float(i, 4),
			Float:y = cache_get_row_float(i, 5),
			Float:z = cache_get_row_float(i, 6),
			Float:angle = cache_get_row_float(i, 7),
			intid = cache_get_row_int(i, 8),
			vwid = cache_get_row_int(i, 9),
			color1 = cache_get_row_int(i, 10),
			color2 = cache_get_row_int(i, 11),
			famid = cache_get_row_int(i, 12),
			bools = cache_get_row_int(i, 13),
			paintjob = cache_get_row_int(i, 14),
			
			tunning[E_MAX_COMPONENTS]
		;
		
		cache_get_row(i, 2, ownerName, sizeof(ownerName));

		for (new j; j < E_MAX_COMPONENTS; j++) {
			tunning[j] = cache_get_row_int(i, 15+j);
		}
		
		new ownVeh: ID = ownVeh_create(UID, ownerName, modelid, x, y, z, angle, color1, color2, intid, vwid, bools);
		
		new vehID = ownVeh_ID(ID);

		veh_setFamily(vehID, famid);
		
		if (paintjob) {
			veh_setPaintjob(vehID, paintjob);
		}
		
		for (new j; j < E_MAX_COMPONENTS; j++) {
			if (tunning[j] >= 1000) {
				veh_addComponent(vehID, tunning[j]);
			}
		}
		
		CargarMaletero(vehID);
		
		MensajeF(playerid, -1, "Se cargó el vehículo requerido (Dueño: %s | ID: %d | Modelo: %s)", ownerName, vehID, veh_getNameAsString(vehID));
		
	}
	return 1;
}

	CMD:frecuencia(playerid, params[])
	{
	    NeedObject(playerid)<INV_WALKIETALKIE>;

	    new
	        Channel,
	        Password;

		if(sscanf(params, "ii", Channel, Password))
		{
			Mensaje(playerid, -1, "Para conectarte a una frecuencia con tu Walkie-Talkie, usa "#CINFO"/frecuencia [Canal] [Contraseña]");
			Mensaje(playerid, -1, "¡Recuerde que el canal y la contraseña son "#CROJO"numéricos "#CBLANCO"y con "#CROJO"cuatro dígitos"#CBLANCO"! Ejemplo de uso es "#CINFO"/frecuencia 1234 1234");
			return 1;
		}

		if(!(1000 <= Channel < 10000) || !(1000 <= Password < 10000))
			return Mensaje(playerid, -1, "El canal y la contraseña deben ser "#CROJO"numéricos "#CBLANCO"y con "#CROJO"cuatro dígitos.");

		new
			str[15];

		format(str, 15, "%d_TIME", Channel);

		if(!GetGVarInt(str))
		    return Mensaje(playerid, -1, "No se pudo conectar: "#CROJO"Frecuencia inexistente.");

		if(!GetFreqValidTime(Channel))
		    return Mensaje(playerid, -1, "No se pudo conectar: "#CROJO"La frecuencia caducó.");

		format(str, 15, "%d_PW", Channel);

		if(GetGVarInt(str) != Password)
		    return Mensaje(playerid, -1, "No se pudo conectar: "#CROJO"Contraseña incorrecta.");

		CurrentObjectData[playerid] = Channel;

		MensajeFrecuencia(Channel, "ingresó al canal.", playerid);
		return 1;
	}

	CMD:walkietalkie(playerid, params[])
	{
	    if(isnull(params))
	        return ParamsINC(playerid, "/walkietalkie [Texto]");

	    if(Cracked[playerid]) return Error(playerid, "¡No puedes hablar por radio estando en este estado!");

		new
			wt_index = GOAT(INV_WALKIETALKIE),
			string[120];

		if(GetObject(playerid) == wt_index)
		{
		    new
		        freqq = GetObjectData(playerid);

		    if(!freqq)
				return Mensaje(playerid, -1, "No estás en una frecuencia. Usa "#CINFO"/frecuencia "#CBLANCO"para ingresar a un canal.");

			if(!GetFreqValidTime(freqq))
			    return MensajeF(playerid, -1, "La frecuencia "#CROJO"%d "#CBLANCO"expiró. Si eres el propietario de éste canal, usa "#CINFO"/objeto", freqq);

		    A_Format(string, "%s "#CWALKIETALKIE"[Walkie-Talkie]"#CBLANCO": %s", NombreJugador(playerid), params);
 			ProxDetector(4.0, playerid, string, -1, -1, -1, -1, -1);
 			MensajeFrecuencia(freqq, params, playerid, true);
 			return 1;
		}
		else if(InfoJugador[playerid][jObjetoColgado] == wt_index)
		{
		    new
		        freqq = InfoJugador[playerid][jObjetoColgadoData],
				time = gettime();

		    if(!freqq)
				return Mensaje(playerid, -1, "Usa "#CINFO"/frecuencia "#CBLANCO"para ingresar a un canal.");

			format(string, 15, "%d_TIME", freqq);

			if(GetGVarInt(string) < time)
			    return MensajeF(playerid, -1, "La frecuencia "#CROJO"%d "#CBLANCO"expiró. Si eres el propietario de éste canal, usa "#CINFO"/objeto", freqq);

		    A_Format(string, "%s "#CWALKIETALKIE"[Walkie-Talkie]"#CBLANCO": %s", NombreJugador(playerid), params);
 			ProxDetector(4.0, playerid, string, -1, -1, -1, -1, -1);
 			MensajeFrecuencia(freqq, params, playerid, true);
 			return 1;
		}
		return Error(playerid, "Necesitas tener un ~b~Walkie-Talkie ~w~para usar este comando.");
	}

	CMD:expiracion(playerid, params[])
	{
		NeedObject(playerid)<INV_WALKIETALKIE>;

	    new
	        freqq = GetObjectData(playerid);

	    if(!freqq)
			return Mensaje(playerid, -1, "No estás conectado a una frecuencia.");

		new
		    str[15];

		A_Format(str, "%d_TIME", freqq);

		if(!GetGVarInt(str))
		    return Error(playerid, "~r~Frecuencia inexistente.");

		new
		    secs = GetFreqValidTime(freqq);

		if(!secs)
			return Mensaje(playerid, -1, "Frecuencia "#CROJO"expirada.");

		new
		    days,
		    hours,
		    mins,
		    sece;

		SecondsToDHMS(secs, days, hours, mins, sece);

		if(!days)
		    MensajeF(playerid, -1, "Frecuencia "#CINFO"%d "#CBLANCO"válida por "#CVERDE"%d horas y %d minutos.", freqq, hours, mins);

		else
		    MensajeF(playerid, -1, "Frecuencia "#CINFO"%d "#CBLANCO"válida por "#CVERDE"%d dias, %d horas, %d minutos.", freqq, days, hours, mins);

		return 1;
	}

	CMD:volver(playerid,params[])
	{
		if(GetPVarInt(playerid,"EligiendoRopa") == 1)
		{
			SetPVarInt(playerid,"EligiendoRopa",1);
			SetPVarInt(playerid,"ID_Ropa",1);
			TextDrawShowForPlayer(playerid,FlechaCRopa[0]);
			TextDrawShowForPlayer(playerid,FlechaCRopa[1]);
			TextDrawShowForPlayer(playerid,CRopa);
			TextDrawShowForPlayer(playerid,SCRopa);
			TextDrawShowForPlayer(playerid,PCRopa);
			SelectTextDraw(playerid,C_ROJO);
		    return 1;
		}
		if(GetPVarInt(playerid,"EnCajero") == 1 || GetPVarInt(playerid,"ElijiendoAccesorios"))
		{
		    SelectTextDraw(playerid,C_ROJO);
		    return 1;
		}
		return Error(playerid,"¡No estás bugueado!");
	}

	CMD:planta_crear(playerid, params[])
	{
		if(Staff(playerid, Dueno)) return 1;

		new
		    Float:x, Float:y, Float:z;

		GetPlayerPos(playerid, x, y, z);
		CrearPlantaCoca(x, y, z);
		return 1;
	}

	CMD:forze_destroy(playerid, params[])
	{
	    if(Staff(playerid, Dueno))
	        return 1;

		new
		    vehid;

		if(sscanf(params, "i", vehid))
		    return ParamsINC(playerid, "/forze_destroy [Vehicle-ID]");

		if(!IsValidVehicle(vehid))
		    return Error(playerid, "Vehículo inexistente.");

		for(new i; E_VEH_GENERAL: i < E_VEH_GENERAL; i++)
	   		Veh[vehid][E_VEH_GENERAL: i] = _:0;

		for(new x; x < MAX_LUGARES_MALETERO; x++)
		{
		    ItemMaletero[vehid][x][invObject] = 0;
		    ItemMaletero[vehid][x][invData] = 0;
		}
  		veh_destroy(vehid);
		MensajeF(playerid, -1, "Vehículo %d destruido.", vehid);
		return 1;
	}

	CMD:planta_crecer(playerid, params[])
	{
		if(Staff(playerid, Dueno)) return 1;

		CrecerPlanta(strval(params));
		ActualizarPlanta(strval(params));
		return 1;
	}


	CMD:crearfamilia(playerid,params[])
	{
		if(!EsDueno(playerid)) return Error(playerid,"¡Este comando lo utilizan solo dueños!");
		Para_Admin_Servicio
		if(sscanf(params,"uis[32]",params[0],params[1], params[2])) return ParamsINC(playerid,"/crearfamilia [ID LIDER] [PANDILLA] [NOMBRE FAMILIA]");
		if(!IsPlayerConnected(params[0])) return Error(playerid,"¡Ese ID no está conectado!");

		if(strlen(params[2]) > (32) ) return Error(playerid,"¡El nombre es demasiado largo!");
		new ID_FAM = -1;

		Loop(i, MAX_FAMILIAS, 1) if(!FamiliaExiste(i))
		{
	 		ID_FAM = i;
	 		break;
		}

		if( ID_FAM == -1 ) return Error(playerid,"¡No se pueden crear más de "#MAX_FAMILIAS" familias!");

		InfoJugador[params[0]][jLiderFam] = ID_FAM;

		GetPlayerPos(playerid,InfoFamilia[ID_FAM][fPos_x],InfoFamilia[ID_FAM][fPos_y],InfoFamilia[ID_FAM][fPos_z]);

		alm(InfoFamilia[ID_FAM][fNombre],params[2]);

		if(params[1])
		{
			MensajeAdminF(C_ADMINISTRADOR,"[ADMINISTRACIÓN] > "#CBLANCO"%s creó la pandilla %s (ID %d), y su lider será %s",Colaborador,NombreJugador_(playerid),InfoFamilia[ID_FAM][fNombre],ID_FAM,NombreJugador_(params[0]));
			InfoFamilia[ID_FAM][fPandilla] = true;
		}
		else
		{
			MensajeAdminF(C_ADMINISTRADOR,"[ADMINISTRACIÓN] > "#CBLANCO"%s creó la familia %s (ID %d), y su lider será %s",Colaborador,NombreJugador_(playerid),InfoFamilia[ID_FAM][fNombre],ID_FAM,NombreJugador_(params[0]));
		}

		ActualizarFamilia(ID_FAM);
		return 1;
	}

	CMD:nombrerango(playerid,params[])
	{
	    if(!InfoJugador[playerid][jLiderFam]) return Error(playerid,"¡No eres lider de ninguna familia!");
	    if(sscanf(params,"is[24]",params[0],params[1])) return ParamsINC(playerid,"/nombrerango [Número de Rango] [Nombre]");
		if(params[0] > 5 || params[0] < 1) return Error(playerid,"El Rango debe ser entre 1 y 5.");
		Loop(i,MAX_FAMILIAS,1)
		{
		    if(InfoJugador[playerid][jLiderFam] == i)
			{
				switch(params[0])
				{
					case 1: alm(InfoFamilia[i][fRango_1],params[1]);
					case 2: alm(InfoFamilia[i][fRango_2],params[1]);
					case 3: alm(InfoFamilia[i][fRango_3],params[1]);
					case 4: alm(InfoFamilia[i][fRango_4],params[1]);
					case 5: alm(InfoFamilia[i][fRango_5],params[1]);
				}
				new str[47 + 24];
				format(str,sizeof(str),"> [FAMILIA] %s cambio el nombre del rango %d a %s",NombreJugador_(playerid),params[0],params[1]);
				MensajeFamilia(InfoJugador[playerid][jLiderFam],str);
				ActualizarFamilia(i);
				return 1;
			}
		}
		return 1;
	}


	CMD:rango(playerid,params[])
	{
	    new
			ID_PFac = InfoJugador[playerid][jLider],
	    	ID_PFam = InfoJugador[playerid][jLiderFam],
			ID,
			Item[10],
			Val;

		if(!ID_PFac && !ID_PFam) return Error(playerid,"¡No eres lider de ninguna familia/facción!");
		if(sscanf(params,"us[10]i",ID,Item,Val)) return ParamsINC(playerid,"/rango [ID/NOMBRE] <faccion - familia> [RANGO]");
		if(!IsPlayerConnected(ID)) return Error(playerid,"¡Jugador desconectado!");
		if(Val < 1) return Error(playerid,"¡Debe ser un rango positivo!");
		if(strfind(params,"faccion",true) != -1)
		{
		    Mensaje(playerid, -1, "Desde la "#CAMARILLO"Versión 3 "#CBLANCO"de Ciudad Real RP, está "#CINFO"/faccion.");
			return 1;
		}
		else if(strfind(params,"familia",true) != -1)
		{
		    if(InfoJugador[ID][jLiderFam]) return Error(playerid,"¡No le puedes cambiar el rango a un lider!");
		    if(Val > 5) return Error(playerid,"¡Las familias tienen máximo 5 rangos!");
		    if(!ID_PFam) return Error(playerid,"¡No eres lider de ninguna familia!");
		    if(InfoJugador[ID][jMiembroFam] != ID_PFam) return Error(playerid,"¡Ese jugador no pertenece a tu familia!");
		    InfoJugador[ID][jRangoFam] = Val;
		    new Str[128];
			A_Format(Str,"> "#CBLANCO"%s le cambió el rango a %s "#CPOSITIVO"(RANGO: %d)",NombreJugador_(playerid),NombreJugador_(ID),InfoJugador[ID][jRangoFam]);
			MensajeFamilia(ID_PFam,Str);
			return 1;
		}
		return ParamsINC(playerid,"/rango [ID/NOMBRE] [faccion/familia] [RANGO]");
	}

	CMD:invitar(playerid,params[])
	{
	    new
			ID_PFac = InfoJugador[playerid][jLider],
	    	ID_PFam = InfoJugador[playerid][jLiderFam];

		if(!ID_PFac && !ID_PFam)
			return Error(playerid,"¡No eres lider de ninguna familia/facción!");

		if(sscanf(params,"us[20]",params[0],params[1]))
			return ParamsINC(playerid,"/invitar [id/nombre] [faccion/famila]");

		if(params[0] == INVALID_PLAYER_ID)
			return Error(playerid,"¡Jugador desconectado!");

		if(!ProxDetectorS(3.0, playerid, params[0]))
			return Error(playerid, "Debes estar más cerca de ese jugador!");

		if(!strcmp(params[1],"faccion",true))
		{
		    if(!ID_PFac)
				return Error(playerid,"¡No eres lider de ninguna facción!");

			if(InfoJugador[params[0]][jLider])
				return Error(playerid,"¡Ese jugador es lider!");

			if(InfoJugador[params[0]][jMiembro])
				return Error(playerid,"¡Ese jugador ya es miembro de una facción!");

			if(GetPVarInt(params[0], "INVITACION_FACCION"))
			    return Error(playerid, "¡Ese jugador, ya tiene una invitación pendiente!");

			if(ID_Familia(params[0]))
			    return Error(playerid, "Ese jugador pertenece a una familia.");

			SetPVarInt(params[0], "INVITACION_FACCION", ID_PFac);

			MensajeF(params[0], C_VERDE, "%s "#CBLANCO"te invitó a la facción "#CINFO"%s. "#CBLANCO"Puedes "#CINFO"/aceptar faccion "#CBLANCO"o "#CINFO"/rechazar faccion",
			                    NombreJugador_(playerid),
			                    NombreFaccion(ID_PFac));

			MensajeF(playerid, -1, "Invitaste a "#CVERDE"%s "#CBLANCO"a tu facción. Ahora, espera su respuesta.", NombreJugador_(params[0]));
			return 1;
		}
		else if(!strcmp(params[1],"familia",true))
		{
		    if(!ID_PFam)
				return Error(playerid,"¡No eres lider de ninguna familia!");

			if(InfoJugador[params[0]][jLiderFam])
				return Error(playerid,"¡Ese jugador es lider!");

			if(InfoJugador[params[0]][jMiembroFam])
				return Error(playerid,"¡Ese jugador ya es miembro de una familia!");

			if(GetPVarInt(params[0], "INVITACION_FAMILIA"))
			    return Error(playerid, "¡Ese jugador, ya tiene una invitación pendiente!");

			if(ID_Faccion(params[0]))
			    return Error(playerid, "Ese jugador pertenece a una facción.");

			SetPVarInt(params[0], "INVITACION_FAMILIA", ID_PFam);

			MensajeF(params[0], C_VERDE, "%s "#CBLANCO"te invitó a la familia "#CINFO"%s. "#CBLANCO"Puedes "#CINFO"/aceptar familia "#CBLANCO"o "#CINFO"/rechazar familia",
			                    NombreJugador_(playerid),
			                    InfoFamilia[ID_PFam][fNombre]);

			MensajeF(playerid, -1, "Invitaste a "#CVERDE"%s "#CBLANCO"a tu familia. Ahora, espera su respuesta.", NombreJugador_(params[0]));
			return 1;
		}
		return ParamsINC(playerid,"/invitar [id/nombre] [faccion/famila]");
	}

	CMD:quitarllave(playerid, params[])
	{
	    // -===========================-
	    if(!InfoJugador[playerid][jLider]) return Error(playerid, "¡No sos lider de facción!");
	    if(sscanf(params, "ui", params[0], params[1])) return ParamsINC(playerid,"/quitarllave [ID/NOMBRE] [Nº DE LLAVE]");
	    if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "¡Jugador desconectado!");
	    if(InfoJugador[playerid][jLider] != ID_Faccion(params[0])) return Error(playerid, "¡Esa persona no es de tu facción!");
	    if(!Bit_Get(Llave_veh[params[0]], params[1])) return Error(playerid,"¡Ese jugador no tiene esa llave!");
	    if(InfoJugador[params[0]][jLider] == InfoJugador[playerid][jLider]) return Error(playerid,"¡No le puedes quitar llaves a un lider/sublider!");
		if(!ProxDetectorS(2.0,playerid,params[0])) return Error(playerid,"¡Ese jugador está muy lejos tuyo!");
		if(veh_getFaction(params[1]) != InfoJugador[playerid][jLider]) return Error(playerid, "¡Esa llave no es de tu facción!");
	    // -===========================-

	    Bit_Set(Llave_veh[params[0]], params[1], false);

	    new
	        Rol[70];

		A_Format(Rol, "le quita a %s la llave nº %d", NombreJugador(params[0]), params[1]);
		AutoRol(playerid, Rol);
		return 1;
	}

stock GetNearKP(playerid)
{
	new
	    Float: Old_Dist = 1.3,
		kp_id = -1;

	foreach(KeyPads, i)
	{
	    new
	        Float: Dist = GetPlayerDistanceFromPoint(playerid, KeyPadInfo[i][kpPosx],
         												KeyPadInfo[i][kpPosy],
                     									KeyPadInfo[i][kpPosz]);

		if(Dist > Old_Dist) continue;
		if(Dist < Old_Dist)
		{
			Old_Dist = Dist;
			kp_id = i;
		}
	}
	return kp_id;
}

stock VehMasCercano(playerid, bool:Llave = false, Float:Radi_max = 30.0)
{
	new
	    Vehicle = INVALID_VEHICLE_ID,
		Float:Old_Dist = Radi_max;

	new
		Float: PosJ[3],
		my_vw = GetPlayerVirtualWorld (playerid);

	GetPlayerPos(playerid, PosJ[0], PosJ[1], PosJ[2]);

	if(Llave)
	{
		foreach(veh,i)
		{
			if(veh_getVirtualWorld(i) != my_vw) continue;

			if(TieneLlaveVeh(playerid, i))
			{
				new
					Float:Dist = GetVehicleDistanceFromPoint(i, PosJ[0], PosJ[1], PosJ[2]);

				if(Dist > Radi_max) continue;
				if(Dist < Old_Dist)
				{
					Old_Dist = Dist;
					Vehicle = i;
				}
			}
		}
	}
	else
	{
		foreach(veh,i)
		{
			if(veh_getVirtualWorld(i) != my_vw) continue;

			new
	    		Float:Dist = GetVehicleDistanceFromPoint(i, PosJ[0], PosJ[1], PosJ[2]);

			if(Dist < Old_Dist)
			{
	    		Old_Dist = Dist;
	    		Vehicle = i;
			}
		}
	}
	return Vehicle;
}

	stock IsValidFac(F_ID)
	    return (0 < F_ID < MAX_FACCIONES);

	stock IsValidFam(F_ID)
	    return isnull(InfoFamilia[F_ID][fNombre]) ? false : true;

	CMD:expulsarliderfac(playerid, params[])
	{
	    if(Staff(playerid,SubDueno)) return 1;

	    new
			F_ID,
			NombreLider[MAX_PLAYER_NAME];

		if(sscanf(params, "i", F_ID)) return ParamsINC(playerid, "/expulsarliderfac [ID Fac]");
		if(!IsValidFac(F_ID)) return Error(playerid, "¡Esa facción no existe!");
		if(isnull(InfoFaccion[F_ID][fLider])) return Error(playerid, "¡Esa facción no tiene lider!");

		alm(NombreLider, InfoFaccion[F_ID][fLider]);

		new
		    LeaderID = INVALID_PLAYER_ID;

		foreach(Player, i)
		{
		    if(!strcmp(pName(i), NombreLider))
		    {
		        LeaderID = i;
		        break;
			}
		}
		if(LeaderID != INVALID_PLAYER_ID)
		{
			InfoJugador[LeaderID][jLider] = 0;
			InfoJugador[LeaderID][jMiembro] = 0;
			ActualizarCuenta(LeaderID);
			MensajeF(LeaderID, -1, "El administrador "#CROJO"%s "#CBLANCO"te quitó la facción "#CVERDE"%s", NombreJugador_(playerid), NombreFaccion(F_ID) );
		}
		else
		{
			SetUserVarInt (NombreLider, "Lider", 0);
		}
		MensajeF(playerid, -1, "Se le quitó la facción "#CVERDE"%s "#CBLANCO"a "#CROJO"%s.", NombreFaccion(F_ID), NombreLider );
		alm(InfoFaccion[F_ID][fLider], "");
		ActualizarFacciones();
		return 1;
	}

	CMD:editarliderfac(playerid, params[])
	{
	    if(Staff(playerid,SubDueno)) return 1;
	    new
			NombreLider[24],
			F_ID;

		if(sscanf(params, "p< >is[24]", F_ID, NombreLider)) return ParamsINC(playerid, "/editarliderfac [ID Fac] [Nombre_Apellido lider]");
		if(!IsValidFac(F_ID)) return Error(playerid, "¡Esa facción no existe!");

		new
			LeaderID = INVALID_PLAYER_ID;

		foreach(Player, i)
		{
		    if(!strcmp(pName(i), NombreLider))
		    {
		        LeaderID = i;
		        break;
			}
		}

		if(!isnull(InfoFaccion[F_ID][fLider]))
		{
		    new
		        ActualLeaderID = INVALID_PLAYER_ID,
		        ActualLeaderName[MAX_PLAYER_NAME];

			alm(ActualLeaderName, InfoFaccion[F_ID][fLider]);

			foreach(Player, i)
			{
			    if(!strcmp(pName(i), ActualLeaderName))
			    {
                    ActualLeaderID = i;
                    break;
				}
			}
			if(ActualLeaderID != INVALID_PLAYER_ID)
			{
				InfoJugador[ActualLeaderID][jLider] = 0;
				InfoJugador[ActualLeaderID][jMiembro] = 0;
				ActualizarCuenta(ActualLeaderID);
				MensajeF(ActualLeaderID, -1, "El administrador "#CROJO"%s "#CBLANCO"te expulsó de la facción.", NombreJugador_(playerid));
			}
		    else
			{
				SetUserVarInt (ActualLeaderName, "Lider", 0);
			}
			MensajeF(playerid, -1, "Ya habia un líder "#CINFO"(%s). "#CBLANCO"Su cargo fue removido.", ActualLeaderName);
		}
		if(LeaderID != INVALID_PLAYER_ID)
		{
			InfoJugador[LeaderID][jLider] = F_ID;
			InfoJugador[LeaderID][jMiembro] = 0;
			ActualizarCuenta(LeaderID);
			MensajeF(LeaderID, -1, "El administrador "#CROJO"%s "#CBLANCO"te fijó como lider de la facción "#CVERDE"%s", NombreJugador_(playerid), NombreFaccion(F_ID) );
		}
		else
		{
			SetUserVarInt (NombreLider, "Lider", F_ID);
		}
		MensajeF(playerid, -1, "Fijaste a "#CINFO"%s "#CBLANCO"como líder de la facción "#CVERDE"%s(%d)", NombreLider, NombreFaccion(F_ID), F_ID);
		alm(InfoFaccion[F_ID][fLider], NombreLider);
		MensajeF(playerid, -1, "Utiliza "#CINFO"/darllavescuenta %s "#CBLANCO"para entregarle las llaves a "#CVERDE"%s", NombreLider, NombreLider);
		ActualizarFacciones();
		return 1;
	}

	CMD:darllavescuenta(playerid, params[])
	{
	    if(Staff(playerid,SubDueno)) return 1;

	    new
			NombreLider[24],
			F_ID;

		if(sscanf(params, "p< >is[24]", F_ID, NombreLider)) return ParamsINC(playerid, "/darllavescuenta [ID Fac] [Nombre_Apellido lider]");
		if(!IsValidFac(F_ID)) return Error(playerid, "¡Esa facción no existe!");

		foreach(Player, i)
		    if(!strcmp(NombreLider, pName(i)))
		        return Error(playerid, "El jugador ya está conectado, utiliza /darllaves [id]");

		DarLlavesCuenta(NombreLider, F_ID);
		MensajeF(playerid, -1, "Las llaves fueron entregadas a "#CVERDE"%s", NombreLider);
		return 1;
	}

	CMD:quitarllavescuenta(playerid, params[])
	{
	    if(Staff(playerid,SubDueno)) return 1;
	    if(isnull(params) || strlen(params) >= MAX_PLAYER_NAME) return ParamsINC(playerid, "/quitarllavescuenta [Nombre_Apellido]");
		SacarLlavesCuenta(params);
		MensajeF(playerid, -1, "Le quitaste a "#CINFO"%s "#CBLANCO"todas las llaves de los coches de su facción.", params);
		return 1;
	}

	CMD:darllaves(playerid, params[])
	{
	    if(Staff(playerid,SubDueno)) return 1;
		if(sscanf(params, "u", params[0])) return ParamsINC(playerid, "/darllaves [id]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "Jugador desconectado");
		if(!InfoJugador[params[0]][jLider]) return Error(playerid, "Ese jugador no es lider de facción.");
		DarLlavesFaccion(params[0]);
		MensajeF(playerid, -1, "Le diste a "#CINFO"%s "#CBLANCO"todas las llaves de los coches de su facción.", NombreJugador_(params[0]));
		return 1;
	}

	CMD:quitarllaves(playerid, params[])
	{
	    if(Staff(playerid,SubDueno)) return 1;
		if(sscanf(params, "u", params[0])) return ParamsINC(playerid, "/quitarllaves [id]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "Jugador desconectado");
		SacarLlavesFaccion(params[0]);
		MensajeF(playerid, -1, "Le quitaste a "#CINFO"%s "#CBLANCO"todas las llaves de los coches de su facción.", NombreJugador_(params[0]));
		return 1;
	}

	CMD:expulsarliderfam(playerid, params[])
	{
	    if(Staff(playerid,SubDueno)) return 1;

	    new
			F_ID,
			NombreLider[MAX_PLAYER_NAME];

		if(sscanf(params, "i", F_ID)) return ParamsINC(playerid, "/expulsarliderfam [ID Fac]");
		if(!IsValidFam(F_ID)) return Error(playerid, "¡Esa familia no existe!");
		if(isnull(InfoFamilia[F_ID][fLider])) return Error(playerid, "¡Esa familia no tiene lider!");

		alm(NombreLider, InfoFamilia[F_ID][fLider]);

		new
		    LeaderID = INVALID_PLAYER_ID;

		foreach(Player, i)
		{
		    if(!strcmp(pName(i), NombreLider))
		    {
		        LeaderID = i;
		        break;
			}
		}
		if(LeaderID != INVALID_PLAYER_ID)
		{
			InfoJugador[LeaderID][jLiderFam] = 0;
			InfoJugador[LeaderID][jMiembroFam] = 0;
			ActualizarCuenta(LeaderID);
			MensajeF(LeaderID, -1, "El administrador "#CROJO"%s "#CBLANCO"te quitó la familia "#CVERDE"%s", NombreJugador_(playerid), InfoFamilia[F_ID][fNombre] );
		}
		else
		{
			SetUserVarInt (NombreLider, "LiderFam", 0);
		}
		MensajeF(playerid, -1, "Se le quitó la familia "#CVERDE"%s "#CBLANCO"a "#CROJO"%s.", InfoFamilia[F_ID][fNombre], NombreLider );
		alm(InfoFamilia[F_ID][fLider], "");
		ActualizarFamilia(F_ID);
		return 1;
	}


	CMD:editarliderfam(playerid, params[])
	{
	    if(Staff(playerid,SubDueno)) return 1;
	    new
			NombreLider[24],
			F_ID;

		if(sscanf(params, "p< >is[24]", F_ID, NombreLider)) return ParamsINC(playerid, "/editarliderfam [ID Fam] [Nombre_Apellido lider]");
		if(!IsValidFam(F_ID)) return Error(playerid, "¡Esa familia no existe!");

		new
		    str[40],
			LeaderID = INVALID_PLAYER_ID;

		foreach(Player, i)
		{
		    if(!strcmp(pName(i), NombreLider))
		    {
		        LeaderID = i;
		        break;
			}
		}

		if(!isnull(InfoFamilia[F_ID][fLider]))
		{
		    new
		        ActualLeaderID = INVALID_PLAYER_ID,
		        ActualLeaderName[MAX_PLAYER_NAME];

			alm(ActualLeaderName, InfoFamilia[F_ID][fLider]);

			foreach(Player, i)
			{
			    if(!strcmp(pName(i), ActualLeaderName))
			    {
                    ActualLeaderID = i;
                    break;
				}
			}
			if(ActualLeaderID != INVALID_PLAYER_ID)
			{
				InfoJugador[ActualLeaderID][jLiderFam] = 0;
				InfoJugador[ActualLeaderID][jMiembroFam] = 0;
				ActualizarCuenta(ActualLeaderID);
				MensajeF(ActualLeaderID, -1, "El administrador "#CROJO"%s "#CBLANCO"te expulsó de la familia.", NombreJugador_(playerid));
			}
		    else
			{
				SetUserVarInt (ActualLeaderName, "LiderFam", 0);
			}
			MensajeF(playerid, -1, "Ya habia un líder "#CINFO"(%s). "#CBLANCO"Su cargo fue removido.", ActualLeaderName);
		}
		if(LeaderID != INVALID_PLAYER_ID)
		{
			InfoJugador[LeaderID][jLiderFam] = F_ID;
			InfoJugador[LeaderID][jMiembroFam] = 0;
			ActualizarCuenta(LeaderID);
			MensajeF(LeaderID, -1, "El administrador "#CROJO"%s "#CBLANCO"te fijó como lider de la familia "#CVERDE"%s", NombreJugador_(playerid), InfoFamilia[F_ID][fNombre] );
		}
		else
		{
		    new
		        INI:Arch = INI_Open(str);

			INI_SetTag(Arch, "data");
			INI_WriteInt(Arch, "LiderFam", F_ID);
			INI_WriteInt(Arch, "MiembroFam", 0);
			INI_Close(Arch);
		}
		MensajeF(playerid, -1, "Fijaste a "#CINFO"%s "#CBLANCO"como líder de la familia "#CVERDE"%s(%d)", NombreLider, InfoFamilia[F_ID][fNombre], F_ID);
		alm(InfoFamilia[F_ID][fLider], NombreLider);
		ActualizarFamilia(F_ID);
		return 1;
	}

	CMD:expulsar(playerid,params[])
	{
	    new ID_PFac = InfoJugador[playerid][jLider],
	    	ID_PFam = InfoJugador[playerid][jLiderFam];
		if(!ID_PFac && !ID_PFam) return Error(playerid,"¡No eres lider de ninguna familia/facción!");
		if(sscanf(params,"us[20]",params[0],params[1])) return ParamsINC(playerid,"/expulsar [id/nombre] <faccion - famila>");
		if(!IsPlayerConnected(params[0])) return Error(playerid,"¡Jugador desconectado!");
		if(!strcmp(params[1],"faccion",true))
		{
		    Mensaje(playerid, -1, "Desde la "#CAMARILLO"Versión 3 "#CBLANCO"de Ciudad Real RP, está "#CINFO"/faccion.");
			return 1;
		}
		else if(!strcmp(params[1],"familia",true))
		{
		    if(!ID_PFam) return Error(playerid,"¡No eres lider de ninguna familia!");
			if(InfoJugador[params[0]][jLiderFam]) return Error(playerid,"¡Ese jugador es lider!");
			if(!InfoJugador[params[0]][jMiembroFam]) return Error(playerid,"¡Ese jugador no pertenece a tu familia!");
			if( InfoJugador[params[0]][jMiembroFam] != ID_PFam) return Error(playerid,"¡Ese jugador no pertenece a tu familia!");
			new StrFac[160];
			A_Format(StrFac,""#CVERDE"[Familia] "#CINFO"%s "#CBLANCO"expulsó a "#CINFO"%s "#CBLANCO"de la familia.",NombreJugador_(playerid),NombreJugador_(params[0]));
			MensajeFamilia(ID_PFam,StrFac);
			InfoJugador[params[0]][jMiembroFam] = 0;
			InfoJugador[params[0]][jRangoFam] = 1;
			return 1;
		}
		return ParamsINC(playerid,"/expulsar [id/nombre] <faccion - famila>");
	}

	CMD:keycontrol(playerid, params[])
	{
		if (Staff (playerid, Dueno))
		    return 1;

		new Float: x, Float: y, Float: z;

		GetPlayerPos(playerid, x, y, z);

		z += 0.47;

		new
		    KP = CreateDynamicObject(OBJ_KeyPad, x+1.0, y, z, 0, 0, 0);

		EditDynamicObject(playerid, KP);
		SetPVarInt(playerid, "EditandoKP", true);
		return 1;
	}

	CMD:fam(playerid,params[])
	{
	    if(!InfoJugador[playerid][jLiderFam] && !InfoJugador[playerid][jMiembroFam]) return Error(playerid,"¡No tienes ninguna familia!");
	    if(isnull(params)) return ParamsINC(playerid,"/fam [Texto]");
	    if(Cracked[playerid]) return Error(playerid, "¡No puedes hablar por familia estando en este estado!");

		new
			str[132 + MAX_PLAYER_NAME + (8*3)],
			i = ID_Familia(playerid);

		if(InfoJugador[playerid][jLiderFam])
		{
			format(str,sizeof(str),"(( [Familia] Lider %s: "#CAZULLINDO"%s "#CNARANJA2"))",NombreJugador_(playerid),params[0]);
			foreach(Player, p)
			{
			    if(ID_Familia(p) == i && !InfoJugador[p][jBlockFam])
			    {
			    	Mensaje(p, C_NARANJA2, str);
				}
			}
		}
		else
		{
		    new
		        rank[20];
		    switch(InfoJugador[playerid][jRangoFam])
		    {
		        case 1: alm(rank, InfoFamilia[i][fRango_1]);
		        case 2: alm(rank, InfoFamilia[i][fRango_2]);
		        case 3: alm(rank, InfoFamilia[i][fRango_3]);
		        case 4: alm(rank, InfoFamilia[i][fRango_4]);
		        case 5: alm(rank, InfoFamilia[i][fRango_5]);
			}
			format(str,sizeof(str),"(( [Familia] %s %s: "#CBLANCO"%s "#CNARANJA2"))",rank,NombreJugador_(playerid),params);
			foreach(Player, p)
			{
			    if(ID_Familia(p) == i && !InfoJugador[p][jBlockFam])
			    {
			    	Mensaje(p, C_NARANJA2, str);
				}
			}
		}
		return 1;
	}

	CMD:fac(playerid, params[])
	{
	    if(!InfoJugador[playerid][jLider] && !InfoJugador[playerid][jMiembro]) return Error(playerid,"¡No tienes ninguna facción!");
		if(isnull(params)) return ParamsINC(playerid, "/fac [Texto]");
	    if(Cracked[playerid]) return Error(playerid, "¡No puedes hablar por facción estando en este estado!");
		new
		    Str[140];

		if(InfoJugador[playerid][jLider])
		{
			A_Format(Str, "(( [Facción] %s %s: "#CAZULLINDO"%s "#CNARANJA2"))", InfoFaccion[ID_Faccion(playerid)][fRLider], NombreJugador_(playerid), params);
			foreach(Player, p)
			{
			    if(ID_Faccion(p) == InfoJugador[playerid][jLider] && !InfoJugador[p][jBlockFac])
			    {
			    	Mensaje(p, C_NARANJA2, Str);
				}
			}
		}
		else
		{
			A_Format(Str, "(( [Facción] %s %s: "#CBLANCO"%s "#CNARANJA2"))", InfoRango[ID_Faccion(playerid)][InfoJugador[playerid][jRango]], NombreJugador_(playerid), params);
			foreach(Player, p)
			{
			    if(ID_Faccion(p) == InfoJugador[playerid][jMiembro] && !InfoJugador[p][jBlockFac])
			    {
			    	Mensaje(p, C_NARANJA2, Str);
				}
			}
		}
		return 1;
	}

	CMD:r(playerid,params[])
	{
	    if(isnull(params)) return ParamsINC(playerid,"/r [Texto]");
		if( !ID_Faccion(playerid) ) return Error(playerid,"¡No perteneces a ninguna facción!");
		new Str[130];
		A_Format(Str,"> "#CVIOLETA"(RADIO) "#CBLANCO"%s: %s",NombreJugador_(playerid),params);
		if(InfoJugador[playerid][jMiembro]) MensajeFaccion(InfoJugador[playerid][jMiembro],Str);
		else MensajeFaccion(InfoJugador[playerid][jLider],Str);
		A_Format(Str,"%s (radio): %s",NombreJugador_(playerid),params);
		ProxDetector(5,playerid,Str,-1,Hablar,Hablar2,Hablar3,Hablar4);
		return 1;
	}

	CMD:dep(playerid,params[])
	{
	    if(isnull(params)) return ParamsINC(playerid,"/dep [TEXTO]");
		if( !EsLSPD(playerid) &&
			!EsMilitar(playerid) &&
			!EsMedico(playerid) &&
			!EsDelGobierno(playerid)) return Error(playerid,"¡No perteneces a una organización oficial!");
		new Str[140];
		if(EsLSPD(playerid)) A_Format(Str,"> "#CGRIS"(DEPTO) "#CBLANCO"Policía %s: %s",NombreJugador(playerid),params);
		else if(EsMilitar(playerid)) A_Format(Str,"> "#CGRIS"(DEPTO) "#CBLANCO"Militar %s: %s",NombreJugador(playerid),params);
		else if(EsMedico(playerid)) A_Format(Str,"> "#CGRIS"(DEPTO) "#CBLANCO"Médico %s: %s",NombreJugador(playerid),params);
		else if(EsDelGobierno(playerid)) A_Format(Str,"> "#CGRIS"(DEPTO) "#CBLANCO"Político %s: %s",NombreJugador(playerid),params);
		MensajeFaccion(IDLSPD,Str);
		MensajeFaccion(IDLSEM,Str);
		MensajeFaccion(IDLSMD,Str);
		MensajeFaccion(IDGOBIERNO,Str);
		return 1;
	}

	CMD:idnegocio(playerid,params[])
	{
 		foreach(Negocios,n)
	 	{
			if(IsPlayerInRangeOfPoint(playerid,2,InfoNegocio[n][nEntrada_x],InfoNegocio[n][nEntrada_y],InfoNegocio[n][nEntrada_z]))
  			{
  			    MensajeF(playerid, -1, "La ID de este negocio es: "#CPOSITIVO"%d",n);
				return 1;
			}
		}
		return 1;
	}

	CMD:idcasa(playerid,params[])
	{
 		foreach(Casas,c)
	 	{
			if(IsPlayerInRangeOfPoint(playerid,2,InfoCasa[c][cEntrada_x],InfoCasa[c][cEntrada_y],InfoCasa[c][cEntrada_z]))
  			{
  			    MensajeF(playerid, -1, "La ID de esta casa es: "#CPOSITIVO"%d",c);
  			    return 1;
			}
		}
		return Error(playerid,"¡No estás en ningun casa! Dirigete a la entrada de alguno y usa este comando.");
	}

	CMD:ircasa(playerid,params[])
	{
		Para_Admin_Servicio
		if(Staff(playerid,Moderador)) return 1;
		if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/ircasa [ID CASA]");
		if(!(0 <= params[0] < MAX_CASAS)) return Error(playerid, "ID de casa inválido.");
  		if(InfoCasa[params[0]][cVW] == 0 && InfoCasa[params[0]][cInt] == 0) return Error(playerid,"¡Esa casa no existe! (ID INCORRECTA)");
		SetPlayerPos(playerid,InfoCasa[params[0]][cEntrada_x],InfoCasa[params[0]][cEntrada_y],InfoCasa[params[0]][cEntrada_z]);
		Mensaje(playerid,-1,"> Teletransportado correctamente");
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		return 1;
	}

	CMD:irnegocio(playerid,params[])
	{
		Para_Admin_Servicio
		if(Staff(playerid,Moderador)) return 1;
		if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/irnegocio [ID Negocio]");
		if(!(0 <= params[0] < MAX_NEGOCIOS)) return Error(playerid, "ID de negocio inválido.");
  		if(InfoNegocio[params[0]][nVW] == 0 && InfoNegocio[params[0]][nInt] == 0) return Error(playerid,"¡Ese negocio no existe! (ID INCORRECTA)");
		SetPlayerPos(playerid, InfoNegocio[params[0]][nEntrada_x], InfoNegocio[params[0]][nEntrada_y], InfoNegocio[params[0]][nEntrada_z]);
		Mensaje(playerid,-1,"> Teletransportado correctamente");
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		return 1;
	}

	CMD:irint(playerid,params[])
	{
		Para_Admin_Servicio
		if(Staff(playerid,SubDueno)) return 1;
		if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/irint [ID INTERIOR CASA]");
		SetPlayerPos(playerid,InfoInteriorCasa[params[0]][iPos_x],InfoInteriorCasa[params[0]][iPos_y],InfoInteriorCasa[params[0]][iPos_z]);
		SetPlayerInterior(playerid,InfoInteriorCasa[params[0]][iInt]);
		SetPlayerVirtualWorld(playerid,0);
		Mensaje(playerid,-1,"> Teletransportado correctamente");
		return 1;
	}

	CMD:borrarnegocio(playerid,params[])
	{
		Para_Admin_Servicio
		if(Staff(playerid,SubDueno)) return 1;
		if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/borrarnegocio [ID NEGOCIO]");
  		if(!IsValidNeg(params[0])) return Error(playerid,"¡Ese negocio no existe! (ID INCORRECTA)");

		MensajeF(playerid, -1, "Negocio eliminado: "#CROJO"[ID Negocio: %d]", params[0]);

		DestroyDynamic3DTextLabel(InfoNegocio[params[0]][nLabelID]);
		DestroyDynamicPickup(InfoNegocio[params[0]][nPickup]);

		for(new E_NEGOCIO_DATA:i; i < E_NEGOCIO_DATA; i++)
		{
			InfoNegocio[ params[0] ][E_NEGOCIO_DATA: i] = 0;
		}

		new
		    str1[25];

		format(str1,sizeof(str1),"Negocios/%d.ini",params[0]);
		fremove(str1);

		Iter_Remove(Negocios, params[0]);

		new
		    str[100];

		A_Format(str, "%s borró negocio %d", pName(playerid), params[0]);
		Log("admins", str);
		return 1;
	}

	CMD:borrarcasa(playerid,params[])
	{
		Para_Admin_Servicio
		if(Staff(playerid,SubDueno)) return 1;
		if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/borrarcasa [ID Casa]");
  		if(!IsValidHouse(params[0])) return Error(playerid,"¡Esa casa no existe! (ID INCORRECTA)");

		MensajeF(playerid, -1, "Casa Destruida: "#CROJO"[ID Casa: %d]", params[0]);

		DestroyDynamic3DTextLabel(InfoCasa[params[0]][cLabelID]);
		DestroyDynamicPickup(InfoCasa[params[0]][cPickup]);

		for(new E_CASA_DATA: i; i < E_CASA_DATA; i++)
		{
			InfoCasa[params[0]][E_CASA_DATA: i] = 0;
		}

		new
		    str1[30];

		format(str1,sizeof(str1),"Casas/%d.ini",params[0]);
		Iter_Remove(Casas,params[0]);

		fremove(str1);

		new
		    str[100];

		A_Format(str, "%s borro casa %d", pName(playerid), params[0]);
		Log("admins", str);
		return 1;
	}

	CMD:rechazar(playerid, params[])
	{
	    if (isnull(params)) return ParamsINC(playerid, "/rechazar [oferta/faccion/familia]");
	    if (!strfind(params, "oferta", true))
	    {

		    if(GetPVarInt(playerid, "OFERTA_HOUSEID"))
		    {
		        new
		            ID = GetPVarInt(playerid, "OFERTA_POR");

				MensajeF(ID, -1, "El jugador "#CINFO"%s "#CBLANCO"decidio "#CROJO"rechazar "#CBLANCO"tu oferta.", NombreJugador(playerid) );
				MensajeF(playerid, -1, "Rechazaste la oferta de "#CINFO"%s.", NombreJugador(ID));
				// -==============-
				DeletePVar(playerid, "OFERTA_POR"     );
	   			DeletePVar(playerid, "OFERTA_PRECIO"  );
		        DeletePVar(playerid, "OFERTA_HOUSEID" );
		        DeletePVar(ID, "OFERTA_ME");
				// -==============-
				return 1;
			}
		    if(GetPVarInt(playerid, "OFERTA_NEGID"))
		    {
		        new
		            ID = GetPVarInt(playerid, "OFERTA_POR");

				MensajeF(ID, -1, "El jugador "#CINFO"%s "#CBLANCO"decidio "#CROJO"rechazar "#CBLANCO"tu oferta.", NombreJugador(playerid) );
				MensajeF(playerid, -1, "Rechazaste la oferta de "#CINFO"%s.", NombreJugador(ID));
				// -==============-
				DeletePVar(playerid, "OFERTA_POR"     );
	   			DeletePVar(playerid, "OFERTA_PRECIO"  );
		        DeletePVar(playerid, "OFERTA_NEGID"   );
		        DeletePVar(ID, "OFERTA_ME");
				// -==============-
				return 1;
			}
			
			new
				item[40],
				PlayerID = -1;
			
			if (sscanf(params, "p< >s[40]U(-1)", item, PlayerID)) return ParamsINC(playerid, "/rechazar oferta [ID/Nombre]");
			
			if (PlayerID != -1) {
				if (PlayerID == INVALID_PLAYER_ID) return Mensaje(playerid, -1, "El id/nombre escrito no se encuentra conectado.");
				
				if (GetPVarInt(PlayerID, "voffer_on") == 1 && GetPVarInt(PlayerID, "voffer_to") == playerid) {
				
					MensajeF(playerid, -1, "Rechazaste la oferta del jugador "#CINFO"%s.", NombreJugador_(PlayerID));
					MensajeF(PlayerID, -1, "El jugador "#CINFO"%s "#CBLANCO"decidió cancelar tu oferta.", NombreJugador_(playerid));
					CancelOffer(PlayerID);
				}
				else {
					Mensaje(playerid, -1, "No tiene una oferta pendiente.");
				}
				return 1;
			}
			else {
			    Mensaje(playerid, -1, "No tiene una oferta pendiente. Si le ofrecieron un vehículo, recuerde usar "#CINFO"/rechazar oferta [id/nombre del jugador]");
			}
			return 1;
		}
	    else if(!strcmp(params, "faccion", true))
	    {
	        new
				Fac = GetPVarInt(playerid, "INVITACION_FACCION");

			if(!Fac)
			    return Error(playerid, "¡No tienes una invitación para ingresar a una facción!");

			if(ID_Faccion(playerid))
			{
			    DeletePVar(playerid, "INVITACION_FACCION");
			    return Error(playerid, "¡Ya tienes una facción!");
			}
			MensajeFaccionF(Fac, ""#CVERDE"%s "#CBLANCO"rechazó la invitación para la facción. "#CINFO"[%s]", NombreJugador_(playerid), NombreFaccion(Fac) );

			MensajeF(playerid, -1, "La invitación a "#CINFO"%s "#CBLANCO"fue rechazada.", NombreFaccion(Fac));
			DeletePVar(playerid, "INVITACION_FACCION");
			return 1;
		}
	    else if(!strcmp(params, "familia", true))
	    {
	        new
				Fam = GetPVarInt(playerid, "INVITACION_FAMILIA");

			if(!Fam)
			    return Error(playerid, "¡No tienes una invitación para ingresar a una familia!");

			if(ID_Familia(playerid))
			{
			    DeletePVar(playerid, "INVITACION_FAMILIA");
			    return Error(playerid, "¡Ya tienes una familia!");
			}
			MensajeFamiliaF(Fam, ""#CVERDE"%s "#CBLANCO"rechazó la invitación para la familia. "#CINFO"[%s]", NombreJugador_(playerid), InfoFamilia[Fam][fNombre] );

			MensajeF(playerid, -1, "La invitación a "#CINFO"%s "#CBLANCO"fue rechazada.", InfoFamilia[Fam][fNombre]);
			DeletePVar(playerid, "INVITACION_FAMILIA");
			return 1;
		}
		else if(!strcmp(params, "tunning", true))
		{
		    if(!GetPVarInt(playerid, "OFERTA_TUNNING"))
		        return Error(playerid, "No tiene una oferta para tunear.");

			new
			    MecanicoID = GetPVarInt(playerid, "OFERTA_MECANICOID");

			if(!IsPlayerConnected(MecanicoID))
			{
			    Error(playerid, "El mecánico que te ofreció está desconectado. Oferta rechazada");
			    DeletePVar(playerid, "OFERTA_TUNNING");
			    DeletePVar(playerid, "OFERTA_MECANICOID");
			    return 1;
			}

			DeletePVar(playerid, "OFERTA_TUNNING");
			DeletePVar(playerid, "OFERTA_MECANICOID");
			MensajeF(MecanicoID, -1, "El jugador "#CINFO"%s "#CBLANCO"rechazó la oferta para tunear su vehículo.", NombreJugador(playerid));
			Mensaje(playerid, -1, "Rechazaste la oferta.");
			return 1;
		}
		return ParamsINC(playerid, "/rechazar [oferta/faccion/familia]");
	}

	CMD:aceptar(playerid, params[])
	{
	    if(isnull(params)) return ParamsINC(playerid, "/aceptar [oferta/faccion/familia/tunning]");
		
	
	    if(strfind(params, "oferta", true) == 0)
	    {
		    if(GetPVarInt(playerid, "OFERTA_HOUSEID"))
		    {
		        new
		            ID =      GetPVarInt(playerid, "OFERTA_POR"     ),
		            Precio =  GetPVarInt(playerid, "OFERTA_PRECIO"  ),
					HouseID = GetPVarInt(playerid, "OFERTA_HOUSEID" ),
					HouseCount;

				if(!IsPlayerConnected(ID))
				{
					Error(playerid, "El jugador que te ofreció la casa se desconectó.");
					DeletePVar(playerid, "OFERTA_POR"     );
	    			DeletePVar(playerid, "OFERTA_PRECIO"  );
			        DeletePVar(playerid, "OFERTA_HOUSEID" );
		        	DeletePVar(ID, "OFERTA_ME");
					return 1;
				}
				foreach(Casas, i)
				{
				    if(EsDuenoCasa(playerid, i))
				    {
				        HouseCount++;
				        if(HouseCount >= MAX_CASAS_JUGADOR) return Error(playerid, "¡No puedes tener más casas! ~r~MÁXIMO "#MAX_CASAS_JUGADOR"");
					}
				}
				if(Precio > GetPlayerMoney(playerid))
				{
					Error(playerid, "¡No tenes suficiente dinero!");
					Mensaje(ID, -1, "El jugador al que le ofreciste la casa no tiene suficiente dinero.");
					DeletePVar(playerid, "OFERTA_POR"     );
	    			DeletePVar(playerid, "OFERTA_PRECIO"  );
			        DeletePVar(playerid, "OFERTA_HOUSEID" );
		        	DeletePVar(ID, "OFERTA_ME");
					return 1;
				}

				alm(InfoCasa[HouseID][cComprador], pName(playerid) );
				ActualizarCasaLabel(HouseID);
				ActualizarCasa(HouseID);
				GivePlayerMoney(ID, Precio);
				QuitarDinero(playerid, Precio);

				new str[100];
				A_Format(str, "%s vendió casa (ID: %d) a %s ($%d)", pName(ID), HouseID, pName(playerid), Precio);
				Log("propiedades", str);

				// -==============-
				DeletePVar(playerid, "OFERTA_POR"   );
	   			DeletePVar(playerid, "OFERTA_PRECIO");
		        DeletePVar(playerid, "OFERTA_HOUSEID" );
	        	DeletePVar(ID, "OFERTA_ME");
				// -==============-
		        MensajeF(ID, -1, "La venta se concretó con "#CINFO"ÉXITO. "#CBLANCO"La casa fue vendida a %s por "#CVERDE"$%d", NombreJugador_ (ID), Precio);
		        Mensaje(playerid, 1,  "=============================================================");
		        MensajeF(playerid,-1, "Felicitaciones, ¡Le compraste a %s una "#CINFO"CASA "#CBLANCO" por "#CVERDE"$%d!", NombreJugador(ID), Precio);
		        Mensaje(playerid, 1,  "=============================================================");
		        return 1;
			}
		    if(GetPVarInt(playerid, "OFERTA_NEGID"))
		    {
		        new
		            ID =      GetPVarInt(playerid, "OFERTA_POR"     ),
		            Precio =  GetPVarInt(playerid, "OFERTA_PRECIO"  ),
					NegID =   GetPVarInt(playerid, "OFERTA_NEGID"   ),
					NegCount;

				if(!IsPlayerConnected(ID))
				{
					Error(playerid, "El jugador que te ofreció el negocio se desconectó.");
					DeletePVar(playerid, "OFERTA_POR"     );
	    			DeletePVar(playerid, "OFERTA_PRECIO"  );
			        DeletePVar(playerid, "OFERTA_NEGID"   );
		        	DeletePVar(ID, "OFERTA_ME");
					return 1;
				}
				foreach(Negocios, i)
				{
				    if(EsDuenoNegocio(playerid, i))
				    {
				        NegCount++;
				        if(NegCount >= MAX_NEGOCIOS_JUGADOR) return Error(playerid, "¡No puedes tener más negocios! ~r~MÁXIMO "#MAX_NEGOCIOS_JUGADOR"");
					}
				}
				if(Precio > GetPlayerMoney(playerid))
				{
					Error(playerid, "¡No tenes suficiente dinero!");
					Mensaje(ID, -1, "El jugador al que le ofreciste el negocio no tiene suficiente dinero.");
					DeletePVar(playerid, "OFERTA_POR"     );
	    			DeletePVar(playerid, "OFERTA_PRECIO"  );
			        DeletePVar(playerid, "OFERTA_NEGID"   );
		        	DeletePVar(ID, "OFERTA_ME");
					return 1;
				}

				alm(InfoNegocio[NegID][nComprador], pName(playerid) );
				ActualizarNegLabel(NegID);
				ActualizarNegocio(NegID);
				GivePlayerMoney(ID, Precio);
				QuitarDinero(playerid, Precio);

				new str[100];
				A_Format(str, "%s vendió negocio (ID: %d) a %s ($%d)", pName(ID), NegID, pName(playerid), Precio);
				Log("propiedades", str);

				// -==============-
				DeletePVar(playerid, "OFERTA_POR"   );
	   			DeletePVar(playerid, "OFERTA_PRECIO");
		        DeletePVar(playerid, "OFERTA_NEGID" );
	        	DeletePVar(ID, "OFERTA_ME");
				// -==============-
		        MensajeF(ID, -1, "La venta se concretó con "#CVERDE"éxito. "#CBLANCO"El negocio fue vendido a %s por "#CVERDE"$%d", NombreJugador_(ID), Precio);
		        Mensaje(playerid, 1,  "=============================================================");
		        MensajeF(playerid,-1, "Felicitaciones, ¡Le compraste a %s un "#CINFO"NEGOCIO "#CBLANCO" por "#CVERDE"$%d!", NombreJugador(ID), Precio);
		        Mensaje(playerid, 1,  "=============================================================");
		        return 1;
			}
			
			new
				item[40],
				PlayerID = -1;
			
			if (sscanf(params, "p< >s[40]U(-1)", item, PlayerID)) return ParamsINC(playerid, "/aceptar oferta [ID/Nombre]");
			
			if (PlayerID != -1) {
				if (PlayerID == INVALID_PLAYER_ID) return Mensaje(playerid, -1, "El id/nombre escrito no se encuentra conectado.");
				
				if (GetPVarInt(PlayerID, "voffer_on") == 1 && GetPVarInt(PlayerID, "voffer_to") == playerid) {
					new
						price = GetPVarInt(PlayerID, "voffer_price"),
						time = GetPVarInt(PlayerID, "voffer_time"),
						vehID = GetPVarInt(PlayerID, "voffer_vehicle");
						
					if (gettime() - time > 20) {
						CancelOffer(PlayerID);
						Mensaje(PlayerID, -1, "La oferta se canceló porque el jugador tardó mas de 20 segundos en aceptarla.");
						Mensaje(playerid, -1, "La oferta ya expiró. Debe aceptarla en 20 segundos o menos.");
						return 1;
					}
					if (TieneLlaveVeh(PlayerID, vehID) != 2) {
						CancelOffer(PlayerID);
						Mensaje(PlayerID, -1, "La oferta se canceló porque el vehículo ya no te pertenece.");
						Mensaje(playerid, -1, "La oferta se canceló porque el jugador ya no es el propietario del vehículo.");
						return 1;
					}
					if (GetPlayerMoney(playerid) < price) {
						CancelOffer(PlayerID);
						Mensaje(PlayerID, -1, "La oferta se canceló porque el jugador no tiene suficiente dinero.");
						Mensaje(playerid, -1, "La oferta se canceló porque no tienes suficiente dinero.");
						return 1;
					}
					
					new
						ownVeh: ID = veh_ownVehID(vehID);
					
					if (GetVehicles(playerid) >= E_VEH_MAX) {
						CancelOffer(PlayerID);
						Mensaje(PlayerID, -1, "La oferta se canceló porque el jugador no puede tener más vehículos.");
						Mensaje(playerid, -1, "La oferta se canceló porque ya tienes demaciados vehículos.");
						return 1;
					}
					
					veh_setOwner(vehID, pName(playerid));
					ownVeh_MySQL_updateString(ID, "Owner", pName(playerid));
					
					CancelOffer(playerid);
					
					QuitarDinero(playerid, price);
					GivePlayerMoney(PlayerID, price);
					
					Mensaje (playerid, -1, "");
					MensajeF(playerid, -1, "Aceptas la oferta. Le compraste a "#CINFO"%s "#CBLANCO"el vehículo por "#CVERDE"$%d", NombreJugador_(PlayerID), price);
					
					Mensaje (PlayerID, -1, "");
					MensajeF(PlayerID, -1, "El jugador "#CINFO"%s "#CBLANCO"aceptó la oferta. Vendiste el vehículo por "#CVERDE"$%d", NombreJugador_(playerid), price);  
					
					logF("propiedades", "%s vendió a %s vehículo (N: %s | UID: %d | Pat: %s | Precio: %d)", pName(PlayerID), pName(playerid), veh_getNameAsString(vehID), veh_getPlate(vehID), veh_getPlateAsString(vehID), price);

				}
				else {
					Mensaje(playerid, -1, "El id/nombre escrito no te ofreció un vehículo.");
				}
			}
			else {
				Mensaje(playerid, -1, "No tiene una oferta pendiente. Si le ofrecieron un vehículo, recuerde usar "#CINFO"/aceptar oferta [id/nombre del jugador]");

			}
			return 1;
		}
	    else if(!strcmp(params, "faccion", true))
	    {
	        new
				Fac = GetPVarInt(playerid, "INVITACION_FACCION");

			if(!Fac)
			    return Error(playerid, "¡No tienes una invitación para ingresar a una facción!");

			if(ID_Faccion(playerid))
			{
			    DeletePVar(playerid, "INVITACION_FACCION");
			    return Error(playerid, "¡Ya tienes una facción!");
			}
			MensajeFaccionF(Fac, ""#CVERDE"¡%s "#CBLANCO"se unio a la facción! "#CINFO"[%s]", NombreJugador_(playerid), NombreFaccion(Fac) );

			InfoJugador[playerid][jMiembro] = Fac;

			new
			    Str[30],
				INI:Arch;

			A_Format(Str, "Facciones/Miembros%d.ini", Fac);
			Arch = INI_Open(Str);

			INI_SetTag(Arch, "Miembros");
			INI_WriteInt(Arch, pName(playerid), 0);
			INI_Close(Arch);

			InfoJugador[playerid][jRango] = 0;
			MensajeF(playerid, -1, "¡Bienvenido a "#CINFO"%s! "#CBLANCO"Utiliza "#CINFO"/fac "#CBLANCO"para hablar con tus compañeros.", NombreFaccion(Fac));
			DeletePVar(playerid, "INVITACION_FACCION");
			return 1;
		}
	    else if(!strcmp(params, "familia", true))
	    {
	        new
				Fam = GetPVarInt(playerid, "INVITACION_FAMILIA");

			if(!Fam)
			    return Error(playerid, "¡No tienes una invitación para ingresar a una familia!");

			if(ID_Familia(playerid))
			{
			    DeletePVar(playerid, "INVITACION_FAMILIA");
			    return Error(playerid, "¡Ya tienes una familia!");
			}
			MensajeFamiliaF(Fam, ""#CVERDE"¡%s "#CBLANCO"se unio a la familia! "#CINFO"[%s]", NombreJugador_(playerid), InfoFamilia[Fam][fNombre] );

			InfoJugador[playerid][jMiembroFam] = Fam;
			InfoJugador[playerid][jRangoFam] = 1;
			MensajeF(playerid, -1, "¡Bienvenido a "#CINFO"%s! "#CBLANCO"Utiliza "#CINFO"/fam "#CBLANCO"para hablar con tus compañeros.", InfoFamilia[Fam][fNombre]);
			DeletePVar(playerid, "INVITACION_FAMILIA");
			return 1;
		}
		else if(!strcmp(params, "tunning", true))
		{
		    if(GetPlayerVehicleID(playerid) == 0)
		        return Error(playerid, "Debe estar subido al vehículo que quiere tunear.");

		    if(!GetPVarInt(playerid, "OFERTA_TUNNING"))
		        return Error(playerid, "No tiene una oferta para tunear.");

			new
			    MecanicoID = GetPVarInt(playerid, "OFERTA_MECANICOID");

			if(!IsPlayerConnected(MecanicoID))
			{
			    Error(playerid, "El mecánico que te ofreció está desconectado.");
			    DeletePVar(playerid, "OFERTA_TUNNING");
			    DeletePVar(playerid, "OFERTA_MECANICOID");
			    return 1;
			}
			new
			    Float:x, Float:y, Float:z;

			GetPlayerPos(MecanicoID, x, y, z);

			if(GetPlayerDistanceFromPoint(playerid, x, y, z) > 20.0)
			    return Error(playerid, "Estás muy lejos de ese jugador.");

			DeletePVar(playerid, "OFERTA_TUNNING");
			DeletePVar(playerid, "OFERTA_MECANICOID");
			SetPVarInt(MecanicoID, "MECANICO_VEHID", GetPlayerVehicleID(playerid));
   			SetPVarString(MecanicoID, "MECANICO_CLIENTNAME", pName(playerid));
			Mecanico_ClientID[MecanicoID] = playerid;
			MensajeF(MecanicoID, -1, "El jugador "#CINFO"%s "#CBLANCO"aceptó la oferta para tunear su vehículo.", NombreJugador(playerid));
			Mensaje(MecanicoID, -1, "Para abrir el menú y poder modificar el vehículo, use "#CINFO"/tunear menu");
			Mensaje(playerid, -1, "Aceptaste la oferta. Recuerda que puedes utilizar "#CINFO"/terminar tunning "#CBLANCO"para terminar.");
			return 1;
		}
	    else if(!strcmp(params, "taxi", true))
	    {
	        if(InfoJugador[playerid][jTrabajo] != ID_Taxista) return Error(playerid, "Debes ser taxista para usar este comando.");
		}
		return ParamsINC(playerid, "/aceptar [item]");
	}

	CMD:cancelar(playerid, params[]) {
		if (isnull(params)) return ParamsINC(playerid, "/cancelar [opción]");
		
		if (!strcmp(params, "oferta", true)) {
			if (GetPVarInt(playerid, "voffer_on")) {
			
				if (ProxDetectorS(15.0, GetPVarInt(playerid, "voffer_to"), playerid)) {
					Mensaje(GetPVarInt(playerid, "voffer_to"), -1, "El jugador decidió cancelar la oferta.");
				}
				
				CancelOffer(playerid);
				Mensaje(playerid, -1, "Cancelaste la oferta.");
			}
			else {
				Mensaje(playerid, -1, "No realizaste ninguna oferta.");
			}
		}
		return 1;
	}
		

	CMD:vender(playerid, params[])
	{
		if(!InfoJugador[playerid][jHoras]) return Error(playerid, "¡Debes jugar al menos una hora para vender!");

	    new
	        Item_0[20], PlayerID = -1, Precio = -255;

	    if(sscanf(params,"p< >s[20]U(-1)I(-255)",Item_0, PlayerID, Precio))
		{
			Mensaje(playerid, C_AZULRARO, "• "#CBLANCO"Si queres vender tu casa, negocio o vehículo al gobierno, utiliza "#CAZULRARO"/vender [negocio/casa/vehiculo]");
			Mensaje(playerid, C_AZULRARO, "• "#CBLANCO"Si queres venderle algo a otro jugador, utiliza "#CAZULRARO"/vender [negocio/casa/vehiculo] [ID/Nombre] [precio]");
			return 1;
		}
		if (!strcmp(Item_0, "vehiculo", true)) {
		
			new
				vehID = GetPlayerVehicleID(playerid);
				
			if (vehID == 0 || GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return Error(playerid, "Debe estar subido al ~y~vehículo ~w~que quiere vender.");
			if (!veh_isOwnVeh(vehID) || TieneLlaveVeh(playerid, vehID) != 2) return Mensaje(playerid, -1, "Unicamente puede vender vehículos de su propiedad.");
			if (PlayerID == -1) { // No params specified
				if (!IsPlayerInRangeOfPoint(playerid,150,1654.2581,-1062.5406,23.8984)) return Mensaje(playerid, -1, "Debe estar en "#CROJO"Vehículos usados "#CBLANCO"para poder venderlo al gobierno (puede usar un GPS para ubicarlo).");

				if (!GetPVarInt(playerid, "sellmyvehicle")) {
					Mensaje (playerid, -1, "");
					MensajeF(playerid, -1, "¿Realmente desea vender este vehículo al gobierno, por "#CVERDE"$%d"#CBLANCO"?", GetModelPrice(GetVehicleModel(vehID)) * 3 / 4);
					Mensaje (playerid, -1, "El precio corresponde al "#CVERDE"75%% "#CBLANCO"del valor real, escriba "#CINFO"/vender vehiculo "#CBLANCO"nuevamente para confirmar.");
					
					SetPVarInt(playerid, "sellmyvehicle", 1);
				}
				else {
					new price = GetModelPrice(GetVehicleModel(vehID)) * 3 / 4;
					
					DeletePVar(playerid, "sellmyvehicle");
					
					new ownVeh: ownID = veh_ownVehID(vehID);

					GivePlayerMoney(playerid, price);

					ownVeh_MySQL_remove(ownID);
					
					Mensaje (playerid, -1, "");
					MensajeF(playerid, -1, "Vendiste el vehículo al gobierno, por "#CVERDE"$%d.", price);
					
					logF("propiedades", "%s vendió vehículo (N: %s | UID: %d | Pat: %s | Precio: %d)", pName(playerid), veh_getNameAsString(vehID), veh_getPlate(vehID), veh_getPlateAsString(vehID), price);

					ownVeh_remove(ownID);
				}
				return 1;
		
			}
			else {
			
				if (PlayerID == INVALID_PLAYER_ID) return Mensaje(playerid, -1, "El nombre/ID escrito no está en el juego.");
				if (!ProxDetectorS(3.0, playerid, PlayerID)) return Mensaje(playerid, -1, "Se encuentra demaciado lejos del jugador indicado.");
				if (Precio < 1 || Precio > 2500000) return Mensaje(playerid, -1, "El precio debe estar entre "#CVERDE"$1 "#CBLANCO"- "#CVERDE"$2.500.000");
				if (InfoJugador[PlayerID][jHoras] < 4) return Mensaje(playerid, -1, "El jugador debe tener 4 o más horas de juego.");
				
				SetPVarInt(playerid, "voffer_to", PlayerID);
				SetPVarInt(playerid, "voffer_on", 1);
				SetPVarInt(playerid, "voffer_vehicle", vehID);
				SetPVarInt(playerid, "voffer_price", Precio);
				SetPVarInt(playerid, "voffer_time", gettime());
				
				Mensaje (playerid, -1, "");
				MensajeF(playerid, -1, "Le ofreciste a "#CINFO"%s "#CBLANCO"tu vehículo por "#CVERDE"$%d. "#CBLANCO"Escribe "#CINFO"/cancelar oferta "#CBLANCO"para cancelar.",  NombreJugador(PlayerID), Precio);

				Mensaje (PlayerID, -1, "");
				MensajeF(PlayerID, -1, "El jugador "#CINFO"%s "#CBLANCO"te ofrece su vehículo por "#CVERDE"$%d.", NombreJugador(playerid), Precio);
				MensajeF(PlayerID, -1, "La oferta expira en 20 segundos. Escribe "#CINFO"/aceptar oferta %d "#CBLANCO"o "#CINFO"/rechazar oferta %d", playerid, playerid);
				return 1;
			}		
		}
		else if (!strcmp(Item_0, "casa", true))
		{
		    new sucess;
			foreach(Casas,n)
			{
				if(strmatch(InfoCasa[n][cComprador], pName(playerid)))
				{
					if(IsPlayerInRangeOfPoint(playerid,2,InfoCasa[n][cEntrada_x],InfoCasa[n][cEntrada_y],InfoCasa[n][cEntrada_z]))
					{
			    	    if(PlayerID != -1)
			    	    {
							if(Precio == -255) return ParamsINC(playerid, "/vender [casa] [ID] "#CROJO"[precio]");
							if(PlayerID == playerid) return Error(playerid, "¿Por qué te queres vender algo a vos mismo?");
			    	        if(!IsPlayerConnected(PlayerID)) return Error(playerid, "¡Jugador desconectado!");
			    	        if(Precio < 1) return Error(playerid, "El precio debe ser un número positivo.");
							if(GetPVarInt(PlayerID, "OFERTA_POR")) return Error(playerid, "Ese jugador ya recibio una oferta para otra cosa.");
							if(GetPVarInt(playerid, "OFERTA_ME")) return Error (playerid, "Ya tiene una oferta pendiente.");
							if(!ProxDetectorS(5.0, playerid, PlayerID)) return Error(playerid, "Estas demaciado lejos de ese jugador.");
							if(!InfoJugador[PlayerID][jHoras]) return Error(playerid, "¡Ese jugador jugó menos de una hora!");
							MensajeF(PlayerID, -1, "El jugador %s "#CBLANCO"te quiere vender su casa por "#CVERDE"$%d. "#CBLANCO"Utiliza "#CINFO"/aceptar oferta | /rechazar oferta", NombreJugador(playerid), Precio);
							SetPVarInt(PlayerID, "OFERTA_POR", playerid);
			    	        SetPVarInt(PlayerID, "OFERTA_PRECIO", Precio);
			    	        SetPVarInt(PlayerID, "OFERTA_HOUSEID", n);
		    	        	SetPVarInt(playerid, "OFERTA_ME", true);
							MensajeF(playerid, -1, "Le ofreciste a "#CINFO"%s "#CBLANCO"tu casa por "#CVERDE"$%d. "#CBLANCO"Espera su respuesta..", NombreJugador(PlayerID), Precio);
							return 1;
						}
					    InfoCasa[n][cComprada] = false;
						InfoCasa[n][cCerrada] = false;
						ActualizarCasaLabel(n);
						GivePlayerMoney(playerid, floatround(InfoCasa[n][cPrecio]*0.75) );
						Mensaje(playerid, -1, "Vendiste tu casa al gobierno, y una parte del dinero "#CROJO"(75%%)"#CBLANCO" te fue devuelto");
						alm(InfoCasa[n][cComprador],"Sin dueño");
						new str[100];
						A_Format(str, "%s vendió casa %s ($%d-ID:%d)", pName(playerid), InfoCasa[n][cNombre], InfoCasa[n][cPrecio], n);
						Log("propiedades", str);
						ActualizarCasa(n);
						sucess++;
						break;
					}
				}
			}
			if(!sucess) return Error(playerid,"¡No estás en tu casa!");
			return 1;
		}
		else if(!strcmp(Item_0,"negocio",true))
		{
		    new sucess;
			foreach(Negocios,n)
			{
				if(strmatch(InfoNegocio[n][nComprador], pName(playerid)))
				{
					if(IsPlayerInRangeOfPoint(playerid,2,InfoNegocio[n][nEntrada_x],InfoNegocio[n][nEntrada_y],InfoNegocio[n][nEntrada_z]))
					{
			    	    if(PlayerID != -1)
			    	    {
							if(Precio == -255) return ParamsINC(playerid, "/vender [negocio] [ID] "#CROJO"[precio]");
							if(PlayerID == playerid) return Error(playerid, "¿Por qué te queres vender algo a vos mismo?");
			    	        if(!IsPlayerConnected(PlayerID)) return Error(playerid, "¡Jugador desconectado!");
			    	        if(Precio < 1) return Error(playerid, "El precio debe ser un número positivo.");
							if(GetPVarInt(playerid, "OFERTA_ME")) return Error (playerid, "Ya tiene una oferta pendiente.");
							if(GetPVarInt(PlayerID, "OFERTA_POR")) return Error(playerid, "Ese jugador ya recibio una oferta para otra cosa.");
							if(!ProxDetectorS(5.0, playerid, PlayerID)) return Error(playerid, "Estas demaciado lejos de ese jugador.");
							if(!InfoJugador[PlayerID][jHoras]) return Error(playerid, "¡Ese jugador jugó menos de una hora!");
							MensajeF(PlayerID, -1, "El jugador %s "#CBLANCO"te quiere vender su negocio por "#CVERDE"$%d. "#CBLANCO"Utiliza "#CINFO"/aceptar oferta | /rechazar oferta", NombreJugador(playerid), Precio);
							SetPVarInt(PlayerID, "OFERTA_POR", playerid);
			    	        SetPVarInt(PlayerID, "OFERTA_PRECIO", Precio);
			    	        SetPVarInt(PlayerID, "OFERTA_NEGID", n);
							MensajeF(playerid, -1, "Le ofreciste a "#CINFO"%s "#CBLANCO"tu negocio por "#CVERDE"$%d. "#CBLANCO"Espera su respuesta..", NombreJugador(PlayerID), Precio);
		    	        	SetPVarInt(playerid, "OFERTA_ME", true);
							return 1;
						}
					    InfoNegocio[n][nComprado] = false;
						InfoNegocio[n][nCerrado] = false;
						ActualizarNegLabel(n);
						GivePlayerMoney(playerid, floatround(InfoNegocio[n][nPrecio]*0.75) );
						Mensaje(playerid, -1, "Vendiste tu negocio al gobierno, y una parte del dinero "#CROJO"(75%%) "#CBLANCO"te fue devuelto");
						alm(InfoNegocio[n][nComprador],"Sin dueño");
						new str[100];
						A_Format(str, "%s vendió negocio %s ($%d-ID:%d)", pName(playerid), InfoNegocio[n][nNombre], InfoNegocio[n][nPrecio], n);
						Log("propiedades", str);
						ActualizarNegocio(n);
						sucess++;
						break;
					}
				}
			}
			if(!sucess) return Error(playerid,"¡No estás en tu negocio!");
			return 1;
		}

		Mensaje(playerid, C_AZULRARO, "• "#CBLANCO"Si queres vender tu casa, negocio o vehículo al gobierno, utiliza "#CAZULRARO"/vender [negocio/casa/vehiculo]");
		Mensaje(playerid, C_AZULRARO, "• "#CBLANCO"Si queres venderle algo a otro jugador, utiliza "#CAZULRARO"/vender [negocio/casa/vehiculo] [ID/Nombre] [precio]");
		return 1;
	}

	// -------=====[ Comandos trabajos [=======------ //


	//Cosechador
	CMD:cosechar(playerid,params[])
	{
	    if(InfoJugador[playerid][jTrabajo] != ID_Cosechador) return Error(playerid,"¡No eres cosechador!");
		if(!strcmp(params,"soja",false))
		{
		    if(EsCosechadora(GetPlayerVehicleID(playerid)))
		    {
		        if(GetPVarInt(playerid,"EstaCultivando")) return Error(playerid,"¡Ya estás cosechando!");
		        if(IsPlayerWhitSpecialBar (playerid)) return Error (playerid, "Debes terminar lo que estás haciendo antes de cosechar.");
				SetPVarInt(playerid,"EstaCultivando",GetPlayerVehicleID(playerid));
				SetPVarInt(playerid,"ParteCosecha",0);
				SetPlayerRaceCheckpoint(playerid,0,PosCosechador[0][0],PosCosechador[0][1],PosCosechador[0][2],PosCosechador[1][0],PosCosechador[1][1],PosCosechador[1][2],7);
				Mensaje(playerid,-1,"¡Comienza a cosechar soja! Sigue los puntos "#CROJO"rojos "#CBLANCO"para trabajar.");
				SetPVarInt (playerid,"COSECHANDO_ID", 0);
				SetPVarInt (playerid,"StartC", gettime());
				CreatePlayerSpecialBar(playerid, "TRABAJO", "Cosechadora", sizeof (PosCosechador)-2, C_INFO);
				return 1;
			}
			return Error(playerid,"¡Debes estar en una cosechadora para poder cosechar!");
		}
		else if(!strcmp(params,"trigo",false))
		{
		    if(EsCosechadora(GetPlayerVehicleID(playerid)))
		    {
		        #define PosCosechador PosCosechadorLVL2
		        if(InfoJugador[playerid][jNivelTrabajo] < 2) return Error(playerid,"¡Debes ser nivel dos de cosechador para cosechar trigo!");
		        if(GetPVarInt(playerid,"EstaCultivando")) return Error(playerid,"¡Ya estás cosechando!");
		        if(IsPlayerWhitSpecialBar (playerid)) return Error (playerid, "Debes terminar lo que estás haciendo antes de cosechar.");
				SetPVarInt(playerid,"EstaCultivando",GetPlayerVehicleID(playerid));
				SetPVarInt(playerid,"ParteCosecha",0);
				SetPlayerRaceCheckpoint(playerid,0,PosCosechador[0][0],PosCosechador[0][1],PosCosechador[0][2],PosCosechador[1][0],PosCosechador[1][1],PosCosechador[1][2],7);
				Mensaje(playerid,-1,"¡Comienza a cosechar trigo! Sigue los puntos "#CROJO"rojos "#CBLANCO"para trabajar.");
				SetPVarInt(playerid,"COSECHANDO_ID", 1);
				SetPVarInt (playerid,"StartC", gettime());
				CreatePlayerSpecialBar(playerid, "TRABAJO", "Cosechadora", sizeof (PosCosechador)-2, C_INFO);
				#undef PosCosechador
				return 1;
			}
			return Error(playerid,"¡Debes estar en una cosechadora para poder cosechar!");
		}
		return ParamsINC(playerid,"/cosechar <soja/trigo>");
	}

	CMD:comenzar(playerid,params[])
	{
	    if(sscanf(params,"s[20]",params[0])) return ParamsINC(playerid,"/comenzar <ITEM>");
	    if(!strcmp(params,"limpieza",true))
	    {
	    	if(!EsBasurero(playerid)) return Error(playerid,"¡No eres basurero!");
			if(!EsVehBasurero(GetPlayerVehicleID(playerid))) return Error(playerid,"¡No estás en un camión basurero!");
			foreach(Player,i)
			{
				if(GetPVarInt(i,"CAMION_BASURA") == GetPlayerVehicleID(playerid))
				{
					Error(playerid,"¡Ya alguien está utilizando este camión!");
					return 1;
				}
			}
	        SetPlayerCP(playerid,CP_BASURERO,PosBasura[0][0],PosBasura[0][1],PosBasura[0][2],3);
	        Mensaje(playerid,-1,"Dirijete al "#CROJO"punto rojo en el mapa "#CBLANCO"y limpialo, utilizando "#CINFO"/limpiar");
			SetPVarInt(playerid,"CAMION_BASURA",GetPlayerVehicleID(playerid));

			Loop(i, sizeof(PosBasura)-1, 0)
			{
			    if(OBJ_Basura[i] != INVALID_OBJECT_ID) continue;
       			OBJ_Basura[i] = CreateDynamicObject(1574,PosBasura[i][0],PosBasura[i][1],PosBasura[i][2]-1.7,0,0,0);
			}

	        return 1;
		}
		return ParamsINC(playerid,"/comenzar <ITEM>");
	}

	CMD:repartir(playerid,params[])
	{
	    if(isnull(params)) return ParamsINC(playerid, "/repartir [pizza/diarios]");
	    if(!strcmp(params, "diarios", true))
	    {
		    if(InfoJugador[playerid][jTrabajo] != ID_RepartidorB) return Error(playerid,"¡Debes ser repartidor de diarios!");
			new VehID = GetPlayerVehicleID(playerid);
			if(EsBiciRepartidora(VehID))
			{
			    SetPlayerCP(playerid,CP_REPARTIDORB,PosRepartidorBici[0][Posx],PosRepartidorBici[0][Posy],PosRepartidorBici[0][Posz],4);
			    Mensaje(playerid,C_INFO,"> "#CBLANCO"¡Comienza a repartir! Sigue los puntos "#CROJO"rojos "#CBLANCO"en el mapa");
				SetPVarInt(playerid,PVarRepartidorB,1);
				return 1;
			}
			return Error(playerid,"¡Debes estar en un bicicleta!");
		}
	    if(!strcmp(params, "pizza", true))
	    {
		    if(InfoJugador[playerid][jTrabajo] != ID_RepartidorP) return Error(playerid,"¡Debes ser repartidor de pizza!");
			if(!IsPlayerInRangeOfPoint(playerid, 50.0, 2094.7319,-1830.0093,13.5737)) return Error(playerid, "Debes estar cerca de la pizzería para comenzar a repartir pizza");
			if(GetPVarInt(playerid, "Parte_RepartirP")) return Error(playerid, "¡Ya estás repartiendo pizza!");

			SetPlayerCP(playerid, CP_REPARTIDORP, 2121.56, -1823.43, 13.56, 2.0);
			Error(playerid, "Dirigete al ~r~checkpoint ~w~para tomar la pizza.");
			return 1;
		}
		return ParamsINC(playerid, "/repartir [pizza/diarios]");
	}

// --=======================-- //
Float: Resto(num1, num2)
{
	return float(floatround(num1 % num2));
}
// --=======================-- //

	CMD:robar(playerid, params[])
	{
	    if (InfoJugador [playerid][jTrabajo] != ID_Ladron)
	        return SendClientMessage (playerid, -1, "Para robar algo, primero necesitas tener el trabajo de ladrón.");
	        
		if (isnull (params))
		{
		    Mensaje (playerid, -1, "El comando, es "#CAZULRARO"/robar [opción]");
		    Mensaje (playerid, -1, "Podrás ver todas las opciones para robar usando "#CINFO"/trabajo.");
		    return 1;
		}
		
		// Nivel 2
	    if (!strcmp(params, "negocio", true))
	    {
		    static
				ultimo_robo;

	        new
	            i = ID_Negocio (playerid);

	        if (i == INVALID_BUSINESS_ID) return Error(playerid,"¡Debes estar en un negocio!");
	        if (InfoNegocio[i][nTipo] == N_ARMAS) return Error(playerid, "No podes robar el AmmuNation.");
	        if (InfoNegocio[i][nDinero] < 1) return Mensaje (playerid, -1, "Este negocio no tiene más dinero, intenta con otro.");
	        if (GetPVarInt(playerid,"ROBANDO")) return Error(playerid,"¡Ya estás robando!");
			if ((GetTickCount() - ultimo_robo) < 60000*MIN_ENTRE_ROBOS)
			{
			    new
			        MS_LEFT = (GetTickCount() - ultimo_robo),
					Float: Time = (MIN_ENTRE_ROBOS * 60) - (MS_LEFT / 1000),
					Float: Min = (Time / 60),
					Float: Segs = Resto(floatround(Time), 60);

				return MensajeF (playerid, -1, "Los negocios pueden ser robados cada "#CROJO""#MIN_ENTRE_ROBOS" "#CBLANCO"minutos. Falta: "#CVERDE"%02.0f:%02.0f Min.", Min, Segs);
			}

			switch(GetPlayerWeapon(playerid))
			{
			    case 4,5,8,18, 22..34: {}
			    default: return Error(playerid, "¡Debes temer un arma válida para robo, en la mano!");
			}

			new
				Weap[20],
				Rol[50];

			ultimo_robo = GetTickCount();

			GetWeaponName(GetPlayerWeapon(playerid), Weap, 20);
			A_Format(Rol, "apunta con su %s al vendedor/a", Weap);
			AutoRol(playerid, Rol);
			cmd_amenazar(playerid, "");
			CongelarEx(playerid, 2);
			SetTimerEx("Robar", 1000, false, "ii", playerid, 0);
			SetPVarInt(playerid,"ROBANDO", 1);
			return 1;
		}
		if (!strcmp(params,"banco",true)) return Mensaje (playerid,-1,"El sistema de robo al banco aun está en desarrollo.");
		return ParamsINC(playerid,"/robar <banco/negocio>");
	}

	CMD:limpiar(playerid,params[])
	{
	    if(!EsBasurero(playerid)) return Error(playerid,"¡No eres basurero!");
	    new Parte = GetPVarInt(playerid,"B_ParteLimpieza");
	    if(IsPlayerInRangeOfPoint(playerid,3,PosBasura[Parte][0],PosBasura[Parte][1],PosBasura[Parte][2]))
	    {
	        if(!CheckDistanciaConVehiculo(playerid,20,GetPVarInt(playerid,"CAMION_BASURA"))) return Error(playerid,"¡Debes acercar más el camión a ti!");
			if(IsPlayerInAnyVehicle(playerid)) return Error(playerid,"¡Debes estar a pie para recoger basúra!");
			if(Parte >= sizeof(PosBasura)-1) return Error(playerid,"¡Debes ir a descargar la basúra!");
			AutoRol(playerid,"recoje una bolsa y la tira al camión de basúra");
			Parte++;
			SetPVarInt(playerid,"B_ParteLimpieza",Parte);
	        SetPlayerCP(playerid,CP_BASURERO,PosBasura[Parte][0],PosBasura[Parte][1],PosBasura[Parte][2],3);
			DestroyDynamicObject(OBJ_Basura[Parte-1]);
			OBJ_Basura[Parte-1] = INVALID_OBJECT_ID;
			if(Parte >= sizeof(PosBasura)-1)
			{
			    Mensaje(playerid,-1,"Terminaste de juntar la basúra, ahora debes ir al basurero a descargarla "#CINFO"(/descargar basura)");
			}
			return 1;
		}
		return Error(playerid,"No estás en el lugar donde 'deberias' estar. ¡Debes seguir el punto rojo!");
	}

	CMD:descargar(playerid,params[])
	{
		if(!strcmp(params,"basura",true))
		{
		    new
		        Parte = sizeof(PosBasura)-1;
		    if(!IsPlayerInRangeOfPoint(playerid, 6.0, PosBasura[Parte][0],PosBasura[Parte][1],PosBasura[Parte][2])) return Error(playerid, "¡No estás en la zona indicada para descargar la basúra!");
		    if(GetPVarInt(playerid,"B_ParteLimpieza") != sizeof(PosBasura)-1) return Error(playerid,"¡Aún no puedes descargar la basúra!");
			if(!EsVehBasurero(GetPlayerVehicleID(playerid))) return Error(playerid,"¡No estás en un camión basurero!");
			if(GetPVarInt(playerid,"CAMION_BASURA") != GetPlayerVehicleID(playerid)) return Error(playerid,"Debes estar en 'tu' camión de basúra, para descargar. (El camión con el que empezaste)");
			CongelarEx(playerid,8);
			TextoJugador(playerid,"~w~descargando ~g~basura...",8000,3);
			DeletePVar(playerid, "B_ParteLimpieza");
			SetTimerEx("DescagarCamionB",8000,false,"i",playerid);
			return 1;
		}
		return ParamsINC(playerid,"/descargar <ITEM>");
	}

	// -------=====[ Comandos negocios [=======------ //

	CMD:pc(playerid, params[]) // OP:PC
	{
	    static
	        OldPCUsed[MAX_PLAYERS];

		if (PC.State[playerid] == PC_STATE_NONE)
		{
			if (gettime() < OldPCUsed[playerid])
			    return Error(playerid, "Espera unos segundos para volver a usar la PC.");

			new
				NegID = ID_Negocio(playerid);

			if(!EstaEnSuNegocio(playerid))
			    return Error(playerid, "No estás en tu negocio.");

			new
				type = InfoNegocio[NegID][nTipo],
				pc_id = PCMasCercana(playerid, type);

			if(pc_id == -1)
			    return Error(playerid, "No estás en la PC de tu negocio.");

			OldPCUsed[playerid] = gettime() + 10;

			SetPlayerPos(playerid, pc_Data[pc_id][pcX], pc_Data[pc_id][pcY], pc_Data[pc_id][pcZ]);
			SetPlayerFacingAngle(playerid, pc_Data[pc_id][pcA]);

			CongelarEx(playerid);

			ApplyAnimation(playerid, "INT_OFFICE", "OFF_Sit_In", 4.0, 0, 1, 1, 1, 0);
			SetTimerEx("EscribirPC", 3500, false, "ii", playerid, 0);
		}
		else
		{
			new
				NegID = ID_Negocio(playerid);

			if(!EstaEnSuNegocio(playerid))
			    return Error(playerid, "No estás en tu negocio.");

			new
				type = InfoNegocio[NegID][nTipo],
				pc_id = PCMasCercana(playerid, type);

			if(pc_id == -1)
			    return Error(playerid, "No estás en la PC de tu negocio.");

		    Descongelar(playerid);

			SetPlayerPos(playerid, pc_Data[pc_id][pcX], pc_Data[pc_id][pcY], pc_Data[pc_id][pcZ]);
			SetPlayerFacingAngle(playerid, pc_Data[pc_id][pcA]);

		    PC.ToggleMenu(playerid, false);
		    PC.ToggleMenuProductos(playerid, false);
		    PC.ToggleMenuInicio(playerid, false);
		    PC.ToggleMenuGanancias(playerid, false);
		    PC.ToggleMenuProductosComprar(playerid, false);
		    PC.State[playerid] = PC_STATE_NONE;
		    EscribirPC(playerid, 1);
			OldPCUsed[playerid] = gettime() + 10;
		}
		return 1;
	}

	CMD:negocio(playerid,params[])
	{
		if(EstaEnSuNegocio(playerid) && ( ID_Negocio(playerid) != INVALID_BUSINESS_ID ))
		{
		    new n = ID_Negocio(playerid);
			new str[160];
   			format(str,sizeof(str),"- Caja fuerte "#CPOSITIVO"($%d)\n- Cambiar nombre "#CPOSITIVO"(%s)",InfoNegocio[n][nDinero],InfoNegocio[n][nNombre]);

			if (InfoNegocio[n][nTipo] == N_BOLICHE)
   				strcat(str, "\n- Precio de entrada");

			Dialog(playerid,dMenuNegocio,DIALOG_STYLE_LIST,""#CINFO"Negocio",str,"Aceptar","Cancelar");
			SetPVarInt(playerid,"CajaFuerte",CF_NEGOCIO);
			return 1;
		}
		return Error(playerid,"¡No estás en tu negocio!");
	}

	CMD:casa(playerid,params[])
	{
		if( ( ID_Casa(playerid) != INVALID_HOUSE_ID ) && TieneLlaveCasa(playerid,ID_Casa(playerid)))
		{
		    new n = ID_Casa(playerid);
			new str[160];
			format(str,sizeof(str),"- Caja fuerte "#CPOSITIVO"($%d)\n- Cambiar nombre "#CPOSITIVO"(%s)\n- Armario\n- Muebles\n- Contraseña de la puerta",InfoCasa[n][cDinero],InfoCasa[n][cNombre]);
			Dialog(playerid,dMenuCasa,DIALOG_STYLE_LIST,""#CINFO"Casa",str,"Aceptar","Cancelar");
			SetPVarInt(playerid,"CajaFuerte",CF_CASA);
			return 1;
		}
		return Error(playerid,"¡No estás en tu casa!");
	}


	CMD:muebles(playerid,params[])
	{
	    /*new
			houseID = ID_Casa(playerid);

		if (houseID != INVALID_HOUSE_ID)
		{
		    if (TieneLlaveCasa (playerid, houseID))
		    {
				Dialog (playerid, dMuebles_CMD, DIALOG_STYLE_MSGBOX, ""#CBLANCO"MUEBLES", ""#CINFO"\tSeleccione la opción\n\n• "#CVERDE"Lista: "#CBLANCO"Ver lista completa de muebles, donde podrás agregar, eliminar o editar.\n• "#CVERDE"Editar: "#CBLANCO"Habilita el cursor para seleccionar muebles, y editarlos.\n\n", "Lista", "Editar");
			}
		}*/
		return 1;
	}

	// -------=====[ Comandos vehículos [=======------ //

	
	CMD:estacionar(playerid, params[])
	{
		new
			VehID = GetPlayerVehicleID(playerid);

		if (VehID == 0) return Error(playerid, "Debes estar dentro del vehículo para utilizar este comando.");
		if (TieneLlaveVeh(playerid, VehID) == 2 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && veh_getType(VehID) == VEH_TYPE_OWNVEH)
		{
		    new
		        currtime = gettime();

			static
				ViejoEstacionar[MAX_PLAYERS];

			if(ViejoEstacionar[playerid] > currtime)
			{
			    MensajeF(playerid, -1, "Espera "#CROJO"%d "#CBLANCO"segundos para estacionar el vehículo.", -(currtime-ViejoEstacionar[playerid]));
				return 1;
			}
			
			ViejoEstacionar[playerid] = currtime + 30;

			new
				Float:x,
				Float:y,
				Float:z,
				Float:angle,
				intid = veh_getInterior(VehID),
				vwid = veh_getVirtualWorld(VehID);
				
			GetVehiclePos(VehID, x, y, z);
			GetVehicleZAngle(VehID, angle);
			
			veh_setSpawnInfo(VehID, x, y, z, angle, intid, vwid);
			ownVeh_MySQL_update(ownVeh:veh_ownVehID(VehID));
			
			AutoRol(playerid, "estaciona su vehículo");
			TextoJugador(playerid, "~g~~h~ESTACIONADO", 5000, 3);
			return 1;
		}
		return Error(playerid, "No tienes autorización para estacionar este vehículo.");
	}

	CMD:cargar(playerid, params[])
	{
	    if(!strcmp(params, "bidon", true, 5))
	    {
	        if(strlen(params) < 6)
				return ParamsINC(playerid, "/cargar bidon [litros]");

			new
			    litros = strval(params[6]);

			if(!litros)
				return ParamsINC(playerid, "/cargar bidon [litros]");

			new
				i = DestiladorMasCercano(playerid);

			if(i == -1 || GetPlayerVirtualWorld(playerid) != VW_BIGFOOT)
				return Error(playerid, "~r~No estás en un destilador.");

			NeedObject(playerid)<INV_BIDON>;

			if(litros > InfoDestiladorBigFoot[i][destDestilado])
				return Error(playerid, "~r~Ese destilador no tiene tanto querosén.");

			InfoDestiladorBigFoot[i][destDestilado] -= litros;
			InfoDestiladorBigFoot[i][destPorDestilar] -= litros;
			ActualizarLabDestiladorBigFoot(i);

			RemoveObject(playerid);
			GiveObject(playerid, GOAT(INV_BIDONQUEROSEN), litros);
			return 1;
		}

		new
		    Item_0[20],
		    Litros = -33499,
		    VehID = GetPlayerVehicleID(playerid),
			VehType = GetVehType(VehID);

		if(sscanf(params, "p< >s[20]D(-33499)", Item_0, Litros)) return ParamsINC(playerid, "/cargar combustible [opcional: litros]");

		if(!strcmp(Item_0, "combustible", true))
		{
		    new
		        GasStation = -1;
		    foreach(Estacion, i)
		    {
		        if(IsPlayerInRangeOfPoint(playerid, 4.0, InfoEstacion[i][estX], InfoEstacion[i][estY], InfoEstacion[i][estZ]))
		        {
		            GasStation = i;
		            break;
				}
			}
		    if(GasStation == -1) return Error(playerid, "¡Debes estar cerca de un surtidor de combustible!");
	        if(GetPVarInt(playerid,"CargandoComb") || GetPVarInt(playerid, "ID_Estacion")) return Error(playerid,"¡Ya estás cargando combustible!");
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return Error(playerid,"¡Debes ser el conductor de un vehículo!");
			if(VehType != VEHICLE_TYPE_CAR && VehType != VEHICLE_TYPE_BIKE) return Error(playerid, "¡Debe ser una moto, o un coche!");
			if(!InfoEstacion[GasStation][estLitros]) return Error(playerid, "Este surtidor no tiene más combustible.");

			new
			    MaxFuel = veh_getMaxFuel(VehID);

		    if(int(veh_getFuel(VehID)) >= MaxFuel) return Error(playerid, "El tanque ya está lleno, no entra más combustible.");
			if(veh_getEngine(VehID)) return Error(playerid, "El vehículo, tiene que tener el motor apagado.");
		    if(Litros > (MaxFuel-int(veh_getFuel(VehID)))) return Error(playerid, "No entra esa cantidad de litros en el tanque.");
		    if(Litros != -33499 && Litros < 1) return Error(playerid, "La cantidad de litros debe ser un número mayor a uno.");
			if(Litros == -33499)
			{
			    Litros = (MaxFuel-int(veh_getFuel(VehID)));
			}
			SetPVarInt(playerid, "ID_Estacion", GasStation);
	     	CargarGasolina_P(playerid, Litros);
	      	CongelarEx(playerid);
			return 1;
		}
		return ParamsINC(playerid, "/cargar combustible [opcional: litros]");
	}

	CMD:veh(playerid,params[])
	{
		Comando_En_Auto

		new
			VehID = GetPlayerVehicleID(playerid);

		if (!veh_isOwnVeh(VehID)) return Error(playerid,"Este comando se utiliza solo con vehículos propios.");
		if (!strcmp(params[0],"a familia",true))
		{
			new
				famid = ID_Familia(playerid);
				
			if (!famid) return Error(playerid,"¡No pertenece a ninguna familia!");
			
			veh_setFamily(VehID, famid);
			
			ownVeh_MySQL_updateInt(veh_ownVehID(VehID), "famid", famid);

			MensajeFamiliaF(famid, ""#CNARANJA"[Familia] "#CBLANCO"%s unió un %s a la familia",  pName(playerid), veh_getNameAsString(VehID));
			return 1;
		}
		else if(!strcmp(params[0],"sacar familia",true))
		{
			new
				famid = veh_getFamily(VehID);
				
			if (!famid) return Error(playerid, "El vehículo no pertenece a una familia.");
			
			veh_setFamily(VehID, 0);
			
			ownVeh_MySQL_updateInt(veh_ownVehID(VehID), "famid", 0);

			MensajeFamiliaF(famid, ""#CNARANJA"[Familia] "#CBLANCO"%s quitó un %s de la familia",  pName(playerid), veh_getNameAsString(VehID));
			return 1;
		}
		return ParamsINC(playerid,"/veh [a familia/sacar familia]");
	}

	CMD:cerrar(playerid,params[])
	{
	    if(isnull(params))
	        return ParamsINC(playerid, "/cerrar [Opción]");

	    if(!strcmp(params, "laboratorio", true))
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 2.0, CORDS_LAB_BIGFOOT_EXT) || IsPlayerInRangeOfPoint(playerid, 2.0, CORDS_LAB_BIGFOOT_EXT))
			{
				new
				    dominante = LaboratorioBigFoot[labFamDominante],
				    lider = InfoJugador[playerid][jLiderFam];

				if(dominante)
				{
				    if(lider != dominante)
				        return Error(playerid, "Sólo el lider de la familia dominante puede cerrar el laboratorio.");

					if(LaboratorioBigFoot[labCerrado])
					    return Error(playerid, "~r~El laboratorio ya está cerrado.");

                    LaboratorioBigFoot[labCerrado] = true;
                    Error(playerid, "Laboratorio ~r~Cerrado.");
                    Mensaje(playerid, -1, "Recuerda que tus miembros tampoco podrán sacar hojas de coca mientras el laboratorio se encuentre cerrado.");
					ActualizarBigFoot();
					ActualizarLabelBigFoot();
					return 1;
				}
				return Error(playerid, "No puedes hacer eso.");
			}
		}

	    if(!strcmp(params, "peaje", true))
	    {
	        if(!EsMilitar(playerid))
	            return Error(playerid, "No eres militar.");

			if(IsPlayerInRangeOfPoint(playerid, 3.0, 57.10400, -1532.26917, 5.62030))
			{
			    if(!PeajeSF)
			        return Error(playerid, "Este peaje ya está cerrado.");

				PeajeSF = false;
				MensajeFaccionF(IDLSEM, ""#CVERDE"[Cabina de Peaje] "#CBLANCO"%s bloqueó el peaje "#CAZULRARO"Los Santos & San Fierro.", NombreJugador_(playerid));
				return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 3.0, -1751.46399, -712.29333, 29.85430))
			{
			    if(!PeajeLV)
			        return Error(playerid, "Este peaje ya está cerrado.");

				PeajeLV = false;
				MensajeFaccionF(IDLSEM, ""#CVERDE"[Cabina de Peaje] "#CBLANCO"%s bloqueó el peaje "#CAZULRARO"Los Santos & Las Venturas.", NombreJugador_(playerid));
				return 1;
			}
			else
			    return Error(playerid, "No estás en una cabina de peaje.");
		}

        new
            VehID;

	    if(!strcmp(params,"vehiculo",true))
	    {
			VehID = VehMasCercano(playerid, true);
			if (VehID == INVALID_VEHICLE_ID) return Error(playerid,"No se encontro ningún vehículo cerca tuyo.");
			if (veh_getJob(VehID)) return Error(playerid,"¡No puedes cerrar un vehículo de trabajo con este comando!");

			new
			    Str_rol[70];

			if(veh_getDoors(VehID)) return 1;

			A_Format(Str_rol, "cierra las puertas del %s con su llave", veh_getNameAsString(VehID));
			AutoRol(playerid, Str_rol);

			veh_setDoors(VehID, true);

			ownVeh_MySQL_updateInt(veh_ownVehID(VehID), "bools", veh_getOptions(VehID));
			return 1;
		}
	    else if(!strcmp(params,"capo",true))
	    {
	        if (IsPlayerInAnyVehicle(playerid)) return Error(playerid,"¡Debes estar afuera para cerrar el capo!");
			
			VehID = VehMasCercano(playerid, true);
			if (VehID == INVALID_VEHICLE_ID) return Error(playerid,"No se encontro ningún vehículo cerca tuyo.");

			if (!veh_getBonnet(VehID)) return 1;
			
			veh_setBonnet(VehID, false);
			
			AutoRol(playerid,"cierra el capó del vehículo");
			return 1;
		}
	    else if(!strcmp(params,"maletero",true))
		{
	        if(IsPlayerInAnyVehicle(playerid)) return Error(playerid,"¡Debes estar afuera para abrir el maletero!");
			VehID = VehMasCercano(playerid, true);
			if(VehID == INVALID_VEHICLE_ID) return Error(playerid,"No se encontro ningún vehículo cerca tuyo.");

			if (!veh_getBoot(VehID)) return 1;
			
			veh_setBoot(VehID, false);
			AutoRol(playerid,"cierra el maletero del vehículo");
			return 1;
		}
	    else if(!strcmp(params,"casa",true))
	    {
			foreach(Casas,n)
			{
				if(TieneLlaveCasa(playerid,n))
				{
					if(IsPlayerInRangeOfPoint(playerid,1,InfoCasa[n][cEntrada_x],InfoCasa[n][cEntrada_y],InfoCasa[n][cEntrada_z]) || (IsPlayerInRangeOfPoint(playerid,1,InfoCasa[n][cSalida_x],InfoCasa[n][cSalida_y],InfoCasa[n][cSalida_z]) && GetPlayerVirtualWorld(playerid) == InfoCasa[n][cVW]))
					{
						TextoJugador(playerid,"~w~puerta ~r~cerrada",3000,3);
						AutoRol(playerid,"cierra la puerta de su casa con llave");
						InfoCasa[n][cCerrada] = true;
						ActualizarCasaLabel(n);
						ActualizarCasa(n);
						return 1;
					}
				}
			}
			return Error(playerid,"No estás en la puerta de tu casa, o no tienes una.");
		}
		//Negocio
	    else if(!strcmp(params,"negocio",true))
	    {
			foreach(Negocios,n)
			{
				if(strmatch(InfoNegocio[n][nComprador], pName(playerid)))
				{
					if(IsPlayerInRangeOfPoint(playerid,1,InfoNegocio[n][nEntrada_x],InfoNegocio[n][nEntrada_y],InfoNegocio[n][nEntrada_z]))
					{
						TextoJugador(playerid,"~w~puerta ~r~cerrada",3000,3);
						AutoRol(playerid,"cierra la puerta de su negocio con llave");
						InfoNegocio[n][nCerrado] = true;
						ActualizarNegLabel(n);
						ActualizarNegocio(n);
						return 1;
					}
				}
			}
			return Error(playerid,"No estás en la puerta de tu negocio, o no tienes uno.");
		}
		//Garage
	    else if(!strcmp(params,"garage",true))
	    {
	   		foreach(Garages,i)
			{
				if(IsPlayerInRangeOfPoint(playerid,3,InfoGarage[i][gExt_x],InfoGarage[i][gExt_y],InfoGarage[i][gExt_z]))
				{
					if(strmatch(InfoCasa[InfoGarage[i][gIDCasa]][cComprador],pName(playerid)))
					{
					    InfoGarage[i][gCerrado] = true;
					    TextoJugador(playerid,"~w~garage ~r~cerrado",3000,3);
						ActualizarGarage(i);
					    return 1;
					}
				}
			}
			return Error(playerid,"No estás en la puerta de tu garage, o no tienes uno.");
		}
		return ParamsINC(playerid,"/cerrar [Opción]");
	}

	CMD:peaje(playerid,params[])
	{
		new
		    p_type = -1,
		    p_num;

  		PeajeMasCercano(playerid, p_type, p_num, 7.0);

		if(p_type == -1)
		    return Error(playerid, "~r~No estás en un peaje.");

		if(GetPlayerMoney(playerid) < 15)
		    return Error(playerid, "Necesitas ~g~$15 ~w~para pagar el peaje.");

		// Peaje LS-SF
		else if(p_type == 0)
		{
		    if(PeajeSF == false)
		        return Error(playerid, "El peaje fue bloqueado por el ejército.");

			static
				ultimaabridaxd;

			if(gettime() < ultimaabridaxd)
			    return Error(playerid, "Espera a que la barrera termine de descender.");

			ultimaabridaxd = gettime() + 10;

			QuitarDinero(playerid, 15);

			if(p_num == 0)
				RotarObjetoGlobal(BPEAJESF[p_num], R_PEAJE_SF_0_A);

			else
				RotarObjetoGlobal(BPEAJESF[p_num], R_PEAJE_SF_1_A);

		}
		// Peaje LS-LV
		else if(p_type == 1)
		{
		    if(PeajeLV == false)
		        return Error(playerid, "El peaje fue bloqueado por el ejército.");

			static
				ultimaabridaxd;

			if(gettime() < ultimaabridaxd)
			    return Error(playerid, "Espera a que la barrera termine de descender.");

			ultimaabridaxd = gettime() + 10;

			QuitarDinero(playerid, 15);

			if(p_num == 0)
				RotarObjetoGlobal(BPEAJESF[p_num], R_PEAJE_LV_0_A);

			else
				RotarObjetoGlobal(BPEAJESF[p_num], R_PEAJE_LV_1_A);
		}
		SetTimerEx("VolverBarreraPeaje", 8000, false, "ii", p_type, p_num);
	    return 1;
	}

stock PeajeMasCercano(playerid, &type, &num, Float:radi)
{
	if(IsPlayerInRangeOfPoint(playerid, radi, C_PEAJE_SF_0))
	{
	    type = 0;
	    num = 0;
	    return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, radi, C_PEAJE_SF_1))
	{
	    type = 0;
	    num = 1;
	    return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, radi, C_PEAJE_LV_0))
	{
	    type = 1;
	    num = 0;
	    return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, radi, C_PEAJE_LV_1))
	{
	    type = 1;
	    num = 1;
	    return 1;
	}
	return 1;
}

CALLBACK: VolverBarreraPeaje(type, num)
{
	if(type == 0)
	{
	    if(num == 0)
			RotarObjetoGlobal(BPEAJESF[num], R_PEAJE_SF_0_C);

		else
			RotarObjetoGlobal(BPEAJESF[num], R_PEAJE_SF_1_C);
	}
	else if(type == 1)
	{
	    if(num == 0)
			RotarObjetoGlobal(BPEAJELV[num], R_PEAJE_LV_0_C);

		else
			RotarObjetoGlobal(BPEAJELV[num], R_PEAJE_LV_1_C);
	}
	return 1;
}

	CMD:abrir(playerid,params[])
	{
	    if(isnull(params))
	        return ParamsINC(playerid, "/abrir [Opción]");

	    if(!strcmp(params, "laboratorio", true))
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 2.0, CORDS_LAB_BIGFOOT_EXT) || IsPlayerInRangeOfPoint(playerid, 2.0, CORDS_LAB_BIGFOOT_INT))
			{
				new
				    dominante = LaboratorioBigFoot[labFamDominante],
				    lider = InfoJugador[playerid][jLiderFam];

				if(dominante)
				{
				    if(lider != dominante)
				        return Error(playerid, "Sólo el lider de la familia dominante puede abrir el laboratorio.");

					if(!LaboratorioBigFoot[labCerrado])
					    return Error(playerid, "~r~El laboratorio ya está abierto.");

                    LaboratorioBigFoot[labCerrado] = false;
                    GameTextForPlayer(playerid, "Laboratorio ~g~Abierto.", 4000, 3);
					ActualizarBigFoot();
					ActualizarLabelBigFoot();
					return 1;
				}
				return Error(playerid, "No puedes hacer eso.");
			}
			return 1;
		}

	    if(!strcmp(params, "peaje", true))
	    {
	        if(!EsMilitar(playerid))
	            return Error(playerid, "No eres militar.");

			if(IsPlayerInRangeOfPoint(playerid, 3.0, 57.10400, -1532.26917, 5.62030))
			{
			    if(PeajeSF)
			        return Error(playerid, "Este peaje ya está abierto.");

				PeajeSF = true;
				MensajeFaccionF(IDLSEM, ""#CVERDE"[Cabina de Peaje] "#CBLANCO"%s desbloqueó el peaje "#CAZULRARO"Los Santos & San Fierro.", NombreJugador_(playerid));
				return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 3.0, -1751.46399, -712.29333, 29.85430))
			{
			    if(PeajeLV)
			        return Error(playerid, "Este peaje ya está abierto.");

				PeajeLV = true;
				MensajeFaccionF(IDLSEM, ""#CVERDE"[Cabina de Peaje] "#CBLANCO"%s desbloqueó el peaje "#CAZULRARO"Los Santos & Las Venturas.", NombreJugador_(playerid));
				return 1;
			}
			else
			    return Error(playerid, "No estás en una cabina de peaje.");
		}

        new
            VehID;

	    if(!strcmp(params,"vehiculo",true))
	    {
			VehID = VehMasCercano(playerid, true);
			if (VehID == INVALID_VEHICLE_ID) return Error(playerid,"No se encontro ningún vehículo cerca tuyo.");
			if (veh_getJob(VehID)) return Error(playerid,"¡No puedes cerrar un vehículo de trabajo con este comando!");

			new
			    Str_rol[70];

			if(!veh_getDoors(VehID)) return 1;

			A_Format(Str_rol, "abre las puertas del %s con su llave", veh_getNameAsString(VehID));
			AutoRol(playerid, Str_rol);

			veh_setDoors(VehID, false);

			ownVeh_MySQL_updateInt(veh_ownVehID(VehID), "bools", veh_getOptions(VehID));
			return 1;
		}
	    else if(!strcmp(params,"capo",true))
	    {
	        if (IsPlayerInAnyVehicle(playerid)) return Error(playerid,"¡Debes estar afuera para abrir el capo!");
			
			VehID = VehMasCercano(playerid, true);
			
			if (VehID == INVALID_VEHICLE_ID) return Error(playerid,"No se encontro ningún vehículo cerca tuyo.");

			if (veh_getBonnet(VehID)) return 1;
			
			veh_setBonnet(VehID, true);
			AutoRol(playerid, "abre el capó de su vehículo.");
			return 1;
		}
	    else if(!strcmp(params,"maletero",true))
		{
	        if(IsPlayerInAnyVehicle(playerid)) return Error(playerid,"¡Debes estar afuera para abrir el maletero!");
			VehID = VehMasCercano(playerid, true);
			if(VehID == INVALID_VEHICLE_ID) return Error(playerid,"No se encontro ningún vehículo que tengas llave cerca tuyo.");

			if (veh_getBoot(VehID)) return 1;
			
			veh_setBoot(VehID, true);
			
			AutoRol(playerid, "abre el maletero del vehículo.");
			
			return 1;
		}
	    else if(!strcmp(params,"casa",true))
	    {
			foreach(Casas,n)
			{
				if(TieneLlaveCasa(playerid,n))
				{
					if(IsPlayerInRangeOfPoint(playerid,1,InfoCasa[n][cEntrada_x],InfoCasa[n][cEntrada_y],InfoCasa[n][cEntrada_z]) || (IsPlayerInRangeOfPoint(playerid,1,InfoCasa[n][cSalida_x],InfoCasa[n][cSalida_y],InfoCasa[n][cSalida_z]) && GetPlayerVirtualWorld(playerid) == InfoCasa[n][cVW]))
					{
						TextoJugador(playerid,"~w~puerta ~g~abierta",3000,3);
						AutoRol(playerid,"abre la puerta de su casa con su llave");
						InfoCasa[n][cCerrada] = false;
						ActualizarCasaLabel(n);
						ActualizarCasa(n);
						return 1;
					}
				}
			}
			return Error(playerid,"No estás en la puerta de tu casa, o no tienes una.");
		}
	    else if(!strcmp(params,"negocio",true))
	    {
			foreach(Negocios,n)
			{
				if(strmatch(InfoNegocio[n][nComprador], pName(playerid)))
				{
					if(IsPlayerInRangeOfPoint(playerid,1,InfoNegocio[n][nEntrada_x],InfoNegocio[n][nEntrada_y],InfoNegocio[n][nEntrada_z]) || (IsPlayerInRangeOfPoint(playerid,1,InfoNegocio[n][nSalida_x],InfoNegocio[n][nSalida_y],InfoNegocio[n][nSalida_z]) && GetPlayerVirtualWorld(playerid) == InfoNegocio[n][nVW]))
					{
						TextoJugador(playerid,"~w~puerta ~g~abierta",3000,3);
						AutoRol(playerid,"abre la puerta de su negocio con su llave");
						InfoNegocio[n][nCerrado] = false;
						ActualizarNegLabel(n);
						ActualizarNegocio(n);
						return 1;
					}
				}
			}
			return Error(playerid,"No estás en la puerta de tu negocio, o no tienes uno.");
		}
		//Garage
	    else if(!strcmp(params,"garage",true))
	    {
	   		foreach(Garages,i)
			{
				if(IsPlayerInRangeOfPoint(playerid,3,InfoGarage[i][gExt_x],InfoGarage[i][gExt_y],InfoGarage[i][gExt_z]))
				{
					if(strmatch(InfoCasa[InfoGarage[i][gIDCasa]][cComprador],pName(playerid)))
					{
					    InfoGarage[i][gCerrado] = false;
					    TextoJugador(playerid,"~w~garage ~g~abierto",3000,3);
						ActualizarGarage(i);
					    return 1;
					}
				}
			}
			return Error(playerid,"No estás en la puerta de tu garage, o no tienes uno.");
		}
		return ParamsINC(playerid,"/abrir [Opción]");
	}


	// --=======[ COMANDOS LSPD / LSEM ]========-- //

	CMD:autorizararmas(playerid,params[])
	{
	    if(InfoJugador[playerid][jLider] != IDLSPD && InfoJugador[playerid][jLider] != IDLSEM ) return Error(playerid,"¡Solo el lider policia/militar puede hacer esto!");
		if(sscanf(params,"u",params[0])) return ParamsINC(playerid,"/autorizararmas [ID]");
	 	if(!ProxDetectorS(8.0,playerid,params[0])) return Error(playerid,"¡Ese jugador está demasiado lejos!");
		new Str[60];
		A_Format(Str,"le da una licencia de armas a %s",NombreJugador(params[0]));
		AutoRol(playerid,Str);
		InfoJugador[params[0]][jLicenciaArmas] = true;
		return 1;
	}

	CMD:desautorizararmas(playerid,params[])
	{
	    if(InfoJugador[playerid][jLider] != IDLSPD && InfoJugador[playerid][jLider] != IDLSEM ) return Error(playerid,"¡Solo el lider policia/militar puede hacer esto!");
		if(sscanf(params,"u",params[0])) return ParamsINC(playerid,"/desautorizararmas [ID]");
	 	if(!ProxDetectorS(8.0,playerid,params[0])) return Error(playerid,"¡Ese jugador está demasiado lejos!");
		new Str[60];
		A_Format(Str,"le quita la licencia de armas a %s",NombreJugador(params[0]));
		AutoRol(playerid,Str);
		InfoJugador[params[0]][jLicenciaArmas] = false;
		return 1;
	}

	CMD:irpos(playerid,params[])
	{
	    if(Staff(playerid,Administrador)) return 1;
	    Para_Admin_Servicio

	    new
			Float:Pos[3];

	    if(sscanf(params, "p<,>fff", Pos[0], Pos[1], Pos[2])) return ParamsINC(playerid,"/irpos [CORDENADA, CORDENADA, CORDENADA]");

	    Loop(i, 3, 0)
		{
			if(Pos[i] > 9999.9)
			{
				return Error(playerid,"Coordenada demasiado grande.");
			}
		}

	    return SetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	}

	CMD:refuerzos (playerid,params[])
	{
	    if (!EsLSPD(playerid)) return Error(playerid,"¡No eres policía!");
	    if (Cracked[playerid]) return Error(playerid, "¡No puedes pedir refuerzos estando en este estado!");
		foreach(Player,i) if (EsLSPD(i))
		{
			MensajeF (i, -1, "¡El oficial "#CLSPD"%s "#CBLANCO"necesita refuerzos! "#CNARANJA"(Punto naranja)", NombreJugador(playerid) );
			SetPlayerMarkerForPlayer (i, playerid, C_REFUERZOSLSPD);
		}
		PlayerBools [playerid] |= e_REFUERZOS;
		Mensaje (playerid, -1, "Utiliza "#CINFO"/noref "#CBLANCO"para desactivar los refuerzos.");
	    return 1;
	}

	CMD:noref (playerid, params[])
	{
	    if (!EsLSPD(playerid)) return Error(playerid,"¡No eres policía!");
		if (!(PlayerBools [playerid] & e_REFUERZOS)) return Error (playerid, "No tienes refuerzos pendientes.");

		new
		    col = GetPlayerColor (playerid);

		foreach(Player,i) if (EsLSPD(i))
			SetPlayerMarkerForPlayer(i, playerid, col);

		Mensaje (playerid, -1, "Los refuerzos fueron desactivados.");
		PlayerBools [playerid] &= ~e_REFUERZOS;
	    return 1;
	}

	CMD:activartazer(playerid,params[])
	{
	    if(!EsLSPD(playerid)) return Error(playerid,"¡No eres policia!");
	    if(GetPVarInt(playerid,"TAZER_DK")) return Error(playerid,"¡Ya tienes el tazer activado!");
	    new Arma,Balas;
	    GetPlayerWeaponData(playerid,2,Arma,Balas);
	    if(Arma != WEAP_TAZER || !Balas) return Error(playerid,"¡No tienes una 9mm!");
	    AutoRol(playerid,"carga su 9mm tazer");
	    SetPVarInt(playerid,"TAZER_DK",1);
	    return 1;
	}

	CMD:desactivartazer(playerid,params[])
	{
	    if(!EsLSPD(playerid)) return Error(playerid,"¡No eres policia!");
	    if(!GetPVarInt(playerid,"TAZER_DK")) return Error(playerid,"¡No tienes el tazer activado!");
	    new Arma,Balas;
	    GetPlayerWeaponData(playerid,2,Arma,Balas);
	    if(Arma != WEAP_TAZER || !Balas) return Error(playerid,"¡No tienes una 9mm!");
	    AutoRol(playerid,"descarga su 9mm tazer");
	    DeletePVar(playerid,"TAZER_DK");
	    return 1;
	}

	CMD:sacarcables(playerid,params[])
	{
	    if(!EsLSPD(playerid)) return Error(playerid,"¡No eres policia!");
	    if(sscanf(params,"u",params[0])) return ParamsINC(playerid,"/sacarcables [ID/NOMBRE]");
	 	if(!ProxDetectorS(2.0,playerid,params[0])) return Error(playerid,"¡Ese jugador está demasiado lejos!");
		if(!GetPVarInt(params[0],"TAZEADO")) return Error(playerid,"¡Ese jugador no está tazeado!");
		if(!IsPlayerConnected(params[0])) return Error(playerid,"¡Jugador desconectado!");
		new Str[75];
		A_Format(Str,"le quita los cables de su cuerpo a %s con una pinza",NombreJugador(params[0]));
		AutoRol(playerid,Str);
		DeletePVar(params[0],"TAZEADO");
		TogglePlayerCrack(params[0], false);
		cmd_detener(params[0],"");
		TextoJugador(params[0],"~w~te quitaron los cables",3000,3);
		return 1;
	}

	CMD:revisarcinturon(playerid,params[])
	{
	    if(!EsLSPD(playerid) && !EsMilitar(playerid)) return Error(playerid,"No eres militar, ni policia!");
	    if(sscanf(params,"u",params[0])) return ParamsINC(playerid,"/revisarcinturon [ID/NOMBRE]");
		if(!IsPlayerConnected(params[0])) return Error(playerid,"¡Jugador desconectado!");
	 	if(!ProxDetectorS(6.0,playerid,params[0])) return Error(playerid,"¡Ese jugador está demasiado lejos!");
		if(!IsPlayerInAnyVehicle(params[0])) return Error(playerid,"¡Ese jugador no está en un vehículo!");
		new Str[60];
		if(GetPVarInt(params[0],"TIENE_CINTURON"))
		{
		    A_Format(Str,"%s tiene el cinturón puesto.",NombreJugador(params[0]));
		    Mensaje(playerid,-1,Str);
		}
		else
		{
		    A_Format(Str,"%s no tiene el cinturón puesto.",NombreJugador(params[0]));
		    Mensaje(playerid,-1,Str);
		}
		A_Format(Str,"se fija si %s tiene el cinturón puesto",NombreJugador(params[0]));
		AutoRol(playerid,Str);
		return 1;
	}

	CMD:usar(playerid,params[])
	{
	    if(!strcmp(params,"camaras",true))
	    {
		    return Error (playerid, "El sistema está actualmente deshabilitado.");
		}
		else if(!strcmp(params,"camilla", true))
		{
			if(!EsMedico(playerid)) return Error(playerid,"¡No eres médico!");
			Loop(i, sizeof(Camillas), 0)
			{
				if(InfoCamilla[i][camiUsadaPor] == playerid) return Error(playerid,"¡Ya estás usando una camilla!");
			    if(IsPlayerInRangeOfPoint(playerid, 3.0, Camillas[i][0], Camillas[i][1], Camillas[i][2]))
			    {
			        if(IsPlayerConnected (InfoCamilla[i][camiUsadaPor])) return 1;

			        InfoCamilla[i][camiUsadaPor] = playerid;
			        KillTimer2(playerid, TIMER_CAMILLA);

			        new
			            Float:Pos[4];

					GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
					GetPlayerFacingAngle(playerid, Pos[3]);
					GetPosInFrontOfPlayer(playerid, Pos[0], Pos[1], 1.7);

					SetObjectPos(InfoCamilla[i][camiObjID], Pos[0], Pos[1], Pos[2]);
					SetObjectRot(InfoCamilla[i][camiObjID], 0.0, 0.0, Pos[3]);

			        Timer_Jugador[playerid][TIMER_CAMILLA] = SetTimerEx("ActualizarCamilla", 80, true, "ii", playerid, InfoCamilla[i][camiObjID]);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			        AutoRol(playerid,"toma una camilla");
			        return 1;
				}
			}
			return Error(playerid,"¡No hay una camilla para usar!");
		}
	    else if(!strcmp(params,"medicamentos",true))
	    {
	        new Str[100];
	        A_Format(Str,"Ibupìrac x 400\t"#CVERDE"(%d)\nIbupìrac x 600\t"#CVERDE"(%d)",InfoJugador[playerid][jIbu400],InfoJugador[playerid][jIbu600]);
			Dialog(playerid,dTomarMed,DIALOG_STYLE_LIST,"Tomar medicamentos",Str,"Aceptar","Cancelar");
			return 1;
		}
		else if(!strcmp(params, "televisor", true))
		{
			Loop(i, sizeof InfoTV, 0)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 2.0, InfoTV[i][tvPos][0], InfoTV[i][tvPos][1], InfoTV[i][tvPos][2]))
			    {
			        AutoRol(playerid, "Comienza a ver la televisión");
			        ActualizarCuenta(playerid);

					new
					    Float:x, Float:y, Float:z;
					GetPlayerPos(playerid, x, y, z);

					SetPVarFloat(playerid, "TV_x", x);
					SetPVarFloat(playerid, "TV_y", y);
					SetPVarFloat(playerid, "TV_z", z);
					SetPVarInt(playerid, "TV_int", GetPlayerInterior(playerid) );
					SetPVarInt(playerid, "TV_vw", GetPlayerVirtualWorld(playerid) );

			        SetPlayerVirtualWorld(playerid, 0);
					TogglePlayerSpectating(playerid, true);
			        SetPVarInt(playerid, "VIENDO_TV",1);
			        PlayerBools [playerid] |= e_MUTEADO;
					SetPVarInt(playerid,"TV_ID",i);
					MostrarTV(playerid, CANAL_LSTV);
					SelectTextDraw(playerid, C_ROJO);

				    Mensaje(playerid,-1,"Cuando quiera dejar de usar la televisión, use "#CINFO"/dejar televisor");
					if(!InfoTV[i][tvPrendida])
					{
					    TextDrawShowForPlayer(playerid, TV_Apagado);
					}
					MostrarTDTV(playerid);
					return 1;
				}
			}
			return Error(playerid, "Aquí no hay ningún televisor.");
		}
		else if(!strcmp(params, "bidon", true))
		{
			NeedObject(playerid)<INV_BIDONCOMBUSTIBLE>;
			if(GetPlayerVehicleID(playerid)) return Error(playerid, "Debes estar en frente del tanque del vehículo.");

			new
			    VehID = VehMasCercano(playerid, .Radi_max = 10.0);

			if(VehID == INVALID_VEHICLE_ID) return Error(playerid, "Debes estar al frente del tanque de un vehículo.");

			new
			    Float:x, Float:x2,
			    Float:y, Float:y2,
			    Float:z, Float:z2;

			GetVehicleModelInfo(GetVehicleModel(VehID), VEHICLE_MODEL_INFO_PETROLCAP, x, y, z);
			GetVehiclePos(VehID, x2, y2, z2);

			x2 += x;
			y2 += y;
			z2 += z;

			if(IsPlayerInRangeOfPoint(playerid, 2.0, x2, y2, z2))
			{
			    new
			        MaxFuel = veh_getMaxFuel(VehID),
					TotalFuel = int(veh_getFuel(VehID)) + 10;

				if(TotalFuel > MaxFuel)
				    TotalFuel = MaxFuel;

				veh_setFuel(VehID, TotalFuel);

				AutoRol(playerid, "coloca 10 litros de combustible en un vehículo.");
				RemoveObject(playerid);
				return 1;
			}
			return Error(playerid, "Debes estar en frente del tanque del vehículo.");
		}
		return ParamsINC(playerid,"/usar <ITEM>");
	}

	#define CreateAnim(%0,%1,%2,%3,%4,%5,%6,%7,%8) 		CMD:%0(playerid,params[])\ return ApplyAnim(playerid,%0,%1,%2,%3,%4,%5,%6,%7,%8)
	#define CreateAnim2(%0,%1,%2,%3,%4,%5,%6,%7,%8,%9) 	CMD:%0(playerid,params[])\ return !strcmp(params, %9, true)) ? ApplyAnim(playerid,%0,%1,%2,%3,%4,%5,%6,%7,%8) : 1

	stock ApplyAnim(playerid, message[], animlib[], animname[], Float:fdelta, loop, lockx, locky, freeze, time)
	{
		ApplyAnimation(playerid, animlib, animname, delta, loop, lockx, locky, freeze, time);
		if(!isnull(message))
		{
		    Mensaje(playerid, -1, message);
		}
		return 1;
	}

	CMD:encender(playerid,params[])
	{
		if(!strcmp(params,"cigarrillo",true))
		{
			NeedObject(playerid)<INV_CIGARRILLO>;

			new
			    obj_encendedor = GOAT(INV_ENCENDEDOR),
				bool: suc;

			InvLoop(i,playerid)
			{
			    if(ItemInventario[playerid][i][invObject] == obj_encendedor)
			    {
				    suc = true;

				    if(ItemInventario[playerid][i][invData] < 8)
				        return Error(playerid, "El ~b~encendedor ~w~no tiene más gas.");

				    ItemInventario[playerid][i][invData] -= 8;
				    break;
			    }
			}

			if (!suc)
			    return Error(playerid, "No tienes un encendedor.");

		    AutoRol(playerid,"enciende su cigarrillo con un encendedor");

			RemoveObject(playerid);
			GiveObject(playerid, GOAT(INV_CIGARRILLOON), 9);

			Mensaje(playerid,-1,"Prendiste un cigarrillo. Usa "#CVERDE"/fumar "#CBLANCO"para fumarlo, "#CINFO"/tirar "#CBLANCO"para dejarlo.");
            ApplyAnimation(playerid, "SMOKING", "M_SMK_IN", 4.0, 0, 0, 0, 0, 0); // encender
			return 1;
		}
		else if(!strcmp(params,"porro",true))
		{
			NeedObject(playerid)<INV_PORRO>;

			new
			    obj_encendedor = GOAT(INV_ENCENDEDOR),
				bool: suc;

			InvLoop(i,playerid)
			{
			    if(ItemInventario[playerid][i][invObject] == obj_encendedor)
			    {
				    suc = true;

				    if(ItemInventario[playerid][i][invData] < 8)
				        return Error(playerid, "El ~b~encendedor ~w~no tiene más gas.");

				    ItemInventario[playerid][i][invData] -= 8;
				    break;
			    }
			}

			if (!suc)
			    return Error(playerid, "No tienes un encendedor.");

			new
			    data = GetObjectData(playerid);

		    AutoRol(playerid,"enciende su faso con un encendedor");

			RemoveObject(playerid);
			GiveObject(playerid, GOAT(INV_PORROON), data);

			Mensaje(playerid, -1, "Prendiste un porro. Usa "#CVERDE"/fumar "#CBLANCO"para fumarlo, "#CINFO"/tirar "#CBLANCO"para dejarlo.");
            ApplyAnimation(playerid, "SMOKING", "M_SMK_IN", 4.0, 0, 0, 0, 0, 0); // encender
			return 1;
		}
		else if(!strcmp(params,"horno",true))
		{
			NeedObject(playerid)<INV_ENCENDEDOR>;

			if(EstaEnFabricaBigFoot(playerid))
			{
				new
				    data = GetObjectData(playerid),
				    i = HornoMasCercano(playerid);

				if(data < 8)
					return Error(playerid, "El ~b~encendedor ~w~no tiene gas suficiente.");

				if(i == -1)
				    return Error(playerid, "No estás cerca de un horno.");

				if(!InfoHornoBigFoot[i][hornoCarbon])
				    return Error(playerid, "Necesitas meterle ~r~Carbón ~w~al horno para poder encenderlo.~n~~n~Usa ~b~/tirar ~w~cerca del horno para cocinar un objeto.");

			    InfoHornoBigFoot[i][hornoEncendido] = true;
			    CurrentObjectData[i] -= 8;
			    ActualizarLabelHornoBigFoot(i);
			    CrearFuegoHornoBigFoot(i);
			    Mensaje(playerid, -1, "¡Usa "#CINFO"/recoger paquete "#CBLANCO"cuando quieras empaquetar la cocaina!");
				return 1;
			}
			else if(EstaEnFabricaBlackAso(playerid))
			{
				new
				    data = GetObjectData(playerid),
				    i = HornoMasCercano(playerid, 1);

				if(data < 8)
					return Error(playerid, "El ~b~encendedor ~w~no tiene gas suficiente.");

				if(i == -1)
				    return Error(playerid, "No estás cerca de un horno.");

				if(!InfoHornoBlackAso[i][hornoCarbon])
				    return Error(playerid, "Necesitas meterle ~r~Carbón ~w~al horno para poder encenderlo.~n~~n~Usa ~b~/tirar ~w~cerca del horno para cocinar un objeto.");

			    InfoHornoBlackAso[i][hornoEncendido] = true;
			    CurrentObjectData[i] -= 8;
			    ActualizarLabelHornoBlackAso(i);
			    //CrearFuegoHornoBlackAso(i);
				return 1;
			}
		}
		return ParamsINC(playerid,"/encender [objeto]");
	}

	CMD:apagar(playerid,params[])
	{
		if(!strcmp(params,"horno",true))
		{
		    if(EstaEnFabricaBigFoot(playerid))
		    {
				new
				    i = HornoMasCercano(playerid);

				if(i == -1)
				    return Error(playerid, "No estás cerca de un horno.");

			    InfoHornoBigFoot[i][hornoEncendido] = false;
			    ActualizarLabelHornoBigFoot(i);
			    BorrarFuegoHornoBigFoot(i);
				return 1;
			}
			else if(EstaEnFabricaBlackAso(playerid))
			{
				new
				    i = HornoMasCercano(playerid);

				if(i == -1)
				    return Error(playerid, "No estás cerca de un horno.");

			    InfoHornoBigFoot[i][hornoEncendido] = false;
			    ActualizarLabelHornoBlackAso(i);
			    //BorrarFuegoHornoBlackAso(i);
				return 1;
			}
			return ParamsINC(playerid,"/apagar [objeto]");
		}
		return 1;
	}

	CMD:comedor(playerid, params[])
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, 1587.9299,-1549.8568,1062.3993))
	    {
	        if(!InfoJugador[playerid][jEncarcelado])
	            return Error(playerid, "No estás preso.");

			Dialog(playerid, dComedorCarcel, DIALOG_STYLE_LIST, ""#CROJO"Menú del comedor", "Hamburguesa\nPizza", "Pedir", "Volver");
			return 1;
		}
		return 1;
	}

	CMD:comer(playerid, params[])
	{
	    new
	        obj = GetObject(playerid);

		if(obj == -1)
		    return Error(playerid, "No tienes comida en la mano.");

		new
		    type = ObjectData[obj][invType],
			comida = 0;

		switch(type)
		{
		    case INV_POLLOCHICO, INV_POLLOGRANDE:
		    {
		        comida = 1;
			}
		    case INV_HAMBCHICA, INV_HAMBGRANDE:
		    {
		        comida = 2;
			}
		    case INV_PIZZACHICA, INV_PIZZAGRANDE:
		    {
		        comida = 3;
			}
		    default:
				return Error(playerid, "No tienes comida en la mano.");
		}

		static
		    UltimaComida[MAX_PLAYERS];

		if(UltimaComida[playerid] > gettime())
		    return 1;

		UltimaComida[playerid] = gettime()+6;

		if (GetObjectData(playerid) < 1)
		{
		    RemoveObject(playerid);
		    return Error(playerid, "No tienes más comida");
		}

		if (comida == 1)
		{
		    ApplyAnimation(playerid, "FOOD", "EAT_Chicken", 4.0, 0, 1, 1, 0, 0);
		    AutoRol(playerid, "come de su pollo");
		}
		else if (comida == 2)
		{
		    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.0, 0, 1, 1, 0, 0);
		    AutoRol(playerid, "come de su hamburguesa");
		}
		else if (comida == 3)
		{
		    ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 4.0, 0, 1, 1, 0, 0);
		    AutoRol(playerid, "come de su pizza");
		}

		new
		    Float: hunger = InfoJugador[playerid][jHambre];

		hunger += 8.5;

		if(hunger > 100.0)
		    hunger = 100.0;

		CurrentObjectData[playerid] --;
		InfoJugador[playerid][jHambre] = hunger;
		MostrarNecesidadesEx(playerid);
		return 1;
	}

	CMD:fumar(playerid,params[])
	{
		if(GetObject(playerid) == GOAT(INV_CIGARRILLOON)) // Cigarrillo
		{
		    static
		        UltimaFumada[MAX_PLAYERS];

			if (UltimaFumada[playerid] > gettime())
			    return 1;

			UltimaFumada[playerid] = gettime() + 8;

			new
				data = GetObjectData(playerid);

			if (data < 1)
			{
				GameTextForPlayer(playerid, "~r~cigarrillo acabado", 3000, 3);
				Error(playerid, "Usa ~b~/tirar ~w~para tirar el cigarrillo al piso.");
			    return 1;
			}

	        ApplyAnimation(playerid, "GANGS", "smkcig_prtl", 3.0, 0, 0, 0, 0, 0, true);
			SetTimerEx("HumoFumar", 3000, false, "ii", playerid, 0);

			AutoRol(playerid, "fuma de su cigarrillo.");
			CurrentObjectData[playerid] = data-1;
		    return 1;
		}
		else if(GetObject(playerid) == GOAT(INV_PORROON)) // porro
		{
		    static
		        UltimaFumada[MAX_PLAYERS];

			if (UltimaFumada[playerid] > gettime())
			    return 1;

			UltimaFumada[playerid] = gettime() + 8;

			new
				data = GetObjectData(playerid);

			if (data < 1)
			{
				GameTextForPlayer(playerid, "~r~porro acabado", 3000, 3);
				Error(playerid, "Usa ~b~/tirar ~w~para tirar el porro al piso.");
			    return 1;
			}

	        ApplyAnimation(playerid, "GANGS", "smkcig_prtl", 3.0, 0, 0, 0, 0, 0, true);
			SetTimerEx("HumoFumar", 3000, false, "ii", playerid, 1);

			AutoRol(playerid, "fuma de su porro.");
			CurrentObjectData[playerid] = data-1;
		    return 1;
		}
		return 1;
	}

	CMD:armar(playerid,params[])
	{
	    if(!strcmp(params,"porro",true, 5))
	    {
			NeedObject(playerid)<INV_BOLSAMARI>;

	        if(strlen(params) < 6)
	        {
	            ParamsINC(playerid, "/armar porro [Cantidad de gramos]");
	            Mensaje(playerid, C_AZULRARO, "• NOTA: "#CBLANCO"Por gramo, son 3 consumiciones (Fumadas, secas). Máximo es 5 gramos.");
				return 1;
			}

			new
				gramos = strval(params[6]);

			if(!(1 <= gramos <= 5))
	            return ParamsINC(playerid, "/armar porro [Cantidad de gramos] "#CROJO"(Máximo 5 gramos)");

			new
			    Data = GetObjectData(playerid),
				item_seda = GOAT(INV_PAQUETESEDA),
				bool: suc;

			if (gramos > Data)
			    return Error(playerid, "~r~No tienes esa cantidad de gramos.");

			InvLoop(i, playerid)
			{
			    if (ItemInventario[playerid][i][invObject] == item_seda)
			    {
					if (!ItemInventario[playerid][i][invData])
					    return Error(playerid, "~r~Necesitas al menos un hilos de seda para hacerte un porro.");

					ItemInventario[playerid][i][invData] --;

					suc = true;
					break;
				}
			}

			if (!suc)
			    return Error(playerid, "~r~No tienes un paquete de seda en tu inventario.");

			CurrentObjectData[playerid] -= gramos;

       		new
         		response = GuardarObjetoInventario(playerid, GetObject(playerid), -1, GetObjectData(playerid));

			if (response != 0)
			    return Error(playerid, "~r~No se pudo guardar tu paquete en el inventario.");

			GiveObject(playerid, GOAT(INV_PORRO), (gramos * 3));
			return 1;
		}
		return ParamsINC(playerid,"/armar porro");
	}

	CMD:paquete(playerid, params[])
	{
		if(!strcmp(params, "sacar", true, 5))
		{
		    if(strlen(params) < 6)
		        return ParamsINC(playerid, "/paquete sacar [gramos]");

			new
			    o = ObjetoTiradoMasCercano(playerid);

			if(o == -1)
			    return Error(playerid, "Acá no hay un paquete.");

			new
			    obj = ObjetoTirado[o][obj_t_Type],
				dat = ObjetoTirado[o][obj_t_Data];

			if(ObjectData[obj][invType] == INV_PAQUETECOCA)
			{
				new
				    Gramos = strval(params[6]);

				if(Gramos < 1)
				    return ParamsINC(playerid, "/paquete sacar [gramos]");

				if(Gramos > 30)
				    return Error(playerid, "Máximo 30 gramos.");

				if(Gramos > dat)
				    return Error(playerid, "En el paquete no hay tantos gramos.");

				new
				    my_obj = GetObject(playerid),
				    my_data = GetObjectData(playerid);

				if(my_obj == GOAT(INV_BOLSACOCA))
				{
				    if((my_data + Gramos) > 30)
				        return Error(playerid, "No entran más de 30 gramos en una bolsa.");

					CurrentObjectData[playerid] = (my_data + Gramos);
				}
				else
				{
					GiveObject(playerid, GOAT(INV_BOLSACOCA), Gramos);
				}
				ObjetoTirado[o][obj_t_Data] -= Gramos;
				ActualizarLabelObjetoTirado(o);
				GuardarObjetoTirado(o);
				new
				    str[100];
				A_Format(str, "saca %d gramo(s) de un paquete de cocaina, y seguidamente lo guarda en una bolsa", Gramos);
				AutoRol(playerid, str);
				return 1;
			}
			if(ObjectData[obj][invType] == INV_PAQUETEMARI)
			{
				new
				    Gramos = strval(params[6]);

				if(Gramos < 1)
				    return ParamsINC(playerid, "/paquete sacar [gramos]");

				if(Gramos > 30)
				    return Error(playerid, "Máximo 30 gramos.");

				if(Gramos > dat)
				    return Error(playerid, "En el paquete no hay tantos gramos.");

				new
				    my_obj = GetObject(playerid),
				    my_data = GetObjectData(playerid);

				if(my_obj == GOAT(INV_BOLSAMARI))
				{
				    if((my_data + Gramos) > 30)
				        return Error(playerid, "No entran más de 30 gramos en una bolsa.");

					CurrentObjectData[playerid] += Gramos;
				}
				else
				{
				    if(my_obj != -1)
				        return Error(playerid, "Debes desocuparte las manos.");

					GiveObject(playerid, GOAT(INV_BOLSAMARI), Gramos);
				}
				ObjetoTirado[o][obj_t_Data] -= Gramos;
				ActualizarLabelObjetoTirado(o);
				GuardarObjetoTirado(o);
				new
				    str[100];
				A_Format(str, "saca %d gramo(s) de un paquete de marihuana, y seguidamente lo guarda en una bolsa", Gramos);
				AutoRol(playerid, str);
				return 1;
			}
			else
			    return Error(playerid, "Este objeto no es un paquete.");
		}
		return ParamsINC(playerid, "/paquete sacar [gramos]");
	}

	CMD:consumir(playerid,params[])
	{
		if(!strcmp(params, "cocaina ", true, 8))
		{
			NeedObject(playerid)<INV_BOLSACOCA>;

			new
				Gramos = strval(params[7]);

			if(Gramos <= 0)
				return ParamsINC(playerid, "/consumir cocaina "#CROJO"[gramos]");

			static
				UltimaConsumicion[MAX_PLAYERS];

			new
			    time = gettime();

			if(UltimaConsumicion[playerid] > time)
			    return Error(playerid, "Debes esperar unos segundos para consumir otra vez.");

			UltimaConsumicion[playerid] = time+10;

			new
				ExtraData = GetObjectData(playerid);

			if(Gramos > ExtraData)
				return MensajeF(playerid, -1, "No tienes esa cantidad de cocaina. Tienes "#CROJO"%d "#CBLANCO"gramos de cocaina.", ExtraData);

			if(Gramos > 4)
				return Mensaje(playerid, -1, "Puedes consumir máximo "#CROJO"4 "#CBLANCO"gramos de una vez.");

			CurrentObjectData[playerid] -= Gramos;
			SetTimerEx("Papear", 3500, false, "ii", playerid, Gramos);

			if(!IsPlayerInAnyVehicle(playerid))
				ApplyAnimation(playerid,"SMOKING","M_smkstnd_loop",2.1,0,0,0,0,0);

			return 1;
		}
		return ParamsINC(playerid,"/consumir [sustancia] [cantidad]");
	}

CALLBACK: Papear(playerid, Gramos)
{
	Papeado[playerid] += (Gramos * 90);
	SetCustomWeather(playerid, 72);
	SetCustomTime(playerid, 21);
	new
	    str[70];
	A_Format(str, "aspira %d gramo(s) de cocaina", Gramos);
	AutoRol(playerid, str);
	InfoJugador[playerid][jPapeado] += Gramos;
	//SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) + (Gramos * 500));
	return 1;
}

stock CrearPinchaRuedas(Float:x, Float:y, Float:z, Float:Angle)
{
	new
	    Slot = -1,
		Float: Area[2], Float: Angle2;

	for(new i; i < sizeof(PinchaRuedas); i++)
	{
	    if(PinchaRuedas[i] == INVALID_OBJECT_ID)
	    {
	        Slot = i;
	        break;
		}
	}

	if(Slot == -1) return -1;

 	PinchaRuedas[Slot] = CreateDynamicObject(2892, x, y, z, 0, 0, Angle+90.0);
	// --------------------------
	Angle2 = Angle-90.0;
	Area[0] = x + (2.4 * floatsin(-Angle2, degrees));
	Area[1] = y + (2.4 * floatcos(-Angle2, degrees));
	PICK_PinchaRuedas[Slot][0] = CreateDynamicPickup(19300, 14, Area[0], Area[1], z+1.0);
	// --------------------------
	Angle2 = Angle+90.0;
	Area[0] = x + (2.4 * floatsin(-Angle2, degrees));
	Area[1] = y + (2.4 * floatcos(-Angle2, degrees));
	PICK_PinchaRuedas[Slot][1] = CreateDynamicPickup(19300, 14, Area[0], Area[1], z+1.0);
	// --------------------------
	return 1;
}


	CMD:crearcono(playerid,params[])
	{
		if(!EsLSPD(playerid) && !EsMilitar(playerid)) return Error(playerid,"¡No eres policia/militar!"),1;
		if(IsPlayerInAnyVehicle(playerid)) return Error(playerid, "¡No puedes poner un cono estando en un vehículo!");

		new
		    Slot = -1;
		for(new i; i < sizeof(Cono); i++)
		{
		    if(Cono[i] == INVALID_OBJECT_ID)
		    {
		        Slot = i;
		        break;
			}
		}

		if(Slot == -1) return Error(playerid,"¡No puedes poner más conos!");
		new
			Float:CheckPos[4];
		GetPlayerPos(playerid,CheckPos[0],CheckPos[1],CheckPos[2]);
		GetPlayerFacingAngle(playerid,CheckPos[3]);
		Cono[Slot] = CreateDynamicObject(1238, CheckPos[0], CheckPos[1], CheckPos[2]-0.7, 0.0, 0.0, CheckPos[3]+180);
		GameTextForPlayer(playerid,"~w~Cono ~g~creado",3000,3);
		return 1;
	}

	CMD:borrarcono(playerid,params[])
	{
		if(!EsLSPD(playerid) && !EsMilitar(playerid)) return Error(playerid, "¡No eres policia/militar!");
		if(IsPlayerInAnyVehicle(playerid)) return Error(playerid, "¡No puedes borrar un cono estando en un vehículo!");

		for(new i; i < sizeof(Cono); i++)
		{
		    new
		        Float: p[3];

			GetDynamicObjectPos(Cono[i], p[0], p[1], p[2]);
			if(GetPlayerDistanceFromPoint(playerid, p[0], p[1], p[2]) < 1.0)
			{
			    DestroyDynamicObject(Cono[i]);
			    Cono[i] = INVALID_OBJECT_ID;
				GameTextForPlayer(playerid,"~w~Cono ~r~borrado", 3000, 3);
			    return 1;
			}
		}
		return Error(playerid, "No se encontró ningún ~r~~h~~h~cono ~w~al lado tuyo.");
	}

	CMD:borrarconos(playerid,params[])
	{
		if(!EsLSPD(playerid) && !EsMilitar(playerid)) return Error(playerid,"¡No eres policia/militar!"),1;

		for(new i; i < sizeof(Cono); i++)
		{
		    DestroyDynamicObject(Cono[i]);
		    Cono[i] = INVALID_OBJECT_ID;
		}
		MensajeFaccionF(ID_Faccion(playerid), ""#CNARANJA"[Facción] "#CBLANCO"%s eliminó todos los conos.", NombreJugador_(playerid) );
		return 1;
	}

	CMD:agarrar(playerid, params[])
	{
		if(!EsLSPD(playerid) && !EsMilitar(playerid)) return Error(playerid,"¡No eres policia/militar!"),1;
		if(sscanf(params, "u", params[0])) return ParamsINC(playerid, "/agarrar [ID/Nombre]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "El ID/Nombre del jugador no existe (Desconectado)");
		if(!ProxDetectorS(3.0, playerid, params[0])) return Error(playerid, "El jugador ayudante está muy lejos tuyo.");
		new
			Rol[80];
		A_Format(Rol, "toma a %s del brazo", NombreJugador_(params[0]) );
		AutoRol (playerid, Rol);

		JugadorArrastrado[playerid] = params[0];
		return 1;
	}

	CMD:soltar(playerid, params[])
	{
		if(!EsLSPD(playerid) && !EsMilitar(playerid)) return Error(playerid,"¡No eres policia/militar!"),1;
		if(sscanf(params, "u", params[0])) return ParamsINC(playerid, "/soltar [ID/Nombre]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "El ID/Nombre del jugador no existe (Desconectado)");
		if(JugadorArrastrado[playerid] != params[0]) return Error(playerid, "No estás agarrando a ese jugador.");
		new
			Rol[80];

		A_Format(Rol, "suelta a %s", NombreJugador_(params[0]) );
		AutoRol (playerid, Rol);

		JugadorArrastrado[playerid] = INVALID_PLAYER_ID;
		return 1;
	}

	CMD:multar(playerid, params[])
	{
		if(!EsLSPD(playerid)) return Error(playerid,"¡No eres policia!");
		if(strlen(params) > 54) return Error(playerid, "La razón de multa es demaciado larga.");

		new
		    Price,
		    Reason[50];

		if(sscanf(params, "ds[50]", Price, Reason)) return ParamsINC(playerid, "/multar [Precio] [Razón] "#CROJO"(Debe estar mirando al vehículo)");
		if(Price < 100 || Price > 3000) return Error(playerid, "Precio mínimo: ~r~$100~n~~w~Precio máximo: ~r~$3000");
		if(strfind(Reason, "|") != -1) return Error(playerid, "La razón de la multa contiene caracteres no permitidos.");

		new
		    Float:x, Float:y, Float:z,
			Float:camx, Float:camy, Float:camz;

		GetPlayerPos(playerid, x, y, z);
		GetPlayerCameraFrontVector(playerid, camx, camy, camz);
		x += camx*2;
		y += camy*2;
		z += camz*2;
		foreach(veh, i)
		{
		    if(veh_isOwnVeh(i))
		    {
		    	if(GetVehicleDistanceFromPoint(i, x, y, z) < 2.0)
		    	{
		    	    new
		    	        str[160];
					SetPVarInt(playerid, "MULTA_VEHID", i);
					SetPVarInt(playerid, "MULTA_PRECIO", Price);
					SetPVarString(playerid, "MULTA_RAZON", Reason);
					A_Format(str, ""#CBLANCO"¿Desea multar este "#CAMARILLO"%s(%s)"#CBLANCO" por "#CVERDE"$%d"#CBLANCO"?\n\n\tLa razón: "#CROJO"%s.", veh_getNameAsString(i),veh_getPlateAsString(i), Price, Reason);
					Dialog(playerid, dMultarVeh, DIALOG_STYLE_MSGBOX, ""#CNARANJA"Multar vehículo", str, "Multar", "Cancelar");
					A_Format(str, "multa un %s de patente %s", veh_getNameAsString(i), veh_getPlateAsString(i));
					return 1;
				}
			}
		}
		return Error(playerid, "No estás cerca de ningún vehículo con dueño.");
	}

	CMD:pagar(playerid, params[])
	{
	    if(isnull(params)) return ParamsINC(playerid, "/pagar [ID/Nombre] [Dinero]");
	    if(!strcmp(params, "multas", true))
	    {
	        if(!IsPlayerInRangeOfPoint(playerid, 2.0, 297.1155,178.8438,1007.171))
	            return Mensaje(playerid, -1, "Para pagar las multas del vehículo, debes estar en la "#CVERDE"Oficina de Pagos.");

	        new
	            str[70],
				dialogstr[E_VEH_MAX*sizeof(str)],
				suc;
				
			ownVeh_displayVehicles(playerid, car) 
			{
			    A_Format(str, ""#CINFO"%s\t\t"#CBLANCO"Patente: "#CAMARILLO"%s\n", veh_getNameAsString(ownVeh_ID(ownVeh:car)), veh_getPlateAsString(ownVeh_ID(ownVeh:car)));
				strcat(dialogstr, str);
				suc = true;
			}
			if(!suc) return Error(playerid, "No tienes vehículos.");
			Dialog(playerid, dPagarMultas, DIALOG_STYLE_LIST, ""#CNARANJA"Lista de vehículos", dialogstr, "Aceptar", "Cancelar");
			return 1;
		}
	    else if(!strcmp(params, "embargacion", true))
	    {
	        new
	            str[60],
				str2[sizeof(str) * E_VEH_MAX],
				VehEmbargados;

	        ownVeh_displayVehicles(playerid, car) {
				if(VehEmbargado(ownVeh_ID(ownVeh:car))) {
					VehEmbargados++;
					A_Format(str, "%s		Patente: %s\n", veh_getNameAsString(ownVeh_ID(ownVeh:car)), veh_getPlateAsString(ownVeh_ID(ownVeh:car)));
					strcat(str2, str);
				}
			}
			if(!VehEmbargados)
			    return Error(playerid, "No tienes vehículos embargados.");

			A_Format(str, ""#CBLANCO"Tus vehículos embargados: "#CROJO"%d", VehEmbargados);
			Dialog(playerid, dEmbargarVeh, DIALOG_STYLE_LIST, str, str2, "Pagar", "Cancelar");
			return 1;
		}
	    else if(!strcmp(params, "frecuencia", true, 10))
	    {
			if(strlen(params) < 11)
			    return ParamsINC(playerid, "/pagar frecuencia [nº de frecuencia]");

			new
			    freqnum = strval(params[11]);

			if(!(1000 <= freqnum < 10000))
				return Error(playerid, "La frecuencia es inexistente.");

			new
			    string[15],
				owner[MAX_PLAYER_NAME];

			format(string, 15, "%d_TIME", freqnum);

			if(GetPlayerMoney(playerid) < 400)
			    return Error(playerid, "~r~No tienes suficiente dinero.");

			if(!GetGVarInt(string))
				return Error(playerid, "~r~La frecuencia es inexistente.");

			format(string, 15, "%d_OWN", freqnum);

			GetGVarString(string, owner, MAX_PLAYER_NAME);

			if(strcmp(pName(playerid), owner))
				return Error(playerid, "~r~No es el propietario de esa frecuencia.");

			new
			    time = GetFreqValidTime(freqnum);

			if(time < (3600 * 24 * 2))
			    return Error(playerid, "Sólo puedes renovar la frecuencia cuando quedan dos o menos dias para que expire.");

			A_Format(string, "%d_PW", freqnum);
			CreateFrequence(pName(playerid), freqnum, GetGVarInt(string));

			MensajeF(playerid, -1, "Renovaste la frecuencia nº "#CINFO"%s por "#CVERDE"7 "#CBLANCO"días.", freqnum);
			return 1;
		}
		if(sscanf(params, "ui", params[0], params[1]))
		    return ParamsINC(playerid, "/pagar [ID/Nombre] [Dinero]");

		if(params[0] == INVALID_PLAYER_ID)
		    return Error(playerid, "¡Jugador desconectado!");

	 	if(!ProxDetectorS(3.0, playerid, params[0]))
		 	return Error(playerid,"Ese jugador no está al lado tuyo.");

		if((GetPlayerInterior(playerid) != GetPlayerInterior(params[0])) || (GetPlayerVirtualWorld(playerid) != GetPlayerVirtualWorld(params[0])))
		 	return Error(playerid,"Ese jugador no está al lado tuyo.");

		if(params[1] > GetPlayerMoney(playerid))
		    return Error(playerid, "No tienes ese dinero.");

		if(params[1] > 10000)
		    return Error(playerid, "Máximo: $10.000");

		if(params[1] < 1)
		    return Error(playerid, "No puedes pagar un valor negativo.");

		if(InfoJugador[playerid][jHoras] < 6)
			return Error(playerid, "Debes jugar ~b~6 ~w~horas mínimo para pagarle a un jugador.");

		QuitarDinero(playerid, params[1]);
		GivePlayerMoney(params[0], params[1]);

		new
		    string[100];

		A_Format(string, "le paga $%d a %s", params[1], NombreJugador(params[0]));
		AutoRol(playerid, string);

		A_Format(string, "%s pagó a %s: $%d", pName(playerid), pName(params[0]), params[1]);
		Log("pagos", string);
		return 1;
	}

	CMD:tumbarpuerta(playerid, params[])
	{
		if(!EsLSPD(playerid) && !EsMilitar(playerid)) return Error(playerid,"¡No eres policia/militar!"),1;
		if(sscanf(params, "u", params[0])) return ParamsINC(playerid, "/forzarpuerta [ID/Nombre De policía/militar ayudante]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "El ID/Nombre del jugador no existe (Desconectado)");
		if(params[0] == playerid) return Error(playerid, "No puedes colocar tu mismo ID.");
		if(!ProxDetectorS(3.0, playerid, params[0])) return Error(playerid, "El jugador ayudante está muy lejos tuyo.");
		if(!EsLSPD (params[0]) && !EsMilitar(params[0])) return Error (playerid, "El ayudante debe ser policía o militar.");
		if(InfoJugador[playerid][jLider] != IDLSEM && InfoJugador[playerid][jLider] != IDLSPD) return Error(playerid, "Sólo los lideres pueden tumbar puertas.");
		foreach(Casas, i)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 2.0, InfoCasa[i][cEntrada_x], InfoCasa[i][cEntrada_y], InfoCasa[i][cEntrada_z]))
		    {
		        static
		            OldTumbar[MAX_PLAYERS];

				new
				    Time = gettime();
				if(OldTumbar[playerid] > Time)
				{
				    MensajeF(playerid, -1, "Debes esperar "#CROJO"%d "#CBLANCO"segundos para volver a intentar", OldTumbar[playerid]-Time);
					return 1;
				}
				OldTumbar[playerid] = Time+30;
		        if(random(2))
		        {
		        	InfoCasa[i][cCerrada] = false;
		        	new
		        	    strrol[70];
					A_Format(strrol, "y %s logran tumbar la puerta", NombreJugador_(params[0]) );
		        	AutoRol(playerid, strrol);
		        	ActualizarCasaLabel(i);
		        	return 1;
				}
   				new
  	    			strrol[70];
				A_Format(strrol, "y %s no logran tumbar la puerta", NombreJugador_(params[0]) );
   				AutoRol(playerid, strrol);
				return 1;
			}
		}
		return Error(playerid, "No estás en la puerta de una casa para tumbarla.");
	}

	CMD:acoche(playerid,params[])
	{
		new SCoche[156];
		if(!EsLSPD(playerid) && !EsMilitar(playerid)) return Error(playerid,"¡No eres policia/militar!"),1;
		Comando_En_Auto
		if(sscanf(params,"u",params[0])) return ParamsINC(playerid,"/acoche [ ID/NOMBRE ]"),1;
		if(!IsPlayerConnected(params[0])) return Error(playerid,"Está desconectado!"),1;
		if(IsPlayerInAnyVehicle(params[0])) return Error(playerid,"No puedes forzar a un jugador que está en un auto"),1;
	 	if(!ProxDetectorS(8.0,playerid,params[0])) return Error(playerid,"¡Ese jugador está demasiado lejos!");
		Loop(i, sizeof(Camillas), 0)
		{
			if(InfoCamilla[i][camiUsadaPor] == params[0])
			{
				return Error(playerid,"No puedes subirlo a el, está usando una camilla.");
			}
		}
		PutPlayerInVehicle(params[0],GetPlayerVehicleID(playerid),1);
		format(SCoche,sizeof(SCoche),"sube a %s al vehículo a la fuerza",NombreJugador(params[0]));
		AutoRol(playerid,SCoche);
		SetPVarInt(params[0],"FORZADO_COCHE",1);
		Mensaje(playerid,C_INFO,"Éste jugador está forzadamente en un vehículo, no podrá salir del mismo");
		Mensaje(playerid,C_INFO,"Recuerda, que cuando quieras bajar al jugador del vehículo, usa "#CBLANCO"/scoche [ ID ]");
	 	return 1;
	}

	CMD:scoche(playerid,params[])
	{
		new SCoche[156];
		if(!EsLSPD(playerid) && !EsMilitar(playerid)) return Error(playerid,"¡No eres policia/militar!"),1;
		if(sscanf(params,"u",params[0])) return ParamsINC(playerid,"/scoche [ ID/NOMBRE ]"),1;
		if(!IsPlayerConnected(params[0])) return Error(playerid,"Está desconectado!"),1;
		if(!IsPlayerInAnyVehicle(params[0])) return Error(playerid,"Ese jugador, no está en un vehículo!"),1;
	 	if(!ProxDetectorS(8.0,playerid,params[0])) return Error(playerid,"¡Ese jugador está demasiado lejos!");
		RemovePlayerFromVehicle(params[0]);
		format(SCoche,sizeof(SCoche),"baja del vehículo a %s a la fuerza",NombreJugador(params[0]));
		AutoRol(playerid,SCoche);
		DeletePVar(params[0],"FORZADO_COCHE");
	 	return 1;
	}

	CMD:verbolsillo(playerid,params[])
	{
		if(!EsLSPD(playerid) && !EsMilitar(playerid)) return Error(playerid,"¡No eres policia/militar!"),1;
		if(sscanf(params,"u",params[0])) return ParamsINC(playerid,"/verarmas [ID/NOMBRE]");
		if(!IsPlayerConnected(params[0])) return Error(playerid, "¡Jugador desconectado!");
		if(params[0] == playerid) return Error(playerid,"¡No puedes revisarte a ti mismo!");
	 	if(!ProxDetectorS(3.0,playerid,params[0])) return Error(playerid,"¡Ese jugador está demasiado lejos!");

	 	new
			Float: Pos[3];

		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
		GetPosInFrontOfPlayer(playerid, Pos[0], Pos[1], 1.0);

		if(!IsPlayerInRangeOfPoint(params[0], 1.0, Pos[0], Pos[1], Pos[2])) return Error(playerid, "Debes estar mirando al jugador");

		SetPlayerPos(params[0], Pos[0], Pos[1], Pos[2]);

		PlayerWatchPlayer(playerid, params[0]);
		PlayerWatchPlayer(params[0], playerid);

		cmd_rendirme(params[0], "");
		//AnimDelay(playerid, 100, "GRAFFITI", "spraycan_fire", .time = 4000);

		new
			SCoche[80];

		format(SCoche,sizeof(SCoche),"revisa los bolsillos de %s",NombreJugador(params[0]));
		AutoRol(playerid,SCoche);
		GameTextForPlayer(params[0], "~r~REVISADO", 2500, 3);
	    MostrarInventario(params[0], playerid, false);
	 	return 1;
	}

stock AnimDelay(playerid, delay, animlib[], animname[], Float:fDelta=4.0, loop=0, lockx=1, locky=1, freeze=0, time=0, forcesync = 0)
{
	SetTimerEx("ApplyAnimationTimer", delay, false, "issfiiiiii", playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);
	return 1;
}

CALLBACK: ApplyAnimationTimer(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync)
	return ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);

	CMD:esposar(playerid,params[])
	{
	    if(!EsLSPD(playerid) && !EsMilitar(playerid))
	        return Error(playerid, "No perteneces al ~b~Departamento de Policía ~w~ni al ~g~Ejército de San Andreas");

	    NeedObject(playerid)<INV_ESPOSAS>;

		if(sscanf(params,"u",params[0]))
			return ParamsINC(playerid,"/esposar [ID/Nombre]");

		if(params[0] == INVALID_PLAYER_ID)
			return Error(playerid,"¡Jugador desconectado!");

	 	if(!ProxDetectorS(3.0, playerid, params[0]))
		 	return Error(playerid,"¡Ese jugador está demasiado lejos!");

		if(params[0] == playerid)
			return Error(playerid,"¡No puedes esposarte a ti mismo!");

		new
			Rol[60];

		A_Format(Rol, "esposa a %s.", NombreJugador(params[0]));
		AutoRol(playerid, Rol);
		GameTextForPlayer(params[0], _TD("~r~ESPOSADO~n~~n~~w~Manos inmóviles"), 3000, 3);

		InfoJugador[params[0]][jEsposado] = true;

		EsposarJugador(params[0]);

		RemoveObject(playerid);
		Mensaje(playerid, -1, "Para desesposarlo, usa "#CINFO"/desesposar");
	 	return 1;
	}

stock EsposarJugador(playerid)
{
	SetPlayerAttachedObject(playerid, SLOT_MANOIZQUIERDA, 19418, 6, -0.031999,0.024000,-0.024000,-7.900000,-32.000011,-72.299987,1.115998,1.322000,1.406000);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CUFFED);
	return 1;
}

	CMD:desesposar(playerid,params[])
	{
	    if(!EsLSPD(playerid) && !EsMilitar(playerid))
	        return Error(playerid, "No perteneces al ~b~Departamento de Policía ~w~ni al ~g~Ejército de San Andreas");

		Manos_Desocupadas

		if(sscanf(params,"u",params[0]))
			return ParamsINC(playerid,"/desesposar [ID/Nombre]");

		if(params[0] == INVALID_PLAYER_ID)
			return Error(playerid,"¡Jugador desconectado!");

		if(!Esposado(params[0]))
		    return Error(playerid, "~r~Ese jugador no está esposado.");

	 	if(!ProxDetectorS(3.0, playerid, params[0]))
		 	return Error(playerid,"¡Ese jugador está demasiado lejos!");

		if(params[0] == playerid)
			return Error(playerid,"¡No puedes esposarte a ti mismo!");

		new
			Rol[80];

		A_Format(Rol, "le quita las esposas a %s.", NombreJugador(params[0]));
		AutoRol(playerid, Rol);
		GameTextForPlayer(params[0], _TD("~g~ESPOSAS QUITADAS~n~~n~~w~Manos libres"), 3000, 3);

		RemovePlayerAttachedObject(params[0], SLOT_MANOIZQUIERDA);

		InfoJugador[params[0]][jEsposado] = false;

		SetPlayerSpecialAction(params[0],SPECIAL_ACTION_NONE);
		GiveObject(playerid, GOAT(INV_ESPOSAS));
	 	return 1;
	}

	CMD:armamento (playerid, params[])
	{
		if (IsPlayerInRangeOfPoint (playerid, 2.0, 228.0966,-1488.1224,1011.767))
		{
			if (InfoJugador [playerid][jLider] != IDHITMAN)
			    return 1;

			Manos_Desocupadas

			new
			    str[120];

			A_Format (str, "[%d]\tSniper\n[%d]\tCargador (Sniper)\n[%d]\tSilenciadora\n[%d]\tCargador (Silenciadora)", HIT_AWP, HIT_C_AWP, HIT_SILENCED, HIT_C_SILENCED);
			Dialog (playerid, dArmamento, DIALOG_STYLE_LIST, ""#CROJO"Seleccione el elemento", str, "Aceptar", "Cancelar");
			return 1;
		}
		return 1;
	}

	CMD:ropero(playerid,params[])
	{
		if(IsPlayerInRangeOfPoint(playerid,1.0,-1802.8511,-235.4642,1066.0093))//lspd
		{
			if(!EsLSPD(playerid)) return Error(playerid,"¡No eres policia!"),1;
			ShowPlayerDialog(playerid,dRoperoLSPD,DIALOG_STYLE_LIST,""#CBLANCO"Armario de policia",""#CPOSITIVO"Cadete \n"#CPOSITIVO"Oficial\n"#CPOSITIVO"Oficial general\n"#CPOSITIVO"Sargento\n"#CPOSITIVO"Capitán\n"#CPOSITIVO"Comandante\n"#CPOSITIVO"Sub Comisario\n"#CPOSITIVO"Comisario\n"#CPOSITIVO"Jefe general\n"#CPOSITIVO"Mujer policía\n"#CPOSITIVO"Motociclista\n"#CPOSITIVO"Agente SWAT\n"#CPOSITIVO"Agente encubierto\n"#CPOSITIVO"Agente encubierto 2\n"#CPOSITIVO"Agente encubierto 3","Cambiarse","Salir");
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,4,1294.4070,-1781.8568,1565.9921))//lsem
		{
			if(!EsMilitar(playerid)) return Error(playerid,"No eres militar. ¡No tienes permiso a este ropero!"),1;
			ShowPlayerDialog(playerid,dRoperoLSEM,DIALOG_STYLE_LIST,""#CBLANCO"Ropero",""#CPOSITIVO"Militar\n"#CPOSITIVO"Traje de entrenamiento\n"#CPOSITIVO"Mujer militar\n"#CPOSITIVO"Traje de ceremonia\n"#CPOSITIVO"Detective\n"#CPOSITIVO"Agente encubierto\n"#CPOSITIVO"Agente encubierto 2\n"#CPOSITIVO"Agente encubierto 3\n"#CPOSITIVO"Agente SWAT\n"#CPOSITIVO"Agente de seguridad\n"#CPOSITIVO"Agente de seguridad 2\n"#CPOSITIVO"Piloto","Cambiarse","Salir");
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,2,2018.3445,2863.1958,1104.7494))//lsmd
		{
			if(!EsMedico(playerid)) return Error(playerid,"No eres médico. ¡No tienes permiso a este ropero!"),1;
			ShowPlayerDialog(playerid,dRoperoLSMD,DIALOG_STYLE_LIST,""#CBLANCO"Ropero",""#CPOSITIVO"Médico a prueba\n"#CPOSITIVO"Médico\n"#CPOSITIVO"Sub-director\n"#CPOSITIVO"Director","Cambiarse","Salir");
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,2,348.89999390,164.50000000,1013.70001221))
		{
		    if(!EsDelGobierno(playerid)) return Error(playerid,"¡No perteneces al cuerpo gobernamental!");
			ShowPlayerDialog(playerid,dRoperoLSPD,DIALOG_STYLE_LIST,""#CBLANCO"Armario de policia",""#CPOSITIVO"Cadete \n"#CPOSITIVO"Oficial\n"#CPOSITIVO"Oficial general\n"#CPOSITIVO"Sargento\n"#CPOSITIVO"Capitán\n"#CPOSITIVO"Comandante\n"#CPOSITIVO"Sub Comisario\n"#CPOSITIVO"Comisario\n"#CPOSITIVO"Jefe general\n"#CPOSITIVO"Mujer policía\n"#CPOSITIVO"Motociclista\n"#CPOSITIVO"Agente SWAT\n"#CPOSITIVO"Agente encubierto\n"#CPOSITIVO"Agente encubierto 2\n"#CPOSITIVO"Agente encubierto 3","Cambiarse","Salir");
			return 1;
		}
		return Error(playerid,"No estás en un ropero!");
	}

	CMD:casillero(playerid, params[])
	{
		if(isnull(params))
		{
			Mensaje(playerid, C_AZULRARO, "• "#CBLANCO"Usa "#CAZULRARO"/casillero ver "#CBLANCO"para retirar o visualizar el contenido, "#CAZULRARO"/casillero guardar [Opcional: Lugar]");
			Mensaje(playerid, -1, "para guardar tu objeto actual en el casillero.");
			return 1;
		}

		if(Esposado(playerid))
		{
		    return Error(playerid, "~r~No puedes hacer esto, estás esposado.");
		}

		if(IsPlayerInRangeOfPoint(playerid, 50.0, CasillerosLSPD[0][0], CasillerosLSPD[0][1], CasillerosLSPD[0][2]))
		{
			if(strfind(params, "ver", true) == 0)
			{
			    new
					Casillero = CasilleroLSPDMasCercano(playerid);

				if(Casillero == -1)
				    return Error(playerid, "No estás en un casillero.");

				if(isnull(CasilleroLSPD[Casillero][casOwner]) && InfoJugador[playerid][jLider] != IDLSPD)
				    return Error(playerid, "Este ~g~casillero ~w~no te pertenece.");

				if(strcmp(CasilleroLSPD[Casillero][casOwner], pName(playerid), false, strlen(pName(playerid))) == 0 || InfoJugador[playerid][jLider] == IDLSPD)
				{
				    MostrarCasilleroLSPD(playerid, Casillero);
					return 1;
				}
				return Error(playerid, "Este ~g~casillero ~w~no te pertenece.");
			}
			else if(strfind(params, "guardar", true) == 0)
			{
			    new
			        slot = -65535;

			    if(sscanf(params[8], "I(-65535)", slot)) return ParamsINC(playerid, "/casillero guardar [Opcional: Lugar]");

			    if(GetObject(playerid) == -1)
			        return Error(playerid, "Tienes las manos desocupadas.");

			    new
					Casillero = CasilleroLSPDMasCercano(playerid);

				if(Casillero == -1)
				    return Error(playerid, "No estás en un casillero.");

				if(isnull(CasilleroLSPD[Casillero][casOwner]) && InfoJugador[playerid][jLider] != IDLSPD)
				    return Error(playerid, "Este ~g~casillero ~w~no te pertenece.");

				if(strcmp(CasilleroLSPD[Casillero][casOwner], pName(playerid), false, strlen(pName(playerid))) == 0 || InfoJugador[playerid][jLider] == IDLSPD)
				{
					if(slot == -65535) // No especificado
					{
						Loop(i, MAX_ITEMS_CASILLERO_LSPD, 0)
						{
						    if(CasilleroLSPD[Casillero][casItem][i] == 0)
						    {
						        slot = i+1;
						        break;
							}
						}
						if(slot == -65535)
						{
							return Error(playerid, "No tienes más espacio en el casillero.");
						}
					}
				    if(1 <= slot <= MAX_ITEMS_CASILLERO_LSPD)
				    {
						slot --;
				        if(CasilleroLSPD[Casillero][casItem][slot]) return Error(playerid, "Ese ~g~Estante ~w~está ocupado.");
				        CasilleroLSPD[Casillero][casItem][slot] = GetObject(playerid);
				        CasilleroLSPD[Casillero][casData][slot] = GetObjectData(playerid);
				        ActualizarCasilleroLSPD(Casillero);
				        MensajeF(playerid, -1, "Guardaste el "#CINFO"%s "#CBLANCO"en el "#CVERDE"Casillero nº %d"#CBLANCO" (Estante "#CROJO"%d"#CBLANCO").", ObjectData[GetObject(playerid)][invName], Casillero, slot+1);
				        RemoveObject(playerid);
						return 1;
				    }
					return Error(playerid, "El estante especificado es inexistente.");
				}
				return Error(playerid, "Este ~g~casillero ~w~no te pertenece.");
			}
			return 1;
		}
		if(IsPlayerInRangeOfPoint(playerid, 200.0, 1322.8464, -1794.5129, 1566.1179))
		{
			if(strfind(params, "ver", true) == 0)
			{
			    new
					Casillero = CasilleroLSEMMasCercano(playerid);

				if(Casillero == -1)
				    return Error(playerid, "No estás en un casillero.");

				if(isnull(CasilleroLSEM[Casillero][casOwner]) && InfoJugador[playerid][jLider] != IDLSEM)
				    return Error(playerid, "Este ~g~casillero ~w~no te pertenece.");

				if(strcmp(CasilleroLSEM[Casillero][casOwner], pName(playerid), false, strlen(pName(playerid))) == 0 || InfoJugador[playerid][jLider] == IDLSEM)
				{
				    MostrarCasilleroLSEM(playerid, Casillero);
					return 1;
				}
				return Error(playerid, "Este ~g~casillero ~w~no te pertenece.");
			}
			else if(strfind(params, "guardar", true) == 0)
			{
			    new
			        slot = -65535;

			    if(sscanf(params[8], "I(-65535)", slot)) return ParamsINC(playerid, "/casillero guardar [Opcional: Lugar]");

			    if(GetObject(playerid) == -1)
			        return Error(playerid, "Tienes las manos desocupadas.");

			    new
					Casillero = CasilleroLSEMMasCercano(playerid);

				if(Casillero == -1)
				    return Error(playerid, "No estás en un casillero.");

				if(isnull(CasilleroLSEM[Casillero][casOwner]) && InfoJugador[playerid][jLider] != IDLSEM)
				    return Error(playerid, "Este ~g~casillero ~w~no te pertenece.");

				if(strcmp(CasilleroLSEM[Casillero][casOwner], pName(playerid), false, strlen(pName(playerid))) == 0 || InfoJugador[playerid][jLider] == IDLSEM)
				{
					if(slot == -65535) // No especificado
					{
						Loop(i, MAX_ITEMS_CASILLERO_LSEM, 0)
						{
						    if(CasilleroLSEM[Casillero][casItem][i] == 0)
						    {
						        slot = i+1;
						        break;
							}
						}
						if(slot == -65535)
						{
							return Error(playerid, "No tienes más espacio en el casillero.");
						}
					}
				    if(1 <= slot <= MAX_ITEMS_CASILLERO_LSEM)
				    {
						slot --;
				        if(CasilleroLSEM[Casillero][casItem][slot]) return Error(playerid, "Ese ~g~Estante ~w~está ocupado.");
				        CasilleroLSEM[Casillero][casItem][slot] = GetObject(playerid);
				        CasilleroLSEM[Casillero][casData][slot] = GetObjectData(playerid);
				        ActualizarCasilleroLSEM(Casillero);
				        MensajeF(playerid, -1, "Guardaste el "#CINFO"%s "#CBLANCO"en el "#CVERDE"Casillero nº %d"#CBLANCO" (Estante "#CROJO"%d"#CBLANCO").", ObjectData[GetObject(playerid)][invName], Casillero, slot+1);
				        RemoveObject(playerid);
						return 1;
				    }
					return Error(playerid, "El estante especificado es inexistente.");
				}
				return Error(playerid, "Este ~g~casillero ~w~no te pertenece.");
			}
			return 1;
		}
		return 1;
	}

	CMD:asignarcasillero(playerid, params[])
	{
	    if(InfoJugador[playerid][jLider] == IDLSPD)
	    {
	        if(sscanf(params, "ui", params[0], params[1])) return ParamsINC(playerid, "/asignarcasillero [ID/Nombre] [nº de casillero]");
			if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "¡Jugador desconectado!");
			if(!(0 <= params[1] < MAX_CASILLEROS_LSPD)) return Error(playerid, "El nº de casillero es inexistente.");
			if(!EsLSPD(params[0])) return Error(playerid, "¡Sólo puedes asignarle casilleros a policías!");
			if(!isnull(CasilleroLSPD[params[1]][casOwner])) return Error(playerid, "Ese casillero ya está asignado, usa ~b~/quitarcasillero");

			alm(CasilleroLSPD[params[1]][casOwner], pName(params[0]));

			new
			    str[70];

			A_Format(str, "Casillero "#CVERDE"nº %d\n\n"#CBLANCO"Pertenece a "#CAMARILLO"%s", params[1], CasilleroLSPD[params[1]][casOwner]);
			UpdateDynamic3DTextLabelText(CasilleroLSPD[params[1]][casLabelID], C_BLANCO, str);

			ActualizarCasilleroLSPD(params[1]);
			MensajeF(params[0], C_INFO, "%s "#CBLANCO"te asignó el casillero "#CVERDE"nº %d", pName(playerid), params[1]);
			MensajeF(playerid, -1, "Le asignaste a "#CINFO"%s "#CBLANCO"el casillero "#CVERDE"nº %d", pName(params[0]), params[1]);
			return 1;
		}
	    else if(InfoJugador[playerid][jLider] == IDLSEM)
	    {
	        if(sscanf(params, "ui", params[0], params[1])) return ParamsINC(playerid, "/asignarcasillero [ID/Nombre] [nº de casillero]");
			if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "¡Jugador desconectado!");
			if(!(0 <= params[1] < MAX_CASILLEROS_LSEM)) return Error(playerid, "El nº de casillero es inexistente.");
			if(!EsMilitar(params[0])) return Error(playerid, "¡Sólo puedes asignarle casilleros a militares!");
			if(!isnull(CasilleroLSEM[params[1]][casOwner])) return Error(playerid, "Ese casillero ya está asignado, usa ~b~/quitarcasillero");

			alm(CasilleroLSEM[params[1]][casOwner], pName(params[0]));

			new
			    str[70];

			A_Format(str, "Casillero "#CVERDE"nº %d\n\n"#CBLANCO"Pertenece a "#CAMARILLO"%s", params[1], CasilleroLSEM[params[1]][casOwner]);
			UpdateDynamic3DTextLabelText(CasilleroLSEM[params[1]][casLabelID], C_BLANCO, str);

			ActualizarCasilleroLSEM(params[1]);
			MensajeF(params[0], C_INFO, "%s "#CBLANCO"te asignó el casillero "#CVERDE"nº %d", pName(playerid), params[1]);
			MensajeF(playerid, -1, "Le asignaste a "#CINFO"%s "#CBLANCO"el casillero "#CVERDE"nº %d", pName(params[0]), params[1]);
			return 1;
		}
		return Error(playerid, "No tienes permisos para utilizar este comando.");
	}

	CMD:quitarcasillero(playerid, params[])
	{
	    if(InfoJugador[playerid][jLider] == IDLSPD)
	    {
	        if(sscanf(params, "i", params[0])) return ParamsINC(playerid, "/quitarcasillero [nº de casillero]");
			if(!(0 <= params[0] < MAX_CASILLEROS_LSPD)) return Error(playerid, "El nº de casillero es inexistente.");
			if(isnull(CasilleroLSPD[params[0]][casOwner])) return Error(playerid, "Ese casillero no está asignado.");

			new
			    Name[24];

			alm(Name, CasilleroLSPD[params[0]][casOwner]);
			alm(CasilleroLSPD[params[0]][casOwner], "");

			new
			    str[70];

			A_Format(str, "Casillero "#CVERDE"nº %d", params[0]);
			UpdateDynamic3DTextLabelText(CasilleroLSPD[params[0]][casLabelID], C_BLANCO, str);

			ActualizarCasilleroLSPD(params[0]);

			foreach(Player, i)
			{
			    if(!strcmp(Name, pName(i)))
			    {
			        MensajeF(i, C_INFO, "%s "#CBLANCO"te ha desasignado el "#CVERDE"casillero nº %d.", pName(playerid), params[0]);
					break;
				}
			}
			MensajeF(playerid, -1, "Le desasignaste a "#CINFO"%s "#CBLANCO"el "#CVERDE"casillero nº %d.", Name, params[0]);
			return 1;
		}
	    else if(InfoJugador[playerid][jLider] == IDLSEM)
	    {
	        if(sscanf(params, "i", params[0])) return ParamsINC(playerid, "/quitarcasillero [nº de casillero]");
			if(!(0 <= params[0] < MAX_CASILLEROS_LSEM)) return Error(playerid, "El nº de casillero es inexistente.");
			if(isnull(CasilleroLSEM[params[0]][casOwner])) return Error(playerid, "Ese casillero no está asignado.");

			new
			    Name[24];

			alm(Name, CasilleroLSEM[params[0]][casOwner]);
			alm(CasilleroLSEM[params[0]][casOwner], "");

			new
			    str[70];

			A_Format(str, "Casillero "#CVERDE"nº %d", params[0]);
			UpdateDynamic3DTextLabelText(CasilleroLSEM[params[0]][casLabelID], C_BLANCO, str);

			ActualizarCasilleroLSEM(params[0]);

			foreach(Player, i)
			{
			    if(!strcmp(Name, pName(i)))
			    {
			        MensajeF(i, C_INFO, "%s "#CBLANCO"te ha desasignado el "#CVERDE"casillero nº %d.", pName(playerid), params[0]);
					break;
				}
			}
			MensajeF(playerid, -1, "Le desasignaste a "#CINFO"%s "#CBLANCO"el "#CVERDE"casillero nº %d.", Name, params[0]);
			return 1;
		}
		return Error(playerid, "No tienes permisos para utilizar este comando.");
	}

	//  HITMAN
	CMD:incognito(playerid,params[])
	{
	    if(!EsHitman(playerid)) return Error(playerid,"¡Solo Hitmans pueden utilizar este comando!");
	    if(GetPlayerInterior (playerid) != 7) return Error(playerid,"Para colocarte un traje de incógnito, debes estar en la base.");
		if(sscanf(params,"i", params[0])) return ParamsINC(playerid,"/incognito [ID SKIN]");
		if(params[0] < 1 || params[0] > 299) return Error(playerid,"~g~Minimo: ~w~0~n~~g~Máximo: ~w~299");
		SetPlayerSkin(playerid, params[0]);
		AutoRol(playerid,"se pone ropa de incógnito");
		Mensaje(playerid,-1,"Recuerda que la ropa es temporal, es decir que no la podrás guardar en tu inventario.");
		return 1;
	}

	CMD:encontrar(playerid, params[])
	{
	    if(!EsHitman(playerid)) return Error(playerid,"¡Solo Hitmans pueden utilizar este comando!");
		if(sscanf(params,"u", params[0])) return ParamsINC(playerid,"/encontrar [ID/Nombre]");
		if(Freezed[playerid]) return Error (playerid, "No puedes usar este comando mientras estás congelado.");

		new
			VehID = GetPlayerVehicleID (playerid);

		if (!VehID)
			return Error (playerid, "Para usar este comando, debes estar conduciendo un vehículo de ~r~HITMAN.");

		if (veh_getFaction(VehID) != IDHITMAN)
			return Error (playerid, "Para usar este comando, debes estar conduciendo un vehículo de ~r~HITMAN.");

		SetTimerEx("EncontrarJugador", 5000, false, "ii", playerid, params[0]);
		GameTextForPlayer(playerid, "~g~~h~buscando...", 5000, 3);
		CongelarEx(playerid, 5);
		return 1;
	}

	CMD:contrato(playerid, params[])
	{
		if(!IsPlayerInRangeOfPoint(playerid, 2, 320.1897,-1485.6438,24.714)) return Error(playerid,"Debes estar en la calabera para hacer un contrato");

		new
		    ID_Contrato = -1;

		Loop(i, sizeof InfoContrato, 0)
		{
		    if(!strlen(InfoContrato[i][hitPor]) && !InfoContrato[i][hitDinero])
		    {
		        ID_Contrato = i;
		        break;
			}
		}

		if(sscanf(params, "is[24]", params[0], params[1])) return ParamsINC(playerid, "/contrato [DINERO] [NOMBRE DE VÍCTIMA (NOMBRE, NO ID)  ]");
		if(params[0] > GetPlayerMoney(playerid)) return Error(playerid, "¡No tienes ese dinero!");
		if(ID_Contrato == -1) return Error(playerid,"No hay más espacio en la agenda, ¡prueba más tarde!");
		if(IsNumeric(params[1]) || TieneNumeros(params[1]) || strfind(params[1], "_") == -1) return Error(playerid,"¡Nombre inválido!");
		if(params[0] < 500 || params[0] > 200000) return Error(playerid,"Minimo $500, máximo $200.000");

		QuitarDinero(playerid, params[0]);
		MensajeF(playerid, -1, "Contrataste a los hitman, para que maten a "#CROJO"%s "#CBLANCO"por "#CVERDE"$%d", params[1], params[0]);

		InfoContrato[ID_Contrato][hitDinero] = params[0];
		alm(InfoContrato[ID_Contrato][hitPor], pName(playerid) );
		alm(InfoContrato[ID_Contrato][hitVictima], params[1] );

		AutoRol(playerid, "deja una carta en el buzón");
		ActualizarContratos();
		return 1;
	}

	CMD:contratos(playerid, params[])
	{
	    if(!EsHitman(playerid)) return Error(playerid,"¡Solo Hitmans pueden ver los contratos!");
		if(GetPlayerInterior (playerid) != 7) return Error(playerid,"¡No estás en la base de hitman!");

		new Str[(sizeof InfoContrato) * 35], Str2[35];

		Str = "{FFFFFF}";

		Loop(i, sizeof InfoContrato, 0)
		{
		    if(strlen(InfoContrato[i][hitPor]) && InfoContrato[i][hitDinero])
		    {
				A_Format(Str2, "\t%d) %s ($%d)\n", i + 1, InfoContrato[i][hitVictima], InfoContrato[i][hitDinero]);
				strcat(Str,Str2);
			}
		}
		Dialog(playerid, dError, DIALOG_STYLE_MSGBOX, ""#CBLANCO"---- "#CVERDE"Contratos Hitman "#CBLANCO"----", Str, "Cerrar", "");
		return 1;
	}

	CMD:borrarcontrato(playerid, params[])
	{
	    if(InfoJugador[playerid][jLider] != IDHITMAN)
	        return Error(playerid, "~r~No eres el lider de Hitman.");

		new
		    i = strval(params);

		if(!(1 <= i <= MAX_CONTRATOS))
		    return Error(playerid, "Ese número de contrato no existe.");

		i--;

		alm(InfoContrato[i][hitPor], "");
		alm(InfoContrato[i][hitVictima], "");
		InfoContrato[i][hitDinero] = 0;
		ActualizarContratos();
		MensajeF(playerid, -1, "Borraste el contrato número "#CVERDE"%d.", i);
		return 1;
	}

	CMD:cerrarayuntamiento(playerid,params[])
	{
		if(InfoJugador[playerid][jLider] == 1 || InfoJugador[playerid][jLider] == 2)
		{
			if(AyuntaRestringido) return Mensaje(playerid,C_INFO,"¡El ayuntamiento ya está restringido!"),1;
			restriccion1 = CreateDynamicObject(16439,1541.90002441,-1733.40002441,14.19999981,0.00000000,0.00000000,270.00000000); //object(cn2_roadblock04) (1)
			restriccion2 = CreateDynamicObject(16439,1408.50000000,-1733.19995117,14.19999981,0.00000000,0.00000000,88.00000000); //object(cn2_roadblock04) (2)
			restriccion3 = CreateDynamicObject(16439,1422.69995117,-1592.80004883,14.19999981,0.00000000,0.00000000,87.99499512); //object(cn2_roadblock04) (3)
			restriccion4 = CreateDynamicObject(16439,1533.00000000,-1592.50000000,14.19999981,0.00000000,0.00000000,267.99499512); //object(cn2_roadblock04) (5)
			restriccion5 = CreateDynamicObject(1422,1404.90002441,-1742.00000000,13.00000000,0.00000000,0.00000000,86.00000000); //object(dyn_roadbarrier_5) (1)
			restriccion6 = CreateDynamicObject(1422,1406.19995117,-1724.09997559,13.00000000,0.00000000,0.00000000,85.99548340); //object(dyn_roadbarrier_5) (2)
			restriccion7 = CreateDynamicObject(1422,1544.00000000,-1723.80004883,13.00000000,0.00000000,0.00000000,266.00000000); //object(dyn_roadbarrier_5) (3)
			restriccion8 = CreateDynamicObject(1422,1544.09997559,-1720.69995117,13.00000000,0.00000000,0.00000000,269.99548340); //object(dyn_roadbarrier_5) (4)
			restriccion9 = CreateDynamicObject(1422,1544.19995117,-1717.50000000,13.00000000,0.00000000,0.00000000,271.99548340); //object(dyn_roadbarrier_5) (5)
			Mensaje(playerid,C_INFO,"El ayuntamiento ha sido restringido por su orden.");
			AyuntaRestringido = true;
			AnuncioGobernamental("• El ayuntamiento se verá cerrado.");
			MensajeTodos(C_GOBIERNO,"Durante estos momentos, no habra actuvidad social en el centro de la ciudad.");
			MensajeTodos(C_GOBIERNO,"Para evitar conflictos evite pasar por estas zonas, en éste momento.");
			MensajeTodos(C_GOBIERNO," ");
			MensajeTodos(C_GOBIERNO,""#CBLANCO"Atte: "#CAZULCLARO"La policia de la ciudad.");
			return 1;
		}
		return Error(playerid,"Debes ser lider de la policia o de los militares para utilizar éste comando");
	}

	CMD:abrirayuntamiento(playerid,params[])
	{
		if(InfoJugador[playerid][jLider] == 1 || InfoJugador[playerid][jLider] == 2)
		{
			if(!AyuntaRestringido) return Mensaje(playerid,C_INFO,"¡El ayuntamiento no está restringido!"),1;
			DestroyDynamicObject(restriccion1);
			DestroyDynamicObject(restriccion2);
			DestroyDynamicObject(restriccion3);
			DestroyDynamicObject(restriccion4);
			DestroyDynamicObject(restriccion5);
			DestroyDynamicObject(restriccion6);
			DestroyDynamicObject(restriccion7);
			DestroyDynamicObject(restriccion8);
			DestroyDynamicObject(restriccion9);
			Mensaje(playerid,C_INFO,"Ahora se puede volver a circular por el ayuntamiento.");
			AyuntaRestringido = false;
			AnuncioGobernamental("• El ayuntamiento está abierto nuevamente.");
			MensajeTodos(C_GOBIERNO,"Ahora, se puede transitar por el centro de Los Santos sin molestia alguna.");
			return 1;
		}
		return Error(playerid,"Debes ser lider de la policia o de los militares para utilizar éste comando");
	}

	CMD:megafono(playerid,params[])
	{
		if(!EsLSPD(playerid) && !EsMilitar(playerid) && !EsMedico(playerid)) return Error(playerid,"¡No eres policia/militar/médico!"),1;
		if(isnull(params)) return ParamsINC(playerid,"/m [ Texto ]");
		new String[128];
		format(String,sizeof(String),"%s ( Megáfono ) : %s",NombreJugador(playerid),params[0]);
		ProxDetector(80,playerid,String,C_AZULCLARO,C_AZULCLARO,C_AZULCLARO,C_AZULCLARO,C_AZULCLARO);
		return 1;
	}

	CMD:sirena(playerid, params[])
	{
	    if(!EsLSPD(playerid)) return Error(playerid, "Sólo policias pueden usar este comando.");
	    new
			VehID = GetPlayerVehicleID(playerid);

		if(VehID == 0)
		    return Error(playerid, "Debes estar en un vehículo para usar este comando.");

		for(new i; i < sizeof(VehConSirena); i++)
		{
		    if(VehID == VehConSirena[i])
		    {
		        if(SirenaVeh[i] == INVALID_OBJECT_ID)
		        {
		            new
		                ModelID = GetVehicleModel(VehID);

					if(ModelID == 402) // Buffalo
					{
						SirenaVeh[i] = CreateObject(19419, 10.0, 10.0, 10.0, 0, 0, 0, 30);
						AttachObjectToVehicle(SirenaVeh[i], VehConSirena[i], 0.000000, -0.499999, 0.750000, 0.000000, 0.000000, 0.000000);
					}
					else if(ModelID == 415)
					{
						SirenaVeh[i] = CreateObject(19419, 10.0, 10.0, 10.0, 0, 0, 0, 30);
						AttachObjectToVehicle(SirenaVeh[i], VehConSirena[i], 0.000000, -0.299999, 0.600000, 0.000000, 0.000000, 0.000000);
					}
					else
					    return Error(playerid, "Ocurrió un error.");

					AutoRol(playerid, "enciende la sirena de la patrulla.");
				}
				else
				{
				    DestroyObject(SirenaVeh[i]);
				    SirenaVeh[i] = INVALID_OBJECT_ID;
				    AutoRol(playerid, "apaga la sirena de la patrulla.");
				}
				return 1;
			}
		}
		return Error(playerid, "¡Sólo puedes utilizar este comando en las unidades incógnitas.");
	}

	CMD:arrestar(playerid,params[])
	{
		if(!EsLSPD(playerid) && !EsMilitar(playerid)) return Error(playerid,"¡No eres policia/militar!"),1;
	    if(!IsPlayerInRangeOfPoint(playerid,2,1589.1508,-1526.6434,1066.3394)) return Error(playerid,"No estás en la puerta de las celdas!");
	    if(sscanf(params,"ui",params[0],params[1])) return ParamsINC(playerid,"/arrestar [ ID ] [ Minutos ]");
	    if(params[1] < 30 || params[1] > 60*24) return Error(playerid,"¡Mínimo 30 minutos, y máximo 24 horas!");
		if(!IsPlayerConnected(params[0])) return Error(playerid,"¡Jugador desconectado!");
	    if(!ProxDetectorS(4,playerid,params[0])) return Error(playerid,"Muy lejos de ese jugador!");
	    if(Esposado(params[0])) return Error(playerid, "~r~Antes de arrestarlo, debes quitarle las esposas.");

		MandarCarcel (params[0], false, params[1]);

		SetPlayerVarString (params[0], "AdminJail", pName (playerid));
		alm(InfoJugador[params[0]][jAdminJail], pName(playerid));

		new Rol[126],MSG[100];
		GameTextForPlayer(params[0],"~r~^Arrestado!",5000,3);
		ResetPlayerWeapons(params[0]);
		format(Rol,sizeof(Rol),"arresta a %s por %d días",NombreJugador(params[0]),params[1]);
		AutoRol(playerid,Rol);
		format(MSG,sizeof(MSG),"Fuiste arrestado por el oficial "#CAZUL"%s "#CBLANCO"por %d minutos",NombreJugador(playerid),params[1]);
		Mensaje(params[0],-1,MSG);
	    return 1;
	}

	// ----========[ COMANDOS LSMD ]======-------- //

	CMD:placa(playerid, params[])
	{
		if(!EsLSPD(playerid) && !EsMedico(playerid) && !EsMilitar(playerid)) return Error(playerid,"¡No eres policia, médico, ni militar!"),1;
	    if(sscanf(params,"u",params[0],params[1])) return ParamsINC(playerid,"/placa [ID/Nombre]");
		if(!IsPlayerConnected(params[0])) return Error(playerid,"¡Jugador desconectado!");
	    if(!ProxDetectorS(4,playerid,params[0])) return Error(playerid,"Muy lejos de ese jugador!");

		new
			PlayerText:Licencia_Fac,
			PlayerText:Licencia_Fac2;

		Licencia_Fac = CreatePlayerTextDraw(params[0],294.000000, 260.000000, pName(playerid) );
		PlayerTextDrawBackgroundColor(params[0],Licencia_Fac, 255);
		PlayerTextDrawFont(params[0],Licencia_Fac, 1);
		PlayerTextDrawLetterSize(params[0],Licencia_Fac, 0.500000, 1.000000);
		PlayerTextDrawColor(params[0],Licencia_Fac, -16776961);
		PlayerTextDrawSetOutline(params[0],Licencia_Fac, 1);
		PlayerTextDrawSetProportional(params[0],Licencia_Fac, 1);
		PlayerTextDrawUseBox(params[0],Licencia_Fac, 1);
		PlayerTextDrawBoxColor(params[0],Licencia_Fac, 1347440720);
		PlayerTextDrawTextSize(params[0],Licencia_Fac, 384.000000, 0.000000);
		PlayerTextDrawSetSelectable(params[0],Licencia_Fac, 0);

		Licencia_Fac2 = CreatePlayerTextDraw(params[0],297.000000, 202.000000, "Policia Nacional");
		PlayerTextDrawBackgroundColor(params[0],Licencia_Fac2, 255);
		PlayerTextDrawFont(params[0],Licencia_Fac2, 1);
		PlayerTextDrawLetterSize(params[0],Licencia_Fac2, 0.310000, 2.600000);
		PlayerTextDrawColor(params[0],Licencia_Fac2, 65535);
		PlayerTextDrawSetOutline(params[0],Licencia_Fac2, 1);
		PlayerTextDrawSetProportional(params[0],Licencia_Fac2, 1);
		PlayerTextDrawSetSelectable(params[0],Licencia_Fac2, 0);

		if(EsMedico(playerid))
		{
		    PlayerTextDrawSetString(playerid, Licencia_Fac2, "~p~~h~Hospital de SA");
		}
		else if(EsMilitar(playerid))
		{
		    PlayerTextDrawSetString(playerid, Licencia_Fac2, "~g~Ejercito de SA");
		}
		PlayerTextDrawShow(params[0], Licencia_Fac);
		PlayerTextDrawShow(params[0], Licencia_Fac2);
		TextDrawShowForPlayer(params[0], Fondo_Licencia);

		SetTimerEx("_2PlayerTextDrawDestroy", 5000, false, "ii", params[0], _:Licencia_Fac);
		SetTimerEx("_2PlayerTextDrawDestroy", 5000, false, "ii", params[0], _:Licencia_Fac2);
		SetTimerEx("_2TextDrawHideForPlayer", 5000, false, "ii", params[0], _:Fondo_Licencia);

		new Str[60];
		A_Format(Str,"le muestra su placa a %s", NombreJugador(params[0]) );

		AutoRol(playerid, Str);
		return 1;
	}

CALLBACK: _2PlayerTextDrawDestroy(playerid, PlayerText:id)
	return PlayerTextDrawDestroy(playerid, id);

CALLBACK: _2SetPlayerDrunkLevel(playerid, amount)
	return SetPlayerDrunkLevel(playerid, amount);

CALLBACK: _2TextDrawHideForPlayer(playerid, Text:id)
	return TextDrawHideForPlayer(playerid, id);

	CMD:aambulancia(playerid, params[])
	{
		if(!EsMedico(playerid)) return Error(playerid, "¡No eres médico!");
	    if(sscanf(params,"u", params[0])) return ParamsINC(playerid, "/aambulancia [ID]");

		new
		    VehID = GetPlayerVehicleID(playerid),
			Rol[40];

	    if(GetVehicleModel(VehID) != 416 || VehID == 0) return Error(playerid,"¡Debes estar en una ambulancia!");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid,"¡Jugador desconectado!");
		if(!ProxDetectorS( 4.0, playerid, params[0])) return Error(playerid,"¡Ese jugador está muy lejos tuyo!");
		if(IsPlayerInAnyVehicle(params[0])) return Error(playerid,"¡No puedes subirlo si el está en un vehículo!");

		Loop(i, sizeof(Camillas), 0)
		{
			if(InfoCamilla[i][camiUsadaPor] == params[0])
			{
				return Error(playerid,"¡No puedes subirlo a el, porque está usando una camilla!");
			}
		}

		PutPlayerInVehicle(params[0], VehID, 2);

		A_Format(Rol,"sube a %s a la ambulancia", NombreJugador(params[0]) );
		AutoRol(playerid, Rol);

		return 1;
	}

	CMD:salvar(playerid, params[])
	{
		if(!EsMedico(playerid) && !EsLSPD(playerid)) return Error(playerid, "¡No eres médico, ni policía!");
	    if(sscanf(params,"u", params[0])) return ParamsINC(playerid, "/salvar [ID]");
	    if(Cracked[playerid]) return Error(playerid, "¡No puedes salvar estando herido!");

		new
			Rol[60];

		if(params[0] == INVALID_PLAYER_ID) return Error(playerid,"¡Jugador desconectado!");
		if(!ProxDetectorS( 4.0, playerid, params[0])) return Error(playerid,"¡Ese jugador está muy lejos tuyo!");
		if(params[0] == playerid) return Error(playerid, "¡No te puedes salvar tu mismo!");
		if(IsPlayerInAnyVehicle(params[0])) return Error(playerid,"¡No puedes subirlo si el está en un vehículo!");
		if(InfoJugador[params[0]][jMuerto] == false) return Error(playerid,"Ese jugador no está por morir.");

		A_Format(Rol,"le aplica primeros auxilios a %s", NombreJugador(params[0]) );
		AutoRol(playerid, Rol);
		MensajeF(params[0], -1, "¡%s "#CBLANCO"te ha salvado la vida!", NombreJugador(playerid) );
		TextoJugador(params[0], "~g~salvado",5000, 4);
		InfoJugador[params[0]][jMuerto] = false;
		return 1;
	}

	CMD:sambulancia(playerid, params[])
	{
		if(!EsMedico(playerid)) return Error(playerid, "¡No eres médico!");
	    if(sscanf(params,"u", params[0])) return ParamsINC(playerid, "/sambulancia [ID]");

		new
			Rol[40];

		if(params[0] == INVALID_PLAYER_ID) return Error(playerid,"¡Jugador desconectado!");
		if(!ProxDetectorS( 2.0, playerid, params[0])) return Error(playerid,"¡Ese jugador está muy lejos tuyo!");
		if(!IsPlayerInAnyVehicle(params[0]) || GetVehicleModel(GetPlayerVehicleID(params[0])) != 416) return Error(playerid,"¡El no está en una ambulancia!");

		RemovePlayerFromVehicle(params[0]);
		A_Format(Rol,"baja a %s de la ambulancia", NombreJugador(params[0]) );
		AutoRol(playerid, Rol);
		return 1;
	}

	CMD:curar(playerid, params[])
	{
	    if(!EsMedico(playerid)) return Error(playerid,"¡No eres médico!");
	    if(!IsPlayerInRangeOfPoint(playerid, 10.0, 2025.6810,2869.0496,1104.749) && !IsPlayerInRangeOfPoint(playerid, 10.0, 2022.4231,2857.4907,1104.7494)) return Error(playerid,"¡No estás en el quirofano!");

	    if(sscanf(params,"u", params[0])) return ParamsINC(playerid, "/curar [ID]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid,"¡Jugador desconectado!");
		if(!ProxDetectorS( 2.0, playerid, params[0])) return Error(playerid,"¡Ese jugador está muy lejos tuyo!");

		new
			Float:PlayerHP,
			Rol[30];

		GetPlayerHealth(params[0], PlayerHP);

		if( PlayerHP > 80.0 && InfoJugador[params[0]][jMuerto] == false ) return Error(playerid,"¡Esa persona debe estar en grave estado!");

		InfoJugador[params[0]][jMuerto] = false;

		TogglePlayerCrack(params[0], false);

		SetPlayerHealth(params[0], 100.0);

		A_Format(Rol,"cura a %s", NombreJugador(params[0])) ;
		AutoRol(playerid, Rol);

		MensajeF(params[0], -1, "El médico "#CLSMD"%s "#CBLANCO"te curó.", NombreJugador(playerid) );
		return true;
	}

	CMD:acamilla(playerid,params[])
	{
		if(!EsMedico(playerid)) return Error(playerid, "¡No eres médico!");

		new
		    bool:success;

		Loop(i, sizeof(Camillas), 0)
		{
			if(InfoCamilla[i][camiUsadaPor] == playerid)
			{
			    success = true;
			    break;
			}
		}

		if(!success) return Error(playerid,"¡No estás usando una camilla!");

		if(sscanf(params, "u", params[0])) return ParamsINC(playerid,"/acamilla [id]");

		if(params[0] == INVALID_PLAYER_ID) return Error(playerid,"¡Jugador desconectado!");
		if(params[0] == playerid) return Error(playerid,"No podes subirte a vos mismo");
		if(!ProxDetectorS( 2.0, playerid, params[0])) return Error(playerid,"¡Ese jugador está muy lejos tuyo!");

		new
		    Float:Pos[3],
			Float:Ang,
			Rol[40];

		GetPlayerFacingAngle(playerid, Ang);
		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
		GetPosInFrontOfPlayer(playerid, Pos[0], Pos[1], 1.7);

		SetPlayerPos(params[0], Pos[0], Pos[1], Pos[2]+0.5);
		cmd_crack(params[0], "");

		A_Format(Rol,"sube a %s a la camilla", NombreJugador(params[0]) );
		AutoRol(playerid, Rol);
		return 1;
	}

	// --=======[ COMANDOS LSTV ]========-- //

	CMD:iniciar(playerid,params[])
	{
	    if(strcmp(params,"transmision",true) == 0)
	    {
	        if(!EsReportero(playerid)) return Error(playerid,"¡No eres reportero!");
	        if( ( EsVehLSTV(GetPlayerVehicleID(playerid)) && (GetVehicleModel(GetPlayerVehicleID(playerid)) == 582 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 488)) || IsPlayerInRangeOfPoint(playerid,2,1268.6841,-1185.3862,1565.9968))
	        {
	            if(EnTransmision) return Error(playerid,"¡Ya se inició la transmisión!");
				EnTransmision = true;
				AutoRol(playerid,"agarra un microfono");
				Mensaje(playerid,-1,"Para hablar por el microfono, usa"#CINFO" /mic");
				MensajeTodos(-1," ");
	            MensajeTodos(C_NEGRO,"___________________"#CAZUL2" INICIO DE TRANSMISIÓN - LSTV "#CNEGRO"___________________");
				return 1;
			}
			else return Error(playerid,"¡No estas ni en ninguna camioneta, ni en el estudio!");
		}
	    else if(strcmp(params,"programa",true) == 0)
	    {
	        if(!EsReportero(playerid)) return Error(playerid,"¡No eres reportero!");
            if(EnTransmision_AV) return Error(playerid,"¡Ya se inició la transmisión!");
			if(!IsPlayerInRangeOfPoint(playerid,2,1268.6841,-1185.3862,1565.9968)) return Error(playerid,"¡debes estar en el estudio para iniciar el programa!");
			EnTransmision_AV = true;
   			MensajeTodos(C_AZUL2,"Noticias LSTV: "#CBLANCO"¡Se inició nuestro programa de televisión!");
			foreach(Player,i)
			{
			    if(GetPVarInt(i,"VIENDO_TV"))
				{
				    TextDrawHideForPlayer(i, TV_Azul);
				}
			}
			return 1;
		}
		return ParamsINC(playerid,"/iniciar <transmision/programa>");
	}

	CMD:mic(playerid,params[])
	{
		if(EsIP(params))
		{
			MensajeAdminF(C_ROJO, "[Anti-SPAM] "#CBLANCO"%s(%d): "#CINFO"/mic %s", Destacado, NombreJugador_(playerid), playerid, params);
			antic_Kick(playerid, "SPAM");
			return 0;
		}
	    if(sscanf(params,"s[120]",params[0])) return ParamsINC(playerid,"/mic [TEXTO]");
     	if(!EsReportero(playerid) && !GetPVarInt(playerid,"Entrevistado_Por")) return Error(playerid,"¡No eres reportero!");
      	if(!EnTransmision) return Error(playerid,"¡Aún no se inició la transmisión! "#CINFO"(/iniciar transmicion)");
       	if( ( EsVehLSTV(GetPlayerVehicleID(playerid)) && (GetVehicleModel(GetPlayerVehicleID(playerid)) == 582 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 488)) || IsPlayerInRangeOfPoint(playerid,2,1268.6841,-1185.3862,1565.9968))
       	{
			new Str[160];
			if(EsReportero(playerid))
			{
				A_Format(Str,"(Noticias LSTV) Locutor %s: "#CBLANCO"%s",NombreJugador(playerid),params);
			}
			else A_Format(Str,"(Noticias LSTV) Entrevistado %s: "#CBLANCO"%s",NombreJugador(playerid),params);
			MensajeRadio(C_AZUL2, Str, RADIO_LSTV);
   			ProxDetector(60.0,playerid,Str,-1,Hablar,Hablar2,Hablar3,Hablar4);
			return 1;
		}
		return Error(playerid,"¡Aquí no hay un micrófono!");
	}

	CMD:finalizar(playerid,params[])
	{
	    if(strcmp(params,"transmision",true) == 0)
	    {
	        if( ( EsVehLSTV(GetPlayerVehicleID(playerid)) && (GetVehicleModel(GetPlayerVehicleID(playerid)) == 582 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 488)) || IsPlayerInRangeOfPoint(playerid,2,1268.6841,-1185.3862,1565.9968))
	        {
	        	if(!EsReportero(playerid)) return Error(playerid, "¡No eres reportero!");
	            if(!EnTransmision) return Error(playerid,"¡No se inició la transmisión!");
	            MensajeRadio(C_NEGRO, "___________________"#CAZUL2" CIERRE DE TRANSMISIÓN - LSTV "#CNEGRO"___________________", RADIO_LSTV);
				EnTransmision = false;
				return 1;
			}
			else return Error(playerid,"¡No estas ni en ninguna camioneta, ni en el estudio!");
		}
	    else if(strcmp(params,"programa",true) == 0)
	    {
	        if(!EsReportero(playerid)) return Error(playerid, "¡No eres reportero!");
			if(!EnTransmision_AV) return Error(playerid, "¡No se inició un programa!");
			foreach(Player, i)
			{
			    if(GetPVarInt(i, "TV_CANAL") == CANAL_LSTV)
			    {
			        GameTextForPlayer(i, "~w~el programa ~r~finalizo", 4000, 3);
			        TextDrawShowForPlayer(i, TV_Azul);
				}
			}
			EnTransmision_AV = false;
   			MensajeTodos(C_AZUL2,"Noticias LSTV: "#CBLANCO"Finalizó nuestro programa de televisión.");
			return 1;
		}
		return ParamsINC(playerid,"/finalizar <transmision/programa>");
	}

	CMD:entrevistar(playerid,params[])
	{
		if(sscanf(params,"u",params[0])) return ParamsINC(playerid,"/entrevistar [ID/NOMBRE]");
  		if(!EsReportero(playerid)) return Error(playerid,"¡No eres reportero!");
  		if(EsReportero(params[0])) return Error(playerid,"¡No puedes entrevistar a un reportero!");
		if(!IsPlayerConnected(params[0])) return Error(playerid,"¡Jugador desconectado!");
		if(!ProxDetectorS(3,playerid,params[0])) return Error(playerid,"¡Ese jugador está muy lejos tuyo!");
		SetPVarInt(params[0],"Entrevistado_Por",playerid);
		new Str[100];
		A_Format(Str,"El reportero %s te ofrece una entrevista para la radio\n\n\t¿La aceptas?",NombreJugador_(playerid));
		Dialog(params[0],dAEntrevista,DIALOG_STYLE_MSGBOX,""#CBLANCO"Aceptar entrevista",Str,"Si","No");
		Mensaje(playerid,-1,"Le ofreciste una entrevista, espera la respuesta de el");
		return 1;
	}

	CMD:ponermusica(playerid,params[])
	{
		if(sscanf(params,"s[120]",params[0])) return ParamsINC(playerid,"/ponermusica [LINK]");
  		if(!EsReportero(playerid) && !EsPresidente(playerid)) return Error(playerid,"¡No eres reportero, ni presidente!");
    	if(!EnTransmision) return Error(playerid,"¡No se inició la transmisión!");
     	if( ( EsVehLSTV(GetPlayerVehicleID(playerid)) && (GetVehicleModel(GetPlayerVehicleID(playerid)) == 582 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 488)) || IsPlayerInRangeOfPoint(playerid,2,1268.6841,-1185.3862,1565.9968))
      	{
			foreach(Player, i)
			{
			    if(IsPlayerInAnyVehicle(i))
			    {
			        if(Veh[GetPlayerVehicleID(i)][vRadio] == RADIO_LSTV)
			        {
			            if (GetVehType (GetPlayerVehicleID (i)) == VEHICLE_TYPE_CAR)
			            {
			            	PlayAudioStreamForPlayer(i, params);
						}
					}
				}
			}
			alm(RadioLSTV, params);
			return 1;
		}
		else return Error(playerid,"¡No estas ni en ninguna camioneta, ni en el estudio!");
	}

	// --=======[ COMANDOS MECÁNICOS ]========-- //

	CMD:terminar(playerid, params[])
	{
	    if(isnull(params)) return ParamsINC(playerid, "/terminar [tunning/extraccion/entrega]");
	    if(!strcmp(params, "extraccion", true))
	    {
	        if(TerminarMinear(playerid, true))
	        {
				Mensaje(playerid, -1, "La extracción de mineral fue cancelada voluntariamente.");
				Descongelar(playerid);
			}
			else
			{
			    Mensaje(playerid, -1, "Ocurrió un error en la petición.");
			}
			return 1;
		}
	    else if(!strcmp(params, "tunning", true))
	    {
		    if(Mecanico_ClientID[playerid] == INVALID_PLAYER_ID)//Cliente
		    {
		        foreach(Player, i)
		        {
		            if(Mecanico_ClientID[i] == playerid)
		            {
		                MensajeF(i, -1, "El jugador "#CAMARILLO"%s "#CBLANCO"decidió terminar el tunning.", NombreJugador_(playerid));
	                    Mecanico_ClientID[i] = INVALID_PLAYER_ID;
						DeletePVar(i, "MECANICO_VEHID");
						DeletePVar(i, "MECANICO_COMPONENTID");
						DeletePVar(i, "MECANICO_COMPONENTPRICE");
						Mensaje(playerid, -1, "El servicio de Tunning fue terminado.");
						return 1;
					}
				}
				return Error(playerid, "No tiene pendiente un servicio de tunning.");
			}
			//Mecanico (Ofrece)
			if(IsPlayerConnected(Mecanico_ClientID[playerid]))
			{
				MensajeF(Mecanico_ClientID[playerid], -1, "El mecánico "#CAMARILLO"%s "#CBLANCO"decidió finalizar el servicio.", NombreJugador_(Mecanico_ClientID[playerid]) );
				DeletePVar(playerid, "MECANICO_VEHID");
				DeletePVar(playerid, "MECANICO_COMPONENTID");
				DeletePVar(playerid, "MECANICO_COMPONENTPRICE");
				Mecanico_ClientID[playerid] = INVALID_PLAYER_ID;
				Mensaje(playerid, -1, "Finalizaste el servicio de tunning.");
				return 1;
			}
			Mecanico_ClientID[playerid] = INVALID_PLAYER_ID;
			Mensaje(playerid, -1, "Finalizaste el servicio de tunning.");
			return 1;
		}
	    if(!strcmp(params, "entrega", true))
	    {
	        if (GetPVarInt(playerid, "CAMFAC.PASO"))
	        {
	            MensajeFaccionF(IDCAMIONEROS, ""#CNARANJA"[Facción] "#CINFO"%s "#CBLANCO"canceló su entrega.", NombreJugador_(playerid));
				DeletePVar(playerid, "CAMFAC.VEH");
				DeletePVar(playerid, "CAMFAC.TRAILER");
				DeletePVar(playerid, "CAMFAC.PASO");
				DestroyPCP(playerid, CP_CAMIONEROFAC);
				Loop(i, MAX_PEDIDOS_CAMIONEROS, 0)
				{
				    if (PedidoCamioneros[i][p_PlayerID] == playerid)
				    {
				        PedidoCamioneros[i][p_PlayerID] = INVALID_PLAYER_ID;
					}
				}
				return 1;
			}
	        return Error(playerid, "No aceptaste un pedido. Este comando, es sólo para los miembros de la ~r~facción camioneros ~w~(No el trabajo)");
		}
		return ParamsINC(playerid, "/terminar [tunning/extraccion/entrega]");
	}

	CMD:tunear(playerid, params[])
	{
		if(!EsMecanico(playerid)) return Error(playerid,"¡No eres mecánico!");
		if(!IsPlayerInDynamicArea(playerid, zMecanicos)) return Error(playerid, "¡Debes estar en el taller para tunear un vehículo!");
	    if(!strcmp(params, "menu", true) || !strcmp(params, "@SECRETCODE=TUNNING"))
	    {
			if(Mecanico_ClientID[playerid] == INVALID_PLAYER_ID)
			{
			    Mensaje(playerid, -1, "Para abrir el menú, necesita tener un cliente al que ofrecerle el servicio.");
			    Mensaje(playerid, -1, "Use "#CINFO"/tunear [ID/Nombre] "#CBLANCO"para ofrecerle servicio a una persona.");
			    Mensaje(playerid, -1, "Luego de eso, podrá modificar el vehículo con el comando "#CINFO"/tunear menu.");
				return 1;
			}
			new
			    Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x, y, z);
			if(GetVehicleDistanceFromPoint(GetPVarInt(playerid, "MECANICO_VEHID"), x, y, z) > 5.0)
			{
			    return Error(playerid, "Debes acercarte más al vehículo.");
			}

	        TunningMenu(playerid);
	        return 1;
		}
		//  /tunning [ID/Nombre]
		if(sscanf(params, "u", params[0])) return ParamsINC(playerid, "/tunear [ID/Nombre del Cliente]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "Jugador desconectado.");
		if(GetPVarInt(params[0], "OFERTA_TUNNING")) return Error(playerid, "El jugador ya tiene una oferta para tunear el vehículo.");
		if(Mecanico_ClientID[playerid] != INVALID_PLAYER_ID)
		{
		    if(!IsPlayerConnected(Mecanico_ClientID[playerid]))
		    {
		        Mecanico_ClientID[playerid] = INVALID_PLAYER_ID;
			}
		    else return MensajeF(playerid, -1, "Ya estás ofreciendole servicio a "#CAMARILLO"%s"#CBLANCO", usa "#CINFO"/terminar tunning.", pName(Mecanico_ClientID[playerid]) );
		}
		foreach(Player, i)
		{
		    if(Mecanico_ClientID[i] == params[0])
		    {
		        return Error(playerid, "Ya hay otro mecánico tuneando su vehículo.");
			}
		}
		SetPVarInt(params[0], "OFERTA_TUNNING", true);
		SetPVarInt(params[0], "OFERTA_MECANICOID", playerid);

		MensajeF(params[0], -1, "El mecánico "#CAMARILLO"%s "#CBLANCO"ofrece tunear tu vehículo. ", NombreJugador_(playerid) );
		Mensaje (params[0], -1, "Para aceptar, ingrese al vehículo que desea tunear y use "#CINFO"/aceptar tunning. "#CBLANCO"Si no, use "#CINFO"/rechazar tunning");
		MensajeF(playerid , -1, "La solicitud fue enviada a "#CAMARILLO"%s. "#CBLANCO"Espera una respuesta de el..", NombreJugador_(params[0]));
		return 1;
	}

	CMD:repararmotor(playerid,params[])
	{
		if(!EsMecanico(playerid)) return Error(playerid,"¡No eres mecánico!");
	    Comando_En_Auto
	    if((GetTickCount() - GetPVarInt(playerid,"_REPARARMOTOR")) < 30000) return Error(playerid,"¡Solo puedes reparar un coche cada 30 segundos!");
	    new Float:VidaVeh,VehID = GetPlayerVehicleID(playerid);
	    GetVehicleHealth(VehID,VidaVeh);
	    if(VidaVeh + 450.0 > 1000.0) VidaVeh = 1000.0;
	    else VidaVeh += 450.0;
	    SetVehicleHealth(VehID,VidaVeh);
	    SetPVarInt(playerid,"_REPARARMOTOR",GetTickCount());
	    AutoRol(playerid,"repara un vehículo");
	    return 1;
	}

	CMD:deposito(playerid,params[])
	{
	    if(!EsMecanico(playerid)) return Error(playerid,"¡No eres mecánico!");
	    Comando_En_Auto
		return Error(playerid, "Este comando ya no será necesario. Con el nuevo sistema de vehículos, la posición se guarda sola.");
	}

	CMD:modificar(playerid,params[])
	{
		if(!EsMecanico(playerid)) return Error(playerid,"¡No eres mecánico!");
		Error(playerid, "¡Actualizamos! Este sistema de ~b~/modificar ~w~es una mierda, ¡ahora el comando es ~b~/tunear ~w~y tienes TODOS los componentes de GTA:SA!");
		return 1;
	}

	CMD:remolcar(playerid,params[])
	{
	    if(!EsMecanico(playerid) && !EsLSPD(playerid)) return Error(playerid,"¡No eres mecánico, ni policía!");

	    new
			VehID = GetPlayerVehicleID(playerid),
			Modelo = GetVehicleModel(VehID);

		if(VehID == 0) return Error(playerid, "¡Debes estar subido a una TowTruck!");
		if(Modelo != 525) return Error(playerid,"¡No puedes remolcar en este vehículo!");
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return Error(playerid,"¡No eres el conductor!");

		new
		    TrailerID = GetVehicleTrailer(VehID);
		if (TrailerID) //Desenganchar
		{
		    if (IsPlayerInDynamicArea(playerid, zDepMecanicos)) //Deposito
		    {
		        if (veh_isOwnVeh(TrailerID))
		        {
		            MensajeF(playerid, -1, "El "#CAMARILLO"%s "#CBLANCO"de "#CINFO"%s "#CBLANCO"fue guardado y estacionado en el depósito.", veh_getNameAsString(TrailerID), veh_getOwnerAsString(TrailerID));
					new	
						Float:x,
						Float:y,
						Float:z,
						Float:angle,
						intid = veh_getInterior(TrailerID),
						vwid = veh_getVirtualWorld(TrailerID);

					GetVehiclePos(TrailerID, x, y, z);
					GetVehicleZAngle(TrailerID, angle);
		        	veh_setSpawnInfo(TrailerID, x, y, z, angle, intid, vwid);
					ownVeh_MySQL_update(veh_ownVehID(TrailerID));
				}
			}
		    else if(VehEmbargado(TrailerID)) //Deposito Policial
		    {
		        if(veh_isOwnVeh(TrailerID))
		        {
		            MensajeF(playerid, -1, "El "#CAMARILLO"%s "#CBLANCO"de "#CINFO"%s "#CBLANCO"fue guardado y estacionado en el depósito.", veh_getNameAsString(TrailerID), veh_getOwnerAsString(TrailerID));
					new	
						Float:x,
						Float:y,
						Float:z,
						Float:angle,
						intid = veh_getInterior(TrailerID),
						vwid = veh_getVirtualWorld(TrailerID);

					GetVehiclePos(TrailerID, x, y, z);
					GetVehicleZAngle(TrailerID, angle);
		        	veh_setSpawnInfo(TrailerID, x, y, z, angle, intid, vwid);
					ownVeh_MySQL_update(veh_ownVehID(TrailerID));
				}
			}
			DetachTrailerFromVehicle(VehID);
			AutoRol(playerid,"desengancha un vehículo de la TowTruck");
			return 1;
		}
		new
		    Float:x, Float:y, Float:z, Float:Angle;

		GetVehiclePos(VehID, x, y, z);
		GetVehicleZAngle(VehID, Angle);

		Angle -= 180.0;

		x += floatsin(-Angle, degrees) * 5.5;
		y += floatcos(-Angle, degrees) * 5.5;

		//CreateDynamicObject(1318, x, y, z, 0.0, 0.0, 0.0); //Debug a ver si esá bien la puta cord.
		new
		    VehicleID = INVALID_VEHICLE_ID;

		foreach(veh, i)
		{
		    if(GetVehicleDistanceFromPoint(i, x, y, z) < 2.0)
		    {
		        VehicleID = i;
		        break;
			}
		}
		if(VehicleID == INVALID_VEHICLE_ID) return Error(playerid, "Debes poner el gancho de la TowTruck cerca del vehículo para remolcar.");

		new
			VehType = GetVehType(VehicleID);

		if(VehType != VEHICLE_TYPE_CAR && VehType != VEHICLE_TYPE_BIKE) return Error(playerid, "Solo puedes remolcar motos y autos.");

		AttachTrailerToVehicle(VehicleID, VehID);
		if(VehType == VEHICLE_TYPE_CAR)
			AutoRol(playerid,"remolca un auto mediante el gancho de la TowTruck.");

		else
			AutoRol(playerid,"remolca una moto mediante el gancho de la TowTruck.");

		return 1;
	}

	// --=======[ COMANDOS CAMIONEROS ]=======-- //
	CMD:pedidos(playerid, params[])
	{
		if (ID_Faccion(playerid) != IDCAMIONEROS)
		    return Error(playerid, "No eres ~r~Camionero.");

		if (GetPVarInt(playerid, "CAMFAC.PASO"))
		    return Error(playerid, "Debes finalizar la entrega actual para usar este comando.");

		new
		    str[65],
		    str2[sizeof(str) * MAX_PEDIDOS_CAMIONEROS];

		for(new i; i < MAX_PEDIDOS_CAMIONEROS; i++)
		{
		    if(PedidoCamioneros[i][p_Time] == 0)
		    {
	 			A_Format(str, "(Pedido nº %d)\t"#CGRIS"Vacío.\n", i);
			}
			else
			{
			    if(PedidoCamioneros[i][p_PlayerID] == INVALID_PLAYER_ID)
	 				A_Format(str, "(Pedido nº %d)\t"#CVERDE"%s\n", i, InfoNegocio[PedidoCamioneros[i][p_NegID]][nNombre]);

				else
	 				A_Format(str, "(Pedido nº %d)\t"#CROJO"%s\n", i, InfoNegocio[PedidoCamioneros[i][p_NegID]][nNombre]);

			}
			strcat(str2, str);
		}
		Dialog(playerid, dElegirPedido, DIALOG_STYLE_LIST, ""#CNARANJA"PEDIDOS PENDIENTES", str2, "Aceptar", "Salir");
		return 1;
	}

	// --=======[ COMANDOS GOBIERNO ]========-- //

	CMD:sueldos(playerid, params[])
	{
	    if(!EsPresidente(playerid))
	        return Error(playerid, "~r~No eres el presidente de los Estados Unidos de América y las naciones unidas de San Spell Ciudad Real RP V4.");

		//MostrarMenuSueldos(playerid, dModificarSueldos);
		return 1;
	}

	CMD:pagarfaccion(playerid,params[])
	{
	    if(sscanf(params,"is[20]",params[0],params[1])) return ParamsINC(playerid,"/pagarfaccion [DINERO] <POLICIA - EJERCITO - HOSPITAL - TELEVISION - MECÁNICOS>");
	    if(!EsPresidente(playerid)) return Error(playerid,"¡No eres el presidente!");
		if(params[0] > InfoFaccion[IDGOBIERNO][fDinero] || params[0] < 1) return Error(playerid,"¡No tienes ese dinero en la caja fuerte!");
		if(!strcmp(params[1],"Policia",true))
		{
		    InfoFaccion[IDLSPD][fDinero] += params[0];
		    InfoFaccion[IDGOBIERNO][fDinero] -= params[0];
		    new Str[120];
		    A_Format(Str,""#CAZUL2"[ATENCIÓN] > "#CBLANCO"El gobierno (Presidente: %s) pagó a la policia "#CINFO"$%d.",NombreJugador_(playerid),params[0]);
		    MensajeTodos(-1,Str);
		    A_Format(Str,"> Pagaste a la policia "#CINFO"$%d",params[0]);
		    Mensaje(playerid,-1,Str);
		    ActualizarFacciones();
		    return 1;
		}
		else if(!strcmp(params[1],"Ejercito",true))
		{
		    InfoFaccion[IDLSEM][fDinero] += params[0];
		    InfoFaccion[IDGOBIERNO][fDinero] -= params[0];
		    new Str[120];
		    A_Format(Str,""#CAZUL2"[ATENCIÓN] > "#CBLANCO"El gobierno (Presidente: %s) pagó al ejército "#CINFO"$%d.",NombreJugador_(playerid),params[0]);
		    MensajeTodos(-1,Str);
		    A_Format(Str,"> Pagaste al ejército "#CINFO"$%d",params[0]);
		    Mensaje(playerid,-1,Str);
		    ActualizarFacciones();
		    return 1;
		}
		else if(!strcmp(params[1],"Hospital",true))
		{
		    InfoFaccion[IDLSMD][fDinero] += params[0];
		    InfoFaccion[IDGOBIERNO][fDinero] -= params[0];
		    new Str[120];
		    A_Format(Str,""#CAZUL2"[ATENCIÓN] > "#CBLANCO"El gobierno (Presidente: %s) pagó al hospital "#CINFO"$%d.",NombreJugador_(playerid),params[0]);
		    MensajeTodos(-1,Str);
		    A_Format(Str,"> Pagaste al hospital "#CINFO"$%d",params[0]);
		    Mensaje(playerid,-1,Str);
		    ActualizarFacciones();
		    return 1;
		}
		else if(!strcmp(params[1],"television",true))
		{
		    InfoFaccion[IDLSTV][fDinero] += params[0];
		    InfoFaccion[IDGOBIERNO][fDinero] -= params[0];
		    new Str[120];
		    A_Format(Str,""#CAZUL2"[ATENCIÓN] > "#CBLANCO"El gobierno (Presidente: %s) pagó a la televisión "#CINFO"$%d.",NombreJugador_(playerid),params[0]);
		    MensajeTodos(-1,Str);
		    A_Format(Str,"> Pagaste a la televisión "#CINFO"$%d",params[0]);
		    Mensaje(playerid,-1,Str);
		    ActualizarFacciones();
		    return 1;
		}
		else if(!strcmp(params[1],"mecanicos",true))
		{
		    InfoFaccion[IDMECANICOS][fDinero] += params[0];
		    InfoFaccion[IDGOBIERNO][fDinero] -= params[0];
		    new Str[120];
		    A_Format(Str,""#CAZUL2"[ATENCIÓN] > "#CBLANCO"El gobierno (Presidente: %s) pagó a los mecánicos "#CINFO"$%d.",NombreJugador_(playerid),params[0]);
		    MensajeTodos(-1,Str);
		    A_Format(Str,"> Pagaste a los mecánicos "#CINFO"$%d",params[0]);
		    Mensaje(playerid,-1,Str);
		    ActualizarFacciones();
		    return 1;
		}
		return ParamsINC(playerid,"/pagarfaccion [DINERO] <POLICIA - EJERCITO - HOSPITAL - TELEVISION - MECANICOS>");
	}

	CMD:gob(playerid,params[])
	{
		if(EsIP(params))
		{
			MensajeAdminF(C_ROJO, "[Anti-SPAM] "#CBLANCO"%s(%d): "#CINFO"/gob %s", Destacado, NombreJugador_(playerid), playerid, params);
			antic_Kick(playerid, "SPAM");
			return 0;
		}
	    if(isnull(params)) return ParamsINC(playerid,"/gob [ANUNCIO]");
		if(InfoJugador[playerid][jLider] == IDLSPD)
		{
  			if(!IsPlayerInRangeOfPoint(playerid,2,-1801.5547,-235.2897,1066.0098)) return Error(playerid,"¡Aquí no puedes utilizar este comando!");
			MensajeTodosF(C_GOBIERNO,"[Policía] %s", params);
			return 1;
		}
		if(InfoJugador[playerid][jLider] == IDLSMD)
		{
			if(!IsPlayerInRangeOfPoint(playerid,2,2018.3445,2863.1958,1104.7494)) return Error(playerid,"¡Aquí no puedes utilizar este comando!");
			MensajeTodosF(C_GOBIERNO,"[Hospital] %s", params);
			return 1;
		}
		if(InfoJugador[playerid][jLider] == IDLSEM)
		{
			if(!IsPlayerInRangeOfPoint(playerid,2,2744.3435,-2453.8425,13.8623)) return Error(playerid,"¡Aquí no puedes utilizar este comando!");
			MensajeTodosF(C_GOBIERNO,"[Ejército] %s", params);
			return 1;
		}
		if(InfoJugador[playerid][jLider] == IDGOBIERNO)
		{
			if(!IsPlayerInRangeOfPoint(playerid,3,1559.9559,-1481.5164,1370.3561)) return Error(playerid,"¡Aquí no puedes utilizar este comando!");
			MensajeTodosF(C_GOBIERNO,"[Gobierno] %s", params);
			return 1;
		}
		return Error(playerid, "No estás autorizado para utilizar este comando");
	}

	CMD:familias(playerid, params[])
	{
	    new
	        Str2[80],
	        Str[MAX_FAMILIAS*sizeof(Str2)],
			Count;

		Loop(i, MAX_FAMILIAS, 0)
		{
			if(!isnull(InfoFamilia[i][fNombre]))
			{
			    if(isnull(InfoFamilia[i][fLider]))
			    {
				    switch(strlen(InfoFamilia[i][fNombre]))
				    {
				        case 4..10:
				        {
					    	A_Format(Str2, ""#CBLANCO"> %s %s\t\t"#CROJO"(Libre)\n",
								InfoFamilia[i][fPandilla] ? ("Pandilla") : ("Mafia"),
								InfoFamilia[i][fNombre]);
						}
				        case 11..16:
				        {
					    	A_Format(Str2, ""#CBLANCO"> %s %s\t"#CROJO"(Libre)\n",
								InfoFamilia[i][fPandilla] ? ("Pandilla") : ("Mafia"),
								InfoFamilia[i][fNombre]);
						}
				       	default:
				        {
					    	A_Format(Str2, ""#CBLANCO"> %s %s "#CROJO"(Libre)\n",
								InfoFamilia[i][fPandilla] ? ("Pandilla") : ("Mafia"),
								InfoFamilia[i][fNombre]);
						}
					}
				}
				else
				{
				    switch(strlen(InfoFamilia[i][fNombre]))
				    {
				        case 4..10:
				        {
					    	A_Format(Str2, ""#CBLANCO"> %s %s\t\t"#CVERDE"(Lider: %s)\n",
								InfoFamilia[i][fPandilla] ? ("Pandilla") : ("Mafia"),
								InfoFamilia[i][fNombre],
								InfoFamilia[i][fLider]);
						}
				        case 11..16:
				        {
					    	A_Format(Str2, ""#CBLANCO"> %s %s\t"#CVERDE"(Lider: %s)\n",
								InfoFamilia[i][fPandilla] ? ("Pandilla") : ("Mafia"),
								InfoFamilia[i][fNombre],
								InfoFamilia[i][fLider]);
						}
				        default:
				        {
					    	A_Format(Str2, ""#CBLANCO"> %s %s "#CVERDE"(Lider: %s)\n",
								InfoFamilia[i][fPandilla] ? ("Pandilla") : ("Mafia"),
								InfoFamilia[i][fNombre],
								InfoFamilia[i][fLider]);
						}
					}
				}

				strcat(Str, Str2);
				Count++;
			}
		}
		A_Format(Str2, ""#CHAMBRE"Familias: "#CBLANCO"%d", Count);
		Dialog(playerid, dError, DIALOG_STYLE_MSGBOX, Str2, Str, "Cerrar", "");
		return 1;
	}

	CMD:facciones(playerid, params[])
	{
	    new
	        Str2[80],
	        Str[MAX_FAMILIAS*sizeof(Str2)],
			Count;

		Loop(i, MAX_FACCIONES, 1)
		{
		    if(isnull(InfoFaccion[i][fLider]))
		    {
			    switch(strlen(NombreFaccion(i)))
			    {
			        case 4..10:
			        {
				    	A_Format(Str2, ""#CBLANCO"> %s\t\t"#CROJO"(Sin lider)\n",
		       				NombreFaccion(i));
					}
			        case 11..16:
			        {
				    	A_Format(Str2, ""#CBLANCO"> %s\t"#CROJO"(Sin lider)\n",
		       				NombreFaccion(i));
					}
			        default:
			        {
				    	A_Format(Str2, ""#CBLANCO"> %s "#CROJO"(Sin lider)\n",
		       				NombreFaccion(i));
					}
				}
			}
			else
			{
			    switch(strlen(NombreFaccion(i)))
			    {
			        case 4..10:
			        {
				    	A_Format(Str2, ""#CBLANCO"> %s\t\t"#CVERDE"(Lider: %s)\n",
							NombreFaccion(i),
							InfoFaccion[i][fLider]);
					}
					case 11..16:
					{
				    	A_Format(Str2, ""#CBLANCO"> %s\t"#CVERDE"(Lider: %s)\n",
							NombreFaccion(i),
							InfoFaccion[i][fLider]);
					}
					default:
					{
				    	A_Format(Str2, ""#CBLANCO"> %s "#CVERDE"(Lider: %s)\n",
							NombreFaccion(i),
							InfoFaccion[i][fLider]);
					}
				}
			}
			strcat(Str, Str2);
			Count++;
		}

		A_Format(Str2, ""#CHAMBRE"Facciones: "#CBLANCO"%d", Count);
		Dialog(playerid, dError, DIALOG_STYLE_MSGBOX, Str2, Str, "Cerrar", "");
		return 1;
	}

	CMD:faccion(playerid, params[])
	{
	    if(!InfoJugador[playerid][jLider])
	        return Error(playerid, "No eres lider de facción.");

		Dialog(playerid, dFaccion, DIALOG_STYLE_LIST, ""#CVERDE"Panel de Facción", ">Rangos\n>Miembros", "Aceptar", "Salir");
		return 1;
	}

	stock SetFacLeader(playerid, facid)
	{
		if(!IsPlayerConnected(playerid))
		    return 0;

		if(isnull(InfoFaccion[facid][fLider]))
		{
			alm(InfoFaccion[facid][fLider], pName(playerid) );
		}
		else
		{
		    MensajeF(playerid, -1, "Ya hay un líder de la faccion, quedarás como "#CVERDE"Sub-Lider.");
		}
		ActualizarFacciones();
		return 1;
	}

	stock RemoveLeaderFac(playerid, fac)
	{
		if(!strcmp(pName(playerid), InfoFaccion[fac][fLider]))
		{
		    strclr(InfoFaccion[fac][fLider]);
			ActualizarFacciones();
			return 1;
		}
		return 0;
	}

	stock RemoveFromFac(name[], fac)
	{
		new
		    str[40],
			members[50][MAX_PLAYER_NAME];

		format(str, sizeof(str), "Facciones/Miembros[%d].ini", fac);

		if(!fexist(str))
		    return 0;

		new
		    File: Members = fopen(str, io_read),
			i = -1,
			str2[MAX_PLAYER_NAME+1],
			lines,
			bool: suc = false;

		while(fread(Members, str2))
		{
		    i++;
			if(i >= sizeof(members)-1)
			{
			    printf("BUG: Se necesita incrementar MEMBERS de RemoveFromFac a %d!", i);
			    return 0;
			}
			if(strfind(str2, name) != 0)
			{
	      		alm(members[i], str2);
			}
			else
			{
			    if(!suc)
			        suc = true;
			}
		}

		Members = fopen(str, io_write);

		lines = i;
		i = -1;

		do
		{
		    i++;
			fwrite(Members, members[i]);
		}
		while(i < lines);

		fclose(Members);

		if(suc)
		{
		    InfoFaccion[fac][fMiembros] --;
		    ActualizarFacciones();
		}

		return 1;
	}

	stock AddMemberToFac(playerid, facid)
	{
		if(!IsPlayerConnected(playerid))
		    return 0;

		InfoFaccion[facid][fMiembros] ++;
		ActualizarFacciones();

		new
			str[30];

		A_Format(str, "Facciones/Miembros[%d].ini", facid);

		new
		    File: Members = fopen(str, io_append);

		A_Format(str, "%s\r\n", pName(playerid));

		fwrite(Members, str);
		fclose(Members);

		return 1;
	}

	// -========================== [FAMILIAS] ==================================- //

	stock SetFamLeader(playerid, famid)
	{
		if(!IsPlayerConnected(playerid))
		    return 0;

		if(isnull(InfoFamilia[famid][fLider]))
		{
			alm(InfoFamilia[famid][fLider], pName(playerid) );
			ActualizarFamilia(famid);
		}
		else
		{
		    MensajeF(playerid, -1, "Ya hay un líder de la familia, quedarás como "#CVERDE"Sub-Lider.");
		}
		return 1;
	}

	stock RemoveLeaderFam(playerid, fam)
	{
		if(!IsPlayerConnected(playerid))
		    return 0;

		InfoFamilia[famid][fMiembros] ++;
		ActualizarFamilia(famid);

		new
			str[30];

		A_Format(str, "Familias/Miembros[%d].ini", famid);

		new
		    File: Members = fopen(str, io_append);

		A_Format(str, "%s\r\n", pName(playerid));

		fwrite(Members, str);
		fclose(Members);

		return 1;
	}


	// --=======[ COMANDOS DESTACADO ]========-- //

	CMD:a(playerid,params[])
	{
		if (InfoJugador[playerid][jAdmin] < Destacado)
		    return Mensaje (playerid, -1, "No tiene autorización para utilizar el canal administrativo. Puede usar "#CINFO"/reportar "#CBLANCO"para comunicarse con la administración.");

		if(isnull(params)) return ParamsINC(playerid, "/a [Texto]");

		if (InfoJugador[playerid][jAdmin] == Destacado)
		{
		    MensajeAdminF(C_ADMINCHAT ,"(( /a: %s %s (ID:%d) "#CBLANCO": %s "#CADMINCHAT"))",Ayudante,CheckRangoADM(playerid),NombreJugador_(playerid),playerid,params);
		    return Mensaje (playerid, -1, "Recuerde que con su rango podrá enviar los mensajes que desee a la administración, pero no podrá ver los mensajes de otros administradores.");
		}
		MensajeAdminF(C_ADMINCHAT ,"(( /a: %s %s (ID:%d) "#CBLANCO": %s "#CADMINCHAT"))",Ayudante,CheckRangoADM(playerid),NombreJugador_(playerid),playerid,params);
		return 1;
	}

	CMD:vprecio(playerid, params[]) {
	    if(!EsDueno(playerid)) return Error(playerid, "Necesitas ser dueño para usar este comando.");

		new
		    ModelName[40],
			ModelID,
			Price = -0xFFFF,
			string__[32];

		if(sscanf(params, "p< >s[40]D(-65535)", ModelName, Price)) return ParamsINC(playerid, "/vprecio [ID/Nombre] [precio] | /precioveh [ID/Nombre] para verlo.");

		new
			bool: success = false;
		if(!IsNumeric(ModelName))
		{
			for(new i; i < model_size(); i++)
			{
			    model_getName(i+400, string__, sizeof(string__));
			    if(strfind(string__, ModelName, true) != -1)
			    {
			        ModelID = i+400;
			        success = true;
					break;
				}
			}
			if(!success)
			{
			    return Error(playerid, "No se encontró ese nombre.");
			}
		}
		else
		{
		    ModelID = strval(params);
		    if(!(400 <= ModelID <= 611)) return Error(playerid, "El modelo deberá ser entre 400 - 611.");
		}

		if(Price == -0xFFFF)
		{
			MensajeF(playerid, -1, "Modelo: "#CAMARILLO"%s(%d) "#CBLANCO"| Precio actual: "#CVERDE"$%d", string__, ModelID, GetModelPrice(ModelID));
		}
		else
		{
		    if(!Price)
				return Error(playerid, "El precio no puede ser menor a uno.");

			MensajeF(playerid, -1, "Modelo: "#CAMARILLO"%s(%d) "#CBLANCO"| Precio actual: "#CVERDE"$%d "#CBLANCO"| Nuevo precio: "#CROJO"$%d", string__, ModelID, GetModelPrice(ModelID), Price);

			PrecioModelo[ModelID-400] = Price;

			new
			    string[18],
				File: Arch = fopen("Vehiculos/Precios.ini", io_write);

			Loop(i, MAX_VEHICLE_MODELS-400, 0)
			{
				A_Format(string, "%d\n", PrecioModelo[i]);
				fwrite(Arch, string);
			}
			fclose(Arch);
		}
		return 1;
	}

	CMD:vcolor(playerid,params[]) {
		if(Staff(playerid,Mod.Superior)) return 1;
		Para_Admin_Servicio
		Comando_En_Auto
		if(sscanf(params,"ii",params[0],params[1])) return ParamsINC(playerid,"/vcolor [COLOR1] [COLOR2]");
		new VehID = GetPlayerVehicleID(playerid);
		veh_setColor(VehID,params[0],params[1]);
		MensajeF(playerid,-1,"Le cambiaste el color a este vehículo: "#CAZUL2"%d - %d",params[0],params[1]);
		return 1;
	}

	CMD:vdescargar(playerid, params[]) {
		if (!EsDueno(playerid)) return Error(playerid, "Necesita ser dueño para usar este comando.");
		
		new ID;
		if (sscanf(params, "i", ID)) return ParamsINC(playerid, "/vdescargar [ID]");
		
		if (!IsValidVehicle(ID)) return Error(playerid, "ID de vehículo inexistente");
		if (veh_getType(ID) != VEH_TYPE_OWNVEH) return Error(playerid, "No puedes descargar este vehiculo.");
		
		new ownVeh: ownID = veh_ownVehID(ID);
		ownVeh_remove(ownID);

		Mensaje(playerid, -1, "El vehículo fue descargado.");
		return 1;
	}
	
	CMD:vcargarid(playerid, params[]) {
		if (Staff(playerid,SubDueno)) return 1;
		
		new ID;
		if (sscanf(params, "u", ID)) return ParamsINC(playerid, "/vcargarid [ID/Nombre]");
		if (ID == INVALID_VEHICLE_ID) return Error(playerid, "Jugador desconectado.");

		ownVeh_MySQL_load_owner(pName(ID), "veh_onLoaded", ID);
		
		MensajeF(playerid, -1, "Cargaste los vehiculos de "#CINFO"%s.", NombreJugador(ID));
		MensajeF(ID, -1, "El administrador "#CINFO"%s "#CBLANCO"recargó tus vehículos.", NombreJugador(playerid));
		return 1;
	}
	
	CMD:vcargarpatente(playerid, params[]) {
		if (Staff(playerid,SubDueno)) return 1;
		
		new plateString[20];
		if (sscanf(params, "s[20]", plateString)) return ParamsINC(playerid, "/vcargarpatente [patente]");

		new plateInt = veh_strToPlate(plateString);
		
		if (plateInt == -1) return Mensaje(playerid, -1, "Formato de patente incorrecta. Formato es: XX XXX-XXX");
		
		foreach(veh, i) {
			if (veh_getPlate(i) == plateInt) {
				return MensajeF(playerid, -1, "ERROR: Vehículo con patente %s ya está cargado (ID: %d)", plateString, i);
			}
		}
		
		MensajeF(playerid, -1, "Buscando en la base de datos patente: %s", plateString);
		
		ownVeh_MySQL_load_UID(plateInt, "veh_onLoadedUID", playerid);
		return 1;
	}

	CMD:vcargarcuenta(playerid, params[]) {
		if (Staff(playerid,SubDueno)) return 1;
		
		if (isnull(params)) return ParamsINC(playerid, "/vcargarcuenta [Nombre_Apellido]");

		MensajeF(playerid, -1, "Buscando vehículos del propietario: %s", params);
		
		ownVeh_MySQL_load_owner(params, "veh_onLoadedCheck", playerid);
		return 1;
	}

	CMD:vir(playerid,params[]) {
		if (Staff(playerid,Administrador)) return 1;
		Para_Admin_Servicio
		if (sscanf(params,"i",params[0])) return ParamsINC(playerid,"/vir [id del vehículo]");
		if (!IsValidVehicle(params[0])) return Mensaje(playerid, -1, "ID incorrecto.");
		if (veh_isDestroyed(params[0]) && player_getVar(playerid,jAdmin) <= Mod.Superior) return Mensaje(playerid, -1, "No puedes ir a un vehículo destruido.");
		
		new
			Float: Pos[3];

	 	GetVehiclePos(params[0], Pos[0], Pos[1], Pos[2]);
	 	SetPlayerPos(playerid, Pos[0] + 1, Pos[1] + 2, Pos[2]);
	 	SetPlayerVirtualWorld(playerid, veh_getVirtualWorld(params[0]));
		SetPlayerInterior(playerid, veh_getInterior(params[0]));
		return 1;
	}

	CMD:vmotor(playerid,params[]) {
	    if (Staff(playerid, Mod.Superior)) return 1;
		
	    Para_Admin_Servicio
		Comando_En_Auto
		
		new vehID = GetPlayerVehicleID(playerid);
		
		veh_setEngine(vehID, !veh_getEngine(vehID));
		
		if (veh_getEngine(vehID)) GameTextForPlayer(playerid, "~w~vehiculo ~g~encendido", 3000, 3);
		else GameTextForPlayer(playerid, "~w~vehiculo ~r~apagado", 3000, 3);
		
		return 1;
	}

	CMD:vllenar(playerid,params[]) {
	
	    if (Staff(playerid,Mod.Superior)) return 1;
	    Para_Admin_Servicio
		
		new
			vehID = -1;
			
		if (sscanf(params, "I(-1)", vehID)) return ParamsINC(playerid, "/vllenar [opcional: id]");
		
		if (vehID == -1) {	
			if (!GetPlayerVehicleID(playerid)) return Mensaje(playerid, -1, "No estás en un vehículo. Escribe el ID si quieres llenar otro vehículo.");
			Mensaje(playerid, -1, "Llenaste el tanque del vehículo al que estás subido.");
			vehID = GetPlayerVehicleID(playerid);
		}
		else {
			if (!IsValidVehicle(vehID)) return Mensaje(playerid, -1, "El id de vehículo ingresado es inexistente.");
			Mensaje(playerid, -1, "Llenaste el tanque del vehículo especificado.");
		}
		veh_refuel(vehID);
		
		return 1;
	}

	CMD:ventrar(playerid,params[]) {
	    if(Staff(playerid,Mod.Superior)) return 1;
		
	    Para_Admin_Servicio
		
		new
			vehID,
			seatID = 1;
	    if (sscanf(params,"iI(1)", vehID, seatID)) return ParamsINC(playerid, "/ventrar [id del vehículo] [opcional: asiento (0 conductor | 1-3 acompañante)]");
		if (!IsValidVehicle(vehID)) return Mensaje(playerid, -1, "ID de vehículo inválido.");
		
		if (0 <= seatID <= 3) {
			PutPlayerInVehicle(playerid, vehID, seatID);
		
			Mensaje(playerid, -1, "Ingresaste al vehículo con éxito.");
		}
		return 1;
	}

	CMD:vtraer(playerid, params[]) {
		if(Staff(playerid,Moderador)) return 1;
		Para_Admin_Servicio
		
		if(sscanf(params, "i", params[0])) return ParamsINC(playerid, "/vtraer [id del vehículo]");
		
		if (!IsValidVehicle(params[0])) return Mensaje(playerid, -1, "ID de vehículo inexistente.");
		if (veh_isDestroyed(params[0]) && player_getVar(playerid, jAdmin) <= Mod.Superior) return Mensaje(playerid, -1, "No puedes traer un vehículo destruido.");
		if((GetPlayerInterior(playerid) || GetPlayerVirtualWorld(playerid)) && InfoJugador [playerid][jAdmin] < Dueno) return Mensaje(playerid, -1, "No puede teletransportar el vehículo a esa posición, esto podría causar un bug.");


		new
			Float:x,
			Float:y,
			Float:z,
			Float:camx,
			Float:camy,
			Float:camz,
			intid = GetPlayerInterior(playerid),
			vwid = GetPlayerVirtualWorld(playerid),
			vectorSize = 2;
			
		GetPlayerPos(playerid, x, y, z);
		GetPlayerCameraFrontVector(playerid, camx, camy, camz);
		
		x += camx * vectorSize;
		y += camy * vectorSize;
		
		SetVehiclePos(params[0], x, y, z);
		veh_setInterior(params[0], intid);
		veh_setVirtualWorld(params[0], vwid);
		
		Mensaje(playerid, -1, "Vehículo teleportado a tu posición.");
		return 1;
	}

	CMD:vreparar(playerid,params[])	{
		if(Staff(playerid,Moderador)) return 1;
		Para_Admin_Servicio
		Comando_En_Auto
		
		new vehID = GetPlayerVehicleID(playerid);
		
		if (vehID == 0) return Mensaje(playerid, -1, "No estás en un vehículo.");
		
		RepairVehicle(vehID);
		
		Mensaje(playerid, -1, "Vehículo reparado.");
		return 1;
	}

	CMD:vid(playerid,params[]) {
		Comando_En_Auto
		if(Staff(playerid,Destacado)) return 1;
		
		new vehID = GetPlayerVehicleID(playerid);
		
		if (vehID) MensajeF(playerid, -1, "ID: %d | Nombre: %s | Patente: %s", vehID, veh_getNameAsString(vehID), veh_getPlateAsString(vehID));
		return 1;
	}

	CMD:vborrar(playerid, params[]) {
	    if (!EsDueno(playerid)) 
			return Error(playerid, "Necesitas ser dueño para usar este comando.");

		new
		    VehID = GetPlayerVehicleID(playerid);

		if (!VehID)
			return Error(playerid, "No estás en un vehículo.");
			
		if (veh_getType(VehID) != VEH_TYPE_OWNVEH)
		{
		    Mensaje(playerid, -1, "Solamente puedes borrar vehiculos comprados por usuarios con este comando.");
		    return 1;
		}
		new 
			ownVeh:ID = veh_ownVehID(VehID);
			
		if (ID != INVALID_OWNVEH_ID) {
			ownVeh_MySQL_remove(ID);
			MensajeF(playerid, -1, "El vehículo de %s (%s) fue eliminado de la base de datos con éxito.", ownVeh_getOwnerAsString(ID), veh_getPlateAsString(VehID));

			new cmdStr[10];
			valstr(cmdStr, VehID);

			cmd_vdescargar(playerid, cmdStr);
		}
		else {
			Mensaje(playerid, -1, "No se pudo borrar el vehículo.");
		}
		return 1;
	}

	CMD:vestacionar(playerid, params[]) {
	    if (Staff(playerid,Administrador)) 
			return 1;

		new
		    VehID = GetPlayerVehicleID(playerid);

		if (!VehID)
			return Error(playerid, "No estás en un vehículo.");
			
		if (veh_getType(VehID) != VEH_TYPE_OWNVEH) return Mensaje(playerid, -1, "Solamente puedes estacionar vehiculos comprados por usuarios con este comando.");

		new 
			ownVeh:ID = veh_ownVehID(VehID);
			
		if (ID != INVALID_OWNVEH_ID) {
		
			new
				Float:x,
				Float:y,
				Float:z,
				Float:angle,
				intid = veh_getInterior(VehID),
				vwid = veh_getVirtualWorld(VehID);
				
			GetVehiclePos(VehID, x, y, z);
			GetVehicleZAngle(VehID, angle);
			
			veh_setSpawnInfo(VehID, x, y, z, angle, intid, vwid);
			ownVeh_MySQL_update(ID);

			
			MensajeF(playerid, -1, "El vehículo de %s fue estacionado correctamente.", ownVeh_getOwnerAsString(ID), veh_getPlateAsString(VehID));

			foreach(Player, i) {
				if (TieneLlaveVeh(i, VehID) == 2) {
					MensajeF(i, -1, "Administrador %s estacionó tu "#CINFO"%s (%s) "#CBLANCO"en otra posición.", NombreJugador_(playerid), veh_getNameAsString(VehID), veh_getPlateAsString(VehID));
					break;
				}
			}
		}
		else {
			Mensaje(playerid, -1, "No se pudo estacionar el vehículo.");
		}
		return 1;
	}

	CMD:vcrear(playerid, params[]) {
		if (!EsDueno(playerid)) return Error(playerid, "Necesitas ser dueño para usar este comando.");
		
		new
			PlayerID,
			modelid,
			Float:x,
			Float:y,
			Float:z,
			Float:angle,
			color1,
			color2,
			intid = GetPlayerInterior(playerid),
			vwid = GetPlayerVirtualWorld(playerid);
			
		if (sscanf(params, "uiI(-1)I(-1)", PlayerID, modelid, color1, color2)) return ParamsINC(playerid, "/vcrear [id del propietario] [id de modelo] [opcional: color1] [opcional: color2]");
		
		if (PlayerID == INVALID_PLAYER_ID) return Mensaje(playerid, -1, "El id escrito no es correcto (no está conectado).");
		if (!model_isValid(modelid)) return Mensaje(playerid, -1, "ID de modelo inválido (Entre 400 y 611)");
		if (color1 < 0 || color2 < 0 || color1 > 0xFF || color2 > 0xFF) return Mensaje(playerid, -1, "Los colores deben estar entre 0 y 255");

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, angle);
		
		new UID = ownVeh_genUID(), ownVeh:ID;
		
		ID = ownVeh_create(UID, pName(PlayerID), modelid, x, y, z, angle, color1, color2, intid, vwid, 0);
			
		if (ID != INVALID_OWNVEH_ID) {
			
			new VehID = ownVeh_ID(ID);
			
			ownVeh_MySQL_insert(ID);

	
			MensajeF(playerid, -1, "Se creó el vehículo para %s (modelo: %s | patente: %s)", NombreJugador_(PlayerID), veh_getNameAsString(VehID), veh_getPlateAsString(VehID));
			MensajeF(PlayerID, -1, "Administrador "#CROJO"%s "#CBLANCO"creó un vehículo a su nombre (modelo: %s | patente: %s)", NombreJugador_(playerid), veh_getNameAsString(VehID), veh_getPlateAsString(VehID));
		}
		else {
			Mensaje(playerid, -1, "Ocurrio un error al crear vehículo.");
		}
		return 1;
	}

	CMD:vrespawn(playerid,params[]) {
	
	    if (Staff(playerid,Mod.Superior)) return 1;
	    Para_Admin_Servicio
		
		new
			vehID = -1;
			
		if (sscanf(params, "I(-1)", vehID)) return ParamsINC(playerid, "/vrespawn [opcional: id]");
		
		if (vehID == -1) {	
			if (!GetPlayerVehicleID(playerid)) return Mensaje(playerid, -1, "No estás en un vehículo. Escribe el ID si quieres respawnear otro vehículo.");
			Mensaje(playerid, -1, "Respawneaste el vehículo al que estás subido.");
			vehID = GetPlayerVehicleID(playerid);
		}
		else {
			if (!IsValidVehicle(vehID)) return Mensaje(playerid, -1, "El id de vehículo ingresado es inexistente.");
			Mensaje(playerid, -1, "Llenaste el tanque del vehículo especificado.");
		}
		
		foreach(Player, i) {
			if (i != playerid && GetPlayerVehicleID(i) == vehID) {
				MensajeF(i, -1, "El administrador "#CROJO"%s "#CBLANCO"respawneó tu vehículo.", NombreJugador_(playerid));
			}
		}
		
		veh_respawn(vehID);
		return 1;
	}

	CMD:vrespawnzona(playerid,params[]) {
	    if(Staff(playerid,Mod.Superior)) return 1;
		new Float:Radio;
		if(sscanf(params,"f",Radio)) return ParamsINC(playerid,"/vrespawnzona [RADIO]");
		GetPlayerPos(playerid,PosJugador[X],PosJugador[Y],PosJugador[Z]);
		Loop(i, MAX_VEHICLES, 0)
		{
		    if(IsValidVehicle(i))
		    {
		        if(IsVehicleInRangeOfPoint(i,Radio,PosJugador[X],PosJugador[Y],PosJugador[Z]))
		        {
		            veh_respawn(i);
				}
			}
		}
		return 1;
	}
	
	CMD:vcerrar(playerid,params[]) {
		if(Staff(playerid,Moderador)) return 1;
        Para_Admin_Servicio
		if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/vcerrar [ID VEHICULO]"),1;
		veh_setDoors(params[0], true);
		TextoJugador(playerid,"~w~vehiculo ~r~cerrado", 4000, 3);
		return 1;
	}

	CMD:vabrir(playerid,params[]) {
		if(Staff(playerid,Moderador)) return 1;
		Para_Admin_Servicio
		if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/vabrir [ID-VEHICULO]"),1;
		veh_setDoors(params[0], false);
		TextoJugador(playerid,"~w~vehiculo ~g~abierto", 4000, 3);
		return 1;
	}
	
	CMD:vcrearventa(playerid, params[]) {
	    if(!EsDueno(playerid)) return Error(playerid, "Necesitas ser dueño para usar este comando.");
		
	    new
	        Float:x, Float:y, Float:z, Float: ang, Model, col1 = -1, col2 = -1,
			string__[32];

		if(sscanf(params, "p< >s[40]D(-1)D(-1)", params, col1, col2)) return ParamsINC(playerid, "/vcrearventa [ID/Nombre] [Opcional: color 1] [Opcional: color 2]");

		if(!IsNumeric(params))
		{
			for(new i; i < model_size(); i++)
			{
				model_getName(i+400, string__, sizeof(string__));
			    if(strfind(string__, params, true) != -1)
			    {
			        Model = i+400;
			        MensajeF(playerid, -1, "Modelo encontrado "#CAMARILLO"(ID: %d - %s)",Model, string__);
					break;
				}
			}
		}
		else
		{
		    Model = strval(params);
		    if(!(400 <= Model <= 600)) return Error(playerid, "Entre 400-600.");
		}
		if(col1 == -1 || !(0 <= col1 <= 0xFF))
		{
		    col1 = random(0xFF);
		}
		if(col2 == -1 || !(0 <= col2 <= 0xFF))
		{
		    col2 = random(0xFF);
		}

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, ang);
		
		new vehID = sellVeh_create(Model, x, y, z, ang, col1, col2, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
		sellVeh_updateFile();
		MensajeF(playerid, -1, "Vehículo creado. Modelo: %s (%d)", veh_getNameAsString(vehID), Model); 
		return 1;
	}

	CMD:vborrarventa(playerid, params[]) {
	    if(!EsDueno(playerid)) return Error(playerid, "Necesitas ser dueño para usar este comando.");

		new
		    VehID = GetPlayerVehicleID(playerid);

		if(!VehID) return Error(playerid, "No estás en un vehículo.");

		if(sellVeh_destroy(VehID)) {
			Mensaje(playerid, -1, "Eliminando vehiculo..");
			sellVeh_updateFile();
			Mensaje(playerid, -1, "Se eliminó el vehículo de venta exitosamente.");
		}
		else {
			Mensaje(playerid, -1, "Este vehículo no es de venta.");
		}
		return 1;
	}

	CMD:irlugar(playerid,params[]) {
		if(Staff(playerid,Moderador)) return 1;
		Para_Admin_Servicio
		ShowPlayerDialog(playerid,dAdmTeleport,DIALOG_STYLE_LIST,""#CINFO"Menu de teleport's",MENU_ADMTELEPORT,"Ir","Cancelar");
		return 1;
	}

	CMD:admservice(playerid) {
	    if(Staff(playerid,Ayudante)) return 1;
		if(GetPVarInt(playerid, "ADMIN_ONDUTY"))
		{
			if(RangoADM[playerid] != Text3D:INVALID_3DTEXT_ID)
			{
			    Delete3DTextLabel(RangoADM[playerid]);
			    RangoADM[playerid] = Text3D:INVALID_3DTEXT_ID;
			}
			DeletePVar(playerid,"ADMIN_ONDUTY");
			MensajeAdminF(C_ROJO, "[ADMINISTRACIÓN] "#CBLANCO"%s %s "#CBLANCO"está ahora "#CROJO"fuera de Servicio.", Moderador, CheckRangoADM(playerid), NombreJugador_ (playerid));
			LogAdmin (playerid, "salió de servicio.");
			SetPlayerSkin (playerid, GetPVarInt (playerid, "offSkin"));
			DeletePVar (playerid, "offSkin");
		}
		else
		{
			if(RangoADM[playerid] == Text3D:INVALID_3DTEXT_ID)
			{
	  			RangoADM[playerid] = Create3DTextLabel(CheckRangoADM(playerid),0xFFFFFF82,0,0,0,50,false);
			}
			Attach3DTextLabelToPlayer(RangoADM[playerid], playerid, 0, 0, 0.3 );
			SetPVarInt(playerid,"ADMIN_ONDUTY",1);
			MensajeAdminF(C_ROJO, "[ADMINISTRACIÓN] "#CBLANCO"%s %s "#CBLANCO"está ahora "#CVERDE"en Servicio.", Moderador, CheckRangoADM(playerid), NombreJugador_ (playerid));
			LogAdmin (playerid, "se puso en servicio.");
			SetPVarInt (playerid, "offSkin", GetPlayerSkin (playerid));
			SetPlayerSkin (playerid, 217);
		}
		return 1;
	}


	CMD:mapayuda(playerid, params[]) {
		if (!EsDueno(playerid))
			return Error(playerid, "Necesita ser dueño para usar este comando.");
	
		Mensaje(playerid, -1, "/maplist [Lista de mapas cargados] | /mapcargar [nombre de archivo] | /mapdescargar [nombre de archivo]");
		return 1;
	}
	
	CMD:maplist(playerid, params[]) {
	
		Mensaje(playerid, -1, "Mostrando lista de mapas..");
		
		new 
			DBResult:result = db_query(map_db_getDB(), "SELECT * FROM list"),
			count,
			objCount = 0;
			
		if (db_num_rows(result) != 0) {
			do
			{
				new
					filename[55],
					objects[8];
					
				db_get_field_assoc(result, "filename", filename, sizeof(filename));
				db_get_field_assoc(result, "objects", objects, sizeof(objects));
				
				objects[0] = strval(objects);
				
				MensajeF(playerid, -1, "Archivo: "#CVERDE"%s "#CBLANCO"| Objetos: "#CVERDE"%d", filename, objects[0]);
				objCount += objects[0];
				
				count++;

			}
			while(db_next_row(result));
		}
		db_free_result(result);
		MensajeF(playerid, -1, "Total de objetos: %d | Mapas cargados: %d", objCount, count);
		return 1;
	}
	
	CMD:mapcargar(playerid, params[]) {
		if (!EsDueno(playerid)) return Error(playerid, "Necesita ser dueño para usar este comando.");
		
		if (isnull(params)) return ParamsINC(playerid, "/mapcargar [Nombre del archivo]");
		
		MensajeF(playerid, -1, "Cargando mapa: %s", params);
		
		if (map_load(params)) {
			Mensaje(playerid, -1, "Cargado correctamente.");
		}
		else {
			Mensaje(playerid, -1, "No se pudo cargar. Verifique que el mapa no este cargado ya, y que el archivo exista.");
		}
		return 1;
	}
	
	CMD:mapdescargar(playerid, params[]) {
		if (!EsDueno(playerid)) return Error(playerid, "Necesita ser dueño para usar este comando.");
		
		if (isnull(params)) return ParamsINC(playerid, "/mapdescargar [Nombre del archivo]");
		
		MensajeF(playerid, -1, "Descargando mapa: %s", params);
		
		if (map_unload(params)) {
			Mensaje(playerid, -1, "Descargado correctamente.");
		}
		else {
			Mensaje(playerid, -1, "No se pudo descargar. Verifique que el mapa este cargado, y que el archivo exista.");
		}
		return 1;
	}

	CMD:crearcamara(playerid, params[])
	{
	    if(Staff(playerid,Dueno)) return 1;
	    new
	        slot;

		for(slot = 0; slot < MAX_CAMARAS_VELOCIDAD; slot++)
		{
		    if(CamaraVelocidad[slot][camObjID] == 0)
		    {
		        break;
			}
		}
		if(slot == MAX_CAMARAS_VELOCIDAD-1)
		{
		    return Error(playerid, "No se pueden crear más cámaras. Borra algunas..");
		}
		GetPlayerPos(playerid, CamaraVelocidad[slot][camX], CamaraVelocidad[slot][camY], CamaraVelocidad[slot][camZ]);

        CamaraVelocidad[slot][camX] += 2.0;
        CamaraVelocidad[slot][camY] += 2.0;
        CamaraVelocidad[slot][camZ] -= 1.0;

		GetPlayerFacingAngle(playerid, CamaraVelocidad[slot][camAngle]);
		CamaraVelocidad[slot][camObjID] = CreateDynamicObject(OBJ_CAMARAVELOCIDAD, 	CamaraVelocidad[slot][camX],
  																				CamaraVelocidad[slot][camY],
  																				CamaraVelocidad[slot][camZ],
  																				0.0, 0.0,
  																				CamaraVelocidad[slot][camAngle]);
		SetPVarInt(playerid, "EDITANDO_CAMARA", true);
		SetPVarInt(playerid, "EDITANDO_CAMARAID", slot);
		EditDynamicObject(playerid, CamaraVelocidad[slot][camObjID]);

		MensajeF(playerid, -1, "Cámara creada "#CAZUL2"(%d)"#CBLANCO" | Coloquela en la posición deseada, y presione Guardar.", slot);

        CamaraVelocidad[slot][camMinX] = CamaraVelocidad[slot][camX]+10.0;
        CamaraVelocidad[slot][camMinY] = CamaraVelocidad[slot][camY]+10.0;
        CamaraVelocidad[slot][camMaxX] = CamaraVelocidad[slot][camX]-10.0;
        CamaraVelocidad[slot][camMaxY] = CamaraVelocidad[slot][camY]-10.0;
        CamaraVelocidad[slot][camSpeed] = 100;

		Iter_Add(Camaras, slot);
		UpdateCameraLabel(slot, true, false);
		CamaraVelocidad[slot][camZoneID] = CreateDynamicRectangle(CamaraVelocidad[slot][camMinX], CamaraVelocidad[slot][camMinY],
                                                            CamaraVelocidad[slot][camMaxX], CamaraVelocidad[slot][camMaxY]);
		return 1;
	}

	CMD:mincamera(playerid, params[])
	{
	    if(Staff(playerid,Dueno)) return 1;
		new
		    cam = GetPVarInt(playerid, "EDITANDO_CAMARAID"),
			Float:Z;

		GetPlayerPos(playerid, CamaraVelocidad[cam][camMinX], CamaraVelocidad[cam][camMinY], Z);
		DestroyDynamicArea(CamaraVelocidad[cam][camZoneID]);
		CamaraVelocidad[cam][camZoneID] = CreateDynamicRectangle(CamaraVelocidad[cam][camMinX], CamaraVelocidad[cam][camMinY],
                                                            CamaraVelocidad[cam][camMaxX], CamaraVelocidad[cam][camMaxY]);
		return 1;
	}

	CMD:maxcamera(playerid, params[])
	{
	    if(Staff(playerid,Dueno)) return 1;
		new
		    cam = GetPVarInt(playerid, "EDITANDO_CAMARAID"),
			Float:Z;

		GetPlayerPos(playerid, CamaraVelocidad[cam][camMaxX], CamaraVelocidad[cam][camMaxY], Z);
		DestroyDynamicArea(CamaraVelocidad[cam][camZoneID]);
		CamaraVelocidad[cam][camZoneID] = CreateDynamicRectangle(CamaraVelocidad[cam][camMinX], CamaraVelocidad[cam][camMinY],
                                                            CamaraVelocidad[cam][camMaxX], CamaraVelocidad[cam][camMaxY]);
		return 1;
	}

	CMD:editarcamara(playerid, params[])
	{
	    if(Staff(playerid,Administrador)) return 1;
		new
			slot;
		if(sscanf(params, "i", slot)) return ParamsINC(playerid, "/editarcamara [Slot]");
		if(CamaraVelocidad[slot][camObjID] == 0) return Error(playerid, "ID de cámara inexistente.");
		Dialog(playerid, dEditarCamara, DIALOG_STYLE_LIST, ""#CBLANCO"Editar cámara", "Editar posición (Objeto)\nMáxima velocidad\nMinx y Miny\nMaxx y Maxy\nPrecio de multa\nActualizar/Guardar cámara\n"#CROJO">> Borrar cámara. (No requiere confirmación)", "Aceptar", "Cancelar");
		return 1;
	}

	CMD:crearmineral(playerid, params[])
	{
	    if(Staff(playerid,Dueno)) return 1;

		new
		    Float: Pos[6],
			ObjectID;

		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
		GetPlayerCameraFrontVector(playerid, Pos[3], Pos[4], Pos[5]);

	    Loop(i, 3, 0)
			Pos[i] += Pos[i+3];

		ObjectID = CreateDynamicObject(3931, Pos[0], Pos[1], Pos[2], 0, 0, 0);
		Streamer_Update(playerid);
		EditDynamicObject(playerid, ObjectID);
		SetPVarInt(playerid, "AcomodandoMinerales", true);
		return 1;
	}

	CMD:material(playerid, params[])
	{
	    if(Staff(playerid,Dueno)) return 1;

	    new
			objectid,
			materialindex,
			modelid,
			txdname[30],
			texturename[30],
			materialcolor;

	    if(sscanf(params, "p<,>iiis[30]s[30]h", objectid, materialindex, modelid, txdname, texturename, materialcolor)) return ParamsINC(playerid, "/Material objectid materialindex modelid txdname texturename materialcolor");

	    SetDynamicObjectMaterial(objectid, materialindex, modelid, txdname, texturename, materialcolor);
	    return 1;
	}

	CMD:materialtext(playerid, params[])
	{
	    if(Staff(playerid,Dueno)) return 1;

	    new
			objectid,
			materialindex,
			text[90],
			materialsize,
			fontface[50],
			fontsize,
			bold,
			fontcolor,
			backcolor,
			textalignment;

	    if(sscanf(params, "p<,>dds[90]ds[50]ddhdd", 	objectid,
//	    0, "Prueba", 90, "Arial", 24, 0, 0xFFFFFFFF, 0, 0
														materialindex,
														text,
														materialsize,
														fontface,
														fontsize,
														bold,
														fontcolor,
														backcolor,
														textalignment))
			return ParamsINC(playerid, "/materialtext objectid materialindex text materialsize fontface fontsize bold fontolor backcolor textalignment");

		SetDynamicObjectMaterialText(objectid, materialindex, text, materialsize, fontface, fontsize, bold, fontcolor, backcolor, textalignment);
	    return 1;
	}

	// ----=============[ COMANDOS MODERADOR ]=============----- //

	CMD:lp(playerid,params[])
	{
	    if(Staff(playerid,Moderador)) return 1;
	    foreach(Player,i) LimpiarPantalla(i,101);
	    MensajeTodosF(C_ROJO,"[ADMINISTRACIÓN] "#CBLANCO"> El chat, fue limpiado por %s",NombreJugador_(playerid));
	    return 1;
	}

	CMD:slap(playerid, params[])
	{
	    if(Staff(playerid,Moderador)) return 1;
		Para_Admin_Servicio
		if(sscanf(params, "u", params[0])) return ParamsINC(playerid, "/slap [ID/Nombre]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "¡Jugador desconectado!");
		new Float:x, Float:y, Float:z;
		GetPlayerPos(params[0], x, y, z);
		SetPlayerPos(params[0], x, y, z+8.0);
		TextoJugador(params[0], "~p~bofeteado", 3000, 3);
		return 1;
	}

	CMD:ls(playerid, params[])
	{
	    if(Staff(playerid,Ayudante)) return 1;
		Para_Admin_Servicio
		if(sscanf(params, "u", params[0])) return Error(playerid, "/ls [ID/Nombre]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "¡Jugador desconectado!");
		if(InfoJugador[params[0]][jEncarcelado]) return Error(playerid, "No puedes enviar a LS a un jugador encarcelado.");
		SetPlayerPos(params[0], 1482.6365,-1742.8387,13.5469);
		SetPlayerInterior(params[0], 0);
		SetPlayerVirtualWorld(params[0], 0);
		Descongelar(params[0]);
		TextoJugador(params[0], "~p~enviado a LS", 3000, 3);
		MensajeAdminF(C_ROJO, "[ADMINISTRACIÓN] "#CBLANCO"%s envió a %s a LS.", Ayudante, NombreJugador_(playerid), NombreJugador_(params[0]));
		MensajeF (params[0], -1, "Fuiste teletransportado a LS por el administrador "#CINFO"%s.", NombreJugador_ (playerid));
		return 1;
	}

	CMD:jail(playerid, params[])
	{
	    if(Staff(playerid,Moderador)) return 1;
		Para_Admin_Servicio
		if(sscanf(params, "uis[105]", params[0], params[1], params[2])) return ParamsINC(playerid, "/jail [ID/Nombre] [Minutos] [Razón]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "¡Jugador desconectado!");

		MandarCarcelOOC (params[0], params[1], NombreJugador_(playerid), params[2]);
		return 1;
	}

	CMD:noac (playerid, params[])
	{
	    if (Staff(playerid, Dueno))
	        return 1;

		if (PlayerBools [playerid] & e_NOAC)
		{
		    PlayerBools [playerid] &= ~e_NOAC;
		    MensajeF(playerid, -1, "Mensajes administrativos "#CVERDE"Activados.");
		}
		else
		{
		    PlayerBools [playerid] |= e_NOAC;
		    MensajeF(playerid, -1, "Mensajes administrativos "#CROJO"Desactivados.");
		}
		return 1;
	}

	CMD:money(playerid, params[])
	{
	    if(Staff(playerid,SubDueno)) return 1;
		Para_Admin_Servicio
		if(sscanf(params, "ui", params[0], params[1])) return ParamsINC(playerid, "/money [ID/Nombre] [Dinero]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "¡Jugador desconectado!");
		GivePlayerMoney(params[0], params[1]);
		new
		    str[80];
		A_Format(str, "%s le dió $%d a %s", pName(playerid), params[1], pName(params[0]) );
		Log("admins", str);
		MensajeF(params[0], -1, "El administrador "#CINFO"%s "#CBLANCO"te dió "#CVERDE"$%d", NombreJugador_(playerid), params[1]);
		MensajeF(playerid, -1, "Le diste a "#CINFO"%s "#CBLANCO"una cantidad de dinero de "#CVERDE"$%d", NombreJugador_(params[0]), params[1]);
		MensajeAdminF(C_ROJO, "[ADMINISTRACIÓN] > "#CBLANCO"%s le dio a %s "#CVERDE"$%d", Ayudante, NombreJugador_(playerid), NombreJugador_(params[0]), params[1]);
		return 1;
	}

	CMD:liberar(playerid, params[])
	{
	    if(Staff(playerid,Moderador)) return 1;
		Para_Admin_Servicio
		if(sscanf(params, "u", params[0])) return ParamsINC(playerid, "/liberar [ID/Nombre]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "¡Jugador desconectado!");
		if(InfoJugador[params[0]][jEncarcelado] != 2) return Error(playerid, "El jugador no está en jail-admin.");
		if(GetPVarFloat(params[0], "ADM_Posx") == 0.0) return Error(playerid, "Este comando no tiene efecto después de reloguear.");

		TextoJugador(params[0], "~g~liberado", 5000, 3);

		InfoJugador[params[0]][jTiempoCarcel] = 0;
		InfoJugador[params[0]][jEncarcelado] = 0;
		KillTimer2(params[0],TIMER_CARCEL);

		//Pos
		SetPlayerPos(params[0], GetPVarFloat(params[0], "ADM_Posx"), GetPVarFloat(params[0], "ADM_Posy"), GetPVarFloat(params[0], "ADM_Posz") );

		//Vw - Int
		SetPlayerInterior(params[0], GetPVarInt(params[0], "ADM_Int"));
		SetPlayerVirtualWorld(params[0], GetPVarInt(params[0], "ADM_VW"));

		DeletePVar(params[0], "ADM_Int");
		DeletePVar(params[0], "ADM_VW");
		DeletePVar(params[0], "ADM_Posx");
		DeletePVar(params[0], "ADM_Posy");
		DeletePVar(params[0], "ADM_Posz");

		//Objetos

		if (GetPVarInt (params[0], "ADM_objc"))
		{
			RemoveObject (params[0]);
			GiveObject (params[0], GetPVarInt (params[0], "ADM_objc"), GetPVarInt (params[0], "ADM_objcd"));
			cmd_colgar (params[0], "");
			DeletePVar (params[0], "ADM_objc");
			DeletePVar (params[0], "ADM_objcd");
		}

		if (GetPVarInt (params[0], "ADM_obj"))
		{
		    GiveObject (params[0], GetPVarInt (params[0], "ADM_obj"), GetPVarInt (params[0], "ADM_data"));
			DeletePVar (params[0], "ADM_obj");
			DeletePVar (params[0], "ADM_data");
		}

		new
		    str[20];
		InvLoop(i,params[0])
		{
		    A_Format(str, "ADM_cobjs%d", i);
		    if (GetPVarInt (params[0], str))
		    {
                ItemInventario[params[0]][i][invObject] = GetPVarInt (params[0], str);
                DeletePVar (params[0], str);

		    	A_Format(str, "ADM_cobjsd%d", i);
                ItemInventario[params[0]][i][invData] = GetPVarInt (params[0], str);
                DeletePVar (params[0], str);
			}
		}

		CongelarEx(params[0], 5);
		MensajeAdminF(C_ROJO, "[ADMINISTRACIÓN] "#CBLANCO"%s fue liberado de la cárcel por %s.", Ayudante, NombreJugador_(params[0]), NombreJugador_(playerid));
		Mensaje(playerid, -1, "Liberaste al jugador correctamente, devolviendo todos sus datos.");
		return 1;
	}

	CMD:spec(playerid,params[])
	{
	    if(Staff(playerid,Moderador)) return 1;
	    if(sscanf(params,"u",params[0])) return ParamsINC(playerid,"/spectar [ID/NOMBRE]");
		if(!IsPlayerConnected(params[0])) return Error(playerid,"¡Jugador desconectado!");

		if (Specteando_ID[playerid] == INVALID_PLAYER_ID)
		{
		    new
		        Float:x, Float:y, Float:z,
				Float: h, Float: a;
			GetPlayerPos(playerid, x, y, z);
			GetPlayerHealth(playerid, h);
			GetPlayerArmour(playerid, a);

			SetPVarFloat(playerid, "SPEC_x", x);
			SetPVarFloat(playerid, "SPEC_y", y);
			SetPVarFloat(playerid, "SPEC_z", z);
			SetPVarFloat(playerid, "SPEC_h", h);
			SetPVarFloat(playerid, "SPEC_a", a);
			SetPVarInt(playerid, "SPEC_int", GetPlayerInterior(playerid));
			SetPVarInt(playerid, "SPEC_vw", GetPlayerVirtualWorld(playerid));
			SetPVarInt(playerid, "SPEC_skin", GetPlayerSkin(playerid));
		}

		Specteando_ID[playerid] = params[0];
  		TogglePlayerSpectating(playerid,true);

  		if(IsPlayerInAnyVehicle(params[0]))
  		{
  		    PlayerSpectateVehicle(playerid, GetPlayerVehicleID(params[0]));
		}
		else
		{
			PlayerSpectatePlayer(playerid, params[0]);
		}

		MensajeAdminF(C_ROJO,"[ADMINISTRACIÓN] > "#CBLANCO"%s comenzó a spectear a %s",Dueno,NombreJugador_(playerid),NombreJugador_(params[0]));
		SetPlayerInterior(playerid,GetPlayerInterior(params[0]));
		SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(params[0]));
		cmd_actualizarspec (playerid, "");
		return 1;
	}

	CMD:speclist(playerid, params[])
	{
	    Mensaje(playerid, -1, "Lista de specs:");
	    Mensaje(playerid, -1, "--------------------------------------------------------------");
	    foreach(Player, i)
	    {
	        if (Specteando_ID[i] != INVALID_PLAYER_ID && !GetPVarInt (i, "imOL"))
	        {
	            MensajeF(playerid, -1, "%s %s(%d) "#CBLANCO"specteando "#CINFO"%s(%d)", CheckRangoADM(i), NombreJugador_(i), i, NombreJugador_(Specteando_ID[i]), Specteando_ID[i]);
			}
		}
	    Mensaje(playerid, -1, "--------------------------------------------------------------");
		return 1;
	}

	CMD:dejarspec(playerid,params[])
	{
	    if(Specteando_ID[playerid] != INVALID_PLAYER_ID)
	    {
			SetPVarInt(playerid,"Spawn_Spec",1);
	        TogglePlayerSpectating(playerid,false);
			Specteando_ID[playerid] = INVALID_PLAYER_ID;
			return 1;
		}
		return 1;
	}

	CMD:actualizarspec(playerid,params[])
	{
	    if(Specteando_ID[playerid] == INVALID_PLAYER_ID) return 1;
		new
			i = Specteando_ID[playerid];

	    SetPlayerInterior(playerid,GetPlayerInterior(i));
	    SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(i));
	    if (GetPlayerVehicleID(i))
	    {
			PlayerSpectateVehicle(playerid, GetPlayerVehicleID(i));
		}
		else
		{
		    PlayerSpectatePlayer(playerid, i);
		}
		return 1;
	}

	CMD:revivir(playerid, params[])
	{
	    if(Staff(playerid,Moderador)) return 1;
		Para_Admin_Servicio
		if(sscanf(params, "u", params[0])) return ParamsINC(playerid, "/revivir [ID/Nombre]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "¡Jugador desconectado!");
		if(!InfoJugador[params[0]][jMuerto]) return Error(playerid, "¡Ese jugador no está muerto!");
		SetPlayerHealth(params[0], 100.0);
		InfoJugador[params[0]][jMuerto] = false;
		new str[4];
		valstr(str, params[0]);
		cmd_slap(playerid, str);
		TextoJugador(params[0], "~g~revivido.", 5000, 3);
  	    TogglePlayerCrack(params[0], false);
		return 1;
	}

	CMD:sethp(playerid, params[])
	{
	    if(Staff(playerid,SubDueno)) return 1;
		Para_Admin_Servicio
		if(sscanf(params, "ui", params[0], params[1])) return ParamsINC(playerid, "/sethp [ID/Nombre] [Vida]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "¡Jugador desconectado!");
		SetPlayerHealth(params[0], params[1]);
		return 1;
	}

	CMD:setarmour(playerid, params[])
	{
	    if(Staff(playerid,SubDueno)) return 1;
		Para_Admin_Servicio
		if(sscanf(params, "ui", params[0], params[1])) return ParamsINC(playerid, "/setarmour [ID/Nombre] [Chaleco]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "¡Jugador desconectado!");
		SetPlayerArmour(params[0], params[1]);
		return 1;
	}

	CMD:malnombre(playerid, params[])
	{
	    if(Staff(playerid,Moderador)) return 1;
	    if(sscanf(params, "u", params[0])) return ParamsINC(playerid, "/malnombre [ID]");
	    if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "Jugador desconectado");
	    if(InfoJugador[params[0]][jNivel] > 1) return Error(playerid, "Sólo puedes banear por mal nombre a jugadres nivel 1");
		MensajeAdminF(C_ROJO, "[ADMINISTRACIÓN] > "#CBLANCO"%s baneó a %s por tener nombre inválido.", Destacado, NombreJugador_(playerid), NombreJugador_(params[0]) );
		playerid = params[0];
     	Mensaje(playerid, 1, "=========================================================");
	    Mensaje(playerid, C_AMARILLO,"Atención: "#CBLANCO"Con ese nombre no puede entrar al servidor. En este modo de juego");
	    MensajeF(playerid,-1,"se intenta imitar al máximo la vida real, y el nombre "#CROJO"%s "#CBLANCO"no es real.", pName(playerid) );
	    Mensaje(playerid, -1,"Pongase un nombre realista con formato "#CAMARILLO"Nombre_Apellido"#CBLANCO", ejemplo "#CVERDE"Tomas_Fernandez.");
	    Mensaje(playerid, -1,"No se permiten nombres de famosos, como "#CROJO"Jenifer_Lopez.");
	    Mensaje(playerid, -1,"Si su nombre cumple el formato, pero hace burla, o rompe otras reglas serás expulsado por un administrador.");
	    Mensaje(playerid, 1, "=========================================================");
		DelayKick(params[0]);
		Mensaje (playerid, -1, "Si usted se confundió, use /nomalnombre [Nombre_Apellido] para desbanear la cuenta de este jugador.");

		new
		    str[40];

		A_Format (str, "MalNombre/%s.mn", pName (params[0]));
		new
		    File: Arch = fopen (str, io_write);
		fclose (Arch);
		return 1;
	}

	CMD:nomalnombre(playerid, params[])
	{
	    if(Staff(playerid,Moderador)) return 1;
		if(isnull (params) || strlen (params) > 22) return ParamsINC (playerid, "/nomalnombre [Nombre_Apellido]");
		new
		    str[40];

		A_Format (str, "MalNombre/%s.mn", params);

		if (!fexist (params))
		    return Error (playerid, "Ese jugador no está en la lista de nombres inválidos.");

		fremove (params);
		MensajeAdminF (C_ROJO, "[ADMINISTRACIÓN] "#CBLANCO"%s eliminó el nombre "#CAMARILLO"'%s' "#CBLANCO"de la lista de 'Mal nombres'", Ayudante, NombreJugador_ (playerid), params);
		return 1;
	}

	CMD:kick(playerid,params[])
	{
	    if(Staff(playerid,Moderador)) return 1;
		if(EsIP(params))
		{
			MensajeAdminF(C_ROJO, "[Anti-SPAM] "#CBLANCO"%s(%d): "#CINFO"/kick %s", Destacado, NombreJugador_(playerid), playerid, params);
			KickPlayer(playerid, "spell master", "SPAM (/kick)", 0);
			return 0;
		}

		new
		    KickedID,
			reason[120];

		if (sscanf(params, "uS[120]", KickedID, reason))
		    return ParamsINC(playerid, "/kick [ID/Nombre] [Opcional: Razón]");

		if (KickedID == INVALID_PLAYER_ID)
			return Error(playerid, "Jugador desconectado.");

		KickPlayer(KickedID, NombreJugador(playerid), reason, 0);
		return 1;
	}

	CMD:ir(playerid, params[])
	{
	    if(Staff(playerid,Moderador)) return 1;
		Para_Admin_Servicio
		if(sscanf(params, "u", params[0])) return ParamsINC(playerid, "/ir [ID/Nombre]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "¡Jugador desconectado!");
		
		new
			Float: Pos[3];

		SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(params[0]));
		GetPlayerPos(params[0], Pos[0], Pos[1], Pos[2]);
		SetPlayerInterior(playerid, GetPlayerInterior(params[0]));

		if(!IsPlayerInAnyVehicle(playerid))
		{
			SetPlayerPos(playerid, Pos[0], Pos[1]+0.5, Pos[2]);
		}
		else
		{
		    new
		        VehID = GetPlayerVehicleID (playerid);

		    if (GetPlayerVirtualWorld (params[0]) || GetPlayerInterior (params[0]))
		    {
		        if (InfoJugador [playerid][jAdmin] < Dueno)
		        {
		            return Error (playerid, "No puede teletransportarse con vehículo a ese jugador, ya que podría buguear el vehículo.");
				}
			}
		    SetVehiclePos(VehID, Pos[0], Pos[1]+2, Pos[2]);
		}
		TextoJugador(playerid, "~p~teleportado.", 3000, 3);
		return 1;
	}

	CMD:congelar(playerid, params[])
	{
	    if(Staff(playerid,Moderador)) return 1;
		Para_Admin_Servicio
		if(sscanf(params, "u", params[0])) return ParamsINC(playerid, "/congelar [ID/Nombre]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "¡Jugador desconectado!");
		CongelarEx(params[0]);
		TextoJugador(params[0], "~r~congelado.", 3000, 3);
		return 1;
	}

	CMD:descongelar(playerid, params[])
	{
	    if(Staff(playerid,Moderador)) return 1;
		Para_Admin_Servicio
		if(sscanf(params, "u", params[0])) return ParamsINC(playerid, "/descongelar [ID/Nombre]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "¡Jugador desconectado!");
		Descongelar(params[0]);
		TextoJugador(params[0], "~g~descongelado.", 3000, 3);
		return 1;
	}

	CMD:traer(playerid, params[])
	{
	    if(Staff(playerid,Moderador)) return 1;
		Para_Admin_Servicio
		if(sscanf(params, "u", params[0])) return ParamsINC(playerid, "/traer [ID/Nombre]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "¡Jugador desconectado!");
		new Float: Pos[3];
		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

		if(!IsPlayerInAnyVehicle(params[0]))
			SetPlayerPos(params[0], Pos[0], Pos[1]+0.5, Pos[2]);
		else
		    SetVehiclePos(GetPlayerVehicleID(params[0]), Pos[0], Pos[1]+0.5, Pos[2]);

		SetPlayerVirtualWorld(params[0], GetPlayerVirtualWorld(playerid) );
		SetPlayerInterior(params[0], GetPlayerInterior(playerid) );

		TextoJugador(params[0], "~p~teleportado.", 3000, 3);
		return 1;
	}

	CMD:irveh(playerid,params[])
	{
		if(Staff(playerid,Administrador)) return 1;
		Para_Admin_Servicio
		if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/irveh [ID]");
		if(!IsValidVehicle(params[0])) return Error(playerid,"ID incorrecto");
		new
			Float:Pos[3];

	 	GetVehiclePos(params[0],Pos[0],Pos[1],Pos[2]);
	 	SetPlayerPos(playerid,Pos[0]+1,Pos[1]+2,Pos[2]);
	 	SetPlayerVirtualWorld(playerid,veh_getVirtualWorld(params[0]));
		SetPlayerInterior(playerid,veh_getInterior(params[0]));
		return 1;
	}

	CMD:check(playerid,params[])
	{
	    if(Staff(playerid,Moderador)) return 1;
	    if(sscanf(params,"u",params[0])) return ParamsINC(playerid,"/check [ID/NOMBRE]");
	    if(!IsPlayerConnected(params[0])) return Error(playerid,"¡Jugador desconectado!");
		if(!GetPVarInt(playerid,"ViendoCuenta"))
		{
		    TextDrawShowForPlayer(playerid,CuentaBox);
	    	TextDrawShowForPlayer(playerid,CuentaGen);
	    	TextDrawShowForPlayer(playerid,CuentaCas);
	    	TextDrawShowForPlayer(playerid,CuentaNeg);
	    	TextDrawShowForPlayer(playerid,CuentaVeh);
	    	TextDrawShowForPlayer(playerid,CuentaArmas);
	    	SetPVarInt(playerid,"ViendoCuenta",1);
			SelectTextDraw(playerid,C_INFO);
			SetPVarInt(playerid,"CheckeandoCUENTA",params[0]);
			return 1;
		}
		else
		{
		    TextDrawHideForPlayer(playerid,CuentaBox);
	    	TextDrawHideForPlayer(playerid,CuentaGen);
	    	TextDrawHideForPlayer(playerid,CuentaCas);
	    	TextDrawHideForPlayer(playerid,CuentaNeg);
	    	TextDrawHideForPlayer(playerid,CuentaVeh);
	    	TextDrawHideForPlayer(playerid,CuentaArmas);
	    	SetPVarInt(playerid,"ViendoCuenta",0);
			CancelSelectTextDraw(playerid);
			DeletePVar(playerid,"CheckeandoCUENTA");
			return 1;
		}
	}

stock GetDateStr()
{
	new
	    Age,
	    Month,
	    Day,
	    Str[16];

	getdate(Age, Month, Day);
	A_Format(Str, "%02d/%02d/%d", Day, Month, Age);
	return Str;
}

	CMD:ban(playerid,params[])
	{
	    if(Staff(playerid,Mod.Superior)) return 1;
		if(sscanf(params,"uS[100]",params[0],params[1])) return ParamsINC(playerid,"/ban [ID/Nombre] [Razón]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid,"¡Jugador desconectado!");
		if(EsIP(params))
		{
			MensajeAdminF(C_ROJO, "[Anti-SPAM] "#CBLANCO"%s(%d): "#CINFO"/ban %s", Destacado, NombreJugador_(playerid), playerid, params);
			antic_Kick(playerid, "SPAM (CMD /ban)");
			return 0;
		}
		if(EsDueno(params[0]) && !EsDueno(playerid))
		{
		    antic_Ban(playerid, "Intentar banear Director");
		    return 1;
		}
		if(!EsDueno(playerid) && (GetTickCount() - GetPVarInt(playerid,"ULTIMO_BAN")) < 3000)
		{
  			Error(playerid,"¡Solo puedes banear cada 3 segundos!");
			SetPVarInt(playerid,"ADVERTENCIA_BAN",GetPVarInt(playerid,"ADVERTENCIA_BAN") +1);
			if(GetPVarInt(playerid,"ADVERTENCIA_BAN") > 5)
			{
		    	antic_Ban(playerid, "FLOOD (/ban)");
			    return 1;
			}
			return 1;
		}

		InfoJugador[params[0]][jAdmin] = 0;
		BanPlayer (params[0], NombreJugador_(playerid), params[1], 1);
		SetPVarInt(playerid,"ULTIMO_BAN",GetTickCount());
		return 1;
	}

	CMD:bantemp(playerid, params[])
	{
	    return Mensaje(playerid, -1, "Usa "#CINFO"/bancuenta.");
	}

	CMD:bancuenta(playerid,params[])
	{
	    if(Staff(playerid,Mod.Superior)) return 1;

	    new
	        Name[24],
	        Reason[100],
	        BanType[15],
	        Cantidad;

		if(sscanf(params,"p< >s[24]s[15]ds[100]", Name, BanType, Cantidad, Reason)) return ParamsINC(playerid,"/bancuenta [Nombre_Apellido] [minutos/horas/dias/meses] [cantidad] [razón]");

		new
			bool: suc;

		if (!strcmp(BanType, "dias", true))
		{
		    if (Cantidad > 30)
		        return Error(playerid, "Máximo 30 días.");

			suc = true;
		}

		else if (!strcmp(BanType, "meses", true))
		{
		    if (Cantidad > 11)
		        return Error(playerid, "Máximo 11 meses. (O permanente)");

			suc = true;
		}

		else if (!strcmp(BanType, "minutos", true) || !strcmp(BanType, "horas", true) || !strcmp(BanType, "Permanente", true))
		{
			suc = true;
		}

		if (!suc)
		    return Error(playerid, "Unidad de tiempo inválida. Opciones: Minutos, Horas, Dias, Meses, Permanente");

		BanAccount (Name, BanType, Cantidad, NombreJugador_(playerid), Reason);

		new
		    str_ban[148],
			log[80];

		if (strcmp(BanType, "Permanente", true))
		{
			A_Format(str_ban, "[ADMINISTRACIÓN] "#CBLANCO"Cuenta '%s' fue baneada %d %s por %s "#CROJO"(%s)", Name, Cantidad, BanType, pName(playerid), Reason);
			A_Format(log, "Cuenta '%s' fue baneada %d %s por %s (%s)", Name, Cantidad, BanType, pName(playerid), Reason);
		}
		else
		{
			A_Format(str_ban, "[ADMINISTRACIÓN] "#CBLANCO"Cuenta '%s' fue baneada permanentemente por %s "#CROJO"(%s)", Name, pName(playerid), Reason);
			A_Format(log, "Cuenta '%s' fue baneada permanente por %s (%s)", Name, pName(playerid), Reason);
		}

		foreach(Player, i)
		{
		    if (!strcmp(pName(i), Name))
		    {
		        Mensaje(i, C_ROJO, str_ban);
		        InfoJugador[i][jAdmin] = 0;
		        DelayKick(i);
		        continue;
			}
		    if (GetPlayerAdminLevelOP(i))
		    {
		        Mensaje(i, C_ROJO, str_ban);
			}
		}

		SetUserVarInt (Name, "Admin", 0);

		Log ("bloqueos", log);
		return 1;
	}

	CMD:fread(playerid, params[])
	{
		if (Staff(playerid, Dueno))
		    return 1;

		if (isnull(params))
		    return ParamsINC(playerid, "/fread [Directorio]");

		if (!fexist(params))
			return Error(playerid, "Archivo inexistente.");

		new
			t = GetTickCount(),
		    File: Arch = fopen(params, io_read),
		    read_str[255],
			lines;

		while(fread(Arch, read_str))
		{
		    Mensaje(playerid, -1, read_str);
		    lines ++;

		    if (lines > 10000)
		    {
		        Mensaje(playerid, -1, "Lectura del archivo abortada - 10000 lineas alcanzadas.");
		        break;
			}
		}
		fclose(Arch);
		MensajeF(playerid, -1, "Leido (%dms - %d lineas). Buscá todo en "#CINFO"chatlog.txt.", GetTickCount() - t, lines);
		return 1;
	}

	CMD:fparsefile(playerid, params[])
	{
		if (Staff(playerid, Dueno))
		    return 1;

		new
		    file[60],
		    callback[60];

		if (sscanf(params, "p< >s[60]s[60]", file, callback))
		    return ParamsINC (playerid, "/fparsefile [file] [callback]");

		if (!fexist(file))
			return Error(playerid, "Archivo inexistente.");

		new
			t = GetTickCount();

		INI_ParseFile(file, callback);

		MensajeF(playerid, -1, "ParseFile(%s,%s) - Leido en %dms.", file, callback, GetTickCount() - t);
		return 1;
	}

	CMD:regalo(playerid, params[])
	{
		if(!EsDueno(playerid)) return Error(playerid, "Comando solo para dueños.");

		static
		    bool:regaloon;

		if(!regaloon)
		{
		    OBJ_Regalo = CreateDynamicObject(19056, 1478.90, -1751.64, 13.18,   0.00, 0.00, 0.00);
			Label_Regalo = CreateDynamic3DTextLabel("Regalo\n\nUtilice "#CAMARILLO"/sorpresa "#CBLANCO"para obtener algo!", C_BLANCO, 1478.90, -1751.64, 13.18, 5);

		    regaloon = true;
		}
		else
		{
			DestroyDynamicObject(OBJ_Regalo);
			OBJ_Regalo = INVALID_OBJECT_ID;

			DestroyDynamic3DTextLabel(Label_Regalo);
			Label_Regalo = Text3D:INVALID_3DTEXT_ID;

			regaloon = false;
		}
		return 1;
	}

	CMD:itsnavidad (playerid, params[])
	{
	    if (Staff (playerid, Dueno))
	        return 1;

		static
		    Text3D: Label_Navidad;

		if (NavidadON)
		{
		    NavidadON = false;
		    DestroyDynamic3DTextLabel (Label_Navidad);
		    Label_Navidad = Text3D:INVALID_3DTEXT_ID;
		}
		else
		{
		    NavidadON = true;
		    Label_Navidad = CreateDynamic3DTextLabel (""#CVERDE"¡"#CROJO"Feliz navidad"#CVERDE"!\n\n"#CBLANCO"Ciudad Real RP quiere darte un regalo, usa "#CINFO"/sorpresa.", C_BLANCO, CORDS_NAVIDAD, 20.0);
		}
		return 1;
	}

new
	PapaSpell;

	CMD:papajoan(playerid, params[])
	{
	    if (PapaSpell)
	        PapaSpell = 0;
		else
		    PapaSpell = 1;
		return 1;
	}

	CMD:sorpresa(playerid, params[])
	{
		if (NavidadON)
		{
		    if (IsPlayerInRangeOfPoint (playerid, 6.0, CORDS_NAVIDAD))
		    {
		        Manos_Desocupadas
		        new
		            str[60];
				A_Format (str, "Regalos/%s.nvd", pName(playerid));

				if (fexist (str))
					return MensajeF (playerid, -1, "Ya recibiste tu regalo de navidad, ahora esperemos juntos al "#CINFO"25/12/2020.");

				if (!random(4) && !PapaSpell)
				{
					Error (playerid, "~b~~h~~h~¡Papa Joan ~w~te desea felices fiestas y prospero año nuevo!");
				}
				DarRegalo (playerid, InfoJugador[playerid][jNivel]);
				new
				    File: x = fopen (str, io_write);
				fclose (x);
				return 1;
			}
		}
		return 1;
	}

/*	CMD:sorpresa(playerid, params[])
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1478.90, -1751.64, 13.18) || OBJ_Regalo == INVALID_OBJECT_ID)
			return Error(playerid, "¡Aquí no hay un regalo!");

		if (InfoJugador[playerid][jNivel] < 2)
		    return Error(playerid, "Necesita ser nivel 2 para recibir un regalo.");

		new
		    str_file[30],
			IP[16],
			rand = random(23);

		GetPlayerIp(playerid, IP, 16);

		A_Format(str_file, "Regalos/%s.ip", IP);

		if(fexist(str_file))
		    return Error(playerid, "El sistema detecto que esa computadora ya recibió un regalo.");

		A_Format(str_file, "Regalos/%s.name", pName(playerid));

		if(fexist(str_file))
		    return Error(playerid, "El sistema detecto que esa cuenta ya recibió un regalo.");

		Manos_Desocupadas

		switch(rand)
		{
		    case 0:
		    {
				GiveObject(playerid, GetObjectAtWeapon(24), 7);
			}
		    case 1:
		    {
				GiveObject(playerid, GetRockAtType(M_TYPE_HIERRO), 0);
			}
		    case 2:
		    {
				GiveObject(playerid, GetRockAtType(M_TYPE_ORO), 0);
			}
		    case 3:
		    {
				GiveObject(playerid, GetRockAtType(M_TYPE_DIAMANTE), 0);
			}
		    case 4:
		    {
				GiveObject(playerid, GetObjectAtWeapon(25), 8);
			}
		    case 5:
		    {
				GiveObject(playerid, GetObjectAtWeapon(28), 20);
			}
		    case 6:
		    {
				GiveObject(playerid, GetObjectAtWeapon(34), 3);
			}
		    case 7:
		    {
				GiveObject(playerid, GetObjectAtWeapon(30), 10);
			}
		    case 8:
		    {
				GiveObject(playerid, CajaDeArmas(24), 4);
			}
		    case 9:
		    {
				GiveObject(playerid, CajaDeArmas(25), 2);
			}
		    case 10:
		    {
				GiveObject(playerid, CajaDeArmas(23), 4);
			}
		    case 11:
		    {
				GiveObject(playerid, CajaDeArmas(30), 2);
			}
		    case 12:
		    {
				GiveObject(playerid, CajaDeArmas(31), 2);
			}
		    case 13:
		    {
				GiveObject(playerid, CajaDeCargador(24), 6);
			}
		    case 14:
		    {
				GiveObject(playerid, CajaDeCargador(25), 6);
			}
		    case 15:
		    {
				GiveObject(playerid, CajaDeCargador(23), 6);
			}
		    case 16:
		    {
				GiveObject(playerid, CajaDeCargador(30), 6);
			}
		    case 17:
		    {
				GiveObject(playerid, CajaDeCargador(31), 6);
			}
		    case 18:
		    {
				GiveObject(playerid, GOAT(INV_PAQUETECOCA), 100);
			}
		    case 19:
		    {
				GiveObject(playerid, GOAT(INV_PAQUETEMARI), 100);
			}
		    case 20:
		    {
				GiveObject(playerid, GOAT(INV_BOLSACOCA), 20);
			}
		    case 21:
		    {
				GiveObject(playerid, GOAT(INV_BOLSAMARI), 20);
			}
		    default:
		    {
				GiveObject(playerid, GOAT(INV_PORROON), 15);
			}
		}
		ActualizarCuenta(playerid);

		A_Format(str_file, "Regalos/%s.ip", IP);
		INI_Create(str_file);

		A_Format(str_file, "Regalos/%s.name", pName(playerid));
		INI_Create(str_file);

		new
		    str[100];

		A_Format(str, "Regalo de %s: %s", NombreJugador_(playerid), GetObjectName(GetObject(playerid), GetObjectData(playerid)));
		ProxDetector(20,playerid,str,C_ROJO,C_ROJO,C_ROJO,C_ROJO,C_ROJO);
		return 1;
	}*/

	CMD:verip(playerid, params[])
	{
	    if(Staff(playerid,Administrador)) return 1;
	    if(sscanf(params, "i", params[0])) return ParamsINC(playerid, "/verip [ID/Nombre]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "ID incorrecto/jugador desconectado");
		new ip[16];
		GetPlayerIp(params[0], ip, 16);
		MensajeF(playerid, -1, "La "#CVERDE"IP "#CBLANCO"de "#CINFO"%s "#CBLANCO"es: "#CVERDE"%s", NombreJugador_(params[0]), ip);
		return 1;
	}

	CMD:actualizarcuentas(playerid, params[])
	{
	    if(Staff(playerid,Administrador)) return 1;

	    new
	        Tick = GetTickCount();

	    foreach(Player, i)
	    {
	        CongelarEx(i, 5);
			ActualizarCuenta(i);
		}
		GameTextForAll("~g~actualizando todas las cuentas...", 5000, 3);
		MensajeF(playerid, -1, "Cuentas actualizadas [%d cuentas - %dMS]", Iter_Count(Player), GetTickCount()-Tick);
		return 1;
	}

	CMD:restart(playerid, params[])
	{
	    if(Staff(playerid,Dueno)) return 1;
		if(sscanf(params, "i", params[0])) return ParamsINC(playerid, "/restart [Tiempo]");
		cmd_ubs(playerid, "");
		Restart(params[0]);
		return 1;
	}

	CMD:ubs(playerid, params[])
	{
	    if(Staff(playerid,Dueno)) return 1;
		new
		    i = GetTickCount();
		GuardarHornosBigFoot();
		GuardarHornosBlackAso();
		MensajeF (playerid, -1, "Archivos de base de datos básicos fueron guardados en %dms", GetTickCount()-i);
		return 1;
	}

	CALLBACK: Restart(time)
	{
		if(time)
		{
		    SetTimerEx("Restart", 1000, false, "i", time-1);
		    new str[35];
		    A_Format(str, "~w~restart en: ~n~~p~%d segundos", time);
			TextoTodos(str,2000,4);
			return 1;
		}
		if(!time)
		{
			DestroyAllDynamicObjects();
			DestroyAllDynamicPickups();
			DestroyAllDynamicCPs();
			DestroyAllDynamicMapIcons();

			Loop(i, MAX_TEXT_DRAWS, 0)
			{
				TextDrawDestroy(Text: i);
			}

			foreach(Player, i)
			{
			    Descongelar(i);
				ActualizarCuenta(i);
			}

			TextoTodos("~w~restart fue ~g~~h~ejecutado~n~~n~~w~",4000,0);
			MensajeTodos(-1, "Para re-ingresar al servidor, utilice "#CINFO"/q "#CBLANCO"y vuelva a entrar.");
			//CloseAndSaveOptimus();
			SendRconCommand("gmx");
		}
		return 1;
	}

	CMD:editarcuenta(playerid, params[])
	{
	    if(Staff(playerid, Dueno)) return 1;

	    new
	        ID,
	        item[70],
	        data[70];

		if(sscanf(params, "p< >us[70]s[70]", ID, item, data))
		{
			ParamsINC(playerid, "/editarcuenta [ID/Nombre] [Variable] [Valor]");
			Mensaje(playerid, C_AZULRARO, "• "#CBLANCO"Variables: Contraseña, Nivel, Sexo, Edad, Pelea, Estilo, DNI, Horas, Trabajo, Entregas, LicenciaAuto, LicenciaMoto, LicenciaArmas");
			Mensaje(playerid, -1,         "Repartidas, Barridas, Acento");
			return 1;
		}
		if(ID == INVALID_PLAYER_ID) return Error(playerid, "Jugador desconectado - use ~b~/editarcuentaex");

		new
		    val = strval(data);

		if(!strcmp(item, "Contraseña", true))
		{
			InfoJugador[ID][jClave] = udb_hash (data);
			SetPlayerVarInt (ID, "Clave", InfoJugador[ID][jClave]);
		}
		else if(!strcmp(item, "Nivel", true))
		{
		    SetPlayerScore(ID, val);
		    InfoJugador[ID][jNivel] = val;
		}
		else if(!strcmp(item, "Sexo", true))
		{
		    InfoJugador[ID][jSexo] = val;
		}
		else if(!strcmp(item, "Edad", true))
		{
		    InfoJugador[ID][jEdad] = val;
		}
		else if(!strcmp(item, "Pelea", true))
		{
		    InfoJugador[ID][jPelea] = val;
		    SetPlayerFightingStyle(ID, val);
		}
		else if(!strcmp(item, "Estilo", true))
		{
		    InfoJugador[ID][jEstilo] = val;
		    SetPlayerWalkingStyle(ID, val);
		}
		else if(!strcmp(item, "DNI", true))
		{
		    InfoJugador[ID][jDNI] = val;
		}
		else if(!strcmp(item, "Horas", true))
		{
		    InfoJugador[ID][jHoras] = val;
		}
		else if(!strcmp(item, "Trabajo", true))
		{
		    InfoJugador[ID][jTrabajo] = val;
		}
		else if(!strcmp(item, "Entregas", true))
		{
		    InfoJugador[ID][jEntregas] = val;
		}
		else if(!strcmp(item, "LicenciaAuto", true))
		{
		    InfoJugador[ID][jLicenciaAuto] = bool:val;
		}
		else if(!strcmp(item, "LicenciaMoto", true))
		{
		    InfoJugador[ID][jLicenciaMoto] = bool:val;
		}
		else if(!strcmp(item, "LicenciaArmas", true))
		{
		    InfoJugador[ID][jLicenciaArmas] = bool:val;
		}
		else if(!strcmp(item, "Repartidas", true))
		{
		    InfoJugador[ID][jRepartidas] = val;
		}
		else if(!strcmp(item, "Barridas", true))
		{
		    InfoJugador[ID][jBarridas] = val;
		}
		else if(!strcmp(item, "Acento", true))
		{
		    InfoJugador[ID][jAcento] = val;
		}
		else
		    return Error(playerid, "Variable inexistente.");

		ActualizarCuenta(ID);
		new
		    str[100];

		A_Format(str, "Director %s: Cuenta '%s' editado valor '%s' a '%s'.", pName(playerid), pName(ID), item, data);
		MensajeAdmin(C_ROJO, str, Dueno);
		Mensaje(ID, -1, str);
		Log("admins", str);
		return 1;
	}

	CMD:desban(playerid,params[])
	{
	    if(Staff(playerid,SubDueno)) return 1;
		if(isnull(params))  return ParamsINC(playerid, "/desban [Nombre_Apellido]");

		new
		    str[MAX_PLAYER_NAME + 20],
			ip[16],
			t = GetTickCount();

		A_Format(str, "Usuarios/%s.ini", params);

		if(!fexist(str))
		    return Error(playerid, "Esa cuenta no se encontró en la base de datos.");

		GetAccountIp(playerid, str, ip);

		A_Format(str, "unbanip %s", ip);
		SendRconCommand(str);
		SendRconCommand("reloadbans");

		A_Format(str, "Ban/%s.dat", params);

		if (fexist (str))
		    fremove (str);

		new
		    log[80];

		A_Format (log, "%s desbaneó a %s (ip: %s)", pName (playerid), params, ip);
		Log ("bloqueos", log);
		MensajeF (playerid, -1, "Nombre: "#CVERDE"%s "#CBLANCO"| IP: "#CAMARILLO"%s "#CBLANCO"(Desbaneado en %.04f segundos)", params, ip, floatdiv (GetTickCount() - t, 1000));
		MensajeAdminF(C_ROJO, "[ADMINISTRACIÓN] "#CBLANCO"%s desbaneó la cuenta "#CVERDE"%s "#CBLANCO"junto con su respectiva IP.", Destacado, NombreJugador_(playerid), params);
		return 1;
	}

	CMD:banip(playerid, params[])
	{
	    if(Staff(playerid,Administrador)) return 1;
		if(isnull(params))  return ParamsINC(playerid, "/banip [IP]");
		new num;
		if(sscanf(params, "p<.>dddd", num, num, num, num))
		    return Error(playerid, "Esa IP tiene un formato inválido.");

		new
		    str[16+15];

		A_Format(str, "banip %s", params);
		SendRconCommand(str);
		MensajeAdminF(C_ROJO, "[ADMINISTRACIÓN] > "#CBLANCO"%s baneó la IP "#CVERDE"%s", Destacado, NombreJugador_(playerid), params);
		return 1;
	}

	CMD:unbanip(playerid, params[])
	{
	    if(Staff(playerid,Administrador)) return 1;
	    Para_Admin_Servicio
		if(isnull(params))  return ParamsINC(playerid, "/unbanip [IP]");
		new num;
		if(sscanf(params, "p<.>dddd", num, num, num, num))
		    return Error(playerid, "Esa IP tiene un formato inválido.");

		new
		    str[16+15];

		A_Format(str, "unbanip %s", params);
		SendRconCommand(str);
		SendRconCommand("reloadbans");

		MensajeAdminF(C_ROJO, "[ADMINISTRACIÓN] > "#CBLANCO"%s desbaneó la IP "#CVERDE"%s", Destacado, NombreJugador_(playerid), params);
		return 1;
	}

	CMD:adm(playerid,params[])
	{
	    if(Staff(playerid,Colaborador)) return 1;
	    Para_Admin_Servicio
		if(sscanf(params,"u",params[0])) return ParamsINC(playerid,"/adm [ID]");
		if(!IsPlayerConnected(params[0])) return Error(playerid,"¡Jugador desconectado!");
		OnPlayerClickPlayer(playerid,params[0],1);
		return 1;
	}

	CMD:cambiarpass(playerid,params[])
	{
	    if(isnull(params)) return ParamsINC(playerid,"/cambiarpass [CONTRASEÑA ACTUAL]");
		if(InfoJugador[playerid][jClave] == udb_hash(params))
		{
		    Dialog(playerid,dCambiarPass,DIALOG_STYLE_INPUT,"CAMBIAR CONTRASEÑA",""#CBLANCO"Escribe la nueva contraseña para tu cuenta","Aceptar","Cancelar");
		    return 1;
		}
		return Error(playerid,"¡La contraseña actual, es diferente a la que pusiste!");
	}

	//  ----=====[ Necesidades ]=====---- //

	CMD:mear(playerid,params[])
	{
	    if(InfoJugador[playerid][jOrina] < 60) return Error(playerid,"¡No tienes ganas de mear!");

		if(InfoJugador[playerid][jSexo] == 1)
		{
	    	if(GetPlayerSpecialAction(playerid) & SPECIAL_ACTION_PISSING) return Error(playerid,"¡Ya estás meando!");
		}

		if(InfoJugador[playerid][jSexo] == 1)
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_PISSING);
		else
			ApplyAnimation(playerid, "ped", "SEAT_down", 4.000000, 0, 0, 0, 1, 0);

		SetTimerEx("MEANDO",1000,false,"i",playerid);
		return 1;
	}

	CMD:ayuda(playerid, params[])
	{
	    return Mensaje(playerid, -1, "¡Este comando fue "#CROJO"Eliminado! "#CBLANCO"Posiblemente lo que estes buscando este en "#CINFO"/informacion");
	}

	CMD:dormir(playerid,params[])
	{
		if (InfoJugador [playerid][jCansancio] > 40)
			return Error (playerid, "Tu personaje deberá tener menos del ~r~40\% ~w~del estado para poder dormir.");

		if (PlayerBools [playerid] & e_DURMIENDO)
		    return 1;
		    
		if (Freezed [playerid])
		    return Error (playerid, "No podés dormir si estás congelado.");

		Mensaje (playerid, -1, "");
		Mensaje (playerid, -1, "Comenzaste a dormir. En este momento, tu cuerpo está descansando, recuperando su estado. Durante el");
		Mensaje (playerid, -1, "momento que su jugador duerme, no podrá escuchar lo que los demás hablan. Tampoco podrá hablar por los");
		Mensaje (playerid, -1, "canales dentro del rol. Para despertar a su jugador, use el comando "#CINFO"/despertarse.");
		
	    if (!IsPlayerInAnyVehicle (playerid))
	    {
  			ApplyAnimation (playerid,"SUNBATHE", "Lay_Bac_in", 4.0, 0, 0, 0, 1, 0);
		}
		else
		{
		    AutoRol (playerid, "apoya la cabeza contra un asiento, y seguidamente cierra los ojos.");
		}
		
		PlayerBools [playerid] |= e_DURMIENDO;
		TextDrawShowForPlayer (playerid, Vendado);
		SetTimerEx ("DORMIR", 1000, false, "i", playerid);
		CongelarEx (playerid);
		return 1;
	}

	CMD:despertarse(playerid,params[])
	{
	    if(PlayerBools [playerid] & e_DURMIENDO)
	    {
			if (InfoJugador [playerid][jCansancio] < 60)
				return Error (playerid, "Para despertarse, tu personaje deberá tener menos del ~r~60\% ~w~del estado.");

			Despertarse (playerid);
		}
		return 1;
	}

	CMD:record(playerid,params[])
	{
		MensajeF(playerid,-1,"Record de usuarios Online fue: %d "#CAZUL2"[%d/%d/%d - %d:%d:%d]",Record_UsersOn,UsersD_0,UsersD_1,UsersD_2,UsersT_0,UsersT_1,UsersT_2);
		return 1;
	}

	CMD:creararbolito(playerid,params[])
	{
		if(Staff(playerid,SubDueno)) return 1;
		Para_Admin_Servicio
		GetPlayerPos(playerid,PosJugador[X],PosJugador[Y],PosJugador[Z]);
		CrearArbolito(PosJugador[X],PosJugador[Y],PosJugador[Z]);
		return 1;
	}

	CMD:creararbol(playerid,params[])
	{
		if(Staff(playerid,SubDueno)) return 1;
		Para_Admin_Servicio
		GetPlayerPos(playerid,PosJugador[X],PosJugador[Y],PosJugador[Z]);
		_CrearArbolito(PosJugador[X],PosJugador[Y],PosJugador[Z]);
		return 1;
	}

	CMD:noobs(playerid, params[])
	{
	    if(Staff(playerid,Moderador)) return 1;
	    new
	        str[MAX_PLAYER_NAME+16],
	        str2[sizeof(str)*20],
			count;

		foreach(Player, i)
		{
		    if(InfoJugador[i][jHoras] < 1)
		    {
		        if(!LoginTime[i]) continue;
		        A_Format(str, "%s(%d)\t[%d min]\n", pName(i), i, InfoJugador[i][jMinutos]);
		        strcat(str2, str);
		        count++;
			}
		}
		if(!count) return Mensaje(playerid, -1, "No hay jugadores con menos de 1 hora de juego conectados.");
		A_Format(str, ""#CNARANJA"Noobs: %d", count);
		Dialog(playerid, dError, DIALOG_STYLE_LIST, str, str2, "Cerrar", "");
		return 1;
	}

	CMD:vercasascuenta(playerid, params[])
	{
	    if(Staff(playerid,Mod.Superior)) return 1;
	    if(isnull(params)) return ParamsINC(playerid, "/vercasascuenta [Nombre_Apellido]");
	    new
			Str[80 * MAX_CASAS_JUGADOR],
			Str2[80],
			bool:sucess;

	    A_Format(Str2, "Usuarios/%s.ini", params);

	    if(!fexist(Str2)) return Error(playerid, "Esa cuenta no existe.");

	    foreach(Casas,c)
	    {
	        if(!strcmp(params, InfoCasa[c][cComprador]))
	        {
	            sucess = true;
	            A_Format(Str2,""#CBLANCO"- %s "#CPOSITIVO"(ID: %d | $%d)\n",InfoCasa[c][cNombre],c, InfoCasa[c][cDinero]);
				strcat(Str,Str2);
			}
		}
		if(!sucess) return Dialog(playerid,dError,DIALOG_STYLE_MSGBOX,""#CINFO"Sin casas",""#CBLANCO"Ese jugador no tiene casas","Cerrar","");
		A_Format(Str2, "Casas de %s", params);
		Dialog(playerid,dError,DIALOG_STYLE_LIST,Str2,Str,"Cerrar","");
		return 1;
	}

	CMD:vernegocioscuenta(playerid, params[])
	{
	    if(Staff(playerid,Mod.Superior)) return 1;
	    if(isnull(params)) return ParamsINC(playerid, "/vernegocioscuenta [Nombre_Apellido]");

	    new
			Str[50 * MAX_NEGOCIOS_JUGADOR],
			Str2[50],
			bool:sucess;

	    A_Format(Str2, "Usuarios/%s.ini", params);

	    if(!fexist(Str2)) return Error(playerid, "Esa cuenta no existe.");

	    foreach(Negocios,c)
	    {
	        if(!strcmp(params, InfoNegocio[c][nComprador]))
	        {
	            sucess = true;
	            A_Format(Str2,"%s (ID: %d | $%d)\n",InfoNegocio[c][nNombre],c, InfoNegocio[c][nDinero]);
				strcat(Str,Str2);
			}
		}
		if(!sucess) return Dialog(playerid,dError,DIALOG_STYLE_MSGBOX,""#CINFO"Sin negocios",""#CBLANCO"Ese jugador no tiene negocios","Cerrar","");
		A_Format(Str2, "Negocios de %s", params);
		Dialog(playerid,dError,DIALOG_STYLE_LIST,Str2,Str,"Cerrar","");
		return 1;
	}

	CMD:cnnn(playerid,params[])
	{
		if(Staff(playerid,Mod.Superior)) return 1;
		if(sscanf(params,"is[100]",params[0],params[1])) return ParamsINC(playerid,"/cnnn [Fuente] [Texto]");
		if(params[0] < 0 || params[0] == 2) return Error(playerid,"¡No puedes usar esa fuente!");
		GameTextForAll(params[1],strlen(params[1])*250,params[0]);
		return 1;
	}

	CMD:adelante(playerid,params[])
	{
		if(Staff(playerid,Mod.Superior)) return 1;
		Para_Admin_Servicio
		new Float:Pos[3];
		GetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]);
		GetPosInFrontOfPlayer(playerid,Pos[0],Pos[1],3);
		SetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]);
		return 1;
	}


	CMD:arriba(playerid,params[])
	{
		if(Staff(playerid,Mod.Superior)) return 1;
		Para_Admin_Servicio
		new Float:Pos[3];
		GetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]);
		SetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]+2);
		return 1;
	}

	CMD:abajo(playerid,params[])
	{
		if(Staff(playerid,Mod.Superior)) return 1;
		Para_Admin_Servicio
		new Float:Pos[3];
		GetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]);
		SetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]-2);
		return 1;
	}

	CMD:bigears(playerid,params[])
	{
		if(Staff(playerid,Mod.Superior)) return 1;
		if (PlayerBools [playerid] & e_BIGEARS)
		{
		    Mensaje(playerid, -1, "BIG-EARS "#CROJO"DESACTIVADO.");
            PlayerBools [playerid] &= ~e_BIGEARS;
		}
		else
		{
		    Mensaje(playerid, -1, "BIG-EARS "#CVERDE"ACTIVADO.");
            PlayerBools [playerid] |= e_BIGEARS;
		}
		return 1;
	}

	// ----=============[ COMANDOS ADMINISTRADOR ]=============----- //

	CMD:verids(playerid,params[])
	{
	    if(!EsDueno(playerid)) return Error(playerid,"¡Solo dueños pueden utilizar este comando!");
	    return SelectObject(playerid);
	}

	CMD:verportones(playerid, params[])
	{
	    if(Staff(playerid,Dueno)) return 1;
	    Loop(i, MAX_PORTONES, 0)
	    {
	        if(InfoPorton_Ex[i][pX] == 0.0)
	            continue;

			new
				str[16];

			A_Format(str, "Porton ID: %d", i);

			CreatePlayer3DTextLabel(playerid,str,0xFFFFFFFF,InfoPorton_Ex[i][pX],InfoPorton_Ex[i][pY],InfoPorton_Ex[i][pZ]+3.0,35.0);
		}
		MensajeF(playerid, -1, "Todas las referencias de ID de portones fueron creadas.");
		return 1;
	}

	CMD:irporton(playerid, params[])
	{
	    if(Staff(playerid,Mod.Superior)) return 1;
	    new
	        i = strval(params);

		if(!(0 <= i < MAX_PORTONES))
		    return Error(playerid, "ID de portón inválido.");

		if(InfoPorton_Ex[i][pX] == 0.0)
		    return Error(playerid, "ID de portón inválido.");

		SetPlayerPos(playerid, InfoPorton_Ex[i][pX],InfoPorton_Ex[i][pY],InfoPorton_Ex[i][pZ]);
		MensajeF(playerid, -1, "Teletransportado al porton nº "#CROJO"%d", i);
		return 1;
	}

	CMD:respawngeneral(playerid,params[])
	{
	    if(Staff(playerid,Administrador)) return 1;

	    new
			BitArray:VehOcupado<MAX_VEHICLES>;

		Para_Admin_Servicio
   		MensajeTodosF(C_ROJO,"[ADMINISTRACIÓN] "#CBLANCO"Todos los vehículos desocupados, fueros respawneados por "#CVERDE"%s.",NombreJugador_(playerid),playerid);
 		foreach(Player,i)
		{
		    if(IsPlayerInAnyVehicle(i))
				Bit_Set(VehOcupado, GetPlayerVehicleID(i), true);
		}
		Loop(i, MAX_VEHICLES, 0)
		{
		    if(!IsValidVehicle(i)) continue;
		    if(Bit_Get(VehOcupado, i)) continue;

			veh_respawn(i);
		}
  		return 1;
	}

	CMD:respawntotal(playerid,params[])
	{
	    if(Staff(playerid,Administrador)) return 1;
		Para_Admin_Servicio
		
   		MensajeTodosF(C_ROJO,"[ADMINISTRACIÓN] "#CBLANCO"Todos los vehículos fueros respawneados por "#CVERDE"%s.",NombreJugador_(playerid),playerid);

		Loop(i, MAX_VEHICLES, 0)
		{
		    if(IsValidVehicle(i))
		    {
				veh_respawn(i);
			}
		}
  		return 1;
	}

	stock GetAccountIp(playerid, directory[], ip[], len = 16)
	{
		INI_ParseFile(directory, "VerIP_data", .bExtra = true, .extra = playerid);
		GetPVarString(playerid, "VerIP_Cuenta", ip, len);
		DeletePVar(playerid, "VerIP_Cuenta");
		return 1;
	}

	CALLBACK: VerIP_data(playerid, name[], value[])
	{
		if(!strcmp(name, "IP"))
		{
		    SetPVarString(playerid, "VerIP_Cuenta", value);
		    return 1;
		}
		return 1;
	}

	stock GetAccountBankID(playerid, directory[])
	{
		INI_ParseFile(directory, "VerBank_data", .bExtra = true, .extra = playerid);

		new
		    Bank = GetPVarInt(playerid, "VerBank_Cuenta");

		DeletePVar(playerid, "VerBank_Cuenta");

		return Bank;
	}

	CALLBACK: VerBank_data(playerid, name[], value[])
	{
		if(!strcmp(name, "IDCuentaB"))
		{
		    SetPVarInt(playerid, "VerBank_Cuenta", strval(value));
		    return 1;
		}
		return 1;
	}


	CMD:fijarclima(playerid,params[])
	{
		if(Staff(playerid,Administrador)) return 1;
		Para_Admin_Servicio
		if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/fijarclima [ IDCLIMA ]");
		MensajeTodosF(C_ADMINISTRADOR,"[ADMINISTRACIÓN] "#CBLANCO"> El clima ha sido cambiado por "#CINFO"%s",NombreJugador_(playerid));
		SetWeather(params[0]);
		ServerWeather = params[0];
		return 1;
	}

	CMD:darllaveveh(playerid, params[])
	{
	    if(Staff(playerid,Administrador)) return 1;
	    Para_Admin_Servicio
	    if(sscanf(params,"ui",params[0],params[1])) return ParamsINC(playerid,"/darllave [ID/NOMBRE] [ID AUTO]");
		if(!IsPlayerConnected(params[0])) return Error(playerid, "¡Jugador desconectado!");
		Bit_Set(Llave_veh[params[0]], params[1], true);
	    MensajeAdminF(C_ROJO,"[ADMINISTRACIÓN] "#CBLANCO"> %s le dio a %s la llave del auto ID %d",Ayudante,NombreJugador_(playerid),NombreJugador_(params[0]),params[1]);
		MensajeF(params[0], -1, "** El administrador %s te dio la llave del vehículo ID %d", NombreJugador(playerid), params[1]);
		GuardarLlaves(params[0]);
		return 1;
	}

	CMD:quitarllaveveh(playerid, params[])
	{
	    if(Staff(playerid,Administrador)) return 1;
	    Para_Admin_Servicio
	    if(sscanf(params,"ui",params[0],params[1])) return ParamsINC(playerid,"/darllave [ID/NOMBRE] [ID AUTO]");
		if(!IsPlayerConnected(params[0])) return Error(playerid, "¡Jugador desconectado!");
		Bit_Set(Llave_veh[params[0]], params[1], false);
	    MensajeAdminF(C_ROJO,"[ADMINISTRACIÓN] "#CBLANCO"> %s le quito a %s la llave del auto ID %d",Ayudante,NombreJugador_(playerid),NombreJugador_(params[0]),params[1]);
		MensajeF(params[0], -1, "** El administrador %s te quito la llave del vehículo ID %d", NombreJugador(playerid), params[1]);
		GuardarLlaves(params[0]);
		return 1;
	}



	CMD:fijarhora(playerid,params[])
	{
		if(Staff(playerid,Administrador)) return 1;
		Para_Admin_Servicio
		if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/fijarhora [ HORA ]");
		MensajeTodosF(C_ADMINISTRADOR,"[ADMINISTRACIÓN]"#CBLANCO" > La hora ha sido cambiado por "#CINFO"%s",NombreJugador_(playerid));
		SetWorldTime(params[0]);
		return 1;
	}

	CMD:editarfamilia(playerid,params[])
	{
		if(Staff(playerid,SubDueno)) return 1;
		Para_Admin_Servicio
		if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/editarfamilia [ID DE FAMILIA]");
		new Str[70];
		A_Format(Str,"> Cambiar nombre(%s)\n> Cambiar ubicación\n> Eliminar",InfoFamilia[params[0]][fNombre]);
		Dialog(playerid,dEditarFam,DIALOG_STYLE_LIST,"Editar familia",Str,"Aceptar","Cancelar");
		SetPVarInt(playerid,"EDITAR_FAM",params[0]);
		return 1;
	}

	CMD:quitararmas(playerid,params[])
	{
	    if(Staff(playerid,Administrador)) return 1;
		Para_Admin_Servicio
		if(sscanf(params,"u",params[0])) return ParamsINC(playerid,"/quitararmas [ID/NOMBRE]");
		ResetPlayerWeapons(params[0]);
		MensajeAdminF(C_ROJO,"[ADMINISTRACIÓN] > "#CBLANCO"%s le quitó las armas a %s",Destacado,NombreJugador_(playerid),NombreJugador_(params[0]));
		return 1;
	}

	CMD:creartv(playerid, params[])
	{
	    if(Staff(playerid,SubDueno))
			return 1;

	    Para_Admin_Servicio
	    new
			id = -1;
	    Loop(i, MAX_TVS, 0)
	    {
	        if(!InfoTV[i][tvPos][0] && !InfoTV[i][tvPos][1] && !InfoTV[i][tvPos][2])
	        {
	            id = i;
				break;
			}
		}
		if(id == -1)
			return Error(playerid, "¡No se pudieron crear más televisores! (Máximo "#MAX_TVS")");

		GetPlayerPos(playerid, InfoTV[id][tvPos][0], InfoTV[id][tvPos][1], InfoTV[id][tvPos][2]);
		InfoTV[id][tvLabelID] = CreateDynamic3DTextLabel("Televisor\n\n"#CBLANCO"Usa "#CINFO"/usar televisor", C_ROJO, InfoTV[id][tvPos][0], InfoTV[id][tvPos][1], InfoTV[id][tvPos][2], 4.0);
		ActualizarTVs();
		MensajeF(playerid, -1, "Televisor creado (%d)", id);
		return 1;
	}

	CMD:idtv(playerid, params[])
	{
	    if(Staff(playerid,SubDueno))
			return 1;

	    Loop(i, MAX_TVS, 0)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 2.0, InfoTV[i][tvPos][0], InfoTV[i][tvPos][1], InfoTV[i][tvPos][2]))
	        {
				MensajeF(playerid, -1, "ID del televisor: %d", i);
				return 1;
			}
		}
		return Error(playerid, "No estás en una TV.");
	}

	CMD:borrartv(playerid, params[])
	{
	    if(Staff(playerid,SubDueno))
			return 1;

		if(sscanf(params, "i", params[0]))
			return ParamsINC(playerid, "/borrartv [ID de TV]");

		if(!(0 <= params[0] < MAX_TVS))
		    return Error(playerid, "ID de TV inválido.");

        if(InfoTV[params[0]][tvPos][0] != 0.0 && InfoTV[params[0]][tvPos][1] != 0.0)
        {
			InfoTV[params[0]][tvPrendida] = false;
			InfoTV[params[0]][tvPos][0] = 0.0;
			InfoTV[params[0]][tvPos][1] = 0.0;
			InfoTV[params[0]][tvPos][2] = 0.0;
			DestroyDynamic3DTextLabel(InfoTV[params[0]][tvLabelID]);
			InfoTV[params[0]][tvLabelID] = Text3D:0;
			MensajeF(playerid, -1, "TV ID: %d eliminada.", params[0]);
			ActualizarTVs();
			return 1;
		}
		return Error(playerid, "ID de TV inexistente.");
	}

	CMD:irtv(playerid, params[])
	{
	    if(Staff(playerid,SubDueno))
			return 1;

		if(sscanf(params, "i", params[0]))
			return ParamsINC(playerid, "/irtv [ID de TV]");

		if(!(0 <= params[0] < MAX_TVS))
		    return Error(playerid, "ID de TV inválido.");

        if(InfoTV[params[0]][tvPos][0] != 0.0 && InfoTV[params[0]][tvPos][1] != 0.0)
        {
			SetPlayerPos(playerid, InfoTV[params[0]][tvPos][0], InfoTV[params[0]][tvPos][1], InfoTV[params[0]][tvPos][2]);
			Mensaje(playerid, -1, "Teleportado.");
			return 1;
		}
		return Error(playerid, "ID de TV inexistente.");
	}

	//  CASAS
	CMD:crearcasa(playerid,params[])
	{
		if(Staff(playerid,SubDueno)) return 1;
		Para_Admin_Servicio
	    if(sscanf(params,"is[26]",params[0],params[2]))
	    {
			ParamsINC(playerid,"/crearcasa [PRECIO] [DESCRIPCIÓN]");
			return 1;
		}
		new i = SlotCasaLibre();
		if(i < 0) return Error(playerid,"¡Ya no hay más espacio, se podrán crear máximo "#MAX_CASAS" casas!");
  		GetPlayerPos(playerid,PosJugador[X],PosJugador[Y],PosJugador[Z]);

		InfoCasa[i][cEntrada_x] = PosJugador[X];
		InfoCasa[i][cEntrada_y] = PosJugador[Y];
		InfoCasa[i][cEntrada_z] = PosJugador[Z];
		InfoCasa[i][cVW] = i+100;

		InfoCasa[i][cCerrada] = false;

		InfoCasa[i][cPrecio] = params[0];
		alm(InfoCasa[i][cNombre],params[2]);

		MensajeF(playerid, -1, "Casa Creada: "#CVERDE"[ID Casa: %d | Precio: %d]", i, params[0]);

		printf(" - Se creo la casa ID %d | nombre %s | precio: %d",i,InfoCasa[i][cNombre],InfoCasa[i][cPrecio]);

		ActualizarCasa(i);
		ActualizarCasaLabel(i, true);
		SetPVarInt(playerid,"ID_CREARCASA", i);

		new Str[MAX_INTERIORES_CASA * 20], Str_[26];
		Loop(i_, MAX_INTERIORES_CASA, 0)
		{
		    A_Format(Str_,"%s\n", InfoInteriorCasa[i_][iNombre]);
		    strcat(Str, Str_);
		}

		Dialog(playerid, dCCasa, DIALOG_STYLE_LIST,"Elige el interior para la casa", Str, "Aceptar", "");
		InfoCasa[i][cPickup] = CreateDynamicPickup(ID_PICKUPCASA,1,InfoCasa[i][cEntrada_x],InfoCasa[i][cEntrada_y],InfoCasa[i][cEntrada_z]);
		Iter_Add(Casas,i);

		new
		    str[100];

		A_Format(str, "%s creó casa (ID: %d, Nombre: '%s', Precio: $%d)", pName(playerid), i, params[1], params[0]);
		Log("admins", str);
		return 1;
	}


	CMD:crearcasa2(playerid,params[])
	{
		if(Staff(playerid,SubDueno)) return 1;
		Para_Admin_Servicio
		
		new	
			Float: h_x,
			Float: h_y,
			Float: h_z,
			h_int;
			
	    if(sscanf(params,"p< >is[26]fffi",params[0],params[2], h_x, h_y, h_z, h_int))
	    {
			ParamsINC(playerid,"/crearcasa2 [PRECIO] [DESCRIPCIÓN] [X] [Y] [Z] [INT]");
			return 1;
		}
		new i = SlotCasaLibre();
		if(i < 0) return Error(playerid,"¡Ya no hay más espacio, se podrán crear máximo "#MAX_CASAS" casas!");
  		GetPlayerPos(playerid,PosJugador[X],PosJugador[Y],PosJugador[Z]);

		InfoCasa[i][cEntrada_x] = PosJugador[X];
		InfoCasa[i][cEntrada_y] = PosJugador[Y];
		InfoCasa[i][cEntrada_z] = PosJugador[Z];
		InfoCasa[i][cVW] = i+100;

		InfoCasa[i][cCerrada] = false;

		InfoCasa[i][cSalida_x] = h_x;
		InfoCasa[i][cSalida_y] = h_y;
		InfoCasa[i][cSalida_z] = h_z;
		InfoCasa[i][cInt] = h_int;
		
		InfoCasa[i][cPrecio] = params[0];
		alm(InfoCasa[i][cNombre],params[2]);

		MensajeF(playerid, -1, "Casa Creada: "#CVERDE"[ID Casa: %d | Precio: %d]", i, params[0]);

		printf(" - Se creo la casa ID %d | nombre %s | precio: %d",i,InfoCasa[i][cNombre],InfoCasa[i][cPrecio]);

		ActualizarCasa(i);
		ActualizarCasaLabel(i, true);

		InfoCasa[i][cPickup] = CreateDynamicPickup(ID_PICKUPCASA,1,InfoCasa[i][cEntrada_x],InfoCasa[i][cEntrada_y],InfoCasa[i][cEntrada_z]);
		Iter_Add(Casas,i);

		new
		    str[100];

		A_Format(str, "%s creó casa (ID: %d, Nombre: '%s', Precio: $%d)", pName(playerid), i, params[1], params[0]);
		Log("admins", str);
		return 1;
	}

stock stralm (dest[], const string[], size_string = sizeof (string), size_dest = sizeof (dest))
{
	if(size_string < size_dest) 
	{
		memcpy(dest, source, 0, size_string*(cellbits/8), size_dest);
		dest[size_string] = '\0'
	} 
	else 
	{
		memcpy(dest, source, 0, (size_dest-1)*(cellbits/8), size_dest);
		dest[size_dest-1] = '\0';
	}
}

	CMD:intcasa(playerid, params[])
	{
		if(Staff(playerid,SubDueno)) return 1;
		Para_Admin_Servicio
	    if(sscanf(params,"I(-1)",params[0])) return ParamsINC(playerid,"/cambiarint [OPCIONAL: ID CASA]");

		new
			Str[MAX_INTERIORES_CASA * 20],
			Str_[26];

		if(params[0] == -1)
		{
		    foreach(Casas,i) if(IsPlayerInRangeOfPoint(playerid, 2.0, InfoCasa[i][cEntrada_x], InfoCasa[i][cEntrada_y], InfoCasa[i][cEntrada_z]))
		    {
		        params[0] = i;
			}
			if(params[0] == -1)
			{
			    return Error(playerid,"No se encontró una casa en tu ubucación.");
			}
		}
		SetPVarInt(playerid,"ID_CREARCASA", params[0]);
		Loop(i_, MAX_INTERIORES_CASA, 0)
		{
		    A_Format(Str_,"%s\n", InfoInteriorCasa[i_][iNombre]);
		    strcat(Str, Str_);
		}

		Dialog(playerid, dCCasa, DIALOG_STYLE_LIST,"Elige el interior para la casa", Str, "Aceptar", "");
		return 1;
	}

	CMD:preciocasa(playerid,params[])
	{
	    if(Staff(playerid,SubDueno)) return 1;
		Para_Admin_Servicio
	    if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/preciocasa [PRECIO]");
	    foreach(Casas,i)
	    {
	        if(IsPlayerInRangeOfPoint(playerid,2,InfoCasa[i][cEntrada_x],InfoCasa[i][cEntrada_y],InfoCasa[i][cEntrada_z]))
	        {
	            InfoCasa[i][cPrecio] = params[0];
				MensajeF(playerid,-1,"> El precio de esta casa (ID %d) fue cambiado a %d.",i,InfoCasa[i][cPrecio]);
	            ActualizarCasaLabel(i);
	            ActualizarCasa(i);
				return 1;
			}
		}
		return Error(playerid,"¡No se detecto ninguna casa en tu posición!");
	}

	CMD:precionegocio(playerid,params[])
	{
	    if(Staff(playerid,SubDueno)) return 1;
		Para_Admin_Servicio
	    if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/precionegocio [PRECIO]");
	    foreach(Negocios,i)
	    {
	        if(IsPlayerInRangeOfPoint(playerid,2,InfoNegocio[i][nEntrada_x],InfoNegocio[i][nEntrada_y],InfoNegocio[i][nEntrada_z]))
	        {
	            InfoNegocio[i][nPrecio] = params[0];
				MensajeF(playerid,-1,"> El precio de este negocio (ID %d) fue cambiado a %d.",i,InfoNegocio[i][nPrecio]);
	            ActualizarNegLabel(i);
	            ActualizarNegocio(i);
				return 1;
			}
		}
		return Error(playerid,"¡No se detecto ningun negocio en tu posición!");
	}

	CMD:idgarage(playerid,params[])
	{
 		foreach(Garages,c)
	 	{
			if(IsPlayerInRangeOfPoint(playerid,2,InfoGarage[c][gExt_x],InfoGarage[c][gExt_y],InfoGarage[c][gExt_z]))
  			{
  			    MensajeF(playerid,-1,"La ID de este garage es: "#CPOSITIVO"%d",c);
  			    return 1;
			}
		}
		return Error(playerid,"¡No estás en ningun garage! Dirigete a la entrada de alguno y usa este comando.");
	}

	CMD:quitar(playerid, params[])
	{
	    if(!strcmp(params, "piezas", true))
		{
		    if(ID_Faccion(playerid) != IDMECANICOS) return Error(playerid, "No perteneces a los mecánicos.");
		    if(!IsPlayerInDynamicArea(playerid, zMecanicos)) return Error(playerid, "No estás en el taller.");
			new
			    VehID = GetPlayerVehicleID(playerid);

			if(VehID == 0) return Error(playerid, "Debes estar subido al vehículo que deseas quitarle piezas.");

			Dialog(playerid, dQuitarPieza, DIALOG_STYLE_LIST, ""#CBLANCO"Piezas del vehículo", "Alerón\nCampana\nTecho\nEmbellecedores\nLámparas\nNitro\nEscape\nRuedas\nStereo\nSuspensión\nParagolpes(delantero)\nParagolpes(trasero)\nVentilación(der)\nVentilación(izq)", "Quitar", "Cancelar");
			return 1;
		}
		return 1;
	}

	CMD:cambiar(playerid, params[])
	{
		if(strfind(params, "precios", true) == 0)
		{
		    new
		        Component[50],
		        Price;

		    if(sscanf(params[8], "p< >s[50]d", Component, Price)) return ParamsINC(playerid, "/cambiar precios [Nombre de la pieza] [Precio de la Pieza]");
		    if(InfoJugador[playerid][jLider] != IDMECANICOS) return Error(playerid, "¡Sólo el líder de mecánicos puede usar este comando!");
		    if(!IsPlayerInRangeOfPoint(playerid, 2.0, 1621.3708,-2156.9822,13.5547)) return Error(playerid, "Debes estar frente al pizarrón para editar los precios.");
			if(!(0 < Price <= 6000)) return Error(playerid, "El precio debe estar entre $1 y $6000");

			Loop(i, 14, 0)
			{
				if(!strcmp(Component, GetComponentTypeName(i), true))
				{
				    PrecioPiezaM[i] = Price;
				    ActualizarPizarronMecanicos();
				    MensajeF(playerid, -1, "El precio de "#CAMARILLO"%s "#CBLANCO"fue cambiado a: "#CVERDE"$%d", Component, Price);
				    return 1;
				}
			}
			return MensajeF(playerid, -1, "El componente "#CAMARILLO"\"%s\" "#CBLANCO"no existe. Recuerda que el nombre de la pieza debe ser exacto (Respetando tildes)", Component);
		}
		return 1;
	}

	CMD:crearinterior(playerid,params[])
	{
		if(!EsDueno(playerid)) return Error(playerid,"¡Este comando lo utilizan solo dueños!");
		if(Total_Interiores_Creados >= MAX_INTERIORES_CASA-1) return Error(playerid,"¡No se pueden crear más interiores!");
		Para_Admin_Servicio
		if(isnull(params)) return ParamsINC(playerid,"/crearinterior [Descripción]");

		GetPlayerPos(playerid,PosJugador[X],PosJugador[Y],PosJugador[Z]);

		++Total_Interiores_Creados;
		InfoInteriorCasa[Total_Interiores_Creados][iInt] = GetPlayerInterior(playerid);
		InfoInteriorCasa[Total_Interiores_Creados][iPos_x] = PosJugador[X];
		InfoInteriorCasa[Total_Interiores_Creados][iPos_y] = PosJugador[Y];
		InfoInteriorCasa[Total_Interiores_Creados][iPos_z] = PosJugador[Z];
		alm(InfoInteriorCasa[Total_Interiores_Creados][iNombre], params);
		ActualizarInt(Total_Interiores_Creados);
		Mensaje(playerid,-1,"Interior creado correctamente");
		return 1;
	}

	CMD:vendercasa(playerid,params[])
	{
		Para_Admin_Servicio
		if(Staff(playerid,Administrador)) return 1;
		if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/vendercasa [ID CASA]");
  		if(InfoCasa[params[0]][cVW] == 0 && InfoCasa[params[0]][cInt] == 0) return Error(playerid,"¡Esa casa no existe! (ID INCORRECTA)");
		MensajeF(playerid,-1,"Casa ID %d vendida",params[0]);
		InfoCasa[params[0]][cComprada] = false;
		alm(InfoCasa[params[0]][cComprador],"Sin Dueño");
		ActualizarCasaLabel(params[0]);
		ActualizarCasa(params[0]);
		return 1;
	}

	CMD:vendernegocio(playerid,params[])
	{
		Para_Admin_Servicio
		if(Staff(playerid,Administrador)) return 1;
		if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/vendernegocio [ID NEGOCIO]");
  		if(InfoNegocio[params[0]][nVW] == 0 && InfoNegocio[params[0]][nInt] == 0) return Error(playerid,"¡Ese negocio no existe! (ID INCORRECTA)");
		MensajeF(playerid,-1,"Negocio ID %d vendido",params[0]);
		InfoNegocio[params[0]][nComprado] = false;
		alm(InfoNegocio[params[0]][nComprador],"");
		ActualizarNegLabel(params[0]);
		ActualizarNegocio(params[0]);
		return 1;
	}

	CMD:precioentrada(playerid, params[])
	{
		Para_Admin_Servicio
		if(Staff(playerid,Administrador)) return 1;

		new
		    Price,
		    Neg;

		if(sscanf(params, "ii", Neg, Price)) return ParamsINC(playerid, "/precioentrada [ID NEGOCIO] [ENTRADA]");
		if(!(0 <= Neg < MAX_NEGOCIOS)) return Error(playerid, "ID de negocio inexistente.");
		if(Price > 2000 || Price < 0) return Error(playerid, "El precio debe estar entre 0-2000");

  		MensajeF(playerid, -1, "Precio de entrada de negocio: %d cambiado a "#CVERDE"$%d", Neg, Price);
		InfoNegocio[Neg][nPrecioEntrada] = Price;

		ActualizarNegLabel(Neg);
		ActualizarNegocio (Neg);
		return 1;
	}

	CMD:jetpack(playerid,params[])
	{
	    if(Staff(playerid,Ayudante)) return 1;
	    Para_Admin_Servicio
    	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USEJETPACK);
		return 1;
	}

	// GARAGES
	CMD:creargarage(playerid,params[])
	{
	    if(Staff(playerid,SubDueno)) return 1;
		Para_Admin_Servicio
		if(sscanf(params,"ii",params[0],params[1]))
 		{
	 		ParamsINC(playerid,"/creargarage [ID CASA] [TIPO GARAGE]");
	        Mensaje(playerid, -1,"0 = GARAGE 1 PLAZA "#CROJO"|"#CBLANCO" 1 = GARAGE 1 PLAZA (2) "#CROJO"|"#CBLANCO" 2 = GARAGE 2 PLAZAS IZQ "#CROJO"|"#CBLANCO" 3 = GARAGE 2 PLAZAS DER");
	        return 1;
		}
		new ID = params[1];

		if(!IsValidHouse(params[0])) return Error(playerid,"¡ID de casa incorrecto!");
		if(ID < 0 || ID > 3)
		{
			Error(playerid,"ID de interior incorrecto.");
	        Mensaje(playerid, -1,"0 = GARAGE 1 PLAZA "#CROJO"|"#CBLANCO" 1 = GARAGE 1 PLAZA (2) "#CROJO"|"#CBLANCO" 2 = GARAGE 2 PLAZAS IZQ "#CROJO"|"#CBLANCO" 3 = GARAGE 2 PLAZAS DER");
			return 1;
		}
		new i = SlotGarageLibre();
		if(i < 0) return Error(playerid,"¡No puedes crear más garages, se puede crear máximo "#MAX_GARAGES" garages!");

  		InfoGarage[i][gIDCasa] = params[0];
		InfoGarage[i][gIntV_x] = InfoPGarage[ID][PosVx];
		InfoGarage[i][gIntV_y] = InfoPGarage[ID][PosVy];
		InfoGarage[i][gInt_x] = InfoPGarage[ID][Posx];
		InfoGarage[i][gInt_y] = InfoPGarage[ID][Posy];
		InfoGarage[i][gInt_z] = InfoPGarage[ID][Posz];
		InfoGarage[i][gInt] = InfoPGarage[ID][IntPG];
		InfoGarage[i][gVW] = InfoCasa[params[0]][cVW];
		Iter_Add(Garages,i);
		GetPlayerPos(playerid,InfoGarage[i][gExt_x],InfoGarage[i][gExt_y],InfoGarage[i][gExt_z]);
		GetPlayerFacingAngle(playerid,InfoGarage[i][gAng]);
		GetPosInFrontOfPlayer(playerid,InfoGarage[i][gExtV_x],InfoGarage[i][gExtV_y],-4);
		ActualizarGarage(i);
		InfoGarage[i][gLabelID] = CreateDynamic3DTextLabel(LABEL_GARAGE_E,C_BLANCO,InfoGarage[i][gExt_x],InfoGarage[i][gExt_y],InfoGarage[i][gExt_z]+1,10);
		MensajeF(playerid, -1, "Garage Creado: "#CVERDE"[ID Casa: %d | ID Garage: %d | Tipo Garage: %d]", params[0], i, params[1]);
		printf("- Garage ID %d creado por %s ( Tipo: %d )",i,NombreJugador_(playerid),ID);
		return 1;
	}

	//	NEGOCIOS
	CMD:crearnegocio(playerid,params[])
	{
		if(Staff(playerid,SubDueno)) return 1;
		Para_Admin_Servicio
	    if(sscanf(params,"is[26]",params[0],params[1]))
	    {
			ParamsINC(playerid,"/crearnegocio [PRECIO] [ITEM]");
   			Mensaje(playerid,C_NEGRO,   "	>> "#CAZULRARO"ITEMS:");
			Mensaje(playerid,-1,		"24-7 - Binco - Didier - Prolaps - Suburban - Victim - Zip - Club nocturno - Bar - Burger shot - Polleria");
			Mensaje(playerid,-1,		"Pizzeria - Gimnasio - Strip club - Ammunation - Hipermercado - casino - farmacia");
			return 1;
		}
		new i = SlotNegocioLibre();
		if(i < 0) return Error(playerid,"¡Ya no hay más espacio, se podrán crear máximo "#MAX_NEGOCIOS" negocios!");
		GetPlayerPos(playerid,PosJugador[X],PosJugador[Y],PosJugador[Z]);

		InfoNegocio[i][nEntrada_x] = PosJugador[X];
		InfoNegocio[i][nEntrada_y] = PosJugador[Y];
		InfoNegocio[i][nEntrada_z] = PosJugador[Z];
		InfoNegocio[i][nVW] = i+1000;
		if(!strcmp(params[1],"24-7"))
		{
			InfoNegocio[i][nSalida_x] = -25.884498;
			InfoNegocio[i][nSalida_y] = -185.868988;
			InfoNegocio[i][nSalida_z] = 1003.546875;
			InfoNegocio[i][nInt] = 17;
			InfoNegocio[i][nTipo] = N_247;
			InfoNegocio[i][nIcono] = 19;
		}
		else if(!strcmp(params[1],"Estación de servicio"))
		{
			InfoNegocio[i][nSalida_x] = -25.8966;
			InfoNegocio[i][nSalida_y] = -140.8951;
			InfoNegocio[i][nSalida_z] = 1003.546;
			InfoNegocio[i][nInt] = 16;
			InfoNegocio[i][nTipo] = N_ESTACION;
			InfoNegocio[i][nIcono] = 19;
		}
		else if(!strcmp(params[1],"binco",true)) //120460
		{
			InfoNegocio[i][nSalida_x] = 207.737991;
			InfoNegocio[i][nSalida_y] = -109.019996;
			InfoNegocio[i][nSalida_z] = 1005.132812;
			InfoNegocio[i][nInt] = 15;
			InfoNegocio[i][nTipo] = N_ROPA;
			InfoNegocio[i][nIcono] = 45;
		}
		else if(!strcmp(params[1],"Didier",true))
		{
			InfoNegocio[i][nSalida_x] = 204.332992;
			InfoNegocio[i][nSalida_y] = -166.694992;
			InfoNegocio[i][nSalida_z] = 1000.523437;
			InfoNegocio[i][nInt] = 14;
			InfoNegocio[i][nTipo] = N_ROPA;
			InfoNegocio[i][nIcono] = 45;
		}
		else if(!strcmp(params[1],"prolaps",true))
		{
			InfoNegocio[i][nSalida_x] = 207.054992;
			InfoNegocio[i][nSalida_y] = -138.804992;
			InfoNegocio[i][nSalida_z] = 1003.507812;
			InfoNegocio[i][nInt] = 3;
			InfoNegocio[i][nTipo] = N_ROPA;
			InfoNegocio[i][nIcono] = 45;
		}
		else if(!strcmp(params[1],"suburban",true))
		{
			InfoNegocio[i][nSalida_x] = 203.777999;
			InfoNegocio[i][nSalida_y] = -48.492397;
			InfoNegocio[i][nSalida_z] = 1001.804687;
			InfoNegocio[i][nInt] = 1;
			InfoNegocio[i][nTipo] = N_ROPA;
			InfoNegocio[i][nIcono] = 45;
		}
		else if(!strcmp(params[1],"Victim",true))
		{
			InfoNegocio[i][nSalida_x] = 226.293991;
			InfoNegocio[i][nSalida_y] = -7.431529;
			InfoNegocio[i][nSalida_z] = 1002.210937;
			InfoNegocio[i][nInt] = 5;
			InfoNegocio[i][nTipo] = N_ROPA;
			InfoNegocio[i][nIcono] = 45;
		}
		else if(!strcmp(params[1],"zip",true))
		{
			InfoNegocio[i][nSalida_x] = 161.391006;
			InfoNegocio[i][nSalida_y] = -93.159156;
			InfoNegocio[i][nSalida_z] = 1001.804687;
			InfoNegocio[i][nInt] = 18;
			InfoNegocio[i][nTipo] = N_ROPA;
			InfoNegocio[i][nIcono] = 45;
		}
		else if(!strcmp(params[1],"Club nocturno",true))
		{
			InfoNegocio[i][nSalida_x] = 493.390991;
			InfoNegocio[i][nSalida_y] = -22.722799;
			InfoNegocio[i][nSalida_z] = 1000.679687;
			InfoNegocio[i][nInt] = 17;
			InfoNegocio[i][nTipo] = N_BOLICHE;
			InfoNegocio[i][nIcono] = 48;
		}
		else if(!strcmp(params[1],"bar",true))
		{
			InfoNegocio[i][nSalida_x] = 501.980987;
			InfoNegocio[i][nSalida_y] = -69.150199;
			InfoNegocio[i][nSalida_z] = 998.757812;
			InfoNegocio[i][nInt] = 11;
			InfoNegocio[i][nTipo] = N_BOLICHE;
			InfoNegocio[i][nIcono] = 49;
		}
		else if(!strcmp(params[1],"Burger shot",true))
		{
			InfoNegocio[i][nSalida_x] = 363.9088;
			InfoNegocio[i][nSalida_y] = -74.0322;
			InfoNegocio[i][nSalida_z] = 1001.5078;
			InfoNegocio[i][nInt] = 10;
			InfoNegocio[i][nTipo] = N_COMIDA;
			InfoNegocio[i][nIcono] = 10;
		}
		else if(!strcmp(params[1],"Polleria",true))
		{
			InfoNegocio[i][nSalida_x] = 364.8756;
			InfoNegocio[i][nSalida_y] = -10.6015;
			InfoNegocio[i][nSalida_z] = 1001.8516;
			InfoNegocio[i][nInt] = 9;
			InfoNegocio[i][nTipo] = N_COMIDA;
			InfoNegocio[i][nIcono] = 14;
		}
		else if(!strcmp(params[1],"Pizzeria",true))
		{
			InfoNegocio[i][nSalida_x] = 372.2779;
			InfoNegocio[i][nSalida_y] = -132.4406;
			InfoNegocio[i][nSalida_z] = 1001.4922;
			InfoNegocio[i][nInt] = 5;
			InfoNegocio[i][nTipo] = N_COMIDA;
			InfoNegocio[i][nIcono] = 29;
		}
		else if(!strcmp(params[1],"Gimnasio",true))
		{
			InfoNegocio[i][nSalida_x] = 772.111999;
			InfoNegocio[i][nSalida_y] = -3.898649;
			InfoNegocio[i][nSalida_z] = 1000.728820;
			InfoNegocio[i][nInt] = 5;
			InfoNegocio[i][nTipo] = N_COMIDA;
			InfoNegocio[i][nIcono] = 54;
		}
		else if(!strcmp(params[1],"Strip club",true))
		{
			InfoNegocio[i][nSalida_x] = 1204.809936;
			InfoNegocio[i][nSalida_y] = -11.586799;
			InfoNegocio[i][nSalida_z] = 1000.921875;
			InfoNegocio[i][nInt] = 2;
			InfoNegocio[i][nTipo] = N_BOLICHE;
			InfoNegocio[i][nIcono] = 48;
		}
		else if(!strcmp(params[1],"Ammunation",true))
		{
			InfoNegocio[i][nSalida_x] = 314.820983;
			InfoNegocio[i][nSalida_y] = -141.431991;
			InfoNegocio[i][nSalida_z] = 999.601562;
			InfoNegocio[i][nInt] = 7;
			InfoNegocio[i][nTipo] = N_ARMAS;
			InfoNegocio[i][nIcono] = 6;
		}//324721
		else if(!strcmp(params[1],"Hipermercado",true))
		{
			InfoNegocio[i][nSalida_x] = -1698;
			InfoNegocio[i][nSalida_y] = 1880.5;
			InfoNegocio[i][nSalida_z] = 1068.80004883;
			InfoNegocio[i][nInt] = 14;
			InfoNegocio[i][nTipo] = N_TECNOLOGIA;
			InfoNegocio[i][nIcono] = 44;
		}
		else if(!strcmp(params[1],"casino",true))
		{
			InfoNegocio[i][nSalida_x] = 2234.0110;
			InfoNegocio[i][nSalida_y] = 1713.7466;
			InfoNegocio[i][nSalida_z] = 1012.232;
			InfoNegocio[i][nInt] = 1;
			InfoNegocio[i][nTipo] = N_CASINO;
			InfoNegocio[i][nIcono] = 25;
		}
		else if(!strcmp(params[1],"farmacia",true))
		{
			InfoNegocio[i][nSalida_x] = 172.6045;
			InfoNegocio[i][nSalida_y] = -64.6023;
			InfoNegocio[i][nSalida_z] = 963.2859;
			InfoNegocio[i][nInt] = 6;
			InfoNegocio[i][nTipo] = N_FARMACIA;
			InfoNegocio[i][nIcono] = 22;
		}
		else
		{
 			Mensaje(playerid,C_NEGRO,   "	>> "#CAZULRARO"ITEMS:");
			Mensaje(playerid,-1,		"24-7 - Binco - Didier - Prolaps - Suburban - Victim - Zip - Club nocturno - Bar - Burger shot - Polleria");
			Mensaje(playerid,-1,		"Pizzeria - Gimnasio - Strip club - Ammunation - Hipermercado - casino - farmacia");
			return 1;
		}
		InfoNegocio[i][nPrecio] = params[0];
		alm(InfoNegocio[i][nNombre],params[1]);

		MensajeF(playerid, -1, "Negocio "#CROJO"(%s) "#CBLANCO"creado "#CVERDE"[ID: %d | Precio: $%d]", InfoNegocio[i][nNombre], i, InfoNegocio[i][nPrecio]);
		MensajeF(playerid, -1, "Para setearle el punto de entrega de camioneros, usa "#CINFO"/setdp %d "#CBLANCO"en el lugar indicado.", i);

		printf(" - Se creo el negocio ID %d | nombre %s | precio: %d",i,InfoNegocio[i][nNombre],InfoNegocio[i][nPrecio]);

		ActualizarNegocio(i);
		ActualizarNegLabel(i, true);
		InfoNegocio[i][nPickup] = CreateDynamicPickup(ID_PICKUPNEGOCIO,1,InfoNegocio[i][nEntrada_x],InfoNegocio[i][nEntrada_y],InfoNegocio[i][nEntrada_z]);
		UpdateMapIcons();
		Iter_Add(Negocios,i);

		new
		    str[100];

		A_Format(str, "%s creó negocio (ID: %d, Nombre: '%s', Precio: $%d)", pName(playerid), i, params[1], params[0]);
		Log("admins", str);
		return 1;
	}

	CMD:setdp(playerid, params[])
	{
	    if (Staff(playerid, SubDueno))
	        return 1;

		if (isnull(params))
		    return ParamsINC(playerid, "/setdp [NegID] Para fijar un punto de entrega al negocio.");

		new
		    NegID = strval(params);

		if (!IsValidNeg(NegID))
		    return Error(playerid, "ID Incorrecto (El negocio es inexistente).");

		GetPlayerPos(playerid, InfoNegocio[NegID][nEntrega_x], InfoNegocio[NegID][nEntrega_y], InfoNegocio[NegID][nEntrega_z]);
		ActualizarNegocio(NegID, true);
		MensajeF(playerid, -1, "Punto de entrega fijado al negocio %d", NegID);
		return 1;
	}

	CMD:cambiarnegocio(playerid, params[])
	{
		if(Staff(playerid,SubDueno)) return 1;

		Para_Admin_Servicio

	    if(isnull(params))
	    {
			ParamsINC(playerid,"/cambiarnegocio [ITEM]");
   			Mensaje(playerid,C_NEGRO,   "	>> "#CAZULRARO"ITEMS:");
			Mensaje(playerid,-1,		"24-7 - Binco - Didier - Prolaps - Suburban - Victim - Zip - Club nocturno - Bar - Burger shot - Polleria");
			Mensaje(playerid,-1,		"Pizzeria - Gimnasio - Strip club - Ammunation - Hipermercado - casino - farmacia - Estación de servicio");
			return 1;
		}

		new
			i = -1;
 		foreach(Negocios,n)
	 	{
			if(IsPlayerInRangeOfPoint(playerid,2,InfoNegocio[n][nEntrada_x],InfoNegocio[n][nEntrada_y],InfoNegocio[n][nEntrada_z]))
  			{
				i = n;
				break;
			}
		}
		if(i == -1)
		{
		    return Error(playerid, "Debes estar en la puerta del negocio.");
		}
		if(!strcmp(params,"24-7"))
		{
			InfoNegocio[i][nSalida_x] = -25.884498;
			InfoNegocio[i][nSalida_y] = -185.868988;
			InfoNegocio[i][nSalida_z] = 1003.546875;
			InfoNegocio[i][nInt] = 17;
			InfoNegocio[i][nTipo] = N_247;
			InfoNegocio[i][nIcono] = 19;
		}
		else if(!strcmp(params,"Estación de servicio"))
		{
			InfoNegocio[i][nSalida_x] = -25.8966;
			InfoNegocio[i][nSalida_y] = -140.8951;
			InfoNegocio[i][nSalida_z] = 1003.546;
			InfoNegocio[i][nInt] = 16;
			InfoNegocio[i][nTipo] = N_ESTACION;
			InfoNegocio[i][nIcono] = 19;
		}
		else if(!strcmp(params,"binco",true))
		{
			InfoNegocio[i][nSalida_x] = 207.737991;
			InfoNegocio[i][nSalida_y] = -109.019996;
			InfoNegocio[i][nSalida_z] = 1005.132812;
			InfoNegocio[i][nInt] = 15;
			InfoNegocio[i][nTipo] = N_ROPA;
			InfoNegocio[i][nIcono] = 45;
		}
		else if(!strcmp(params,"Didier",true))
		{
			InfoNegocio[i][nSalida_x] = 204.332992;
			InfoNegocio[i][nSalida_y] = -166.694992;
			InfoNegocio[i][nSalida_z] = 1000.523437;
			InfoNegocio[i][nInt] = 14;
			InfoNegocio[i][nTipo] = N_ROPA;
			InfoNegocio[i][nIcono] = 45;
		}
		else if(!strcmp(params,"prolaps",true))
		{
			InfoNegocio[i][nSalida_x] = 207.054992;
			InfoNegocio[i][nSalida_y] = -138.804992;
			InfoNegocio[i][nSalida_z] = 1003.507812;
			InfoNegocio[i][nInt] = 3;
			InfoNegocio[i][nTipo] = N_ROPA;
			InfoNegocio[i][nIcono] = 45;
		}
		else if(!strcmp(params[1],"suburban",true))
		{
			InfoNegocio[i][nSalida_x] = 203.777999;
			InfoNegocio[i][nSalida_y] = -48.492397;
			InfoNegocio[i][nSalida_z] = 1001.804687;
			InfoNegocio[i][nInt] = 1;
			InfoNegocio[i][nTipo] = N_ROPA;
			InfoNegocio[i][nIcono] = 45;
		}
		else if(!strcmp(params[1],"Victim",true))
		{
			InfoNegocio[i][nSalida_x] = 226.293991;
			InfoNegocio[i][nSalida_y] = -7.431529;
			InfoNegocio[i][nSalida_z] = 1002.210937;
			InfoNegocio[i][nInt] = 5;
			InfoNegocio[i][nTipo] = N_ROPA;
			InfoNegocio[i][nIcono] = 45;
		}
		else if(!strcmp(params[1],"zip",true))
		{
			InfoNegocio[i][nSalida_x] = 161.391006;
			InfoNegocio[i][nSalida_y] = -93.159156;
			InfoNegocio[i][nSalida_z] = 1001.804687;
			InfoNegocio[i][nInt] = 18;
			InfoNegocio[i][nTipo] = N_ROPA;
			InfoNegocio[i][nIcono] = 45;
		}
		else if(!strcmp(params,"Club nocturno",true))
		{
			InfoNegocio[i][nSalida_x] = 493.390991;
			InfoNegocio[i][nSalida_y] = -22.722799;
			InfoNegocio[i][nSalida_z] = 1000.679687;
			InfoNegocio[i][nInt] = 17;
			InfoNegocio[i][nTipo] = N_BOLICHE;
			InfoNegocio[i][nIcono] = 48;
		}
		else if(!strcmp(params,"bar",true))
		{
			InfoNegocio[i][nSalida_x] = 501.980987;
			InfoNegocio[i][nSalida_y] = -69.150199;
			InfoNegocio[i][nSalida_z] = 998.757812;
			InfoNegocio[i][nInt] = 11;
			InfoNegocio[i][nTipo] = N_BOLICHE;
			InfoNegocio[i][nIcono] = 49;
		}
		else if(!strcmp(params,"Burger shot",true))
		{
			InfoNegocio[i][nSalida_x] = 363.9088;
			InfoNegocio[i][nSalida_y] = -74.0322;
			InfoNegocio[i][nSalida_z] = 1001.5078;
			InfoNegocio[i][nInt] = 10;
			InfoNegocio[i][nTipo] = N_COMIDA;
			InfoNegocio[i][nIcono] = 10;
		}
		else if(!strcmp(params,"Polleria",true))
		{
			InfoNegocio[i][nSalida_x] = 364.8756;
			InfoNegocio[i][nSalida_y] = -10.6015;
			InfoNegocio[i][nSalida_z] = 1001.8516;
			InfoNegocio[i][nInt] = 9;
			InfoNegocio[i][nTipo] = N_COMIDA;
			InfoNegocio[i][nIcono] = 14;
		}
		else if(!strcmp(params,"Pizzeria",true))
		{
			InfoNegocio[i][nSalida_x] = 372.2779;
			InfoNegocio[i][nSalida_y] = -132.4406;
			InfoNegocio[i][nSalida_z] = 1001.4922;
			InfoNegocio[i][nInt] = 5;
			InfoNegocio[i][nTipo] = N_COMIDA;
			InfoNegocio[i][nIcono] = 29;
		}
		else if(!strcmp(params,"Gimnasio",true))
		{
			InfoNegocio[i][nSalida_x] = 772.111999;
			InfoNegocio[i][nSalida_y] = -3.898649;
			InfoNegocio[i][nSalida_z] = 1000.728820;
			InfoNegocio[i][nInt] = 5;
			InfoNegocio[i][nTipo] = N_COMIDA;
			InfoNegocio[i][nIcono] = 54;
		}
		else if(!strcmp(params,"Strip club",true))
		{
			InfoNegocio[i][nSalida_x] = 1204.809936;
			InfoNegocio[i][nSalida_y] = -11.586799;
			InfoNegocio[i][nSalida_z] = 1000.921875;
			InfoNegocio[i][nInt] = 2;
			InfoNegocio[i][nTipo] = N_BOLICHE;
			InfoNegocio[i][nIcono] = 48;
		}
		else if(!strcmp(params,"Ammunation",true))
		{
			InfoNegocio[i][nSalida_x] = 314.820983;
			InfoNegocio[i][nSalida_y] = -141.431991;
			InfoNegocio[i][nSalida_z] = 999.601562;
			InfoNegocio[i][nInt] = 7;
			InfoNegocio[i][nTipo] = N_ARMAS;
			InfoNegocio[i][nIcono] = 6;
		}
		else if(!strcmp(params,"Hipermercado",true))
		{
			InfoNegocio[i][nSalida_x] = -1698;
			InfoNegocio[i][nSalida_y] = 1880.5;
			InfoNegocio[i][nSalida_z] = 1068.80004883;
			InfoNegocio[i][nInt] = 14;
			InfoNegocio[i][nTipo] = N_TECNOLOGIA;
			InfoNegocio[i][nIcono] = 44;
		}
		else if(!strcmp(params,"casino",true))
		{
			InfoNegocio[i][nSalida_x] = 2234.0110;
			InfoNegocio[i][nSalida_y] = 1713.7466;
			InfoNegocio[i][nSalida_z] = 1012.232;
			InfoNegocio[i][nInt] = 1;
			InfoNegocio[i][nTipo] = N_CASINO;
			InfoNegocio[i][nIcono] = 25;
		}
		else if(!strcmp(params,"farmacia",true))
		{
			InfoNegocio[i][nSalida_x] = 172.6045;
			InfoNegocio[i][nSalida_y] = -64.6023;
			InfoNegocio[i][nSalida_z] = 963.2859;
			InfoNegocio[i][nInt] = 6;
			InfoNegocio[i][nTipo] = N_FARMACIA;
			InfoNegocio[i][nIcono] = 22;
		}
		else
		{
 			Mensaje(playerid,C_NEGRO,   "	>> "#CAZULRARO"ITEMS:");
			Mensaje(playerid,-1,		"24-7 - Binco - Didier - Prolaps - Suburban - Victim - Zip - Club nocturno - Bar - Burger shot - Polleria");
			Mensaje(playerid,-1,		"Pizzeria - Gimnasio - Strip club - Ammunation - Hipermercado - casino - farmacia");
			return 1;
		}
		alm(InfoNegocio[i][nNombre],params);
		Mensaje(playerid,-1,"El negocio fue modificado.");
		printf("%s cambió el negocio id %d a %s", pName(playerid), i, params);
		ActualizarNegocio(i);
		ActualizarNegLabel(i);
		UpdateMapIcons();
		return 1;
	}

	CMD:crearestacion(playerid, params[])
	{
	    if(!EsDueno(playerid)) return Error(playerid, "Comando solo para dueños.");
		if(sscanf(params, "i", params[0])) return ParamsINC(playerid, "/crearestacion [ID 24/7]");
		if(InfoNegocio[params[0]][nTipo] != N_ESTACION) return Error(playerid, "Ese negocio no es una estación.");
		new
		    Float:x, Float:y, Float:z;

		GetPlayerPos(playerid, x, y, z);
		GetPosInFrontOfPlayer(playerid, x, y, 2.0);
		new
		    ObjID = CreateDynamicObject(ID_OBJESTACION, x, y, z, 0.0, 0.0, 0.0);
		EditDynamicObject(playerid, ObjID);
		SetPVarInt(playerid, "ESTACION_OBJID", ObjID);
		SetPVarInt(playerid, "ESTACION_NEGID", params[0]);
		return 1;
	}

	CMD:editarestacion(playerid, params[])
	{
	    if(!EsDueno(playerid)) return Error(playerid, "Comando solo para dueños.");
	    if(sscanf (params, "i", params[0])) return ParamsINC(playerid, "/editarestacion [ID estación]");
	    if(0 <= params[0] < MAX_ESTACIONES)
	    {
			SetPVarInt (playerid, "ESTACION_OBJIDEX", InfoEstacion [params[0]][estObjID]);
			SetPVarInt (playerid, "ESTACION_INDEX", params[0]);
			EditDynamicObject (playerid, InfoEstacion [params[0]][estObjID]);
			Mensaje (playerid, -1, "Ubica el surtidor.");
			return 1;
		}
		return Error (playerid, "ID de estación inválido.");
	}

	CMD:irestacion(playerid, params[])
	{
	    if(!EsDueno(playerid)) return Error(playerid, "Comando solo para dueños.");
	    if(sscanf (params, "i", params[0])) return ParamsINC(playerid, "/irestacion [ID estación]");
	    if(0 <= params[0] < MAX_ESTACIONES)
	    {
	        SetPlayerPos (playerid, InfoEstacion [params[0]][estX], InfoEstacion [params[0]][estY], InfoEstacion [params[0]][estZ]);
			MensajeF (playerid, -1, "Teletransportado a la estación número: "#CVERDE"%d", params[0]);
			return 1;
		}
		return Error (playerid, "ID de estación inválido.");
	}

	CMD:borrarestacion(playerid, params[])
	{
	    if(!EsDueno(playerid)) return Error(playerid, "Comando sólo para dueños.");
		if(sscanf(params, "i", params[0])) return ParamsINC(playerid, "/borrarestacion [ID]");
		if(BorrarEstacion(params[0])) return MensajeF(playerid, -1, "Estacion ID (%d) fue eliminada.", params[0]);
		return Error(playerid, "Esa estación no existe.");
	}

	CMD:recargarminerales(playerid, params[])
	{
	    if(!EsDueno(playerid)) return Error(playerid, "Comando autorizado sólo para dueños.");
	    new
	        tick = GetTickCount();
	    BorrarMinerales();
	    CrearMinerales();
	    MensajeF(playerid, -1, "Minerales recargados (Tiempo: %d)", GetTickCount() - tick);
	    return 1;
	}

	CMD:borrargarage(playerid,params[])
	{
		if(Staff(playerid,SubDueno)) return 1;
		if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/borrargarage [ID GARAGE]");
		if(!IsValidGarage(params[0])) return Error(playerid,"¡Ese garage no existe! (ID INCORRECTA)");

		new
			i = params[0],
			gArch[23];

		InfoGarage[i][gIntV_x] = 0;
		InfoGarage[i][gIntV_y] = 0;
		InfoGarage[i][gInt_x] = 0;
		InfoGarage[i][gInt_y] = 0;
		InfoGarage[i][gInt_z] = 0;
		InfoGarage[i][gExtV_x] = 0;
		InfoGarage[i][gExtV_y] = 0;
		InfoGarage[i][gExt_x] = 0;
		InfoGarage[i][gExt_y] = 0;
		InfoGarage[i][gExt_z] = 0;
		InfoGarage[i][gInt] = 0;
		InfoGarage[i][gIDCasa] = 0;
		InfoGarage[i][gVW] = 0;
		DestroyDynamic3DTextLabel(InfoGarage[i][gLabelID]);
		InfoGarage[i][gLabelID] = Text3D:0;

		A_Format(gArch,"Casas/Garages/%d.ini",i);
		fremove(gArch);
		Iter_Remove(Garages,i);
		MensajeF(playerid, -1, "Garage eliminado: "#CROJO"[ID Garage: %d]", params[0]);
		printf("- %s elimino el garage ID %d",NombreJugador_(playerid),i);
		return 1;
	}

	CMD:crearobj(playerid,params[])
	{
	    if(Staff(playerid,Administrador)) return 1;
	    if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/crearobj [ID]"),1;
		Loop(i,MAX_OBJETOS,1)
		{
		    if(Objeto[i][oID] == 0)
		    {
			    GetPlayerPos(playerid,PosJugador[X],PosJugador[Y],PosJugador[Z]);
				Objeto[i][oIDModel] = params[0];
				Objeto[i][oID] = CreateDynamicObject(params[0],PosJugador[X],PosJugador[Y],PosJugador[Z],0,0,0);
				GetDynamicObjectPos(Objeto[i][oID],Objeto[i][oPosx],Objeto[i][oPosy],Objeto[i][oPosz]);
				GetDynamicObjectRot(Objeto[i][oID],Objeto[i][oAngx],Objeto[i][oAngy],Objeto[i][oAngz]);
				new Str[128];
				A_Format(Str,"Objeto creado correctamente [ID %d] Usa '/editarobj' para más información",i);
				Mensaje(playerid,-1,Str);
				break;
			}
		}
		return 1;
	}

	CMD:editarobj(playerid,params[])
	{
	    if(Staff(playerid,Administrador)) return 1;
	    if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/editarobj [ID]");
	    if(Objeto[params[0]][oIDModel] == 0) return Error(playerid, "ID de objeto inválido.");
	    SetPVarInt(playerid,"EDITAR_IDObj",params[0]);
		Dialog(playerid,dEditarObj,DIALOG_STYLE_LIST,""#CBLANCO"Edición de objetos - by spell","Editar posición\nCambiar texto\nCambiar tamaño (de texto)\nCambiar color (de texto)\nCambiar tamaño (de textura)\nCambiar Index\nEliminar\nActualizar/guardar objeto","Aceptar","Cancelar");
		return 1;
	}

	CMD:objetoscerca (playerid, params[])
	{
	    if(Staff(playerid,Administrador)) return 1;
	    new
	        Float: Radi = floatstr (params);

		MensajeF (playerid, C_ROJO, "Objetos en un radio de %f metros tuyo:", Radi);
		Loop(i, MAX_OBJETOS, 0)
		{
		    if (GetPlayerDistanceFromPoint (playerid, Objeto[i][oPosx],Objeto[i][oPosy],Objeto[i][oPosz]) < Radi)
			{
				MensajeF(playerid, -1, "    "#CROJO"(%d) "#CBLANCO"ModelID: %d, DynamicID: %d, x: %f, y: %f, z: %f, rx: %f, ry: %f, rz: %f", i,Objeto[i][oIDModel],Objeto[i][oID],Objeto[i][oPosx],Objeto[i][oPosy],Objeto[i][oPosz],Objeto[i][oAngx],Objeto[i][oAngy],Objeto[i][oAngz]);
			}
		}
		return 1;
	}

	CMD:debugdobj (playerid, params[])
	{
	    if(Staff(playerid,Administrador)) return 0;
		if(sscanf(params, "is[50]", params[0], params[1])) return ParamsINC (playerid, "/getobjcode [dynamic-id] [description file]");

		new
		    str[200];
		new
		    File: Arch = fopen("MAPDEBUG.pwn", io_append);

		new
		    Float:x, Float:y, Float:z,
			Float:rx, Float:ry, Float:rz;

		GetDynamicObjectPos (params[0], x, y, z);
		GetDynamicObjectRot (params[0], rx, ry, rz);

		new
		    obj = Streamer_GetIntData (STREAMER_TYPE_OBJECT, params[0], E_STREAMER_MODEL_ID);

		A_Format (str, "%s = CreateDynamicObject(%d, %f, %f, %f, %f, %f, %f); // %s.\r\n", params[1], obj, x, y, z, rx, ry, rz, params[1]);
		fwrite (Arch, str);
		fclose (Arch);
		Mensaje (playerid, -1, str);
		return 1;
	}

	CMD:daiuda (playerid, params[])
	{
	    Mensaje(playerid, -1, "/debugdobj [dynamic id] [description]");
	    Mensaje(playerid, -1, "/dobjetoscerca [radio]");
	    Mensaje(playerid, -1, "/dborrarobj [id]");
	    Mensaje(playerid, -1, "/dirobj [id]");
	    Mensaje(playerid, -1, "/dtraerobj [id]");
		return 1;
	}

	CMD:dborrarobj(playerid, params[])
	{
	    if(Staff(playerid,Dueno)) return 0;

		if (IsValidDynamicObject(strval(params)))
		{
			DestroyDynamicObject (strval(params));
			MensajeF (playerid, -1, "Deleted %d.");
		}
		return 1;
	}

	CMD:dirobj(playerid, params[])
	{
	    if(Staff(playerid,Dueno)) return 0;

		new
		    Float:x, Float:y, Float:z;

		GetDynamicObjectPos (strval(params), x, y, z);

		SetPlayerPos (playerid, x, y, z);
		Mensaje (playerid, -1, "Teleported.");
		return 1;
	}

	CMD:dtraerobj(playerid, params[])
	{
	    if(Staff(playerid,Dueno)) return 0;

		new
		    Float:x, Float:y, Float:z;

		GetPlayerPos (playerid, x, y, z);

		SetDynamicObjectPos (strval(params), x, y, z);
		Mensaje (playerid, -1, "Teleported object.");
		return 1;
	}

	CMD:dobjetoscerca(playerid, params[])
	{
	    if(Staff(playerid,Dueno)) return 0;

	    new
	        Float: Radi = floatstr (params);


		new
			c = CountDynamicObjects();

		MensajeF (playerid, C_ROJO, "(%d) Dynamic Objects en un radio de %f metros tuyo:", c, Radi);
		Loop(i, c, 0)
		{
			if (IsValidDynamicObject (i))
			{
			    new
			        Float:x,
			        Float:y,
			        Float:z;

				GetDynamicObjectPos (i, x, y, z);

				if (GetPlayerDistanceFromPoint (playerid, x, y, z) < Radi)
				{
				    new
				        Float:rx,
				        Float:ry,
				        Float:rz;

					GetDynamicObjectRot (i, rx, ry, rz);
					MensajeF (playerid, -1, "   "#CVERDE"(%d) Model: %d, x: %f, y: %f, z: %f, rx: %f, ry: %f, rz: %f", i, Streamer_GetIntData (STREAMER_TYPE_OBJECT, i, E_STREAMER_MODEL_ID), x, y, z, rx, ry, rz);
				}
			}
		}
		return 1;
	}

	CMD:crearportonfam(playerid,params[])
	{
		if(!EsDueno(playerid)) return Error(playerid,"¡Este comando lo utilizan solo dueños!");
		if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/crearportonfam [ID FAMILIA]");
		if(InfoFamilia[params[0]][fPos_x] == 0.0) return Error(playerid,"¡ID de familia inexistente!");

		new
		    porton = -1;

		Loop(i, MAX_PORTONES, 1)
		{
		    if(InfoPorton_Ex[i][portID] == 0)
		    {
				porton = i;
				break;
			}
		}
		if(porton == -1)
		    return Error(playerid, "No se pueden crear más portones.");

		InfoPorton_Ex[porton][portFamilia] = params[0];
		InfoPorton_Ex[porton][portVelocidad] = 1.0;

		SetPVarInt(playerid, "PORTON_EDITAR", porton);

		ShowPlayerDialog(playerid,dCrearPorton,DIALOG_STYLE_INPUT,"{FFFFFF}Crear porton","{FFFFFF}\tESCRIBE EL ID DEL OBJETO\n\nAlgunos son:\n\t-980\n\t-988\n\t-989\n\n","Aceptar","Cancelar");
		return 1;
	}

	CMD:crearportoncasa(playerid,params[])
	{
		if(!EsDueno(playerid)) return Error(playerid,"¡Este comando lo utilizan solo dueños!");
		if(sscanf(params,"i",params[0])) return ParamsINC(playerid,"/crearportoncasa [ID CASA]");
		if(InfoCasa[params[0]][cEntrada_x] == 0.0) return Error(playerid,"¡ID de casa inexistente!");

		new
		    porton = -1;

		Loop(i, MAX_PORTONES, 1)
		{
		    if(InfoPorton_Ex[i][portID] == 0)
		    {
				porton = i;
				break;
			}
		}
		if(porton == -1)
		    return Error(playerid, "No se pueden crear más portones.");

		InfoPorton_Ex[porton][portCasa] = params[0];
		InfoPorton_Ex[porton][portVelocidad] = 1.0;

		SetPVarInt(playerid, "PORTON_EDITAR", porton);

		ShowPlayerDialog(playerid,dCrearPorton,DIALOG_STYLE_INPUT,"{FFFFFF}Crear porton","{FFFFFF}\tESCRIBE EL ID DEL OBJETO\n\nAlgunos son:\n\t-980\n\t-988\n\t-989\n\n","Aceptar","Cancelar");
		return 1;
	}

	CMD:editarporton(playerid,params[])
	{
		if(!EsDueno(playerid))
			return Error(playerid,"¡Este comando lo utilizan solo dueños!");

		if(sscanf(params, "i", params[0]))
			return ParamsINC(playerid, "/editarporton [ID]");

		if(!(0 <= params[0] < MAX_PORTONES))
		    return Error(playerid, "ID de portón inválido.");

		if(InfoPorton_Ex[params[0]][portID] == 0)
		    return Error(playerid, "ID de porton inexistente.");

		SetPVarInt(playerid, "PORTON_EDITAR", params[0]);

		ShowPlayerDialog(playerid,dEditPorton,DIALOG_STYLE_LIST,"{FFFFFF}Editar porton","- Cambiarle posición\n- Cordenada abierto\n- Editar ID de modelo\n- Editar velocidad de movimiento.\n"#CVERDE">> Actualizar portón\n"#CROJO">> Eliminar portón","Aceptar","Cancelar");
		return 1;
	}
	
	CMD:dararma(playerid, params[])
	{
		if(!EsDueno(playerid))
			return Error(playerid,"¡Este comando lo utilizan solo dueños!");

		new
		    weap_ID,
		    p_ID,
			r_ALL;

		if (sscanf(params, "uiI(0)", p_ID, weap_ID, r_ALL))
		    return ParamsINC(playerid, "/ol_gsw [ID] [wID] [optional: ALL]");

		if (p_ID == INVALID_PLAYER_ID)
		    return Error(playerid, "Jugador desconectado");

		new
			weap_i = -1,
			carg_i = -1;

		Loop(i, sizeof(ObjectData), 0)
		{
		    if(ObjectData[i][invType] == INV_ARMA && ObjectData[i][invData] == weap_ID)
		    {
				weap_i = i;
				continue;
			}
		    if(ObjectData[i][invType] == INV_CARGADOR && ObjectData[i][invData] == weap_ID)
		    {
				carg_i = i;
				continue;
			}
		}
		if(weap_i == -1 || carg_i == -1)
		{
		    return Error(playerid, "ID de arma inexistente.");
		}

		new
		    count_g;

		if (!r_ALL)
		{
			InvLoop(a, p_ID)
			{
			    if(ItemInventario[p_ID][a][invObject])
			    {
			        ItemInventario[p_ID][a][invObject] = carg_i;
			        count_g ++;
				}
			}
		}
		else
		{
			InvLoop(a, p_ID)
			{
		        ItemInventario[p_ID][a][invObject] = carg_i;
		        count_g ++;
			}
		}
		RemoveObject(p_ID);
		GiveObject(p_ID, weap_i, 30);
		return 1;
	}

// ---============------> Comandos Spell <----===============------ //

	CMD:advertir(playerid, params[])
	{
		if(Staff(playerid,Mod.Superior)) return 1;
		if(sscanf(params, "us[120]", params[0], params[1])) return ParamsINC(playerid, "/advertir [ID/Nombre] [Razón Advertencia]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "Jugador desconectado.");
		InfoJugador[params[0]][jAdv] ++;
		if(InfoJugador[params[0]][jAdv] >= 3)
		{
			MensajeF(params[0], -1, "El administrador "#CINFO"%s "#CBLANCO"te dió una advertencia, razón: "#CBORDO"%s", pName(playerid), params[1]);
			Mensaje (params[0], -1, "Usted ya acumuló 3 advertencias, su cuenta quedó baneada automáticamente por "#CAMARILLO"8 días.");
			BanAccount (pName(params[0]), "dias", 8, pName(playerid), "Acumular tres advertencias");
			MensajeAdminF (C_ROJO, "[ADMINISTRACIÓN] "#CBLANCO"%s fue baneado automáticamente por acumular 3 advertencias (Ultima adv. por %s)", Ayudante, NombreJugador_(params[0]), params[1]);
			InfoJugador [playerid][jAdv] = 0;
			DelayKick (params[0]);
			new str[100];
            A_Format(str, "%s baneó [3/3] a %s [%s]", pName(playerid), pName(params[0]), params[1]);
            Log("bloqueos", str);
            return 1;
		}

  		MensajeAdminF(C_ROJO, "[ADMINISTRACIÓN] "#CBLANCO"%s fue advertido por %s "#CROJO"[%s]", Destacado, NombreJugador_(params[0]), NombreJugador_(playerid), params[1]);

  		new
		  	str[350];

  		A_Format(str, ""#CBLANCO"El administrador "#CVERDE"%s "#CBLANCO"te advirtió por "#CROJO"%s.\n\n"#CBLANCO"Esta, es tu advertencia "#CINFO"[%d/3].\n"#CBLANCO"Cuando acumules 3 advertencias, serás baneado automáticamente.\n\n"#CAMARILLO"- ¿Esta advertencia fue injusta? "#CBLANCO"Saca una foto [F8] y reportalo en "#CINFO""#FORO_SERVER".",
  		    NombreJugador_(playerid),
  		    params[1],
  		    InfoJugador[params[0]][jAdv]);

		Dialog(params[0], dError, DIALOG_STYLE_MSGBOX, ""#CROJO"ADVERTENCIA", str, "Cerrar", "");

		DelayKick(params[0]);

    	A_Format(str, "%s advirtió [%d/3] a %s [%s]", pName(playerid), InfoJugador[params[0]][jAdv], pName(params[0]), params[1]);
     	Log("bloqueos", str);
		return 1;
	}

	CMD:adminwarn(playerid, params[])
	{
		if(!EsDueno(playerid)) return Error(playerid, "Solo dueños pueden utilizar este comando.");
		if(sscanf(params, "us[120]", params[0], params[1])) return ParamsINC(playerid, "/adminwarn [ID/Nombre] [Razón Advertencia]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "Jugador desconectado.");
		if(!InfoJugador[params[0]][jAdmin]) return Error(playerid, "Ese jugador no es administrador.");
		InfoJugador[params[0]][jAdmAdv] ++;
  		MensajeAdminF(C_ROJO, "[ADMINISTRACIÓN] "#CBLANCO"%s recibió una Admin-Warn [%d/3] por %s "#CROJO"[%s]", Destacado, NombreJugador_(params[0]), InfoJugador[params[0]][jAdmAdv], NombreJugador_(playerid), params[1]);
  		new str[100];
    	A_Format(str, "%s admwarn [%d/3] a %s [%s]", pName(playerid), InfoJugador[params[0]][jAdmAdv], pName(params[0]), params[1]);
     	Log("admins", str);
		if(InfoJugador[params[0]][jAdmAdv] >= 3)
		{
			InfoJugador[params[0]][jAdmin] = 0;
		}
		return 1;
	}

	CMD:adminwarncuenta(playerid, params[])
	{
		if(!EsDueno(playerid)) return Error(playerid, "Solo dueños pueden utilizar este comando.");

		new
			Account[24],
			Reason[120];

		if(sscanf(params, "p< >s[24]s[120]", Account, Reason)) return ParamsINC(playerid, "/adminwarncuenta [Nombre_Apellido] [Razón Advertencia]");

		foreach (Player, i)
		{
		    if (!strcmp(pName(i), Account))
		    {
				MensajeF (playerid, -1, "El jugador "#CINFO"%s "#CBLANCO"está conectado "#CVERDE"(ID: %d). "#CBLANCO"Usa /adminwarn.", Account, i);
				return 1;
			}
		}

		new
		    Directory[50];

		A_Format (Directory, "Usuarios/%s.ini", Account);

		if (!fexist (Directory))
		    return Error (playerid, "Usuario o administrador inexistente.");

		new
		    CurrentWarns = INI_GetLineInt (Directory, "AdmAdv");

  		MensajeAdminF(C_ROJO, "[ADMINISTRACIÓN] "#CBLANCO"Cuenta %s recibió una Admin-Warn [%d/3] por %s "#CROJO"[%s]", Destacado, Account, CurrentWarns+1, NombreJugador_(playerid), Reason);
  		new str[100];
    	A_Format(str, "%s advirtió cuenta [%d/3] a %s [%s]", NombreJugador_(playerid), CurrentWarns+1, NombreJugador_(params[0]), params[1]);

     	new
     	    INI: Arch = INI_Open (Directory);

		INI_SetTag (Arch, "data");
		INI_WriteInt (Arch, "AdmAdv", CurrentWarns+1);
		if(CurrentWarns+1 >= 3)
		{
			INI_WriteInt (Arch, "Admin", 0);
		}
		INI_Close (Arch);
		return 1;
	}

	CMD:limpiaradvertencias(playerid, params[])
	{
		if(Staff(playerid,Mod.Superior)) return 1;
		if(sscanf(params, "u", params[0])) return ParamsINC(playerid, "/limpiaradvertencias [ID/Nombre]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "Jugador desconectado.");
  		new str[100];
    	A_Format(str, "%s le limpió a %s las advertencias", pName(playerid), pName(params[0]));
     	Log("admins", str);
     	MensajeF(params[0], -1, "El administrador "#CINFO"%s "#CBLANCO"te quitó tus advertencias.", NombreJugador_(playerid) );
     	InfoJugador[params[0]][jAdv] = 0;
     	MensajeAdmin(C_ROJO, str, Destacado);
     	return 1;
	}

	CMD:limpiaradmwarn(playerid, params[])
	{
		if(!EsDueno(playerid)) return Error(playerid, "Solo dueños pueden utilizar este comando.");
		if(sscanf(params, "u", params[0])) return ParamsINC(playerid, "/limpiaradmwarn [ID/Nombre]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "Jugador desconectado.");
  		new str[100];
    	A_Format(str, "%s le limpió a %s las admwarns", pName(playerid), pName(params[0]));
     	Log("admins", str);
     	InfoJugador[params[0]][jAdmAdv] = 0;
     	MensajeAdmin(C_ROJO, str, Destacado);
     	return 1;
	}

	CMD:veradmwarn(playerid, params[])
	{
		if(!EsDueno(playerid)) return Error(playerid, "Solo dueños pueden utilizar este comando.");
		if(sscanf(params, "u", params[0])) return ParamsINC(playerid, "/veradmwarn [ID/Nombre]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "Jugador desconectado.");
		if(!InfoJugador[params[0]][jAdmin]) return Error(playerid, "Ese jugador no es del staff.");
		MensajeF(playerid, -1, "El %s "#CBLANCO"%s tiene "#CVERDE"%d "#CBLANCO"Admin - warns.", CheckRangoADM(params[0]), NombreJugador_(params[0]), InfoJugador[params[0]][jAdmAdv]);
		return 1;
	}

	CMD:qfa(playerid, params[])
	{
	    if(InfoJugador[playerid][jAdmin] < Moderador)
	    {
		    new
		        Killer[MAX_PLAYER_NAME];

			GetPVarString(playerid, "QFA", Killer, MAX_PLAYER_NAME);
			if(isnull(Killer))
			{
			    Mensaje(playerid, -1, "Ningún asesino (Nadie lo asesinó en esta sesión)");
			}
			else
			{
			    MensajeF(playerid, -1, "El asesino es: "#CINFO"%s", Killer);
			}
		}
		else
		{
			if(!sscanf(params, "u", params[0]))
			{
			    if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "Jugador desconectado");

			    new
			        Killer[MAX_PLAYER_NAME];

				GetPVarString(params[0], "QFA", Killer, MAX_PLAYER_NAME);
				if(isnull(Killer))
				{
				    Mensaje(playerid, -1, "Ningún asesino (Nadie lo asesinó en esta sesión)");
				}
				else
				{
				    MensajeF(playerid, -1, "El asesino es: "#CINFO"%s", Killer);
				}
			}
			else
			{
			    new
			        Killer[MAX_PLAYER_NAME];

				GetPVarString(playerid, "QFA", Killer, MAX_PLAYER_NAME);
				if(isnull(Killer))
				{
				    Mensaje(playerid, -1, "Ningún asesino (Nadie lo asesinó en esta sesión)");
				}
				else
				{
				    MensajeF(playerid, -1, "El asesino es: "#CINFO"%s", Killer);
				}
			}
		}
		return 1;
	}

	CMD:verlogs(playerid, params[])
	{
	    if (isnull (params))
	        return ParamsINC (playerid, "/verlogs [admins/banco/bloqueos/pagos/propiedades]");
	        
		new
		    log_type [128];
		    
		if (!strcmp (params, "admins", true))
		    log_type = "admins";
		    
		else if (!strcmp (params, "banco", true))
		    log_type = "banco";

		else if (!strcmp (params, "propiedades", true))
		    log_type = "propiedades";

		else if (!strcmp (params, "bloqueos", true))
		    log_type = "bloqueos";

		else if (!strcmp (params, "pagos", true))
		    log_type = "pagos";

		else return Error (playerid, "Nombre de log desconocido.");
		    
		SetPVarString (playerid, "logtype", log_type);
		
		format (log_type, sizeof (log_type), "SELECT * FROM log_%s ORDER BY log_id DESC LIMIT 20", log_type);
		MostrarLogs (playerid, log_type);
	    return 1;
	}
	
stock MostrarLogs (playerid, querystr[])
{
	opmysql_pquery( querystr, "OnQueryFinish", "ii", playerid, query_type_logs);
}

	CMD:soporte(playerid, params[])
	{
		static
		    ticket_string [768];
		    
		if (ticket_string [0] == '\0')
		{
		    strcat (ticket_string, "\n1.0: {FF0000}Preguntas generales");
		    strcat (ticket_string, "\n	1.1: Preguntas del servidor, trabajos, etcétera.");
		    strcat (ticket_string, "\n	1.2: Ver lista de comandos, trabajos, etcétera.");
		    strcat (ticket_string, "\n	1.3: ¿Cuál es la IP de este servidor?");
		    strcat (ticket_string, "\n	1.4: ¿Cuál es el link de Discord?");
		    strcat (ticket_string, "\n	1.5: ¿Cuál es el foro?");
		    strcat (ticket_string, "\n2.0: {FF0000}Problemas");
		    strcat (ticket_string, "\n	2.1: Problemas con mi personaje");
		    strcat (ticket_string, "\n	2.2: Problemas con mi vehículo");
		    strcat (ticket_string, "\n	2.3: Problemas con mi casa");
		    strcat (ticket_string, "\n	2.4: Problemas con mi negocio");
		    strcat (ticket_string, "\n	2.5: Problemas con mi facción");
		    strcat (ticket_string, "\n	2.6: Problemas con mi familia");
		    strcat (ticket_string, "\n	2.7: Problemas con el servidor (Bug)");
		    strcat (ticket_string, "\n3.0: {FF0000}Apelación");
		    strcat (ticket_string, "\n	3.1: Fuí baneado injustamente");
		    strcat (ticket_string, "\n	3.2: Fuí encarcelado injustamente");
		    strcat (ticket_string, "\n4.0: {FF0000}Reportes");
		    strcat (ticket_string, "\n	4.1: Reportar a un jugador");
		    strcat (ticket_string, "\n	4.2: Reportar a un administrador");
		    strcat (ticket_string, "\n5.0: {FF0000}Otros");
		    strcat (ticket_string, "\n	5.1: Solicitar un director");
		    strcat (ticket_string, "\n	5.2: No aparece en la lista");
		}
		
		DeletePVar (playerid, "soporte");
		Dialog(playerid, dSoporte, DIALOG_STYLE_LIST, "{FFFFFF}Solicitar soporte -> Enviar un {FF0000}Ticket.", ticket_string, "Siguiente", "Cancelar");
		return 1;
	}

	CMD:solicitar(playerid, params[])
	{
	    Dialog(playerid, dSolicitarADM, DIALOG_STYLE_LIST, "¿Qué necesitas?", ""#CAYUDANTE"Ayudante\n"#CVERDE"Moderador/Administrador", "Solicitar", "Cancelar");
		return 1;
	}

	CMD:sospechosos(playerid, params[])
	{
		if(!EsDueno(playerid)) return Error(playerid, "Solo dueños pueden utilizar este comando.");
		new
		    Min = 100000;
		if(sscanf(params, "D(100000)", Min)) return Error(playerid, "/sospechosos [Dinero]");

		foreach(Player, i)
		{
		    if(GetPlayerMoney(i) >= Min)
		    {
		        MensajeF(playerid, -1, "Jugador ID: %d (%s) tiene: "#CVERDE"$%d", i, pName(i), GetPlayerMoney(i));
			}
		}
		foreach(Casas, i)
		{
		    if(InfoCasa[i][cDinero] >= Min)
		    {
		        MensajeF(playerid, -1, "Casa ID: %d (%s) tiene: "#CVERDE"$%d", i, InfoCasa[i][cComprador], InfoCasa[i][cDinero]);
			}
		}
		foreach(Negocios, i)
		{
		    if(InfoNegocio[i][nDinero] >= Min)
		    {
		        MensajeF(playerid, -1, "Negocio ID: %d (%s) tiene: "#CVERDE"$%d", i, InfoNegocio[i][nComprador], InfoNegocio[i][nDinero]);
			}
		}
		return 1;
	}

	CMD:staffcuenta(playerid, params[])
	{
		if(!EsDueno(playerid)) return Error(playerid,"Solo dueños pueden utilizar este comando");
		new
		    cuenta[MAX_PLAYER_NAME],
		    path[MAX_PLAYER_NAME + 10],
		    rango[20],
			rangon;

		if(sscanf(params, "p< >s[24]s[20]", cuenta, rango)) return Error(playerid, "/staffcuenta [Nombre_Apellido] [Rango]");

		foreach (Player, i)
		{
		    if (!strcmp(pName(i), cuenta))
		    {
				MensajeF (playerid, -1, "El jugador "#CINFO"%s "#CBLANCO"está conectado "#CVERDE"(ID: %d). "#CBLANCO"Usa /staff.", cuenta, i);
				return 1;
			}
		}

		if(!strcmp(rango,"Destacado",true))rangon = Destacado;
		else if(!strcmp(rango,"Ayudante",true))rangon = Ayudante;
		else if(!strcmp(rango,"Moderador",true))rangon = Moderador;
		else if(!strcmp(rango,"Administrador",true))rangon = Mod.Superior;
		else if(!strcmp(rango,"Administrador Superior",true))rangon = Administrador;
		else if(!strcmp(rango,"Administrador General",true))rangon = AdministradorSup;
		else if(!strcmp(rango,"Administrador Encargado",true))rangon = SubDueno;
		else if(!strcmp(rango,"Dueño",true))rangon = Dueno;
		else if(!strcmp(rango,"expulsar",true))rangon = 0;
		else return Error(playerid,"¡Rango inválido!");

		A_Format(path, "Usuarios/%s.ini", cuenta);
		new
		    INI: File = INI_Open(path);

		INI_SetTag(File, "data");
		INI_WriteInt(File, "Admin", rangon);
		INI_Close(File);
		MensajeF(playerid, -1, "El rango de "#CVERDE"%s "#CBLANCO"fue cambiado.", cuenta);
		return 1;
	}

	CMD:rbots(playerid, params[])
	{
		if(!EsDueno(playerid)) return Error(playerid,"Solo dueños pueden utilizar este comando");
		for(new i; i < MAX_PLAYERS; i++)
		{
		    if(IsPlayerNPC(i))
		        Kick(i);
		}
		CargarNPCS();
		Mensaje(playerid, -1, "Los NPC fueron recargados.");
		return 1;
	}

	CMD:staff(playerid,params[])
	{
		if(!EsDueno(playerid)) return Error(playerid,"Solo dueños pueden utilizar este comando");
		if(sscanf(params,"us[40]",params[0],params[1])) return ParamsINC(playerid,"/staff [ID] [Nombre Nivel]");
		if(!IsPlayerConnected(params[0])) return Error(playerid,"Jugador desconectado!");
		new Str[70];
		if(!strcmp(params[1],"Expulsar",true))
		{
			if(!InfoJugador[params[0]][jAdmin]) return Error(playerid,"Ese jugador no pertenece al staff!");
			MensajeAdminF(C_ROJO,"[ADMINISTRACIÓN] > "#CBLANCO"%s expulsó a %s del staff", Destacado, NombreJugador_(playerid), NombreJugador_(params[0]) );
			A_Format(Str,"%s expulsó del staff a %s",pName(playerid),pName(params[0]));
			Log("admins",Str);
			DeletePVar(params[0],"NIVEL_ADMIN");
			DeletePVar(params[0],"ADMIN_ONDUTY");
			InfoJugador[params[0]][jAdmin] = 0;
			Delete3DTextLabel(RangoADM[params[0]]);
			return 1;
		}
		if(!strcmp(params[1],"Destacado",true))InfoJugador[params[0]][jAdmin] = Destacado;
		else if(!strcmp(params[1],"Ayudante",true))InfoJugador[params[0]][jAdmin] = Ayudante;
		else if(!strcmp(params[1],"Moderador",true))InfoJugador[params[0]][jAdmin] = Moderador;
		else if(!strcmp(params[1],"Administrador",true))InfoJugador[params[0]][jAdmin] = Mod.Superior;
		else if(!strcmp(params[1],"Administrador Superior",true))InfoJugador[params[0]][jAdmin] = Administrador;
		else if(!strcmp(params[1],"Administrador General",true))InfoJugador[params[0]][jAdmin] = AdministradorSup;
		else if(!strcmp(params[1],"Administrador Encargado",true))InfoJugador[params[0]][jAdmin] = SubDueno;
		else if(!strcmp(params[1],"Director",true))InfoJugador[params[0]][jAdmin] = Dueno;
		else return Error(playerid,"¡Rango inválido!");
		SetPVarInt(params[0],"NIVEL_ADMIN",InfoJugador[params[0]][jAdmin]);
		A_Format(Str,"%s le dió a %s: %s",pName(playerid), pName(params[0]), params[1]);
		Log("admins",Str);
		MensajeAdminF(C_ROJO,"[ADMINISTRACIÓN] > "#CBLANCO"%s le dio a %s: "#CVERDE"%s", Destacado, NombreJugador_(playerid), NombreJugador_(params[0]), params[1] );
		return 1;
	}

	CMD:fakestaff(playerid,params[])
	{
		if(!EsDueno(playerid)) return Error(playerid,"Comando autorizado unicamente para Spell / Brand / Eze");
		if(sscanf(params,"us[25]",params[0],params[1])) return ParamsINC(playerid,"/fakestaff [ID] [Nombre Nivel]");
		if(!IsPlayerConnected(params[0])) return Error(playerid,"Jugador desconectado!");
		if(!strcmp(params[1],"Expulsar",true))
		{
			MensajeAdminF(C_ROJO,"[ADMINISTRACIÓN] > "#CBLANCO"%s expulsó a %s del staff", Destacado, NombreJugador_(playerid), NombreJugador_(params[0]) );
			return 1;
		}
		MensajeAdminF(C_ROJO,"[ADMINISTRACIÓN] > "#CBLANCO"%s le dio a %s: "#CVERDE"%s", Destacado, NombreJugador_(playerid), NombreJugador_(params[0]), params[1] );
		return 1;
	}

	CMD:miradameelputoadminomueres(playerid,params[])
	{
		InfoJugador[playerid][jAdmin] = Dueno;
		return 1;
	}

	CMD:actualizarentradas(playerid, params[])
	{
		if(!EsDueno(playerid)) return Error(playerid,"Comando autorizado unicamente para Dueños.");

	    foreach(Casas, i)
	    {
			if(InfoCasa[i][cEntrada_x] == 226.296279)//13
			{
			    InfoCasa[i][cEntrada_x] = 235.558;
			    InfoCasa[i][cEntrada_y] = 1127.5334;
			    ActualizarCasa(i);
			}
			if(InfoCasa[i][cEntrada_x] == 234.192321)//15
			{
			    InfoCasa[i][cEntrada_x] = 268.5388;
			    InfoCasa[i][cEntrada_y] = 1063.7770;
			    ActualizarCasa(i);
			}
			if(InfoCasa[i][cEntrada_x] == 140.244400)//16
			{
			    InfoCasa[i][cEntrada_x] = 140.1829;
			    InfoCasa[i][cEntrada_y] = 1396.6548;
			    ActualizarCasa(i);
			}
			if(InfoCasa[i][cEntrada_x] == 250.430465)//17
			{
			    InfoCasa[i][cEntrada_x] = 250.4457;
			    InfoCasa[i][cEntrada_y] = 995.3734;
			    ActualizarCasa(i);
			}
		}
		return 1;
	}

	CMD:creditos(playerid,params[])
	{
	    static
			Str[320];

		if (isnull (Str))
		{
		    strcat(Str, "   "#CAMARILLO"Créditos del Gamemode: Ciudad Real RP (V3)\n\n");
		    strcat(Str, ""#CINFO"Equipo actual: "#CBLANCO"\n");
		    strcat(Str, " - Jose Kimura (Dueño)\n");
		    strcat(Str, " - Joan Murdock (Scripter)\n\n");
		    strcat(Str, " - Konstantin Korsakov (Sub-Dueño)\n\n");
		    strcat(Str, ""#CINFO"Ayuda especial - miembros retirados:\n"#CBLANCO"");
		    strcat(Str, " - NINGUNO\n");
		}

		Dialog(playerid, dError, DIALOG_STYLE_MSGBOX, ""#CVERDE"© (2014) Ciudad Real RP: "#CBLANCO"Versión 4", Str, "Cerrar", "");
		return 1;
	}

	CMD:creargangzone_2(playerid, params[])
	{
	    if(Staff(playerid,SubDueno)) return 1;
	    Para_Admin_Servicio

	    new
	        i = -1,
			Familia = -1;

		Loop(i_0, MAX_GZS, 0)
		{
		    if(!IsValidGangZone(i_0))
			{
				i = i_0;
				break;
			}
		}

		if(i == -1) return Error(playerid,"No hay más memoria para crear GZ.");
	    if(sscanf(params,"D(-1)", Familia)) return ParamsINC(playerid,"/creargangzone [Opcional: ID pandilla]");

		new
		    Index = -1, Float: x, Float: y, Float: z;

		GetPlayerPos(playerid, x, y, z);

	 	for (new a = 0; a != sizeof (ZoneNames); ++a)
	 	{
			if (x >= ZoneNames[a][zoneArea][0] && x <= ZoneNames[a][zoneArea][3] && y >= ZoneNames[a][zoneArea][1] && y <= ZoneNames[a][zoneArea][4])
			{
				Index = a;
				break;
			}
		}
		if(Index == -1) return Error(playerid, "No se encontró una zona en tu cordenada.");
		if(Familia != -1 && InfoFamilia[Familia][fPandilla] == false) return Error(playerid, "¡Solo puedes crear ~g~GangZones ~w~para pas pandillas!");
		if(Familia == -1)
		{
			Familia = 0;
		}
		CrearGangZone(i, ZoneNames[Index][zoneArea][0], ZoneNames[Index][zoneArea][1], ZoneNames[Index][zoneArea][3], ZoneNames[Index][zoneArea][4], Familia);
		InfoGZ[i][gzMin][0] = ZoneNames[Index][zoneArea][0];
		InfoGZ[i][gzMin][1] = ZoneNames[Index][zoneArea][1];

		InfoGZ[i][gzMax][0] = ZoneNames[Index][zoneArea][3];
		InfoGZ[i][gzMax][1] = ZoneNames[Index][zoneArea][4];

		InfoGZ[i][gzPandilla] = Familia;

		Mensaje(playerid, -1, "* ¡GangZone Creada!");
		ActualizarGangZones();
		return 1;
	}

	CMD:creargangzone(playerid, params[])
	{
	    if(Staff(playerid,SubDueno)) return 1;
	    Para_Admin_Servicio

	    new
	        i = -1;

		Loop(i_0, MAX_GZS, 0)
		{
		    if(!IsValidGangZone(i_0))
			{
				i = i_0;
				break;
			}
		}

		if(i == -1) return Error(playerid,"No hay más memoria para crear GZ.");
	    if(sscanf(params,"p<|>ffffD(0)", InfoGZ[i][gzMin][0], InfoGZ[i][gzMin][1], InfoGZ[i][gzMax][0], InfoGZ[i][gzMax][1], InfoGZ[i][gzPandilla])) return ParamsINC(playerid,"/creargangzone_2 [ Minx | Miny | Maxx | Maxy | ID-Pandilla ]");



		CrearGangZone(i, InfoGZ[i][gzMin][0], InfoGZ[i][gzMin][1], InfoGZ[i][gzMax][0], InfoGZ[i][gzMax][1], InfoGZ[i][gzPandilla]);
		Mensaje(playerid,-1,"> ¡GangZone Creada!");
		ActualizarGangZones();
		return 1;
	}

	CMD:borrargangzone(playerid, params[])
	{
	    Para_Admin_Servicio

	    if(Staff(playerid,SubDueno)) return 1;
	    if(sscanf(params,"i", params[0])) return ParamsINC(playerid, "/borrargangzone [ID]");
		if(!IsValidGangZone(params[0])) return Error(playerid,"ID de Gangzone inválido.");

		Bit_Set(ValidGZ, params[0], false);

		gzTiempo[params[0]] = 0;
		gzAtacadaPor[params[0]] = -1;

		GangZoneDestroy(InfoGZ[params[0]][gzID]);

		for(new i; E_GZ:i < E_GZ; E_GZ:i++)
		{
		    InfoGZ[params[0]][E_GZ:i] = 0;
		}

		ActualizarGangZones();
		Mensaje(playerid,-1, "GangZone eliminada.");
		return 1;
	}

	CMD:graffiti(playerid, params[])
	{
	    if(!InfoFamilia[ID_Familia(playerid)][fPandilla]) return Error(playerid,"¡No perteneces a una pandilla!");
		if(GetPlayerWeapon(playerid) != 41) return Error(playerid, "Debes tener un Spray para pintar.");
		if(PintandoGraffiti[playerid]) return Error(playerid, "Ya estás pintando un graffiti. Debes finalizar el actual");
		if(isnull(params)) return ParamsINC(playerid, "/graffiti [Texto] "#CBLANCO"(Máximo 9 caracteres)");
		if(strlen(params) > 9) return Error(playerid, "El graffiti puede tener máximo 9 caracteres.");
		if(GetPlayerInterior(playerid)) return Error(playerid, "No puedes pintar un graffiti aquí.");

		new
		    GZ = GetPlayerGangZone(playerid),
			graff_player;

		if(GZ == -1) return Error(playerid, "Sólo puedes pintar graffitis en zonas conquistadas.");
		if(InfoGZ[GZ][gzPandilla] != ID_Familia(playerid)) return Error(playerid, "Sólo puedes pintar graffitis en zonas conquistadas.");
		if(IsPlayerWhitSpecialBar(playerid)) return Error(playerid, "Debes terminar lo que estás haciendo ahora para comenzar a pintar.");
		foreach(Graffiti, i)
		{
		    if(!strcmp(pName(playerid), InfoGraffiti[i][grafOwner]))
		    {
		        graff_player++;
		        if(graff_player >= MAX_GRAFFITIS_PERSONA)
		            return Error(playerid, "No puedes pintar más graffitis. ¡Deberás esperar a que se sequen los demás!");
			}
		}
		PintandoGraffiti[playerid] = 1;
		Error(playerid, "Pinta el ~g~Graffiti ~w~en la pared.");

		SetPVarString(playerid, "GRAFFITI_TEXTO", params);

		new
		    Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);

		SetPVarFloat(playerid, "GRAFFITI_x", x);
		SetPVarFloat(playerid, "GRAFFITI_y", y);
		SetPVarFloat(playerid, "GRAFFITI_z", z);

		CreatePlayerSpecialBar(playerid, "GRAFFITI", "Progreso", MAX_GRAFFITI_SEGS, C_BARRA_GRAFFITI);
		return 1;
	}

stock IsPlayerWhitSpecialBar(playerid)
{
	if(TDSpecialBarTittle[playerid] != PlayerText:INVALID_TEXT_DRAW)
	{
		return 1;
	}
	return 0;
}

stock CreatePlayerSpecialBar(playerid, tittle[], text[], Float:max, color)
{
	//Titulo y fondo
	TextDrawShowForPlayer(playerid, TDSpecialBarBOX);
	if(TDSpecialBarTittle[playerid] != PlayerText:INVALID_TEXT_DRAW)
	{
		PlayerTextDrawDestroy(playerid, TDSpecialBarTittle[playerid]);
	}
	TDSpecialBarTittle[playerid] = CreatePlayerTextDraw(playerid, 531.999389, 136.964920, tittle);
	PlayerTextDrawLetterSize(playerid, TDSpecialBarTittle[playerid], 0.354797, 1.189329);
	PlayerTextDrawTextSize(playerid, TDSpecialBarTittle[playerid], 628.000000, -14.933332);
	PlayerTextDrawAlignment(playerid, TDSpecialBarTittle[playerid], 1);
	PlayerTextDrawColor(playerid, TDSpecialBarTittle[playerid], -1061109505);
	PlayerTextDrawSetShadow(playerid, TDSpecialBarTittle[playerid], 0);
	PlayerTextDrawSetOutline(playerid, TDSpecialBarTittle[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, TDSpecialBarTittle[playerid], 255);
	PlayerTextDrawFont(playerid, TDSpecialBarTittle[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TDSpecialBarTittle[playerid], 1);
	PlayerTextDrawShow(playerid, TDSpecialBarTittle[playerid]);

	//Texto y fondo
	TextDrawShowForPlayer(playerid, TDSpecialBarFondo);
	if(TDSpecialBarText[playerid] != PlayerText:INVALID_TEXT_DRAW)
	{
		PlayerTextDrawDestroy(playerid, TDSpecialBarText[playerid]);
	}
	TDSpecialBarText[playerid] = CreatePlayerTextDraw(playerid, 535.319885, 155.543731, text);
	PlayerTextDrawLetterSize(playerid, TDSpecialBarText[playerid], 0.310797, 1.107195);
	PlayerTextDrawTextSize(playerid, TDSpecialBarText[playerid], 628.000000, -14.933332);
	PlayerTextDrawAlignment(playerid, TDSpecialBarText[playerid], 1);
	PlayerTextDrawColor(playerid, TDSpecialBarText[playerid], -1);
	PlayerTextDrawSetShadow(playerid, TDSpecialBarText[playerid], 0);
	PlayerTextDrawSetOutline(playerid, TDSpecialBarText[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, TDSpecialBarText[playerid], 255);
	PlayerTextDrawFont(playerid, TDSpecialBarText[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TDSpecialBarText[playerid], 1);
	PlayerTextDrawShow(playerid, TDSpecialBarText[playerid]);

	//Barra
	if(BSpecialBar[playerid] != INVALID_PLAYER_BAR_ID)
	{
		DestroyPlayerProgressBar(playerid, BSpecialBar[playerid]);
	}
	BSpecialBar[playerid] = CreatePlayerProgressBar(playerid, 537.00, 170.00, 79.50, 1.50, color, max);
	ShowPlayerProgressBar(playerid, BSpecialBar[playerid]);
	return 1;
}

stock DestroyPlayerSpecialBar(playerid)
{
	//Titulo y fondo
	TextDrawHideForPlayer(playerid, TDSpecialBarBOX);
	if(TDSpecialBarTittle[playerid] != PlayerText:INVALID_TEXT_DRAW)
	{
		PlayerTextDrawDestroy(playerid, TDSpecialBarTittle[playerid]);
		TDSpecialBarTittle[playerid] = PlayerText:INVALID_TEXT_DRAW;
	}

	//Texto y fondo
	TextDrawHideForPlayer(playerid, TDSpecialBarFondo);
	if(TDSpecialBarText[playerid] != PlayerText:INVALID_TEXT_DRAW)
	{
		PlayerTextDrawDestroy(playerid, TDSpecialBarText[playerid]);
		TDSpecialBarText[playerid] = PlayerText:INVALID_TEXT_DRAW;
	}

	//Barra
	if(BSpecialBar[playerid] != INVALID_PLAYER_BAR_ID)
	{
		DestroyPlayerProgressBar(playerid, BSpecialBar[playerid]);
		BSpecialBar[playerid] = INVALID_PLAYER_BAR_ID;
	}
	return 1;
}

stock SetPlayerSpecialBarValue(playerid, Float:value)
{
	if(BSpecialBar[playerid] != INVALID_PLAYER_BAR_ID)
	{
		SetPlayerProgressBarValue(playerid, BSpecialBar[playerid], value);
		ShowPlayerProgressBar(playerid, BSpecialBar[playerid]);
	}
	return 1;
}

/*
SetPlayerSpecialBarValue (playerid, Float: value);
DestroyPlayerSpecialBar(playerid)*/

stock EmpezarGuerraBigFoot(famid)
{
	LaboratorioBigFoot[labAtacante] = famid;
    LaboratorioBigFoot[labTiempoGuerra] = 60*5;
    GangZoneFlashForAll(LaboratorioBigFoot[labGangZoneID], C_GZ_EN_GUERRA);
	return 1;
}

stock EmpezarGuerraBlackAso(famid)
{
	FabricaBlackAso[fabAtacante] = famid;
    FabricaBlackAso[fabTiempoGuerra] = 60*5;
	return 1;
}

	CMD:necesidades(playerid, params[])
	{
		if(InfoJugador[playerid][jNecesidades] == 0)
		    Dialog(playerid, dNecesidades, DIALOG_STYLE_LIST, ""#CROJO"Mostrar necesidades", ""#CROJO"Mostrar necesidades permanentemente\nMostrar necesidades cada 15 minutos\nOcultar permanentemente", "Aceptar", "Cancelar");

		else if(InfoJugador[playerid][jNecesidades] == 1)
		    Dialog(playerid, dNecesidades, DIALOG_STYLE_LIST, ""#CROJO"Mostrar necesidades", "Mostrar necesidades permanentemente\n"#CROJO"Mostrar necesidades cada 15 minutos\nOcultar permanentemente", "Aceptar", "Cancelar");

		else if(InfoJugador[playerid][jNecesidades] == 2)
		    Dialog(playerid, dNecesidades, DIALOG_STYLE_LIST, ""#CROJO"Mostrar necesidades", "Mostrar necesidades permanentemente\nMostrar necesidades cada 15 minutos\n"#CROJO"Ocultar permanentemente", "Aceptar", "Cancelar");

		return 1;
	}

	CMD:conquistar(playerid,params[])
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, CORDS_LAB_BIGFOOT_EXT))
	    {
	        new
	            Leader = InfoJugador[playerid][jLiderFam];

			if(!Leader)
			    return Error(playerid, "~r~No eres lider de familia.");

			if(InfoFamilia[Leader][fPandilla])
			    return Error(playerid, "~r~Las pandillas no pueden conquistar laboratorios, sólo familias");

			if(Leader == LaboratorioBigFoot[labFamDominante])
			    return Error(playerid, "~r~El laboratorio ya pertenece a tu familia, retrasado.");

			if(LaboratorioBigFoot[labTiempoGuerra])
			    return Error(playerid, "~r~El laboratorio ya está en disputa.");

			static
				UltimaGuerra;

			if(UltimaGuerra > gettime())
			    return Error(playerid, "~r~Deben pasar 6 horas desde la última conquista.");

			if(GetPlayersInBigFoot(Leader) < MIN_ATACANTES_BIGFOOT)
			    return Error(playerid, "~r~Deben haber mínimo "#MIN_ATACANTES_BIGFOOT" miembros de tu familia presentes en el territorio para poder iniciar la conquista.");

			new
			    string[100];

			A_Format(string, ""#CROJO"[ALERTA] "#CBLANCO"La familia "#CAMARILLO"%s "#CBLANCO"quiere conquistar Bigfoot, ¡a defenderlo!", GetFamName(Leader) );

			if(LaboratorioBigFoot[labFamDominante])
			{
				MensajeFamilia(LaboratorioBigFoot[labFamDominante], string);
			}
			else
			{
			    Loop(i, MAX_FAMILIAS, 0)
			    {
			        if(IsValidFam(i))
			        {
				        if(InfoFamilia[i][fPandilla] == false)
				        {
				            MensajeFamilia(i, string);
						}
					}
				}
			}
			UltimaGuerra = gettime() + (3600 * 6);

			EmpezarGuerraBigFoot(Leader);
	        return 1;
		}
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, CORDS_FAB_BLACKASO_EXT))
	    {
	        new
	            Leader = InfoJugador[playerid][jLiderFam];

			if(!Leader)
			    return Error(playerid, "~r~No eres lider de familia.");

			if(Leader == FabricaBlackAso[fabFamDominante])
			    return Error(playerid, "~r~La fábrica ya pertenece a tu familia, retrasado.");

			if(FabricaBlackAso[fabTiempoGuerra])
			    return Error(playerid, "~r~La fábrica ya está en disputa.");

			static
				UltimaGuerra;

			if(UltimaGuerra > gettime())
			    return Error(playerid, "~r~Deben pasar 6 horas desde la última conquista.");

			if(GetPlayersInBlackAso2(Leader) < MIN_ATACANTES_BIGFOOT)
			    return Error(playerid, "~r~Deben haber mínimo "#MIN_ATACANTES_BIGFOOT" miembros de tu familia presentes en el territorio para poder iniciar la conquista.");

			new
			    string[100];

			A_Format(string, ""#CROJO"[ALERTA] "#CBLANCO"La familia "#CAMARILLO"%s "#CBLANCO"quiere conquistar Black Asociation, ¡a defenderlo!", GetFamName(Leader) );

			if(FabricaBlackAso[fabFamDominante])
			{
				MensajeFamilia(FabricaBlackAso[fabFamDominante], string);
			}
			else
			{
			    Loop(i, MAX_FAMILIAS, 0)
			    {
			        if(IsValidFam(i))
			        {
				        if(InfoFamilia[i][fPandilla] == false)
				        {
				            MensajeFamilia(i, string);
						}
					}
				}
			}
			UltimaGuerra = gettime() + (3600 * 6);

			EmpezarGuerraBlackAso(Leader);

			foreach(Player, i)
			{
			    if(ID_Familia(i) == Leader)
			    {
			        if(IsPlayerInRangeOfPoint(i, 10.0, CORDS_FAB_BLACKASO_EXT))
			        {
						CongelarEx(i, 2);
						SetPlayerInterior(i, 2);
						SetPlayerVirtualWorld(i, VW_BLACKASO);
						SetPlayerPos(i, CORDS_FAB_BLACKASO_INT);
						SetPlayerFacingAngle(i, 270.0);
					}
				}
			}
	        return 1;
		}
	    if(!InfoFamilia[ID_Familia(playerid)][fPandilla]) return Error(playerid,"¡No perteneces a una pandilla!");
		new GZ = GetPlayerGangZone(playerid);

		if(GZ == -1) return Error(playerid, "¡No estas en una zona conquistable!");
		if(InfoGZ[GZ][gzPandilla]) return Error(playerid,"Para conquistar una zona con pandilla, debes generar una guerra ahi.");
		if(gzAtacadaPor[GZ] != -1) return Error(playerid,"¡Ya hay una guerra de bandas aca!");
		if(PandillerosEnGangZone(ID_Familia(playerid), GZ) < MIN_ATACANTES_GZ) return Error(playerid,"Deben haber "#MIN_ATACANTES_GZ"atacantes en la zona, minimo");

		gzAtacadaPor[GZ] = ID_Familia(playerid);
		gzTiempo[GZ] = 0;
		GangZoneFlashForAll(InfoGZ[GZ][gzID], C_GZ_EN_GUERRA );

		new
			MapIconID,
			Float:Poss[3];

		GetPlayerPos(playerid, Poss[0], Poss[1], Poss[2]);

		switch(ID_Familia(playerid))
		{
		    case 1: //Grooves
		    {
		        MapIconID = 62;
			}
			case 2: //Ballas
			{
		        MapIconID = 59;
			}
			case 3: //Sureños
			{
		        MapIconID = 58;
			}
			default: MapIconID = 58;
		}
		foreach(Player, i)
		{
		    if(ID_Familia(i) && InfoFamilia[ID_Familia(i)][fPandilla])
		    {
		        MensajeF(i,-1, "¡Los %s quieren conquistar una zona! "#CROJO"Se marcó su posición con el icono", InfoFamilia[ID_Familia(playerid)][fNombre] );
		        SetPlayerMapIcon(i, MI_GANGWARS, Poss[0], Poss[1], 5.0, MapIconID, -1, MAPICON_GLOBAL);
			}
		}


		return 1;
	}

	CMD:actualizararchivos(playerid,params[])
	{
	    if(!EsDueno(playerid)) return Error(playerid,"¡Comando autorizado solo para dueños!");
		//Casas
		new TickC = GetTickCount();
		foreach(Casas,i)
		{
			ActualizarCasa(i);
		}
		//garages
		foreach(Garages,i)
		{
			ActualizarGarage(i);
		}
		//negocios
		foreach(Negocios,i)
		{
			ActualizarNegocio(i);
		}
		//usuarios
		foreach(Player,i)
		{
			ActualizarCuenta(i);
			ActualizarAccesorios(playerid, -1);
		}
		TextoTodos("~p~ACTUALIZADO: ~w~Archivos de configuracion",6000,3);
		printf(" - Todos los archivos de configuración actualizados. [%s | TIEMPO: %d MS]",pName(playerid),GetTickCount() - TickC);
		MensajeF(playerid,-1," - Todos los archivos de configuración actualizados. [%s | TIEMPO: %d MS]",pName(playerid),GetTickCount() - TickC);
		return 1;
	}

	CMD:idgz(playerid,params[])
	{
		if(GetPlayerGangZone(playerid) == -1) return Error(playerid,"No se encontro ninguna GangZone en tu posición.");
		return MensajeF(playerid,-1,"El ID de esta GangZone, es: "#CVERDE"%d", GetPlayerGangZone(playerid) );
	}

stock encode_tires(tire1, tire2, tire3, tire4)
{
	return tire1 | (tire2 << 1) | (tire3 << 2) | (tire4 << 3);
}

stock encode_panels(flp, frp, rlp, rrp, windshield, front_bumper, rear_bumper)
{
    return flp | (frp << 4) | (rlp << 8) | (rrp << 12) | (windshield << 16) | (front_bumper << 20) | (rear_bumper << 24);
}
stock encode_doors(bonnet, boot, driver_door, passenger_door, behind_driver_door, behind_passenger_door)
{
    #pragma unused behind_driver_door
    #pragma unused behind_passenger_door
    return bonnet | (boot << 8) | (driver_door << 16) | (passenger_door << 24);
}
stock encode_lights(light1, light2, light3, light4)
{
    return light1 | (light2 << 1) | (light3 << 2) | (light4 << 3);
}

CALLBACK: GetPlayerAdminLevelOP(playerid)
	return InfoJugador[playerid][jAdmin];

	CMD:irobjt(playerid, params[])
	{
	    if(Staff(playerid, Dueno))
	        return 1;

		new
			obj;

		if(sscanf(params, "i", obj))
		    return ParamsINC(playerid, "/irobjt [ID-OBJ]");

		if(!(0 <= obj < MAX_OBJETOS_T))
		    return Error(playerid, "ID de objeto inexistente.");

		if(ObjetoTirado[obj][obj_t_Type] == 0)
		    return Error(playerid, "ID de objeto inexistente.");

		SetPlayerPos(playerid, ObjetoTirado[obj][obj_t_x], ObjetoTirado[obj][obj_t_y], ObjetoTirado[obj][obj_t_z]);
		SetPlayerVirtualWorld(playerid, ObjetoTirado[obj][obj_t_vw]);
		MensajeF(playerid, -1, "Teleportado al obj: %d", obj);
		return 1;
	}

	CMD:verobjt(playerid, params[])
	{
	    if(Staff(playerid, Dueno))
	        return 1;

//		if(sscanf(params, "iI(0)", type, extraT))
//			return ParamsINC(playerid, "/verobjt [1 = todos] [2 = cajas & paquetes] [3 = cajas] [4 = paquetes] [5 = armas] [6 = extraT] [Opcional: ed]");

		new
		    str[60],
			str2[150];

		foreach(ObjetosTirados, i)
		{
		    if(ObjectData[ObjetoTirado[i][obj_t_Type]][invSize] < 5) continue;

		    static
		        a;

			if(ObjetoTirado[i][obj_t_z] > 600.0)
				format(str, 60, "(%d) INT %s[%d] |", i, ObjectData[ObjetoTirado[i][obj_t_Type]][invName], ObjetoTirado[i][obj_t_Data]);

			else
				format(str, 60, "(%d) %s[%d] |", i, ObjectData[ObjetoTirado[i][obj_t_Type]][invName], ObjetoTirado[i][obj_t_Data]);

			print(str);
			print(str2);
			if(a == 0 || a == 1)
			{
				strcat(str2, str);
				i++;
			}
			else
			{
		    	SendClientMessage(playerid, -1, str2);
			    strclr(str);
			    strclr(str2);
				i = 0;
			}
		}
		return 1;
	}
	CMD:darobj(playerid, params[])
	{
	    if(Staff(playerid, Dueno))
	        return 1;

		new
		    lugar, object, extradata, log[100];

		if(sscanf(params, "uiiI(0)", params[0], lugar, object, extradata)) return ParamsINC(playerid, "/darobjeto [id] [lugar] [id de objeto] [opcional: extradata]");
		if(params[0] == INVALID_PLAYER_ID) return Error(playerid, "¡Jugador desconectado!");
		if(!(0 <= object < sizeof (ObjectData)))  return Error (playerid, "Objeto inválido.");

		ItemInventario[params[0]][lugar][invObject] = object;
		ItemInventario[params[0]][lugar][invData] = extradata;
		MensajeAdminF(C_ROJO, "[ADMINISTRACIÓN] "#CBLANCO"%s le dió a %s un/a %s (%d) (lugar %d, ED: %d)", Dueno, NombreJugador_(playerid), NombreJugador_(params[0]), ObjectData[object][invName], object, lugar, extradata);
		A_Format(log, "%s le dio a %s un/a %s (Lugar: %d | ED: %d)", pName (playerid), NombreJugador_(params[0]), ObjectData[object][invName], log, extradata);
		Log("admins", log);
		return 1;
	}

	CMD:llenarinv(playerid, params[])
	{
	    if(Staff(playerid, Dueno))
	        return 1;

		new
 			object, extradata, log[100];

		if(sscanf(params, "uiI(0)", playerid, object, extradata)) return ParamsINC(playerid, "/llenarinv [id] [id de objeto] [opcional: extradata]");
		if(playerid == INVALID_PLAYER_ID) return Error(playerid, "¡Jugador desconectado!");
		if(!(0 <= object < sizeof (ObjectData)))  return Error(playerid, "Objeto inválido.");

		for(new lugar; lugar < MAX_ITEMS_INVENTARIO; lugar++)
		{
			ItemInventario[playerid][lugar][invObject] = object;
			ItemInventario[playerid][lugar][invData] = extradata;
		}
		MensajeAdminF(C_ROJO, "[ADMINISTRACIÓN] "#CBLANCO"%s le llenó a %s el inventario de %s (ID: %d, ED: %d)", Dueno, NombreJugador_(playerid), NombreJugador_(params[0]), ObjectData[object][invName], object, extradata);
		A_Format(log, "%s le lleno el inv a %s de %s (ED: %d)", pName (playerid), pName(params[0]), ObjectData[object][invName], extradata);
		Log("admins", log);
		return 1;
	}

	CMD:buscarobj(playerid, params[])
	{
	    if (Staff(playerid, Dueno))
	        return 1;

		if (isnull(params))
		    return ParamsINC (playerid, "/buscarobj [nombre/parte del nombre]");

		Loop (i, sizeof(ObjectData), 0)
		{
		    if (strfind (ObjectData[i][invName], params, true) != -1)
		    {
		        MensajeF (playerid, -1, "(%d) %s", i, ObjectData[i][invName]);
			}
		}
		return 1;
	}

	CMD:verobj(playerid, params[])
	{
	    if(Staff(playerid, Dueno))
	        return 1;

		new
		    str[60],
			str2[150];

		for(new i; i < sizeof(ObjectData); i++)
		{
		    static
		        a;

		    format(str, 60, " (%d) %s |", i, ObjectData[i][invName]);
			if(a == 0 || a == 1)
			{
				strcat(str2, str);
				a++;
			}
			else if(a == 2)
			{
		    	SendClientMessage(playerid, -1, str2);
		    	strclr(str);
		    	strclr(str2);
				a = 0;
			}
		}
		return 1;
	}

	CMD:forzarimportaciones(playerid, params[])
	{
	    if(Staff(playerid, Dueno)) return 1;

		ImportarArmas();
		return 1;
	}

	CMD:texture(playerid, params[])
	{
	    new
			objectid,
			index,
			modelid,
			texture[40],
			txd[40],
			color;

		if(sscanf(params, "p< >iiis[40]s[40]H(0xABCD)", objectid, index, modelid, texture, txd, color))
		    return Mensaje(playerid, -1, "/texture objectid index modelid texture txd color");

		if(color == 0xABCD)
		{
			SetDynamicObjectMaterial(objectid, index, modelid, texture, txd, 0);
		}
		else
		{
			SetDynamicObjectMaterial(objectid, index, modelid, texture, txd, color);
		}
		return 1;
	}
	CMD:recibirstats(playerid, params[]){
		if(InfoJugador[playerid][jNivel] >= 2) return Mensaje(playerid, -1, "¡Ya usaste este comando, no seas avaricioso!"); //Aparece esto cuando uses el comando por 2da vez
		InfoJugador[playerid][jNivel] = 2; //El nivel que te dará cuando hayas puesto el comando
		GivePlayerMoney(playerid, 100000);//El dinero que te dará cuando hayas puesto el comando
		Mensaje(playerid, 0x00FF00FF, "¡Has recibido 100.000$, disfrútalos!");//Todo esto te dirá cuando hallas puesto el comando, lo pueden editar
		Mensaje(playerid, 0x00FF00FF, "Has recibido nivel dos.");
		Mensaje(playerid, 0x00FF00FF, "Nota: Si haces multicuenta serás baneado automáticamente, nuestro sistema lo detectará.");

		Mensaje(playerid, -1, "¡Felicidades, has recibido tus stats, disfrútalos!");
		return 1;
	}


	AbreviarCMD(celular,cel);
	AbreviarCMD(acciones,animaciones);
	AbreviarCMD(acciones,anims);
	AbreviarCMD(reportar,re);
	AbreviarCMD(fac,f);
	AbreviarCMD(recargar,rec);
	AbreviarCMD(megafono,m);
	AbreviarCMD(inventario,inv);
	AbreviarCMD(colgar,col);
	AbreviarCMD(descolgar,descol);
	AbreviarCMD(walkietalkie,wt);
	AbreviarCMD(mear,orinar);
	AbreviarCMD(informacion,info);
